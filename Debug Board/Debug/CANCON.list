
CANCON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800cd88  0800cd88  0001cd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d430  0800d430  00020348  2**0
                  CONTENTS
  4 .ARM          00000000  0800d430  0800d430  00020348  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d430  0800d430  00020348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d430  0800d430  0001d430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d434  0800d434  0001d434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  0800d438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031d0  20000348  0800d780  00020348  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003518  0800d780  00023518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012326  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a67  00000000  00000000  0003269e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00035108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00036138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d389  00000000  00000000  00037030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001208c  00000000  00000000  000543b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a89a6  00000000  00000000  00066445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010edeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005adc  00000000  00000000  0010ee40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000348 	.word	0x20000348
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd6c 	.word	0x0800cd6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	0800cd6c 	.word	0x0800cd6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <delay>:
#define timer htim2


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <delay+0x30>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000d06:	bf00      	nop
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <delay+0x30>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3f9      	bcc.n	8000d08 <delay+0x14>
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	2000343c 	.word	0x2000343c

08000d28 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f004 f8da 	bl	8004ef8 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	461a      	mov	r2, r3
 8000d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <send_to_lcd+0xa0>)
 8000d58:	f004 f8ce 	bl	8004ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <send_to_lcd+0xa0>)
 8000d6e:	f004 f8c3 	bl	8004ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	085b      	lsrs	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	2102      	movs	r1, #2
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <send_to_lcd+0xa4>)
 8000d84:	f004 f8b8 	bl	8004ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	2101      	movs	r1, #1
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <send_to_lcd+0xa4>)
 8000d96:	f004 f8af 	bl	8004ef8 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f004 f8a9 	bl	8004ef8 <HAL_GPIO_WritePin>
	delay (20);
 8000da6:	2014      	movs	r0, #20
 8000da8:	f7ff ffa4 	bl	8000cf4 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f004 f8a0 	bl	8004ef8 <HAL_GPIO_WritePin>
	delay (20);
 8000db8:	2014      	movs	r0, #20
 8000dba:	f7ff ff9b 	bl	8000cf4 <delay>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	48001000 	.word	0x48001000
 8000dcc:	48000400 	.word	0x48000400

08000dd0 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff9f 	bl	8000d28 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff96 	bl	8000d28 <send_to_lcd>
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2101      	movs	r1, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff85 	bl	8000d28 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff7c 	bl	8000d28 <send_to_lcd>
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <lcd_put_cur>:
	lcd_send_cmd(0x01);
	delay(2000);
}

void lcd_put_cur(int row, int col)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    switch (row)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <lcd_put_cur+0x18>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d005      	beq.n	8000e5a <lcd_put_cur+0x22>
 8000e4e:	e009      	b.n	8000e64 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e56:	603b      	str	r3, [r7, #0]
            break;
 8000e58:	e004      	b.n	8000e64 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e60:	603b      	str	r3, [r7, #0]
            break;
 8000e62:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffb1 	bl	8000dd0 <lcd_send_cmd>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <lcd_init>:


void lcd_init (void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay(5000);  // wait for >40ms
 8000e7a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e7e:	f7ff ff39 	bl	8000cf4 <delay>
	lcd_send_cmd (0x30);
 8000e82:	2030      	movs	r0, #48	; 0x30
 8000e84:	f7ff ffa4 	bl	8000dd0 <lcd_send_cmd>
	delay(5000);  // wait for >4.1ms
 8000e88:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e8c:	f7ff ff32 	bl	8000cf4 <delay>
	lcd_send_cmd (0x30);
 8000e90:	2030      	movs	r0, #48	; 0x30
 8000e92:	f7ff ff9d 	bl	8000dd0 <lcd_send_cmd>
	delay(100);  // wait for >100us
 8000e96:	2064      	movs	r0, #100	; 0x64
 8000e98:	f7ff ff2c 	bl	8000cf4 <delay>
	lcd_send_cmd (0x30);
 8000e9c:	2030      	movs	r0, #48	; 0x30
 8000e9e:	f7ff ff97 	bl	8000dd0 <lcd_send_cmd>
	delay(10000);
 8000ea2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ea6:	f7ff ff25 	bl	8000cf4 <delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000eaa:	2020      	movs	r0, #32
 8000eac:	f7ff ff90 	bl	8000dd0 <lcd_send_cmd>
	delay(10000);
 8000eb0:	f242 7010 	movw	r0, #10000	; 0x2710
 8000eb4:	f7ff ff1e 	bl	8000cf4 <delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000eb8:	2028      	movs	r0, #40	; 0x28
 8000eba:	f7ff ff89 	bl	8000dd0 <lcd_send_cmd>
	delay(1000);
 8000ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec2:	f7ff ff17 	bl	8000cf4 <delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ec6:	2008      	movs	r0, #8
 8000ec8:	f7ff ff82 	bl	8000dd0 <lcd_send_cmd>
	delay(1000);
 8000ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ed0:	f7ff ff10 	bl	8000cf4 <delay>
	lcd_send_cmd (0x01);  // clear display
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff ff7b 	bl	8000dd0 <lcd_send_cmd>
	delay(1000);
 8000eda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ede:	f7ff ff09 	bl	8000cf4 <delay>
	delay(1000);
 8000ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee6:	f7ff ff05 	bl	8000cf4 <delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000eea:	2006      	movs	r0, #6
 8000eec:	f7ff ff70 	bl	8000dd0 <lcd_send_cmd>
	delay(1000);
 8000ef0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef4:	f7ff fefe 	bl	8000cf4 <delay>
	lcd_send_cmd (0x0F); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ef8:	200f      	movs	r0, #15
 8000efa:	f7ff ff69 	bl	8000dd0 <lcd_send_cmd>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f0a:	e006      	b.n	8000f1a <lcd_send_string+0x18>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff75 	bl	8000e04 <lcd_send_data>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f4      	bne.n	8000f0c <lcd_send_string+0xa>
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	0000      	movs	r0, r0
	...

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b5b0      	push	{r4, r5, r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Get variables from Flash Memory

	CAN_IDs=(*(__IO uint32_t *) 0x0800F800);
 8000f36:	4bac      	ldr	r3, [pc, #688]	; (80011e8 <main+0x2b8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4bab      	ldr	r3, [pc, #684]	; (80011ec <main+0x2bc>)
 8000f3e:	601a      	str	r2, [r3, #0]
	memcpy(id_arr, wordToBytes(CAN_IDs), 4);
 8000f40:	4baa      	ldr	r3, [pc, #680]	; (80011ec <main+0x2bc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fb8b 	bl	8003660 <wordToBytes>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4ba7      	ldr	r3, [pc, #668]	; (80011f0 <main+0x2c0>)
 8000f52:	601a      	str	r2, [r3, #0]
	can_id_1=id_arr[0];
 8000f54:	4ba6      	ldr	r3, [pc, #664]	; (80011f0 <main+0x2c0>)
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	4ba6      	ldr	r3, [pc, #664]	; (80011f4 <main+0x2c4>)
 8000f5a:	701a      	strb	r2, [r3, #0]
	can_id_2=id_arr[1];
 8000f5c:	4ba4      	ldr	r3, [pc, #656]	; (80011f0 <main+0x2c0>)
 8000f5e:	785a      	ldrb	r2, [r3, #1]
 8000f60:	4ba5      	ldr	r3, [pc, #660]	; (80011f8 <main+0x2c8>)
 8000f62:	701a      	strb	r2, [r3, #0]
	can_id_3=id_arr[2];
 8000f64:	4ba2      	ldr	r3, [pc, #648]	; (80011f0 <main+0x2c0>)
 8000f66:	789a      	ldrb	r2, [r3, #2]
 8000f68:	4ba4      	ldr	r3, [pc, #656]	; (80011fc <main+0x2cc>)
 8000f6a:	701a      	strb	r2, [r3, #0]
	//if duplicate IDs set IDs to 1, 2, and 3 respectively
	if(can_id_1==can_id_2 || can_id_1==can_id_3||can_id_2==can_id_3){
 8000f6c:	4ba1      	ldr	r3, [pc, #644]	; (80011f4 <main+0x2c4>)
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	4ba1      	ldr	r3, [pc, #644]	; (80011f8 <main+0x2c8>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d00b      	beq.n	8000f90 <main+0x60>
 8000f78:	4b9e      	ldr	r3, [pc, #632]	; (80011f4 <main+0x2c4>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	4b9f      	ldr	r3, [pc, #636]	; (80011fc <main+0x2cc>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d005      	beq.n	8000f90 <main+0x60>
 8000f84:	4b9c      	ldr	r3, [pc, #624]	; (80011f8 <main+0x2c8>)
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	4b9c      	ldr	r3, [pc, #624]	; (80011fc <main+0x2cc>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d108      	bne.n	8000fa2 <main+0x72>
		can_id_1=1;
 8000f90:	4b98      	ldr	r3, [pc, #608]	; (80011f4 <main+0x2c4>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
		can_id_2=2;
 8000f96:	4b98      	ldr	r3, [pc, #608]	; (80011f8 <main+0x2c8>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	701a      	strb	r2, [r3, #0]
		can_id_3=3;
 8000f9c:	4b97      	ldr	r3, [pc, #604]	; (80011fc <main+0x2cc>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	701a      	strb	r2, [r3, #0]
	}

	//get the baud rate
	baud_pos=(uint8_t)(*(__IO uint32_t *) 0x0800F804);
 8000fa2:	4b97      	ldr	r3, [pc, #604]	; (8001200 <main+0x2d0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	4b96      	ldr	r3, [pc, #600]	; (8001204 <main+0x2d4>)
 8000faa:	701a      	strb	r2, [r3, #0]
	//if invalid baud rate then set to 1M
	if(baud_pos<0||baud_pos>3)
 8000fac:	4b95      	ldr	r3, [pc, #596]	; (8001204 <main+0x2d4>)
 8000fae:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db04      	blt.n	8000fc0 <main+0x90>
 8000fb6:	4b93      	ldr	r3, [pc, #588]	; (8001204 <main+0x2d4>)
 8000fb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	dd02      	ble.n	8000fc6 <main+0x96>
		baud_pos=3;
 8000fc0:	4b90      	ldr	r3, [pc, #576]	; (8001204 <main+0x2d4>)
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	701a      	strb	r2, [r3, #0]
	PSC=pow(2,4-baud_pos);//set prescaler
 8000fc6:	4b8f      	ldr	r3, [pc, #572]	; (8001204 <main+0x2d4>)
 8000fc8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fcc:	f1c3 0304 	rsb	r3, r3, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff faa7 	bl	8000524 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	ec43 2b11 	vmov	d1, r2, r3
 8000fde:	ed9f 0b80 	vldr	d0, [pc, #512]	; 80011e0 <main+0x2b0>
 8000fe2:	f00a ff19 	bl	800be18 <pow>
 8000fe6:	ec53 2b10 	vmov	r2, r3, d0
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fddb 	bl	8000ba8 <__aeabi_d2uiz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b84      	ldr	r3, [pc, #528]	; (8001208 <main+0x2d8>)
 8000ff8:	701a      	strb	r2, [r3, #0]

	//get the number of delays between samples
	num_delays=(uint8_t)(*(__IO uint32_t *) 0x0800F808);
 8000ffa:	4b84      	ldr	r3, [pc, #528]	; (800120c <main+0x2dc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b83      	ldr	r3, [pc, #524]	; (8001210 <main+0x2e0>)
 8001002:	701a      	strb	r2, [r3, #0]
	if(num_delays<(uint8_t)0)
		num_delays=0;

	// retrieve the analog enabled booleans
	enable_word=(*(__IO uint32_t *) 0x0800F80C);
 8001004:	4b83      	ldr	r3, [pc, #524]	; (8001214 <main+0x2e4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b83      	ldr	r3, [pc, #524]	; (8001218 <main+0x2e8>)
 800100c:	601a      	str	r2, [r3, #0]
	memcpy(analog_enable_arr, wordToBytes(enable_word), 4);
 800100e:	4b82      	ldr	r3, [pc, #520]	; (8001218 <main+0x2e8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fb24 	bl	8003660 <wordToBytes>
 8001018:	4603      	mov	r3, r0
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b7f      	ldr	r3, [pc, #508]	; (800121c <main+0x2ec>)
 8001020:	601a      	str	r2, [r3, #0]
	//invert values so the default is on after erasing the memory
	analog_1_enabled=!analog_enable_arr[0];
 8001022:	4b7e      	ldr	r3, [pc, #504]	; (800121c <main+0x2ec>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	bf0c      	ite	eq
 800102a:	2301      	moveq	r3, #1
 800102c:	2300      	movne	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	4b7b      	ldr	r3, [pc, #492]	; (8001220 <main+0x2f0>)
 8001034:	701a      	strb	r2, [r3, #0]
	analog_2_enabled=!analog_enable_arr[1];
 8001036:	4b79      	ldr	r3, [pc, #484]	; (800121c <main+0x2ec>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	4b77      	ldr	r3, [pc, #476]	; (8001224 <main+0x2f4>)
 8001048:	701a      	strb	r2, [r3, #0]
	analog_3_enabled=!analog_enable_arr[2];
 800104a:	4b74      	ldr	r3, [pc, #464]	; (800121c <main+0x2ec>)
 800104c:	789b      	ldrb	r3, [r3, #2]
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	4b73      	ldr	r3, [pc, #460]	; (8001228 <main+0x2f8>)
 800105c:	701a      	strb	r2, [r3, #0]

	//get the offsets
	analog_1_offset=(*(__IO uint32_t *) 0x0800F810);
 800105e:	4b73      	ldr	r3, [pc, #460]	; (800122c <main+0x2fc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a73      	ldr	r2, [pc, #460]	; (8001230 <main+0x300>)
 8001064:	6013      	str	r3, [r2, #0]
	analog_2_offset=(*(__IO uint32_t *) 0x0800F814);
 8001066:	4b73      	ldr	r3, [pc, #460]	; (8001234 <main+0x304>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a73      	ldr	r2, [pc, #460]	; (8001238 <main+0x308>)
 800106c:	6013      	str	r3, [r2, #0]
	analog_3_offset=(*(__IO uint32_t *) 0x0800F818);
 800106e:	4b73      	ldr	r3, [pc, #460]	; (800123c <main+0x30c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a73      	ldr	r2, [pc, #460]	; (8001240 <main+0x310>)
 8001074:	6013      	str	r3, [r2, #0]


	// Set the headers for the first analog device
	headers_1.StdId = can_id_1; // set the CAN ID
 8001076:	4b5f      	ldr	r3, [pc, #380]	; (80011f4 <main+0x2c4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b71      	ldr	r3, [pc, #452]	; (8001244 <main+0x314>)
 800107e:	601a      	str	r2, [r3, #0]
	headers_1.IDE = CAN_ID_STD;
 8001080:	4b70      	ldr	r3, [pc, #448]	; (8001244 <main+0x314>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
	headers_1.RTR = CAN_RTR_DATA;
 8001086:	4b6f      	ldr	r3, [pc, #444]	; (8001244 <main+0x314>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
	headers_1.DLC = sizeof(a_data_1); // set the size of the data
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <main+0x314>)
 800108e:	2202      	movs	r2, #2
 8001090:	611a      	str	r2, [r3, #16]
	headers_1.TransmitGlobalTime = DISABLE; // disable transmission of time
 8001092:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <main+0x314>)
 8001094:	2200      	movs	r2, #0
 8001096:	751a      	strb	r2, [r3, #20]

	// Set the headers for the second analog device
	headers_2.StdId = can_id_2; // set the CAN ID
 8001098:	4b57      	ldr	r3, [pc, #348]	; (80011f8 <main+0x2c8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <main+0x318>)
 80010a0:	601a      	str	r2, [r3, #0]
	headers_2.IDE = CAN_ID_STD;
 80010a2:	4b69      	ldr	r3, [pc, #420]	; (8001248 <main+0x318>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
	headers_2.RTR = CAN_RTR_DATA;
 80010a8:	4b67      	ldr	r3, [pc, #412]	; (8001248 <main+0x318>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
	headers_2.DLC = sizeof(a_data_2); // set the size of the data
 80010ae:	4b66      	ldr	r3, [pc, #408]	; (8001248 <main+0x318>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	611a      	str	r2, [r3, #16]
	headers_2.TransmitGlobalTime = DISABLE; // disable transmission of time
 80010b4:	4b64      	ldr	r3, [pc, #400]	; (8001248 <main+0x318>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	751a      	strb	r2, [r3, #20]

	// Set the headers for the third analog device
	headers_3.StdId = can_id_3; // set the CAN ID
 80010ba:	4b50      	ldr	r3, [pc, #320]	; (80011fc <main+0x2cc>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	4b62      	ldr	r3, [pc, #392]	; (800124c <main+0x31c>)
 80010c2:	601a      	str	r2, [r3, #0]
	headers_3.IDE = CAN_ID_STD;
 80010c4:	4b61      	ldr	r3, [pc, #388]	; (800124c <main+0x31c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
	headers_3.RTR = CAN_RTR_DATA;
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <main+0x31c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
	headers_3.DLC = sizeof(a_data_3); // set the size of the data
 80010d0:	4b5e      	ldr	r3, [pc, #376]	; (800124c <main+0x31c>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	611a      	str	r2, [r3, #16]
	headers_3.TransmitGlobalTime = DISABLE; // disable transmission of time
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <main+0x31c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	751a      	strb	r2, [r3, #20]


	//Save the stored values to the menus
	//set the baud rate
	memset(temp,0,17); // erase the temp array
 80010dc:	2211      	movs	r2, #17
 80010de:	2100      	movs	r1, #0
 80010e0:	485b      	ldr	r0, [pc, #364]	; (8001250 <main+0x320>)
 80010e2:	f006 fa11 	bl	8007508 <memset>
	strncpy(temp, "Baud rate:  ",16); // copy the string to the temp array (limiting the length to 16 characters)
 80010e6:	2210      	movs	r2, #16
 80010e8:	495a      	ldr	r1, [pc, #360]	; (8001254 <main+0x324>)
 80010ea:	4859      	ldr	r0, [pc, #356]	; (8001250 <main+0x320>)
 80010ec:	f007 f8fb 	bl	80082e6 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <main+0x2d4>)
 80010f2:	f993 3000 	ldrsb.w	r3, [r3]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4a57      	ldr	r2, [pc, #348]	; (8001258 <main+0x328>)
 80010fa:	4413      	add	r3, r2
 80010fc:	2211      	movs	r2, #17
 80010fe:	4619      	mov	r1, r3
 8001100:	4853      	ldr	r0, [pc, #332]	; (8001250 <main+0x320>)
 8001102:	f007 f8b8 	bl	8008276 <strlcat>
	strlcpy(can_menu[1],temp,17);
 8001106:	2211      	movs	r2, #17
 8001108:	4951      	ldr	r1, [pc, #324]	; (8001250 <main+0x320>)
 800110a:	4854      	ldr	r0, [pc, #336]	; (800125c <main+0x32c>)
 800110c:	f007 f8d6 	bl	80082bc <strlcpy>

	//set can IDs
	memset(temp,0,17); // erase the temp array
 8001110:	2211      	movs	r2, #17
 8001112:	2100      	movs	r1, #0
 8001114:	484e      	ldr	r0, [pc, #312]	; (8001250 <main+0x320>)
 8001116:	f006 f9f7 	bl	8007508 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 800111a:	2210      	movs	r2, #16
 800111c:	4950      	ldr	r1, [pc, #320]	; (8001260 <main+0x330>)
 800111e:	484c      	ldr	r0, [pc, #304]	; (8001250 <main+0x320>)
 8001120:	f007 f8e1 	bl	80082e6 <strncpy>
	strcat(temp, "1:    ");
 8001124:	484a      	ldr	r0, [pc, #296]	; (8001250 <main+0x320>)
 8001126:	f7ff f853 	bl	80001d0 <strlen>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b48      	ldr	r3, [pc, #288]	; (8001250 <main+0x320>)
 8001130:	4413      	add	r3, r2
 8001132:	4a4c      	ldr	r2, [pc, #304]	; (8001264 <main+0x334>)
 8001134:	6810      	ldr	r0, [r2, #0]
 8001136:	6018      	str	r0, [r3, #0]
 8001138:	8891      	ldrh	r1, [r2, #4]
 800113a:	7992      	ldrb	r2, [r2, #6]
 800113c:	8099      	strh	r1, [r3, #4]
 800113e:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8001140:	2210      	movs	r2, #16
 8001142:	2100      	movs	r1, #0
 8001144:	4848      	ldr	r0, [pc, #288]	; (8001268 <main+0x338>)
 8001146:	f006 f9df 	bl	8007508 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <main+0x2c4>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4946      	ldr	r1, [pc, #280]	; (800126c <main+0x33c>)
 8001152:	4845      	ldr	r0, [pc, #276]	; (8001268 <main+0x338>)
 8001154:	f007 f860 	bl	8008218 <siprintf>
	strlcat(temp, char_arr,17);
 8001158:	2211      	movs	r2, #17
 800115a:	4943      	ldr	r1, [pc, #268]	; (8001268 <main+0x338>)
 800115c:	483c      	ldr	r0, [pc, #240]	; (8001250 <main+0x320>)
 800115e:	f007 f88a 	bl	8008276 <strlcat>
	memcpy(can_menu[2],temp,17);
 8001162:	4b43      	ldr	r3, [pc, #268]	; (8001270 <main+0x340>)
 8001164:	4a3a      	ldr	r2, [pc, #232]	; (8001250 <main+0x320>)
 8001166:	3322      	adds	r3, #34	; 0x22
 8001168:	6815      	ldr	r5, [r2, #0]
 800116a:	6854      	ldr	r4, [r2, #4]
 800116c:	6890      	ldr	r0, [r2, #8]
 800116e:	68d1      	ldr	r1, [r2, #12]
 8001170:	601d      	str	r5, [r3, #0]
 8001172:	605c      	str	r4, [r3, #4]
 8001174:	6098      	str	r0, [r3, #8]
 8001176:	60d9      	str	r1, [r3, #12]
 8001178:	7c12      	ldrb	r2, [r2, #16]
 800117a:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 800117c:	2211      	movs	r2, #17
 800117e:	2100      	movs	r1, #0
 8001180:	4833      	ldr	r0, [pc, #204]	; (8001250 <main+0x320>)
 8001182:	f006 f9c1 	bl	8007508 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8001186:	2210      	movs	r2, #16
 8001188:	4935      	ldr	r1, [pc, #212]	; (8001260 <main+0x330>)
 800118a:	4831      	ldr	r0, [pc, #196]	; (8001250 <main+0x320>)
 800118c:	f007 f8ab 	bl	80082e6 <strncpy>
	strcat(temp, "2:    ");
 8001190:	482f      	ldr	r0, [pc, #188]	; (8001250 <main+0x320>)
 8001192:	f7ff f81d 	bl	80001d0 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <main+0x320>)
 800119c:	4413      	add	r3, r2
 800119e:	4a35      	ldr	r2, [pc, #212]	; (8001274 <main+0x344>)
 80011a0:	6810      	ldr	r0, [r2, #0]
 80011a2:	6018      	str	r0, [r3, #0]
 80011a4:	8891      	ldrh	r1, [r2, #4]
 80011a6:	7992      	ldrb	r2, [r2, #6]
 80011a8:	8099      	strh	r1, [r3, #4]
 80011aa:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 80011ac:	2210      	movs	r2, #16
 80011ae:	2100      	movs	r1, #0
 80011b0:	482d      	ldr	r0, [pc, #180]	; (8001268 <main+0x338>)
 80011b2:	f006 f9a9 	bl	8007508 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <main+0x2c8>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	492b      	ldr	r1, [pc, #172]	; (800126c <main+0x33c>)
 80011be:	482a      	ldr	r0, [pc, #168]	; (8001268 <main+0x338>)
 80011c0:	f007 f82a 	bl	8008218 <siprintf>
	strlcat(temp, char_arr,17);
 80011c4:	2211      	movs	r2, #17
 80011c6:	4928      	ldr	r1, [pc, #160]	; (8001268 <main+0x338>)
 80011c8:	4821      	ldr	r0, [pc, #132]	; (8001250 <main+0x320>)
 80011ca:	f007 f854 	bl	8008276 <strlcat>
	memcpy(can_menu[3],temp,17);
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <main+0x340>)
 80011d0:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <main+0x320>)
 80011d2:	3333      	adds	r3, #51	; 0x33
 80011d4:	6815      	ldr	r5, [r2, #0]
 80011d6:	6854      	ldr	r4, [r2, #4]
 80011d8:	6890      	ldr	r0, [r2, #8]
 80011da:	68d1      	ldr	r1, [r2, #12]
 80011dc:	e04c      	b.n	8001278 <main+0x348>
 80011de:	bf00      	nop
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40000000 	.word	0x40000000
 80011e8:	0800f800 	.word	0x0800f800
 80011ec:	200033c8 	.word	0x200033c8
 80011f0:	200003a4 	.word	0x200003a4
 80011f4:	20003420 	.word	0x20003420
 80011f8:	20001410 	.word	0x20001410
 80011fc:	20000398 	.word	0x20000398
 8001200:	0800f804 	.word	0x0800f804
 8001204:	2000015f 	.word	0x2000015f
 8001208:	20000000 	.word	0x20000000
 800120c:	0800f808 	.word	0x0800f808
 8001210:	20000386 	.word	0x20000386
 8001214:	0800f80c 	.word	0x0800f80c
 8001218:	20001414 	.word	0x20001414
 800121c:	200033d8 	.word	0x200033d8
 8001220:	20000001 	.word	0x20000001
 8001224:	20000002 	.word	0x20000002
 8001228:	20000003 	.word	0x20000003
 800122c:	0800f810 	.word	0x0800f810
 8001230:	20000364 	.word	0x20000364
 8001234:	0800f814 	.word	0x0800f814
 8001238:	20000368 	.word	0x20000368
 800123c:	0800f818 	.word	0x0800f818
 8001240:	2000036c 	.word	0x2000036c
 8001244:	20001364 	.word	0x20001364
 8001248:	20003424 	.word	0x20003424
 800124c:	2000134c 	.word	0x2000134c
 8001250:	200013a8 	.word	0x200013a8
 8001254:	0800cd88 	.word	0x0800cd88
 8001258:	0800cef8 	.word	0x0800cef8
 800125c:	2000005d 	.word	0x2000005d
 8001260:	0800cd98 	.word	0x0800cd98
 8001264:	0800cda0 	.word	0x0800cda0
 8001268:	2000348c 	.word	0x2000348c
 800126c:	0800cda8 	.word	0x0800cda8
 8001270:	2000004c 	.word	0x2000004c
 8001274:	0800cdb0 	.word	0x0800cdb0
 8001278:	601d      	str	r5, [r3, #0]
 800127a:	605c      	str	r4, [r3, #4]
 800127c:	6098      	str	r0, [r3, #8]
 800127e:	60d9      	str	r1, [r3, #12]
 8001280:	7c12      	ldrb	r2, [r2, #16]
 8001282:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 8001284:	2211      	movs	r2, #17
 8001286:	2100      	movs	r1, #0
 8001288:	48bc      	ldr	r0, [pc, #752]	; (800157c <main+0x64c>)
 800128a:	f006 f93d 	bl	8007508 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 800128e:	2210      	movs	r2, #16
 8001290:	49bb      	ldr	r1, [pc, #748]	; (8001580 <main+0x650>)
 8001292:	48ba      	ldr	r0, [pc, #744]	; (800157c <main+0x64c>)
 8001294:	f007 f827 	bl	80082e6 <strncpy>
	strcat(temp, "3:    ");
 8001298:	48b8      	ldr	r0, [pc, #736]	; (800157c <main+0x64c>)
 800129a:	f7fe ff99 	bl	80001d0 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4bb6      	ldr	r3, [pc, #728]	; (800157c <main+0x64c>)
 80012a4:	4413      	add	r3, r2
 80012a6:	4ab7      	ldr	r2, [pc, #732]	; (8001584 <main+0x654>)
 80012a8:	6810      	ldr	r0, [r2, #0]
 80012aa:	6018      	str	r0, [r3, #0]
 80012ac:	8891      	ldrh	r1, [r2, #4]
 80012ae:	7992      	ldrb	r2, [r2, #6]
 80012b0:	8099      	strh	r1, [r3, #4]
 80012b2:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 80012b4:	2210      	movs	r2, #16
 80012b6:	2100      	movs	r1, #0
 80012b8:	48b3      	ldr	r0, [pc, #716]	; (8001588 <main+0x658>)
 80012ba:	f006 f925 	bl	8007508 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 80012be:	4bb3      	ldr	r3, [pc, #716]	; (800158c <main+0x65c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	49b2      	ldr	r1, [pc, #712]	; (8001590 <main+0x660>)
 80012c6:	48b0      	ldr	r0, [pc, #704]	; (8001588 <main+0x658>)
 80012c8:	f006 ffa6 	bl	8008218 <siprintf>
	strlcat(temp, char_arr,17);
 80012cc:	2211      	movs	r2, #17
 80012ce:	49ae      	ldr	r1, [pc, #696]	; (8001588 <main+0x658>)
 80012d0:	48aa      	ldr	r0, [pc, #680]	; (800157c <main+0x64c>)
 80012d2:	f006 ffd0 	bl	8008276 <strlcat>
	memcpy(can_menu[4],temp,17);
 80012d6:	4baf      	ldr	r3, [pc, #700]	; (8001594 <main+0x664>)
 80012d8:	4aa8      	ldr	r2, [pc, #672]	; (800157c <main+0x64c>)
 80012da:	f103 0444 	add.w	r4, r3, #68	; 0x44
 80012de:	4615      	mov	r5, r2
 80012e0:	6828      	ldr	r0, [r5, #0]
 80012e2:	6869      	ldr	r1, [r5, #4]
 80012e4:	68aa      	ldr	r2, [r5, #8]
 80012e6:	68eb      	ldr	r3, [r5, #12]
 80012e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ea:	7c2b      	ldrb	r3, [r5, #16]
 80012ec:	7023      	strb	r3, [r4, #0]

	//Delay
	memset(temp,0,17); // erase the temp array
 80012ee:	2211      	movs	r2, #17
 80012f0:	2100      	movs	r1, #0
 80012f2:	48a2      	ldr	r0, [pc, #648]	; (800157c <main+0x64c>)
 80012f4:	f006 f908 	bl	8007508 <memset>
	strncpy(temp, "Delay:   ",16); // copy the string to the temp array (limiting the length to 16 characters)
 80012f8:	2210      	movs	r2, #16
 80012fa:	49a7      	ldr	r1, [pc, #668]	; (8001598 <main+0x668>)
 80012fc:	489f      	ldr	r0, [pc, #636]	; (800157c <main+0x64c>)
 80012fe:	f006 fff2 	bl	80082e6 <strncpy>
	memset(char_arr, 0, 16);
 8001302:	2210      	movs	r2, #16
 8001304:	2100      	movs	r1, #0
 8001306:	48a0      	ldr	r0, [pc, #640]	; (8001588 <main+0x658>)
 8001308:	f006 f8fe 	bl	8007508 <memset>
	sprintf(char_arr, "%05d", us*(num_delays+1));
 800130c:	4ba3      	ldr	r3, [pc, #652]	; (800159c <main+0x66c>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	461a      	mov	r2, r3
 8001314:	4ba2      	ldr	r3, [pc, #648]	; (80015a0 <main+0x670>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	fb03 f302 	mul.w	r3, r3, r2
 800131e:	461a      	mov	r2, r3
 8001320:	49a0      	ldr	r1, [pc, #640]	; (80015a4 <main+0x674>)
 8001322:	4899      	ldr	r0, [pc, #612]	; (8001588 <main+0x658>)
 8001324:	f006 ff78 	bl	8008218 <siprintf>
	strcat(temp, char_arr);
 8001328:	4997      	ldr	r1, [pc, #604]	; (8001588 <main+0x658>)
 800132a:	4894      	ldr	r0, [pc, #592]	; (800157c <main+0x64c>)
 800132c:	f006 ff94 	bl	8008258 <strcat>
	strlcat(temp,"us",17);
 8001330:	2211      	movs	r2, #17
 8001332:	499d      	ldr	r1, [pc, #628]	; (80015a8 <main+0x678>)
 8001334:	4891      	ldr	r0, [pc, #580]	; (800157c <main+0x64c>)
 8001336:	f006 ff9e 	bl	8008276 <strlcat>
	memcpy(main_menu[3],temp,17);
 800133a:	4b9c      	ldr	r3, [pc, #624]	; (80015ac <main+0x67c>)
 800133c:	4a8f      	ldr	r2, [pc, #572]	; (800157c <main+0x64c>)
 800133e:	3333      	adds	r3, #51	; 0x33
 8001340:	6815      	ldr	r5, [r2, #0]
 8001342:	6854      	ldr	r4, [r2, #4]
 8001344:	6890      	ldr	r0, [r2, #8]
 8001346:	68d1      	ldr	r1, [r2, #12]
 8001348:	601d      	str	r5, [r3, #0]
 800134a:	605c      	str	r4, [r3, #4]
 800134c:	6098      	str	r0, [r3, #8]
 800134e:	60d9      	str	r1, [r3, #12]
 8001350:	7c12      	ldrb	r2, [r2, #16]
 8001352:	741a      	strb	r2, [r3, #16]

	//Analog enabled bools
	if(!analog_1_enabled)
 8001354:	4b96      	ldr	r3, [pc, #600]	; (80015b0 <main+0x680>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10b      	bne.n	8001374 <main+0x444>
		memcpy(analog_menu[5],"Analog 1:    OFF",17);
 800135c:	4b95      	ldr	r3, [pc, #596]	; (80015b4 <main+0x684>)
 800135e:	4a96      	ldr	r2, [pc, #600]	; (80015b8 <main+0x688>)
 8001360:	f103 0555 	add.w	r5, r3, #85	; 0x55
 8001364:	4614      	mov	r4, r2
 8001366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001368:	6028      	str	r0, [r5, #0]
 800136a:	6069      	str	r1, [r5, #4]
 800136c:	60aa      	str	r2, [r5, #8]
 800136e:	60eb      	str	r3, [r5, #12]
 8001370:	7823      	ldrb	r3, [r4, #0]
 8001372:	742b      	strb	r3, [r5, #16]
	if(!analog_2_enabled)
 8001374:	4b91      	ldr	r3, [pc, #580]	; (80015bc <main+0x68c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10b      	bne.n	8001394 <main+0x464>
		memcpy(analog_menu[6],"Analog 2:    OFF",17);
 800137c:	4b8d      	ldr	r3, [pc, #564]	; (80015b4 <main+0x684>)
 800137e:	4a90      	ldr	r2, [pc, #576]	; (80015c0 <main+0x690>)
 8001380:	f103 0566 	add.w	r5, r3, #102	; 0x66
 8001384:	4614      	mov	r4, r2
 8001386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001388:	6028      	str	r0, [r5, #0]
 800138a:	6069      	str	r1, [r5, #4]
 800138c:	60aa      	str	r2, [r5, #8]
 800138e:	60eb      	str	r3, [r5, #12]
 8001390:	7823      	ldrb	r3, [r4, #0]
 8001392:	742b      	strb	r3, [r5, #16]
	if(!analog_3_enabled)
 8001394:	4b8b      	ldr	r3, [pc, #556]	; (80015c4 <main+0x694>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10b      	bne.n	80013b4 <main+0x484>
		memcpy(analog_menu[7],"Analog 3:    OFF",17);
 800139c:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <main+0x684>)
 800139e:	4a8a      	ldr	r2, [pc, #552]	; (80015c8 <main+0x698>)
 80013a0:	f103 0577 	add.w	r5, r3, #119	; 0x77
 80013a4:	4614      	mov	r4, r2
 80013a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a8:	6028      	str	r0, [r5, #0]
 80013aa:	6069      	str	r1, [r5, #4]
 80013ac:	60aa      	str	r2, [r5, #8]
 80013ae:	60eb      	str	r3, [r5, #12]
 80013b0:	7823      	ldrb	r3, [r4, #0]
 80013b2:	742b      	strb	r3, [r5, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f002 fd60 	bl	8003e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 f93c 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f000 fb2c 	bl	8001a18 <MX_GPIO_Init>
  MX_CAN_Init();
 80013c0:	f000 f996 	bl	80016f0 <MX_CAN_Init>
  MX_SDADC1_Init();
 80013c4:	f000 f9d8 	bl	8001778 <MX_SDADC1_Init>
  MX_SDADC2_Init();
 80013c8:	f000 fa12 	bl	80017f0 <MX_SDADC2_Init>
  MX_SDADC3_Init();
 80013cc:	f000 fa4e 	bl	800186c <MX_SDADC3_Init>
  MX_TIM2_Init();
 80013d0:	f000 fa88 	bl	80018e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013d4:	f000 fad2 	bl	800197c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//start timer
 80013d8:	487c      	ldr	r0, [pc, #496]	; (80015cc <main+0x69c>)
 80013da:	f005 fbf3 	bl	8006bc4 <HAL_TIM_Base_Start>

	//initialize LCD
	lcd_init();
 80013de:	f7ff fd4a 	bl	8000e76 <lcd_init>
	lcd_put_cur(0,0);
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fd27 	bl	8000e38 <lcd_put_cur>
	lcd_send_string("Starting Up...");
 80013ea:	4879      	ldr	r0, [pc, #484]	; (80015d0 <main+0x6a0>)
 80013ec:	f7ff fd89 	bl	8000f02 <lcd_send_string>
	HAL_Delay(1000);
 80013f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f4:	f002 fda6 	bl	8003f44 <HAL_Delay>
	lcd_put_cur(0,0);
 80013f8:	2100      	movs	r1, #0
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fd1c 	bl	8000e38 <lcd_put_cur>
	lcd_send_string("Initializing CAN");
 8001400:	4874      	ldr	r0, [pc, #464]	; (80015d4 <main+0x6a4>)
 8001402:	f7ff fd7e 	bl	8000f02 <lcd_send_string>
	HAL_Delay(1000);
 8001406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140a:	f002 fd9b 	bl	8003f44 <HAL_Delay>

	//setup CAN filter
	can_filter.FilterMaskIdHigh = 0x0000;
 800140e:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <main+0x6a8>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8001414:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <main+0x6a8>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800141a:	4b6f      	ldr	r3, [pc, #444]	; (80015d8 <main+0x6a8>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
	can_filter.FilterBank = 0;
 8001420:	4b6d      	ldr	r3, [pc, #436]	; (80015d8 <main+0x6a8>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001426:	4b6c      	ldr	r3, [pc, #432]	; (80015d8 <main+0x6a8>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800142c:	4b6a      	ldr	r3, [pc, #424]	; (80015d8 <main+0x6a8>)
 800142e:	2201      	movs	r2, #1
 8001430:	61da      	str	r2, [r3, #28]
	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001432:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <main+0x6a8>)
 8001434:	2201      	movs	r2, #1
 8001436:	621a      	str	r2, [r3, #32]
	//check that CAN Filter was setup correctly
	if (HAL_CAN_ConfigFilter(&hcan, &can_filter) != HAL_OK) {
 8001438:	4967      	ldr	r1, [pc, #412]	; (80015d8 <main+0x6a8>)
 800143a:	4868      	ldr	r0, [pc, #416]	; (80015dc <main+0x6ac>)
 800143c:	f002 fea1 	bl	8004182 <HAL_CAN_ConfigFilter>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <main+0x51a>
		Error_Handler();
 8001446:	f002 fa37 	bl	80038b8 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800144a:	4864      	ldr	r0, [pc, #400]	; (80015dc <main+0x6ac>)
 800144c:	f002 ff63 	bl	8004316 <HAL_CAN_Start>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <main+0x52a>
		Error_Handler();
 8001456:	f002 fa2f 	bl	80038b8 <Error_Handler>
	}

	//display main menu
	lcd_put_cur(0,0);
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff fceb 	bl	8000e38 <lcd_put_cur>
	//the string is copied to temp to remove the null character at the end of the string in the menu
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8001462:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <main+0x6b0>)
 8001464:	f993 3000 	ldrsb.w	r3, [r3]
 8001468:	461a      	mov	r2, r3
 800146a:	4613      	mov	r3, r2
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	4a4e      	ldr	r2, [pc, #312]	; (80015ac <main+0x67c>)
 8001472:	4413      	add	r3, r2
 8001474:	2210      	movs	r2, #16
 8001476:	4619      	mov	r1, r3
 8001478:	4840      	ldr	r0, [pc, #256]	; (800157c <main+0x64c>)
 800147a:	f006 ff34 	bl	80082e6 <strncpy>
 800147e:	4603      	mov	r3, r0
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fd3e 	bl	8000f02 <lcd_send_string>
	lcd_put_cur(1,0);
 8001486:	2100      	movs	r1, #0
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff fcd5 	bl	8000e38 <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 800148e:	4b54      	ldr	r3, [pc, #336]	; (80015e0 <main+0x6b0>)
 8001490:	f993 3000 	ldrsb.w	r3, [r3]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	4613      	mov	r3, r2
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	4a43      	ldr	r2, [pc, #268]	; (80015ac <main+0x67c>)
 800149e:	4413      	add	r3, r2
 80014a0:	2210      	movs	r2, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	4835      	ldr	r0, [pc, #212]	; (800157c <main+0x64c>)
 80014a6:	f006 ff1e 	bl	80082e6 <strncpy>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fd28 	bl	8000f02 <lcd_send_string>
	lcd_put_cur(0,0);
 80014b2:	2100      	movs	r1, #0
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fcbf 	bl	8000e38 <lcd_put_cur>

	int display_counter=0;//counter used in updating the display
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
	int16_t timer_compensation=0;//compensation for when the operations within the loop take too long
 80014be:	2300      	movs	r3, #0
 80014c0:	807b      	strh	r3, [r7, #2]

	//calibrate the SDADCs
	calibrateSDADC(&hsdadc1, SDADC_CHANNEL_1);
 80014c2:	4948      	ldr	r1, [pc, #288]	; (80015e4 <main+0x6b4>)
 80014c4:	4848      	ldr	r0, [pc, #288]	; (80015e8 <main+0x6b8>)
 80014c6:	f002 f8eb 	bl	80036a0 <calibrateSDADC>
	calibrateSDADC(&hsdadc2, SDADC_CHANNEL_0);
 80014ca:	2101      	movs	r1, #1
 80014cc:	4847      	ldr	r0, [pc, #284]	; (80015ec <main+0x6bc>)
 80014ce:	f002 f8e7 	bl	80036a0 <calibrateSDADC>
	calibrateSDADC(&hsdadc3, SDADC_CHANNEL_4);
 80014d2:	4947      	ldr	r1, [pc, #284]	; (80015f0 <main+0x6c0>)
 80014d4:	4847      	ldr	r0, [pc, #284]	; (80015f4 <main+0x6c4>)
 80014d6:	f002 f8e3 	bl	80036a0 <calibrateSDADC>
	HAL_Delay(300);
 80014da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014de:	f002 fd31 	bl	8003f44 <HAL_Delay>

	//start ADC conversion interrupts
	if(analog_1_enabled)
 80014e2:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <main+0x680>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <main+0x5c0>
		HAL_SDADC_Start_IT(&hsdadc1);
 80014ea:	483f      	ldr	r0, [pc, #252]	; (80015e8 <main+0x6b8>)
 80014ec:	f005 f985 	bl	80067fa <HAL_SDADC_Start_IT>
	if(analog_2_enabled)
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <main+0x68c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <main+0x5ce>
		HAL_SDADC_Start_IT(&hsdadc2);
 80014f8:	483c      	ldr	r0, [pc, #240]	; (80015ec <main+0x6bc>)
 80014fa:	f005 f97e 	bl	80067fa <HAL_SDADC_Start_IT>
	if(analog_3_enabled)
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <main+0x694>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <main+0x5dc>
		HAL_SDADC_Start_IT(&hsdadc3);
 8001506:	483b      	ldr	r0, [pc, #236]	; (80015f4 <main+0x6c4>)
 8001508:	f005 f977 	bl	80067fa <HAL_SDADC_Start_IT>

	// start can timer
	TIM3->ARR = ((num_delays+1)*us) - 1;
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <main+0x670>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a22      	ldr	r2, [pc, #136]	; (800159c <main+0x66c>)
 8001514:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001518:	fb02 f303 	mul.w	r3, r2, r3
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <main+0x6c8>)
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim3);
 8001522:	4836      	ldr	r0, [pc, #216]	; (80015fc <main+0x6cc>)
 8001524:	f005 fbae 	bl	8006c84 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//start ADC conversion interrupts
		if(analog_1_enabled)
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <main+0x680>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <main+0x606>
			HAL_SDADC_Start_IT(&hsdadc1);
 8001530:	482d      	ldr	r0, [pc, #180]	; (80015e8 <main+0x6b8>)
 8001532:	f005 f962 	bl	80067fa <HAL_SDADC_Start_IT>
		if(analog_2_enabled)
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <main+0x68c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <main+0x614>
			HAL_SDADC_Start_IT(&hsdadc2);
 800153e:	482b      	ldr	r0, [pc, #172]	; (80015ec <main+0x6bc>)
 8001540:	f005 f95b 	bl	80067fa <HAL_SDADC_Start_IT>
		if(analog_3_enabled)
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <main+0x694>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <main+0x622>
			HAL_SDADC_Start_IT(&hsdadc3);
 800154c:	4829      	ldr	r0, [pc, #164]	; (80015f4 <main+0x6c4>)
 800154e:	f005 f954 	bl	80067fa <HAL_SDADC_Start_IT>


		//Delay between samples
		if ((int16_t)__HAL_TIM_GET_COUNTER(&htim2) >= us);
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <main+0x69c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim2,0); // reset timer
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <main+0x69c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
			//reset display counter (waits 200 delays between updates to the display in the display values menu)
			if(display_counter>200)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2bc8      	cmp	r3, #200	; 0xc8
 8001564:	dd01      	ble.n	800156a <main+0x63a>
				display_counter=0;
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]

			//Display analog values on display
			if(in_main_menu && menu_pos==2 && change_value_bool && display_counter==0)
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <main+0x6d0>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d052      	beq.n	8001618 <main+0x6e8>
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <main+0x6b0>)
 8001574:	f993 3000 	ldrsb.w	r3, [r3]
 8001578:	2b02      	cmp	r3, #2
 800157a:	e043      	b.n	8001604 <main+0x6d4>
 800157c:	200013a8 	.word	0x200013a8
 8001580:	0800cd98 	.word	0x0800cd98
 8001584:	0800cdb8 	.word	0x0800cdb8
 8001588:	2000348c 	.word	0x2000348c
 800158c:	20000398 	.word	0x20000398
 8001590:	0800cda8 	.word	0x0800cda8
 8001594:	2000004c 	.word	0x2000004c
 8001598:	0800cdc0 	.word	0x0800cdc0
 800159c:	20000160 	.word	0x20000160
 80015a0:	20000386 	.word	0x20000386
 80015a4:	0800cdcc 	.word	0x0800cdcc
 80015a8:	0800cdd4 	.word	0x0800cdd4
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000001 	.word	0x20000001
 80015b4:	200000b4 	.word	0x200000b4
 80015b8:	0800cdd8 	.word	0x0800cdd8
 80015bc:	20000002 	.word	0x20000002
 80015c0:	0800cdec 	.word	0x0800cdec
 80015c4:	20000003 	.word	0x20000003
 80015c8:	0800ce00 	.word	0x0800ce00
 80015cc:	2000343c 	.word	0x2000343c
 80015d0:	0800ce14 	.word	0x0800ce14
 80015d4:	0800ce24 	.word	0x0800ce24
 80015d8:	200023b8 	.word	0x200023b8
 80015dc:	2000137c 	.word	0x2000137c
 80015e0:	20000383 	.word	0x20000383
 80015e4:	00010002 	.word	0x00010002
 80015e8:	200023e0 	.word	0x200023e0
 80015ec:	200033dc 	.word	0x200033dc
 80015f0:	00040010 	.word	0x00040010
 80015f4:	2000349c 	.word	0x2000349c
 80015f8:	40000400 	.word	0x40000400
 80015fc:	200013c0 	.word	0x200013c0
 8001600:	2000015e 	.word	0x2000015e
 8001604:	d108      	bne.n	8001618 <main+0x6e8>
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <main+0x6fc>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <main+0x6e8>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <main+0x6e8>
				displayValues();
 8001614:	f001 fe80 	bl	8003318 <displayValues>

			//increment counters
			display_counter++;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3301      	adds	r3, #1
 800161c:	607b      	str	r3, [r7, #4]
			btn_counter++;
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <main+0x700>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b02      	ldr	r3, [pc, #8]	; (8001630 <main+0x700>)
 8001628:	801a      	strh	r2, [r3, #0]
		if(analog_1_enabled)
 800162a:	e77d      	b.n	8001528 <main+0x5f8>
 800162c:	20000387 	.word	0x20000387
 8001630:	20000388 	.word	0x20000388

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b09a      	sub	sp, #104	; 0x68
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800163e:	2228      	movs	r2, #40	; 0x28
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f005 ff60 	bl	8007508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001658:	463b      	mov	r3, r7
 800165a:	222c      	movs	r2, #44	; 0x2c
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f005 ff52 	bl	8007508 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001664:	2301      	movs	r3, #1
 8001666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800166e:	2300      	movs	r3, #0
 8001670:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001672:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001676:	4618      	mov	r0, r3
 8001678:	f003 fc8e 	bl	8004f98 <HAL_RCC_OscConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8001682:	f002 f919 	bl	80038b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001686:	230f      	movs	r3, #15
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800168a:	2301      	movs	r3, #1
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800169c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f004 fb80 	bl	8005da8 <HAL_RCC_ClockConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80016ae:	f002 f903 	bl	80038b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDADC;
 80016b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016b6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV4;
 80016b8:	f04f 4308 	mov.w	r3, #2281701376	; 0x88000000
 80016bc:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016be:	463b      	mov	r3, r7
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 fd59 	bl	8006178 <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016cc:	f002 f8f4 	bl	80038b8 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 80016d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016d4:	f003 fc40 	bl	8004f58 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG2);
 80016d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016dc:	f003 fc3c 	bl	8004f58 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 80016e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016e4:	f003 fc38 	bl	8004f58 <HAL_PWREx_EnableSDADC>
}
 80016e8:	bf00      	nop
 80016ea:	3768      	adds	r7, #104	; 0x68
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MX_CAN_Init+0x7c>)
 80016f6:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <MX_CAN_Init+0x80>)
 80016f8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_CAN_Init+0x7c>)
 80016fc:	2202      	movs	r2, #2
 80016fe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_CAN_Init+0x7c>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_CAN_Init+0x7c>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_CAN_Init+0x7c>)
 800170e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001712:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_CAN_Init+0x7c>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_CAN_Init+0x7c>)
 800171c:	2200      	movs	r2, #0
 800171e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_CAN_Init+0x7c>)
 8001722:	2200      	movs	r2, #0
 8001724:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_CAN_Init+0x7c>)
 8001728:	2200      	movs	r2, #0
 800172a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_CAN_Init+0x7c>)
 800172e:	2200      	movs	r2, #0
 8001730:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_CAN_Init+0x7c>)
 8001734:	2200      	movs	r2, #0
 8001736:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_CAN_Init+0x7c>)
 800173a:	2200      	movs	r2, #0
 800173c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <MX_CAN_Init+0x7c>)
 8001740:	f002 fc24 	bl	8003f8c <HAL_CAN_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800174a:	f002 f8b5 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	//set the prescaler to the right value for the stored baud rate
	hcan.Init.Prescaler = PSC;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_CAN_Init+0x84>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <MX_CAN_Init+0x7c>)
 8001756:	605a      	str	r2, [r3, #4]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_CAN_Init+0x7c>)
 800175a:	f002 fc17 	bl	8003f8c <HAL_CAN_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_CAN_Init+0x78>
	{
		Error_Handler();
 8001764:	f002 f8a8 	bl	80038b8 <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000137c 	.word	0x2000137c
 8001770:	40006400 	.word	0x40006400
 8001774:	20000000 	.word	0x20000000

08001778 <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 800177e:	463b      	mov	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC1_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_SDADC1_Init+0x70>)
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <MX_SDADC1_Init+0x74>)
 800178e:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_SDADC1_Init+0x70>)
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MX_SDADC1_Init+0x70>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_SDADC1_Init+0x70>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_SDADC1_Init+0x70>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 80017a8:	480f      	ldr	r0, [pc, #60]	; (80017e8 <MX_SDADC1_Init+0x70>)
 80017aa:	f004 fe59 	bl	8006460 <HAL_SDADC_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SDADC1_Init+0x40>
  {
    Error_Handler();
 80017b4:	f002 f880 	bl	80038b8 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 80017b8:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80017bc:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	461a      	mov	r2, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_SDADC1_Init+0x70>)
 80017d2:	f004 fec9 	bl	8006568 <HAL_SDADC_PrepareChannelConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_SDADC1_Init+0x68>
  {
    Error_Handler();
 80017dc:	f002 f86c 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200023e0 	.word	0x200023e0
 80017ec:	40016000 	.word	0x40016000

080017f0 <MX_SDADC2_Init>:
  * @brief SDADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC2_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC2_Init 0 */

  /* USER CODE END SDADC2_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 80017f6:	463b      	mov	r3, r7
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC2_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc2.Instance = SDADC2;
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <MX_SDADC2_Init+0x74>)
 8001804:	4a18      	ldr	r2, [pc, #96]	; (8001868 <MX_SDADC2_Init+0x78>)
 8001806:	601a      	str	r2, [r3, #0]
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <MX_SDADC2_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
  hsdadc2.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_SDADC2_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  hsdadc2.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <MX_SDADC2_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  hsdadc2.Init.ReferenceVoltage = SDADC_VREF_EXT;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_SDADC2_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 8001820:	4810      	ldr	r0, [pc, #64]	; (8001864 <MX_SDADC2_Init+0x74>)
 8001822:	f004 fe1d 	bl	8006460 <HAL_SDADC_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_SDADC2_Init+0x40>
  {
    Error_Handler();
 800182c:	f002 f844 	bl	80038b8 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001830:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001834:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VDDA;
 800183a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800183e:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001844:	463b      	mov	r3, r7
 8001846:	461a      	mov	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	4806      	ldr	r0, [pc, #24]	; (8001864 <MX_SDADC2_Init+0x74>)
 800184c:	f004 fe8c 	bl	8006568 <HAL_SDADC_PrepareChannelConfig>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_SDADC2_Init+0x6a>
  {
    Error_Handler();
 8001856:	f002 f82f 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC2_Init 2 */

  /* USER CODE END SDADC2_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200033dc 	.word	0x200033dc
 8001868:	40016400 	.word	0x40016400

0800186c <MX_SDADC3_Init>:
  * @brief SDADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC3_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC3_Init 0 */

  /* USER CODE END SDADC3_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001872:	463b      	mov	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC3_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc3.Instance = SDADC3;
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <MX_SDADC3_Init+0x70>)
 8001880:	4a17      	ldr	r2, [pc, #92]	; (80018e0 <MX_SDADC3_Init+0x74>)
 8001882:	601a      	str	r2, [r3, #0]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_SDADC3_Init+0x70>)
 8001886:	2200      	movs	r2, #0
 8001888:	605a      	str	r2, [r3, #4]
  hsdadc3.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_SDADC3_Init+0x70>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_SDADC3_Init+0x70>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_SDADC3_Init+0x70>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 800189c:	480f      	ldr	r0, [pc, #60]	; (80018dc <MX_SDADC3_Init+0x70>)
 800189e:	f004 fddf 	bl	8006460 <HAL_SDADC_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_SDADC3_Init+0x40>
  {
    Error_Handler();
 80018a8:	f002 f806 	bl	80038b8 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 80018ac:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80018b0:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	461a      	mov	r2, r3
 80018c2:	2100      	movs	r1, #0
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_SDADC3_Init+0x70>)
 80018c6:	f004 fe4f 	bl	8006568 <HAL_SDADC_PrepareChannelConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_SDADC3_Init+0x68>
  {
    Error_Handler();
 80018d0:	f001 fff2 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC3_Init 2 */

  /* USER CODE END SDADC3_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2000349c 	.word	0x2000349c
 80018e0:	40016800 	.word	0x40016800

080018e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	463b      	mov	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_TIM2_Init+0x94>)
 8001902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001906:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <MX_TIM2_Init+0x94>)
 800190a:	220f      	movs	r2, #15
 800190c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_TIM2_Init+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <MX_TIM2_Init+0x94>)
 8001916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191c:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_TIM2_Init+0x94>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <MX_TIM2_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <MX_TIM2_Init+0x94>)
 800192a:	f005 f8fc 	bl	8006b26 <HAL_TIM_Base_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001934:	f001 ffc0 	bl	80038b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_TIM2_Init+0x94>)
 8001946:	f005 fb0d 	bl	8006f64 <HAL_TIM_ConfigClockSource>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001950:	f001 ffb2 	bl	80038b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800195c:	463b      	mov	r3, r7
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_TIM2_Init+0x94>)
 8001962:	f005 fd1f 	bl	80073a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800196c:	f001 ffa4 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000343c 	.word	0x2000343c

0800197c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_TIM3_Init+0x94>)
 800199a:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <MX_TIM3_Init+0x98>)
 800199c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_TIM3_Init+0x94>)
 80019a0:	220f      	movs	r2, #15
 80019a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_TIM3_Init+0x94>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300-1;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_TIM3_Init+0x94>)
 80019ac:	f240 122b 	movw	r2, #299	; 0x12b
 80019b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_TIM3_Init+0x94>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_TIM3_Init+0x94>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019be:	4814      	ldr	r0, [pc, #80]	; (8001a10 <MX_TIM3_Init+0x94>)
 80019c0:	f005 f8b1 	bl	8006b26 <HAL_TIM_Base_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019ca:	f001 ff75 	bl	80038b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	4619      	mov	r1, r3
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_TIM3_Init+0x94>)
 80019dc:	f005 fac2 	bl	8006f64 <HAL_TIM_ConfigClockSource>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80019e6:	f001 ff67 	bl	80038b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f2:	463b      	mov	r3, r7
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <MX_TIM3_Init+0x94>)
 80019f8:	f005 fcd4 	bl	80073a4 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a02:	f001 ff59 	bl	80038b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200013c0 	.word	0x200013c0
 8001a14:	40000400 	.word	0x40000400

08001a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	6153      	str	r3, [r2, #20]
 8001a3a:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4a53      	ldr	r2, [pc, #332]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	6153      	str	r3, [r2, #20]
 8001a52:	4b51      	ldr	r3, [pc, #324]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5e:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	4a4d      	ldr	r2, [pc, #308]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a68:	6153      	str	r3, [r2, #20]
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a76:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	4a47      	ldr	r2, [pc, #284]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a80:	6153      	str	r3, [r2, #20]
 8001a82:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	4a41      	ldr	r2, [pc, #260]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a98:	6153      	str	r3, [r2, #20]
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab0:	6153      	str	r3, [r2, #20]
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <MX_GPIO_Init+0x180>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2192      	movs	r1, #146	; 0x92
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f003 fa17 	bl	8004ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2103      	movs	r1, #3
 8001ace:	4833      	ldr	r0, [pc, #204]	; (8001b9c <MX_GPIO_Init+0x184>)
 8001ad0:	f003 fa12 	bl	8004ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001ada:	4831      	ldr	r0, [pc, #196]	; (8001ba0 <MX_GPIO_Init+0x188>)
 8001adc:	f003 fa0c 	bl	8004ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ae6:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <MX_GPIO_Init+0x18c>)
 8001ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f003 f884 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8001afc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <MX_GPIO_Init+0x18c>)
 8001b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4825      	ldr	r0, [pc, #148]	; (8001ba8 <MX_GPIO_Init+0x190>)
 8001b12:	f003 f877 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 8001b16:	2392      	movs	r3, #146	; 0x92
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b30:	f003 f868 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b34:	2303      	movs	r3, #3
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4814      	ldr	r0, [pc, #80]	; (8001b9c <MX_GPIO_Init+0x184>)
 8001b4c:	f003 f85a 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001b50:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_GPIO_Init+0x188>)
 8001b6a:	f003 f84b 	bl	8004c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2103      	movs	r1, #3
 8001b72:	2017      	movs	r0, #23
 8001b74:	f002 fe37 	bl	80047e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b78:	2017      	movs	r0, #23
 8001b7a:	f002 fe50 	bl	800481e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2103      	movs	r1, #3
 8001b82:	2028      	movs	r0, #40	; 0x28
 8001b84:	f002 fe2f 	bl	80047e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b88:	2028      	movs	r0, #40	; 0x28
 8001b8a:	f002 fe48 	bl	800481e <HAL_NVIC_EnableIRQ>

}
 8001b8e:	bf00      	nop
 8001b90:	3730      	adds	r7, #48	; 0x30
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	48001000 	.word	0x48001000
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	48000800 	.word	0x48000800

08001bac <HAL_SDADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//read adc values
void HAL_SDADC_ConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	//get analog 1 data
	if(hsdadc==&hsdadc1){
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a79      	ldr	r2, [pc, #484]	; (8001d9c <HAL_SDADC_ConvCpltCallback+0x1f0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d14b      	bne.n	8001c54 <HAL_SDADC_ConvCpltCallback+0xa8>
		//get raw data for analog 1
		raw_1 = (int16_t)HAL_SDADC_GetValue(&hsdadc1);
 8001bbc:	4877      	ldr	r0, [pc, #476]	; (8001d9c <HAL_SDADC_ConvCpltCallback+0x1f0>)
 8001bbe:	f004 fe3f 	bl	8006840 <HAL_SDADC_GetValue>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b75      	ldr	r3, [pc, #468]	; (8001da0 <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001bca:	601a      	str	r2, [r3, #0]
		raw_1+=32768;
 8001bcc:	4b74      	ldr	r3, [pc, #464]	; (8001da0 <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001bd4:	4a72      	ldr	r2, [pc, #456]	; (8001da0 <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001bd6:	6013      	str	r3, [r2, #0]
		//convert and scale raw data
		a_in_1=(raw_1-analog_1_offset);
 8001bd8:	4b71      	ldr	r3, [pc, #452]	; (8001da0 <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b71      	ldr	r3, [pc, #452]	; (8001da4 <HAL_SDADC_ConvCpltCallback+0x1f8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b70      	ldr	r3, [pc, #448]	; (8001da8 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001be8:	601a      	str	r2, [r3, #0]
		if(a_in_1<0)
 8001bea:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	da02      	bge.n	8001bf8 <HAL_SDADC_ConvCpltCallback+0x4c>
			a_in_1=0;
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
		a_data_arr_1[a_1_index%data_arr_length]=(uint16_t)(a_in_1*((65535)/(float)(65535-analog_1_offset)));//scale value
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c04:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <HAL_SDADC_ConvCpltCallback+0x1f8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001c0c:	33ff      	adds	r3, #255	; 0xff
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c16:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8001dac <HAL_SDADC_ConvCpltCallback+0x200>
 8001c1a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c22:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_SDADC_ConvCpltCallback+0x204>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	4a63      	ldr	r2, [pc, #396]	; (8001db4 <HAL_SDADC_ConvCpltCallback+0x208>)
 8001c28:	8812      	ldrh	r2, [r2, #0]
 8001c2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c2e:	fb02 f201 	mul.w	r2, r2, r1
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c3c:	ee17 3a90 	vmov	r3, s15
 8001c40:	b299      	uxth	r1, r3
 8001c42:	4b5d      	ldr	r3, [pc, #372]	; (8001db8 <HAL_SDADC_ConvCpltCallback+0x20c>)
 8001c44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_1_index++;
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_SDADC_ConvCpltCallback+0x204>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b57      	ldr	r3, [pc, #348]	; (8001db0 <HAL_SDADC_ConvCpltCallback+0x204>)
 8001c52:	801a      	strh	r2, [r3, #0]
	}


	//get analog 2 data
	if(hsdadc==&hsdadc2){
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a59      	ldr	r2, [pc, #356]	; (8001dbc <HAL_SDADC_ConvCpltCallback+0x210>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d14b      	bne.n	8001cf4 <HAL_SDADC_ConvCpltCallback+0x148>
		//get raw data for analog 2
		raw_2 = (int16_t)HAL_SDADC_GetValue(&hsdadc2);
 8001c5c:	4857      	ldr	r0, [pc, #348]	; (8001dbc <HAL_SDADC_ConvCpltCallback+0x210>)
 8001c5e:	f004 fdef 	bl	8006840 <HAL_SDADC_GetValue>
 8001c62:	4603      	mov	r3, r0
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b55      	ldr	r3, [pc, #340]	; (8001dc0 <HAL_SDADC_ConvCpltCallback+0x214>)
 8001c6a:	601a      	str	r2, [r3, #0]
		raw_2+=32768;
 8001c6c:	4b54      	ldr	r3, [pc, #336]	; (8001dc0 <HAL_SDADC_ConvCpltCallback+0x214>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_SDADC_ConvCpltCallback+0x214>)
 8001c76:	6013      	str	r3, [r2, #0]
		//convert and scale raw data
		a_in_2=(raw_2-analog_2_offset);
 8001c78:	4b51      	ldr	r3, [pc, #324]	; (8001dc0 <HAL_SDADC_ConvCpltCallback+0x214>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b51      	ldr	r3, [pc, #324]	; (8001dc4 <HAL_SDADC_ConvCpltCallback+0x218>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001c88:	601a      	str	r2, [r3, #0]
		if(a_in_2<0)
 8001c8a:	4b4f      	ldr	r3, [pc, #316]	; (8001dc8 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	da02      	bge.n	8001c98 <HAL_SDADC_ConvCpltCallback+0xec>
			a_in_2=0;
 8001c92:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
		a_data_arr_2[a_2_index%data_arr_length]=(uint16_t)(a_in_2*((65535)/(float)(65535-analog_2_offset)));//scale value
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	ee07 3a90 	vmov	s15, r3
 8001ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca4:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_SDADC_ConvCpltCallback+0x218>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001cac:	33ff      	adds	r3, #255	; 0xff
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cb6:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8001dac <HAL_SDADC_ConvCpltCallback+0x200>
 8001cba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc2:	4b42      	ldr	r3, [pc, #264]	; (8001dcc <HAL_SDADC_ConvCpltCallback+0x220>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	4a3b      	ldr	r2, [pc, #236]	; (8001db4 <HAL_SDADC_ConvCpltCallback+0x208>)
 8001cc8:	8812      	ldrh	r2, [r2, #0]
 8001cca:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cce:	fb02 f201 	mul.w	r2, r2, r1
 8001cd2:	1a9b      	subs	r3, r3, r2
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cdc:	ee17 3a90 	vmov	r3, s15
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <HAL_SDADC_ConvCpltCallback+0x224>)
 8001ce4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_2_index++;
 8001ce8:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <HAL_SDADC_ConvCpltCallback+0x220>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_SDADC_ConvCpltCallback+0x220>)
 8001cf2:	801a      	strh	r2, [r3, #0]
	}

	//get analog 3 data
	if(hsdadc==&hsdadc3){
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a37      	ldr	r2, [pc, #220]	; (8001dd4 <HAL_SDADC_ConvCpltCallback+0x228>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d14b      	bne.n	8001d94 <HAL_SDADC_ConvCpltCallback+0x1e8>
		//get raw data for analog 3
		raw_3 = (int16_t)HAL_SDADC_GetValue(&hsdadc3);
 8001cfc:	4835      	ldr	r0, [pc, #212]	; (8001dd4 <HAL_SDADC_ConvCpltCallback+0x228>)
 8001cfe:	f004 fd9f 	bl	8006840 <HAL_SDADC_GetValue>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001d0a:	601a      	str	r2, [r3, #0]
		raw_3+=32768;
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d14:	4a30      	ldr	r2, [pc, #192]	; (8001dd8 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001d16:	6013      	str	r3, [r2, #0]
		//convert and scale raw data
		a_in_3=(raw_3-analog_3_offset);
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <HAL_SDADC_ConvCpltCallback+0x230>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <HAL_SDADC_ConvCpltCallback+0x234>)
 8001d28:	601a      	str	r2, [r3, #0]
		if(a_in_3<0)
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_SDADC_ConvCpltCallback+0x234>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	da02      	bge.n	8001d38 <HAL_SDADC_ConvCpltCallback+0x18c>
			a_in_3=0;
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_SDADC_ConvCpltCallback+0x234>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
		a_data_arr_3[a_3_index%data_arr_length]=(uint16_t)(a_in_3*((65535)/(float)(65535-analog_3_offset)));//scale value
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_SDADC_ConvCpltCallback+0x234>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_SDADC_ConvCpltCallback+0x230>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001d4c:	33ff      	adds	r3, #255	; 0xff
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d56:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8001dac <HAL_SDADC_ConvCpltCallback+0x200>
 8001d5a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_SDADC_ConvCpltCallback+0x238>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <HAL_SDADC_ConvCpltCallback+0x208>)
 8001d68:	8812      	ldrh	r2, [r2, #0]
 8001d6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d6e:	fb02 f201 	mul.w	r2, r2, r1
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d7c:	ee17 3a90 	vmov	r3, s15
 8001d80:	b299      	uxth	r1, r3
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_SDADC_ConvCpltCallback+0x23c>)
 8001d84:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_3_index++;
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_SDADC_ConvCpltCallback+0x238>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_SDADC_ConvCpltCallback+0x238>)
 8001d92:	801a      	strh	r2, [r3, #0]
	}
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200023e0 	.word	0x200023e0
 8001da0:	20001348 	.word	0x20001348
 8001da4:	20000364 	.word	0x20000364
 8001da8:	200033d4 	.word	0x200033d4
 8001dac:	477fff00 	.word	0x477fff00
 8001db0:	20000372 	.word	0x20000372
 8001db4:	20000004 	.word	0x20000004
 8001db8:	200003a8 	.word	0x200003a8
 8001dbc:	200033dc 	.word	0x200033dc
 8001dc0:	200033d0 	.word	0x200033d0
 8001dc4:	20000368 	.word	0x20000368
 8001dc8:	2000039c 	.word	0x2000039c
 8001dcc:	20000374 	.word	0x20000374
 8001dd0:	20001418 	.word	0x20001418
 8001dd4:	2000349c 	.word	0x2000349c
 8001dd8:	200003a0 	.word	0x200003a0
 8001ddc:	2000036c 	.word	0x2000036c
 8001de0:	200013a4 	.word	0x200013a4
 8001de4:	20000376 	.word	0x20000376
 8001de8:	20002428 	.word	0x20002428

08001dec <HAL_TIM_PeriodElapsedCallback>:
//sends data over can when timer 3 interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a91      	ldr	r2, [pc, #580]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	f040 811a 	bne.w	8002032 <HAL_TIM_PeriodElapsedCallback+0x246>
  {
    if(analog_1_enabled){
 8001dfe:	4b90      	ldr	r3, [pc, #576]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d059      	beq.n	8001eba <HAL_TIM_PeriodElapsedCallback+0xce>
    	//average stored values
    	a_in_1=0;
 8001e06:	4b8f      	ldr	r3, [pc, #572]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
    	max = (a_1_index<data_arr_length?a_1_index:data_arr_length);
 8001e0c:	4b8e      	ldr	r3, [pc, #568]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001e0e:	881a      	ldrh	r2, [r3, #0]
 8001e10:	4b8e      	ldr	r3, [pc, #568]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	4293      	cmp	r3, r2
 8001e16:	bf28      	it	cs
 8001e18:	4613      	movcs	r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001e20:	601a      	str	r2, [r3, #0]
    	if(max>0){
 8001e22:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d029      	beq.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x92>
			for(for_index=0; for_index<max; for_index++)
 8001e2a:	4b8a      	ldr	r3, [pc, #552]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	801a      	strh	r2, [r3, #0]
 8001e30:	e011      	b.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x6a>
				a_in_1+=a_data_arr_1[for_index];
 8001e32:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b87      	ldr	r3, [pc, #540]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001e3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b80      	ldr	r3, [pc, #512]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4413      	add	r3, r2
 8001e46:	4a7f      	ldr	r2, [pc, #508]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001e48:	6013      	str	r3, [r2, #0]
			for(for_index=0; for_index<max; for_index++)
 8001e4a:	4b82      	ldr	r3, [pc, #520]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	4b80      	ldr	r3, [pc, #512]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b7c      	ldr	r3, [pc, #496]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d3e6      	bcc.n	8001e32 <HAL_TIM_PeriodElapsedCallback+0x46>
			a_in_1/=max;
 8001e64:	4b77      	ldr	r3, [pc, #476]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b79      	ldr	r3, [pc, #484]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b73      	ldr	r3, [pc, #460]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001e76:	601a      	str	r2, [r3, #0]
			a_1_index=0;
 8001e78:	4b74      	ldr	r3, [pc, #464]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	801a      	strh	r2, [r3, #0]
    	}

    	//put raw data into byte arrays
    	a_data_1[0]=a_in_1 & 0xff;
 8001e7e:	4b71      	ldr	r3, [pc, #452]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b75      	ldr	r3, [pc, #468]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001e86:	701a      	strb	r2, [r3, #0]
    	a_data_1[1]=(a_in_1 >> 8);
 8001e88:	4b6e      	ldr	r3, [pc, #440]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	121b      	asrs	r3, r3, #8
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b72      	ldr	r3, [pc, #456]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001e92:	705a      	strb	r2, [r3, #1]
    	//transmit CAN data for analog 1
    	HAL_CAN_AddTxMessage(&hcan, &headers_1, a_data_1, *tx_mailbox);
 8001e94:	4b72      	ldr	r3, [pc, #456]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a70      	ldr	r2, [pc, #448]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001e9c:	4971      	ldr	r1, [pc, #452]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001e9e:	4872      	ldr	r0, [pc, #456]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ea0:	f002 fac6 	bl	8004430 <HAL_CAN_AddTxMessage>
    	while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 1
 8001ea4:	bf00      	nop
 8001ea6:	4b6e      	ldr	r3, [pc, #440]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	486e      	ldr	r0, [pc, #440]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001eb0:	f002 fb99 	bl	80045e6 <HAL_CAN_IsTxMessagePending>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f5      	bne.n	8001ea6 <HAL_TIM_PeriodElapsedCallback+0xba>
    }
    if(analog_2_enabled){
 8001eba:	4b6c      	ldr	r3, [pc, #432]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d059      	beq.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x18a>
    	a_in_2=0;
 8001ec2:	4b6b      	ldr	r3, [pc, #428]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
		max = (a_2_index<data_arr_length?a_2_index:data_arr_length);
 8001ec8:	4b5f      	ldr	r3, [pc, #380]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001eca:	881a      	ldrh	r2, [r3, #0]
 8001ecc:	4b69      	ldr	r3, [pc, #420]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	bf28      	it	cs
 8001ed4:	4613      	movcs	r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001edc:	601a      	str	r2, [r3, #0]
		if(max>0){
 8001ede:	4b5c      	ldr	r3, [pc, #368]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d029      	beq.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0x14e>
			for(for_index=0; for_index<max; for_index++)
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	801a      	strh	r2, [r3, #0]
 8001eec:	e011      	b.n	8001f12 <HAL_TIM_PeriodElapsedCallback+0x126>
				a_in_2+=a_data_arr_2[for_index];
 8001eee:	4b59      	ldr	r3, [pc, #356]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b60      	ldr	r3, [pc, #384]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001ef6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a5b      	ldr	r2, [pc, #364]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f04:	6013      	str	r3, [r2, #0]
			for(for_index=0; for_index<max; for_index++)
 8001f06:	4b53      	ldr	r3, [pc, #332]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	4b51      	ldr	r3, [pc, #324]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001f10:	801a      	strh	r2, [r3, #0]
 8001f12:	4b50      	ldr	r3, [pc, #320]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b4d      	ldr	r3, [pc, #308]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d3e6      	bcc.n	8001eee <HAL_TIM_PeriodElapsedCallback+0x102>
			a_in_2/=max;
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f32:	601a      	str	r2, [r3, #0]
			a_2_index=0;
 8001f34:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	801a      	strh	r2, [r3, #0]
		}
    	//put raw data into byte arrays
    	a_data_2[0]=a_in_2 & 0xff;
 8001f3a:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b4e      	ldr	r3, [pc, #312]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f42:	701a      	strb	r2, [r3, #0]
    	a_data_2[1]=(a_in_2 >> 8);
 8001f44:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	121b      	asrs	r3, r3, #8
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f4e:	705a      	strb	r2, [r3, #1]
    	//transmit CAN data for analog 2
    	HAL_CAN_AddTxMessage(&hcan, &headers_2, a_data_2, *tx_mailbox);
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a49      	ldr	r2, [pc, #292]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f58:	4949      	ldr	r1, [pc, #292]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001f5a:	4843      	ldr	r0, [pc, #268]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f5c:	f002 fa68 	bl	8004430 <HAL_CAN_AddTxMessage>
    	while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 2
 8001f60:	bf00      	nop
 8001f62:	4b3f      	ldr	r3, [pc, #252]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	483f      	ldr	r0, [pc, #252]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f6c:	f002 fb3b 	bl	80045e6 <HAL_CAN_IsTxMessagePending>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f5      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0x176>
    }
    if(analog_3_enabled){
 8001f76:	4b43      	ldr	r3, [pc, #268]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d059      	beq.n	8002032 <HAL_TIM_PeriodElapsedCallback+0x246>
    	a_in_3=0;
 8001f7e:	4b42      	ldr	r3, [pc, #264]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
		max = (a_3_index<data_arr_length?a_3_index:data_arr_length);
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001f86:	881a      	ldrh	r2, [r3, #0]
 8001f88:	4b40      	ldr	r3, [pc, #256]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	bf28      	it	cs
 8001f90:	4613      	movcs	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001f98:	601a      	str	r2, [r3, #0]
		if(max>0){
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d029      	beq.n	8001ff6 <HAL_TIM_PeriodElapsedCallback+0x20a>
			for(for_index=0; for_index<max; for_index++)
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	801a      	strh	r2, [r3, #0]
 8001fa8:	e011      	b.n	8001fce <HAL_TIM_PeriodElapsedCallback+0x1e2>
				a_in_3+=a_data_arr_3[for_index];
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001fb2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b33      	ldr	r3, [pc, #204]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a32      	ldr	r2, [pc, #200]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001fc0:	6013      	str	r3, [r2, #0]
			for(for_index=0; for_index<max; for_index++)
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001fcc:	801a      	strh	r2, [r3, #0]
 8001fce:	4b21      	ldr	r3, [pc, #132]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d3e6      	bcc.n	8001faa <HAL_TIM_PeriodElapsedCallback+0x1be>
			a_in_3/=max;
 8001fdc:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b26      	ldr	r3, [pc, #152]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001fee:	601a      	str	r2, [r3, #0]
			a_3_index=0;
 8001ff0:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	801a      	strh	r2, [r3, #0]
		}
		//put raw data into byte arrays
		a_data_3[0]=a_in_3 & 0xff;
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ffe:	701a      	strb	r2, [r3, #0]
		a_data_3[1]=(a_in_3 >> 8);
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	121b      	asrs	r3, r3, #8
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800200a:	705a      	strb	r2, [r3, #1]
		//transmit CAN data for analog 3
		HAL_CAN_AddTxMessage(&hcan, &headers_3, a_data_3, *tx_mailbox);
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002014:	4920      	ldr	r1, [pc, #128]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002016:	4814      	ldr	r0, [pc, #80]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002018:	f002 fa0a 	bl	8004430 <HAL_CAN_AddTxMessage>
		while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 3
 800201c:	bf00      	nop
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	4810      	ldr	r0, [pc, #64]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002028:	f002 fadd 	bl	80045e6 <HAL_CAN_IsTxMessagePending>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f5      	bne.n	800201e <HAL_TIM_PeriodElapsedCallback+0x232>
    }
  }
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200013c0 	.word	0x200013c0
 8002040:	20000001 	.word	0x20000001
 8002044:	200033d4 	.word	0x200033d4
 8002048:	20000004 	.word	0x20000004
 800204c:	20000372 	.word	0x20000372
 8002050:	2000037c 	.word	0x2000037c
 8002054:	20000378 	.word	0x20000378
 8002058:	200003a8 	.word	0x200003a8
 800205c:	20002424 	.word	0x20002424
 8002060:	2000140c 	.word	0x2000140c
 8002064:	20001364 	.word	0x20001364
 8002068:	2000137c 	.word	0x2000137c
 800206c:	20000002 	.word	0x20000002
 8002070:	2000039c 	.word	0x2000039c
 8002074:	20000374 	.word	0x20000374
 8002078:	20001418 	.word	0x20001418
 800207c:	200033cc 	.word	0x200033cc
 8002080:	20003424 	.word	0x20003424
 8002084:	20000003 	.word	0x20000003
 8002088:	200013a4 	.word	0x200013a4
 800208c:	20000376 	.word	0x20000376
 8002090:	20002428 	.word	0x20002428
 8002094:	200013bc 	.word	0x200013bc
 8002098:	2000134c 	.word	0x2000134c

0800209c <HAL_GPIO_EXTI_Callback>:
//handles the button interupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	80fb      	strh	r3, [r7, #6]
	debug_val++;
 80020a6:	4bbf      	ldr	r3, [pc, #764]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4bbd      	ldr	r3, [pc, #756]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80020b0:	701a      	strb	r2, [r3, #0]
	//if the up button is pressed
			if(GPIO_Pin==UP_BTN_PIN && btn_counter>debounce_delay){
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	2b40      	cmp	r3, #64	; 0x40
 80020b6:	f040 8136 	bne.w	8002326 <HAL_GPIO_EXTI_Callback+0x28a>
 80020ba:	4bbb      	ldr	r3, [pc, #748]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80020bc:	881a      	ldrh	r2, [r3, #0]
 80020be:	4bbb      	ldr	r3, [pc, #748]	; (80023ac <HAL_GPIO_EXTI_Callback+0x310>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	f240 812f 	bls.w	8002326 <HAL_GPIO_EXTI_Callback+0x28a>
				if(change_value_bool){//if changing a value
 80020c8:	4bb9      	ldr	r3, [pc, #740]	; (80023b0 <HAL_GPIO_EXTI_Callback+0x314>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d03a      	beq.n	8002146 <HAL_GPIO_EXTI_Callback+0xaa>
					//change the value of the selected item
					//main menu changes
					if(in_main_menu){
 80020d0:	4bb8      	ldr	r3, [pc, #736]	; (80023b4 <HAL_GPIO_EXTI_Callback+0x318>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d018      	beq.n	800210a <HAL_GPIO_EXTI_Callback+0x6e>
						if(menu_pos==2)
 80020d8:	4bb7      	ldr	r3, [pc, #732]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x31c>)
 80020da:	f993 3000 	ldrsb.w	r3, [r3]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d10b      	bne.n	80020fa <HAL_GPIO_EXTI_Callback+0x5e>
							display_scroll=(display_scroll==0)?2:(display_scroll-1);//scroll through devices in display values menu
 80020e2:	4bb6      	ldr	r3, [pc, #728]	; (80023bc <HAL_GPIO_EXTI_Callback+0x320>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d004      	beq.n	80020f4 <HAL_GPIO_EXTI_Callback+0x58>
 80020ea:	4bb4      	ldr	r3, [pc, #720]	; (80023bc <HAL_GPIO_EXTI_Callback+0x320>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e000      	b.n	80020f6 <HAL_GPIO_EXTI_Callback+0x5a>
 80020f4:	2302      	movs	r3, #2
 80020f6:	4ab1      	ldr	r2, [pc, #708]	; (80023bc <HAL_GPIO_EXTI_Callback+0x320>)
 80020f8:	7013      	strb	r3, [r2, #0]
						if(menu_pos == 3)
 80020fa:	4baf      	ldr	r3, [pc, #700]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x31c>)
 80020fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d102      	bne.n	800210a <HAL_GPIO_EXTI_Callback+0x6e>
							changeDelay(1);//increment Delay
 8002104:	2001      	movs	r0, #1
 8002106:	f000 fefd 	bl	8002f04 <changeDelay>
					}
					//can menu changes
					if(in_can_menu){
 800210a:	4bad      	ldr	r3, [pc, #692]	; (80023c0 <HAL_GPIO_EXTI_Callback+0x324>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8105 	beq.w	800231e <HAL_GPIO_EXTI_Callback+0x282>
						if(can_pos==1)
 8002114:	4bab      	ldr	r3, [pc, #684]	; (80023c4 <HAL_GPIO_EXTI_Callback+0x328>)
 8002116:	f993 3000 	ldrsb.w	r3, [r3]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d103      	bne.n	8002126 <HAL_GPIO_EXTI_Callback+0x8a>
							changeBaudRate(1);//increment baud rate
 800211e:	2001      	movs	r0, #1
 8002120:	f000 fc92 	bl	8002a48 <changeBaudRate>
 8002124:	e0fb      	b.n	800231e <HAL_GPIO_EXTI_Callback+0x282>
						else if(can_pos>=2&&can_pos<=4)
 8002126:	4ba7      	ldr	r3, [pc, #668]	; (80023c4 <HAL_GPIO_EXTI_Callback+0x328>)
 8002128:	f993 3000 	ldrsb.w	r3, [r3]
 800212c:	2b01      	cmp	r3, #1
 800212e:	f340 80f6 	ble.w	800231e <HAL_GPIO_EXTI_Callback+0x282>
 8002132:	4ba4      	ldr	r3, [pc, #656]	; (80023c4 <HAL_GPIO_EXTI_Callback+0x328>)
 8002134:	f993 3000 	ldrsb.w	r3, [r3]
 8002138:	2b04      	cmp	r3, #4
 800213a:	f300 80f0 	bgt.w	800231e <HAL_GPIO_EXTI_Callback+0x282>
							changeCANID(1);//increment CAN ID
 800213e:	2001      	movs	r0, #1
 8002140:	f000 fd28 	bl	8002b94 <changeCANID>
 8002144:	e0eb      	b.n	800231e <HAL_GPIO_EXTI_Callback+0x282>
					}

				} else {
					//scroll menu up
					if(in_main_menu){
 8002146:	4b9b      	ldr	r3, [pc, #620]	; (80023b4 <HAL_GPIO_EXTI_Callback+0x318>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d04a      	beq.n	80021e4 <HAL_GPIO_EXTI_Callback+0x148>
						menu_pos=(menu_pos==0)?main_menu_length-1:(menu_pos-1);//decrement menu position
 800214e:	4b9a      	ldr	r3, [pc, #616]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002150:	f993 3000 	ldrsb.w	r3, [r3]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_GPIO_EXTI_Callback+0xc8>
 8002158:	2304      	movs	r3, #4
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	b25b      	sxtb	r3, r3
 8002162:	e006      	b.n	8002172 <HAL_GPIO_EXTI_Callback+0xd6>
 8002164:	4b94      	ldr	r3, [pc, #592]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002166:	f993 3000 	ldrsb.w	r3, [r3]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	b25b      	sxtb	r3, r3
 8002172:	4a91      	ldr	r2, [pc, #580]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002174:	7013      	strb	r3, [r2, #0]
						lcd_put_cur(0,0);
 8002176:	2100      	movs	r1, #0
 8002178:	2000      	movs	r0, #0
 800217a:	f7fe fe5d 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 800217e:	4b8e      	ldr	r3, [pc, #568]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002180:	f993 3000 	ldrsb.w	r3, [r3]
 8002184:	461a      	mov	r2, r3
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	4413      	add	r3, r2
 800218c:	4a8e      	ldr	r2, [pc, #568]	; (80023c8 <HAL_GPIO_EXTI_Callback+0x32c>)
 800218e:	4413      	add	r3, r2
 8002190:	2210      	movs	r2, #16
 8002192:	4619      	mov	r1, r3
 8002194:	488d      	ldr	r0, [pc, #564]	; (80023cc <HAL_GPIO_EXTI_Callback+0x330>)
 8002196:	f006 f8a6 	bl	80082e6 <strncpy>
 800219a:	4603      	mov	r3, r0
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe feb0 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(1,0);
 80021a2:	2100      	movs	r1, #0
 80021a4:	2001      	movs	r0, #1
 80021a6:	f7fe fe47 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 80021aa:	4b83      	ldr	r3, [pc, #524]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x31c>)
 80021ac:	f993 3000 	ldrsb.w	r3, [r3]
 80021b0:	3301      	adds	r3, #1
 80021b2:	2204      	movs	r2, #4
 80021b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80021b8:	fb02 f201 	mul.w	r2, r2, r1
 80021bc:	1a9a      	subs	r2, r3, r2
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	4413      	add	r3, r2
 80021c4:	4a80      	ldr	r2, [pc, #512]	; (80023c8 <HAL_GPIO_EXTI_Callback+0x32c>)
 80021c6:	4413      	add	r3, r2
 80021c8:	2210      	movs	r2, #16
 80021ca:	4619      	mov	r1, r3
 80021cc:	487f      	ldr	r0, [pc, #508]	; (80023cc <HAL_GPIO_EXTI_Callback+0x330>)
 80021ce:	f006 f88a 	bl	80082e6 <strncpy>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fe94 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(0,0);
 80021da:	2100      	movs	r1, #0
 80021dc:	2000      	movs	r0, #0
 80021de:	f7fe fe2b 	bl	8000e38 <lcd_put_cur>
 80021e2:	e09c      	b.n	800231e <HAL_GPIO_EXTI_Callback+0x282>
					} else if(in_can_menu){
 80021e4:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_GPIO_EXTI_Callback+0x324>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d04a      	beq.n	8002282 <HAL_GPIO_EXTI_Callback+0x1e6>
						can_pos=(can_pos==0)?can_menu_length-1:(can_pos-1);//decrement menu position
 80021ec:	4b75      	ldr	r3, [pc, #468]	; (80023c4 <HAL_GPIO_EXTI_Callback+0x328>)
 80021ee:	f993 3000 	ldrsb.w	r3, [r3]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_GPIO_EXTI_Callback+0x166>
 80021f6:	2306      	movs	r3, #6
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	e006      	b.n	8002210 <HAL_GPIO_EXTI_Callback+0x174>
 8002202:	4b70      	ldr	r3, [pc, #448]	; (80023c4 <HAL_GPIO_EXTI_Callback+0x328>)
 8002204:	f993 3000 	ldrsb.w	r3, [r3]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	b25b      	sxtb	r3, r3
 8002210:	4a6c      	ldr	r2, [pc, #432]	; (80023c4 <HAL_GPIO_EXTI_Callback+0x328>)
 8002212:	7013      	strb	r3, [r2, #0]
						lcd_put_cur(0,0);
 8002214:	2100      	movs	r1, #0
 8002216:	2000      	movs	r0, #0
 8002218:	f7fe fe0e 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 800221c:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <HAL_GPIO_EXTI_Callback+0x328>)
 800221e:	f993 3000 	ldrsb.w	r3, [r3]
 8002222:	461a      	mov	r2, r3
 8002224:	4613      	mov	r3, r2
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	4413      	add	r3, r2
 800222a:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <HAL_GPIO_EXTI_Callback+0x334>)
 800222c:	4413      	add	r3, r2
 800222e:	2210      	movs	r2, #16
 8002230:	4619      	mov	r1, r3
 8002232:	4866      	ldr	r0, [pc, #408]	; (80023cc <HAL_GPIO_EXTI_Callback+0x330>)
 8002234:	f006 f857 	bl	80082e6 <strncpy>
 8002238:	4603      	mov	r3, r0
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fe61 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(1,0);
 8002240:	2100      	movs	r1, #0
 8002242:	2001      	movs	r0, #1
 8002244:	f7fe fdf8 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 8002248:	4b5e      	ldr	r3, [pc, #376]	; (80023c4 <HAL_GPIO_EXTI_Callback+0x328>)
 800224a:	f993 3000 	ldrsb.w	r3, [r3]
 800224e:	3301      	adds	r3, #1
 8002250:	2206      	movs	r2, #6
 8002252:	fb93 f1f2 	sdiv	r1, r3, r2
 8002256:	fb02 f201 	mul.w	r2, r2, r1
 800225a:	1a9a      	subs	r2, r3, r2
 800225c:	4613      	mov	r3, r2
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	4413      	add	r3, r2
 8002262:	4a5b      	ldr	r2, [pc, #364]	; (80023d0 <HAL_GPIO_EXTI_Callback+0x334>)
 8002264:	4413      	add	r3, r2
 8002266:	2210      	movs	r2, #16
 8002268:	4619      	mov	r1, r3
 800226a:	4858      	ldr	r0, [pc, #352]	; (80023cc <HAL_GPIO_EXTI_Callback+0x330>)
 800226c:	f006 f83b 	bl	80082e6 <strncpy>
 8002270:	4603      	mov	r3, r0
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fe45 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(0,0);
 8002278:	2100      	movs	r1, #0
 800227a:	2000      	movs	r0, #0
 800227c:	f7fe fddc 	bl	8000e38 <lcd_put_cur>
 8002280:	e04d      	b.n	800231e <HAL_GPIO_EXTI_Callback+0x282>
					} else if(in_analog_menu){
 8002282:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <HAL_GPIO_EXTI_Callback+0x338>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d049      	beq.n	800231e <HAL_GPIO_EXTI_Callback+0x282>
						analog_pos=(analog_pos==0)?analog_menu_length-1:(analog_pos-1);//decrement menu position
 800228a:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x33c>)
 800228c:	f993 3000 	ldrsb.w	r3, [r3]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <HAL_GPIO_EXTI_Callback+0x204>
 8002294:	230a      	movs	r3, #10
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	b25b      	sxtb	r3, r3
 800229e:	e006      	b.n	80022ae <HAL_GPIO_EXTI_Callback+0x212>
 80022a0:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x33c>)
 80022a2:	f993 3000 	ldrsb.w	r3, [r3]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	4a4a      	ldr	r2, [pc, #296]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x33c>)
 80022b0:	7013      	strb	r3, [r2, #0]
						lcd_put_cur(0,0);
 80022b2:	2100      	movs	r1, #0
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7fe fdbf 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x33c>)
 80022bc:	f993 3000 	ldrsb.w	r3, [r3]
 80022c0:	461a      	mov	r2, r3
 80022c2:	4613      	mov	r3, r2
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	4413      	add	r3, r2
 80022c8:	4a44      	ldr	r2, [pc, #272]	; (80023dc <HAL_GPIO_EXTI_Callback+0x340>)
 80022ca:	4413      	add	r3, r2
 80022cc:	2210      	movs	r2, #16
 80022ce:	4619      	mov	r1, r3
 80022d0:	483e      	ldr	r0, [pc, #248]	; (80023cc <HAL_GPIO_EXTI_Callback+0x330>)
 80022d2:	f006 f808 	bl	80082e6 <strncpy>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fe12 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(1,0);
 80022de:	2100      	movs	r1, #0
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7fe fda9 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 80022e6:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <HAL_GPIO_EXTI_Callback+0x33c>)
 80022e8:	f993 3000 	ldrsb.w	r3, [r3]
 80022ec:	3301      	adds	r3, #1
 80022ee:	220a      	movs	r2, #10
 80022f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80022f4:	fb02 f201 	mul.w	r2, r2, r1
 80022f8:	1a9a      	subs	r2, r3, r2
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	4413      	add	r3, r2
 8002300:	4a36      	ldr	r2, [pc, #216]	; (80023dc <HAL_GPIO_EXTI_Callback+0x340>)
 8002302:	4413      	add	r3, r2
 8002304:	2210      	movs	r2, #16
 8002306:	4619      	mov	r1, r3
 8002308:	4830      	ldr	r0, [pc, #192]	; (80023cc <HAL_GPIO_EXTI_Callback+0x330>)
 800230a:	f005 ffec 	bl	80082e6 <strncpy>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fdf6 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(0,0);
 8002316:	2100      	movs	r1, #0
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fd8d 	bl	8000e38 <lcd_put_cur>
					}
				}
				btn_counter=0; // reset btn counter
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002320:	2200      	movs	r2, #0
 8002322:	801a      	strh	r2, [r3, #0]
 8002324:	e373      	b.n	8002a0e <HAL_GPIO_EXTI_Callback+0x972>
			}

			//if the down button is pressed
			else if(GPIO_Pin==DOWN_BTN_PIN && btn_counter>debounce_delay){
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232c:	f040 8145 	bne.w	80025ba <HAL_GPIO_EXTI_Callback+0x51e>
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002332:	881a      	ldrh	r2, [r3, #0]
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_GPIO_EXTI_Callback+0x310>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	f240 813e 	bls.w	80025ba <HAL_GPIO_EXTI_Callback+0x51e>
				if(change_value_bool){//if changing a value
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_GPIO_EXTI_Callback+0x314>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d05e      	beq.n	8002404 <HAL_GPIO_EXTI_Callback+0x368>
					//change the value of the selected item
					//main menu changes
					if(in_main_menu){
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_GPIO_EXTI_Callback+0x318>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d01c      	beq.n	8002388 <HAL_GPIO_EXTI_Callback+0x2ec>
						if(menu_pos==2)
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002350:	f993 3000 	ldrsb.w	r3, [r3]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d10e      	bne.n	8002376 <HAL_GPIO_EXTI_Callback+0x2da>
							display_scroll=(display_scroll+1)%3;//scroll through devices in display values menu
 8002358:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_GPIO_EXTI_Callback+0x320>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_GPIO_EXTI_Callback+0x344>)
 8002360:	fb83 3102 	smull	r3, r1, r3, r2
 8002364:	17d3      	asrs	r3, r2, #31
 8002366:	1ac9      	subs	r1, r1, r3
 8002368:	460b      	mov	r3, r1
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	440b      	add	r3, r1
 800236e:	1ad1      	subs	r1, r2, r3
 8002370:	b2ca      	uxtb	r2, r1
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_GPIO_EXTI_Callback+0x320>)
 8002374:	701a      	strb	r2, [r3, #0]
						if(menu_pos == 3)
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002378:	f993 3000 	ldrsb.w	r3, [r3]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d103      	bne.n	8002388 <HAL_GPIO_EXTI_Callback+0x2ec>
							changeDelay(-1);//decrement Delay
 8002380:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002384:	f000 fdbe 	bl	8002f04 <changeDelay>
					}
					//can menu changes
					if(in_can_menu){
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_GPIO_EXTI_Callback+0x324>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8110 	beq.w	80025b2 <HAL_GPIO_EXTI_Callback+0x516>
						if(can_pos==1)
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_GPIO_EXTI_Callback+0x328>)
 8002394:	f993 3000 	ldrsb.w	r3, [r3]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_EXTI_Callback+0x348>
							changeBaudRate(-1);//decrement baud rate
 800239c:	20ff      	movs	r0, #255	; 0xff
 800239e:	f000 fb53 	bl	8002a48 <changeBaudRate>
 80023a2:	e106      	b.n	80025b2 <HAL_GPIO_EXTI_Callback+0x516>
 80023a4:	2000038a 	.word	0x2000038a
 80023a8:	20000388 	.word	0x20000388
 80023ac:	20000162 	.word	0x20000162
 80023b0:	20000387 	.word	0x20000387
 80023b4:	2000015e 	.word	0x2000015e
 80023b8:	20000383 	.word	0x20000383
 80023bc:	20000382 	.word	0x20000382
 80023c0:	20000380 	.word	0x20000380
 80023c4:	20000384 	.word	0x20000384
 80023c8:	20000008 	.word	0x20000008
 80023cc:	200013a8 	.word	0x200013a8
 80023d0:	2000004c 	.word	0x2000004c
 80023d4:	20000381 	.word	0x20000381
 80023d8:	20000385 	.word	0x20000385
 80023dc:	200000b4 	.word	0x200000b4
 80023e0:	55555556 	.word	0x55555556
						else if(can_pos>=2&&can_pos<=4)
 80023e4:	4bcc      	ldr	r3, [pc, #816]	; (8002718 <HAL_GPIO_EXTI_Callback+0x67c>)
 80023e6:	f993 3000 	ldrsb.w	r3, [r3]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	f340 80e1 	ble.w	80025b2 <HAL_GPIO_EXTI_Callback+0x516>
 80023f0:	4bc9      	ldr	r3, [pc, #804]	; (8002718 <HAL_GPIO_EXTI_Callback+0x67c>)
 80023f2:	f993 3000 	ldrsb.w	r3, [r3]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	f300 80db 	bgt.w	80025b2 <HAL_GPIO_EXTI_Callback+0x516>
							changeCANID(-1);//decrement CAN ID
 80023fc:	20ff      	movs	r0, #255	; 0xff
 80023fe:	f000 fbc9 	bl	8002b94 <changeCANID>
 8002402:	e0d6      	b.n	80025b2 <HAL_GPIO_EXTI_Callback+0x516>
					}
				} else {
					//scroll menu down
					if(in_main_menu){
 8002404:	4bc5      	ldr	r3, [pc, #788]	; (800271c <HAL_GPIO_EXTI_Callback+0x680>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d043      	beq.n	8002494 <HAL_GPIO_EXTI_Callback+0x3f8>
						menu_pos = (menu_pos+1)%main_menu_length;//increment menu position
 800240c:	4bc4      	ldr	r3, [pc, #784]	; (8002720 <HAL_GPIO_EXTI_Callback+0x684>)
 800240e:	f993 3000 	ldrsb.w	r3, [r3]
 8002412:	3301      	adds	r3, #1
 8002414:	2204      	movs	r2, #4
 8002416:	fb93 f1f2 	sdiv	r1, r3, r2
 800241a:	fb02 f201 	mul.w	r2, r2, r1
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	b25a      	sxtb	r2, r3
 8002422:	4bbf      	ldr	r3, [pc, #764]	; (8002720 <HAL_GPIO_EXTI_Callback+0x684>)
 8002424:	701a      	strb	r2, [r3, #0]
						lcd_put_cur(0,0);
 8002426:	2100      	movs	r1, #0
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fd05 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 800242e:	4bbc      	ldr	r3, [pc, #752]	; (8002720 <HAL_GPIO_EXTI_Callback+0x684>)
 8002430:	f993 3000 	ldrsb.w	r3, [r3]
 8002434:	461a      	mov	r2, r3
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4413      	add	r3, r2
 800243c:	4ab9      	ldr	r2, [pc, #740]	; (8002724 <HAL_GPIO_EXTI_Callback+0x688>)
 800243e:	4413      	add	r3, r2
 8002440:	2210      	movs	r2, #16
 8002442:	4619      	mov	r1, r3
 8002444:	48b8      	ldr	r0, [pc, #736]	; (8002728 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002446:	f005 ff4e 	bl	80082e6 <strncpy>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fd58 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(1,0);
 8002452:	2100      	movs	r1, #0
 8002454:	2001      	movs	r0, #1
 8002456:	f7fe fcef 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 800245a:	4bb1      	ldr	r3, [pc, #708]	; (8002720 <HAL_GPIO_EXTI_Callback+0x684>)
 800245c:	f993 3000 	ldrsb.w	r3, [r3]
 8002460:	3301      	adds	r3, #1
 8002462:	2204      	movs	r2, #4
 8002464:	fb93 f1f2 	sdiv	r1, r3, r2
 8002468:	fb02 f201 	mul.w	r2, r2, r1
 800246c:	1a9a      	subs	r2, r3, r2
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	4413      	add	r3, r2
 8002474:	4aab      	ldr	r2, [pc, #684]	; (8002724 <HAL_GPIO_EXTI_Callback+0x688>)
 8002476:	4413      	add	r3, r2
 8002478:	2210      	movs	r2, #16
 800247a:	4619      	mov	r1, r3
 800247c:	48aa      	ldr	r0, [pc, #680]	; (8002728 <HAL_GPIO_EXTI_Callback+0x68c>)
 800247e:	f005 ff32 	bl	80082e6 <strncpy>
 8002482:	4603      	mov	r3, r0
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fd3c 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(0,0);
 800248a:	2100      	movs	r1, #0
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe fcd3 	bl	8000e38 <lcd_put_cur>
 8002492:	e08e      	b.n	80025b2 <HAL_GPIO_EXTI_Callback+0x516>
					} else if(in_can_menu){
 8002494:	4ba5      	ldr	r3, [pc, #660]	; (800272c <HAL_GPIO_EXTI_Callback+0x690>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d043      	beq.n	8002524 <HAL_GPIO_EXTI_Callback+0x488>
						can_pos=(can_pos+1)%can_menu_length;//increment menu position
 800249c:	4b9e      	ldr	r3, [pc, #632]	; (8002718 <HAL_GPIO_EXTI_Callback+0x67c>)
 800249e:	f993 3000 	ldrsb.w	r3, [r3]
 80024a2:	3301      	adds	r3, #1
 80024a4:	2206      	movs	r2, #6
 80024a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80024aa:	fb02 f201 	mul.w	r2, r2, r1
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	b25a      	sxtb	r2, r3
 80024b2:	4b99      	ldr	r3, [pc, #612]	; (8002718 <HAL_GPIO_EXTI_Callback+0x67c>)
 80024b4:	701a      	strb	r2, [r3, #0]
						lcd_put_cur(0,0);
 80024b6:	2100      	movs	r1, #0
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7fe fcbd 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 80024be:	4b96      	ldr	r3, [pc, #600]	; (8002718 <HAL_GPIO_EXTI_Callback+0x67c>)
 80024c0:	f993 3000 	ldrsb.w	r3, [r3]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	4413      	add	r3, r2
 80024cc:	4a98      	ldr	r2, [pc, #608]	; (8002730 <HAL_GPIO_EXTI_Callback+0x694>)
 80024ce:	4413      	add	r3, r2
 80024d0:	2210      	movs	r2, #16
 80024d2:	4619      	mov	r1, r3
 80024d4:	4894      	ldr	r0, [pc, #592]	; (8002728 <HAL_GPIO_EXTI_Callback+0x68c>)
 80024d6:	f005 ff06 	bl	80082e6 <strncpy>
 80024da:	4603      	mov	r3, r0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fd10 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(1,0);
 80024e2:	2100      	movs	r1, #0
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7fe fca7 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 80024ea:	4b8b      	ldr	r3, [pc, #556]	; (8002718 <HAL_GPIO_EXTI_Callback+0x67c>)
 80024ec:	f993 3000 	ldrsb.w	r3, [r3]
 80024f0:	3301      	adds	r3, #1
 80024f2:	2206      	movs	r2, #6
 80024f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80024f8:	fb02 f201 	mul.w	r2, r2, r1
 80024fc:	1a9a      	subs	r2, r3, r2
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	4413      	add	r3, r2
 8002504:	4a8a      	ldr	r2, [pc, #552]	; (8002730 <HAL_GPIO_EXTI_Callback+0x694>)
 8002506:	4413      	add	r3, r2
 8002508:	2210      	movs	r2, #16
 800250a:	4619      	mov	r1, r3
 800250c:	4886      	ldr	r0, [pc, #536]	; (8002728 <HAL_GPIO_EXTI_Callback+0x68c>)
 800250e:	f005 feea 	bl	80082e6 <strncpy>
 8002512:	4603      	mov	r3, r0
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fcf4 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(0,0);
 800251a:	2100      	movs	r1, #0
 800251c:	2000      	movs	r0, #0
 800251e:	f7fe fc8b 	bl	8000e38 <lcd_put_cur>
 8002522:	e046      	b.n	80025b2 <HAL_GPIO_EXTI_Callback+0x516>
					} else if(in_analog_menu){
 8002524:	4b83      	ldr	r3, [pc, #524]	; (8002734 <HAL_GPIO_EXTI_Callback+0x698>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d042      	beq.n	80025b2 <HAL_GPIO_EXTI_Callback+0x516>
						analog_pos=(analog_pos+1)%analog_menu_length;//increment menu position
 800252c:	4b82      	ldr	r3, [pc, #520]	; (8002738 <HAL_GPIO_EXTI_Callback+0x69c>)
 800252e:	f993 3000 	ldrsb.w	r3, [r3]
 8002532:	3301      	adds	r3, #1
 8002534:	220a      	movs	r2, #10
 8002536:	fb93 f1f2 	sdiv	r1, r3, r2
 800253a:	fb02 f201 	mul.w	r2, r2, r1
 800253e:	1a9b      	subs	r3, r3, r2
 8002540:	b25a      	sxtb	r2, r3
 8002542:	4b7d      	ldr	r3, [pc, #500]	; (8002738 <HAL_GPIO_EXTI_Callback+0x69c>)
 8002544:	701a      	strb	r2, [r3, #0]
						lcd_put_cur(0,0);
 8002546:	2100      	movs	r1, #0
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe fc75 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 800254e:	4b7a      	ldr	r3, [pc, #488]	; (8002738 <HAL_GPIO_EXTI_Callback+0x69c>)
 8002550:	f993 3000 	ldrsb.w	r3, [r3]
 8002554:	461a      	mov	r2, r3
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	4413      	add	r3, r2
 800255c:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_GPIO_EXTI_Callback+0x6a0>)
 800255e:	4413      	add	r3, r2
 8002560:	2210      	movs	r2, #16
 8002562:	4619      	mov	r1, r3
 8002564:	4870      	ldr	r0, [pc, #448]	; (8002728 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002566:	f005 febe 	bl	80082e6 <strncpy>
 800256a:	4603      	mov	r3, r0
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fcc8 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(1,0);
 8002572:	2100      	movs	r1, #0
 8002574:	2001      	movs	r0, #1
 8002576:	f7fe fc5f 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 800257a:	4b6f      	ldr	r3, [pc, #444]	; (8002738 <HAL_GPIO_EXTI_Callback+0x69c>)
 800257c:	f993 3000 	ldrsb.w	r3, [r3]
 8002580:	3301      	adds	r3, #1
 8002582:	220a      	movs	r2, #10
 8002584:	fb93 f1f2 	sdiv	r1, r3, r2
 8002588:	fb02 f201 	mul.w	r2, r2, r1
 800258c:	1a9a      	subs	r2, r3, r2
 800258e:	4613      	mov	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	4413      	add	r3, r2
 8002594:	4a69      	ldr	r2, [pc, #420]	; (800273c <HAL_GPIO_EXTI_Callback+0x6a0>)
 8002596:	4413      	add	r3, r2
 8002598:	2210      	movs	r2, #16
 800259a:	4619      	mov	r1, r3
 800259c:	4862      	ldr	r0, [pc, #392]	; (8002728 <HAL_GPIO_EXTI_Callback+0x68c>)
 800259e:	f005 fea2 	bl	80082e6 <strncpy>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fcac 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(0,0);
 80025aa:	2100      	movs	r1, #0
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe fc43 	bl	8000e38 <lcd_put_cur>
					}

				}
				btn_counter=0; // reset btn counter
 80025b2:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_GPIO_EXTI_Callback+0x6a4>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e229      	b.n	8002a0e <HAL_GPIO_EXTI_Callback+0x972>
			}

			//if the select button is pressed
			else if(GPIO_Pin==SEL_BTN_PIN && btn_counter>debounce_delay){
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c0:	f040 8225 	bne.w	8002a0e <HAL_GPIO_EXTI_Callback+0x972>
 80025c4:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <HAL_GPIO_EXTI_Callback+0x6a4>)
 80025c6:	881a      	ldrh	r2, [r3, #0]
 80025c8:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <HAL_GPIO_EXTI_Callback+0x6a8>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	f240 821e 	bls.w	8002a0e <HAL_GPIO_EXTI_Callback+0x972>
				//set changes and reinitialize can bus
				if(!change_value_bool){
 80025d2:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <HAL_GPIO_EXTI_Callback+0x6ac>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 81ab 	bne.w	8002932 <HAL_GPIO_EXTI_Callback+0x896>
					if(in_main_menu){
 80025dc:	4b4f      	ldr	r3, [pc, #316]	; (800271c <HAL_GPIO_EXTI_Callback+0x680>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80c7 	beq.w	8002774 <HAL_GPIO_EXTI_Callback+0x6d8>
						if(menu_pos==0){
 80025e6:	4b4e      	ldr	r3, [pc, #312]	; (8002720 <HAL_GPIO_EXTI_Callback+0x684>)
 80025e8:	f993 3000 	ldrsb.w	r3, [r3]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d146      	bne.n	800267e <HAL_GPIO_EXTI_Callback+0x5e2>
							//display can menu
							lcd_put_cur(0,0);
 80025f0:	2100      	movs	r1, #0
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe fc20 	bl	8000e38 <lcd_put_cur>
							lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 80025f8:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_GPIO_EXTI_Callback+0x67c>)
 80025fa:	f993 3000 	ldrsb.w	r3, [r3]
 80025fe:	461a      	mov	r2, r3
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	4413      	add	r3, r2
 8002606:	4a4a      	ldr	r2, [pc, #296]	; (8002730 <HAL_GPIO_EXTI_Callback+0x694>)
 8002608:	4413      	add	r3, r2
 800260a:	2210      	movs	r2, #16
 800260c:	4619      	mov	r1, r3
 800260e:	4846      	ldr	r0, [pc, #280]	; (8002728 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002610:	f005 fe69 	bl	80082e6 <strncpy>
 8002614:	4603      	mov	r3, r0
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fc73 	bl	8000f02 <lcd_send_string>
							lcd_put_cur(1,0);
 800261c:	2100      	movs	r1, #0
 800261e:	2001      	movs	r0, #1
 8002620:	f7fe fc0a 	bl	8000e38 <lcd_put_cur>
							lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 8002624:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <HAL_GPIO_EXTI_Callback+0x67c>)
 8002626:	f993 3000 	ldrsb.w	r3, [r3]
 800262a:	3301      	adds	r3, #1
 800262c:	2206      	movs	r2, #6
 800262e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002632:	fb02 f201 	mul.w	r2, r2, r1
 8002636:	1a9a      	subs	r2, r3, r2
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	4413      	add	r3, r2
 800263e:	4a3c      	ldr	r2, [pc, #240]	; (8002730 <HAL_GPIO_EXTI_Callback+0x694>)
 8002640:	4413      	add	r3, r2
 8002642:	2210      	movs	r2, #16
 8002644:	4619      	mov	r1, r3
 8002646:	4838      	ldr	r0, [pc, #224]	; (8002728 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002648:	f005 fe4d 	bl	80082e6 <strncpy>
 800264c:	4603      	mov	r3, r0
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fc57 	bl	8000f02 <lcd_send_string>
							lcd_put_cur(0,0);
 8002654:	2100      	movs	r1, #0
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe fbee 	bl	8000e38 <lcd_put_cur>
							//update menu booleans
							in_can_menu=1;
 800265c:	4b33      	ldr	r3, [pc, #204]	; (800272c <HAL_GPIO_EXTI_Callback+0x690>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
							in_main_menu=0;
 8002662:	4b2e      	ldr	r3, [pc, #184]	; (800271c <HAL_GPIO_EXTI_Callback+0x680>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
							change_value_bool=!change_value_bool;//invert change value bool
 8002668:	4b37      	ldr	r3, [pc, #220]	; (8002748 <HAL_GPIO_EXTI_Callback+0x6ac>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	4b33      	ldr	r3, [pc, #204]	; (8002748 <HAL_GPIO_EXTI_Callback+0x6ac>)
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e1b9      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						} else if(menu_pos==1){
 800267e:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_GPIO_EXTI_Callback+0x684>)
 8002680:	f993 3000 	ldrsb.w	r3, [r3]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d161      	bne.n	800274c <HAL_GPIO_EXTI_Callback+0x6b0>
							//display can menu
							lcd_put_cur(0,0);
 8002688:	2100      	movs	r1, #0
 800268a:	2000      	movs	r0, #0
 800268c:	f7fe fbd4 	bl	8000e38 <lcd_put_cur>
							lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 8002690:	4b29      	ldr	r3, [pc, #164]	; (8002738 <HAL_GPIO_EXTI_Callback+0x69c>)
 8002692:	f993 3000 	ldrsb.w	r3, [r3]
 8002696:	461a      	mov	r2, r3
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	4a27      	ldr	r2, [pc, #156]	; (800273c <HAL_GPIO_EXTI_Callback+0x6a0>)
 80026a0:	4413      	add	r3, r2
 80026a2:	2210      	movs	r2, #16
 80026a4:	4619      	mov	r1, r3
 80026a6:	4820      	ldr	r0, [pc, #128]	; (8002728 <HAL_GPIO_EXTI_Callback+0x68c>)
 80026a8:	f005 fe1d 	bl	80082e6 <strncpy>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fc27 	bl	8000f02 <lcd_send_string>
							lcd_put_cur(1,0);
 80026b4:	2100      	movs	r1, #0
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7fe fbbe 	bl	8000e38 <lcd_put_cur>
							lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_GPIO_EXTI_Callback+0x69c>)
 80026be:	f993 3000 	ldrsb.w	r3, [r3]
 80026c2:	3301      	adds	r3, #1
 80026c4:	220a      	movs	r2, #10
 80026c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80026ca:	fb02 f201 	mul.w	r2, r2, r1
 80026ce:	1a9a      	subs	r2, r3, r2
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	4413      	add	r3, r2
 80026d6:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_GPIO_EXTI_Callback+0x6a0>)
 80026d8:	4413      	add	r3, r2
 80026da:	2210      	movs	r2, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	4812      	ldr	r0, [pc, #72]	; (8002728 <HAL_GPIO_EXTI_Callback+0x68c>)
 80026e0:	f005 fe01 	bl	80082e6 <strncpy>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fc0b 	bl	8000f02 <lcd_send_string>
							lcd_put_cur(0,0);
 80026ec:	2100      	movs	r1, #0
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7fe fba2 	bl	8000e38 <lcd_put_cur>
							//update menu booleans
							in_analog_menu=1;
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_GPIO_EXTI_Callback+0x698>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
							in_main_menu=0;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <HAL_GPIO_EXTI_Callback+0x680>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
							change_value_bool=!change_value_bool;//invert change value bool
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_GPIO_EXTI_Callback+0x6ac>)
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e16d      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
 8002716:	bf00      	nop
 8002718:	20000384 	.word	0x20000384
 800271c:	2000015e 	.word	0x2000015e
 8002720:	20000383 	.word	0x20000383
 8002724:	20000008 	.word	0x20000008
 8002728:	200013a8 	.word	0x200013a8
 800272c:	20000380 	.word	0x20000380
 8002730:	2000004c 	.word	0x2000004c
 8002734:	20000381 	.word	0x20000381
 8002738:	20000385 	.word	0x20000385
 800273c:	200000b4 	.word	0x200000b4
 8002740:	20000388 	.word	0x20000388
 8002744:	20000162 	.word	0x20000162
 8002748:	20000387 	.word	0x20000387
						} else if (menu_pos==2){
 800274c:	4bb2      	ldr	r3, [pc, #712]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x97c>)
 800274e:	f993 3000 	ldrsb.w	r3, [r3]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d103      	bne.n	800275e <HAL_GPIO_EXTI_Callback+0x6c2>
							display_scroll=0;// reset display value menu position
 8002756:	4bb1      	ldr	r3, [pc, #708]	; (8002a1c <HAL_GPIO_EXTI_Callback+0x980>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e149      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						} else if (menu_pos==3){
 800275e:	4bae      	ldr	r3, [pc, #696]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x97c>)
 8002760:	f993 3000 	ldrsb.w	r3, [r3]
 8002764:	2b03      	cmp	r3, #3
 8002766:	f040 8144 	bne.w	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
							//move cursor for delay change
							lcd_put_cur(0,13);
 800276a:	210d      	movs	r1, #13
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe fb63 	bl	8000e38 <lcd_put_cur>
 8002772:	e13e      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						}
					} else if((in_can_menu&&can_pos==0)||(in_analog_menu&&analog_pos==0)){// back buttons
 8002774:	4baa      	ldr	r3, [pc, #680]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x984>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_GPIO_EXTI_Callback+0x6ea>
 800277c:	4ba9      	ldr	r3, [pc, #676]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x988>)
 800277e:	f993 3000 	ldrsb.w	r3, [r3]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_GPIO_EXTI_Callback+0x6fc>
 8002786:	4ba8      	ldr	r3, [pc, #672]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x98c>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d04e      	beq.n	800282c <HAL_GPIO_EXTI_Callback+0x790>
 800278e:	4ba7      	ldr	r3, [pc, #668]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x990>)
 8002790:	f993 3000 	ldrsb.w	r3, [r3]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d149      	bne.n	800282c <HAL_GPIO_EXTI_Callback+0x790>
						//display main menu
						lcd_put_cur(0,0);
 8002798:	2100      	movs	r1, #0
 800279a:	2000      	movs	r0, #0
 800279c:	f7fe fb4c 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80027a0:	4b9d      	ldr	r3, [pc, #628]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x97c>)
 80027a2:	f993 3000 	ldrsb.w	r3, [r3]
 80027a6:	461a      	mov	r2, r3
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4413      	add	r3, r2
 80027ae:	4aa0      	ldr	r2, [pc, #640]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x994>)
 80027b0:	4413      	add	r3, r2
 80027b2:	2210      	movs	r2, #16
 80027b4:	4619      	mov	r1, r3
 80027b6:	489f      	ldr	r0, [pc, #636]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x998>)
 80027b8:	f005 fd95 	bl	80082e6 <strncpy>
 80027bc:	4603      	mov	r3, r0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fb9f 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(1,0);
 80027c4:	2100      	movs	r1, #0
 80027c6:	2001      	movs	r0, #1
 80027c8:	f7fe fb36 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 80027cc:	4b92      	ldr	r3, [pc, #584]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x97c>)
 80027ce:	f993 3000 	ldrsb.w	r3, [r3]
 80027d2:	3301      	adds	r3, #1
 80027d4:	2204      	movs	r2, #4
 80027d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80027da:	fb02 f201 	mul.w	r2, r2, r1
 80027de:	1a9a      	subs	r2, r3, r2
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	4413      	add	r3, r2
 80027e6:	4a92      	ldr	r2, [pc, #584]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x994>)
 80027e8:	4413      	add	r3, r2
 80027ea:	2210      	movs	r2, #16
 80027ec:	4619      	mov	r1, r3
 80027ee:	4891      	ldr	r0, [pc, #580]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x998>)
 80027f0:	f005 fd79 	bl	80082e6 <strncpy>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fb83 	bl	8000f02 <lcd_send_string>
						lcd_put_cur(0,0);
 80027fc:	2100      	movs	r1, #0
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe fb1a 	bl	8000e38 <lcd_put_cur>
						//update menu booleans
						in_can_menu=0;
 8002804:	4b86      	ldr	r3, [pc, #536]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x984>)
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
						in_analog_menu=0;
 800280a:	4b87      	ldr	r3, [pc, #540]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x98c>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
						in_main_menu=1;
 8002810:	4b89      	ldr	r3, [pc, #548]	; (8002a38 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
						change_value_bool=!change_value_bool;//invert change value bool
 8002816:	4b89      	ldr	r3, [pc, #548]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	4b85      	ldr	r3, [pc, #532]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e0e2      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
					} else if (in_analog_menu){
 800282c:	4b7e      	ldr	r3, [pc, #504]	; (8002a28 <HAL_GPIO_EXTI_Callback+0x98c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d063      	beq.n	80028fc <HAL_GPIO_EXTI_Callback+0x860>
						if(analog_pos>=1 && analog_pos<=4){
 8002834:	4b7d      	ldr	r3, [pc, #500]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x990>)
 8002836:	f993 3000 	ldrsb.w	r3, [r3]
 800283a:	2b00      	cmp	r3, #0
 800283c:	dd18      	ble.n	8002870 <HAL_GPIO_EXTI_Callback+0x7d4>
 800283e:	4b7b      	ldr	r3, [pc, #492]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x990>)
 8002840:	f993 3000 	ldrsb.w	r3, [r3]
 8002844:	2b04      	cmp	r3, #4
 8002846:	dc13      	bgt.n	8002870 <HAL_GPIO_EXTI_Callback+0x7d4>
							zeroAnalog(analog_pos-1);// set the analog offsets to the current value
 8002848:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x990>)
 800284a:	f993 3000 	ldrsb.w	r3, [r3]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3b01      	subs	r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fbe3 	bl	8003020 <zeroAnalog>
							change_value_bool=!change_value_bool;//invert change value bool
 800285a:	4b78      	ldr	r3, [pc, #480]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	4b74      	ldr	r3, [pc, #464]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e0c0      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						}else if(analog_pos>=5 && analog_pos<=7){
 8002870:	4b6e      	ldr	r3, [pc, #440]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x990>)
 8002872:	f993 3000 	ldrsb.w	r3, [r3]
 8002876:	2b04      	cmp	r3, #4
 8002878:	dd18      	ble.n	80028ac <HAL_GPIO_EXTI_Callback+0x810>
 800287a:	4b6c      	ldr	r3, [pc, #432]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x990>)
 800287c:	f993 3000 	ldrsb.w	r3, [r3]
 8002880:	2b07      	cmp	r3, #7
 8002882:	dc13      	bgt.n	80028ac <HAL_GPIO_EXTI_Callback+0x810>
							toggleAnalog(analog_pos-4);
 8002884:	4b69      	ldr	r3, [pc, #420]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x990>)
 8002886:	f993 3000 	ldrsb.w	r3, [r3]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3b04      	subs	r3, #4
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fc23 	bl	80030dc <toggleAnalog>
							change_value_bool=!change_value_bool;//invert change value bool
 8002896:	4b69      	ldr	r3, [pc, #420]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e0a2      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						}else if(analog_pos==8){
 80028ac:	4b5f      	ldr	r3, [pc, #380]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x990>)
 80028ae:	f993 3000 	ldrsb.w	r3, [r3]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d10c      	bne.n	80028d0 <HAL_GPIO_EXTI_Callback+0x834>
							resetOffsets();// reset the analog offsets
 80028b6:	f000 fbf7 	bl	80030a8 <resetOffsets>
							change_value_bool =!change_value_bool;//invert change value bool
 80028ba:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e090      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						}else if(analog_pos==9){
 80028d0:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_GPIO_EXTI_Callback+0x990>)
 80028d2:	f993 3000 	ldrsb.w	r3, [r3]
 80028d6:	2b09      	cmp	r3, #9
 80028d8:	f040 808b 	bne.w	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
							store_offsets=1;
 80028dc:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <HAL_GPIO_EXTI_Callback+0x9a4>)
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
							storeInFlash();// store the analog offsets
 80028e2:	f000 ff47 	bl	8003774 <storeInFlash>
							change_value_bool=!change_value_bool;//invert change value bool
 80028e6:	4b55      	ldr	r3, [pc, #340]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf0c      	ite	eq
 80028ee:	2301      	moveq	r3, #1
 80028f0:	2300      	movne	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e07a      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						}

					} else if (in_can_menu){
 80028fc:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x984>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d011      	beq.n	8002928 <HAL_GPIO_EXTI_Callback+0x88c>
						if(can_pos==5){
 8002904:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x988>)
 8002906:	f993 3000 	ldrsb.w	r3, [r3]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d171      	bne.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
							resetCAN();// reset the CAN options to default
 800290e:	f000 fadd 	bl	8002ecc <resetCAN>
							change_value_bool=!change_value_bool;//invert change value bool
 8002912:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e064      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						}
					} else{
						//move cursor to end
						lcd_put_cur(0,15);
 8002928:	210f      	movs	r1, #15
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe fa84 	bl	8000e38 <lcd_put_cur>
 8002930:	e05f      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
					}

				}else{
					if(in_main_menu){
 8002932:	4b41      	ldr	r3, [pc, #260]	; (8002a38 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d043      	beq.n	80029c2 <HAL_GPIO_EXTI_Callback+0x926>
						if(menu_pos==2){ //display menu
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x97c>)
 800293c:	f993 3000 	ldrsb.w	r3, [r3]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d136      	bne.n	80029b2 <HAL_GPIO_EXTI_Callback+0x916>
							lcd_put_cur(0,0);
 8002944:	2100      	movs	r1, #0
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe fa76 	bl	8000e38 <lcd_put_cur>
							lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 800294c:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x97c>)
 800294e:	f993 3000 	ldrsb.w	r3, [r3]
 8002952:	461a      	mov	r2, r3
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	4413      	add	r3, r2
 800295a:	4a35      	ldr	r2, [pc, #212]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x994>)
 800295c:	4413      	add	r3, r2
 800295e:	2210      	movs	r2, #16
 8002960:	4619      	mov	r1, r3
 8002962:	4834      	ldr	r0, [pc, #208]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x998>)
 8002964:	f005 fcbf 	bl	80082e6 <strncpy>
 8002968:	4603      	mov	r3, r0
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fac9 	bl	8000f02 <lcd_send_string>
							lcd_put_cur(1,0);
 8002970:	2100      	movs	r1, #0
 8002972:	2001      	movs	r0, #1
 8002974:	f7fe fa60 	bl	8000e38 <lcd_put_cur>
							lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x97c>)
 800297a:	f993 3000 	ldrsb.w	r3, [r3]
 800297e:	3301      	adds	r3, #1
 8002980:	2204      	movs	r2, #4
 8002982:	fb93 f1f2 	sdiv	r1, r3, r2
 8002986:	fb02 f201 	mul.w	r2, r2, r1
 800298a:	1a9a      	subs	r2, r3, r2
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	4413      	add	r3, r2
 8002992:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <HAL_GPIO_EXTI_Callback+0x994>)
 8002994:	4413      	add	r3, r2
 8002996:	2210      	movs	r2, #16
 8002998:	4619      	mov	r1, r3
 800299a:	4826      	ldr	r0, [pc, #152]	; (8002a34 <HAL_GPIO_EXTI_Callback+0x998>)
 800299c:	f005 fca3 	bl	80082e6 <strncpy>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe faad 	bl	8000f02 <lcd_send_string>
							lcd_put_cur(0,0);
 80029a8:	2100      	movs	r1, #0
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7fe fa44 	bl	8000e38 <lcd_put_cur>
 80029b0:	e01f      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						}
						else if(menu_pos==3)
 80029b2:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_GPIO_EXTI_Callback+0x97c>)
 80029b4:	f993 3000 	ldrsb.w	r3, [r3]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d11a      	bne.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
							setDelay();//set Delay
 80029bc:	f000 fad6 	bl	8002f6c <setDelay>
 80029c0:	e017      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
					}
					else if(in_can_menu){
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_GPIO_EXTI_Callback+0x984>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						if(can_pos==1)
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x988>)
 80029cc:	f993 3000 	ldrsb.w	r3, [r3]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d102      	bne.n	80029da <HAL_GPIO_EXTI_Callback+0x93e>
							setBaudRate(); // set and store the selected baud rate
 80029d4:	f000 f874 	bl	8002ac0 <setBaudRate>
 80029d8:	e00b      	b.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
						else if(can_pos>=2 && can_pos<=4)
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x988>)
 80029dc:	f993 3000 	ldrsb.w	r3, [r3]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	dd06      	ble.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_GPIO_EXTI_Callback+0x988>)
 80029e6:	f993 3000 	ldrsb.w	r3, [r3]
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	dc01      	bgt.n	80029f2 <HAL_GPIO_EXTI_Callback+0x956>
							setCANID(); // set and store the selected can id
 80029ee:	f000 f985 	bl	8002cfc <setCANID>
					}

				}
				change_value_bool=!change_value_bool;//invert change value bool
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf0c      	ite	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	2300      	movne	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_GPIO_EXTI_Callback+0x9a0>)
 8002a04:	701a      	strb	r2, [r3, #0]
				btn_counter=0; // reset btn counter
 8002a06:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_GPIO_EXTI_Callback+0x9a8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	801a      	strh	r2, [r3, #0]
			}
}
 8002a0c:	e7ff      	b.n	8002a0e <HAL_GPIO_EXTI_Callback+0x972>
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000383 	.word	0x20000383
 8002a1c:	20000382 	.word	0x20000382
 8002a20:	20000380 	.word	0x20000380
 8002a24:	20000384 	.word	0x20000384
 8002a28:	20000381 	.word	0x20000381
 8002a2c:	20000385 	.word	0x20000385
 8002a30:	20000008 	.word	0x20000008
 8002a34:	200013a8 	.word	0x200013a8
 8002a38:	2000015e 	.word	0x2000015e
 8002a3c:	20000387 	.word	0x20000387
 8002a40:	20000370 	.word	0x20000370
 8002a44:	20000388 	.word	0x20000388

08002a48 <changeBaudRate>:


//changes the baud rate of the CAN connection
void changeBaudRate(uint8_t direction){
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
	baud_pos = ((baud_pos+direction)<0)?baud_rates_length-1:(baud_pos+direction)%baud_rates_length;//move baud rate position in given direction
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <changeBaudRate+0x70>)
 8002a54:	f993 3000 	ldrsb.w	r3, [r3]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	da05      	bge.n	8002a6e <changeBaudRate+0x26>
 8002a62:	2304      	movs	r3, #4
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	b25b      	sxtb	r3, r3
 8002a6c:	e00c      	b.n	8002a88 <changeBaudRate+0x40>
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <changeBaudRate+0x70>)
 8002a70:	f993 3000 	ldrsb.w	r3, [r3]
 8002a74:	461a      	mov	r2, r3
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	4413      	add	r3, r2
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002a80:	fb02 f201 	mul.w	r2, r2, r1
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <changeBaudRate+0x70>)
 8002a8a:	7013      	strb	r3, [r2, #0]

	//display the selected baud rate
	lcd_put_cur(0,12);
 8002a8c:	210c      	movs	r1, #12
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe f9d2 	bl	8000e38 <lcd_put_cur>
	lcd_send_string(baud_rates[baud_pos]);
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <changeBaudRate+0x70>)
 8002a96:	f993 3000 	ldrsb.w	r3, [r3]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4a07      	ldr	r2, [pc, #28]	; (8002abc <changeBaudRate+0x74>)
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe fa2e 	bl	8000f02 <lcd_send_string>
	lcd_put_cur(0,15);
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fe f9c5 	bl	8000e38 <lcd_put_cur>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000015f 	.word	0x2000015f
 8002abc:	0800cef8 	.word	0x0800cef8

08002ac0 <setBaudRate>:

//set the baud rate and store it
void setBaudRate(void){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
	//stop can bus
	HAL_CAN_Stop(&hcan);
 8002ac4:	482c      	ldr	r0, [pc, #176]	; (8002b78 <setBaudRate+0xb8>)
 8002ac6:	f001 fc6a 	bl	800439e <HAL_CAN_Stop>

	//set prescaler
	PSC=pow(2,4-baud_pos);
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <setBaudRate+0xbc>)
 8002acc:	f993 3000 	ldrsb.w	r3, [r3]
 8002ad0:	f1c3 0304 	rsb	r3, r3, #4
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd25 	bl	8000524 <__aeabi_i2d>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	ec43 2b11 	vmov	d1, r2, r3
 8002ae2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002b70 <setBaudRate+0xb0>
 8002ae6:	f009 f997 	bl	800be18 <pow>
 8002aea:	ec53 2b10 	vmov	r2, r3, d0
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	f7fe f859 	bl	8000ba8 <__aeabi_d2uiz>
 8002af6:	4603      	mov	r3, r0
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <setBaudRate+0xc0>)
 8002afc:	701a      	strb	r2, [r3, #0]
	hcan.Init.Prescaler = PSC;
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <setBaudRate+0xc0>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <setBaudRate+0xb8>)
 8002b06:	605a      	str	r2, [r3, #4]

	//reinitialize can
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002b08:	481b      	ldr	r0, [pc, #108]	; (8002b78 <setBaudRate+0xb8>)
 8002b0a:	f001 fa3f 	bl	8003f8c <HAL_CAN_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <setBaudRate+0x58>
	{
		Error_Handler();
 8002b14:	f000 fed0 	bl	80038b8 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002b18:	4817      	ldr	r0, [pc, #92]	; (8002b78 <setBaudRate+0xb8>)
 8002b1a:	f001 fbfc 	bl	8004316 <HAL_CAN_Start>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <setBaudRate+0x68>
		Error_Handler();
 8002b24:	f000 fec8 	bl	80038b8 <Error_Handler>
	}

	//store new baud in flash
	storeInFlash();
 8002b28:	f000 fe24 	bl	8003774 <storeInFlash>

	//save the baud rate in menu
	memset(temp,0,17); // erase the temp array
 8002b2c:	2211      	movs	r2, #17
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4814      	ldr	r0, [pc, #80]	; (8002b84 <setBaudRate+0xc4>)
 8002b32:	f004 fce9 	bl	8007508 <memset>
	strncpy(temp, "Baud rate:  ",16);
 8002b36:	2210      	movs	r2, #16
 8002b38:	4913      	ldr	r1, [pc, #76]	; (8002b88 <setBaudRate+0xc8>)
 8002b3a:	4812      	ldr	r0, [pc, #72]	; (8002b84 <setBaudRate+0xc4>)
 8002b3c:	f005 fbd3 	bl	80082e6 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <setBaudRate+0xbc>)
 8002b42:	f993 3000 	ldrsb.w	r3, [r3]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4a10      	ldr	r2, [pc, #64]	; (8002b8c <setBaudRate+0xcc>)
 8002b4a:	4413      	add	r3, r2
 8002b4c:	2211      	movs	r2, #17
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <setBaudRate+0xc4>)
 8002b52:	f005 fb90 	bl	8008276 <strlcat>
	strlcpy(can_menu[1],temp,17);
 8002b56:	2211      	movs	r2, #17
 8002b58:	490a      	ldr	r1, [pc, #40]	; (8002b84 <setBaudRate+0xc4>)
 8002b5a:	480d      	ldr	r0, [pc, #52]	; (8002b90 <setBaudRate+0xd0>)
 8002b5c:	f005 fbae 	bl	80082bc <strlcpy>
	lcd_put_cur(0,0);
 8002b60:	2100      	movs	r1, #0
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fe f968 	bl	8000e38 <lcd_put_cur>
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	f3af 8000 	nop.w
 8002b70:	00000000 	.word	0x00000000
 8002b74:	40000000 	.word	0x40000000
 8002b78:	2000137c 	.word	0x2000137c
 8002b7c:	2000015f 	.word	0x2000015f
 8002b80:	20000000 	.word	0x20000000
 8002b84:	200013a8 	.word	0x200013a8
 8002b88:	0800cd88 	.word	0x0800cd88
 8002b8c:	0800cef8 	.word	0x0800cef8
 8002b90:	2000005d 	.word	0x2000005d

08002b94 <changeCANID>:

//changes the ID of the selected can device
void changeCANID(uint8_t direction){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
	if(can_pos==2){//change can id 1
 8002b9e:	4b4f      	ldr	r3, [pc, #316]	; (8002cdc <changeCANID+0x148>)
 8002ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d128      	bne.n	8002bfa <changeCANID+0x66>
		can_id_1+=direction;
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	; (8002ce0 <changeCANID+0x14c>)
 8002baa:	781a      	ldrb	r2, [r3, #0]
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	4413      	add	r3, r2
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b4b      	ldr	r3, [pc, #300]	; (8002ce0 <changeCANID+0x14c>)
 8002bb4:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 8002bb6:	e006      	b.n	8002bc6 <changeCANID+0x32>
			can_id_1+=direction;
 8002bb8:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <changeCANID+0x14c>)
 8002bba:	781a      	ldrb	r2, [r3, #0]
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <changeCANID+0x14c>)
 8002bc4:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 8002bc6:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <changeCANID+0x14c>)
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <changeCANID+0x150>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d0f2      	beq.n	8002bb8 <changeCANID+0x24>
 8002bd2:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <changeCANID+0x14c>)
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	4b44      	ldr	r3, [pc, #272]	; (8002ce8 <changeCANID+0x154>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d0ec      	beq.n	8002bb8 <changeCANID+0x24>
		sprintf(char_arr, "%03d", can_id_1);
 8002bde:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <changeCANID+0x14c>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	4941      	ldr	r1, [pc, #260]	; (8002cec <changeCANID+0x158>)
 8002be6:	4842      	ldr	r0, [pc, #264]	; (8002cf0 <changeCANID+0x15c>)
 8002be8:	f005 fb16 	bl	8008218 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002bec:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <changeCANID+0x160>)
 8002bee:	4a40      	ldr	r2, [pc, #256]	; (8002cf0 <changeCANID+0x15c>)
 8002bf0:	8811      	ldrh	r1, [r2, #0]
 8002bf2:	7892      	ldrb	r2, [r2, #2]
 8002bf4:	8019      	strh	r1, [r3, #0]
 8002bf6:	709a      	strb	r2, [r3, #2]
 8002bf8:	e05a      	b.n	8002cb0 <changeCANID+0x11c>
	} else if(can_pos==3){//change can id 2
 8002bfa:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <changeCANID+0x148>)
 8002bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d128      	bne.n	8002c56 <changeCANID+0xc2>
		can_id_2+=direction;
 8002c04:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <changeCANID+0x150>)
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <changeCANID+0x150>)
 8002c10:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 8002c12:	e006      	b.n	8002c22 <changeCANID+0x8e>
			can_id_2+=direction;
 8002c14:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <changeCANID+0x150>)
 8002c16:	781a      	ldrb	r2, [r3, #0]
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <changeCANID+0x150>)
 8002c20:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 8002c22:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <changeCANID+0x150>)
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <changeCANID+0x14c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d0f2      	beq.n	8002c14 <changeCANID+0x80>
 8002c2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <changeCANID+0x150>)
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <changeCANID+0x154>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d0ec      	beq.n	8002c14 <changeCANID+0x80>
		sprintf(char_arr, "%03d", can_id_2);
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <changeCANID+0x150>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	492a      	ldr	r1, [pc, #168]	; (8002cec <changeCANID+0x158>)
 8002c42:	482b      	ldr	r0, [pc, #172]	; (8002cf0 <changeCANID+0x15c>)
 8002c44:	f005 fae8 	bl	8008218 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <changeCANID+0x160>)
 8002c4a:	4a29      	ldr	r2, [pc, #164]	; (8002cf0 <changeCANID+0x15c>)
 8002c4c:	8811      	ldrh	r1, [r2, #0]
 8002c4e:	7892      	ldrb	r2, [r2, #2]
 8002c50:	8019      	strh	r1, [r3, #0]
 8002c52:	709a      	strb	r2, [r3, #2]
 8002c54:	e02c      	b.n	8002cb0 <changeCANID+0x11c>
	} else if(can_pos==4){// change can id 3
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <changeCANID+0x148>)
 8002c58:	f993 3000 	ldrsb.w	r3, [r3]
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d127      	bne.n	8002cb0 <changeCANID+0x11c>
		can_id_3+=direction;
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <changeCANID+0x154>)
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	4413      	add	r3, r2
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <changeCANID+0x154>)
 8002c6c:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 8002c6e:	e006      	b.n	8002c7e <changeCANID+0xea>
			can_id_3+=direction;
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <changeCANID+0x154>)
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	4413      	add	r3, r2
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <changeCANID+0x154>)
 8002c7c:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 8002c7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <changeCANID+0x154>)
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <changeCANID+0x14c>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d0f2      	beq.n	8002c70 <changeCANID+0xdc>
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <changeCANID+0x154>)
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <changeCANID+0x150>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d0ec      	beq.n	8002c70 <changeCANID+0xdc>
		sprintf(char_arr, "%03d", can_id_3);
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <changeCANID+0x154>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4913      	ldr	r1, [pc, #76]	; (8002cec <changeCANID+0x158>)
 8002c9e:	4814      	ldr	r0, [pc, #80]	; (8002cf0 <changeCANID+0x15c>)
 8002ca0:	f005 faba 	bl	8008218 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <changeCANID+0x160>)
 8002ca6:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <changeCANID+0x15c>)
 8002ca8:	8811      	ldrh	r1, [r2, #0]
 8002caa:	7892      	ldrb	r2, [r2, #2]
 8002cac:	8019      	strh	r1, [r3, #0]
 8002cae:	709a      	strb	r2, [r3, #2]
	}
	//display the selected CAN ID
	lcd_put_cur(0,13);
 8002cb0:	210d      	movs	r1, #13
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7fe f8c0 	bl	8000e38 <lcd_put_cur>
	lcd_send_string("    ");
 8002cb8:	480f      	ldr	r0, [pc, #60]	; (8002cf8 <changeCANID+0x164>)
 8002cba:	f7fe f922 	bl	8000f02 <lcd_send_string>
	lcd_put_cur(0,13);
 8002cbe:	210d      	movs	r1, #13
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7fe f8b9 	bl	8000e38 <lcd_put_cur>
	lcd_send_string(modified_can_id);
 8002cc6:	480b      	ldr	r0, [pc, #44]	; (8002cf4 <changeCANID+0x160>)
 8002cc8:	f7fe f91b 	bl	8000f02 <lcd_send_string>
	lcd_put_cur(0,15);
 8002ccc:	210f      	movs	r1, #15
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fe f8b2 	bl	8000e38 <lcd_put_cur>
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000384 	.word	0x20000384
 8002ce0:	20003420 	.word	0x20003420
 8002ce4:	20001410 	.word	0x20001410
 8002ce8:	20000398 	.word	0x20000398
 8002cec:	0800cda8 	.word	0x0800cda8
 8002cf0:	2000348c 	.word	0x2000348c
 8002cf4:	20003488 	.word	0x20003488
 8002cf8:	0800ce38 	.word	0x0800ce38

08002cfc <setCANID>:

//set the can IDs
void setCANID(void){
 8002cfc:	b5b0      	push	{r4, r5, r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
	headers_1.StdId = can_id_1; // set CAN ID 1
 8002d00:	4b63      	ldr	r3, [pc, #396]	; (8002e90 <setCANID+0x194>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <setCANID+0x198>)
 8002d08:	601a      	str	r2, [r3, #0]
	headers_2.StdId = can_id_2; // set CAN ID 2
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <setCANID+0x19c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b62      	ldr	r3, [pc, #392]	; (8002e9c <setCANID+0x1a0>)
 8002d12:	601a      	str	r2, [r3, #0]
	headers_3.StdId = can_id_3; // set CAN ID 3
 8002d14:	4b62      	ldr	r3, [pc, #392]	; (8002ea0 <setCANID+0x1a4>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b62      	ldr	r3, [pc, #392]	; (8002ea4 <setCANID+0x1a8>)
 8002d1c:	601a      	str	r2, [r3, #0]

	//Store the CAN IDs
	id_arr[0]=can_id_1;
 8002d1e:	4b5c      	ldr	r3, [pc, #368]	; (8002e90 <setCANID+0x194>)
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	4b61      	ldr	r3, [pc, #388]	; (8002ea8 <setCANID+0x1ac>)
 8002d24:	701a      	strb	r2, [r3, #0]
	id_arr[1]=can_id_2;
 8002d26:	4b5c      	ldr	r3, [pc, #368]	; (8002e98 <setCANID+0x19c>)
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <setCANID+0x1ac>)
 8002d2c:	705a      	strb	r2, [r3, #1]
	id_arr[2]=can_id_3;
 8002d2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ea0 <setCANID+0x1a4>)
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <setCANID+0x1ac>)
 8002d34:	709a      	strb	r2, [r3, #2]
	id_arr[3]=0;
 8002d36:	4b5c      	ldr	r3, [pc, #368]	; (8002ea8 <setCANID+0x1ac>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	70da      	strb	r2, [r3, #3]

	storeInFlash();
 8002d3c:	f000 fd1a 	bl	8003774 <storeInFlash>


	//save can IDs in menu
	//can id 1
	memset(temp,0,17); // erase the temp array
 8002d40:	2211      	movs	r2, #17
 8002d42:	2100      	movs	r1, #0
 8002d44:	4859      	ldr	r0, [pc, #356]	; (8002eac <setCANID+0x1b0>)
 8002d46:	f004 fbdf 	bl	8007508 <memset>
	strncpy(temp, "CAN ID ",16);
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	4958      	ldr	r1, [pc, #352]	; (8002eb0 <setCANID+0x1b4>)
 8002d4e:	4857      	ldr	r0, [pc, #348]	; (8002eac <setCANID+0x1b0>)
 8002d50:	f005 fac9 	bl	80082e6 <strncpy>
	strcat(temp, "1:    ");
 8002d54:	4855      	ldr	r0, [pc, #340]	; (8002eac <setCANID+0x1b0>)
 8002d56:	f7fd fa3b 	bl	80001d0 <strlen>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b53      	ldr	r3, [pc, #332]	; (8002eac <setCANID+0x1b0>)
 8002d60:	4413      	add	r3, r2
 8002d62:	4a54      	ldr	r2, [pc, #336]	; (8002eb4 <setCANID+0x1b8>)
 8002d64:	6810      	ldr	r0, [r2, #0]
 8002d66:	6018      	str	r0, [r3, #0]
 8002d68:	8891      	ldrh	r1, [r2, #4]
 8002d6a:	7992      	ldrb	r2, [r2, #6]
 8002d6c:	8099      	strh	r1, [r3, #4]
 8002d6e:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002d70:	2210      	movs	r2, #16
 8002d72:	2100      	movs	r1, #0
 8002d74:	4850      	ldr	r0, [pc, #320]	; (8002eb8 <setCANID+0x1bc>)
 8002d76:	f004 fbc7 	bl	8007508 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8002d7a:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <setCANID+0x194>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	494e      	ldr	r1, [pc, #312]	; (8002ebc <setCANID+0x1c0>)
 8002d82:	484d      	ldr	r0, [pc, #308]	; (8002eb8 <setCANID+0x1bc>)
 8002d84:	f005 fa48 	bl	8008218 <siprintf>
	strlcat(temp, char_arr,17);
 8002d88:	2211      	movs	r2, #17
 8002d8a:	494b      	ldr	r1, [pc, #300]	; (8002eb8 <setCANID+0x1bc>)
 8002d8c:	4847      	ldr	r0, [pc, #284]	; (8002eac <setCANID+0x1b0>)
 8002d8e:	f005 fa72 	bl	8008276 <strlcat>
	memcpy(can_menu[2],temp,17);
 8002d92:	4b4b      	ldr	r3, [pc, #300]	; (8002ec0 <setCANID+0x1c4>)
 8002d94:	4a45      	ldr	r2, [pc, #276]	; (8002eac <setCANID+0x1b0>)
 8002d96:	3322      	adds	r3, #34	; 0x22
 8002d98:	6815      	ldr	r5, [r2, #0]
 8002d9a:	6854      	ldr	r4, [r2, #4]
 8002d9c:	6890      	ldr	r0, [r2, #8]
 8002d9e:	68d1      	ldr	r1, [r2, #12]
 8002da0:	601d      	str	r5, [r3, #0]
 8002da2:	605c      	str	r4, [r3, #4]
 8002da4:	6098      	str	r0, [r3, #8]
 8002da6:	60d9      	str	r1, [r3, #12]
 8002da8:	7c12      	ldrb	r2, [r2, #16]
 8002daa:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 8002dac:	2211      	movs	r2, #17
 8002dae:	2100      	movs	r1, #0
 8002db0:	483e      	ldr	r0, [pc, #248]	; (8002eac <setCANID+0x1b0>)
 8002db2:	f004 fba9 	bl	8007508 <memset>
	strncpy(temp, "CAN ID ",16);
 8002db6:	2210      	movs	r2, #16
 8002db8:	493d      	ldr	r1, [pc, #244]	; (8002eb0 <setCANID+0x1b4>)
 8002dba:	483c      	ldr	r0, [pc, #240]	; (8002eac <setCANID+0x1b0>)
 8002dbc:	f005 fa93 	bl	80082e6 <strncpy>
	strcat(temp, "2:    ");
 8002dc0:	483a      	ldr	r0, [pc, #232]	; (8002eac <setCANID+0x1b0>)
 8002dc2:	f7fd fa05 	bl	80001d0 <strlen>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b38      	ldr	r3, [pc, #224]	; (8002eac <setCANID+0x1b0>)
 8002dcc:	4413      	add	r3, r2
 8002dce:	4a3d      	ldr	r2, [pc, #244]	; (8002ec4 <setCANID+0x1c8>)
 8002dd0:	6810      	ldr	r0, [r2, #0]
 8002dd2:	6018      	str	r0, [r3, #0]
 8002dd4:	8891      	ldrh	r1, [r2, #4]
 8002dd6:	7992      	ldrb	r2, [r2, #6]
 8002dd8:	8099      	strh	r1, [r3, #4]
 8002dda:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002ddc:	2210      	movs	r2, #16
 8002dde:	2100      	movs	r1, #0
 8002de0:	4835      	ldr	r0, [pc, #212]	; (8002eb8 <setCANID+0x1bc>)
 8002de2:	f004 fb91 	bl	8007508 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 8002de6:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <setCANID+0x19c>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4933      	ldr	r1, [pc, #204]	; (8002ebc <setCANID+0x1c0>)
 8002dee:	4832      	ldr	r0, [pc, #200]	; (8002eb8 <setCANID+0x1bc>)
 8002df0:	f005 fa12 	bl	8008218 <siprintf>
	strlcat(temp, char_arr,17);
 8002df4:	2211      	movs	r2, #17
 8002df6:	4930      	ldr	r1, [pc, #192]	; (8002eb8 <setCANID+0x1bc>)
 8002df8:	482c      	ldr	r0, [pc, #176]	; (8002eac <setCANID+0x1b0>)
 8002dfa:	f005 fa3c 	bl	8008276 <strlcat>
	memcpy(can_menu[3],temp,17);
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <setCANID+0x1c4>)
 8002e00:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <setCANID+0x1b0>)
 8002e02:	3333      	adds	r3, #51	; 0x33
 8002e04:	6815      	ldr	r5, [r2, #0]
 8002e06:	6854      	ldr	r4, [r2, #4]
 8002e08:	6890      	ldr	r0, [r2, #8]
 8002e0a:	68d1      	ldr	r1, [r2, #12]
 8002e0c:	601d      	str	r5, [r3, #0]
 8002e0e:	605c      	str	r4, [r3, #4]
 8002e10:	6098      	str	r0, [r3, #8]
 8002e12:	60d9      	str	r1, [r3, #12]
 8002e14:	7c12      	ldrb	r2, [r2, #16]
 8002e16:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 8002e18:	2211      	movs	r2, #17
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4823      	ldr	r0, [pc, #140]	; (8002eac <setCANID+0x1b0>)
 8002e1e:	f004 fb73 	bl	8007508 <memset>
	strncpy(temp, "CAN ID ",16);
 8002e22:	2210      	movs	r2, #16
 8002e24:	4922      	ldr	r1, [pc, #136]	; (8002eb0 <setCANID+0x1b4>)
 8002e26:	4821      	ldr	r0, [pc, #132]	; (8002eac <setCANID+0x1b0>)
 8002e28:	f005 fa5d 	bl	80082e6 <strncpy>
	strcat(temp, "3:    ");
 8002e2c:	481f      	ldr	r0, [pc, #124]	; (8002eac <setCANID+0x1b0>)
 8002e2e:	f7fd f9cf 	bl	80001d0 <strlen>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <setCANID+0x1b0>)
 8002e38:	4413      	add	r3, r2
 8002e3a:	4a23      	ldr	r2, [pc, #140]	; (8002ec8 <setCANID+0x1cc>)
 8002e3c:	6810      	ldr	r0, [r2, #0]
 8002e3e:	6018      	str	r0, [r3, #0]
 8002e40:	8891      	ldrh	r1, [r2, #4]
 8002e42:	7992      	ldrb	r2, [r2, #6]
 8002e44:	8099      	strh	r1, [r3, #4]
 8002e46:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002e48:	2210      	movs	r2, #16
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	481a      	ldr	r0, [pc, #104]	; (8002eb8 <setCANID+0x1bc>)
 8002e4e:	f004 fb5b 	bl	8007508 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <setCANID+0x1a4>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	4918      	ldr	r1, [pc, #96]	; (8002ebc <setCANID+0x1c0>)
 8002e5a:	4817      	ldr	r0, [pc, #92]	; (8002eb8 <setCANID+0x1bc>)
 8002e5c:	f005 f9dc 	bl	8008218 <siprintf>
	strlcat(temp, char_arr,17);
 8002e60:	2211      	movs	r2, #17
 8002e62:	4915      	ldr	r1, [pc, #84]	; (8002eb8 <setCANID+0x1bc>)
 8002e64:	4811      	ldr	r0, [pc, #68]	; (8002eac <setCANID+0x1b0>)
 8002e66:	f005 fa06 	bl	8008276 <strlcat>
	memcpy(can_menu[4],temp,17);
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <setCANID+0x1c4>)
 8002e6c:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <setCANID+0x1b0>)
 8002e6e:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8002e72:	4615      	mov	r5, r2
 8002e74:	6828      	ldr	r0, [r5, #0]
 8002e76:	6869      	ldr	r1, [r5, #4]
 8002e78:	68aa      	ldr	r2, [r5, #8]
 8002e7a:	68eb      	ldr	r3, [r5, #12]
 8002e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e7e:	7c2b      	ldrb	r3, [r5, #16]
 8002e80:	7023      	strb	r3, [r4, #0]

	lcd_put_cur(0,0);
 8002e82:	2100      	movs	r1, #0
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fd ffd7 	bl	8000e38 <lcd_put_cur>
}
 8002e8a:	bf00      	nop
 8002e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20003420 	.word	0x20003420
 8002e94:	20001364 	.word	0x20001364
 8002e98:	20001410 	.word	0x20001410
 8002e9c:	20003424 	.word	0x20003424
 8002ea0:	20000398 	.word	0x20000398
 8002ea4:	2000134c 	.word	0x2000134c
 8002ea8:	200003a4 	.word	0x200003a4
 8002eac:	200013a8 	.word	0x200013a8
 8002eb0:	0800cd98 	.word	0x0800cd98
 8002eb4:	0800cda0 	.word	0x0800cda0
 8002eb8:	2000348c 	.word	0x2000348c
 8002ebc:	0800cda8 	.word	0x0800cda8
 8002ec0:	2000004c 	.word	0x2000004c
 8002ec4:	0800cdb0 	.word	0x0800cdb0
 8002ec8:	0800cdb8 	.word	0x0800cdb8

08002ecc <resetCAN>:

//reset CAN Variables
void resetCAN(void){
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
	//reset IDs
	can_id_1=1;
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <resetCAN+0x28>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
	can_id_2=2;
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <resetCAN+0x2c>)
 8002ed8:	2202      	movs	r2, #2
 8002eda:	701a      	strb	r2, [r3, #0]
	can_id_3=3;
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <resetCAN+0x30>)
 8002ede:	2203      	movs	r2, #3
 8002ee0:	701a      	strb	r2, [r3, #0]
	setCANID();
 8002ee2:	f7ff ff0b 	bl	8002cfc <setCANID>

	//reset baud rate to 1M
	baud_pos=3;
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <resetCAN+0x34>)
 8002ee8:	2203      	movs	r2, #3
 8002eea:	701a      	strb	r2, [r3, #0]
	setBaudRate();
 8002eec:	f7ff fde8 	bl	8002ac0 <setBaudRate>
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20003420 	.word	0x20003420
 8002ef8:	20001410 	.word	0x20001410
 8002efc:	20000398 	.word	0x20000398
 8002f00:	2000015f 	.word	0x2000015f

08002f04 <changeDelay>:

//change the number of delays between samples
void changeDelay(uint16_t direction){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	80fb      	strh	r3, [r7, #6]
	num_delays+=direction;//move num_delays in given direction
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <changeDelay+0x5c>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <changeDelay+0x5c>)
 8002f1c:	701a      	strb	r2, [r3, #0]

	//display new delay in microseconds
	lcd_put_cur(0,9);
 8002f1e:	2109      	movs	r1, #9
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fd ff89 	bl	8000e38 <lcd_put_cur>
	char temp_arr[5];
	sprintf(temp_arr, "%05d", us*(num_delays+1));
 8002f26:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <changeDelay+0x60>)
 8002f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <changeDelay+0x5c>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	3301      	adds	r3, #1
 8002f34:	fb03 f202 	mul.w	r2, r3, r2
 8002f38:	f107 0308 	add.w	r3, r7, #8
 8002f3c:	490a      	ldr	r1, [pc, #40]	; (8002f68 <changeDelay+0x64>)
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f005 f96a 	bl	8008218 <siprintf>
	lcd_send_string(temp_arr);
 8002f44:	f107 0308 	add.w	r3, r7, #8
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd ffda 	bl	8000f02 <lcd_send_string>
	lcd_put_cur(0,13);
 8002f4e:	210d      	movs	r1, #13
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fd ff71 	bl	8000e38 <lcd_put_cur>
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000386 	.word	0x20000386
 8002f64:	20000160 	.word	0x20000160
 8002f68:	0800cdcc 	.word	0x0800cdcc

08002f6c <setDelay>:

//change the prescaler to achieve the desired baud rate and reinitialize the can bus
void setDelay(void){
 8002f6c:	b5b0      	push	{r4, r5, r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
	//sore the nmber of delays in flash
	storeInFlash();
 8002f70:	f000 fc00 	bl	8003774 <storeInFlash>
	TIM3->ARR = ((num_delays+1)*us) - 1;//change CAN interrupt timer period
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <setDelay+0x90>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	4a21      	ldr	r2, [pc, #132]	; (8003000 <setDelay+0x94>)
 8002f7c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002f80:	fb02 f303 	mul.w	r3, r2, r3
 8002f84:	1e5a      	subs	r2, r3, #1
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <setDelay+0x98>)
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c

	//save the delay in microseconds in menu
	memset(temp,0,17); // erase the temp array
 8002f8a:	2211      	movs	r2, #17
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	481e      	ldr	r0, [pc, #120]	; (8003008 <setDelay+0x9c>)
 8002f90:	f004 faba 	bl	8007508 <memset>
	strncpy(temp, "Delay:   ",16);
 8002f94:	2210      	movs	r2, #16
 8002f96:	491d      	ldr	r1, [pc, #116]	; (800300c <setDelay+0xa0>)
 8002f98:	481b      	ldr	r0, [pc, #108]	; (8003008 <setDelay+0x9c>)
 8002f9a:	f005 f9a4 	bl	80082e6 <strncpy>
	memset(char_arr, 0, 16);
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	481b      	ldr	r0, [pc, #108]	; (8003010 <setDelay+0xa4>)
 8002fa4:	f004 fab0 	bl	8007508 <memset>
	sprintf(char_arr, "%05d", us*(num_delays+1));
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <setDelay+0x94>)
 8002faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <setDelay+0x90>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	fb03 f302 	mul.w	r3, r3, r2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4915      	ldr	r1, [pc, #84]	; (8003014 <setDelay+0xa8>)
 8002fbe:	4814      	ldr	r0, [pc, #80]	; (8003010 <setDelay+0xa4>)
 8002fc0:	f005 f92a 	bl	8008218 <siprintf>
	strcat(temp, char_arr);
 8002fc4:	4912      	ldr	r1, [pc, #72]	; (8003010 <setDelay+0xa4>)
 8002fc6:	4810      	ldr	r0, [pc, #64]	; (8003008 <setDelay+0x9c>)
 8002fc8:	f005 f946 	bl	8008258 <strcat>
	strlcat(temp,"us",17);
 8002fcc:	2211      	movs	r2, #17
 8002fce:	4912      	ldr	r1, [pc, #72]	; (8003018 <setDelay+0xac>)
 8002fd0:	480d      	ldr	r0, [pc, #52]	; (8003008 <setDelay+0x9c>)
 8002fd2:	f005 f950 	bl	8008276 <strlcat>
	memcpy(main_menu[3],temp,17);
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <setDelay+0xb0>)
 8002fd8:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <setDelay+0x9c>)
 8002fda:	3333      	adds	r3, #51	; 0x33
 8002fdc:	6815      	ldr	r5, [r2, #0]
 8002fde:	6854      	ldr	r4, [r2, #4]
 8002fe0:	6890      	ldr	r0, [r2, #8]
 8002fe2:	68d1      	ldr	r1, [r2, #12]
 8002fe4:	601d      	str	r5, [r3, #0]
 8002fe6:	605c      	str	r4, [r3, #4]
 8002fe8:	6098      	str	r0, [r3, #8]
 8002fea:	60d9      	str	r1, [r3, #12]
 8002fec:	7c12      	ldrb	r2, [r2, #16]
 8002fee:	741a      	strb	r2, [r3, #16]
	lcd_put_cur(0,0);
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fd ff20 	bl	8000e38 <lcd_put_cur>
}
 8002ff8:	bf00      	nop
 8002ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8002ffc:	20000386 	.word	0x20000386
 8003000:	20000160 	.word	0x20000160
 8003004:	40000400 	.word	0x40000400
 8003008:	200013a8 	.word	0x200013a8
 800300c:	0800cdc0 	.word	0x0800cdc0
 8003010:	2000348c 	.word	0x2000348c
 8003014:	0800cdcc 	.word	0x0800cdcc
 8003018:	0800cdd4 	.word	0x0800cdd4
 800301c:	20000008 	.word	0x20000008

08003020 <zeroAnalog>:

//sets an offset for the specified analog value
void zeroAnalog(uint8_t analog_id){
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
	if(analog_id==0){//zero all
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10f      	bne.n	8003050 <zeroAnalog+0x30>
		analog_1_offset = raw_1;
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <zeroAnalog+0x70>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <zeroAnalog+0x74>)
 8003038:	601a      	str	r2, [r3, #0]
		analog_2_offset = raw_2;
 800303a:	4b17      	ldr	r3, [pc, #92]	; (8003098 <zeroAnalog+0x78>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <zeroAnalog+0x7c>)
 8003042:	601a      	str	r2, [r3, #0]
		analog_3_offset = raw_3;
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <zeroAnalog+0x80>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <zeroAnalog+0x84>)
 800304c:	601a      	str	r2, [r3, #0]
		analog_1_offset = raw_1;
	else if(analog_id==2)//zero 2
		analog_2_offset = raw_2;
	else if(analog_id==3)//zero 3
		analog_3_offset = raw_3;
}
 800304e:	e019      	b.n	8003084 <zeroAnalog+0x64>
	}else if(analog_id==1)//zero 1
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <zeroAnalog+0x42>
		analog_1_offset = raw_1;
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <zeroAnalog+0x70>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <zeroAnalog+0x74>)
 800305e:	601a      	str	r2, [r3, #0]
}
 8003060:	e010      	b.n	8003084 <zeroAnalog+0x64>
	else if(analog_id==2)//zero 2
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d105      	bne.n	8003074 <zeroAnalog+0x54>
		analog_2_offset = raw_2;
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <zeroAnalog+0x78>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <zeroAnalog+0x7c>)
 8003070:	601a      	str	r2, [r3, #0]
}
 8003072:	e007      	b.n	8003084 <zeroAnalog+0x64>
	else if(analog_id==3)//zero 3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d104      	bne.n	8003084 <zeroAnalog+0x64>
		analog_3_offset = raw_3;
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <zeroAnalog+0x80>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <zeroAnalog+0x84>)
 8003082:	601a      	str	r2, [r3, #0]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	20001348 	.word	0x20001348
 8003094:	20000364 	.word	0x20000364
 8003098:	200033d0 	.word	0x200033d0
 800309c:	20000368 	.word	0x20000368
 80030a0:	200003a0 	.word	0x200003a0
 80030a4:	2000036c 	.word	0x2000036c

080030a8 <resetOffsets>:

//resets all analog offsets to 0 and stores it in flash
void resetOffsets(void){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	analog_1_offset=0;
 80030ac:	4b07      	ldr	r3, [pc, #28]	; (80030cc <resetOffsets+0x24>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
	analog_2_offset=0;
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <resetOffsets+0x28>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
	analog_3_offset=0;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <resetOffsets+0x2c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

	store_offsets=1;
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <resetOffsets+0x30>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]

	storeInFlash();
 80030c4:	f000 fb56 	bl	8003774 <storeInFlash>
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000364 	.word	0x20000364
 80030d0:	20000368 	.word	0x20000368
 80030d4:	2000036c 	.word	0x2000036c
 80030d8:	20000370 	.word	0x20000370

080030dc <toggleAnalog>:

//turns the analog device on or off
void toggleAnalog(uint8_t analog_id){
 80030dc:	b5b0      	push	{r4, r5, r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
	uint8_t enabled=0;//bool to indicate if the change enabled the device
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
	//update state and display it
	lcd_put_cur(0,13);
 80030ea:	210d      	movs	r1, #13
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7fd fea3 	bl	8000e38 <lcd_put_cur>
	if(analog_id==1){
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d117      	bne.n	8003128 <toggleAnalog+0x4c>
		if(analog_1_enabled)
 80030f8:	4b79      	ldr	r3, [pc, #484]	; (80032e0 <toggleAnalog+0x204>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <toggleAnalog+0x2c>
			lcd_send_string("OFF");
 8003100:	4878      	ldr	r0, [pc, #480]	; (80032e4 <toggleAnalog+0x208>)
 8003102:	f7fd fefe 	bl	8000f02 <lcd_send_string>
 8003106:	e004      	b.n	8003112 <toggleAnalog+0x36>
		else{
			lcd_send_string(" ON");
 8003108:	4877      	ldr	r0, [pc, #476]	; (80032e8 <toggleAnalog+0x20c>)
 800310a:	f7fd fefa 	bl	8000f02 <lcd_send_string>
			enabled=1;}
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
		analog_1_enabled=!analog_1_enabled;
 8003112:	4b73      	ldr	r3, [pc, #460]	; (80032e0 <toggleAnalog+0x204>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	4b6f      	ldr	r3, [pc, #444]	; (80032e0 <toggleAnalog+0x204>)
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e034      	b.n	8003192 <toggleAnalog+0xb6>
	}else if(analog_id==2){
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d117      	bne.n	800315e <toggleAnalog+0x82>
		if(analog_2_enabled)
 800312e:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <toggleAnalog+0x210>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <toggleAnalog+0x62>
			lcd_send_string("OFF");
 8003136:	486b      	ldr	r0, [pc, #428]	; (80032e4 <toggleAnalog+0x208>)
 8003138:	f7fd fee3 	bl	8000f02 <lcd_send_string>
 800313c:	e004      	b.n	8003148 <toggleAnalog+0x6c>
		else{
			lcd_send_string(" ON");
 800313e:	486a      	ldr	r0, [pc, #424]	; (80032e8 <toggleAnalog+0x20c>)
 8003140:	f7fd fedf 	bl	8000f02 <lcd_send_string>
			enabled=1;}
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
		analog_2_enabled=!analog_2_enabled;
 8003148:	4b68      	ldr	r3, [pc, #416]	; (80032ec <toggleAnalog+0x210>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	4b64      	ldr	r3, [pc, #400]	; (80032ec <toggleAnalog+0x210>)
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e019      	b.n	8003192 <toggleAnalog+0xb6>
	}else if(analog_id==3){
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d116      	bne.n	8003192 <toggleAnalog+0xb6>
		if(analog_3_enabled)
 8003164:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <toggleAnalog+0x214>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <toggleAnalog+0x98>
			lcd_send_string("OFF");
 800316c:	485d      	ldr	r0, [pc, #372]	; (80032e4 <toggleAnalog+0x208>)
 800316e:	f7fd fec8 	bl	8000f02 <lcd_send_string>
 8003172:	e004      	b.n	800317e <toggleAnalog+0xa2>
		else{
			lcd_send_string(" ON");enabled=1;}
 8003174:	485c      	ldr	r0, [pc, #368]	; (80032e8 <toggleAnalog+0x20c>)
 8003176:	f7fd fec4 	bl	8000f02 <lcd_send_string>
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
		analog_3_enabled=!analog_3_enabled;
 800317e:	4b5c      	ldr	r3, [pc, #368]	; (80032f0 <toggleAnalog+0x214>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	4b58      	ldr	r3, [pc, #352]	; (80032f0 <toggleAnalog+0x214>)
 8003190:	701a      	strb	r2, [r3, #0]
	}

	//store the state in the menu
	if(enabled){
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d03e      	beq.n	8003216 <toggleAnalog+0x13a>
		memset(temp,0,17); // erase the temp array
 8003198:	2211      	movs	r2, #17
 800319a:	2100      	movs	r1, #0
 800319c:	4855      	ldr	r0, [pc, #340]	; (80032f4 <toggleAnalog+0x218>)
 800319e:	f004 f9b3 	bl	8007508 <memset>
		strncpy(temp, "Analog ",16);
 80031a2:	2210      	movs	r2, #16
 80031a4:	4954      	ldr	r1, [pc, #336]	; (80032f8 <toggleAnalog+0x21c>)
 80031a6:	4853      	ldr	r0, [pc, #332]	; (80032f4 <toggleAnalog+0x218>)
 80031a8:	f005 f89d 	bl	80082e6 <strncpy>
		memset(char_arr, 0, 16);
 80031ac:	2210      	movs	r2, #16
 80031ae:	2100      	movs	r1, #0
 80031b0:	4852      	ldr	r0, [pc, #328]	; (80032fc <toggleAnalog+0x220>)
 80031b2:	f004 f9a9 	bl	8007508 <memset>
		sprintf(char_arr, "%01d", analog_id);
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	461a      	mov	r2, r3
 80031ba:	4951      	ldr	r1, [pc, #324]	; (8003300 <toggleAnalog+0x224>)
 80031bc:	484f      	ldr	r0, [pc, #316]	; (80032fc <toggleAnalog+0x220>)
 80031be:	f005 f82b 	bl	8008218 <siprintf>
		strcat(temp, char_arr);
 80031c2:	494e      	ldr	r1, [pc, #312]	; (80032fc <toggleAnalog+0x220>)
 80031c4:	484b      	ldr	r0, [pc, #300]	; (80032f4 <toggleAnalog+0x218>)
 80031c6:	f005 f847 	bl	8008258 <strcat>
		strcat(temp,":     ");
 80031ca:	484a      	ldr	r0, [pc, #296]	; (80032f4 <toggleAnalog+0x218>)
 80031cc:	f7fd f800 	bl	80001d0 <strlen>
 80031d0:	4603      	mov	r3, r0
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <toggleAnalog+0x218>)
 80031d6:	4413      	add	r3, r2
 80031d8:	4a4a      	ldr	r2, [pc, #296]	; (8003304 <toggleAnalog+0x228>)
 80031da:	6810      	ldr	r0, [r2, #0]
 80031dc:	6018      	str	r0, [r3, #0]
 80031de:	8891      	ldrh	r1, [r2, #4]
 80031e0:	7992      	ldrb	r2, [r2, #6]
 80031e2:	8099      	strh	r1, [r3, #4]
 80031e4:	719a      	strb	r2, [r3, #6]
		strlcat(temp, "ON",17);
 80031e6:	2211      	movs	r2, #17
 80031e8:	4947      	ldr	r1, [pc, #284]	; (8003308 <toggleAnalog+0x22c>)
 80031ea:	4842      	ldr	r0, [pc, #264]	; (80032f4 <toggleAnalog+0x218>)
 80031ec:	f005 f843 	bl	8008276 <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	1d1a      	adds	r2, r3, #4
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	4413      	add	r3, r2
 80031fa:	4a44      	ldr	r2, [pc, #272]	; (800330c <toggleAnalog+0x230>)
 80031fc:	4413      	add	r3, r2
 80031fe:	4a3d      	ldr	r2, [pc, #244]	; (80032f4 <toggleAnalog+0x218>)
 8003200:	6815      	ldr	r5, [r2, #0]
 8003202:	6854      	ldr	r4, [r2, #4]
 8003204:	6890      	ldr	r0, [r2, #8]
 8003206:	68d1      	ldr	r1, [r2, #12]
 8003208:	601d      	str	r5, [r3, #0]
 800320a:	605c      	str	r4, [r3, #4]
 800320c:	6098      	str	r0, [r3, #8]
 800320e:	60d9      	str	r1, [r3, #12]
 8003210:	7c12      	ldrb	r2, [r2, #16]
 8003212:	741a      	strb	r2, [r3, #16]
 8003214:	e03b      	b.n	800328e <toggleAnalog+0x1b2>
	}else{
		memset(temp,0,17); // erase the temp array
 8003216:	2211      	movs	r2, #17
 8003218:	2100      	movs	r1, #0
 800321a:	4836      	ldr	r0, [pc, #216]	; (80032f4 <toggleAnalog+0x218>)
 800321c:	f004 f974 	bl	8007508 <memset>
		strncpy(temp, "Analog ",16);
 8003220:	2210      	movs	r2, #16
 8003222:	4935      	ldr	r1, [pc, #212]	; (80032f8 <toggleAnalog+0x21c>)
 8003224:	4833      	ldr	r0, [pc, #204]	; (80032f4 <toggleAnalog+0x218>)
 8003226:	f005 f85e 	bl	80082e6 <strncpy>
		memset(char_arr, 0, 16);
 800322a:	2210      	movs	r2, #16
 800322c:	2100      	movs	r1, #0
 800322e:	4833      	ldr	r0, [pc, #204]	; (80032fc <toggleAnalog+0x220>)
 8003230:	f004 f96a 	bl	8007508 <memset>
		sprintf(char_arr, "%01d", analog_id);
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	461a      	mov	r2, r3
 8003238:	4931      	ldr	r1, [pc, #196]	; (8003300 <toggleAnalog+0x224>)
 800323a:	4830      	ldr	r0, [pc, #192]	; (80032fc <toggleAnalog+0x220>)
 800323c:	f004 ffec 	bl	8008218 <siprintf>
		strcat(temp, char_arr);
 8003240:	492e      	ldr	r1, [pc, #184]	; (80032fc <toggleAnalog+0x220>)
 8003242:	482c      	ldr	r0, [pc, #176]	; (80032f4 <toggleAnalog+0x218>)
 8003244:	f005 f808 	bl	8008258 <strcat>
		strcat(temp,":    ");
 8003248:	482a      	ldr	r0, [pc, #168]	; (80032f4 <toggleAnalog+0x218>)
 800324a:	f7fc ffc1 	bl	80001d0 <strlen>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <toggleAnalog+0x218>)
 8003254:	4413      	add	r3, r2
 8003256:	4a2e      	ldr	r2, [pc, #184]	; (8003310 <toggleAnalog+0x234>)
 8003258:	6810      	ldr	r0, [r2, #0]
 800325a:	6018      	str	r0, [r3, #0]
 800325c:	8892      	ldrh	r2, [r2, #4]
 800325e:	809a      	strh	r2, [r3, #4]
		strlcat(temp, "OFF",17);
 8003260:	2211      	movs	r2, #17
 8003262:	4920      	ldr	r1, [pc, #128]	; (80032e4 <toggleAnalog+0x208>)
 8003264:	4823      	ldr	r0, [pc, #140]	; (80032f4 <toggleAnalog+0x218>)
 8003266:	f005 f806 	bl	8008276 <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);}
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	1d1a      	adds	r2, r3, #4
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	4413      	add	r3, r2
 8003274:	4a25      	ldr	r2, [pc, #148]	; (800330c <toggleAnalog+0x230>)
 8003276:	4413      	add	r3, r2
 8003278:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <toggleAnalog+0x218>)
 800327a:	6815      	ldr	r5, [r2, #0]
 800327c:	6854      	ldr	r4, [r2, #4]
 800327e:	6890      	ldr	r0, [r2, #8]
 8003280:	68d1      	ldr	r1, [r2, #12]
 8003282:	601d      	str	r5, [r3, #0]
 8003284:	605c      	str	r4, [r3, #4]
 8003286:	6098      	str	r0, [r3, #8]
 8003288:	60d9      	str	r1, [r3, #12]
 800328a:	7c12      	ldrb	r2, [r2, #16]
 800328c:	741a      	strb	r2, [r3, #16]

	//invert values so the default is on after erasing memory
	analog_enable_arr[0]=!analog_1_enabled;
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <toggleAnalog+0x204>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf0c      	ite	eq
 8003296:	2301      	moveq	r3, #1
 8003298:	2300      	movne	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <toggleAnalog+0x238>)
 80032a0:	701a      	strb	r2, [r3, #0]
	analog_enable_arr[1]=!analog_2_enabled;
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <toggleAnalog+0x210>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf0c      	ite	eq
 80032aa:	2301      	moveq	r3, #1
 80032ac:	2300      	movne	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <toggleAnalog+0x238>)
 80032b4:	705a      	strb	r2, [r3, #1]
	analog_enable_arr[2]=!analog_3_enabled;
 80032b6:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <toggleAnalog+0x214>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bf0c      	ite	eq
 80032be:	2301      	moveq	r3, #1
 80032c0:	2300      	movne	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b13      	ldr	r3, [pc, #76]	; (8003314 <toggleAnalog+0x238>)
 80032c8:	709a      	strb	r2, [r3, #2]

	storeInFlash();
 80032ca:	f000 fa53 	bl	8003774 <storeInFlash>

	//reset cursor on display
	lcd_put_cur(0,0);
 80032ce:	2100      	movs	r1, #0
 80032d0:	2000      	movs	r0, #0
 80032d2:	f7fd fdb1 	bl	8000e38 <lcd_put_cur>
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bdb0      	pop	{r4, r5, r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000001 	.word	0x20000001
 80032e4:	0800ce40 	.word	0x0800ce40
 80032e8:	0800ce44 	.word	0x0800ce44
 80032ec:	20000002 	.word	0x20000002
 80032f0:	20000003 	.word	0x20000003
 80032f4:	200013a8 	.word	0x200013a8
 80032f8:	0800ce48 	.word	0x0800ce48
 80032fc:	2000348c 	.word	0x2000348c
 8003300:	0800ce50 	.word	0x0800ce50
 8003304:	0800ce58 	.word	0x0800ce58
 8003308:	0800ce60 	.word	0x0800ce60
 800330c:	200000b4 	.word	0x200000b4
 8003310:	0800ce64 	.word	0x0800ce64
 8003314:	200033d8 	.word	0x200033d8

08003318 <displayValues>:

//display the analog values on the display
void displayValues(void){
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
	lcd_put_cur(0,0);
 800331c:	2100      	movs	r1, #0
 800331e:	2000      	movs	r0, #0
 8003320:	f7fd fd8a 	bl	8000e38 <lcd_put_cur>
	if(analog_1_enabled&&analog_2_enabled&&analog_3_enabled){//all 3 devices are enabled
 8003324:	4bac      	ldr	r3, [pc, #688]	; (80035d8 <displayValues+0x2c0>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80a5 	beq.w	8003478 <displayValues+0x160>
 800332e:	4bab      	ldr	r3, [pc, #684]	; (80035dc <displayValues+0x2c4>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 80a0 	beq.w	8003478 <displayValues+0x160>
 8003338:	4ba9      	ldr	r3, [pc, #676]	; (80035e0 <displayValues+0x2c8>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 809b 	beq.w	8003478 <displayValues+0x160>
		if(display_scroll==0){//position 1
 8003342:	4ba8      	ldr	r3, [pc, #672]	; (80035e4 <displayValues+0x2cc>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d130      	bne.n	80033ac <displayValues+0x94>
			lcd_send_string("Analog 1:       ");
 800334a:	48a7      	ldr	r0, [pc, #668]	; (80035e8 <displayValues+0x2d0>)
 800334c:	f7fd fdd9 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(0,11);
 8003350:	210b      	movs	r1, #11
 8003352:	2000      	movs	r0, #0
 8003354:	f7fd fd70 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003358:	2210      	movs	r2, #16
 800335a:	2100      	movs	r1, #0
 800335c:	48a3      	ldr	r0, [pc, #652]	; (80035ec <displayValues+0x2d4>)
 800335e:	f004 f8d3 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 8003362:	4ba3      	ldr	r3, [pc, #652]	; (80035f0 <displayValues+0x2d8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	49a2      	ldr	r1, [pc, #648]	; (80035f4 <displayValues+0x2dc>)
 800336a:	48a0      	ldr	r0, [pc, #640]	; (80035ec <displayValues+0x2d4>)
 800336c:	f004 ff54 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 8003370:	489e      	ldr	r0, [pc, #632]	; (80035ec <displayValues+0x2d4>)
 8003372:	f7fd fdc6 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(1,0);
 8003376:	2100      	movs	r1, #0
 8003378:	2001      	movs	r0, #1
 800337a:	f7fd fd5d 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 800337e:	489e      	ldr	r0, [pc, #632]	; (80035f8 <displayValues+0x2e0>)
 8003380:	f7fd fdbf 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(1,11);
 8003384:	210b      	movs	r1, #11
 8003386:	2001      	movs	r0, #1
 8003388:	f7fd fd56 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 800338c:	2210      	movs	r2, #16
 800338e:	2100      	movs	r1, #0
 8003390:	4896      	ldr	r0, [pc, #600]	; (80035ec <displayValues+0x2d4>)
 8003392:	f004 f8b9 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 8003396:	4b99      	ldr	r3, [pc, #612]	; (80035fc <displayValues+0x2e4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	4995      	ldr	r1, [pc, #596]	; (80035f4 <displayValues+0x2dc>)
 800339e:	4893      	ldr	r0, [pc, #588]	; (80035ec <displayValues+0x2d4>)
 80033a0:	f004 ff3a 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 80033a4:	4891      	ldr	r0, [pc, #580]	; (80035ec <displayValues+0x2d4>)
 80033a6:	f7fd fdac 	bl	8000f02 <lcd_send_string>
		if(display_scroll==0){//position 1
 80033aa:	e112      	b.n	80035d2 <displayValues+0x2ba>
		}else if(display_scroll==1){//position 2
 80033ac:	4b8d      	ldr	r3, [pc, #564]	; (80035e4 <displayValues+0x2cc>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d130      	bne.n	8003416 <displayValues+0xfe>
			lcd_send_string("Analog 2:       ");
 80033b4:	4890      	ldr	r0, [pc, #576]	; (80035f8 <displayValues+0x2e0>)
 80033b6:	f7fd fda4 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(0,11);
 80033ba:	210b      	movs	r1, #11
 80033bc:	2000      	movs	r0, #0
 80033be:	f7fd fd3b 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80033c2:	2210      	movs	r2, #16
 80033c4:	2100      	movs	r1, #0
 80033c6:	4889      	ldr	r0, [pc, #548]	; (80035ec <displayValues+0x2d4>)
 80033c8:	f004 f89e 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 80033cc:	4b8b      	ldr	r3, [pc, #556]	; (80035fc <displayValues+0x2e4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	4988      	ldr	r1, [pc, #544]	; (80035f4 <displayValues+0x2dc>)
 80033d4:	4885      	ldr	r0, [pc, #532]	; (80035ec <displayValues+0x2d4>)
 80033d6:	f004 ff1f 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 80033da:	4884      	ldr	r0, [pc, #528]	; (80035ec <displayValues+0x2d4>)
 80033dc:	f7fd fd91 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(1,0);
 80033e0:	2100      	movs	r1, #0
 80033e2:	2001      	movs	r0, #1
 80033e4:	f7fd fd28 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 80033e8:	4885      	ldr	r0, [pc, #532]	; (8003600 <displayValues+0x2e8>)
 80033ea:	f7fd fd8a 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(1,11);
 80033ee:	210b      	movs	r1, #11
 80033f0:	2001      	movs	r0, #1
 80033f2:	f7fd fd21 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80033f6:	2210      	movs	r2, #16
 80033f8:	2100      	movs	r1, #0
 80033fa:	487c      	ldr	r0, [pc, #496]	; (80035ec <displayValues+0x2d4>)
 80033fc:	f004 f884 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 8003400:	4b80      	ldr	r3, [pc, #512]	; (8003604 <displayValues+0x2ec>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	497b      	ldr	r1, [pc, #492]	; (80035f4 <displayValues+0x2dc>)
 8003408:	4878      	ldr	r0, [pc, #480]	; (80035ec <displayValues+0x2d4>)
 800340a:	f004 ff05 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 800340e:	4877      	ldr	r0, [pc, #476]	; (80035ec <displayValues+0x2d4>)
 8003410:	f7fd fd77 	bl	8000f02 <lcd_send_string>
		if(display_scroll==0){//position 1
 8003414:	e0dd      	b.n	80035d2 <displayValues+0x2ba>
		}else {//position 3
			lcd_send_string("Analog 3:       ");
 8003416:	487a      	ldr	r0, [pc, #488]	; (8003600 <displayValues+0x2e8>)
 8003418:	f7fd fd73 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(0,11);
 800341c:	210b      	movs	r1, #11
 800341e:	2000      	movs	r0, #0
 8003420:	f7fd fd0a 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003424:	2210      	movs	r2, #16
 8003426:	2100      	movs	r1, #0
 8003428:	4870      	ldr	r0, [pc, #448]	; (80035ec <displayValues+0x2d4>)
 800342a:	f004 f86d 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 800342e:	4b75      	ldr	r3, [pc, #468]	; (8003604 <displayValues+0x2ec>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	496f      	ldr	r1, [pc, #444]	; (80035f4 <displayValues+0x2dc>)
 8003436:	486d      	ldr	r0, [pc, #436]	; (80035ec <displayValues+0x2d4>)
 8003438:	f004 feee 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 800343c:	486b      	ldr	r0, [pc, #428]	; (80035ec <displayValues+0x2d4>)
 800343e:	f7fd fd60 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(1,0);
 8003442:	2100      	movs	r1, #0
 8003444:	2001      	movs	r0, #1
 8003446:	f7fd fcf7 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Analog 1:       ");
 800344a:	4867      	ldr	r0, [pc, #412]	; (80035e8 <displayValues+0x2d0>)
 800344c:	f7fd fd59 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(1,11);
 8003450:	210b      	movs	r1, #11
 8003452:	2001      	movs	r0, #1
 8003454:	f7fd fcf0 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003458:	2210      	movs	r2, #16
 800345a:	2100      	movs	r1, #0
 800345c:	4863      	ldr	r0, [pc, #396]	; (80035ec <displayValues+0x2d4>)
 800345e:	f004 f853 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 8003462:	4b63      	ldr	r3, [pc, #396]	; (80035f0 <displayValues+0x2d8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	4962      	ldr	r1, [pc, #392]	; (80035f4 <displayValues+0x2dc>)
 800346a:	4860      	ldr	r0, [pc, #384]	; (80035ec <displayValues+0x2d4>)
 800346c:	f004 fed4 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 8003470:	485e      	ldr	r0, [pc, #376]	; (80035ec <displayValues+0x2d4>)
 8003472:	f7fd fd46 	bl	8000f02 <lcd_send_string>
		if(display_scroll==0){//position 1
 8003476:	e0ac      	b.n	80035d2 <displayValues+0x2ba>
		}

	}else{//less than 3 are enabled
		if(analog_1_enabled){//display device 1 on first line
 8003478:	4b57      	ldr	r3, [pc, #348]	; (80035d8 <displayValues+0x2c0>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d016      	beq.n	80034ae <displayValues+0x196>
			lcd_send_string("Analog 1:       ");
 8003480:	4859      	ldr	r0, [pc, #356]	; (80035e8 <displayValues+0x2d0>)
 8003482:	f7fd fd3e 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(0,11);
 8003486:	210b      	movs	r1, #11
 8003488:	2000      	movs	r0, #0
 800348a:	f7fd fcd5 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 800348e:	2210      	movs	r2, #16
 8003490:	2100      	movs	r1, #0
 8003492:	4856      	ldr	r0, [pc, #344]	; (80035ec <displayValues+0x2d4>)
 8003494:	f004 f838 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 8003498:	4b55      	ldr	r3, [pc, #340]	; (80035f0 <displayValues+0x2d8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	4955      	ldr	r1, [pc, #340]	; (80035f4 <displayValues+0x2dc>)
 80034a0:	4852      	ldr	r0, [pc, #328]	; (80035ec <displayValues+0x2d4>)
 80034a2:	f004 feb9 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 80034a6:	4851      	ldr	r0, [pc, #324]	; (80035ec <displayValues+0x2d4>)
 80034a8:	f7fd fd2b 	bl	8000f02 <lcd_send_string>
 80034ac:	e043      	b.n	8003536 <displayValues+0x21e>
		} else if(analog_2_enabled){//display device 2 on first line
 80034ae:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <displayValues+0x2c4>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <displayValues+0x1cc>
			lcd_send_string("Analog 2:       ");
 80034b6:	4850      	ldr	r0, [pc, #320]	; (80035f8 <displayValues+0x2e0>)
 80034b8:	f7fd fd23 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(0,11);
 80034bc:	210b      	movs	r1, #11
 80034be:	2000      	movs	r0, #0
 80034c0:	f7fd fcba 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80034c4:	2210      	movs	r2, #16
 80034c6:	2100      	movs	r1, #0
 80034c8:	4848      	ldr	r0, [pc, #288]	; (80035ec <displayValues+0x2d4>)
 80034ca:	f004 f81d 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 80034ce:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <displayValues+0x2e4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	4947      	ldr	r1, [pc, #284]	; (80035f4 <displayValues+0x2dc>)
 80034d6:	4845      	ldr	r0, [pc, #276]	; (80035ec <displayValues+0x2d4>)
 80034d8:	f004 fe9e 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 80034dc:	4843      	ldr	r0, [pc, #268]	; (80035ec <displayValues+0x2d4>)
 80034de:	f7fd fd10 	bl	8000f02 <lcd_send_string>
 80034e2:	e028      	b.n	8003536 <displayValues+0x21e>
		} else if(analog_3_enabled){//display device 3 on first line
 80034e4:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <displayValues+0x2c8>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d016      	beq.n	800351a <displayValues+0x202>
			lcd_send_string("Analog 3:       ");
 80034ec:	4844      	ldr	r0, [pc, #272]	; (8003600 <displayValues+0x2e8>)
 80034ee:	f7fd fd08 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(0,11);
 80034f2:	210b      	movs	r1, #11
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7fd fc9f 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80034fa:	2210      	movs	r2, #16
 80034fc:	2100      	movs	r1, #0
 80034fe:	483b      	ldr	r0, [pc, #236]	; (80035ec <displayValues+0x2d4>)
 8003500:	f004 f802 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 8003504:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <displayValues+0x2ec>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	493a      	ldr	r1, [pc, #232]	; (80035f4 <displayValues+0x2dc>)
 800350c:	4837      	ldr	r0, [pc, #220]	; (80035ec <displayValues+0x2d4>)
 800350e:	f004 fe83 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 8003512:	4836      	ldr	r0, [pc, #216]	; (80035ec <displayValues+0x2d4>)
 8003514:	f7fd fcf5 	bl	8000f02 <lcd_send_string>
 8003518:	e00d      	b.n	8003536 <displayValues+0x21e>
		} else{//display no devices enabled
			lcd_send_string("No Devices      ");
 800351a:	483b      	ldr	r0, [pc, #236]	; (8003608 <displayValues+0x2f0>)
 800351c:	f7fd fcf1 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(1,0);
 8003520:	2100      	movs	r1, #0
 8003522:	2001      	movs	r0, #1
 8003524:	f7fd fc88 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Enabled         ");
 8003528:	4838      	ldr	r0, [pc, #224]	; (800360c <displayValues+0x2f4>)
 800352a:	f7fd fcea 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(1,15);
 800352e:	210f      	movs	r1, #15
 8003530:	2001      	movs	r0, #1
 8003532:	f7fd fc81 	bl	8000e38 <lcd_put_cur>
		}

		if(analog_1_enabled&&analog_2_enabled){//display device 2 on second line
 8003536:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <displayValues+0x2c0>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01e      	beq.n	800357c <displayValues+0x264>
 800353e:	4b27      	ldr	r3, [pc, #156]	; (80035dc <displayValues+0x2c4>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d01a      	beq.n	800357c <displayValues+0x264>
			lcd_put_cur(1,0);
 8003546:	2100      	movs	r1, #0
 8003548:	2001      	movs	r0, #1
 800354a:	f7fd fc75 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 800354e:	482a      	ldr	r0, [pc, #168]	; (80035f8 <displayValues+0x2e0>)
 8003550:	f7fd fcd7 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(1,11);
 8003554:	210b      	movs	r1, #11
 8003556:	2001      	movs	r0, #1
 8003558:	f7fd fc6e 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 800355c:	2210      	movs	r2, #16
 800355e:	2100      	movs	r1, #0
 8003560:	4822      	ldr	r0, [pc, #136]	; (80035ec <displayValues+0x2d4>)
 8003562:	f003 ffd1 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 8003566:	4b25      	ldr	r3, [pc, #148]	; (80035fc <displayValues+0x2e4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	4921      	ldr	r1, [pc, #132]	; (80035f4 <displayValues+0x2dc>)
 800356e:	481f      	ldr	r0, [pc, #124]	; (80035ec <displayValues+0x2d4>)
 8003570:	f004 fe52 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 8003574:	481d      	ldr	r0, [pc, #116]	; (80035ec <displayValues+0x2d4>)
 8003576:	f7fd fcc4 	bl	8000f02 <lcd_send_string>
 800357a:	e02a      	b.n	80035d2 <displayValues+0x2ba>
		} else if((analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled)){//display device 3 on second line
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <displayValues+0x2c0>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <displayValues+0x274>
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <displayValues+0x2c8>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <displayValues+0x284>
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <displayValues+0x2c4>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01e      	beq.n	80035d2 <displayValues+0x2ba>
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <displayValues+0x2c8>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01a      	beq.n	80035d2 <displayValues+0x2ba>
			lcd_put_cur(1,0);
 800359c:	2100      	movs	r1, #0
 800359e:	2001      	movs	r0, #1
 80035a0:	f7fd fc4a 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 80035a4:	4816      	ldr	r0, [pc, #88]	; (8003600 <displayValues+0x2e8>)
 80035a6:	f7fd fcac 	bl	8000f02 <lcd_send_string>
			lcd_put_cur(1,11);
 80035aa:	210b      	movs	r1, #11
 80035ac:	2001      	movs	r0, #1
 80035ae:	f7fd fc43 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80035b2:	2210      	movs	r2, #16
 80035b4:	2100      	movs	r1, #0
 80035b6:	480d      	ldr	r0, [pc, #52]	; (80035ec <displayValues+0x2d4>)
 80035b8:	f003 ffa6 	bl	8007508 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <displayValues+0x2ec>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	490c      	ldr	r1, [pc, #48]	; (80035f4 <displayValues+0x2dc>)
 80035c4:	4809      	ldr	r0, [pc, #36]	; (80035ec <displayValues+0x2d4>)
 80035c6:	f004 fe27 	bl	8008218 <siprintf>
			lcd_send_string(char_arr);
 80035ca:	4808      	ldr	r0, [pc, #32]	; (80035ec <displayValues+0x2d4>)
 80035cc:	f7fd fc99 	bl	8000f02 <lcd_send_string>
		}
	}
}
 80035d0:	e7ff      	b.n	80035d2 <displayValues+0x2ba>
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000001 	.word	0x20000001
 80035dc:	20000002 	.word	0x20000002
 80035e0:	20000003 	.word	0x20000003
 80035e4:	20000382 	.word	0x20000382
 80035e8:	0800ce6c 	.word	0x0800ce6c
 80035ec:	2000348c 	.word	0x2000348c
 80035f0:	200033d4 	.word	0x200033d4
 80035f4:	0800cdcc 	.word	0x0800cdcc
 80035f8:	0800ce80 	.word	0x0800ce80
 80035fc:	2000039c 	.word	0x2000039c
 8003600:	0800ce94 	.word	0x0800ce94
 8003604:	200013a4 	.word	0x200013a4
 8003608:	0800cea8 	.word	0x0800cea8
 800360c:	0800cebc 	.word	0x0800cebc

08003610 <bytesToWord>:


//convert a 4 byte array to a word (unsigned long int)
uint32_t bytesToWord(uint8_t* arr) {
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	uint32_t value = arr[0] & 0xFF;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
	value |= (arr[1] << 8) & 0xFFFF;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3301      	adds	r3, #1
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	b29b      	uxth	r3, r3
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
	value |= (arr[2] << 16) & 0xFFFFFF;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3302      	adds	r3, #2
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	041b      	lsls	r3, r3, #16
 8003636:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
	value |= (arr[3] << 24) & 0xFFFFFFFF;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3303      	adds	r3, #3
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	061b      	lsls	r3, r3, #24
 8003648:	461a      	mov	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
	return value;
 8003650:	68fb      	ldr	r3, [r7, #12]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <wordToBytes>:

//convert a word (unsigned long int) to a 4 byte array
uint8_t* wordToBytes(uint32_t value){
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	byte_arr[3] = (value >> 24) & 0xFF;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	0e1b      	lsrs	r3, r3, #24
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <wordToBytes+0x3c>)
 8003670:	70da      	strb	r2, [r3, #3]
	byte_arr[2] = (value >> 16) & 0xFF;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	b2da      	uxtb	r2, r3
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <wordToBytes+0x3c>)
 800367a:	709a      	strb	r2, [r3, #2]
	byte_arr[1] = (value >> 8) & 0xFF;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <wordToBytes+0x3c>)
 8003684:	705a      	strb	r2, [r3, #1]
	byte_arr[0] = value & 0xFF;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4b04      	ldr	r3, [pc, #16]	; (800369c <wordToBytes+0x3c>)
 800368c:	701a      	strb	r2, [r3, #0]
	return byte_arr;
 800368e:	4b03      	ldr	r3, [pc, #12]	; (800369c <wordToBytes+0x3c>)
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	200034e0 	.word	0x200034e0

080036a0 <calibrateSDADC>:

//calibrate the given sdadc for the given channel
void calibrateSDADC(SDADC_HandleTypeDef* adc, uint32_t channel){
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
	//Display Calibrating
	lcd_put_cur(0,0);
 80036aa:	2100      	movs	r1, #0
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fd fbc3 	bl	8000e38 <lcd_put_cur>
	lcd_send_string("Calibrating ADC ");
 80036b2:	482b      	ldr	r0, [pc, #172]	; (8003760 <calibrateSDADC+0xc0>)
 80036b4:	f7fd fc25 	bl	8000f02 <lcd_send_string>
	lcd_put_cur(1,0);
 80036b8:	2100      	movs	r1, #0
 80036ba:	2001      	movs	r0, #1
 80036bc:	f7fd fbbc 	bl	8000e38 <lcd_put_cur>
	lcd_send_string("                ");
 80036c0:	4828      	ldr	r0, [pc, #160]	; (8003764 <calibrateSDADC+0xc4>)
 80036c2:	f7fd fc1e 	bl	8000f02 <lcd_send_string>

	//Run Calibration Sequence
	HAL_SDADC_AssociateChannelConfig(adc, channel, SDADC_CONF_INDEX_0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	6839      	ldr	r1, [r7, #0]
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f002 ff88 	bl	80065e0 <HAL_SDADC_AssociateChannelConfig>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_OFF);
 80036d0:	2200      	movs	r2, #0
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f002 ffd3 	bl	8006680 <HAL_SDADC_ConfigChannel>
	HAL_SDADC_CalibrationStart(adc, SDADC_CALIBRATION_SEQ_1);
 80036da:	2100      	movs	r1, #0
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f003 f813 	bl	8006708 <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(adc, HAL_MAX_DELAY);
 80036e2:	f04f 31ff 	mov.w	r1, #4294967295
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f003 f84e 	bl	8006788 <HAL_SDADC_PollForCalibEvent>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_ON);
 80036ec:	2201      	movs	r2, #1
 80036ee:	6839      	ldr	r1, [r7, #0]
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f002 ffc5 	bl	8006680 <HAL_SDADC_ConfigChannel>

	//Display Menu
	lcd_put_cur(0,0);
 80036f6:	2100      	movs	r1, #0
 80036f8:	2000      	movs	r0, #0
 80036fa:	f7fd fb9d 	bl	8000e38 <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <calibrateSDADC+0xc8>)
 8003700:	f993 3000 	ldrsb.w	r3, [r3]
 8003704:	461a      	mov	r2, r3
 8003706:	4613      	mov	r3, r2
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	4413      	add	r3, r2
 800370c:	4a17      	ldr	r2, [pc, #92]	; (800376c <calibrateSDADC+0xcc>)
 800370e:	4413      	add	r3, r2
 8003710:	2210      	movs	r2, #16
 8003712:	4619      	mov	r1, r3
 8003714:	4816      	ldr	r0, [pc, #88]	; (8003770 <calibrateSDADC+0xd0>)
 8003716:	f004 fde6 	bl	80082e6 <strncpy>
 800371a:	4603      	mov	r3, r0
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd fbf0 	bl	8000f02 <lcd_send_string>
	lcd_put_cur(1,0);
 8003722:	2100      	movs	r1, #0
 8003724:	2001      	movs	r0, #1
 8003726:	f7fd fb87 	bl	8000e38 <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <calibrateSDADC+0xc8>)
 800372c:	f993 3000 	ldrsb.w	r3, [r3]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	4413      	add	r3, r2
 8003738:	4a0c      	ldr	r2, [pc, #48]	; (800376c <calibrateSDADC+0xcc>)
 800373a:	4413      	add	r3, r2
 800373c:	2210      	movs	r2, #16
 800373e:	4619      	mov	r1, r3
 8003740:	480b      	ldr	r0, [pc, #44]	; (8003770 <calibrateSDADC+0xd0>)
 8003742:	f004 fdd0 	bl	80082e6 <strncpy>
 8003746:	4603      	mov	r3, r0
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd fbda 	bl	8000f02 <lcd_send_string>
	lcd_put_cur(0,0);
 800374e:	2100      	movs	r1, #0
 8003750:	2000      	movs	r0, #0
 8003752:	f7fd fb71 	bl	8000e38 <lcd_put_cur>
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	0800ced0 	.word	0x0800ced0
 8003764:	0800cee4 	.word	0x0800cee4
 8003768:	20000383 	.word	0x20000383
 800376c:	20000008 	.word	0x20000008
 8003770:	200013a8 	.word	0x200013a8

08003774 <storeInFlash>:

//store all saved values in flash memory
void storeInFlash(void){
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
	//Unlock the Flash Program Erase controller
	HAL_FLASH_Unlock();
 800377a:	f001 f8db 	bl	8004934 <HAL_FLASH_Unlock>

	//Erase page
	FLASH_EraseInitTypeDef eraseParams;
	eraseParams.TypeErase = FLASH_TYPEERASE_PAGES;
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
	eraseParams.PageAddress = 0x0800F800;
 8003782:	4b3e      	ldr	r3, [pc, #248]	; (800387c <storeInFlash+0x108>)
 8003784:	60bb      	str	r3, [r7, #8]
	eraseParams.NbPages=1;
 8003786:	2301      	movs	r3, #1
 8003788:	60fb      	str	r3, [r7, #12]
	uint32_t eraseError=0;
 800378a:	2300      	movs	r3, #0
 800378c:	603b      	str	r3, [r7, #0]
	HAL_FLASHEx_Erase(&eraseParams, &eraseError);
 800378e:	463a      	mov	r2, r7
 8003790:	1d3b      	adds	r3, r7, #4
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f001 f991 	bl	8004abc <HAL_FLASHEx_Erase>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800379a:	f04f 30ff 	mov.w	r0, #4294967295
 800379e:	f001 f91b 	bl	80049d8 <FLASH_WaitForLastOperation>


	//Store the CAN IDs
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F800, bytesToWord(id_arr));//store can ids
 80037a2:	4837      	ldr	r0, [pc, #220]	; (8003880 <storeInFlash+0x10c>)
 80037a4:	f7ff ff34 	bl	8003610 <bytesToWord>
 80037a8:	4603      	mov	r3, r0
 80037aa:	461a      	mov	r2, r3
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	4932      	ldr	r1, [pc, #200]	; (800387c <storeInFlash+0x108>)
 80037b2:	2002      	movs	r0, #2
 80037b4:	f001 f84e 	bl	8004854 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	f001 f90c 	bl	80049d8 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F804, (uint32_t)baud_pos); //store baud rate
 80037c0:	4b30      	ldr	r3, [pc, #192]	; (8003884 <storeInFlash+0x110>)
 80037c2:	f993 3000 	ldrsb.w	r3, [r3]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	492e      	ldr	r1, [pc, #184]	; (8003888 <storeInFlash+0x114>)
 80037ce:	2002      	movs	r0, #2
 80037d0:	f001 f840 	bl	8004854 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	f001 f8fe 	bl	80049d8 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F808, (uint32_t)num_delays); // store number of delays
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <storeInFlash+0x118>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	492a      	ldr	r1, [pc, #168]	; (8003890 <storeInFlash+0x11c>)
 80037e8:	2002      	movs	r0, #2
 80037ea:	f001 f833 	bl	8004854 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80037ee:	f04f 30ff 	mov.w	r0, #4294967295
 80037f2:	f001 f8f1 	bl	80049d8 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F80C, bytesToWord(analog_enable_arr)); // store device enable bools
 80037f6:	4827      	ldr	r0, [pc, #156]	; (8003894 <storeInFlash+0x120>)
 80037f8:	f7ff ff0a 	bl	8003610 <bytesToWord>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	4924      	ldr	r1, [pc, #144]	; (8003898 <storeInFlash+0x124>)
 8003806:	2002      	movs	r0, #2
 8003808:	f001 f824 	bl	8004854 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800380c:	f04f 30ff 	mov.w	r0, #4294967295
 8003810:	f001 f8e2 	bl	80049d8 <FLASH_WaitForLastOperation>
	if(store_offsets){
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <storeInFlash+0x128>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d029      	beq.n	8003870 <storeInFlash+0xfc>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F810, analog_1_offset); // store analog 1 offset
 800381c:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <storeInFlash+0x12c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	491f      	ldr	r1, [pc, #124]	; (80038a4 <storeInFlash+0x130>)
 8003828:	2002      	movs	r0, #2
 800382a:	f001 f813 	bl	8004854 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800382e:	f04f 30ff 	mov.w	r0, #4294967295
 8003832:	f001 f8d1 	bl	80049d8 <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F814, analog_2_offset); // store analog 2 offset
 8003836:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <storeInFlash+0x134>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	491a      	ldr	r1, [pc, #104]	; (80038ac <storeInFlash+0x138>)
 8003842:	2002      	movs	r0, #2
 8003844:	f001 f806 	bl	8004854 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	f001 f8c4 	bl	80049d8 <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F818, analog_3_offset); // store analog 3 offset
 8003850:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <storeInFlash+0x13c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	4916      	ldr	r1, [pc, #88]	; (80038b4 <storeInFlash+0x140>)
 800385c:	2002      	movs	r0, #2
 800385e:	f000 fff9 	bl	8004854 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003862:	f04f 30ff 	mov.w	r0, #4294967295
 8003866:	f001 f8b7 	bl	80049d8 <FLASH_WaitForLastOperation>
		store_offsets=0;
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <storeInFlash+0x128>)
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
	}


	//Lock the Flash Program Erase controller
	HAL_FLASH_Lock();
 8003870:	f001 f886 	bl	8004980 <HAL_FLASH_Lock>
}
 8003874:	bf00      	nop
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	0800f800 	.word	0x0800f800
 8003880:	200003a4 	.word	0x200003a4
 8003884:	2000015f 	.word	0x2000015f
 8003888:	0800f804 	.word	0x0800f804
 800388c:	20000386 	.word	0x20000386
 8003890:	0800f808 	.word	0x0800f808
 8003894:	200033d8 	.word	0x200033d8
 8003898:	0800f80c 	.word	0x0800f80c
 800389c:	20000370 	.word	0x20000370
 80038a0:	20000364 	.word	0x20000364
 80038a4:	0800f810 	.word	0x0800f810
 80038a8:	20000368 	.word	0x20000368
 80038ac:	0800f814 	.word	0x0800f814
 80038b0:	2000036c 	.word	0x2000036c
 80038b4:	0800f818 	.word	0x0800f818

080038b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038bc:	b672      	cpsid	i
}
 80038be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80038c0:	e7fe      	b.n	80038c0 <Error_Handler+0x8>
	...

080038c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <HAL_MspInit+0x44>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <HAL_MspInit+0x44>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6193      	str	r3, [r2, #24]
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <HAL_MspInit+0x44>)
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_MspInit+0x44>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	4a08      	ldr	r2, [pc, #32]	; (8003908 <HAL_MspInit+0x44>)
 80038e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ec:	61d3      	str	r3, [r2, #28]
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HAL_MspInit+0x44>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000

0800390c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 0314 	add.w	r3, r7, #20
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a26      	ldr	r2, [pc, #152]	; (80039c4 <HAL_CAN_MspInit+0xb8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d146      	bne.n	80039bc <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <HAL_CAN_MspInit+0xbc>)
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4a25      	ldr	r2, [pc, #148]	; (80039c8 <HAL_CAN_MspInit+0xbc>)
 8003934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003938:	61d3      	str	r3, [r2, #28]
 800393a:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <HAL_CAN_MspInit+0xbc>)
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <HAL_CAN_MspInit+0xbc>)
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_CAN_MspInit+0xbc>)
 800394c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003950:	6153      	str	r3, [r2, #20]
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_CAN_MspInit+0xbc>)
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800395e:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <HAL_CAN_MspInit+0xbc>)
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	4a19      	ldr	r2, [pc, #100]	; (80039c8 <HAL_CAN_MspInit+0xbc>)
 8003964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003968:	6153      	str	r3, [r2, #20]
 800396a:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <HAL_CAN_MspInit+0xbc>)
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800397a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003984:	2303      	movs	r3, #3
 8003986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003988:	2309      	movs	r3, #9
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	4619      	mov	r1, r3
 8003992:	480e      	ldr	r0, [pc, #56]	; (80039cc <HAL_CAN_MspInit+0xc0>)
 8003994:	f001 f936 	bl	8004c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800399c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	2302      	movs	r3, #2
 80039a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039a6:	2303      	movs	r3, #3
 80039a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80039aa:	2309      	movs	r3, #9
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ae:	f107 0314 	add.w	r3, r7, #20
 80039b2:	4619      	mov	r1, r3
 80039b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b8:	f001 f924 	bl	8004c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80039bc:	bf00      	nop
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40006400 	.word	0x40006400
 80039c8:	40021000 	.word	0x40021000
 80039cc:	48000400 	.word	0x48000400

080039d0 <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b08e      	sub	sp, #56	; 0x38
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a4c      	ldr	r2, [pc, #304]	; (8003b20 <HAL_SDADC_MspInit+0x150>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d12d      	bne.n	8003a4e <HAL_SDADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 80039f2:	4b4c      	ldr	r3, [pc, #304]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	4a4b      	ldr	r2, [pc, #300]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 80039f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039fc:	6193      	str	r3, [r2, #24]
 80039fe:	4b49      	ldr	r3, [pc, #292]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a06:	623b      	str	r3, [r7, #32]
 8003a08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a0a:	4b46      	ldr	r3, [pc, #280]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	4a45      	ldr	r2, [pc, #276]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a14:	6153      	str	r3, [r2, #20]
 8003a16:	4b43      	ldr	r3, [pc, #268]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	69fb      	ldr	r3, [r7, #28]
    /**SDADC1 GPIO Configuration
    PE11     ------> SDADC1_AIN1P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003a22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a34:	4619      	mov	r1, r3
 8003a36:	483c      	ldr	r0, [pc, #240]	; (8003b28 <HAL_SDADC_MspInit+0x158>)
 8003a38:	f001 f8e4 	bl	8004c04 <HAL_GPIO_Init>

    /* SDADC1 interrupt Init */
    HAL_NVIC_SetPriority(SDADC1_IRQn, 2, 0);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2102      	movs	r1, #2
 8003a40:	203d      	movs	r0, #61	; 0x3d
 8003a42:	f000 fed0 	bl	80047e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 8003a46:	203d      	movs	r0, #61	; 0x3d
 8003a48:	f000 fee9 	bl	800481e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 8003a4c:	e064      	b.n	8003b18 <HAL_SDADC_MspInit+0x148>
  else if(hsdadc->Instance==SDADC2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a36      	ldr	r2, [pc, #216]	; (8003b2c <HAL_SDADC_MspInit+0x15c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d12d      	bne.n	8003ab4 <HAL_SDADC_MspInit+0xe4>
    __HAL_RCC_SDADC2_CLK_ENABLE();
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	4a31      	ldr	r2, [pc, #196]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003a5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a62:	6193      	str	r3, [r2, #24]
 8003a64:	4b2f      	ldr	r3, [pc, #188]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a70:	4b2c      	ldr	r3, [pc, #176]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003a76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a7a:	6153      	str	r3, [r2, #20]
 8003a7c:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4822      	ldr	r0, [pc, #136]	; (8003b28 <HAL_SDADC_MspInit+0x158>)
 8003a9e:	f001 f8b1 	bl	8004c04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC2_IRQn, 2, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	203e      	movs	r0, #62	; 0x3e
 8003aa8:	f000 fe9d 	bl	80047e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC2_IRQn);
 8003aac:	203e      	movs	r0, #62	; 0x3e
 8003aae:	f000 feb6 	bl	800481e <HAL_NVIC_EnableIRQ>
}
 8003ab2:	e031      	b.n	8003b18 <HAL_SDADC_MspInit+0x148>
  else if(hsdadc->Instance==SDADC3)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <HAL_SDADC_MspInit+0x160>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d12c      	bne.n	8003b18 <HAL_SDADC_MspInit+0x148>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 8003abe:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003ac4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ac8:	6193      	str	r3, [r2, #24]
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ad6:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003adc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae0:	6153      	str	r3, [r2, #20]
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_SDADC_MspInit+0x154>)
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003af4:	2303      	movs	r3, #3
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b00:	4619      	mov	r1, r3
 8003b02:	480c      	ldr	r0, [pc, #48]	; (8003b34 <HAL_SDADC_MspInit+0x164>)
 8003b04:	f001 f87e 	bl	8004c04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC3_IRQn, 2, 0);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	203f      	movs	r0, #63	; 0x3f
 8003b0e:	f000 fe6a 	bl	80047e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC3_IRQn);
 8003b12:	203f      	movs	r0, #63	; 0x3f
 8003b14:	f000 fe83 	bl	800481e <HAL_NVIC_EnableIRQ>
}
 8003b18:	bf00      	nop
 8003b1a:	3738      	adds	r7, #56	; 0x38
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40016000 	.word	0x40016000
 8003b24:	40021000 	.word	0x40021000
 8003b28:	48001000 	.word	0x48001000
 8003b2c:	40016400 	.word	0x40016400
 8003b30:	40016800 	.word	0x40016800
 8003b34:	48000c00 	.word	0x48000c00

08003b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d10c      	bne.n	8003b64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <HAL_TIM_Base_MspInit+0x68>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_TIM_Base_MspInit+0x68>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	61d3      	str	r3, [r2, #28]
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_TIM_Base_MspInit+0x68>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b62:	e018      	b.n	8003b96 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_TIM_Base_MspInit+0x6c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d113      	bne.n	8003b96 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_TIM_Base_MspInit+0x68>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <HAL_TIM_Base_MspInit+0x68>)
 8003b74:	f043 0302 	orr.w	r3, r3, #2
 8003b78:	61d3      	str	r3, [r2, #28]
 8003b7a:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_TIM_Base_MspInit+0x68>)
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b86:	2200      	movs	r2, #0
 8003b88:	2100      	movs	r1, #0
 8003b8a:	201d      	movs	r0, #29
 8003b8c:	f000 fe2b 	bl	80047e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b90:	201d      	movs	r0, #29
 8003b92:	f000 fe44 	bl	800481e <HAL_NVIC_EnableIRQ>
}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40000400 	.word	0x40000400

08003ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bac:	e7fe      	b.n	8003bac <NMI_Handler+0x4>

08003bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bb2:	e7fe      	b.n	8003bb2 <HardFault_Handler+0x4>

08003bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bb8:	e7fe      	b.n	8003bb8 <MemManage_Handler+0x4>

08003bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bbe:	e7fe      	b.n	8003bbe <BusFault_Handler+0x4>

08003bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bc4:	e7fe      	b.n	8003bc4 <UsageFault_Handler+0x4>

08003bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bf4:	f000 f986 	bl	8003f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003c00:	2040      	movs	r0, #64	; 0x40
 8003c02:	f001 f991 	bl	8004f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003c06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c0a:	f001 f98d 	bl	8004f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c18:	4802      	ldr	r0, [pc, #8]	; (8003c24 <TIM3_IRQHandler+0x10>)
 8003c1a:	f003 f89b 	bl	8006d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200013c0 	.word	0x200013c0

08003c28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003c2c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c30:	f001 f97a 	bl	8004f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c34:	bf00      	nop
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <SDADC1_IRQHandler>:

/**
  * @brief This function handles SDADC1 global interrupt.
  */
void SDADC1_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC1_IRQn 0 */

  /* USER CODE END SDADC1_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc1);
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <SDADC1_IRQHandler+0x10>)
 8003c3e:	f002 fe0c 	bl	800685a <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC1_IRQn 1 */

  /* USER CODE END SDADC1_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200023e0 	.word	0x200023e0

08003c4c <SDADC2_IRQHandler>:

/**
  * @brief This function handles SDADC2 global interrupt.
  */
void SDADC2_IRQHandler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC2_IRQn 0 */

  /* USER CODE END SDADC2_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc2);
 8003c50:	4802      	ldr	r0, [pc, #8]	; (8003c5c <SDADC2_IRQHandler+0x10>)
 8003c52:	f002 fe02 	bl	800685a <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC2_IRQn 1 */

  /* USER CODE END SDADC2_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	200033dc 	.word	0x200033dc

08003c60 <SDADC3_IRQHandler>:

/**
  * @brief This function handles SDADC3 global interrupt.
  */
void SDADC3_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC3_IRQn 0 */

  /* USER CODE END SDADC3_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc3);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <SDADC3_IRQHandler+0x10>)
 8003c66:	f002 fdf8 	bl	800685a <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC3_IRQn 1 */

  /* USER CODE END SDADC3_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000349c 	.word	0x2000349c

08003c74 <_getpid>:
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	2301      	movs	r3, #1
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <_kill>:
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
 8003c8e:	f003 fc11 	bl	80074b4 <__errno>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2216      	movs	r2, #22
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <_exit>:
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ffe7 	bl	8003c84 <_kill>
 8003cb6:	e7fe      	b.n	8003cb6 <_exit+0x12>

08003cb8 <_read>:
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e00a      	b.n	8003ce0 <_read+0x28>
 8003cca:	f3af 8000 	nop.w
 8003cce:	4601      	mov	r1, r0
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	60ba      	str	r2, [r7, #8]
 8003cd6:	b2ca      	uxtb	r2, r1
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	dbf0      	blt.n	8003cca <_read+0x12>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <_write>:
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	e009      	b.n	8003d18 <_write+0x26>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	60ba      	str	r2, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f3af 8000 	nop.w
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	3301      	adds	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	dbf1      	blt.n	8003d04 <_write+0x12>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <_close>:
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <_fstat>:
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d52:	605a      	str	r2, [r3, #4]
 8003d54:	2300      	movs	r3, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <_isatty>:
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <_lseek>:
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	2300      	movs	r3, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <_sbrk>:
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <_sbrk+0x5c>)
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <_sbrk+0x60>)
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <_sbrk+0x64>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <_sbrk+0x22>
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <_sbrk+0x64>)
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <_sbrk+0x68>)
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <_sbrk+0x64>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d207      	bcs.n	8003dd4 <_sbrk+0x40>
 8003dc4:	f003 fb76 	bl	80074b4 <__errno>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	220c      	movs	r2, #12
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	e009      	b.n	8003de8 <_sbrk+0x54>
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <_sbrk+0x64>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <_sbrk+0x64>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <_sbrk+0x64>)
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20004000 	.word	0x20004000
 8003df4:	00000400 	.word	0x00000400
 8003df8:	2000038c 	.word	0x2000038c
 8003dfc:	20003518 	.word	0x20003518

08003e00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <SystemInit+0x20>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <SystemInit+0x20>)
 8003e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <Reset_Handler>:
 8003e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e5c <LoopForever+0x2>
 8003e28:	480d      	ldr	r0, [pc, #52]	; (8003e60 <LoopForever+0x6>)
 8003e2a:	490e      	ldr	r1, [pc, #56]	; (8003e64 <LoopForever+0xa>)
 8003e2c:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <LoopForever+0xe>)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e002      	b.n	8003e38 <LoopCopyDataInit>

08003e32 <CopyDataInit>:
 8003e32:	58d4      	ldr	r4, [r2, r3]
 8003e34:	50c4      	str	r4, [r0, r3]
 8003e36:	3304      	adds	r3, #4

08003e38 <LoopCopyDataInit>:
 8003e38:	18c4      	adds	r4, r0, r3
 8003e3a:	428c      	cmp	r4, r1
 8003e3c:	d3f9      	bcc.n	8003e32 <CopyDataInit>
 8003e3e:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <LoopForever+0x12>)
 8003e40:	4c0b      	ldr	r4, [pc, #44]	; (8003e70 <LoopForever+0x16>)
 8003e42:	2300      	movs	r3, #0
 8003e44:	e001      	b.n	8003e4a <LoopFillZerobss>

08003e46 <FillZerobss>:
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	3204      	adds	r2, #4

08003e4a <LoopFillZerobss>:
 8003e4a:	42a2      	cmp	r2, r4
 8003e4c:	d3fb      	bcc.n	8003e46 <FillZerobss>
 8003e4e:	f7ff ffd7 	bl	8003e00 <SystemInit>
 8003e52:	f003 fb35 	bl	80074c0 <__libc_init_array>
 8003e56:	f7fd f86b 	bl	8000f30 <main>

08003e5a <LoopForever>:
 8003e5a:	e7fe      	b.n	8003e5a <LoopForever>
 8003e5c:	20004000 	.word	0x20004000
 8003e60:	20000000 	.word	0x20000000
 8003e64:	20000348 	.word	0x20000348
 8003e68:	0800d438 	.word	0x0800d438
 8003e6c:	20000348 	.word	0x20000348
 8003e70:	20003518 	.word	0x20003518

08003e74 <ADC1_IRQHandler>:
 8003e74:	e7fe      	b.n	8003e74 <ADC1_IRQHandler>
	...

08003e78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_Init+0x28>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a07      	ldr	r2, [pc, #28]	; (8003ea0 <HAL_Init+0x28>)
 8003e82:	f043 0310 	orr.w	r3, r3, #16
 8003e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e88:	2003      	movs	r0, #3
 8003e8a:	f000 fca1 	bl	80047d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f000 f808 	bl	8003ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e94:	f7ff fd16 	bl	80038c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40022000 	.word	0x40022000

08003ea4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_InitTick+0x54>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_InitTick+0x58>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fcb9 	bl	800483a <HAL_SYSTICK_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00e      	b.n	8003ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b0f      	cmp	r3, #15
 8003ed6:	d80a      	bhi.n	8003eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	f000 fc81 	bl	80047e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ee4:	4a06      	ldr	r2, [pc, #24]	; (8003f00 <HAL_InitTick+0x5c>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e000      	b.n	8003ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000164 	.word	0x20000164
 8003efc:	2000016c 	.word	0x2000016c
 8003f00:	20000168 	.word	0x20000168

08003f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_IncTick+0x20>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_IncTick+0x24>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4413      	add	r3, r2
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <HAL_IncTick+0x24>)
 8003f16:	6013      	str	r3, [r2, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	2000016c 	.word	0x2000016c
 8003f28:	200034e4 	.word	0x200034e4

08003f2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_GetTick+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	200034e4 	.word	0x200034e4

08003f44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f4c:	f7ff ffee 	bl	8003f2c <HAL_GetTick>
 8003f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d005      	beq.n	8003f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_Delay+0x44>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4413      	add	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003f6a:	bf00      	nop
 8003f6c:	f7ff ffde 	bl	8003f2c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d8f7      	bhi.n	8003f6c <HAL_Delay+0x28>
  {
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	2000016c 	.word	0x2000016c

08003f8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0ed      	b.n	800417a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fcae 	bl	800390c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0202 	bic.w	r2, r2, #2
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fc0:	f7ff ffb4 	bl	8003f2c <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fc6:	e012      	b.n	8003fee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fc8:	f7ff ffb0 	bl	8003f2c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b0a      	cmp	r3, #10
 8003fd4:	d90b      	bls.n	8003fee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2205      	movs	r2, #5
 8003fe6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e0c5      	b.n	800417a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e5      	bne.n	8003fc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800400c:	f7ff ff8e 	bl	8003f2c <HAL_GetTick>
 8004010:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004012:	e012      	b.n	800403a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004014:	f7ff ff8a 	bl	8003f2c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b0a      	cmp	r3, #10
 8004020:	d90b      	bls.n	800403a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2205      	movs	r2, #5
 8004032:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e09f      	b.n	800417a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0e5      	beq.n	8004014 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7e1b      	ldrb	r3, [r3, #24]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d108      	bne.n	8004062 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e007      	b.n	8004072 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	7e5b      	ldrb	r3, [r3, #25]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d108      	bne.n	800408c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e007      	b.n	800409c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800409a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	7e9b      	ldrb	r3, [r3, #26]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d108      	bne.n	80040b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0220 	orr.w	r2, r2, #32
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e007      	b.n	80040c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0220 	bic.w	r2, r2, #32
 80040c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7edb      	ldrb	r3, [r3, #27]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d108      	bne.n	80040e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0210 	bic.w	r2, r2, #16
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e007      	b.n	80040f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0210 	orr.w	r2, r2, #16
 80040ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	7f1b      	ldrb	r3, [r3, #28]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d108      	bne.n	800410a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0208 	orr.w	r2, r2, #8
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e007      	b.n	800411a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0208 	bic.w	r2, r2, #8
 8004118:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7f5b      	ldrb	r3, [r3, #29]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d108      	bne.n	8004134 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0204 	orr.w	r2, r2, #4
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e007      	b.n	8004144 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0204 	bic.w	r2, r2, #4
 8004142:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	ea42 0103 	orr.w	r1, r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	1e5a      	subs	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004182:	b480      	push	{r7}
 8004184:	b087      	sub	sp, #28
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004198:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d003      	beq.n	80041a8 <HAL_CAN_ConfigFilter+0x26>
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	f040 80aa 	bne.w	80042fc <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041ae:	f043 0201 	orr.w	r2, r3, #1
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2201      	movs	r2, #1
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	401a      	ands	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d123      	bne.n	800422a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	401a      	ands	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004204:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	3248      	adds	r2, #72	; 0x48
 800420a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800421e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004220:	6979      	ldr	r1, [r7, #20]
 8004222:	3348      	adds	r3, #72	; 0x48
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	440b      	add	r3, r1
 8004228:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d122      	bne.n	8004278 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	431a      	orrs	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004252:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	3248      	adds	r2, #72	; 0x48
 8004258:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800426c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800426e:	6979      	ldr	r1, [r7, #20]
 8004270:	3348      	adds	r3, #72	; 0x48
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	440b      	add	r3, r1
 8004276:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d109      	bne.n	8004294 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	43db      	mvns	r3, r3
 800428a:	401a      	ands	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004292:	e007      	b.n	80042a4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	431a      	orrs	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	401a      	ands	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80042be:	e007      	b.n	80042d0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d107      	bne.n	80042e8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042ee:	f023 0201 	bic.w	r2, r3, #1
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e006      	b.n	800430a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
  }
}
 800430a:	4618      	mov	r0, r3
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b01      	cmp	r3, #1
 8004328:	d12e      	bne.n	8004388 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004342:	f7ff fdf3 	bl	8003f2c <HAL_GetTick>
 8004346:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004348:	e012      	b.n	8004370 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800434a:	f7ff fdef 	bl	8003f2c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b0a      	cmp	r3, #10
 8004356:	d90b      	bls.n	8004370 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2205      	movs	r2, #5
 8004368:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e012      	b.n	8004396 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e5      	bne.n	800434a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	e006      	b.n	8004396 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d133      	bne.n	800441a <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043c2:	f7ff fdb3 	bl	8003f2c <HAL_GetTick>
 80043c6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043c8:	e012      	b.n	80043f0 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043ca:	f7ff fdaf 	bl	8003f2c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b0a      	cmp	r3, #10
 80043d6:	d90b      	bls.n	80043f0 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2205      	movs	r2, #5
 80043e8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e01b      	b.n	8004428 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0e5      	beq.n	80043ca <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0202 	bic.w	r2, r2, #2
 800440c:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e006      	b.n	8004428 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004444:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800444e:	7ffb      	ldrb	r3, [r7, #31]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d003      	beq.n	800445c <HAL_CAN_AddTxMessage+0x2c>
 8004454:	7ffb      	ldrb	r3, [r7, #31]
 8004456:	2b02      	cmp	r3, #2
 8004458:	f040 80b8 	bne.w	80045cc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800446c:	2b00      	cmp	r3, #0
 800446e:	d105      	bne.n	800447c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80a0 	beq.w	80045bc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	0e1b      	lsrs	r3, r3, #24
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d907      	bls.n	800449c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e09e      	b.n	80045da <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800449c:	2201      	movs	r2, #1
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	409a      	lsls	r2, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10d      	bne.n	80044ca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80044b8:	68f9      	ldr	r1, [r7, #12]
 80044ba:	6809      	ldr	r1, [r1, #0]
 80044bc:	431a      	orrs	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	3318      	adds	r3, #24
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	440b      	add	r3, r1
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e00f      	b.n	80044ea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80044d4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80044de:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3318      	adds	r3, #24
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	440b      	add	r3, r1
 80044e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6819      	ldr	r1, [r3, #0]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	3318      	adds	r3, #24
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	440b      	add	r3, r1
 80044fa:	3304      	adds	r3, #4
 80044fc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	7d1b      	ldrb	r3, [r3, #20]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d111      	bne.n	800452a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	3318      	adds	r3, #24
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	4413      	add	r3, r2
 8004512:	3304      	adds	r3, #4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6811      	ldr	r1, [r2, #0]
 800451a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	3318      	adds	r3, #24
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	440b      	add	r3, r1
 8004526:	3304      	adds	r3, #4
 8004528:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3307      	adds	r3, #7
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	061a      	lsls	r2, r3, #24
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3306      	adds	r3, #6
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	041b      	lsls	r3, r3, #16
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3305      	adds	r3, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	4313      	orrs	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	3204      	adds	r2, #4
 800454a:	7812      	ldrb	r2, [r2, #0]
 800454c:	4610      	mov	r0, r2
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6811      	ldr	r1, [r2, #0]
 8004552:	ea43 0200 	orr.w	r2, r3, r0
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	440b      	add	r3, r1
 800455c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004560:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3303      	adds	r3, #3
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	061a      	lsls	r2, r3, #24
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3302      	adds	r3, #2
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3301      	adds	r3, #1
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	4313      	orrs	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	7812      	ldrb	r2, [r2, #0]
 8004582:	4610      	mov	r0, r2
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	6811      	ldr	r1, [r2, #0]
 8004588:	ea43 0200 	orr.w	r2, r3, r0
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	440b      	add	r3, r1
 8004592:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004596:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	3318      	adds	r3, #24
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	4413      	add	r3, r2
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	6811      	ldr	r1, [r2, #0]
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	3318      	adds	r3, #24
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	440b      	add	r3, r1
 80045b6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e00e      	b.n	80045da <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e006      	b.n	80045da <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b085      	sub	sp, #20
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045fa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80045fc:	7afb      	ldrb	r3, [r7, #11]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d002      	beq.n	8004608 <HAL_CAN_IsTxMessagePending+0x22>
 8004602:	7afb      	ldrb	r3, [r7, #11]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d10b      	bne.n	8004620 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	069b      	lsls	r3, r3, #26
 8004612:	401a      	ands	r2, r3
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	069b      	lsls	r3, r3, #26
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800461c:	2301      	movs	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004620:	68fb      	ldr	r3, [r7, #12]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <__NVIC_SetPriorityGrouping+0x44>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800464c:	4013      	ands	r3, r2
 800464e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800465c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004662:	4a04      	ldr	r2, [pc, #16]	; (8004674 <__NVIC_SetPriorityGrouping+0x44>)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	60d3      	str	r3, [r2, #12]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <__NVIC_GetPriorityGrouping+0x18>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	f003 0307 	and.w	r3, r3, #7
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	db0b      	blt.n	80046be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	f003 021f 	and.w	r2, r3, #31
 80046ac:	4907      	ldr	r1, [pc, #28]	; (80046cc <__NVIC_EnableIRQ+0x38>)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	2001      	movs	r0, #1
 80046b6:	fa00 f202 	lsl.w	r2, r0, r2
 80046ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000e100 	.word	0xe000e100

080046d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	6039      	str	r1, [r7, #0]
 80046da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	db0a      	blt.n	80046fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	490c      	ldr	r1, [pc, #48]	; (800471c <__NVIC_SetPriority+0x4c>)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	0112      	lsls	r2, r2, #4
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	440b      	add	r3, r1
 80046f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046f8:	e00a      	b.n	8004710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	4908      	ldr	r1, [pc, #32]	; (8004720 <__NVIC_SetPriority+0x50>)
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	3b04      	subs	r3, #4
 8004708:	0112      	lsls	r2, r2, #4
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	440b      	add	r3, r1
 800470e:	761a      	strb	r2, [r3, #24]
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	e000e100 	.word	0xe000e100
 8004720:	e000ed00 	.word	0xe000ed00

08004724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	; 0x24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f1c3 0307 	rsb	r3, r3, #7
 800473e:	2b04      	cmp	r3, #4
 8004740:	bf28      	it	cs
 8004742:	2304      	movcs	r3, #4
 8004744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3304      	adds	r3, #4
 800474a:	2b06      	cmp	r3, #6
 800474c:	d902      	bls.n	8004754 <NVIC_EncodePriority+0x30>
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	3b03      	subs	r3, #3
 8004752:	e000      	b.n	8004756 <NVIC_EncodePriority+0x32>
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004758:	f04f 32ff 	mov.w	r2, #4294967295
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43da      	mvns	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	401a      	ands	r2, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800476c:	f04f 31ff 	mov.w	r1, #4294967295
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	43d9      	mvns	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800477c:	4313      	orrs	r3, r2
         );
}
 800477e:	4618      	mov	r0, r3
 8004780:	3724      	adds	r7, #36	; 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3b01      	subs	r3, #1
 8004798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800479c:	d301      	bcc.n	80047a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800479e:	2301      	movs	r3, #1
 80047a0:	e00f      	b.n	80047c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <SysTick_Config+0x40>)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047aa:	210f      	movs	r1, #15
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	f7ff ff8e 	bl	80046d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <SysTick_Config+0x40>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ba:	4b04      	ldr	r3, [pc, #16]	; (80047cc <SysTick_Config+0x40>)
 80047bc:	2207      	movs	r2, #7
 80047be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	e000e010 	.word	0xe000e010

080047d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff ff29 	bl	8004630 <__NVIC_SetPriorityGrouping>
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	4603      	mov	r3, r0
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047f8:	f7ff ff3e 	bl	8004678 <__NVIC_GetPriorityGrouping>
 80047fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f7ff ff8e 	bl	8004724 <NVIC_EncodePriority>
 8004808:	4602      	mov	r2, r0
 800480a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff ff5d 	bl	80046d0 <__NVIC_SetPriority>
}
 8004816:	bf00      	nop
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	4603      	mov	r3, r0
 8004826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff31 	bl	8004694 <__NVIC_EnableIRQ>
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff ffa2 	bl	800478c <SysTick_Config>
 8004848:	4603      	mov	r3, r0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800486e:	4b2f      	ldr	r3, [pc, #188]	; (800492c <HAL_FLASH_Program+0xd8>)
 8004870:	7e1b      	ldrb	r3, [r3, #24]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_FLASH_Program+0x26>
 8004876:	2302      	movs	r3, #2
 8004878:	e054      	b.n	8004924 <HAL_FLASH_Program+0xd0>
 800487a:	4b2c      	ldr	r3, [pc, #176]	; (800492c <HAL_FLASH_Program+0xd8>)
 800487c:	2201      	movs	r2, #1
 800487e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004880:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004884:	f000 f8a8 	bl	80049d8 <FLASH_WaitForLastOperation>
 8004888:	4603      	mov	r3, r0
 800488a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d144      	bne.n	800491c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d102      	bne.n	800489e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004898:	2301      	movs	r3, #1
 800489a:	757b      	strb	r3, [r7, #21]
 800489c:	e007      	b.n	80048ae <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d102      	bne.n	80048aa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80048a4:	2302      	movs	r3, #2
 80048a6:	757b      	strb	r3, [r7, #21]
 80048a8:	e001      	b.n	80048ae <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80048aa:	2304      	movs	r3, #4
 80048ac:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80048ae:	2300      	movs	r3, #0
 80048b0:	75bb      	strb	r3, [r7, #22]
 80048b2:	e02d      	b.n	8004910 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80048b4:	7dbb      	ldrb	r3, [r7, #22]
 80048b6:	005a      	lsls	r2, r3, #1
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	eb02 0c03 	add.w	ip, r2, r3
 80048be:	7dbb      	ldrb	r3, [r7, #22]
 80048c0:	0119      	lsls	r1, r3, #4
 80048c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048c6:	f1c1 0620 	rsb	r6, r1, #32
 80048ca:	f1a1 0020 	sub.w	r0, r1, #32
 80048ce:	fa22 f401 	lsr.w	r4, r2, r1
 80048d2:	fa03 f606 	lsl.w	r6, r3, r6
 80048d6:	4334      	orrs	r4, r6
 80048d8:	fa23 f000 	lsr.w	r0, r3, r0
 80048dc:	4304      	orrs	r4, r0
 80048de:	fa23 f501 	lsr.w	r5, r3, r1
 80048e2:	b2a3      	uxth	r3, r4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4660      	mov	r0, ip
 80048e8:	f000 f85a 	bl	80049a0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048f0:	f000 f872 	bl	80049d8 <FLASH_WaitForLastOperation>
 80048f4:	4603      	mov	r3, r0
 80048f6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80048f8:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <HAL_FLASH_Program+0xdc>)
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	4a0c      	ldr	r2, [pc, #48]	; (8004930 <HAL_FLASH_Program+0xdc>)
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d107      	bne.n	800491a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800490a:	7dbb      	ldrb	r3, [r7, #22]
 800490c:	3301      	adds	r3, #1
 800490e:	75bb      	strb	r3, [r7, #22]
 8004910:	7dba      	ldrb	r2, [r7, #22]
 8004912:	7d7b      	ldrb	r3, [r7, #21]
 8004914:	429a      	cmp	r2, r3
 8004916:	d3cd      	bcc.n	80048b4 <HAL_FLASH_Program+0x60>
 8004918:	e000      	b.n	800491c <HAL_FLASH_Program+0xc8>
      {
        break;
 800491a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800491c:	4b03      	ldr	r3, [pc, #12]	; (800492c <HAL_FLASH_Program+0xd8>)
 800491e:	2200      	movs	r2, #0
 8004920:	761a      	strb	r2, [r3, #24]

  return status;
 8004922:	7dfb      	ldrb	r3, [r7, #23]
}
 8004924:	4618      	mov	r0, r3
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492c:	200034e8 	.word	0x200034e8
 8004930:	40022000 	.word	0x40022000

08004934 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800493e:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <HAL_FLASH_Unlock+0x40>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00d      	beq.n	8004966 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800494a:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <HAL_FLASH_Unlock+0x40>)
 800494c:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <HAL_FLASH_Unlock+0x44>)
 800494e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004950:	4b08      	ldr	r3, [pc, #32]	; (8004974 <HAL_FLASH_Unlock+0x40>)
 8004952:	4a0a      	ldr	r2, [pc, #40]	; (800497c <HAL_FLASH_Unlock+0x48>)
 8004954:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004956:	4b07      	ldr	r3, [pc, #28]	; (8004974 <HAL_FLASH_Unlock+0x40>)
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004966:	79fb      	ldrb	r3, [r7, #7]
}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	40022000 	.word	0x40022000
 8004978:	45670123 	.word	0x45670123
 800497c:	cdef89ab 	.word	0xcdef89ab

08004980 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_FLASH_Lock+0x1c>)
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	4a04      	ldr	r2, [pc, #16]	; (800499c <HAL_FLASH_Lock+0x1c>)
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40022000 	.word	0x40022000

080049a0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <FLASH_Program_HalfWord+0x30>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80049b2:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <FLASH_Program_HalfWord+0x34>)
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	4a07      	ldr	r2, [pc, #28]	; (80049d4 <FLASH_Program_HalfWord+0x34>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	887a      	ldrh	r2, [r7, #2]
 80049c2:	801a      	strh	r2, [r3, #0]
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	200034e8 	.word	0x200034e8
 80049d4:	40022000 	.word	0x40022000

080049d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80049e0:	f7ff faa4 	bl	8003f2c <HAL_GetTick>
 80049e4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80049e6:	e010      	b.n	8004a0a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d00c      	beq.n	8004a0a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <FLASH_WaitForLastOperation+0x2e>
 80049f6:	f7ff fa99 	bl	8003f2c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d201      	bcs.n	8004a0a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e01f      	b.n	8004a4a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <FLASH_WaitForLastOperation+0x7c>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d0e8      	beq.n	80049e8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <FLASH_WaitForLastOperation+0x7c>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d102      	bne.n	8004a28 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <FLASH_WaitForLastOperation+0x7c>)
 8004a24:	2220      	movs	r2, #32
 8004a26:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <FLASH_WaitForLastOperation+0x7c>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	d005      	beq.n	8004a40 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <FLASH_WaitForLastOperation+0x7c>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d103      	bne.n	8004a48 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004a40:	f000 f80a 	bl	8004a58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e000      	b.n	8004a4a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40022000 	.word	0x40022000

08004a58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <FLASH_SetErrorCode+0x5c>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d109      	bne.n	8004a82 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <FLASH_SetErrorCode+0x60>)
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	f043 0302 	orr.w	r3, r3, #2
 8004a76:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <FLASH_SetErrorCode+0x60>)
 8004a78:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f043 0310 	orr.w	r3, r3, #16
 8004a80:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <FLASH_SetErrorCode+0x5c>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d109      	bne.n	8004aa2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <FLASH_SetErrorCode+0x60>)
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <FLASH_SetErrorCode+0x60>)
 8004a98:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f043 0304 	orr.w	r3, r3, #4
 8004aa0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004aa2:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <FLASH_SetErrorCode+0x5c>)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60d3      	str	r3, [r2, #12]
}  
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40022000 	.word	0x40022000
 8004ab8:	200034e8 	.word	0x200034e8

08004abc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ace:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <HAL_FLASHEx_Erase+0xcc>)
 8004ad0:	7e1b      	ldrb	r3, [r3, #24]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_FLASHEx_Erase+0x1e>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e052      	b.n	8004b80 <HAL_FLASHEx_Erase+0xc4>
 8004ada:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <HAL_FLASHEx_Erase+0xcc>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d115      	bne.n	8004b14 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004ae8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004aec:	f7ff ff74 	bl	80049d8 <FLASH_WaitForLastOperation>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d140      	bne.n	8004b78 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004af6:	f000 f84b 	bl	8004b90 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004afa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004afe:	f7ff ff6b 	bl	80049d8 <FLASH_WaitForLastOperation>
 8004b02:	4603      	mov	r3, r0
 8004b04:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004b06:	4b21      	ldr	r3, [pc, #132]	; (8004b8c <HAL_FLASHEx_Erase+0xd0>)
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	4a20      	ldr	r2, [pc, #128]	; (8004b8c <HAL_FLASHEx_Erase+0xd0>)
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	6113      	str	r3, [r2, #16]
 8004b12:	e031      	b.n	8004b78 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004b14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b18:	f7ff ff5e 	bl	80049d8 <FLASH_WaitForLastOperation>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d12a      	bne.n	8004b78 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f04f 32ff 	mov.w	r2, #4294967295
 8004b28:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	e019      	b.n	8004b66 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004b32:	68b8      	ldr	r0, [r7, #8]
 8004b34:	f000 f846 	bl	8004bc4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b3c:	f7ff ff4c 	bl	80049d8 <FLASH_WaitForLastOperation>
 8004b40:	4603      	mov	r3, r0
 8004b42:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004b44:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <HAL_FLASHEx_Erase+0xd0>)
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <HAL_FLASHEx_Erase+0xd0>)
 8004b4a:	f023 0302 	bic.w	r3, r3, #2
 8004b4e:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	601a      	str	r2, [r3, #0]
            break;
 8004b5c:	e00c      	b.n	8004b78 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b64:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	02da      	lsls	r2, r3, #11
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d3dc      	bcc.n	8004b32 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b78:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <HAL_FLASHEx_Erase+0xcc>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	761a      	strb	r2, [r3, #24]

  return status;
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	200034e8 	.word	0x200034e8
 8004b8c:	40022000 	.word	0x40022000

08004b90 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b94:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <FLASH_MassErase+0x2c>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <FLASH_MassErase+0x30>)
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <FLASH_MassErase+0x30>)
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <FLASH_MassErase+0x30>)
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	4a05      	ldr	r2, [pc, #20]	; (8004bc0 <FLASH_MassErase+0x30>)
 8004bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb0:	6113      	str	r3, [r2, #16]
}
 8004bb2:	bf00      	nop
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	200034e8 	.word	0x200034e8
 8004bc0:	40022000 	.word	0x40022000

08004bc4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <FLASH_PageErase+0x38>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <FLASH_PageErase+0x3c>)
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	; (8004c00 <FLASH_PageErase+0x3c>)
 8004bd8:	f043 0302 	orr.w	r3, r3, #2
 8004bdc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <FLASH_PageErase+0x3c>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <FLASH_PageErase+0x3c>)
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	4a05      	ldr	r2, [pc, #20]	; (8004c00 <FLASH_PageErase+0x3c>)
 8004bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bee:	6113      	str	r3, [r2, #16]
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	200034e8 	.word	0x200034e8
 8004c00:	40022000 	.word	0x40022000

08004c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c12:	e154      	b.n	8004ebe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	2101      	movs	r1, #1
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c20:	4013      	ands	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8146 	beq.w	8004eb8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d00b      	beq.n	8004c4c <HAL_GPIO_Init+0x48>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d007      	beq.n	8004c4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c40:	2b11      	cmp	r3, #17
 8004c42:	d003      	beq.n	8004c4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b12      	cmp	r3, #18
 8004c4a:	d130      	bne.n	8004cae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	2203      	movs	r2, #3
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4013      	ands	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c82:	2201      	movs	r2, #1
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	f003 0201 	and.w	r2, r3, #1
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	2203      	movs	r2, #3
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d003      	beq.n	8004cee <HAL_GPIO_Init+0xea>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b12      	cmp	r3, #18
 8004cec:	d123      	bne.n	8004d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	08da      	lsrs	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3208      	adds	r2, #8
 8004cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	220f      	movs	r2, #15
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	08da      	lsrs	r2, r3, #3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3208      	adds	r2, #8
 8004d30:	6939      	ldr	r1, [r7, #16]
 8004d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	2203      	movs	r2, #3
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 0203 	and.w	r2, r3, #3
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80a0 	beq.w	8004eb8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d78:	4b58      	ldr	r3, [pc, #352]	; (8004edc <HAL_GPIO_Init+0x2d8>)
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	4a57      	ldr	r2, [pc, #348]	; (8004edc <HAL_GPIO_Init+0x2d8>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6193      	str	r3, [r2, #24]
 8004d84:	4b55      	ldr	r3, [pc, #340]	; (8004edc <HAL_GPIO_Init+0x2d8>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d90:	4a53      	ldr	r2, [pc, #332]	; (8004ee0 <HAL_GPIO_Init+0x2dc>)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	089b      	lsrs	r3, r3, #2
 8004d96:	3302      	adds	r3, #2
 8004d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	220f      	movs	r2, #15
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4013      	ands	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dba:	d019      	beq.n	8004df0 <HAL_GPIO_Init+0x1ec>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a49      	ldr	r2, [pc, #292]	; (8004ee4 <HAL_GPIO_Init+0x2e0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <HAL_GPIO_Init+0x1e8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a48      	ldr	r2, [pc, #288]	; (8004ee8 <HAL_GPIO_Init+0x2e4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00d      	beq.n	8004de8 <HAL_GPIO_Init+0x1e4>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a47      	ldr	r2, [pc, #284]	; (8004eec <HAL_GPIO_Init+0x2e8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d007      	beq.n	8004de4 <HAL_GPIO_Init+0x1e0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a46      	ldr	r2, [pc, #280]	; (8004ef0 <HAL_GPIO_Init+0x2ec>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d101      	bne.n	8004de0 <HAL_GPIO_Init+0x1dc>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	e008      	b.n	8004df2 <HAL_GPIO_Init+0x1ee>
 8004de0:	2305      	movs	r3, #5
 8004de2:	e006      	b.n	8004df2 <HAL_GPIO_Init+0x1ee>
 8004de4:	2303      	movs	r3, #3
 8004de6:	e004      	b.n	8004df2 <HAL_GPIO_Init+0x1ee>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e002      	b.n	8004df2 <HAL_GPIO_Init+0x1ee>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <HAL_GPIO_Init+0x1ee>
 8004df0:	2300      	movs	r3, #0
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	f002 0203 	and.w	r2, r2, #3
 8004df8:	0092      	lsls	r2, r2, #2
 8004dfa:	4093      	lsls	r3, r2
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e02:	4937      	ldr	r1, [pc, #220]	; (8004ee0 <HAL_GPIO_Init+0x2dc>)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	089b      	lsrs	r3, r3, #2
 8004e08:	3302      	adds	r3, #2
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e10:	4b38      	ldr	r3, [pc, #224]	; (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004e34:	4a2f      	ldr	r2, [pc, #188]	; (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	43db      	mvns	r3, r3
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4013      	ands	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e5e:	4a25      	ldr	r2, [pc, #148]	; (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e64:	4b23      	ldr	r3, [pc, #140]	; (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4013      	ands	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d003      	beq.n	8004e88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e88:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e8e:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	43db      	mvns	r3, r3
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004eb2:	4a10      	ldr	r2, [pc, #64]	; (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f47f aea3 	bne.w	8004c14 <HAL_GPIO_Init+0x10>
  }
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	48000400 	.word	0x48000400
 8004ee8:	48000800 	.word	0x48000800
 8004eec:	48000c00 	.word	0x48000c00
 8004ef0:	48001000 	.word	0x48001000
 8004ef4:	40010400 	.word	0x40010400

08004ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	807b      	strh	r3, [r7, #2]
 8004f04:	4613      	mov	r3, r2
 8004f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f08:	787b      	ldrb	r3, [r7, #1]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f0e:	887a      	ldrh	r2, [r7, #2]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f14:	e002      	b.n	8004f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f16:	887a      	ldrh	r2, [r7, #2]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d006      	beq.n	8004f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f3e:	4a05      	ldr	r2, [pc, #20]	; (8004f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd f8a8 	bl	800209c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40010400 	.word	0x40010400

08004f58 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_PWREx_EnableSDADC+0x38>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <HAL_PWREx_EnableSDADC+0x38>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	61d3      	str	r3, [r2, #28]
 8004f6c:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <HAL_PWREx_EnableSDADC+0x38>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_PWREx_EnableSDADC+0x3c>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4905      	ldr	r1, [pc, #20]	; (8004f94 <HAL_PWREx_EnableSDADC+0x3c>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]
}
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40007000 	.word	0x40007000

08004f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fa4:	1d3b      	adds	r3, r7, #4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d102      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f000 bef4 	b.w	8005d9a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb2:	1d3b      	adds	r3, r7, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 816a 	beq.w	8005296 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004fc2:	4bb3      	ldr	r3, [pc, #716]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fce:	4bb0      	ldr	r3, [pc, #704]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d159      	bne.n	800508e <HAL_RCC_OscConfig+0xf6>
 8004fda:	4bad      	ldr	r3, [pc, #692]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe6:	d152      	bne.n	800508e <HAL_RCC_OscConfig+0xf6>
 8004fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fec:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004ff4:	fa93 f3a3 	rbit	r3, r3
 8004ff8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ffc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	fab3 f383 	clz	r3, r3
 8005004:	b2db      	uxtb	r3, r3
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d102      	bne.n	800501a <HAL_RCC_OscConfig+0x82>
 8005014:	4b9e      	ldr	r3, [pc, #632]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	e015      	b.n	8005046 <HAL_RCC_OscConfig+0xae>
 800501a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800501e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005026:	fa93 f3a3 	rbit	r3, r3
 800502a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800502e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005032:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005036:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800503a:	fa93 f3a3 	rbit	r3, r3
 800503e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005042:	4b93      	ldr	r3, [pc, #588]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800504a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800504e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005052:	fa92 f2a2 	rbit	r2, r2
 8005056:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800505a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800505e:	fab2 f282 	clz	r2, r2
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	f042 0220 	orr.w	r2, r2, #32
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	f002 021f 	and.w	r2, r2, #31
 800506e:	2101      	movs	r1, #1
 8005070:	fa01 f202 	lsl.w	r2, r1, r2
 8005074:	4013      	ands	r3, r2
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 810c 	beq.w	8005294 <HAL_RCC_OscConfig+0x2fc>
 800507c:	1d3b      	adds	r3, r7, #4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 8106 	bne.w	8005294 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	f000 be86 	b.w	8005d9a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508e:	1d3b      	adds	r3, r7, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005098:	d106      	bne.n	80050a8 <HAL_RCC_OscConfig+0x110>
 800509a:	4b7d      	ldr	r3, [pc, #500]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a7c      	ldr	r2, [pc, #496]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e030      	b.n	800510a <HAL_RCC_OscConfig+0x172>
 80050a8:	1d3b      	adds	r3, r7, #4
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10c      	bne.n	80050cc <HAL_RCC_OscConfig+0x134>
 80050b2:	4b77      	ldr	r3, [pc, #476]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a76      	ldr	r2, [pc, #472]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	4b74      	ldr	r3, [pc, #464]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a73      	ldr	r2, [pc, #460]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	e01e      	b.n	800510a <HAL_RCC_OscConfig+0x172>
 80050cc:	1d3b      	adds	r3, r7, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCC_OscConfig+0x15a>
 80050d8:	4b6d      	ldr	r3, [pc, #436]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a6c      	ldr	r2, [pc, #432]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	4b6a      	ldr	r3, [pc, #424]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a69      	ldr	r2, [pc, #420]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	e00b      	b.n	800510a <HAL_RCC_OscConfig+0x172>
 80050f2:	4b67      	ldr	r3, [pc, #412]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a66      	ldr	r2, [pc, #408]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80050f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4b64      	ldr	r3, [pc, #400]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a63      	ldr	r2, [pc, #396]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 8005104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005108:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800510a:	4b61      	ldr	r3, [pc, #388]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	f023 020f 	bic.w	r2, r3, #15
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	495d      	ldr	r1, [pc, #372]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 800511a:	4313      	orrs	r3, r2
 800511c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d059      	beq.n	80051dc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005128:	f7fe ff00 	bl	8003f2c <HAL_GetTick>
 800512c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005130:	e00a      	b.n	8005148 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005132:	f7fe fefb 	bl	8003f2c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	; 0x64
 8005140:	d902      	bls.n	8005148 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	f000 be29 	b.w	8005d9a <HAL_RCC_OscConfig+0xe02>
 8005148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800514c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005150:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005154:	fa93 f3a3 	rbit	r3, r3
 8005158:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800515c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005160:	fab3 f383 	clz	r3, r3
 8005164:	b2db      	uxtb	r3, r3
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	d102      	bne.n	800517a <HAL_RCC_OscConfig+0x1e2>
 8005174:	4b46      	ldr	r3, [pc, #280]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	e015      	b.n	80051a6 <HAL_RCC_OscConfig+0x20e>
 800517a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800517e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005182:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800518e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005192:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005196:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800519a:	fa93 f3a3 	rbit	r3, r3
 800519e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80051a2:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051aa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80051ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80051b2:	fa92 f2a2 	rbit	r2, r2
 80051b6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80051ba:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80051be:	fab2 f282 	clz	r2, r2
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	f042 0220 	orr.w	r2, r2, #32
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	f002 021f 	and.w	r2, r2, #31
 80051ce:	2101      	movs	r1, #1
 80051d0:	fa01 f202 	lsl.w	r2, r1, r2
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0ab      	beq.n	8005132 <HAL_RCC_OscConfig+0x19a>
 80051da:	e05c      	b.n	8005296 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fe fea6 	bl	8003f2c <HAL_GetTick>
 80051e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051e4:	e00a      	b.n	80051fc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e6:	f7fe fea1 	bl	8003f2c <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	; 0x64
 80051f4:	d902      	bls.n	80051fc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	f000 bdcf 	b.w	8005d9a <HAL_RCC_OscConfig+0xe02>
 80051fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005200:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005204:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005208:	fa93 f3a3 	rbit	r3, r3
 800520c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005210:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005214:	fab3 f383 	clz	r3, r3
 8005218:	b2db      	uxtb	r3, r3
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	b2db      	uxtb	r3, r3
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d102      	bne.n	800522e <HAL_RCC_OscConfig+0x296>
 8005228:	4b19      	ldr	r3, [pc, #100]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	e015      	b.n	800525a <HAL_RCC_OscConfig+0x2c2>
 800522e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005232:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800523a:	fa93 f3a3 	rbit	r3, r3
 800523e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005246:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800524a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005256:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <HAL_RCC_OscConfig+0x2f8>)
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800525e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005262:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005266:	fa92 f2a2 	rbit	r2, r2
 800526a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800526e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005272:	fab2 f282 	clz	r2, r2
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	f042 0220 	orr.w	r2, r2, #32
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	f002 021f 	and.w	r2, r2, #31
 8005282:	2101      	movs	r1, #1
 8005284:	fa01 f202 	lsl.w	r2, r1, r2
 8005288:	4013      	ands	r3, r2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1ab      	bne.n	80051e6 <HAL_RCC_OscConfig+0x24e>
 800528e:	e002      	b.n	8005296 <HAL_RCC_OscConfig+0x2fe>
 8005290:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 816f 	beq.w	8005584 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80052a6:	4bd0      	ldr	r3, [pc, #832]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80052b2:	4bcd      	ldr	r3, [pc, #820]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d16c      	bne.n	8005398 <HAL_RCC_OscConfig+0x400>
 80052be:	4bca      	ldr	r3, [pc, #808]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d166      	bne.n	8005398 <HAL_RCC_OscConfig+0x400>
 80052ca:	2302      	movs	r3, #2
 80052cc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80052d4:	fa93 f3a3 	rbit	r3, r3
 80052d8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80052dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052e0:	fab3 f383 	clz	r3, r3
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	f043 0301 	orr.w	r3, r3, #1
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d102      	bne.n	80052fa <HAL_RCC_OscConfig+0x362>
 80052f4:	4bbc      	ldr	r3, [pc, #752]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	e013      	b.n	8005322 <HAL_RCC_OscConfig+0x38a>
 80052fa:	2302      	movs	r3, #2
 80052fc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005300:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005304:	fa93 f3a3 	rbit	r3, r3
 8005308:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800530c:	2302      	movs	r3, #2
 800530e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005312:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005316:	fa93 f3a3 	rbit	r3, r3
 800531a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800531e:	4bb2      	ldr	r3, [pc, #712]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	2202      	movs	r2, #2
 8005324:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005328:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800532c:	fa92 f2a2 	rbit	r2, r2
 8005330:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005334:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005338:	fab2 f282 	clz	r2, r2
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	f042 0220 	orr.w	r2, r2, #32
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	f002 021f 	and.w	r2, r2, #31
 8005348:	2101      	movs	r1, #1
 800534a:	fa01 f202 	lsl.w	r2, r1, r2
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <HAL_RCC_OscConfig+0x3cc>
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d002      	beq.n	8005364 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f000 bd1b 	b.w	8005d9a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005364:	4ba0      	ldr	r3, [pc, #640]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800536c:	1d3b      	adds	r3, r7, #4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	21f8      	movs	r1, #248	; 0xf8
 8005374:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005378:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800537c:	fa91 f1a1 	rbit	r1, r1
 8005380:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005384:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005388:	fab1 f181 	clz	r1, r1
 800538c:	b2c9      	uxtb	r1, r1
 800538e:	408b      	lsls	r3, r1
 8005390:	4995      	ldr	r1, [pc, #596]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005396:	e0f5      	b.n	8005584 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 8085 	beq.w	80054ae <HAL_RCC_OscConfig+0x516>
 80053a4:	2301      	movs	r3, #1
 80053a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80053b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ba:	fab3 f383 	clz	r3, r3
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	461a      	mov	r2, r3
 80053cc:	2301      	movs	r3, #1
 80053ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fe fdac 	bl	8003f2c <HAL_GetTick>
 80053d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d8:	e00a      	b.n	80053f0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053da:	f7fe fda7 	bl	8003f2c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d902      	bls.n	80053f0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	f000 bcd5 	b.w	8005d9a <HAL_RCC_OscConfig+0xe02>
 80053f0:	2302      	movs	r3, #2
 80053f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80053fa:	fa93 f3a3 	rbit	r3, r3
 80053fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005402:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005406:	fab3 f383 	clz	r3, r3
 800540a:	b2db      	uxtb	r3, r3
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b01      	cmp	r3, #1
 8005418:	d102      	bne.n	8005420 <HAL_RCC_OscConfig+0x488>
 800541a:	4b73      	ldr	r3, [pc, #460]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	e013      	b.n	8005448 <HAL_RCC_OscConfig+0x4b0>
 8005420:	2302      	movs	r3, #2
 8005422:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800542a:	fa93 f3a3 	rbit	r3, r3
 800542e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005432:	2302      	movs	r3, #2
 8005434:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005438:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800543c:	fa93 f3a3 	rbit	r3, r3
 8005440:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005444:	4b68      	ldr	r3, [pc, #416]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	2202      	movs	r2, #2
 800544a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800544e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005452:	fa92 f2a2 	rbit	r2, r2
 8005456:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800545a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800545e:	fab2 f282 	clz	r2, r2
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	f042 0220 	orr.w	r2, r2, #32
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	f002 021f 	and.w	r2, r2, #31
 800546e:	2101      	movs	r1, #1
 8005470:	fa01 f202 	lsl.w	r2, r1, r2
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0af      	beq.n	80053da <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547a:	4b5b      	ldr	r3, [pc, #364]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	21f8      	movs	r1, #248	; 0xf8
 800548a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005492:	fa91 f1a1 	rbit	r1, r1
 8005496:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800549a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800549e:	fab1 f181 	clz	r1, r1
 80054a2:	b2c9      	uxtb	r1, r1
 80054a4:	408b      	lsls	r3, r1
 80054a6:	4950      	ldr	r1, [pc, #320]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	600b      	str	r3, [r1, #0]
 80054ac:	e06a      	b.n	8005584 <HAL_RCC_OscConfig+0x5ec>
 80054ae:	2301      	movs	r3, #1
 80054b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80054c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054c4:	fab3 f383 	clz	r3, r3
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	461a      	mov	r2, r3
 80054d6:	2300      	movs	r3, #0
 80054d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054da:	f7fe fd27 	bl	8003f2c <HAL_GetTick>
 80054de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e4:	f7fe fd22 	bl	8003f2c <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d902      	bls.n	80054fa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	f000 bc50 	b.w	8005d9a <HAL_RCC_OscConfig+0xe02>
 80054fa:	2302      	movs	r3, #2
 80054fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005504:	fa93 f3a3 	rbit	r3, r3
 8005508:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800550c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005510:	fab3 f383 	clz	r3, r3
 8005514:	b2db      	uxtb	r3, r3
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	d102      	bne.n	800552a <HAL_RCC_OscConfig+0x592>
 8005524:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	e013      	b.n	8005552 <HAL_RCC_OscConfig+0x5ba>
 800552a:	2302      	movs	r3, #2
 800552c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005534:	fa93 f3a3 	rbit	r3, r3
 8005538:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800553c:	2302      	movs	r3, #2
 800553e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005542:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005546:	fa93 f3a3 	rbit	r3, r3
 800554a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800554e:	4b26      	ldr	r3, [pc, #152]	; (80055e8 <HAL_RCC_OscConfig+0x650>)
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	2202      	movs	r2, #2
 8005554:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005558:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800555c:	fa92 f2a2 	rbit	r2, r2
 8005560:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005564:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005568:	fab2 f282 	clz	r2, r2
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	f042 0220 	orr.w	r2, r2, #32
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	f002 021f 	and.w	r2, r2, #31
 8005578:	2101      	movs	r1, #1
 800557a:	fa01 f202 	lsl.w	r2, r1, r2
 800557e:	4013      	ands	r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1af      	bne.n	80054e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80da 	beq.w	8005748 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005594:	1d3b      	adds	r3, r7, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d069      	beq.n	8005672 <HAL_RCC_OscConfig+0x6da>
 800559e:	2301      	movs	r3, #1
 80055a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055a8:	fa93 f3a3 	rbit	r3, r3
 80055ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80055b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b4:	fab3 f383 	clz	r3, r3
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HAL_RCC_OscConfig+0x654>)
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	461a      	mov	r2, r3
 80055c4:	2301      	movs	r3, #1
 80055c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c8:	f7fe fcb0 	bl	8003f2c <HAL_GetTick>
 80055cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d0:	e00e      	b.n	80055f0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055d2:	f7fe fcab 	bl	8003f2c <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d906      	bls.n	80055f0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e3d9      	b.n	8005d9a <HAL_RCC_OscConfig+0xe02>
 80055e6:	bf00      	nop
 80055e8:	40021000 	.word	0x40021000
 80055ec:	10908120 	.word	0x10908120
 80055f0:	2302      	movs	r3, #2
 80055f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055fa:	fa93 f3a3 	rbit	r3, r3
 80055fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005602:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005606:	2202      	movs	r2, #2
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	fa93 f2a3 	rbit	r2, r3
 8005614:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800561e:	2202      	movs	r2, #2
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	fa93 f2a3 	rbit	r2, r3
 800562c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005630:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005632:	4ba5      	ldr	r3, [pc, #660]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005636:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800563a:	2102      	movs	r1, #2
 800563c:	6019      	str	r1, [r3, #0]
 800563e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	fa93 f1a3 	rbit	r1, r3
 8005648:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800564c:	6019      	str	r1, [r3, #0]
  return result;
 800564e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	fab3 f383 	clz	r3, r3
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	2101      	movs	r1, #1
 8005666:	fa01 f303 	lsl.w	r3, r1, r3
 800566a:	4013      	ands	r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0b0      	beq.n	80055d2 <HAL_RCC_OscConfig+0x63a>
 8005670:	e06a      	b.n	8005748 <HAL_RCC_OscConfig+0x7b0>
 8005672:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	fa93 f2a3 	rbit	r2, r3
 8005684:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005688:	601a      	str	r2, [r3, #0]
  return result;
 800568a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800568e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005690:	fab3 f383 	clz	r3, r3
 8005694:	b2db      	uxtb	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	4b8c      	ldr	r3, [pc, #560]	; (80058cc <HAL_RCC_OscConfig+0x934>)
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	461a      	mov	r2, r3
 80056a0:	2300      	movs	r3, #0
 80056a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a4:	f7fe fc42 	bl	8003f2c <HAL_GetTick>
 80056a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ac:	e009      	b.n	80056c2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ae:	f7fe fc3d 	bl	8003f2c <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e36b      	b.n	8005d9a <HAL_RCC_OscConfig+0xe02>
 80056c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80056c6:	2202      	movs	r2, #2
 80056c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	fa93 f2a3 	rbit	r2, r3
 80056d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80056de:	2202      	movs	r2, #2
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	fa93 f2a3 	rbit	r2, r3
 80056ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80056f6:	2202      	movs	r2, #2
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	fa93 f2a3 	rbit	r2, r3
 8005704:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005708:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800570a:	4b6f      	ldr	r3, [pc, #444]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 800570c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800570e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005712:	2102      	movs	r1, #2
 8005714:	6019      	str	r1, [r3, #0]
 8005716:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	fa93 f1a3 	rbit	r1, r3
 8005720:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005724:	6019      	str	r1, [r3, #0]
  return result;
 8005726:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	fab3 f383 	clz	r3, r3
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	2101      	movs	r1, #1
 800573e:	fa01 f303 	lsl.w	r3, r1, r3
 8005742:	4013      	ands	r3, r2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1b2      	bne.n	80056ae <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005748:	1d3b      	adds	r3, r7, #4
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8158 	beq.w	8005a08 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005758:	2300      	movs	r3, #0
 800575a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800575e:	4b5a      	ldr	r3, [pc, #360]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d112      	bne.n	8005790 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800576a:	4b57      	ldr	r3, [pc, #348]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	4a56      	ldr	r2, [pc, #344]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005774:	61d3      	str	r3, [r2, #28]
 8005776:	4b54      	ldr	r3, [pc, #336]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800577e:	f107 0308 	add.w	r3, r7, #8
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	f107 0308 	add.w	r3, r7, #8
 8005788:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005790:	4b4f      	ldr	r3, [pc, #316]	; (80058d0 <HAL_RCC_OscConfig+0x938>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d11a      	bne.n	80057d2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800579c:	4b4c      	ldr	r3, [pc, #304]	; (80058d0 <HAL_RCC_OscConfig+0x938>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a4b      	ldr	r2, [pc, #300]	; (80058d0 <HAL_RCC_OscConfig+0x938>)
 80057a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a8:	f7fe fbc0 	bl	8003f2c <HAL_GetTick>
 80057ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b0:	e009      	b.n	80057c6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b2:	f7fe fbbb 	bl	8003f2c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	; 0x64
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e2e9      	b.n	8005d9a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c6:	4b42      	ldr	r3, [pc, #264]	; (80058d0 <HAL_RCC_OscConfig+0x938>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ef      	beq.n	80057b2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d2:	1d3b      	adds	r3, r7, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d106      	bne.n	80057ea <HAL_RCC_OscConfig+0x852>
 80057dc:	4b3a      	ldr	r3, [pc, #232]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	4a39      	ldr	r2, [pc, #228]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6213      	str	r3, [r2, #32]
 80057e8:	e02f      	b.n	800584a <HAL_RCC_OscConfig+0x8b2>
 80057ea:	1d3b      	adds	r3, r7, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10c      	bne.n	800580e <HAL_RCC_OscConfig+0x876>
 80057f4:	4b34      	ldr	r3, [pc, #208]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	4a33      	ldr	r2, [pc, #204]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 80057fa:	f023 0301 	bic.w	r3, r3, #1
 80057fe:	6213      	str	r3, [r2, #32]
 8005800:	4b31      	ldr	r3, [pc, #196]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	4a30      	ldr	r2, [pc, #192]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005806:	f023 0304 	bic.w	r3, r3, #4
 800580a:	6213      	str	r3, [r2, #32]
 800580c:	e01d      	b.n	800584a <HAL_RCC_OscConfig+0x8b2>
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2b05      	cmp	r3, #5
 8005816:	d10c      	bne.n	8005832 <HAL_RCC_OscConfig+0x89a>
 8005818:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	4a2a      	ldr	r2, [pc, #168]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 800581e:	f043 0304 	orr.w	r3, r3, #4
 8005822:	6213      	str	r3, [r2, #32]
 8005824:	4b28      	ldr	r3, [pc, #160]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	6213      	str	r3, [r2, #32]
 8005830:	e00b      	b.n	800584a <HAL_RCC_OscConfig+0x8b2>
 8005832:	4b25      	ldr	r3, [pc, #148]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	4a24      	ldr	r2, [pc, #144]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	6213      	str	r3, [r2, #32]
 800583e:	4b22      	ldr	r3, [pc, #136]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	4a21      	ldr	r2, [pc, #132]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 8005844:	f023 0304 	bic.w	r3, r3, #4
 8005848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d06b      	beq.n	800592c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005854:	f7fe fb6a 	bl	8003f2c <HAL_GetTick>
 8005858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585c:	e00b      	b.n	8005876 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800585e:	f7fe fb65 	bl	8003f2c <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f241 3288 	movw	r2, #5000	; 0x1388
 800586e:	4293      	cmp	r3, r2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e291      	b.n	8005d9a <HAL_RCC_OscConfig+0xe02>
 8005876:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800587a:	2202      	movs	r2, #2
 800587c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	fa93 f2a3 	rbit	r2, r3
 8005888:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005892:	2202      	movs	r2, #2
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	fa93 f2a3 	rbit	r2, r3
 80058a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80058a4:	601a      	str	r2, [r3, #0]
  return result;
 80058a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80058aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ac:	fab3 f383 	clz	r3, r3
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f043 0302 	orr.w	r3, r3, #2
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d109      	bne.n	80058d4 <HAL_RCC_OscConfig+0x93c>
 80058c0:	4b01      	ldr	r3, [pc, #4]	; (80058c8 <HAL_RCC_OscConfig+0x930>)
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	e014      	b.n	80058f0 <HAL_RCC_OscConfig+0x958>
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000
 80058cc:	10908120 	.word	0x10908120
 80058d0:	40007000 	.word	0x40007000
 80058d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80058d8:	2202      	movs	r2, #2
 80058da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	fa93 f2a3 	rbit	r2, r3
 80058e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	4bbb      	ldr	r3, [pc, #748]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80058f4:	2102      	movs	r1, #2
 80058f6:	6011      	str	r1, [r2, #0]
 80058f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	fa92 f1a2 	rbit	r1, r2
 8005902:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005906:	6011      	str	r1, [r2, #0]
  return result;
 8005908:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	fab2 f282 	clz	r2, r2
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	f002 021f 	and.w	r2, r2, #31
 800591e:	2101      	movs	r1, #1
 8005920:	fa01 f202 	lsl.w	r2, r1, r2
 8005924:	4013      	ands	r3, r2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d099      	beq.n	800585e <HAL_RCC_OscConfig+0x8c6>
 800592a:	e063      	b.n	80059f4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800592c:	f7fe fafe 	bl	8003f2c <HAL_GetTick>
 8005930:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005934:	e00b      	b.n	800594e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005936:	f7fe faf9 	bl	8003f2c <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f241 3288 	movw	r2, #5000	; 0x1388
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e225      	b.n	8005d9a <HAL_RCC_OscConfig+0xe02>
 800594e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005952:	2202      	movs	r2, #2
 8005954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005956:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	fa93 f2a3 	rbit	r2, r3
 8005960:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800596a:	2202      	movs	r2, #2
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	fa93 f2a3 	rbit	r2, r3
 8005978:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800597c:	601a      	str	r2, [r3, #0]
  return result;
 800597e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005982:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005984:	fab3 f383 	clz	r3, r3
 8005988:	b2db      	uxtb	r3, r3
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f043 0302 	orr.w	r3, r3, #2
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d102      	bne.n	800599e <HAL_RCC_OscConfig+0xa06>
 8005998:	4b90      	ldr	r3, [pc, #576]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	e00d      	b.n	80059ba <HAL_RCC_OscConfig+0xa22>
 800599e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80059a2:	2202      	movs	r2, #2
 80059a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	fa93 f2a3 	rbit	r2, r3
 80059b0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	4b89      	ldr	r3, [pc, #548]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80059be:	2102      	movs	r1, #2
 80059c0:	6011      	str	r1, [r2, #0]
 80059c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	fa92 f1a2 	rbit	r1, r2
 80059cc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80059d0:	6011      	str	r1, [r2, #0]
  return result;
 80059d2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	fab2 f282 	clz	r2, r2
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	f002 021f 	and.w	r2, r2, #31
 80059e8:	2101      	movs	r1, #1
 80059ea:	fa01 f202 	lsl.w	r2, r1, r2
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1a0      	bne.n	8005936 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d105      	bne.n	8005a08 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fc:	4b77      	ldr	r3, [pc, #476]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	4a76      	ldr	r2, [pc, #472]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 8005a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a06:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 81c2 	beq.w	8005d98 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a14:	4b71      	ldr	r3, [pc, #452]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f003 030c 	and.w	r3, r3, #12
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	f000 819c 	beq.w	8005d5a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a22:	1d3b      	adds	r3, r7, #4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	f040 8114 	bne.w	8005c56 <HAL_RCC_OscConfig+0xcbe>
 8005a2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005a32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a38:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	fa93 f2a3 	rbit	r2, r3
 8005a42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005a46:	601a      	str	r2, [r3, #0]
  return result;
 8005a48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005a4c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4e:	fab3 f383 	clz	r3, r3
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	461a      	mov	r2, r3
 8005a60:	2300      	movs	r3, #0
 8005a62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a64:	f7fe fa62 	bl	8003f2c <HAL_GetTick>
 8005a68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a6c:	e009      	b.n	8005a82 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fe fa5d 	bl	8003f2c <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e18b      	b.n	8005d9a <HAL_RCC_OscConfig+0xe02>
 8005a82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	fa93 f2a3 	rbit	r2, r3
 8005a96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005a9a:	601a      	str	r2, [r3, #0]
  return result;
 8005a9c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005aa0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aa2:	fab3 f383 	clz	r3, r3
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d102      	bne.n	8005abc <HAL_RCC_OscConfig+0xb24>
 8005ab6:	4b49      	ldr	r3, [pc, #292]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	e01b      	b.n	8005af4 <HAL_RCC_OscConfig+0xb5c>
 8005abc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	fa93 f2a3 	rbit	r2, r3
 8005ad0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	fa93 f2a3 	rbit	r2, r3
 8005aea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	4b3a      	ldr	r3, [pc, #232]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005af8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005afc:	6011      	str	r1, [r2, #0]
 8005afe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	fa92 f1a2 	rbit	r1, r2
 8005b08:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005b0c:	6011      	str	r1, [r2, #0]
  return result;
 8005b0e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	fab2 f282 	clz	r2, r2
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	f042 0220 	orr.w	r2, r2, #32
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	f002 021f 	and.w	r2, r2, #31
 8005b24:	2101      	movs	r1, #1
 8005b26:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d19e      	bne.n	8005a6e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b30:	4b2a      	ldr	r3, [pc, #168]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005b3e:	1d3b      	adds	r3, r7, #4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	430b      	orrs	r3, r1
 8005b46:	4925      	ldr	r1, [pc, #148]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	604b      	str	r3, [r1, #4]
 8005b4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	fa93 f2a3 	rbit	r2, r3
 8005b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005b64:	601a      	str	r2, [r3, #0]
  return result;
 8005b66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005b6a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b6c:	fab3 f383 	clz	r3, r3
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	2301      	movs	r3, #1
 8005b80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b82:	f7fe f9d3 	bl	8003f2c <HAL_GetTick>
 8005b86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b8a:	e009      	b.n	8005ba0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b8c:	f7fe f9ce 	bl	8003f2c <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e0fc      	b.n	8005d9a <HAL_RCC_OscConfig+0xe02>
 8005ba0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ba4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ba8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	fa93 f2a3 	rbit	r2, r3
 8005bb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005bb8:	601a      	str	r2, [r3, #0]
  return result;
 8005bba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005bbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bc0:	fab3 f383 	clz	r3, r3
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCC_OscConfig+0xc48>
 8005bd4:	4b01      	ldr	r3, [pc, #4]	; (8005bdc <HAL_RCC_OscConfig+0xc44>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	e01e      	b.n	8005c18 <HAL_RCC_OscConfig+0xc80>
 8005bda:	bf00      	nop
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	fa93 f2a3 	rbit	r2, r3
 8005bf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	fa93 f2a3 	rbit	r2, r3
 8005c0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	4b63      	ldr	r3, [pc, #396]	; (8005da4 <HAL_RCC_OscConfig+0xe0c>)
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005c1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c20:	6011      	str	r1, [r2, #0]
 8005c22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005c26:	6812      	ldr	r2, [r2, #0]
 8005c28:	fa92 f1a2 	rbit	r1, r2
 8005c2c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005c30:	6011      	str	r1, [r2, #0]
  return result;
 8005c32:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	fab2 f282 	clz	r2, r2
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	f042 0220 	orr.w	r2, r2, #32
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	f002 021f 	and.w	r2, r2, #31
 8005c48:	2101      	movs	r1, #1
 8005c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d09b      	beq.n	8005b8c <HAL_RCC_OscConfig+0xbf4>
 8005c54:	e0a0      	b.n	8005d98 <HAL_RCC_OscConfig+0xe00>
 8005c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	fa93 f2a3 	rbit	r2, r3
 8005c6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c6e:	601a      	str	r2, [r3, #0]
  return result;
 8005c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c76:	fab3 f383 	clz	r3, r3
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	461a      	mov	r2, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8c:	f7fe f94e 	bl	8003f2c <HAL_GetTick>
 8005c90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c94:	e009      	b.n	8005caa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c96:	f7fe f949 	bl	8003f2c <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e077      	b.n	8005d9a <HAL_RCC_OscConfig+0xe02>
 8005caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	fa93 f2a3 	rbit	r2, r3
 8005cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cc2:	601a      	str	r2, [r3, #0]
  return result;
 8005cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cca:	fab3 f383 	clz	r3, r3
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d102      	bne.n	8005ce4 <HAL_RCC_OscConfig+0xd4c>
 8005cde:	4b31      	ldr	r3, [pc, #196]	; (8005da4 <HAL_RCC_OscConfig+0xe0c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	e01b      	b.n	8005d1c <HAL_RCC_OscConfig+0xd84>
 8005ce4:	f107 0320 	add.w	r3, r7, #32
 8005ce8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cee:	f107 0320 	add.w	r3, r7, #32
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	fa93 f2a3 	rbit	r2, r3
 8005cf8:	f107 031c 	add.w	r3, r7, #28
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	f107 0318 	add.w	r3, r7, #24
 8005d02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	f107 0318 	add.w	r3, r7, #24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	fa93 f2a3 	rbit	r2, r3
 8005d12:	f107 0314 	add.w	r3, r7, #20
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	4b22      	ldr	r3, [pc, #136]	; (8005da4 <HAL_RCC_OscConfig+0xe0c>)
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	f107 0210 	add.w	r2, r7, #16
 8005d20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d24:	6011      	str	r1, [r2, #0]
 8005d26:	f107 0210 	add.w	r2, r7, #16
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	fa92 f1a2 	rbit	r1, r2
 8005d30:	f107 020c 	add.w	r2, r7, #12
 8005d34:	6011      	str	r1, [r2, #0]
  return result;
 8005d36:	f107 020c 	add.w	r2, r7, #12
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	fab2 f282 	clz	r2, r2
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	f042 0220 	orr.w	r2, r2, #32
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	f002 021f 	and.w	r2, r2, #31
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005d52:	4013      	ands	r3, r2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d19e      	bne.n	8005c96 <HAL_RCC_OscConfig+0xcfe>
 8005d58:	e01e      	b.n	8005d98 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d5a:	1d3b      	adds	r3, r7, #4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e018      	b.n	8005d9a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d68:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <HAL_RCC_OscConfig+0xe0c>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d70:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005d74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d78:	1d3b      	adds	r3, r7, #4
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d108      	bne.n	8005d94 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005d82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005d86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d8a:	1d3b      	adds	r3, r7, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40021000 	.word	0x40021000

08005da8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b09e      	sub	sp, #120	; 0x78
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e162      	b.n	8006086 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b90      	ldr	r3, [pc, #576]	; (8006004 <HAL_RCC_ClockConfig+0x25c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d910      	bls.n	8005df0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b8d      	ldr	r3, [pc, #564]	; (8006004 <HAL_RCC_ClockConfig+0x25c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 0207 	bic.w	r2, r3, #7
 8005dd6:	498b      	ldr	r1, [pc, #556]	; (8006004 <HAL_RCC_ClockConfig+0x25c>)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dde:	4b89      	ldr	r3, [pc, #548]	; (8006004 <HAL_RCC_ClockConfig+0x25c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d001      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e14a      	b.n	8006086 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dfc:	4b82      	ldr	r3, [pc, #520]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	497f      	ldr	r1, [pc, #508]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80dc 	beq.w	8005fd4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d13c      	bne.n	8005e9e <HAL_RCC_ClockConfig+0xf6>
 8005e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e2c:	fa93 f3a3 	rbit	r3, r3
 8005e30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e34:	fab3 f383 	clz	r3, r3
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f043 0301 	orr.w	r3, r3, #1
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d102      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xa6>
 8005e48:	4b6f      	ldr	r3, [pc, #444]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	e00f      	b.n	8005e6e <HAL_RCC_ClockConfig+0xc6>
 8005e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e56:	fa93 f3a3 	rbit	r3, r3
 8005e5a:	667b      	str	r3, [r7, #100]	; 0x64
 8005e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e60:	663b      	str	r3, [r7, #96]	; 0x60
 8005e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e64:	fa93 f3a3 	rbit	r3, r3
 8005e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e6a:	4b67      	ldr	r3, [pc, #412]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e72:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e76:	fa92 f2a2 	rbit	r2, r2
 8005e7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005e7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e7e:	fab2 f282 	clz	r2, r2
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	f042 0220 	orr.w	r2, r2, #32
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	f002 021f 	and.w	r2, r2, #31
 8005e8e:	2101      	movs	r1, #1
 8005e90:	fa01 f202 	lsl.w	r2, r1, r2
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d17b      	bne.n	8005f92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e0f3      	b.n	8006086 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d13c      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x178>
 8005ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eae:	fa93 f3a3 	rbit	r3, r3
 8005eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb6:	fab3 f383 	clz	r3, r3
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d102      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x128>
 8005eca:	4b4f      	ldr	r3, [pc, #316]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	e00f      	b.n	8005ef0 <HAL_RCC_ClockConfig+0x148>
 8005ed0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ed4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed8:	fa93 f3a3 	rbit	r3, r3
 8005edc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee6:	fa93 f3a3 	rbit	r3, r3
 8005eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eec:	4b46      	ldr	r3, [pc, #280]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ef4:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ef8:	fa92 f2a2 	rbit	r2, r2
 8005efc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f00:	fab2 f282 	clz	r2, r2
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	f042 0220 	orr.w	r2, r2, #32
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	f002 021f 	and.w	r2, r2, #31
 8005f10:	2101      	movs	r1, #1
 8005f12:	fa01 f202 	lsl.w	r2, r1, r2
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d13a      	bne.n	8005f92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e0b2      	b.n	8006086 <HAL_RCC_ClockConfig+0x2de>
 8005f20:	2302      	movs	r3, #2
 8005f22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	fa93 f3a3 	rbit	r3, r3
 8005f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2e:	fab3 f383 	clz	r3, r3
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f043 0301 	orr.w	r3, r3, #1
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d102      	bne.n	8005f48 <HAL_RCC_ClockConfig+0x1a0>
 8005f42:	4b31      	ldr	r3, [pc, #196]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	e00d      	b.n	8005f64 <HAL_RCC_ClockConfig+0x1bc>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	fa93 f3a3 	rbit	r3, r3
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
 8005f54:	2302      	movs	r3, #2
 8005f56:	623b      	str	r3, [r7, #32]
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	fa93 f3a3 	rbit	r3, r3
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	4b29      	ldr	r3, [pc, #164]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	2202      	movs	r2, #2
 8005f66:	61ba      	str	r2, [r7, #24]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	fa92 f2a2 	rbit	r2, r2
 8005f6e:	617a      	str	r2, [r7, #20]
  return result;
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	fab2 f282 	clz	r2, r2
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	f042 0220 	orr.w	r2, r2, #32
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	f002 021f 	and.w	r2, r2, #31
 8005f82:	2101      	movs	r1, #1
 8005f84:	fa01 f202 	lsl.w	r2, r1, r2
 8005f88:	4013      	ands	r3, r2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e079      	b.n	8006086 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f023 0203 	bic.w	r2, r3, #3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	491a      	ldr	r1, [pc, #104]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fa4:	f7fd ffc2 	bl	8003f2c <HAL_GetTick>
 8005fa8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fac:	f7fd ffbe 	bl	8003f2c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e061      	b.n	8006086 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc2:	4b11      	ldr	r3, [pc, #68]	; (8006008 <HAL_RCC_ClockConfig+0x260>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f003 020c 	and.w	r2, r3, #12
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d1eb      	bne.n	8005fac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <HAL_RCC_ClockConfig+0x25c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d214      	bcs.n	800600c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe2:	4b08      	ldr	r3, [pc, #32]	; (8006004 <HAL_RCC_ClockConfig+0x25c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f023 0207 	bic.w	r2, r3, #7
 8005fea:	4906      	ldr	r1, [pc, #24]	; (8006004 <HAL_RCC_ClockConfig+0x25c>)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff2:	4b04      	ldr	r3, [pc, #16]	; (8006004 <HAL_RCC_ClockConfig+0x25c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d005      	beq.n	800600c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e040      	b.n	8006086 <HAL_RCC_ClockConfig+0x2de>
 8006004:	40022000 	.word	0x40022000
 8006008:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006018:	4b1d      	ldr	r3, [pc, #116]	; (8006090 <HAL_RCC_ClockConfig+0x2e8>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	491a      	ldr	r1, [pc, #104]	; (8006090 <HAL_RCC_ClockConfig+0x2e8>)
 8006026:	4313      	orrs	r3, r2
 8006028:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006036:	4b16      	ldr	r3, [pc, #88]	; (8006090 <HAL_RCC_ClockConfig+0x2e8>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4912      	ldr	r1, [pc, #72]	; (8006090 <HAL_RCC_ClockConfig+0x2e8>)
 8006046:	4313      	orrs	r3, r2
 8006048:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800604a:	f000 f829 	bl	80060a0 <HAL_RCC_GetSysClockFreq>
 800604e:	4601      	mov	r1, r0
 8006050:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <HAL_RCC_ClockConfig+0x2e8>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006058:	22f0      	movs	r2, #240	; 0xf0
 800605a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	fa92 f2a2 	rbit	r2, r2
 8006062:	60fa      	str	r2, [r7, #12]
  return result;
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	fab2 f282 	clz	r2, r2
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	40d3      	lsrs	r3, r2
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <HAL_RCC_ClockConfig+0x2ec>)
 8006070:	5cd3      	ldrb	r3, [r2, r3]
 8006072:	fa21 f303 	lsr.w	r3, r1, r3
 8006076:	4a08      	ldr	r2, [pc, #32]	; (8006098 <HAL_RCC_ClockConfig+0x2f0>)
 8006078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <HAL_RCC_ClockConfig+0x2f4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f7fd ff10 	bl	8003ea4 <HAL_InitTick>
  
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3778      	adds	r7, #120	; 0x78
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40021000 	.word	0x40021000
 8006094:	0800cf08 	.word	0x0800cf08
 8006098:	20000164 	.word	0x20000164
 800609c:	20000168 	.word	0x20000168

080060a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b08b      	sub	sp, #44	; 0x2c
 80060a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	2300      	movs	r3, #0
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80060ba:	4b29      	ldr	r3, [pc, #164]	; (8006160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d002      	beq.n	80060d0 <HAL_RCC_GetSysClockFreq+0x30>
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d003      	beq.n	80060d6 <HAL_RCC_GetSysClockFreq+0x36>
 80060ce:	e03c      	b.n	800614a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060d0:	4b24      	ldr	r3, [pc, #144]	; (8006164 <HAL_RCC_GetSysClockFreq+0xc4>)
 80060d2:	623b      	str	r3, [r7, #32]
      break;
 80060d4:	e03c      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80060dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80060e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	fa92 f2a2 	rbit	r2, r2
 80060e8:	607a      	str	r2, [r7, #4]
  return result;
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	fab2 f282 	clz	r2, r2
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	40d3      	lsrs	r3, r2
 80060f4:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <HAL_RCC_GetSysClockFreq+0xc8>)
 80060f6:	5cd3      	ldrb	r3, [r2, r3]
 80060f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80060fa:	4b19      	ldr	r3, [pc, #100]	; (8006160 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	220f      	movs	r2, #15
 8006104:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	fa92 f2a2 	rbit	r2, r2
 800610c:	60fa      	str	r2, [r7, #12]
  return result;
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	fab2 f282 	clz	r2, r2
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	40d3      	lsrs	r3, r2
 8006118:	4a14      	ldr	r2, [pc, #80]	; (800616c <HAL_RCC_GetSysClockFreq+0xcc>)
 800611a:	5cd3      	ldrb	r3, [r2, r3]
 800611c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d008      	beq.n	800613a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006128:	4a0e      	ldr	r2, [pc, #56]	; (8006164 <HAL_RCC_GetSysClockFreq+0xc4>)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	fb02 f303 	mul.w	r3, r2, r3
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
 8006138:	e004      	b.n	8006144 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	4a0c      	ldr	r2, [pc, #48]	; (8006170 <HAL_RCC_GetSysClockFreq+0xd0>)
 800613e:	fb02 f303 	mul.w	r3, r2, r3
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	623b      	str	r3, [r7, #32]
      break;
 8006148:	e002      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <HAL_RCC_GetSysClockFreq+0xd4>)
 800614c:	623b      	str	r3, [r7, #32]
      break;
 800614e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006150:	6a3b      	ldr	r3, [r7, #32]
}
 8006152:	4618      	mov	r0, r3
 8006154:	372c      	adds	r7, #44	; 0x2c
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40021000 	.word	0x40021000
 8006164:	00f42400 	.word	0x00f42400
 8006168:	0800cf18 	.word	0x0800cf18
 800616c:	0800cf28 	.word	0x0800cf28
 8006170:	003d0900 	.word	0x003d0900
 8006174:	007a1200 	.word	0x007a1200

08006178 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b092      	sub	sp, #72	; 0x48
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006188:	2300      	movs	r3, #0
 800618a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80d4 	beq.w	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800619c:	4b4e      	ldr	r3, [pc, #312]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10e      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061a8:	4b4b      	ldr	r3, [pc, #300]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	4a4a      	ldr	r2, [pc, #296]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b2:	61d3      	str	r3, [r2, #28]
 80061b4:	4b48      	ldr	r3, [pc, #288]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c6:	4b45      	ldr	r3, [pc, #276]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d118      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061d2:	4b42      	ldr	r3, [pc, #264]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a41      	ldr	r2, [pc, #260]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061de:	f7fd fea5 	bl	8003f2c <HAL_GetTick>
 80061e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e4:	e008      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061e6:	f7fd fea1 	bl	8003f2c <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b64      	cmp	r3, #100	; 0x64
 80061f2:	d901      	bls.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e12d      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f8:	4b38      	ldr	r3, [pc, #224]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0f0      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006204:	4b34      	ldr	r3, [pc, #208]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800620e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8084 	beq.w	800631e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006220:	429a      	cmp	r2, r3
 8006222:	d07c      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006224:	4b2c      	ldr	r3, [pc, #176]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800622c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800622e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006232:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	fa93 f3a3 	rbit	r3, r3
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800623e:	fab3 f383 	clz	r3, r3
 8006242:	b2db      	uxtb	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	461a      	mov	r2, r3
 800624e:	2301      	movs	r3, #1
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006256:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	fa93 f3a3 	rbit	r3, r3
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006262:	fab3 f383 	clz	r3, r3
 8006266:	b2db      	uxtb	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	461a      	mov	r2, r3
 8006272:	2300      	movs	r3, #0
 8006274:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006276:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800627c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d04b      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006286:	f7fd fe51 	bl	8003f2c <HAL_GetTick>
 800628a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628c:	e00a      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628e:	f7fd fe4d 	bl	8003f2c <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	f241 3288 	movw	r2, #5000	; 0x1388
 800629c:	4293      	cmp	r3, r2
 800629e:	d901      	bls.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e0d7      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80062a4:	2302      	movs	r3, #2
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	fa93 f3a3 	rbit	r3, r3
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
 80062b0:	2302      	movs	r3, #2
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	fa93 f3a3 	rbit	r3, r3
 80062ba:	61fb      	str	r3, [r7, #28]
  return result;
 80062bc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062be:	fab3 f383 	clz	r3, r3
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f043 0302 	orr.w	r3, r3, #2
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d108      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80062d2:	4b01      	ldr	r3, [pc, #4]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	e00d      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80062d8:	40021000 	.word	0x40021000
 80062dc:	40007000 	.word	0x40007000
 80062e0:	10908100 	.word	0x10908100
 80062e4:	2302      	movs	r3, #2
 80062e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	fa93 f3a3 	rbit	r3, r3
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	4b5a      	ldr	r3, [pc, #360]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	2202      	movs	r2, #2
 80062f6:	613a      	str	r2, [r7, #16]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	fa92 f2a2 	rbit	r2, r2
 80062fe:	60fa      	str	r2, [r7, #12]
  return result;
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	fab2 f282 	clz	r2, r2
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800630c:	b2d2      	uxtb	r2, r2
 800630e:	f002 021f 	and.w	r2, r2, #31
 8006312:	2101      	movs	r1, #1
 8006314:	fa01 f202 	lsl.w	r2, r1, r2
 8006318:	4013      	ands	r3, r2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0b7      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800631e:	4b4f      	ldr	r3, [pc, #316]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	494c      	ldr	r1, [pc, #304]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800632c:	4313      	orrs	r3, r2
 800632e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006330:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006334:	2b01      	cmp	r3, #1
 8006336:	d105      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006338:	4b48      	ldr	r3, [pc, #288]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	4a47      	ldr	r2, [pc, #284]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800633e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006342:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006350:	4b42      	ldr	r3, [pc, #264]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	f023 0203 	bic.w	r2, r3, #3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	493f      	ldr	r1, [pc, #252]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800635e:	4313      	orrs	r3, r2
 8006360:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d008      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800636e:	4b3b      	ldr	r3, [pc, #236]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	4938      	ldr	r1, [pc, #224]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800637c:	4313      	orrs	r3, r2
 800637e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800638c:	4b33      	ldr	r3, [pc, #204]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	4930      	ldr	r1, [pc, #192]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800639a:	4313      	orrs	r3, r2
 800639c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d008      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063aa:	4b2c      	ldr	r3, [pc, #176]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	f023 0210 	bic.w	r2, r3, #16
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	4929      	ldr	r1, [pc, #164]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d008      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80063c8:	4b24      	ldr	r3, [pc, #144]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	4921      	ldr	r1, [pc, #132]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063e6:	4b1d      	ldr	r3, [pc, #116]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	f023 0220 	bic.w	r2, r3, #32
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	491a      	ldr	r1, [pc, #104]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006404:	4b15      	ldr	r3, [pc, #84]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	4912      	ldr	r1, [pc, #72]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006412:	4313      	orrs	r3, r2
 8006414:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8006422:	4b0e      	ldr	r3, [pc, #56]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	490b      	ldr	r1, [pc, #44]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006430:	4313      	orrs	r3, r2
 8006432:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006440:	4b06      	ldr	r3, [pc, #24]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	4903      	ldr	r1, [pc, #12]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3748      	adds	r7, #72	; 0x48
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40021000 	.word	0x40021000

08006460 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e073      	b.n	800655a <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fd fa8d 	bl	80039d0 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80064c4:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6819      	ldr	r1, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80064ec:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6859      	ldr	r1, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8006500:	4b18      	ldr	r3, [pc, #96]	; (8006564 <HAL_SDADC_Init+0x104>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	429a      	cmp	r2, r3
 800650e:	d00f      	beq.n	8006530 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8006510:	4b14      	ldr	r3, [pc, #80]	; (8006564 <HAL_SDADC_Init+0x104>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a13      	ldr	r2, [pc, #76]	; (8006564 <HAL_SDADC_Init+0x104>)
 8006516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651a:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 800651c:	4b11      	ldr	r3, [pc, #68]	; (8006564 <HAL_SDADC_Init+0x104>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	490f      	ldr	r1, [pc, #60]	; (8006564 <HAL_SDADC_Init+0x104>)
 8006526:	4313      	orrs	r3, r2
 8006528:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 800652a:	2002      	movs	r0, #2
 800652c:	f7fd fd0a 	bl	8003f44 <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8006540:	bf00      	nop
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f8      	bne.n	8006542 <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40016000 	.word	0x40016000

08006568 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d002      	beq.n	8006588 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	75fb      	strb	r3, [r7, #23]
 8006586:	e025      	b.n	80065d4 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fa59 	bl	8006a40 <SDADC_EnterInitMode>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d006      	beq.n	80065a2 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	22ff      	movs	r2, #255	; 0xff
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	75fb      	strb	r3, [r7, #23]
 80065a0:	e018      	b.n	80065d4 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80065ac:	4413      	add	r3, r2
 80065ae:	3320      	adds	r3, #32
 80065b0:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80065ba:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 80065c0:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80065c8:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 80065ca:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80065cc:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fa59 	bl	8006a86 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d002      	beq.n	8006600 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
 80065fe:	e037      	b.n	8006670 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 fa1d 	bl	8006a40 <SDADC_EnterInitMode>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d006      	beq.n	800661a <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	22ff      	movs	r2, #255	; 0xff
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	75fb      	strb	r3, [r7, #23]
 8006618:	e02a      	b.n	8006670 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4a17      	ldr	r2, [pc, #92]	; (800667c <HAL_SDADC_AssociateChannelConfig+0x9c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d01f      	beq.n	8006662 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2203      	movs	r2, #3
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	43da      	mvns	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	400a      	ands	r2, r1
 8006644:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	409a      	lsls	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
 8006660:	e003      	b.n	800666a <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	645a      	str	r2, [r3, #68]	; 0x44
      }      
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fa0b 	bl	8006a86 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	00080100 	.word	0x00080100

08006680 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d02a      	beq.n	80066f0 <HAL_SDADC_ConfigChannel+0x70>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a0:	2bff      	cmp	r3, #255	; 0xff
 80066a2:	d025      	beq.n	80066f0 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 80066b2:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d10c      	bne.n	80066d4 <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);    
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	4b10      	ldr	r3, [pc, #64]	; (8006704 <HAL_SDADC_ConfigChannel+0x84>)
 80066c4:	400b      	ands	r3, r1
 80066c6:	431a      	orrs	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80066d0:	605a      	str	r2, [r3, #4]
 80066d2:	e009      	b.n	80066e8 <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));    
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6859      	ldr	r1, [r3, #4]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	041b      	lsls	r3, r3, #16
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	619a      	str	r2, [r3, #24]
 80066ee:	e001      	b.n	80066f4 <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80066f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	ffbf0000 	.word	0xffbf0000

08006708 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671c:	2b01      	cmp	r3, #1
 800671e:	d12c      	bne.n	800677a <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f98d 	bl	8006a40 <SDADC_EnterInitMode>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d006      	beq.n	800673a <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	22ff      	movs	r2, #255	; 0xff
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	73fb      	strb	r3, [r7, #15]
 8006738:	e021      	b.n	800677e <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0206 	bic.w	r2, r2, #6
 8006748:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6859      	ldr	r1, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f993 	bl	8006a86 <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0210 	orr.w	r2, r2, #16
 800676e:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006778:	e001      	b.n	800677e <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006798:	2b02      	cmp	r3, #2
 800679a:	d001      	beq.n	80067a0 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e028      	b.n	80067f2 <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 80067a0:	f7fd fbc4 	bl	8003f2c <HAL_GetTick>
 80067a4:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 80067a6:	e010      	b.n	80067ca <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d00c      	beq.n	80067ca <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 80067b0:	f7fd fbbc 	bl	8003f2c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d302      	bcc.n	80067c6 <HAL_SDADC_PollForCalibEvent+0x3e>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e013      	b.n	80067f2 <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d1e7      	bne.n	80067a8 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 80067f0:	2300      	movs	r3, #0
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_SDADC_Start_IT>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start_IT(SDADC_HandleTypeDef *hsdadc)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d004      	beq.n	8006816 <HAL_SDADC_Start_IT+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006812:	2b04      	cmp	r3, #4
 8006814:	d10d      	bne.n	8006832 <HAL_SDADC_Start_IT+0x38>
  {
    /* Set REOCIE and ROVRIE bits in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= (uint32_t) (SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f042 0218 	orr.w	r2, r2, #24
 8006824:	601a      	str	r2, [r3, #0]

    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f93f 	bl	8006aaa <SDADC_RegConvStart>
 800682c:	4603      	mov	r3, r0
 800682e:	73fb      	strb	r3, [r7, #15]
 8006830:	e001      	b.n	8006836 <HAL_SDADC_Start_IT+0x3c>
  }
  else
  {
    status = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006836:	7bfb      	ldrb	r3, [r7, #15]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <HAL_SDADC_IRQHandler>:
  * @brief  This function handles the SDADC interrupts.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
void HAL_SDADC_IRQHandler(SDADC_HandleTypeDef* hsdadc)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	60fb      	str	r3, [r7, #12]
    
  /* Check if end of regular conversion */
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b08      	cmp	r3, #8
 8006876:	d125      	bne.n	80068c4 <HAL_SDADC_IRQHandler+0x6a>
     ((tmp_isr & SDADC_ISR_REOCF) == SDADC_ISR_REOCF))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f003 0308 	and.w	r3, r3, #8
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 800687e:	2b00      	cmp	r3, #0
 8006880:	d020      	beq.n	80068c4 <HAL_SDADC_IRQHandler+0x6a>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ConvCpltCallback(hsdadc);
#else
    HAL_SDADC_ConvCpltCallback(hsdadc);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fb f992 	bl	8001bac <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* End of conversion if mode is not continuous and software trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f040 80b1 	bne.w	80069f4 <HAL_SDADC_IRQHandler+0x19a>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 80ac 	bne.w	80069f4 <HAL_SDADC_IRQHandler+0x19a>
    {
      /* Clear REOCIE and ROVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0218 	bic.w	r2, r2, #24
 80068aa:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d101      	bne.n	80068ba <HAL_SDADC_IRQHandler+0x60>
 80068b6:	2201      	movs	r2, #1
 80068b8:	e000      	b.n	80068bc <HAL_SDADC_IRQHandler+0x62>
 80068ba:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80068c2:	e097      	b.n	80069f4 <HAL_SDADC_IRQHandler+0x19a>
    }
  }
  /* Check if end of injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d136      	bne.n	8006940 <HAL_SDADC_IRQHandler+0xe6>
          ((tmp_isr & SDADC_ISR_JEOCF) == SDADC_ISR_JEOCF))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f003 0302 	and.w	r3, r3, #2
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d031      	beq.n	8006940 <HAL_SDADC_IRQHandler+0xe6>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->InjectedConvCpltCallback(hsdadc);
#else
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f89b 	bl	8006a18 <HAL_SDADC_InjectedConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	1e5a      	subs	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d103      	bne.n	80068fc <HAL_SDADC_IRQHandler+0xa2>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* End of conversion if mode is not continuous, software trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d179      	bne.n	80069f8 <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006908:	2b00      	cmp	r3, #0
 800690a:	d175      	bne.n	80069f8 <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8006914:	429a      	cmp	r2, r3
 8006916:	d16f      	bne.n	80069f8 <HAL_SDADC_IRQHandler+0x19e>
    {
      /* Clear JEOCIE and JOVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0206 	bic.w	r2, r2, #6
 8006926:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 800692e:	2b04      	cmp	r3, #4
 8006930:	d101      	bne.n	8006936 <HAL_SDADC_IRQHandler+0xdc>
 8006932:	2201      	movs	r2, #1
 8006934:	e000      	b.n	8006938 <HAL_SDADC_IRQHandler+0xde>
 8006936:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800693e:	e05b      	b.n	80069f8 <HAL_SDADC_IRQHandler+0x19e>
    }
  }
  /* Check if end of calibration */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b01      	cmp	r3, #1
 800694c:	d11c      	bne.n	8006988 <HAL_SDADC_IRQHandler+0x12e>
          ((tmp_isr & SDADC_ISR_EOCALF) == SDADC_ISR_EOCALF))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f003 0301 	and.w	r3, r3, #1
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 8006954:	2b00      	cmp	r3, #0
 8006956:	d017      	beq.n	8006988 <HAL_SDADC_IRQHandler+0x12e>
  {
    /* Clear EOCALIE bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	60da      	str	r2, [r3, #12]

    /* Call calibration callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->CalibrationCpltCallback(hsdadc);
#else
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f843 	bl	8006a04 <HAL_SDADC_CalibrationCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update SDADC state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006986:	e038      	b.n	80069fa <HAL_SDADC_IRQHandler+0x1a0>
  }
  /* Check if overrun occurs during regular conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b10      	cmp	r3, #16
 8006994:	d113      	bne.n	80069be <HAL_SDADC_IRQHandler+0x164>
          ((tmp_isr & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f003 0310 	and.w	r3, r3, #16
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00e      	beq.n	80069be <HAL_SDADC_IRQHandler+0x164>
  {
    /* Set CLRROVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0210 	orr.w	r2, r2, #16
 80069ae:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f838 	bl	8006a2c <HAL_SDADC_ErrorCallback>
 80069bc:	e01d      	b.n	80069fa <HAL_SDADC_IRQHandler+0x1a0>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  }
  /* Check if overrun occurs during injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d117      	bne.n	80069fc <HAL_SDADC_IRQHandler+0x1a2>
          ((tmp_isr & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f003 0304 	and.w	r3, r3, #4
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d012      	beq.n	80069fc <HAL_SDADC_IRQHandler+0x1a2>
  {
    /* Set CLRJOVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0204 	orr.w	r2, r2, #4
 80069e4:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f81d 	bl	8006a2c <HAL_SDADC_ErrorCallback>
  else
  {
    /* No additional IRQ source */
  }
  
  return;
 80069f2:	e002      	b.n	80069fa <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80069f4:	bf00      	nop
 80069f6:	e000      	b.n	80069fa <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80069f8:	bf00      	nop
  return;
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
}
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <HAL_SDADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_CalibrationCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_CalibrationCpltCallback could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_SDADC_InjectedConvCpltCallback>:
            using HAL_SDADC_InjectedGetValue or HAL_SDADC_InjectedMultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_InjectedConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_InjectedConvCpltCallback could be implemented in the user file.
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a56:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8006a58:	f7fd fa68 	bl	8003f2c <HAL_GetTick>
 8006a5c:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8006a5e:	e008      	b.n	8006a72 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8006a60:	f7fd fa64 	bl	8003f2c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2bc8      	cmp	r3, #200	; 0xc8
 8006a6c:	d901      	bls.n	8006a72 <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e005      	b.n	8006a7e <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	daf1      	bge.n	8006a60 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a9c:	601a      	str	r2, [r3, #0]
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d108      	bne.n	8006ad0 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006acc:	605a      	str	r2, [r3, #4]
 8006ace:	e017      	b.n	8006b00 <SDADC_RegConvStart+0x56>
  }
  else /* synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff ffb5 	bl	8006a40 <SDADC_EnterInitMode>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d006      	beq.n	8006aea <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	22ff      	movs	r2, #255	; 0xff
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	73fb      	strb	r3, [r7, #15]
 8006ae8:	e00a      	b.n	8006b00 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006af8:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff ffc3 	bl	8006a86 <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <SDADC_RegConvStart+0x6a>
 8006b10:	2203      	movs	r2, #3
 8006b12:	e000      	b.n	8006b16 <SDADC_RegConvStart+0x6c>
 8006b14:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e041      	b.n	8006bbc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d106      	bne.n	8006b52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7fc fff3 	bl	8003b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f000 fae9 	bl	800713c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d001      	beq.n	8006bdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e041      	b.n	8006c60 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bec:	d01d      	beq.n	8006c2a <HAL_TIM_Base_Start+0x66>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a1e      	ldr	r2, [pc, #120]	; (8006c6c <HAL_TIM_Base_Start+0xa8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d018      	beq.n	8006c2a <HAL_TIM_Base_Start+0x66>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1c      	ldr	r2, [pc, #112]	; (8006c70 <HAL_TIM_Base_Start+0xac>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <HAL_TIM_Base_Start+0x66>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a1b      	ldr	r2, [pc, #108]	; (8006c74 <HAL_TIM_Base_Start+0xb0>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00e      	beq.n	8006c2a <HAL_TIM_Base_Start+0x66>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a19      	ldr	r2, [pc, #100]	; (8006c78 <HAL_TIM_Base_Start+0xb4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d009      	beq.n	8006c2a <HAL_TIM_Base_Start+0x66>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a18      	ldr	r2, [pc, #96]	; (8006c7c <HAL_TIM_Base_Start+0xb8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d004      	beq.n	8006c2a <HAL_TIM_Base_Start+0x66>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a16      	ldr	r2, [pc, #88]	; (8006c80 <HAL_TIM_Base_Start+0xbc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d111      	bne.n	8006c4e <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b06      	cmp	r3, #6
 8006c3a:	d010      	beq.n	8006c5e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4c:	e007      	b.n	8006c5e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0201 	orr.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800
 8006c74:	40000c00 	.word	0x40000c00
 8006c78:	40001800 	.word	0x40001800
 8006c7c:	40014000 	.word	0x40014000
 8006c80:	40015c00 	.word	0x40015c00

08006c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d001      	beq.n	8006c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e049      	b.n	8006d30 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0201 	orr.w	r2, r2, #1
 8006cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cbc:	d01d      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a1e      	ldr	r2, [pc, #120]	; (8006d3c <HAL_TIM_Base_Start_IT+0xb8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d018      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1c      	ldr	r2, [pc, #112]	; (8006d40 <HAL_TIM_Base_Start_IT+0xbc>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1b      	ldr	r2, [pc, #108]	; (8006d44 <HAL_TIM_Base_Start_IT+0xc0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00e      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a19      	ldr	r2, [pc, #100]	; (8006d48 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d009      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_TIM_Base_Start_IT+0xc8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d004      	beq.n	8006cfa <HAL_TIM_Base_Start_IT+0x76>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a16      	ldr	r2, [pc, #88]	; (8006d50 <HAL_TIM_Base_Start_IT+0xcc>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d111      	bne.n	8006d1e <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f003 0307 	and.w	r3, r3, #7
 8006d04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b06      	cmp	r3, #6
 8006d0a:	d010      	beq.n	8006d2e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0201 	orr.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1c:	e007      	b.n	8006d2e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 0201 	orr.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40001800 	.word	0x40001800
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40015c00 	.word	0x40015c00

08006d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d122      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d11b      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f06f 0202 	mvn.w	r2, #2
 8006d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f9b2 	bl	8007100 <HAL_TIM_IC_CaptureCallback>
 8006d9c:	e005      	b.n	8006daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9a4 	bl	80070ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f9b5 	bl	8007114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d122      	bne.n	8006e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d11b      	bne.n	8006e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0204 	mvn.w	r2, #4
 8006dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f988 	bl	8007100 <HAL_TIM_IC_CaptureCallback>
 8006df0:	e005      	b.n	8006dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f97a 	bl	80070ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f98b 	bl	8007114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d122      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d11b      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f06f 0208 	mvn.w	r2, #8
 8006e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f95e 	bl	8007100 <HAL_TIM_IC_CaptureCallback>
 8006e44:	e005      	b.n	8006e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f950 	bl	80070ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f961 	bl	8007114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d122      	bne.n	8006eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	2b10      	cmp	r3, #16
 8006e72:	d11b      	bne.n	8006eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0210 	mvn.w	r2, #16
 8006e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2208      	movs	r2, #8
 8006e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f934 	bl	8007100 <HAL_TIM_IC_CaptureCallback>
 8006e98:	e005      	b.n	8006ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f926 	bl	80070ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f937 	bl	8007114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d10e      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d107      	bne.n	8006ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0201 	mvn.w	r2, #1
 8006ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fa ff8a 	bl	8001dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	d10e      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d107      	bne.n	8006f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 face 	bl	80074a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d10e      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1c:	2b40      	cmp	r3, #64	; 0x40
 8006f1e:	d107      	bne.n	8006f30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f8fc 	bl	8007128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d10e      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0320 	and.w	r3, r3, #32
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d107      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0220 	mvn.w	r2, #32
 8006f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa98 	bl	800748c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIM_ConfigClockSource+0x18>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e0b3      	b.n	80070e4 <HAL_TIM_ConfigClockSource+0x180>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb4:	d03e      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0xd0>
 8006fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fba:	f200 8087 	bhi.w	80070cc <HAL_TIM_ConfigClockSource+0x168>
 8006fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc2:	f000 8085 	beq.w	80070d0 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fca:	d87f      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x168>
 8006fcc:	2b70      	cmp	r3, #112	; 0x70
 8006fce:	d01a      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0xa2>
 8006fd0:	2b70      	cmp	r3, #112	; 0x70
 8006fd2:	d87b      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x168>
 8006fd4:	2b60      	cmp	r3, #96	; 0x60
 8006fd6:	d050      	beq.n	800707a <HAL_TIM_ConfigClockSource+0x116>
 8006fd8:	2b60      	cmp	r3, #96	; 0x60
 8006fda:	d877      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x168>
 8006fdc:	2b50      	cmp	r3, #80	; 0x50
 8006fde:	d03c      	beq.n	800705a <HAL_TIM_ConfigClockSource+0xf6>
 8006fe0:	2b50      	cmp	r3, #80	; 0x50
 8006fe2:	d873      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x168>
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d058      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x136>
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d86f      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x168>
 8006fec:	2b30      	cmp	r3, #48	; 0x30
 8006fee:	d064      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x156>
 8006ff0:	2b30      	cmp	r3, #48	; 0x30
 8006ff2:	d86b      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x168>
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d060      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x156>
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d867      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x168>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d05c      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x156>
 8007000:	2b10      	cmp	r3, #16
 8007002:	d05a      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007004:	e062      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6899      	ldr	r1, [r3, #8]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f000 f9a5 	bl	8007364 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007028:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	609a      	str	r2, [r3, #8]
      break;
 8007032:	e04e      	b.n	80070d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6899      	ldr	r1, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f000 f98e 	bl	8007364 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007056:	609a      	str	r2, [r3, #8]
      break;
 8007058:	e03b      	b.n	80070d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6859      	ldr	r1, [r3, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	461a      	mov	r2, r3
 8007068:	f000 f902 	bl	8007270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2150      	movs	r1, #80	; 0x50
 8007072:	4618      	mov	r0, r3
 8007074:	f000 f95b 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8007078:	e02b      	b.n	80070d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6859      	ldr	r1, [r3, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	461a      	mov	r2, r3
 8007088:	f000 f921 	bl	80072ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2160      	movs	r1, #96	; 0x60
 8007092:	4618      	mov	r0, r3
 8007094:	f000 f94b 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8007098:	e01b      	b.n	80070d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f000 f8e2 	bl	8007270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2140      	movs	r1, #64	; 0x40
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 f93b 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 80070b8:	e00b      	b.n	80070d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4619      	mov	r1, r3
 80070c4:	4610      	mov	r0, r2
 80070c6:	f000 f932 	bl	800732e <TIM_ITRx_SetConfig>
        break;
 80070ca:	e002      	b.n	80070d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80070cc:	bf00      	nop
 80070ce:	e000      	b.n	80070d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80070d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007152:	d00f      	beq.n	8007174 <TIM_Base_SetConfig+0x38>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a3c      	ldr	r2, [pc, #240]	; (8007248 <TIM_Base_SetConfig+0x10c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00b      	beq.n	8007174 <TIM_Base_SetConfig+0x38>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a3b      	ldr	r2, [pc, #236]	; (800724c <TIM_Base_SetConfig+0x110>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d007      	beq.n	8007174 <TIM_Base_SetConfig+0x38>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a3a      	ldr	r2, [pc, #232]	; (8007250 <TIM_Base_SetConfig+0x114>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_Base_SetConfig+0x38>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a39      	ldr	r2, [pc, #228]	; (8007254 <TIM_Base_SetConfig+0x118>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d108      	bne.n	8007186 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718c:	d027      	beq.n	80071de <TIM_Base_SetConfig+0xa2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2d      	ldr	r2, [pc, #180]	; (8007248 <TIM_Base_SetConfig+0x10c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d023      	beq.n	80071de <TIM_Base_SetConfig+0xa2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2c      	ldr	r2, [pc, #176]	; (800724c <TIM_Base_SetConfig+0x110>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d01f      	beq.n	80071de <TIM_Base_SetConfig+0xa2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2b      	ldr	r2, [pc, #172]	; (8007250 <TIM_Base_SetConfig+0x114>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d01b      	beq.n	80071de <TIM_Base_SetConfig+0xa2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2b      	ldr	r2, [pc, #172]	; (8007258 <TIM_Base_SetConfig+0x11c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d017      	beq.n	80071de <TIM_Base_SetConfig+0xa2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2a      	ldr	r2, [pc, #168]	; (800725c <TIM_Base_SetConfig+0x120>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <TIM_Base_SetConfig+0xa2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a29      	ldr	r2, [pc, #164]	; (8007260 <TIM_Base_SetConfig+0x124>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00f      	beq.n	80071de <TIM_Base_SetConfig+0xa2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a28      	ldr	r2, [pc, #160]	; (8007264 <TIM_Base_SetConfig+0x128>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d00b      	beq.n	80071de <TIM_Base_SetConfig+0xa2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a27      	ldr	r2, [pc, #156]	; (8007268 <TIM_Base_SetConfig+0x12c>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d007      	beq.n	80071de <TIM_Base_SetConfig+0xa2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a26      	ldr	r2, [pc, #152]	; (800726c <TIM_Base_SetConfig+0x130>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d003      	beq.n	80071de <TIM_Base_SetConfig+0xa2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a1e      	ldr	r2, [pc, #120]	; (8007254 <TIM_Base_SetConfig+0x118>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d108      	bne.n	80071f0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a13      	ldr	r2, [pc, #76]	; (8007264 <TIM_Base_SetConfig+0x128>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d007      	beq.n	800722c <TIM_Base_SetConfig+0xf0>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a12      	ldr	r2, [pc, #72]	; (8007268 <TIM_Base_SetConfig+0x12c>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_Base_SetConfig+0xf0>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a11      	ldr	r2, [pc, #68]	; (800726c <TIM_Base_SetConfig+0x130>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d103      	bne.n	8007234 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	615a      	str	r2, [r3, #20]
}
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40000400 	.word	0x40000400
 800724c:	40000800 	.word	0x40000800
 8007250:	40000c00 	.word	0x40000c00
 8007254:	40015c00 	.word	0x40015c00
 8007258:	40001800 	.word	0x40001800
 800725c:	40001c00 	.word	0x40001c00
 8007260:	40002000 	.word	0x40002000
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800

08007270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0201 	bic.w	r2, r3, #1
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800729a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f023 030a 	bic.w	r3, r3, #10
 80072ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	621a      	str	r2, [r3, #32]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b087      	sub	sp, #28
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f023 0210 	bic.w	r2, r3, #16
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	031b      	lsls	r3, r3, #12
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800730a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4313      	orrs	r3, r2
 8007314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	f043 0307 	orr.w	r3, r3, #7
 8007350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800737e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	021a      	lsls	r2, r3, #8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	431a      	orrs	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4313      	orrs	r3, r2
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e055      	b.n	8007468 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fe:	d01d      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1b      	ldr	r2, [pc, #108]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d018      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1a      	ldr	r2, [pc, #104]	; (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d013      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a18      	ldr	r2, [pc, #96]	; (800747c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00e      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a17      	ldr	r2, [pc, #92]	; (8007480 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d009      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a15      	ldr	r2, [pc, #84]	; (8007484 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a14      	ldr	r2, [pc, #80]	; (8007488 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10c      	bne.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	40000400 	.word	0x40000400
 8007478:	40000800 	.word	0x40000800
 800747c:	40000c00 	.word	0x40000c00
 8007480:	40001800 	.word	0x40001800
 8007484:	40014000 	.word	0x40014000
 8007488:	40015c00 	.word	0x40015c00

0800748c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <__errno>:
 80074b4:	4b01      	ldr	r3, [pc, #4]	; (80074bc <__errno+0x8>)
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	20000170 	.word	0x20000170

080074c0 <__libc_init_array>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	4d0d      	ldr	r5, [pc, #52]	; (80074f8 <__libc_init_array+0x38>)
 80074c4:	4c0d      	ldr	r4, [pc, #52]	; (80074fc <__libc_init_array+0x3c>)
 80074c6:	1b64      	subs	r4, r4, r5
 80074c8:	10a4      	asrs	r4, r4, #2
 80074ca:	2600      	movs	r6, #0
 80074cc:	42a6      	cmp	r6, r4
 80074ce:	d109      	bne.n	80074e4 <__libc_init_array+0x24>
 80074d0:	4d0b      	ldr	r5, [pc, #44]	; (8007500 <__libc_init_array+0x40>)
 80074d2:	4c0c      	ldr	r4, [pc, #48]	; (8007504 <__libc_init_array+0x44>)
 80074d4:	f005 fc4a 	bl	800cd6c <_init>
 80074d8:	1b64      	subs	r4, r4, r5
 80074da:	10a4      	asrs	r4, r4, #2
 80074dc:	2600      	movs	r6, #0
 80074de:	42a6      	cmp	r6, r4
 80074e0:	d105      	bne.n	80074ee <__libc_init_array+0x2e>
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e8:	4798      	blx	r3
 80074ea:	3601      	adds	r6, #1
 80074ec:	e7ee      	b.n	80074cc <__libc_init_array+0xc>
 80074ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f2:	4798      	blx	r3
 80074f4:	3601      	adds	r6, #1
 80074f6:	e7f2      	b.n	80074de <__libc_init_array+0x1e>
 80074f8:	0800d430 	.word	0x0800d430
 80074fc:	0800d430 	.word	0x0800d430
 8007500:	0800d430 	.word	0x0800d430
 8007504:	0800d434 	.word	0x0800d434

08007508 <memset>:
 8007508:	4402      	add	r2, r0
 800750a:	4603      	mov	r3, r0
 800750c:	4293      	cmp	r3, r2
 800750e:	d100      	bne.n	8007512 <memset+0xa>
 8007510:	4770      	bx	lr
 8007512:	f803 1b01 	strb.w	r1, [r3], #1
 8007516:	e7f9      	b.n	800750c <memset+0x4>

08007518 <__cvt>:
 8007518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800751c:	ec55 4b10 	vmov	r4, r5, d0
 8007520:	2d00      	cmp	r5, #0
 8007522:	460e      	mov	r6, r1
 8007524:	4619      	mov	r1, r3
 8007526:	462b      	mov	r3, r5
 8007528:	bfbb      	ittet	lt
 800752a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800752e:	461d      	movlt	r5, r3
 8007530:	2300      	movge	r3, #0
 8007532:	232d      	movlt	r3, #45	; 0x2d
 8007534:	700b      	strb	r3, [r1, #0]
 8007536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007538:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800753c:	4691      	mov	r9, r2
 800753e:	f023 0820 	bic.w	r8, r3, #32
 8007542:	bfbc      	itt	lt
 8007544:	4622      	movlt	r2, r4
 8007546:	4614      	movlt	r4, r2
 8007548:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800754c:	d005      	beq.n	800755a <__cvt+0x42>
 800754e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007552:	d100      	bne.n	8007556 <__cvt+0x3e>
 8007554:	3601      	adds	r6, #1
 8007556:	2102      	movs	r1, #2
 8007558:	e000      	b.n	800755c <__cvt+0x44>
 800755a:	2103      	movs	r1, #3
 800755c:	ab03      	add	r3, sp, #12
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	ab02      	add	r3, sp, #8
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	ec45 4b10 	vmov	d0, r4, r5
 8007568:	4653      	mov	r3, sl
 800756a:	4632      	mov	r2, r6
 800756c:	f001 fe10 	bl	8009190 <_dtoa_r>
 8007570:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007574:	4607      	mov	r7, r0
 8007576:	d102      	bne.n	800757e <__cvt+0x66>
 8007578:	f019 0f01 	tst.w	r9, #1
 800757c:	d022      	beq.n	80075c4 <__cvt+0xac>
 800757e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007582:	eb07 0906 	add.w	r9, r7, r6
 8007586:	d110      	bne.n	80075aa <__cvt+0x92>
 8007588:	783b      	ldrb	r3, [r7, #0]
 800758a:	2b30      	cmp	r3, #48	; 0x30
 800758c:	d10a      	bne.n	80075a4 <__cvt+0x8c>
 800758e:	2200      	movs	r2, #0
 8007590:	2300      	movs	r3, #0
 8007592:	4620      	mov	r0, r4
 8007594:	4629      	mov	r1, r5
 8007596:	f7f9 fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 800759a:	b918      	cbnz	r0, 80075a4 <__cvt+0x8c>
 800759c:	f1c6 0601 	rsb	r6, r6, #1
 80075a0:	f8ca 6000 	str.w	r6, [sl]
 80075a4:	f8da 3000 	ldr.w	r3, [sl]
 80075a8:	4499      	add	r9, r3
 80075aa:	2200      	movs	r2, #0
 80075ac:	2300      	movs	r3, #0
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f9 fa89 	bl	8000ac8 <__aeabi_dcmpeq>
 80075b6:	b108      	cbz	r0, 80075bc <__cvt+0xa4>
 80075b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80075bc:	2230      	movs	r2, #48	; 0x30
 80075be:	9b03      	ldr	r3, [sp, #12]
 80075c0:	454b      	cmp	r3, r9
 80075c2:	d307      	bcc.n	80075d4 <__cvt+0xbc>
 80075c4:	9b03      	ldr	r3, [sp, #12]
 80075c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075c8:	1bdb      	subs	r3, r3, r7
 80075ca:	4638      	mov	r0, r7
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	b004      	add	sp, #16
 80075d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d4:	1c59      	adds	r1, r3, #1
 80075d6:	9103      	str	r1, [sp, #12]
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	e7f0      	b.n	80075be <__cvt+0xa6>

080075dc <__exponent>:
 80075dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075de:	4603      	mov	r3, r0
 80075e0:	2900      	cmp	r1, #0
 80075e2:	bfb8      	it	lt
 80075e4:	4249      	neglt	r1, r1
 80075e6:	f803 2b02 	strb.w	r2, [r3], #2
 80075ea:	bfb4      	ite	lt
 80075ec:	222d      	movlt	r2, #45	; 0x2d
 80075ee:	222b      	movge	r2, #43	; 0x2b
 80075f0:	2909      	cmp	r1, #9
 80075f2:	7042      	strb	r2, [r0, #1]
 80075f4:	dd2a      	ble.n	800764c <__exponent+0x70>
 80075f6:	f10d 0407 	add.w	r4, sp, #7
 80075fa:	46a4      	mov	ip, r4
 80075fc:	270a      	movs	r7, #10
 80075fe:	46a6      	mov	lr, r4
 8007600:	460a      	mov	r2, r1
 8007602:	fb91 f6f7 	sdiv	r6, r1, r7
 8007606:	fb07 1516 	mls	r5, r7, r6, r1
 800760a:	3530      	adds	r5, #48	; 0x30
 800760c:	2a63      	cmp	r2, #99	; 0x63
 800760e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007612:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007616:	4631      	mov	r1, r6
 8007618:	dcf1      	bgt.n	80075fe <__exponent+0x22>
 800761a:	3130      	adds	r1, #48	; 0x30
 800761c:	f1ae 0502 	sub.w	r5, lr, #2
 8007620:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007624:	1c44      	adds	r4, r0, #1
 8007626:	4629      	mov	r1, r5
 8007628:	4561      	cmp	r1, ip
 800762a:	d30a      	bcc.n	8007642 <__exponent+0x66>
 800762c:	f10d 0209 	add.w	r2, sp, #9
 8007630:	eba2 020e 	sub.w	r2, r2, lr
 8007634:	4565      	cmp	r5, ip
 8007636:	bf88      	it	hi
 8007638:	2200      	movhi	r2, #0
 800763a:	4413      	add	r3, r2
 800763c:	1a18      	subs	r0, r3, r0
 800763e:	b003      	add	sp, #12
 8007640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007646:	f804 2f01 	strb.w	r2, [r4, #1]!
 800764a:	e7ed      	b.n	8007628 <__exponent+0x4c>
 800764c:	2330      	movs	r3, #48	; 0x30
 800764e:	3130      	adds	r1, #48	; 0x30
 8007650:	7083      	strb	r3, [r0, #2]
 8007652:	70c1      	strb	r1, [r0, #3]
 8007654:	1d03      	adds	r3, r0, #4
 8007656:	e7f1      	b.n	800763c <__exponent+0x60>

08007658 <_printf_float>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	ed2d 8b02 	vpush	{d8}
 8007660:	b08d      	sub	sp, #52	; 0x34
 8007662:	460c      	mov	r4, r1
 8007664:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007668:	4616      	mov	r6, r2
 800766a:	461f      	mov	r7, r3
 800766c:	4605      	mov	r5, r0
 800766e:	f002 feeb 	bl	800a448 <_localeconv_r>
 8007672:	f8d0 a000 	ldr.w	sl, [r0]
 8007676:	4650      	mov	r0, sl
 8007678:	f7f8 fdaa 	bl	80001d0 <strlen>
 800767c:	2300      	movs	r3, #0
 800767e:	930a      	str	r3, [sp, #40]	; 0x28
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	9305      	str	r3, [sp, #20]
 8007684:	f8d8 3000 	ldr.w	r3, [r8]
 8007688:	f894 b018 	ldrb.w	fp, [r4, #24]
 800768c:	3307      	adds	r3, #7
 800768e:	f023 0307 	bic.w	r3, r3, #7
 8007692:	f103 0208 	add.w	r2, r3, #8
 8007696:	f8c8 2000 	str.w	r2, [r8]
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80076a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076aa:	9307      	str	r3, [sp, #28]
 80076ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80076b0:	ee08 0a10 	vmov	s16, r0
 80076b4:	4b9f      	ldr	r3, [pc, #636]	; (8007934 <_printf_float+0x2dc>)
 80076b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076ba:	f04f 32ff 	mov.w	r2, #4294967295
 80076be:	f7f9 fa35 	bl	8000b2c <__aeabi_dcmpun>
 80076c2:	bb88      	cbnz	r0, 8007728 <_printf_float+0xd0>
 80076c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076c8:	4b9a      	ldr	r3, [pc, #616]	; (8007934 <_printf_float+0x2dc>)
 80076ca:	f04f 32ff 	mov.w	r2, #4294967295
 80076ce:	f7f9 fa0f 	bl	8000af0 <__aeabi_dcmple>
 80076d2:	bb48      	cbnz	r0, 8007728 <_printf_float+0xd0>
 80076d4:	2200      	movs	r2, #0
 80076d6:	2300      	movs	r3, #0
 80076d8:	4640      	mov	r0, r8
 80076da:	4649      	mov	r1, r9
 80076dc:	f7f9 f9fe 	bl	8000adc <__aeabi_dcmplt>
 80076e0:	b110      	cbz	r0, 80076e8 <_printf_float+0x90>
 80076e2:	232d      	movs	r3, #45	; 0x2d
 80076e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e8:	4b93      	ldr	r3, [pc, #588]	; (8007938 <_printf_float+0x2e0>)
 80076ea:	4894      	ldr	r0, [pc, #592]	; (800793c <_printf_float+0x2e4>)
 80076ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80076f0:	bf94      	ite	ls
 80076f2:	4698      	movls	r8, r3
 80076f4:	4680      	movhi	r8, r0
 80076f6:	2303      	movs	r3, #3
 80076f8:	6123      	str	r3, [r4, #16]
 80076fa:	9b05      	ldr	r3, [sp, #20]
 80076fc:	f023 0204 	bic.w	r2, r3, #4
 8007700:	6022      	str	r2, [r4, #0]
 8007702:	f04f 0900 	mov.w	r9, #0
 8007706:	9700      	str	r7, [sp, #0]
 8007708:	4633      	mov	r3, r6
 800770a:	aa0b      	add	r2, sp, #44	; 0x2c
 800770c:	4621      	mov	r1, r4
 800770e:	4628      	mov	r0, r5
 8007710:	f000 f9d8 	bl	8007ac4 <_printf_common>
 8007714:	3001      	adds	r0, #1
 8007716:	f040 8090 	bne.w	800783a <_printf_float+0x1e2>
 800771a:	f04f 30ff 	mov.w	r0, #4294967295
 800771e:	b00d      	add	sp, #52	; 0x34
 8007720:	ecbd 8b02 	vpop	{d8}
 8007724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007728:	4642      	mov	r2, r8
 800772a:	464b      	mov	r3, r9
 800772c:	4640      	mov	r0, r8
 800772e:	4649      	mov	r1, r9
 8007730:	f7f9 f9fc 	bl	8000b2c <__aeabi_dcmpun>
 8007734:	b140      	cbz	r0, 8007748 <_printf_float+0xf0>
 8007736:	464b      	mov	r3, r9
 8007738:	2b00      	cmp	r3, #0
 800773a:	bfbc      	itt	lt
 800773c:	232d      	movlt	r3, #45	; 0x2d
 800773e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007742:	487f      	ldr	r0, [pc, #508]	; (8007940 <_printf_float+0x2e8>)
 8007744:	4b7f      	ldr	r3, [pc, #508]	; (8007944 <_printf_float+0x2ec>)
 8007746:	e7d1      	b.n	80076ec <_printf_float+0x94>
 8007748:	6863      	ldr	r3, [r4, #4]
 800774a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800774e:	9206      	str	r2, [sp, #24]
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	d13f      	bne.n	80077d4 <_printf_float+0x17c>
 8007754:	2306      	movs	r3, #6
 8007756:	6063      	str	r3, [r4, #4]
 8007758:	9b05      	ldr	r3, [sp, #20]
 800775a:	6861      	ldr	r1, [r4, #4]
 800775c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007760:	2300      	movs	r3, #0
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	ab0a      	add	r3, sp, #40	; 0x28
 8007766:	e9cd b301 	strd	fp, r3, [sp, #4]
 800776a:	ab09      	add	r3, sp, #36	; 0x24
 800776c:	ec49 8b10 	vmov	d0, r8, r9
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	6022      	str	r2, [r4, #0]
 8007774:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007778:	4628      	mov	r0, r5
 800777a:	f7ff fecd 	bl	8007518 <__cvt>
 800777e:	9b06      	ldr	r3, [sp, #24]
 8007780:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007782:	2b47      	cmp	r3, #71	; 0x47
 8007784:	4680      	mov	r8, r0
 8007786:	d108      	bne.n	800779a <_printf_float+0x142>
 8007788:	1cc8      	adds	r0, r1, #3
 800778a:	db02      	blt.n	8007792 <_printf_float+0x13a>
 800778c:	6863      	ldr	r3, [r4, #4]
 800778e:	4299      	cmp	r1, r3
 8007790:	dd41      	ble.n	8007816 <_printf_float+0x1be>
 8007792:	f1ab 0b02 	sub.w	fp, fp, #2
 8007796:	fa5f fb8b 	uxtb.w	fp, fp
 800779a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800779e:	d820      	bhi.n	80077e2 <_printf_float+0x18a>
 80077a0:	3901      	subs	r1, #1
 80077a2:	465a      	mov	r2, fp
 80077a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077a8:	9109      	str	r1, [sp, #36]	; 0x24
 80077aa:	f7ff ff17 	bl	80075dc <__exponent>
 80077ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077b0:	1813      	adds	r3, r2, r0
 80077b2:	2a01      	cmp	r2, #1
 80077b4:	4681      	mov	r9, r0
 80077b6:	6123      	str	r3, [r4, #16]
 80077b8:	dc02      	bgt.n	80077c0 <_printf_float+0x168>
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	07d2      	lsls	r2, r2, #31
 80077be:	d501      	bpl.n	80077c4 <_printf_float+0x16c>
 80077c0:	3301      	adds	r3, #1
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d09c      	beq.n	8007706 <_printf_float+0xae>
 80077cc:	232d      	movs	r3, #45	; 0x2d
 80077ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d2:	e798      	b.n	8007706 <_printf_float+0xae>
 80077d4:	9a06      	ldr	r2, [sp, #24]
 80077d6:	2a47      	cmp	r2, #71	; 0x47
 80077d8:	d1be      	bne.n	8007758 <_printf_float+0x100>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1bc      	bne.n	8007758 <_printf_float+0x100>
 80077de:	2301      	movs	r3, #1
 80077e0:	e7b9      	b.n	8007756 <_printf_float+0xfe>
 80077e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80077e6:	d118      	bne.n	800781a <_printf_float+0x1c2>
 80077e8:	2900      	cmp	r1, #0
 80077ea:	6863      	ldr	r3, [r4, #4]
 80077ec:	dd0b      	ble.n	8007806 <_printf_float+0x1ae>
 80077ee:	6121      	str	r1, [r4, #16]
 80077f0:	b913      	cbnz	r3, 80077f8 <_printf_float+0x1a0>
 80077f2:	6822      	ldr	r2, [r4, #0]
 80077f4:	07d0      	lsls	r0, r2, #31
 80077f6:	d502      	bpl.n	80077fe <_printf_float+0x1a6>
 80077f8:	3301      	adds	r3, #1
 80077fa:	440b      	add	r3, r1
 80077fc:	6123      	str	r3, [r4, #16]
 80077fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007800:	f04f 0900 	mov.w	r9, #0
 8007804:	e7de      	b.n	80077c4 <_printf_float+0x16c>
 8007806:	b913      	cbnz	r3, 800780e <_printf_float+0x1b6>
 8007808:	6822      	ldr	r2, [r4, #0]
 800780a:	07d2      	lsls	r2, r2, #31
 800780c:	d501      	bpl.n	8007812 <_printf_float+0x1ba>
 800780e:	3302      	adds	r3, #2
 8007810:	e7f4      	b.n	80077fc <_printf_float+0x1a4>
 8007812:	2301      	movs	r3, #1
 8007814:	e7f2      	b.n	80077fc <_printf_float+0x1a4>
 8007816:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800781a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781c:	4299      	cmp	r1, r3
 800781e:	db05      	blt.n	800782c <_printf_float+0x1d4>
 8007820:	6823      	ldr	r3, [r4, #0]
 8007822:	6121      	str	r1, [r4, #16]
 8007824:	07d8      	lsls	r0, r3, #31
 8007826:	d5ea      	bpl.n	80077fe <_printf_float+0x1a6>
 8007828:	1c4b      	adds	r3, r1, #1
 800782a:	e7e7      	b.n	80077fc <_printf_float+0x1a4>
 800782c:	2900      	cmp	r1, #0
 800782e:	bfd4      	ite	le
 8007830:	f1c1 0202 	rsble	r2, r1, #2
 8007834:	2201      	movgt	r2, #1
 8007836:	4413      	add	r3, r2
 8007838:	e7e0      	b.n	80077fc <_printf_float+0x1a4>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	055a      	lsls	r2, r3, #21
 800783e:	d407      	bmi.n	8007850 <_printf_float+0x1f8>
 8007840:	6923      	ldr	r3, [r4, #16]
 8007842:	4642      	mov	r2, r8
 8007844:	4631      	mov	r1, r6
 8007846:	4628      	mov	r0, r5
 8007848:	47b8      	blx	r7
 800784a:	3001      	adds	r0, #1
 800784c:	d12c      	bne.n	80078a8 <_printf_float+0x250>
 800784e:	e764      	b.n	800771a <_printf_float+0xc2>
 8007850:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007854:	f240 80e0 	bls.w	8007a18 <_printf_float+0x3c0>
 8007858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800785c:	2200      	movs	r2, #0
 800785e:	2300      	movs	r3, #0
 8007860:	f7f9 f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8007864:	2800      	cmp	r0, #0
 8007866:	d034      	beq.n	80078d2 <_printf_float+0x27a>
 8007868:	4a37      	ldr	r2, [pc, #220]	; (8007948 <_printf_float+0x2f0>)
 800786a:	2301      	movs	r3, #1
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f af51 	beq.w	800771a <_printf_float+0xc2>
 8007878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800787c:	429a      	cmp	r2, r3
 800787e:	db02      	blt.n	8007886 <_printf_float+0x22e>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	07d8      	lsls	r0, r3, #31
 8007884:	d510      	bpl.n	80078a8 <_printf_float+0x250>
 8007886:	ee18 3a10 	vmov	r3, s16
 800788a:	4652      	mov	r2, sl
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f af41 	beq.w	800771a <_printf_float+0xc2>
 8007898:	f04f 0800 	mov.w	r8, #0
 800789c:	f104 091a 	add.w	r9, r4, #26
 80078a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a2:	3b01      	subs	r3, #1
 80078a4:	4543      	cmp	r3, r8
 80078a6:	dc09      	bgt.n	80078bc <_printf_float+0x264>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	079b      	lsls	r3, r3, #30
 80078ac:	f100 8105 	bmi.w	8007aba <_printf_float+0x462>
 80078b0:	68e0      	ldr	r0, [r4, #12]
 80078b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078b4:	4298      	cmp	r0, r3
 80078b6:	bfb8      	it	lt
 80078b8:	4618      	movlt	r0, r3
 80078ba:	e730      	b.n	800771e <_printf_float+0xc6>
 80078bc:	2301      	movs	r3, #1
 80078be:	464a      	mov	r2, r9
 80078c0:	4631      	mov	r1, r6
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b8      	blx	r7
 80078c6:	3001      	adds	r0, #1
 80078c8:	f43f af27 	beq.w	800771a <_printf_float+0xc2>
 80078cc:	f108 0801 	add.w	r8, r8, #1
 80078d0:	e7e6      	b.n	80078a0 <_printf_float+0x248>
 80078d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	dc39      	bgt.n	800794c <_printf_float+0x2f4>
 80078d8:	4a1b      	ldr	r2, [pc, #108]	; (8007948 <_printf_float+0x2f0>)
 80078da:	2301      	movs	r3, #1
 80078dc:	4631      	mov	r1, r6
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	f43f af19 	beq.w	800771a <_printf_float+0xc2>
 80078e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078ec:	4313      	orrs	r3, r2
 80078ee:	d102      	bne.n	80078f6 <_printf_float+0x29e>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	07d9      	lsls	r1, r3, #31
 80078f4:	d5d8      	bpl.n	80078a8 <_printf_float+0x250>
 80078f6:	ee18 3a10 	vmov	r3, s16
 80078fa:	4652      	mov	r2, sl
 80078fc:	4631      	mov	r1, r6
 80078fe:	4628      	mov	r0, r5
 8007900:	47b8      	blx	r7
 8007902:	3001      	adds	r0, #1
 8007904:	f43f af09 	beq.w	800771a <_printf_float+0xc2>
 8007908:	f04f 0900 	mov.w	r9, #0
 800790c:	f104 0a1a 	add.w	sl, r4, #26
 8007910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007912:	425b      	negs	r3, r3
 8007914:	454b      	cmp	r3, r9
 8007916:	dc01      	bgt.n	800791c <_printf_float+0x2c4>
 8007918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791a:	e792      	b.n	8007842 <_printf_float+0x1ea>
 800791c:	2301      	movs	r3, #1
 800791e:	4652      	mov	r2, sl
 8007920:	4631      	mov	r1, r6
 8007922:	4628      	mov	r0, r5
 8007924:	47b8      	blx	r7
 8007926:	3001      	adds	r0, #1
 8007928:	f43f aef7 	beq.w	800771a <_printf_float+0xc2>
 800792c:	f109 0901 	add.w	r9, r9, #1
 8007930:	e7ee      	b.n	8007910 <_printf_float+0x2b8>
 8007932:	bf00      	nop
 8007934:	7fefffff 	.word	0x7fefffff
 8007938:	0800cf3c 	.word	0x0800cf3c
 800793c:	0800cf40 	.word	0x0800cf40
 8007940:	0800cf48 	.word	0x0800cf48
 8007944:	0800cf44 	.word	0x0800cf44
 8007948:	0800cf4c 	.word	0x0800cf4c
 800794c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800794e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007950:	429a      	cmp	r2, r3
 8007952:	bfa8      	it	ge
 8007954:	461a      	movge	r2, r3
 8007956:	2a00      	cmp	r2, #0
 8007958:	4691      	mov	r9, r2
 800795a:	dc37      	bgt.n	80079cc <_printf_float+0x374>
 800795c:	f04f 0b00 	mov.w	fp, #0
 8007960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007964:	f104 021a 	add.w	r2, r4, #26
 8007968:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800796a:	9305      	str	r3, [sp, #20]
 800796c:	eba3 0309 	sub.w	r3, r3, r9
 8007970:	455b      	cmp	r3, fp
 8007972:	dc33      	bgt.n	80079dc <_printf_float+0x384>
 8007974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007978:	429a      	cmp	r2, r3
 800797a:	db3b      	blt.n	80079f4 <_printf_float+0x39c>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	07da      	lsls	r2, r3, #31
 8007980:	d438      	bmi.n	80079f4 <_printf_float+0x39c>
 8007982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007984:	9b05      	ldr	r3, [sp, #20]
 8007986:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	eba2 0901 	sub.w	r9, r2, r1
 800798e:	4599      	cmp	r9, r3
 8007990:	bfa8      	it	ge
 8007992:	4699      	movge	r9, r3
 8007994:	f1b9 0f00 	cmp.w	r9, #0
 8007998:	dc35      	bgt.n	8007a06 <_printf_float+0x3ae>
 800799a:	f04f 0800 	mov.w	r8, #0
 800799e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079a2:	f104 0a1a 	add.w	sl, r4, #26
 80079a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079aa:	1a9b      	subs	r3, r3, r2
 80079ac:	eba3 0309 	sub.w	r3, r3, r9
 80079b0:	4543      	cmp	r3, r8
 80079b2:	f77f af79 	ble.w	80078a8 <_printf_float+0x250>
 80079b6:	2301      	movs	r3, #1
 80079b8:	4652      	mov	r2, sl
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	f43f aeaa 	beq.w	800771a <_printf_float+0xc2>
 80079c6:	f108 0801 	add.w	r8, r8, #1
 80079ca:	e7ec      	b.n	80079a6 <_printf_float+0x34e>
 80079cc:	4613      	mov	r3, r2
 80079ce:	4631      	mov	r1, r6
 80079d0:	4642      	mov	r2, r8
 80079d2:	4628      	mov	r0, r5
 80079d4:	47b8      	blx	r7
 80079d6:	3001      	adds	r0, #1
 80079d8:	d1c0      	bne.n	800795c <_printf_float+0x304>
 80079da:	e69e      	b.n	800771a <_printf_float+0xc2>
 80079dc:	2301      	movs	r3, #1
 80079de:	4631      	mov	r1, r6
 80079e0:	4628      	mov	r0, r5
 80079e2:	9205      	str	r2, [sp, #20]
 80079e4:	47b8      	blx	r7
 80079e6:	3001      	adds	r0, #1
 80079e8:	f43f ae97 	beq.w	800771a <_printf_float+0xc2>
 80079ec:	9a05      	ldr	r2, [sp, #20]
 80079ee:	f10b 0b01 	add.w	fp, fp, #1
 80079f2:	e7b9      	b.n	8007968 <_printf_float+0x310>
 80079f4:	ee18 3a10 	vmov	r3, s16
 80079f8:	4652      	mov	r2, sl
 80079fa:	4631      	mov	r1, r6
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	d1be      	bne.n	8007982 <_printf_float+0x32a>
 8007a04:	e689      	b.n	800771a <_printf_float+0xc2>
 8007a06:	9a05      	ldr	r2, [sp, #20]
 8007a08:	464b      	mov	r3, r9
 8007a0a:	4442      	add	r2, r8
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b8      	blx	r7
 8007a12:	3001      	adds	r0, #1
 8007a14:	d1c1      	bne.n	800799a <_printf_float+0x342>
 8007a16:	e680      	b.n	800771a <_printf_float+0xc2>
 8007a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a1a:	2a01      	cmp	r2, #1
 8007a1c:	dc01      	bgt.n	8007a22 <_printf_float+0x3ca>
 8007a1e:	07db      	lsls	r3, r3, #31
 8007a20:	d538      	bpl.n	8007a94 <_printf_float+0x43c>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4642      	mov	r2, r8
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	f43f ae74 	beq.w	800771a <_printf_float+0xc2>
 8007a32:	ee18 3a10 	vmov	r3, s16
 8007a36:	4652      	mov	r2, sl
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f ae6b 	beq.w	800771a <_printf_float+0xc2>
 8007a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f7f9 f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a50:	b9d8      	cbnz	r0, 8007a8a <_printf_float+0x432>
 8007a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a54:	f108 0201 	add.w	r2, r8, #1
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	d10e      	bne.n	8007a82 <_printf_float+0x42a>
 8007a64:	e659      	b.n	800771a <_printf_float+0xc2>
 8007a66:	2301      	movs	r3, #1
 8007a68:	4652      	mov	r2, sl
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b8      	blx	r7
 8007a70:	3001      	adds	r0, #1
 8007a72:	f43f ae52 	beq.w	800771a <_printf_float+0xc2>
 8007a76:	f108 0801 	add.w	r8, r8, #1
 8007a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	4543      	cmp	r3, r8
 8007a80:	dcf1      	bgt.n	8007a66 <_printf_float+0x40e>
 8007a82:	464b      	mov	r3, r9
 8007a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a88:	e6dc      	b.n	8007844 <_printf_float+0x1ec>
 8007a8a:	f04f 0800 	mov.w	r8, #0
 8007a8e:	f104 0a1a 	add.w	sl, r4, #26
 8007a92:	e7f2      	b.n	8007a7a <_printf_float+0x422>
 8007a94:	2301      	movs	r3, #1
 8007a96:	4642      	mov	r2, r8
 8007a98:	e7df      	b.n	8007a5a <_printf_float+0x402>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	464a      	mov	r2, r9
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b8      	blx	r7
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	f43f ae38 	beq.w	800771a <_printf_float+0xc2>
 8007aaa:	f108 0801 	add.w	r8, r8, #1
 8007aae:	68e3      	ldr	r3, [r4, #12]
 8007ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ab2:	1a5b      	subs	r3, r3, r1
 8007ab4:	4543      	cmp	r3, r8
 8007ab6:	dcf0      	bgt.n	8007a9a <_printf_float+0x442>
 8007ab8:	e6fa      	b.n	80078b0 <_printf_float+0x258>
 8007aba:	f04f 0800 	mov.w	r8, #0
 8007abe:	f104 0919 	add.w	r9, r4, #25
 8007ac2:	e7f4      	b.n	8007aae <_printf_float+0x456>

08007ac4 <_printf_common>:
 8007ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac8:	4616      	mov	r6, r2
 8007aca:	4699      	mov	r9, r3
 8007acc:	688a      	ldr	r2, [r1, #8]
 8007ace:	690b      	ldr	r3, [r1, #16]
 8007ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	bfb8      	it	lt
 8007ad8:	4613      	movlt	r3, r2
 8007ada:	6033      	str	r3, [r6, #0]
 8007adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	b10a      	cbz	r2, 8007aea <_printf_common+0x26>
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	6033      	str	r3, [r6, #0]
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	0699      	lsls	r1, r3, #26
 8007aee:	bf42      	ittt	mi
 8007af0:	6833      	ldrmi	r3, [r6, #0]
 8007af2:	3302      	addmi	r3, #2
 8007af4:	6033      	strmi	r3, [r6, #0]
 8007af6:	6825      	ldr	r5, [r4, #0]
 8007af8:	f015 0506 	ands.w	r5, r5, #6
 8007afc:	d106      	bne.n	8007b0c <_printf_common+0x48>
 8007afe:	f104 0a19 	add.w	sl, r4, #25
 8007b02:	68e3      	ldr	r3, [r4, #12]
 8007b04:	6832      	ldr	r2, [r6, #0]
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	42ab      	cmp	r3, r5
 8007b0a:	dc26      	bgt.n	8007b5a <_printf_common+0x96>
 8007b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b10:	1e13      	subs	r3, r2, #0
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	bf18      	it	ne
 8007b16:	2301      	movne	r3, #1
 8007b18:	0692      	lsls	r2, r2, #26
 8007b1a:	d42b      	bmi.n	8007b74 <_printf_common+0xb0>
 8007b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b20:	4649      	mov	r1, r9
 8007b22:	4638      	mov	r0, r7
 8007b24:	47c0      	blx	r8
 8007b26:	3001      	adds	r0, #1
 8007b28:	d01e      	beq.n	8007b68 <_printf_common+0xa4>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	68e5      	ldr	r5, [r4, #12]
 8007b2e:	6832      	ldr	r2, [r6, #0]
 8007b30:	f003 0306 	and.w	r3, r3, #6
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	bf08      	it	eq
 8007b38:	1aad      	subeq	r5, r5, r2
 8007b3a:	68a3      	ldr	r3, [r4, #8]
 8007b3c:	6922      	ldr	r2, [r4, #16]
 8007b3e:	bf0c      	ite	eq
 8007b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b44:	2500      	movne	r5, #0
 8007b46:	4293      	cmp	r3, r2
 8007b48:	bfc4      	itt	gt
 8007b4a:	1a9b      	subgt	r3, r3, r2
 8007b4c:	18ed      	addgt	r5, r5, r3
 8007b4e:	2600      	movs	r6, #0
 8007b50:	341a      	adds	r4, #26
 8007b52:	42b5      	cmp	r5, r6
 8007b54:	d11a      	bne.n	8007b8c <_printf_common+0xc8>
 8007b56:	2000      	movs	r0, #0
 8007b58:	e008      	b.n	8007b6c <_printf_common+0xa8>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4652      	mov	r2, sl
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4638      	mov	r0, r7
 8007b62:	47c0      	blx	r8
 8007b64:	3001      	adds	r0, #1
 8007b66:	d103      	bne.n	8007b70 <_printf_common+0xac>
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	3501      	adds	r5, #1
 8007b72:	e7c6      	b.n	8007b02 <_printf_common+0x3e>
 8007b74:	18e1      	adds	r1, r4, r3
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	2030      	movs	r0, #48	; 0x30
 8007b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b7e:	4422      	add	r2, r4
 8007b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b88:	3302      	adds	r3, #2
 8007b8a:	e7c7      	b.n	8007b1c <_printf_common+0x58>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	4622      	mov	r2, r4
 8007b90:	4649      	mov	r1, r9
 8007b92:	4638      	mov	r0, r7
 8007b94:	47c0      	blx	r8
 8007b96:	3001      	adds	r0, #1
 8007b98:	d0e6      	beq.n	8007b68 <_printf_common+0xa4>
 8007b9a:	3601      	adds	r6, #1
 8007b9c:	e7d9      	b.n	8007b52 <_printf_common+0x8e>
	...

08007ba0 <_printf_i>:
 8007ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	4691      	mov	r9, r2
 8007ba8:	7e27      	ldrb	r7, [r4, #24]
 8007baa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007bac:	2f78      	cmp	r7, #120	; 0x78
 8007bae:	4680      	mov	r8, r0
 8007bb0:	469a      	mov	sl, r3
 8007bb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb6:	d807      	bhi.n	8007bc8 <_printf_i+0x28>
 8007bb8:	2f62      	cmp	r7, #98	; 0x62
 8007bba:	d80a      	bhi.n	8007bd2 <_printf_i+0x32>
 8007bbc:	2f00      	cmp	r7, #0
 8007bbe:	f000 80d8 	beq.w	8007d72 <_printf_i+0x1d2>
 8007bc2:	2f58      	cmp	r7, #88	; 0x58
 8007bc4:	f000 80a3 	beq.w	8007d0e <_printf_i+0x16e>
 8007bc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bd0:	e03a      	b.n	8007c48 <_printf_i+0xa8>
 8007bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bd6:	2b15      	cmp	r3, #21
 8007bd8:	d8f6      	bhi.n	8007bc8 <_printf_i+0x28>
 8007bda:	a001      	add	r0, pc, #4	; (adr r0, 8007be0 <_printf_i+0x40>)
 8007bdc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007be0:	08007c39 	.word	0x08007c39
 8007be4:	08007c4d 	.word	0x08007c4d
 8007be8:	08007bc9 	.word	0x08007bc9
 8007bec:	08007bc9 	.word	0x08007bc9
 8007bf0:	08007bc9 	.word	0x08007bc9
 8007bf4:	08007bc9 	.word	0x08007bc9
 8007bf8:	08007c4d 	.word	0x08007c4d
 8007bfc:	08007bc9 	.word	0x08007bc9
 8007c00:	08007bc9 	.word	0x08007bc9
 8007c04:	08007bc9 	.word	0x08007bc9
 8007c08:	08007bc9 	.word	0x08007bc9
 8007c0c:	08007d59 	.word	0x08007d59
 8007c10:	08007c7d 	.word	0x08007c7d
 8007c14:	08007d3b 	.word	0x08007d3b
 8007c18:	08007bc9 	.word	0x08007bc9
 8007c1c:	08007bc9 	.word	0x08007bc9
 8007c20:	08007d7b 	.word	0x08007d7b
 8007c24:	08007bc9 	.word	0x08007bc9
 8007c28:	08007c7d 	.word	0x08007c7d
 8007c2c:	08007bc9 	.word	0x08007bc9
 8007c30:	08007bc9 	.word	0x08007bc9
 8007c34:	08007d43 	.word	0x08007d43
 8007c38:	680b      	ldr	r3, [r1, #0]
 8007c3a:	1d1a      	adds	r2, r3, #4
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	600a      	str	r2, [r1, #0]
 8007c40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e0a3      	b.n	8007d94 <_printf_i+0x1f4>
 8007c4c:	6825      	ldr	r5, [r4, #0]
 8007c4e:	6808      	ldr	r0, [r1, #0]
 8007c50:	062e      	lsls	r6, r5, #24
 8007c52:	f100 0304 	add.w	r3, r0, #4
 8007c56:	d50a      	bpl.n	8007c6e <_printf_i+0xce>
 8007c58:	6805      	ldr	r5, [r0, #0]
 8007c5a:	600b      	str	r3, [r1, #0]
 8007c5c:	2d00      	cmp	r5, #0
 8007c5e:	da03      	bge.n	8007c68 <_printf_i+0xc8>
 8007c60:	232d      	movs	r3, #45	; 0x2d
 8007c62:	426d      	negs	r5, r5
 8007c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c68:	485e      	ldr	r0, [pc, #376]	; (8007de4 <_printf_i+0x244>)
 8007c6a:	230a      	movs	r3, #10
 8007c6c:	e019      	b.n	8007ca2 <_printf_i+0x102>
 8007c6e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c72:	6805      	ldr	r5, [r0, #0]
 8007c74:	600b      	str	r3, [r1, #0]
 8007c76:	bf18      	it	ne
 8007c78:	b22d      	sxthne	r5, r5
 8007c7a:	e7ef      	b.n	8007c5c <_printf_i+0xbc>
 8007c7c:	680b      	ldr	r3, [r1, #0]
 8007c7e:	6825      	ldr	r5, [r4, #0]
 8007c80:	1d18      	adds	r0, r3, #4
 8007c82:	6008      	str	r0, [r1, #0]
 8007c84:	0628      	lsls	r0, r5, #24
 8007c86:	d501      	bpl.n	8007c8c <_printf_i+0xec>
 8007c88:	681d      	ldr	r5, [r3, #0]
 8007c8a:	e002      	b.n	8007c92 <_printf_i+0xf2>
 8007c8c:	0669      	lsls	r1, r5, #25
 8007c8e:	d5fb      	bpl.n	8007c88 <_printf_i+0xe8>
 8007c90:	881d      	ldrh	r5, [r3, #0]
 8007c92:	4854      	ldr	r0, [pc, #336]	; (8007de4 <_printf_i+0x244>)
 8007c94:	2f6f      	cmp	r7, #111	; 0x6f
 8007c96:	bf0c      	ite	eq
 8007c98:	2308      	moveq	r3, #8
 8007c9a:	230a      	movne	r3, #10
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ca2:	6866      	ldr	r6, [r4, #4]
 8007ca4:	60a6      	str	r6, [r4, #8]
 8007ca6:	2e00      	cmp	r6, #0
 8007ca8:	bfa2      	ittt	ge
 8007caa:	6821      	ldrge	r1, [r4, #0]
 8007cac:	f021 0104 	bicge.w	r1, r1, #4
 8007cb0:	6021      	strge	r1, [r4, #0]
 8007cb2:	b90d      	cbnz	r5, 8007cb8 <_printf_i+0x118>
 8007cb4:	2e00      	cmp	r6, #0
 8007cb6:	d04d      	beq.n	8007d54 <_printf_i+0x1b4>
 8007cb8:	4616      	mov	r6, r2
 8007cba:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cbe:	fb03 5711 	mls	r7, r3, r1, r5
 8007cc2:	5dc7      	ldrb	r7, [r0, r7]
 8007cc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cc8:	462f      	mov	r7, r5
 8007cca:	42bb      	cmp	r3, r7
 8007ccc:	460d      	mov	r5, r1
 8007cce:	d9f4      	bls.n	8007cba <_printf_i+0x11a>
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d10b      	bne.n	8007cec <_printf_i+0x14c>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	07df      	lsls	r7, r3, #31
 8007cd8:	d508      	bpl.n	8007cec <_printf_i+0x14c>
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	6861      	ldr	r1, [r4, #4]
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	bfde      	ittt	le
 8007ce2:	2330      	movle	r3, #48	; 0x30
 8007ce4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ce8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cec:	1b92      	subs	r2, r2, r6
 8007cee:	6122      	str	r2, [r4, #16]
 8007cf0:	f8cd a000 	str.w	sl, [sp]
 8007cf4:	464b      	mov	r3, r9
 8007cf6:	aa03      	add	r2, sp, #12
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	f7ff fee2 	bl	8007ac4 <_printf_common>
 8007d00:	3001      	adds	r0, #1
 8007d02:	d14c      	bne.n	8007d9e <_printf_i+0x1fe>
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295
 8007d08:	b004      	add	sp, #16
 8007d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d0e:	4835      	ldr	r0, [pc, #212]	; (8007de4 <_printf_i+0x244>)
 8007d10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	680e      	ldr	r6, [r1, #0]
 8007d18:	061f      	lsls	r7, r3, #24
 8007d1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d1e:	600e      	str	r6, [r1, #0]
 8007d20:	d514      	bpl.n	8007d4c <_printf_i+0x1ac>
 8007d22:	07d9      	lsls	r1, r3, #31
 8007d24:	bf44      	itt	mi
 8007d26:	f043 0320 	orrmi.w	r3, r3, #32
 8007d2a:	6023      	strmi	r3, [r4, #0]
 8007d2c:	b91d      	cbnz	r5, 8007d36 <_printf_i+0x196>
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	f023 0320 	bic.w	r3, r3, #32
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	2310      	movs	r3, #16
 8007d38:	e7b0      	b.n	8007c9c <_printf_i+0xfc>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	f043 0320 	orr.w	r3, r3, #32
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	2378      	movs	r3, #120	; 0x78
 8007d44:	4828      	ldr	r0, [pc, #160]	; (8007de8 <_printf_i+0x248>)
 8007d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d4a:	e7e3      	b.n	8007d14 <_printf_i+0x174>
 8007d4c:	065e      	lsls	r6, r3, #25
 8007d4e:	bf48      	it	mi
 8007d50:	b2ad      	uxthmi	r5, r5
 8007d52:	e7e6      	b.n	8007d22 <_printf_i+0x182>
 8007d54:	4616      	mov	r6, r2
 8007d56:	e7bb      	b.n	8007cd0 <_printf_i+0x130>
 8007d58:	680b      	ldr	r3, [r1, #0]
 8007d5a:	6826      	ldr	r6, [r4, #0]
 8007d5c:	6960      	ldr	r0, [r4, #20]
 8007d5e:	1d1d      	adds	r5, r3, #4
 8007d60:	600d      	str	r5, [r1, #0]
 8007d62:	0635      	lsls	r5, r6, #24
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	d501      	bpl.n	8007d6c <_printf_i+0x1cc>
 8007d68:	6018      	str	r0, [r3, #0]
 8007d6a:	e002      	b.n	8007d72 <_printf_i+0x1d2>
 8007d6c:	0671      	lsls	r1, r6, #25
 8007d6e:	d5fb      	bpl.n	8007d68 <_printf_i+0x1c8>
 8007d70:	8018      	strh	r0, [r3, #0]
 8007d72:	2300      	movs	r3, #0
 8007d74:	6123      	str	r3, [r4, #16]
 8007d76:	4616      	mov	r6, r2
 8007d78:	e7ba      	b.n	8007cf0 <_printf_i+0x150>
 8007d7a:	680b      	ldr	r3, [r1, #0]
 8007d7c:	1d1a      	adds	r2, r3, #4
 8007d7e:	600a      	str	r2, [r1, #0]
 8007d80:	681e      	ldr	r6, [r3, #0]
 8007d82:	6862      	ldr	r2, [r4, #4]
 8007d84:	2100      	movs	r1, #0
 8007d86:	4630      	mov	r0, r6
 8007d88:	f7f8 fa2a 	bl	80001e0 <memchr>
 8007d8c:	b108      	cbz	r0, 8007d92 <_printf_i+0x1f2>
 8007d8e:	1b80      	subs	r0, r0, r6
 8007d90:	6060      	str	r0, [r4, #4]
 8007d92:	6863      	ldr	r3, [r4, #4]
 8007d94:	6123      	str	r3, [r4, #16]
 8007d96:	2300      	movs	r3, #0
 8007d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d9c:	e7a8      	b.n	8007cf0 <_printf_i+0x150>
 8007d9e:	6923      	ldr	r3, [r4, #16]
 8007da0:	4632      	mov	r2, r6
 8007da2:	4649      	mov	r1, r9
 8007da4:	4640      	mov	r0, r8
 8007da6:	47d0      	blx	sl
 8007da8:	3001      	adds	r0, #1
 8007daa:	d0ab      	beq.n	8007d04 <_printf_i+0x164>
 8007dac:	6823      	ldr	r3, [r4, #0]
 8007dae:	079b      	lsls	r3, r3, #30
 8007db0:	d413      	bmi.n	8007dda <_printf_i+0x23a>
 8007db2:	68e0      	ldr	r0, [r4, #12]
 8007db4:	9b03      	ldr	r3, [sp, #12]
 8007db6:	4298      	cmp	r0, r3
 8007db8:	bfb8      	it	lt
 8007dba:	4618      	movlt	r0, r3
 8007dbc:	e7a4      	b.n	8007d08 <_printf_i+0x168>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	47d0      	blx	sl
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d09b      	beq.n	8007d04 <_printf_i+0x164>
 8007dcc:	3501      	adds	r5, #1
 8007dce:	68e3      	ldr	r3, [r4, #12]
 8007dd0:	9903      	ldr	r1, [sp, #12]
 8007dd2:	1a5b      	subs	r3, r3, r1
 8007dd4:	42ab      	cmp	r3, r5
 8007dd6:	dcf2      	bgt.n	8007dbe <_printf_i+0x21e>
 8007dd8:	e7eb      	b.n	8007db2 <_printf_i+0x212>
 8007dda:	2500      	movs	r5, #0
 8007ddc:	f104 0619 	add.w	r6, r4, #25
 8007de0:	e7f5      	b.n	8007dce <_printf_i+0x22e>
 8007de2:	bf00      	nop
 8007de4:	0800cf4e 	.word	0x0800cf4e
 8007de8:	0800cf5f 	.word	0x0800cf5f

08007dec <_scanf_float>:
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	b087      	sub	sp, #28
 8007df2:	4617      	mov	r7, r2
 8007df4:	9303      	str	r3, [sp, #12]
 8007df6:	688b      	ldr	r3, [r1, #8]
 8007df8:	1e5a      	subs	r2, r3, #1
 8007dfa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007dfe:	bf83      	ittte	hi
 8007e00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e04:	195b      	addhi	r3, r3, r5
 8007e06:	9302      	strhi	r3, [sp, #8]
 8007e08:	2300      	movls	r3, #0
 8007e0a:	bf86      	itte	hi
 8007e0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007e10:	608b      	strhi	r3, [r1, #8]
 8007e12:	9302      	strls	r3, [sp, #8]
 8007e14:	680b      	ldr	r3, [r1, #0]
 8007e16:	468b      	mov	fp, r1
 8007e18:	2500      	movs	r5, #0
 8007e1a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007e1e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007e22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007e26:	4680      	mov	r8, r0
 8007e28:	460c      	mov	r4, r1
 8007e2a:	465e      	mov	r6, fp
 8007e2c:	46aa      	mov	sl, r5
 8007e2e:	46a9      	mov	r9, r5
 8007e30:	9501      	str	r5, [sp, #4]
 8007e32:	68a2      	ldr	r2, [r4, #8]
 8007e34:	b152      	cbz	r2, 8007e4c <_scanf_float+0x60>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b4e      	cmp	r3, #78	; 0x4e
 8007e3c:	d864      	bhi.n	8007f08 <_scanf_float+0x11c>
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	d83c      	bhi.n	8007ebc <_scanf_float+0xd0>
 8007e42:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007e46:	b2c8      	uxtb	r0, r1
 8007e48:	280e      	cmp	r0, #14
 8007e4a:	d93a      	bls.n	8007ec2 <_scanf_float+0xd6>
 8007e4c:	f1b9 0f00 	cmp.w	r9, #0
 8007e50:	d003      	beq.n	8007e5a <_scanf_float+0x6e>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e5e:	f1ba 0f01 	cmp.w	sl, #1
 8007e62:	f200 8113 	bhi.w	800808c <_scanf_float+0x2a0>
 8007e66:	455e      	cmp	r6, fp
 8007e68:	f200 8105 	bhi.w	8008076 <_scanf_float+0x28a>
 8007e6c:	2501      	movs	r5, #1
 8007e6e:	4628      	mov	r0, r5
 8007e70:	b007      	add	sp, #28
 8007e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e7a:	2a0d      	cmp	r2, #13
 8007e7c:	d8e6      	bhi.n	8007e4c <_scanf_float+0x60>
 8007e7e:	a101      	add	r1, pc, #4	; (adr r1, 8007e84 <_scanf_float+0x98>)
 8007e80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e84:	08007fc3 	.word	0x08007fc3
 8007e88:	08007e4d 	.word	0x08007e4d
 8007e8c:	08007e4d 	.word	0x08007e4d
 8007e90:	08007e4d 	.word	0x08007e4d
 8007e94:	08008023 	.word	0x08008023
 8007e98:	08007ffb 	.word	0x08007ffb
 8007e9c:	08007e4d 	.word	0x08007e4d
 8007ea0:	08007e4d 	.word	0x08007e4d
 8007ea4:	08007fd1 	.word	0x08007fd1
 8007ea8:	08007e4d 	.word	0x08007e4d
 8007eac:	08007e4d 	.word	0x08007e4d
 8007eb0:	08007e4d 	.word	0x08007e4d
 8007eb4:	08007e4d 	.word	0x08007e4d
 8007eb8:	08007f89 	.word	0x08007f89
 8007ebc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ec0:	e7db      	b.n	8007e7a <_scanf_float+0x8e>
 8007ec2:	290e      	cmp	r1, #14
 8007ec4:	d8c2      	bhi.n	8007e4c <_scanf_float+0x60>
 8007ec6:	a001      	add	r0, pc, #4	; (adr r0, 8007ecc <_scanf_float+0xe0>)
 8007ec8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007ecc:	08007f7b 	.word	0x08007f7b
 8007ed0:	08007e4d 	.word	0x08007e4d
 8007ed4:	08007f7b 	.word	0x08007f7b
 8007ed8:	0800800f 	.word	0x0800800f
 8007edc:	08007e4d 	.word	0x08007e4d
 8007ee0:	08007f29 	.word	0x08007f29
 8007ee4:	08007f65 	.word	0x08007f65
 8007ee8:	08007f65 	.word	0x08007f65
 8007eec:	08007f65 	.word	0x08007f65
 8007ef0:	08007f65 	.word	0x08007f65
 8007ef4:	08007f65 	.word	0x08007f65
 8007ef8:	08007f65 	.word	0x08007f65
 8007efc:	08007f65 	.word	0x08007f65
 8007f00:	08007f65 	.word	0x08007f65
 8007f04:	08007f65 	.word	0x08007f65
 8007f08:	2b6e      	cmp	r3, #110	; 0x6e
 8007f0a:	d809      	bhi.n	8007f20 <_scanf_float+0x134>
 8007f0c:	2b60      	cmp	r3, #96	; 0x60
 8007f0e:	d8b2      	bhi.n	8007e76 <_scanf_float+0x8a>
 8007f10:	2b54      	cmp	r3, #84	; 0x54
 8007f12:	d077      	beq.n	8008004 <_scanf_float+0x218>
 8007f14:	2b59      	cmp	r3, #89	; 0x59
 8007f16:	d199      	bne.n	8007e4c <_scanf_float+0x60>
 8007f18:	2d07      	cmp	r5, #7
 8007f1a:	d197      	bne.n	8007e4c <_scanf_float+0x60>
 8007f1c:	2508      	movs	r5, #8
 8007f1e:	e029      	b.n	8007f74 <_scanf_float+0x188>
 8007f20:	2b74      	cmp	r3, #116	; 0x74
 8007f22:	d06f      	beq.n	8008004 <_scanf_float+0x218>
 8007f24:	2b79      	cmp	r3, #121	; 0x79
 8007f26:	e7f6      	b.n	8007f16 <_scanf_float+0x12a>
 8007f28:	6821      	ldr	r1, [r4, #0]
 8007f2a:	05c8      	lsls	r0, r1, #23
 8007f2c:	d51a      	bpl.n	8007f64 <_scanf_float+0x178>
 8007f2e:	9b02      	ldr	r3, [sp, #8]
 8007f30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007f34:	6021      	str	r1, [r4, #0]
 8007f36:	f109 0901 	add.w	r9, r9, #1
 8007f3a:	b11b      	cbz	r3, 8007f44 <_scanf_float+0x158>
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	3201      	adds	r2, #1
 8007f40:	9302      	str	r3, [sp, #8]
 8007f42:	60a2      	str	r2, [r4, #8]
 8007f44:	68a3      	ldr	r3, [r4, #8]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	60a3      	str	r3, [r4, #8]
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	6123      	str	r3, [r4, #16]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	f340 8084 	ble.w	8008064 <_scanf_float+0x278>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	603b      	str	r3, [r7, #0]
 8007f62:	e766      	b.n	8007e32 <_scanf_float+0x46>
 8007f64:	eb1a 0f05 	cmn.w	sl, r5
 8007f68:	f47f af70 	bne.w	8007e4c <_scanf_float+0x60>
 8007f6c:	6822      	ldr	r2, [r4, #0]
 8007f6e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007f72:	6022      	str	r2, [r4, #0]
 8007f74:	f806 3b01 	strb.w	r3, [r6], #1
 8007f78:	e7e4      	b.n	8007f44 <_scanf_float+0x158>
 8007f7a:	6822      	ldr	r2, [r4, #0]
 8007f7c:	0610      	lsls	r0, r2, #24
 8007f7e:	f57f af65 	bpl.w	8007e4c <_scanf_float+0x60>
 8007f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f86:	e7f4      	b.n	8007f72 <_scanf_float+0x186>
 8007f88:	f1ba 0f00 	cmp.w	sl, #0
 8007f8c:	d10e      	bne.n	8007fac <_scanf_float+0x1c0>
 8007f8e:	f1b9 0f00 	cmp.w	r9, #0
 8007f92:	d10e      	bne.n	8007fb2 <_scanf_float+0x1c6>
 8007f94:	6822      	ldr	r2, [r4, #0]
 8007f96:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007f9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007f9e:	d108      	bne.n	8007fb2 <_scanf_float+0x1c6>
 8007fa0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fa4:	6022      	str	r2, [r4, #0]
 8007fa6:	f04f 0a01 	mov.w	sl, #1
 8007faa:	e7e3      	b.n	8007f74 <_scanf_float+0x188>
 8007fac:	f1ba 0f02 	cmp.w	sl, #2
 8007fb0:	d055      	beq.n	800805e <_scanf_float+0x272>
 8007fb2:	2d01      	cmp	r5, #1
 8007fb4:	d002      	beq.n	8007fbc <_scanf_float+0x1d0>
 8007fb6:	2d04      	cmp	r5, #4
 8007fb8:	f47f af48 	bne.w	8007e4c <_scanf_float+0x60>
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	b2ed      	uxtb	r5, r5
 8007fc0:	e7d8      	b.n	8007f74 <_scanf_float+0x188>
 8007fc2:	f1ba 0f01 	cmp.w	sl, #1
 8007fc6:	f47f af41 	bne.w	8007e4c <_scanf_float+0x60>
 8007fca:	f04f 0a02 	mov.w	sl, #2
 8007fce:	e7d1      	b.n	8007f74 <_scanf_float+0x188>
 8007fd0:	b97d      	cbnz	r5, 8007ff2 <_scanf_float+0x206>
 8007fd2:	f1b9 0f00 	cmp.w	r9, #0
 8007fd6:	f47f af3c 	bne.w	8007e52 <_scanf_float+0x66>
 8007fda:	6822      	ldr	r2, [r4, #0]
 8007fdc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007fe0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007fe4:	f47f af39 	bne.w	8007e5a <_scanf_float+0x6e>
 8007fe8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fec:	6022      	str	r2, [r4, #0]
 8007fee:	2501      	movs	r5, #1
 8007ff0:	e7c0      	b.n	8007f74 <_scanf_float+0x188>
 8007ff2:	2d03      	cmp	r5, #3
 8007ff4:	d0e2      	beq.n	8007fbc <_scanf_float+0x1d0>
 8007ff6:	2d05      	cmp	r5, #5
 8007ff8:	e7de      	b.n	8007fb8 <_scanf_float+0x1cc>
 8007ffa:	2d02      	cmp	r5, #2
 8007ffc:	f47f af26 	bne.w	8007e4c <_scanf_float+0x60>
 8008000:	2503      	movs	r5, #3
 8008002:	e7b7      	b.n	8007f74 <_scanf_float+0x188>
 8008004:	2d06      	cmp	r5, #6
 8008006:	f47f af21 	bne.w	8007e4c <_scanf_float+0x60>
 800800a:	2507      	movs	r5, #7
 800800c:	e7b2      	b.n	8007f74 <_scanf_float+0x188>
 800800e:	6822      	ldr	r2, [r4, #0]
 8008010:	0591      	lsls	r1, r2, #22
 8008012:	f57f af1b 	bpl.w	8007e4c <_scanf_float+0x60>
 8008016:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800801a:	6022      	str	r2, [r4, #0]
 800801c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008020:	e7a8      	b.n	8007f74 <_scanf_float+0x188>
 8008022:	6822      	ldr	r2, [r4, #0]
 8008024:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008028:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800802c:	d006      	beq.n	800803c <_scanf_float+0x250>
 800802e:	0550      	lsls	r0, r2, #21
 8008030:	f57f af0c 	bpl.w	8007e4c <_scanf_float+0x60>
 8008034:	f1b9 0f00 	cmp.w	r9, #0
 8008038:	f43f af0f 	beq.w	8007e5a <_scanf_float+0x6e>
 800803c:	0591      	lsls	r1, r2, #22
 800803e:	bf58      	it	pl
 8008040:	9901      	ldrpl	r1, [sp, #4]
 8008042:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008046:	bf58      	it	pl
 8008048:	eba9 0101 	subpl.w	r1, r9, r1
 800804c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008050:	bf58      	it	pl
 8008052:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008056:	6022      	str	r2, [r4, #0]
 8008058:	f04f 0900 	mov.w	r9, #0
 800805c:	e78a      	b.n	8007f74 <_scanf_float+0x188>
 800805e:	f04f 0a03 	mov.w	sl, #3
 8008062:	e787      	b.n	8007f74 <_scanf_float+0x188>
 8008064:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008068:	4639      	mov	r1, r7
 800806a:	4640      	mov	r0, r8
 800806c:	4798      	blx	r3
 800806e:	2800      	cmp	r0, #0
 8008070:	f43f aedf 	beq.w	8007e32 <_scanf_float+0x46>
 8008074:	e6ea      	b.n	8007e4c <_scanf_float+0x60>
 8008076:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800807a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800807e:	463a      	mov	r2, r7
 8008080:	4640      	mov	r0, r8
 8008082:	4798      	blx	r3
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	3b01      	subs	r3, #1
 8008088:	6123      	str	r3, [r4, #16]
 800808a:	e6ec      	b.n	8007e66 <_scanf_float+0x7a>
 800808c:	1e6b      	subs	r3, r5, #1
 800808e:	2b06      	cmp	r3, #6
 8008090:	d825      	bhi.n	80080de <_scanf_float+0x2f2>
 8008092:	2d02      	cmp	r5, #2
 8008094:	d836      	bhi.n	8008104 <_scanf_float+0x318>
 8008096:	455e      	cmp	r6, fp
 8008098:	f67f aee8 	bls.w	8007e6c <_scanf_float+0x80>
 800809c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080a4:	463a      	mov	r2, r7
 80080a6:	4640      	mov	r0, r8
 80080a8:	4798      	blx	r3
 80080aa:	6923      	ldr	r3, [r4, #16]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	e7f1      	b.n	8008096 <_scanf_float+0x2aa>
 80080b2:	9802      	ldr	r0, [sp, #8]
 80080b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80080bc:	9002      	str	r0, [sp, #8]
 80080be:	463a      	mov	r2, r7
 80080c0:	4640      	mov	r0, r8
 80080c2:	4798      	blx	r3
 80080c4:	6923      	ldr	r3, [r4, #16]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	6123      	str	r3, [r4, #16]
 80080ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080ce:	fa5f fa8a 	uxtb.w	sl, sl
 80080d2:	f1ba 0f02 	cmp.w	sl, #2
 80080d6:	d1ec      	bne.n	80080b2 <_scanf_float+0x2c6>
 80080d8:	3d03      	subs	r5, #3
 80080da:	b2ed      	uxtb	r5, r5
 80080dc:	1b76      	subs	r6, r6, r5
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	05da      	lsls	r2, r3, #23
 80080e2:	d52f      	bpl.n	8008144 <_scanf_float+0x358>
 80080e4:	055b      	lsls	r3, r3, #21
 80080e6:	d510      	bpl.n	800810a <_scanf_float+0x31e>
 80080e8:	455e      	cmp	r6, fp
 80080ea:	f67f aebf 	bls.w	8007e6c <_scanf_float+0x80>
 80080ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080f6:	463a      	mov	r2, r7
 80080f8:	4640      	mov	r0, r8
 80080fa:	4798      	blx	r3
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	3b01      	subs	r3, #1
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	e7f1      	b.n	80080e8 <_scanf_float+0x2fc>
 8008104:	46aa      	mov	sl, r5
 8008106:	9602      	str	r6, [sp, #8]
 8008108:	e7df      	b.n	80080ca <_scanf_float+0x2de>
 800810a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800810e:	6923      	ldr	r3, [r4, #16]
 8008110:	2965      	cmp	r1, #101	; 0x65
 8008112:	f103 33ff 	add.w	r3, r3, #4294967295
 8008116:	f106 35ff 	add.w	r5, r6, #4294967295
 800811a:	6123      	str	r3, [r4, #16]
 800811c:	d00c      	beq.n	8008138 <_scanf_float+0x34c>
 800811e:	2945      	cmp	r1, #69	; 0x45
 8008120:	d00a      	beq.n	8008138 <_scanf_float+0x34c>
 8008122:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008126:	463a      	mov	r2, r7
 8008128:	4640      	mov	r0, r8
 800812a:	4798      	blx	r3
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008132:	3b01      	subs	r3, #1
 8008134:	1eb5      	subs	r5, r6, #2
 8008136:	6123      	str	r3, [r4, #16]
 8008138:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800813c:	463a      	mov	r2, r7
 800813e:	4640      	mov	r0, r8
 8008140:	4798      	blx	r3
 8008142:	462e      	mov	r6, r5
 8008144:	6825      	ldr	r5, [r4, #0]
 8008146:	f015 0510 	ands.w	r5, r5, #16
 800814a:	d158      	bne.n	80081fe <_scanf_float+0x412>
 800814c:	7035      	strb	r5, [r6, #0]
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008158:	d11c      	bne.n	8008194 <_scanf_float+0x3a8>
 800815a:	9b01      	ldr	r3, [sp, #4]
 800815c:	454b      	cmp	r3, r9
 800815e:	eba3 0209 	sub.w	r2, r3, r9
 8008162:	d124      	bne.n	80081ae <_scanf_float+0x3c2>
 8008164:	2200      	movs	r2, #0
 8008166:	4659      	mov	r1, fp
 8008168:	4640      	mov	r0, r8
 800816a:	f000 fef7 	bl	8008f5c <_strtod_r>
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	6821      	ldr	r1, [r4, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f011 0f02 	tst.w	r1, #2
 8008178:	ec57 6b10 	vmov	r6, r7, d0
 800817c:	f103 0204 	add.w	r2, r3, #4
 8008180:	d020      	beq.n	80081c4 <_scanf_float+0x3d8>
 8008182:	9903      	ldr	r1, [sp, #12]
 8008184:	600a      	str	r2, [r1, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	e9c3 6700 	strd	r6, r7, [r3]
 800818c:	68e3      	ldr	r3, [r4, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60e3      	str	r3, [r4, #12]
 8008192:	e66c      	b.n	8007e6e <_scanf_float+0x82>
 8008194:	9b04      	ldr	r3, [sp, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0e4      	beq.n	8008164 <_scanf_float+0x378>
 800819a:	9905      	ldr	r1, [sp, #20]
 800819c:	230a      	movs	r3, #10
 800819e:	462a      	mov	r2, r5
 80081a0:	3101      	adds	r1, #1
 80081a2:	4640      	mov	r0, r8
 80081a4:	f000 ff64 	bl	8009070 <_strtol_r>
 80081a8:	9b04      	ldr	r3, [sp, #16]
 80081aa:	9e05      	ldr	r6, [sp, #20]
 80081ac:	1ac2      	subs	r2, r0, r3
 80081ae:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80081b2:	429e      	cmp	r6, r3
 80081b4:	bf28      	it	cs
 80081b6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80081ba:	4912      	ldr	r1, [pc, #72]	; (8008204 <_scanf_float+0x418>)
 80081bc:	4630      	mov	r0, r6
 80081be:	f000 f82b 	bl	8008218 <siprintf>
 80081c2:	e7cf      	b.n	8008164 <_scanf_float+0x378>
 80081c4:	f011 0f04 	tst.w	r1, #4
 80081c8:	9903      	ldr	r1, [sp, #12]
 80081ca:	600a      	str	r2, [r1, #0]
 80081cc:	d1db      	bne.n	8008186 <_scanf_float+0x39a>
 80081ce:	f8d3 8000 	ldr.w	r8, [r3]
 80081d2:	ee10 2a10 	vmov	r2, s0
 80081d6:	ee10 0a10 	vmov	r0, s0
 80081da:	463b      	mov	r3, r7
 80081dc:	4639      	mov	r1, r7
 80081de:	f7f8 fca5 	bl	8000b2c <__aeabi_dcmpun>
 80081e2:	b128      	cbz	r0, 80081f0 <_scanf_float+0x404>
 80081e4:	4808      	ldr	r0, [pc, #32]	; (8008208 <_scanf_float+0x41c>)
 80081e6:	f000 f811 	bl	800820c <nanf>
 80081ea:	ed88 0a00 	vstr	s0, [r8]
 80081ee:	e7cd      	b.n	800818c <_scanf_float+0x3a0>
 80081f0:	4630      	mov	r0, r6
 80081f2:	4639      	mov	r1, r7
 80081f4:	f7f8 fcf8 	bl	8000be8 <__aeabi_d2f>
 80081f8:	f8c8 0000 	str.w	r0, [r8]
 80081fc:	e7c6      	b.n	800818c <_scanf_float+0x3a0>
 80081fe:	2500      	movs	r5, #0
 8008200:	e635      	b.n	8007e6e <_scanf_float+0x82>
 8008202:	bf00      	nop
 8008204:	0800cf70 	.word	0x0800cf70
 8008208:	0800d388 	.word	0x0800d388

0800820c <nanf>:
 800820c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008214 <nanf+0x8>
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	7fc00000 	.word	0x7fc00000

08008218 <siprintf>:
 8008218:	b40e      	push	{r1, r2, r3}
 800821a:	b500      	push	{lr}
 800821c:	b09c      	sub	sp, #112	; 0x70
 800821e:	ab1d      	add	r3, sp, #116	; 0x74
 8008220:	9002      	str	r0, [sp, #8]
 8008222:	9006      	str	r0, [sp, #24]
 8008224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008228:	4809      	ldr	r0, [pc, #36]	; (8008250 <siprintf+0x38>)
 800822a:	9107      	str	r1, [sp, #28]
 800822c:	9104      	str	r1, [sp, #16]
 800822e:	4909      	ldr	r1, [pc, #36]	; (8008254 <siprintf+0x3c>)
 8008230:	f853 2b04 	ldr.w	r2, [r3], #4
 8008234:	9105      	str	r1, [sp, #20]
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	a902      	add	r1, sp, #8
 800823c:	f002 ff00 	bl	800b040 <_svfiprintf_r>
 8008240:	9b02      	ldr	r3, [sp, #8]
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
 8008246:	b01c      	add	sp, #112	; 0x70
 8008248:	f85d eb04 	ldr.w	lr, [sp], #4
 800824c:	b003      	add	sp, #12
 800824e:	4770      	bx	lr
 8008250:	20000170 	.word	0x20000170
 8008254:	ffff0208 	.word	0xffff0208

08008258 <strcat>:
 8008258:	b510      	push	{r4, lr}
 800825a:	4602      	mov	r2, r0
 800825c:	7814      	ldrb	r4, [r2, #0]
 800825e:	4613      	mov	r3, r2
 8008260:	3201      	adds	r2, #1
 8008262:	2c00      	cmp	r4, #0
 8008264:	d1fa      	bne.n	800825c <strcat+0x4>
 8008266:	3b01      	subs	r3, #1
 8008268:	f811 2b01 	ldrb.w	r2, [r1], #1
 800826c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008270:	2a00      	cmp	r2, #0
 8008272:	d1f9      	bne.n	8008268 <strcat+0x10>
 8008274:	bd10      	pop	{r4, pc}

08008276 <strlcat>:
 8008276:	b570      	push	{r4, r5, r6, lr}
 8008278:	4604      	mov	r4, r0
 800827a:	1916      	adds	r6, r2, r4
 800827c:	4608      	mov	r0, r1
 800827e:	4621      	mov	r1, r4
 8008280:	42b1      	cmp	r1, r6
 8008282:	460b      	mov	r3, r1
 8008284:	d106      	bne.n	8008294 <strlcat+0x1e>
 8008286:	1b1c      	subs	r4, r3, r4
 8008288:	1b12      	subs	r2, r2, r4
 800828a:	d108      	bne.n	800829e <strlcat+0x28>
 800828c:	f7f7 ffa0 	bl	80001d0 <strlen>
 8008290:	4420      	add	r0, r4
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	781d      	ldrb	r5, [r3, #0]
 8008296:	3101      	adds	r1, #1
 8008298:	2d00      	cmp	r5, #0
 800829a:	d1f1      	bne.n	8008280 <strlcat+0xa>
 800829c:	e7f3      	b.n	8008286 <strlcat+0x10>
 800829e:	4606      	mov	r6, r0
 80082a0:	4631      	mov	r1, r6
 80082a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80082a6:	b915      	cbnz	r5, 80082ae <strlcat+0x38>
 80082a8:	701d      	strb	r5, [r3, #0]
 80082aa:	1a08      	subs	r0, r1, r0
 80082ac:	e7f0      	b.n	8008290 <strlcat+0x1a>
 80082ae:	2a01      	cmp	r2, #1
 80082b0:	bf1c      	itt	ne
 80082b2:	f803 5b01 	strbne.w	r5, [r3], #1
 80082b6:	f102 32ff 	addne.w	r2, r2, #4294967295
 80082ba:	e7f1      	b.n	80082a0 <strlcat+0x2a>

080082bc <strlcpy>:
 80082bc:	b510      	push	{r4, lr}
 80082be:	460b      	mov	r3, r1
 80082c0:	b162      	cbz	r2, 80082dc <strlcpy+0x20>
 80082c2:	3a01      	subs	r2, #1
 80082c4:	d008      	beq.n	80082d8 <strlcpy+0x1c>
 80082c6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80082ca:	f800 4b01 	strb.w	r4, [r0], #1
 80082ce:	2c00      	cmp	r4, #0
 80082d0:	d1f7      	bne.n	80082c2 <strlcpy+0x6>
 80082d2:	1a58      	subs	r0, r3, r1
 80082d4:	3801      	subs	r0, #1
 80082d6:	bd10      	pop	{r4, pc}
 80082d8:	2200      	movs	r2, #0
 80082da:	7002      	strb	r2, [r0, #0]
 80082dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e0:	2a00      	cmp	r2, #0
 80082e2:	d1fb      	bne.n	80082dc <strlcpy+0x20>
 80082e4:	e7f5      	b.n	80082d2 <strlcpy+0x16>

080082e6 <strncpy>:
 80082e6:	b510      	push	{r4, lr}
 80082e8:	3901      	subs	r1, #1
 80082ea:	4603      	mov	r3, r0
 80082ec:	b132      	cbz	r2, 80082fc <strncpy+0x16>
 80082ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80082f2:	f803 4b01 	strb.w	r4, [r3], #1
 80082f6:	3a01      	subs	r2, #1
 80082f8:	2c00      	cmp	r4, #0
 80082fa:	d1f7      	bne.n	80082ec <strncpy+0x6>
 80082fc:	441a      	add	r2, r3
 80082fe:	2100      	movs	r1, #0
 8008300:	4293      	cmp	r3, r2
 8008302:	d100      	bne.n	8008306 <strncpy+0x20>
 8008304:	bd10      	pop	{r4, pc}
 8008306:	f803 1b01 	strb.w	r1, [r3], #1
 800830a:	e7f9      	b.n	8008300 <strncpy+0x1a>

0800830c <sulp>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	4604      	mov	r4, r0
 8008310:	460d      	mov	r5, r1
 8008312:	ec45 4b10 	vmov	d0, r4, r5
 8008316:	4616      	mov	r6, r2
 8008318:	f002 fc2e 	bl	800ab78 <__ulp>
 800831c:	ec51 0b10 	vmov	r0, r1, d0
 8008320:	b17e      	cbz	r6, 8008342 <sulp+0x36>
 8008322:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008326:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800832a:	2b00      	cmp	r3, #0
 800832c:	dd09      	ble.n	8008342 <sulp+0x36>
 800832e:	051b      	lsls	r3, r3, #20
 8008330:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008334:	2400      	movs	r4, #0
 8008336:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800833a:	4622      	mov	r2, r4
 800833c:	462b      	mov	r3, r5
 800833e:	f7f8 f95b 	bl	80005f8 <__aeabi_dmul>
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	0000      	movs	r0, r0
	...

08008348 <_strtod_l>:
 8008348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834c:	b0a3      	sub	sp, #140	; 0x8c
 800834e:	461f      	mov	r7, r3
 8008350:	2300      	movs	r3, #0
 8008352:	931e      	str	r3, [sp, #120]	; 0x78
 8008354:	4ba4      	ldr	r3, [pc, #656]	; (80085e8 <_strtod_l+0x2a0>)
 8008356:	9219      	str	r2, [sp, #100]	; 0x64
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	9307      	str	r3, [sp, #28]
 800835c:	4604      	mov	r4, r0
 800835e:	4618      	mov	r0, r3
 8008360:	4688      	mov	r8, r1
 8008362:	f7f7 ff35 	bl	80001d0 <strlen>
 8008366:	f04f 0a00 	mov.w	sl, #0
 800836a:	4605      	mov	r5, r0
 800836c:	f04f 0b00 	mov.w	fp, #0
 8008370:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008376:	781a      	ldrb	r2, [r3, #0]
 8008378:	2a2b      	cmp	r2, #43	; 0x2b
 800837a:	d04c      	beq.n	8008416 <_strtod_l+0xce>
 800837c:	d839      	bhi.n	80083f2 <_strtod_l+0xaa>
 800837e:	2a0d      	cmp	r2, #13
 8008380:	d832      	bhi.n	80083e8 <_strtod_l+0xa0>
 8008382:	2a08      	cmp	r2, #8
 8008384:	d832      	bhi.n	80083ec <_strtod_l+0xa4>
 8008386:	2a00      	cmp	r2, #0
 8008388:	d03c      	beq.n	8008404 <_strtod_l+0xbc>
 800838a:	2300      	movs	r3, #0
 800838c:	930e      	str	r3, [sp, #56]	; 0x38
 800838e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008390:	7833      	ldrb	r3, [r6, #0]
 8008392:	2b30      	cmp	r3, #48	; 0x30
 8008394:	f040 80b4 	bne.w	8008500 <_strtod_l+0x1b8>
 8008398:	7873      	ldrb	r3, [r6, #1]
 800839a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800839e:	2b58      	cmp	r3, #88	; 0x58
 80083a0:	d16c      	bne.n	800847c <_strtod_l+0x134>
 80083a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	ab1e      	add	r3, sp, #120	; 0x78
 80083a8:	9702      	str	r7, [sp, #8]
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	4a8f      	ldr	r2, [pc, #572]	; (80085ec <_strtod_l+0x2a4>)
 80083ae:	ab1f      	add	r3, sp, #124	; 0x7c
 80083b0:	a91d      	add	r1, sp, #116	; 0x74
 80083b2:	4620      	mov	r0, r4
 80083b4:	f001 fd40 	bl	8009e38 <__gethex>
 80083b8:	f010 0707 	ands.w	r7, r0, #7
 80083bc:	4605      	mov	r5, r0
 80083be:	d005      	beq.n	80083cc <_strtod_l+0x84>
 80083c0:	2f06      	cmp	r7, #6
 80083c2:	d12a      	bne.n	800841a <_strtod_l+0xd2>
 80083c4:	3601      	adds	r6, #1
 80083c6:	2300      	movs	r3, #0
 80083c8:	961d      	str	r6, [sp, #116]	; 0x74
 80083ca:	930e      	str	r3, [sp, #56]	; 0x38
 80083cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f040 8596 	bne.w	8008f00 <_strtod_l+0xbb8>
 80083d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d6:	b1db      	cbz	r3, 8008410 <_strtod_l+0xc8>
 80083d8:	4652      	mov	r2, sl
 80083da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083de:	ec43 2b10 	vmov	d0, r2, r3
 80083e2:	b023      	add	sp, #140	; 0x8c
 80083e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e8:	2a20      	cmp	r2, #32
 80083ea:	d1ce      	bne.n	800838a <_strtod_l+0x42>
 80083ec:	3301      	adds	r3, #1
 80083ee:	931d      	str	r3, [sp, #116]	; 0x74
 80083f0:	e7c0      	b.n	8008374 <_strtod_l+0x2c>
 80083f2:	2a2d      	cmp	r2, #45	; 0x2d
 80083f4:	d1c9      	bne.n	800838a <_strtod_l+0x42>
 80083f6:	2201      	movs	r2, #1
 80083f8:	920e      	str	r2, [sp, #56]	; 0x38
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	921d      	str	r2, [sp, #116]	; 0x74
 80083fe:	785b      	ldrb	r3, [r3, #1]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1c4      	bne.n	800838e <_strtod_l+0x46>
 8008404:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008406:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800840a:	2b00      	cmp	r3, #0
 800840c:	f040 8576 	bne.w	8008efc <_strtod_l+0xbb4>
 8008410:	4652      	mov	r2, sl
 8008412:	465b      	mov	r3, fp
 8008414:	e7e3      	b.n	80083de <_strtod_l+0x96>
 8008416:	2200      	movs	r2, #0
 8008418:	e7ee      	b.n	80083f8 <_strtod_l+0xb0>
 800841a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800841c:	b13a      	cbz	r2, 800842e <_strtod_l+0xe6>
 800841e:	2135      	movs	r1, #53	; 0x35
 8008420:	a820      	add	r0, sp, #128	; 0x80
 8008422:	f002 fcb4 	bl	800ad8e <__copybits>
 8008426:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008428:	4620      	mov	r0, r4
 800842a:	f002 f879 	bl	800a520 <_Bfree>
 800842e:	3f01      	subs	r7, #1
 8008430:	2f05      	cmp	r7, #5
 8008432:	d807      	bhi.n	8008444 <_strtod_l+0xfc>
 8008434:	e8df f007 	tbb	[pc, r7]
 8008438:	1d180b0e 	.word	0x1d180b0e
 800843c:	030e      	.short	0x030e
 800843e:	f04f 0b00 	mov.w	fp, #0
 8008442:	46da      	mov	sl, fp
 8008444:	0728      	lsls	r0, r5, #28
 8008446:	d5c1      	bpl.n	80083cc <_strtod_l+0x84>
 8008448:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800844c:	e7be      	b.n	80083cc <_strtod_l+0x84>
 800844e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008452:	e7f7      	b.n	8008444 <_strtod_l+0xfc>
 8008454:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008458:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800845a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800845e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008462:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008466:	e7ed      	b.n	8008444 <_strtod_l+0xfc>
 8008468:	f8df b184 	ldr.w	fp, [pc, #388]	; 80085f0 <_strtod_l+0x2a8>
 800846c:	f04f 0a00 	mov.w	sl, #0
 8008470:	e7e8      	b.n	8008444 <_strtod_l+0xfc>
 8008472:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008476:	f04f 3aff 	mov.w	sl, #4294967295
 800847a:	e7e3      	b.n	8008444 <_strtod_l+0xfc>
 800847c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	921d      	str	r2, [sp, #116]	; 0x74
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	2b30      	cmp	r3, #48	; 0x30
 8008486:	d0f9      	beq.n	800847c <_strtod_l+0x134>
 8008488:	2b00      	cmp	r3, #0
 800848a:	d09f      	beq.n	80083cc <_strtod_l+0x84>
 800848c:	2301      	movs	r3, #1
 800848e:	f04f 0900 	mov.w	r9, #0
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008496:	930a      	str	r3, [sp, #40]	; 0x28
 8008498:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800849c:	464f      	mov	r7, r9
 800849e:	220a      	movs	r2, #10
 80084a0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80084a2:	7806      	ldrb	r6, [r0, #0]
 80084a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80084a8:	b2d9      	uxtb	r1, r3
 80084aa:	2909      	cmp	r1, #9
 80084ac:	d92a      	bls.n	8008504 <_strtod_l+0x1bc>
 80084ae:	9907      	ldr	r1, [sp, #28]
 80084b0:	462a      	mov	r2, r5
 80084b2:	f002 fedd 	bl	800b270 <strncmp>
 80084b6:	b398      	cbz	r0, 8008520 <_strtod_l+0x1d8>
 80084b8:	2000      	movs	r0, #0
 80084ba:	4633      	mov	r3, r6
 80084bc:	463d      	mov	r5, r7
 80084be:	9007      	str	r0, [sp, #28]
 80084c0:	4602      	mov	r2, r0
 80084c2:	2b65      	cmp	r3, #101	; 0x65
 80084c4:	d001      	beq.n	80084ca <_strtod_l+0x182>
 80084c6:	2b45      	cmp	r3, #69	; 0x45
 80084c8:	d118      	bne.n	80084fc <_strtod_l+0x1b4>
 80084ca:	b91d      	cbnz	r5, 80084d4 <_strtod_l+0x18c>
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	4303      	orrs	r3, r0
 80084d0:	d098      	beq.n	8008404 <_strtod_l+0xbc>
 80084d2:	2500      	movs	r5, #0
 80084d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80084d8:	f108 0301 	add.w	r3, r8, #1
 80084dc:	931d      	str	r3, [sp, #116]	; 0x74
 80084de:	f898 3001 	ldrb.w	r3, [r8, #1]
 80084e2:	2b2b      	cmp	r3, #43	; 0x2b
 80084e4:	d075      	beq.n	80085d2 <_strtod_l+0x28a>
 80084e6:	2b2d      	cmp	r3, #45	; 0x2d
 80084e8:	d07b      	beq.n	80085e2 <_strtod_l+0x29a>
 80084ea:	f04f 0c00 	mov.w	ip, #0
 80084ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80084f2:	2909      	cmp	r1, #9
 80084f4:	f240 8082 	bls.w	80085fc <_strtod_l+0x2b4>
 80084f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80084fc:	2600      	movs	r6, #0
 80084fe:	e09d      	b.n	800863c <_strtod_l+0x2f4>
 8008500:	2300      	movs	r3, #0
 8008502:	e7c4      	b.n	800848e <_strtod_l+0x146>
 8008504:	2f08      	cmp	r7, #8
 8008506:	bfd8      	it	le
 8008508:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800850a:	f100 0001 	add.w	r0, r0, #1
 800850e:	bfda      	itte	le
 8008510:	fb02 3301 	mlale	r3, r2, r1, r3
 8008514:	9309      	strle	r3, [sp, #36]	; 0x24
 8008516:	fb02 3909 	mlagt	r9, r2, r9, r3
 800851a:	3701      	adds	r7, #1
 800851c:	901d      	str	r0, [sp, #116]	; 0x74
 800851e:	e7bf      	b.n	80084a0 <_strtod_l+0x158>
 8008520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008522:	195a      	adds	r2, r3, r5
 8008524:	921d      	str	r2, [sp, #116]	; 0x74
 8008526:	5d5b      	ldrb	r3, [r3, r5]
 8008528:	2f00      	cmp	r7, #0
 800852a:	d037      	beq.n	800859c <_strtod_l+0x254>
 800852c:	9007      	str	r0, [sp, #28]
 800852e:	463d      	mov	r5, r7
 8008530:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008534:	2a09      	cmp	r2, #9
 8008536:	d912      	bls.n	800855e <_strtod_l+0x216>
 8008538:	2201      	movs	r2, #1
 800853a:	e7c2      	b.n	80084c2 <_strtod_l+0x17a>
 800853c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	921d      	str	r2, [sp, #116]	; 0x74
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	3001      	adds	r0, #1
 8008546:	2b30      	cmp	r3, #48	; 0x30
 8008548:	d0f8      	beq.n	800853c <_strtod_l+0x1f4>
 800854a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800854e:	2a08      	cmp	r2, #8
 8008550:	f200 84db 	bhi.w	8008f0a <_strtod_l+0xbc2>
 8008554:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008556:	9007      	str	r0, [sp, #28]
 8008558:	2000      	movs	r0, #0
 800855a:	920a      	str	r2, [sp, #40]	; 0x28
 800855c:	4605      	mov	r5, r0
 800855e:	3b30      	subs	r3, #48	; 0x30
 8008560:	f100 0201 	add.w	r2, r0, #1
 8008564:	d014      	beq.n	8008590 <_strtod_l+0x248>
 8008566:	9907      	ldr	r1, [sp, #28]
 8008568:	4411      	add	r1, r2
 800856a:	9107      	str	r1, [sp, #28]
 800856c:	462a      	mov	r2, r5
 800856e:	eb00 0e05 	add.w	lr, r0, r5
 8008572:	210a      	movs	r1, #10
 8008574:	4572      	cmp	r2, lr
 8008576:	d113      	bne.n	80085a0 <_strtod_l+0x258>
 8008578:	182a      	adds	r2, r5, r0
 800857a:	2a08      	cmp	r2, #8
 800857c:	f105 0501 	add.w	r5, r5, #1
 8008580:	4405      	add	r5, r0
 8008582:	dc1c      	bgt.n	80085be <_strtod_l+0x276>
 8008584:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008586:	220a      	movs	r2, #10
 8008588:	fb02 3301 	mla	r3, r2, r1, r3
 800858c:	9309      	str	r3, [sp, #36]	; 0x24
 800858e:	2200      	movs	r2, #0
 8008590:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008592:	1c59      	adds	r1, r3, #1
 8008594:	911d      	str	r1, [sp, #116]	; 0x74
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	4610      	mov	r0, r2
 800859a:	e7c9      	b.n	8008530 <_strtod_l+0x1e8>
 800859c:	4638      	mov	r0, r7
 800859e:	e7d2      	b.n	8008546 <_strtod_l+0x1fe>
 80085a0:	2a08      	cmp	r2, #8
 80085a2:	dc04      	bgt.n	80085ae <_strtod_l+0x266>
 80085a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80085a6:	434e      	muls	r6, r1
 80085a8:	9609      	str	r6, [sp, #36]	; 0x24
 80085aa:	3201      	adds	r2, #1
 80085ac:	e7e2      	b.n	8008574 <_strtod_l+0x22c>
 80085ae:	f102 0c01 	add.w	ip, r2, #1
 80085b2:	f1bc 0f10 	cmp.w	ip, #16
 80085b6:	bfd8      	it	le
 80085b8:	fb01 f909 	mulle.w	r9, r1, r9
 80085bc:	e7f5      	b.n	80085aa <_strtod_l+0x262>
 80085be:	2d10      	cmp	r5, #16
 80085c0:	bfdc      	itt	le
 80085c2:	220a      	movle	r2, #10
 80085c4:	fb02 3909 	mlale	r9, r2, r9, r3
 80085c8:	e7e1      	b.n	800858e <_strtod_l+0x246>
 80085ca:	2300      	movs	r3, #0
 80085cc:	9307      	str	r3, [sp, #28]
 80085ce:	2201      	movs	r2, #1
 80085d0:	e77c      	b.n	80084cc <_strtod_l+0x184>
 80085d2:	f04f 0c00 	mov.w	ip, #0
 80085d6:	f108 0302 	add.w	r3, r8, #2
 80085da:	931d      	str	r3, [sp, #116]	; 0x74
 80085dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80085e0:	e785      	b.n	80084ee <_strtod_l+0x1a6>
 80085e2:	f04f 0c01 	mov.w	ip, #1
 80085e6:	e7f6      	b.n	80085d6 <_strtod_l+0x28e>
 80085e8:	0800d1c8 	.word	0x0800d1c8
 80085ec:	0800cf78 	.word	0x0800cf78
 80085f0:	7ff00000 	.word	0x7ff00000
 80085f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085f6:	1c59      	adds	r1, r3, #1
 80085f8:	911d      	str	r1, [sp, #116]	; 0x74
 80085fa:	785b      	ldrb	r3, [r3, #1]
 80085fc:	2b30      	cmp	r3, #48	; 0x30
 80085fe:	d0f9      	beq.n	80085f4 <_strtod_l+0x2ac>
 8008600:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008604:	2908      	cmp	r1, #8
 8008606:	f63f af79 	bhi.w	80084fc <_strtod_l+0x1b4>
 800860a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800860e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008610:	9308      	str	r3, [sp, #32]
 8008612:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008614:	1c59      	adds	r1, r3, #1
 8008616:	911d      	str	r1, [sp, #116]	; 0x74
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800861e:	2e09      	cmp	r6, #9
 8008620:	d937      	bls.n	8008692 <_strtod_l+0x34a>
 8008622:	9e08      	ldr	r6, [sp, #32]
 8008624:	1b89      	subs	r1, r1, r6
 8008626:	2908      	cmp	r1, #8
 8008628:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800862c:	dc02      	bgt.n	8008634 <_strtod_l+0x2ec>
 800862e:	4576      	cmp	r6, lr
 8008630:	bfa8      	it	ge
 8008632:	4676      	movge	r6, lr
 8008634:	f1bc 0f00 	cmp.w	ip, #0
 8008638:	d000      	beq.n	800863c <_strtod_l+0x2f4>
 800863a:	4276      	negs	r6, r6
 800863c:	2d00      	cmp	r5, #0
 800863e:	d14f      	bne.n	80086e0 <_strtod_l+0x398>
 8008640:	9904      	ldr	r1, [sp, #16]
 8008642:	4301      	orrs	r1, r0
 8008644:	f47f aec2 	bne.w	80083cc <_strtod_l+0x84>
 8008648:	2a00      	cmp	r2, #0
 800864a:	f47f aedb 	bne.w	8008404 <_strtod_l+0xbc>
 800864e:	2b69      	cmp	r3, #105	; 0x69
 8008650:	d027      	beq.n	80086a2 <_strtod_l+0x35a>
 8008652:	dc24      	bgt.n	800869e <_strtod_l+0x356>
 8008654:	2b49      	cmp	r3, #73	; 0x49
 8008656:	d024      	beq.n	80086a2 <_strtod_l+0x35a>
 8008658:	2b4e      	cmp	r3, #78	; 0x4e
 800865a:	f47f aed3 	bne.w	8008404 <_strtod_l+0xbc>
 800865e:	499e      	ldr	r1, [pc, #632]	; (80088d8 <_strtod_l+0x590>)
 8008660:	a81d      	add	r0, sp, #116	; 0x74
 8008662:	f001 fe41 	bl	800a2e8 <__match>
 8008666:	2800      	cmp	r0, #0
 8008668:	f43f aecc 	beq.w	8008404 <_strtod_l+0xbc>
 800866c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b28      	cmp	r3, #40	; 0x28
 8008672:	d12d      	bne.n	80086d0 <_strtod_l+0x388>
 8008674:	4999      	ldr	r1, [pc, #612]	; (80088dc <_strtod_l+0x594>)
 8008676:	aa20      	add	r2, sp, #128	; 0x80
 8008678:	a81d      	add	r0, sp, #116	; 0x74
 800867a:	f001 fe49 	bl	800a310 <__hexnan>
 800867e:	2805      	cmp	r0, #5
 8008680:	d126      	bne.n	80086d0 <_strtod_l+0x388>
 8008682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008684:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008688:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800868c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008690:	e69c      	b.n	80083cc <_strtod_l+0x84>
 8008692:	210a      	movs	r1, #10
 8008694:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008698:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800869c:	e7b9      	b.n	8008612 <_strtod_l+0x2ca>
 800869e:	2b6e      	cmp	r3, #110	; 0x6e
 80086a0:	e7db      	b.n	800865a <_strtod_l+0x312>
 80086a2:	498f      	ldr	r1, [pc, #572]	; (80088e0 <_strtod_l+0x598>)
 80086a4:	a81d      	add	r0, sp, #116	; 0x74
 80086a6:	f001 fe1f 	bl	800a2e8 <__match>
 80086aa:	2800      	cmp	r0, #0
 80086ac:	f43f aeaa 	beq.w	8008404 <_strtod_l+0xbc>
 80086b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086b2:	498c      	ldr	r1, [pc, #560]	; (80088e4 <_strtod_l+0x59c>)
 80086b4:	3b01      	subs	r3, #1
 80086b6:	a81d      	add	r0, sp, #116	; 0x74
 80086b8:	931d      	str	r3, [sp, #116]	; 0x74
 80086ba:	f001 fe15 	bl	800a2e8 <__match>
 80086be:	b910      	cbnz	r0, 80086c6 <_strtod_l+0x37e>
 80086c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086c2:	3301      	adds	r3, #1
 80086c4:	931d      	str	r3, [sp, #116]	; 0x74
 80086c6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80088f4 <_strtod_l+0x5ac>
 80086ca:	f04f 0a00 	mov.w	sl, #0
 80086ce:	e67d      	b.n	80083cc <_strtod_l+0x84>
 80086d0:	4885      	ldr	r0, [pc, #532]	; (80088e8 <_strtod_l+0x5a0>)
 80086d2:	f002 fdb5 	bl	800b240 <nan>
 80086d6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80086da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80086de:	e675      	b.n	80083cc <_strtod_l+0x84>
 80086e0:	9b07      	ldr	r3, [sp, #28]
 80086e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086e4:	1af3      	subs	r3, r6, r3
 80086e6:	2f00      	cmp	r7, #0
 80086e8:	bf08      	it	eq
 80086ea:	462f      	moveq	r7, r5
 80086ec:	2d10      	cmp	r5, #16
 80086ee:	9308      	str	r3, [sp, #32]
 80086f0:	46a8      	mov	r8, r5
 80086f2:	bfa8      	it	ge
 80086f4:	f04f 0810 	movge.w	r8, #16
 80086f8:	f7f7 ff04 	bl	8000504 <__aeabi_ui2d>
 80086fc:	2d09      	cmp	r5, #9
 80086fe:	4682      	mov	sl, r0
 8008700:	468b      	mov	fp, r1
 8008702:	dd13      	ble.n	800872c <_strtod_l+0x3e4>
 8008704:	4b79      	ldr	r3, [pc, #484]	; (80088ec <_strtod_l+0x5a4>)
 8008706:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800870a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	4682      	mov	sl, r0
 8008714:	4648      	mov	r0, r9
 8008716:	468b      	mov	fp, r1
 8008718:	f7f7 fef4 	bl	8000504 <__aeabi_ui2d>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4650      	mov	r0, sl
 8008722:	4659      	mov	r1, fp
 8008724:	f7f7 fdb2 	bl	800028c <__adddf3>
 8008728:	4682      	mov	sl, r0
 800872a:	468b      	mov	fp, r1
 800872c:	2d0f      	cmp	r5, #15
 800872e:	dc38      	bgt.n	80087a2 <_strtod_l+0x45a>
 8008730:	9b08      	ldr	r3, [sp, #32]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f43f ae4a 	beq.w	80083cc <_strtod_l+0x84>
 8008738:	dd24      	ble.n	8008784 <_strtod_l+0x43c>
 800873a:	2b16      	cmp	r3, #22
 800873c:	dc0b      	bgt.n	8008756 <_strtod_l+0x40e>
 800873e:	4d6b      	ldr	r5, [pc, #428]	; (80088ec <_strtod_l+0x5a4>)
 8008740:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008744:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008748:	4652      	mov	r2, sl
 800874a:	465b      	mov	r3, fp
 800874c:	f7f7 ff54 	bl	80005f8 <__aeabi_dmul>
 8008750:	4682      	mov	sl, r0
 8008752:	468b      	mov	fp, r1
 8008754:	e63a      	b.n	80083cc <_strtod_l+0x84>
 8008756:	9a08      	ldr	r2, [sp, #32]
 8008758:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800875c:	4293      	cmp	r3, r2
 800875e:	db20      	blt.n	80087a2 <_strtod_l+0x45a>
 8008760:	4c62      	ldr	r4, [pc, #392]	; (80088ec <_strtod_l+0x5a4>)
 8008762:	f1c5 050f 	rsb	r5, r5, #15
 8008766:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800876a:	4652      	mov	r2, sl
 800876c:	465b      	mov	r3, fp
 800876e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008772:	f7f7 ff41 	bl	80005f8 <__aeabi_dmul>
 8008776:	9b08      	ldr	r3, [sp, #32]
 8008778:	1b5d      	subs	r5, r3, r5
 800877a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800877e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008782:	e7e3      	b.n	800874c <_strtod_l+0x404>
 8008784:	9b08      	ldr	r3, [sp, #32]
 8008786:	3316      	adds	r3, #22
 8008788:	db0b      	blt.n	80087a2 <_strtod_l+0x45a>
 800878a:	9b07      	ldr	r3, [sp, #28]
 800878c:	4a57      	ldr	r2, [pc, #348]	; (80088ec <_strtod_l+0x5a4>)
 800878e:	1b9e      	subs	r6, r3, r6
 8008790:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008794:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008798:	4650      	mov	r0, sl
 800879a:	4659      	mov	r1, fp
 800879c:	f7f8 f856 	bl	800084c <__aeabi_ddiv>
 80087a0:	e7d6      	b.n	8008750 <_strtod_l+0x408>
 80087a2:	9b08      	ldr	r3, [sp, #32]
 80087a4:	eba5 0808 	sub.w	r8, r5, r8
 80087a8:	4498      	add	r8, r3
 80087aa:	f1b8 0f00 	cmp.w	r8, #0
 80087ae:	dd71      	ble.n	8008894 <_strtod_l+0x54c>
 80087b0:	f018 030f 	ands.w	r3, r8, #15
 80087b4:	d00a      	beq.n	80087cc <_strtod_l+0x484>
 80087b6:	494d      	ldr	r1, [pc, #308]	; (80088ec <_strtod_l+0x5a4>)
 80087b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087bc:	4652      	mov	r2, sl
 80087be:	465b      	mov	r3, fp
 80087c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c4:	f7f7 ff18 	bl	80005f8 <__aeabi_dmul>
 80087c8:	4682      	mov	sl, r0
 80087ca:	468b      	mov	fp, r1
 80087cc:	f038 080f 	bics.w	r8, r8, #15
 80087d0:	d04d      	beq.n	800886e <_strtod_l+0x526>
 80087d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80087d6:	dd22      	ble.n	800881e <_strtod_l+0x4d6>
 80087d8:	2500      	movs	r5, #0
 80087da:	462e      	mov	r6, r5
 80087dc:	9509      	str	r5, [sp, #36]	; 0x24
 80087de:	9507      	str	r5, [sp, #28]
 80087e0:	2322      	movs	r3, #34	; 0x22
 80087e2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80088f4 <_strtod_l+0x5ac>
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	f04f 0a00 	mov.w	sl, #0
 80087ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f43f adec 	beq.w	80083cc <_strtod_l+0x84>
 80087f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80087f6:	4620      	mov	r0, r4
 80087f8:	f001 fe92 	bl	800a520 <_Bfree>
 80087fc:	9907      	ldr	r1, [sp, #28]
 80087fe:	4620      	mov	r0, r4
 8008800:	f001 fe8e 	bl	800a520 <_Bfree>
 8008804:	4631      	mov	r1, r6
 8008806:	4620      	mov	r0, r4
 8008808:	f001 fe8a 	bl	800a520 <_Bfree>
 800880c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800880e:	4620      	mov	r0, r4
 8008810:	f001 fe86 	bl	800a520 <_Bfree>
 8008814:	4629      	mov	r1, r5
 8008816:	4620      	mov	r0, r4
 8008818:	f001 fe82 	bl	800a520 <_Bfree>
 800881c:	e5d6      	b.n	80083cc <_strtod_l+0x84>
 800881e:	2300      	movs	r3, #0
 8008820:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008824:	4650      	mov	r0, sl
 8008826:	4659      	mov	r1, fp
 8008828:	4699      	mov	r9, r3
 800882a:	f1b8 0f01 	cmp.w	r8, #1
 800882e:	dc21      	bgt.n	8008874 <_strtod_l+0x52c>
 8008830:	b10b      	cbz	r3, 8008836 <_strtod_l+0x4ee>
 8008832:	4682      	mov	sl, r0
 8008834:	468b      	mov	fp, r1
 8008836:	4b2e      	ldr	r3, [pc, #184]	; (80088f0 <_strtod_l+0x5a8>)
 8008838:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800883c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008840:	4652      	mov	r2, sl
 8008842:	465b      	mov	r3, fp
 8008844:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008848:	f7f7 fed6 	bl	80005f8 <__aeabi_dmul>
 800884c:	4b29      	ldr	r3, [pc, #164]	; (80088f4 <_strtod_l+0x5ac>)
 800884e:	460a      	mov	r2, r1
 8008850:	400b      	ands	r3, r1
 8008852:	4929      	ldr	r1, [pc, #164]	; (80088f8 <_strtod_l+0x5b0>)
 8008854:	428b      	cmp	r3, r1
 8008856:	4682      	mov	sl, r0
 8008858:	d8be      	bhi.n	80087d8 <_strtod_l+0x490>
 800885a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800885e:	428b      	cmp	r3, r1
 8008860:	bf86      	itte	hi
 8008862:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80088fc <_strtod_l+0x5b4>
 8008866:	f04f 3aff 	movhi.w	sl, #4294967295
 800886a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800886e:	2300      	movs	r3, #0
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	e081      	b.n	8008978 <_strtod_l+0x630>
 8008874:	f018 0f01 	tst.w	r8, #1
 8008878:	d007      	beq.n	800888a <_strtod_l+0x542>
 800887a:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <_strtod_l+0x5a8>)
 800887c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f7 feb8 	bl	80005f8 <__aeabi_dmul>
 8008888:	2301      	movs	r3, #1
 800888a:	f109 0901 	add.w	r9, r9, #1
 800888e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008892:	e7ca      	b.n	800882a <_strtod_l+0x4e2>
 8008894:	d0eb      	beq.n	800886e <_strtod_l+0x526>
 8008896:	f1c8 0800 	rsb	r8, r8, #0
 800889a:	f018 020f 	ands.w	r2, r8, #15
 800889e:	d00a      	beq.n	80088b6 <_strtod_l+0x56e>
 80088a0:	4b12      	ldr	r3, [pc, #72]	; (80088ec <_strtod_l+0x5a4>)
 80088a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088a6:	4650      	mov	r0, sl
 80088a8:	4659      	mov	r1, fp
 80088aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ae:	f7f7 ffcd 	bl	800084c <__aeabi_ddiv>
 80088b2:	4682      	mov	sl, r0
 80088b4:	468b      	mov	fp, r1
 80088b6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80088ba:	d0d8      	beq.n	800886e <_strtod_l+0x526>
 80088bc:	f1b8 0f1f 	cmp.w	r8, #31
 80088c0:	dd1e      	ble.n	8008900 <_strtod_l+0x5b8>
 80088c2:	2500      	movs	r5, #0
 80088c4:	462e      	mov	r6, r5
 80088c6:	9509      	str	r5, [sp, #36]	; 0x24
 80088c8:	9507      	str	r5, [sp, #28]
 80088ca:	2322      	movs	r3, #34	; 0x22
 80088cc:	f04f 0a00 	mov.w	sl, #0
 80088d0:	f04f 0b00 	mov.w	fp, #0
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	e789      	b.n	80087ec <_strtod_l+0x4a4>
 80088d8:	0800cf49 	.word	0x0800cf49
 80088dc:	0800cf8c 	.word	0x0800cf8c
 80088e0:	0800cf41 	.word	0x0800cf41
 80088e4:	0800d0cc 	.word	0x0800d0cc
 80088e8:	0800d388 	.word	0x0800d388
 80088ec:	0800d268 	.word	0x0800d268
 80088f0:	0800d240 	.word	0x0800d240
 80088f4:	7ff00000 	.word	0x7ff00000
 80088f8:	7ca00000 	.word	0x7ca00000
 80088fc:	7fefffff 	.word	0x7fefffff
 8008900:	f018 0310 	ands.w	r3, r8, #16
 8008904:	bf18      	it	ne
 8008906:	236a      	movne	r3, #106	; 0x6a
 8008908:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008cc0 <_strtod_l+0x978>
 800890c:	9304      	str	r3, [sp, #16]
 800890e:	4650      	mov	r0, sl
 8008910:	4659      	mov	r1, fp
 8008912:	2300      	movs	r3, #0
 8008914:	f018 0f01 	tst.w	r8, #1
 8008918:	d004      	beq.n	8008924 <_strtod_l+0x5dc>
 800891a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800891e:	f7f7 fe6b 	bl	80005f8 <__aeabi_dmul>
 8008922:	2301      	movs	r3, #1
 8008924:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008928:	f109 0908 	add.w	r9, r9, #8
 800892c:	d1f2      	bne.n	8008914 <_strtod_l+0x5cc>
 800892e:	b10b      	cbz	r3, 8008934 <_strtod_l+0x5ec>
 8008930:	4682      	mov	sl, r0
 8008932:	468b      	mov	fp, r1
 8008934:	9b04      	ldr	r3, [sp, #16]
 8008936:	b1bb      	cbz	r3, 8008968 <_strtod_l+0x620>
 8008938:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800893c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008940:	2b00      	cmp	r3, #0
 8008942:	4659      	mov	r1, fp
 8008944:	dd10      	ble.n	8008968 <_strtod_l+0x620>
 8008946:	2b1f      	cmp	r3, #31
 8008948:	f340 8128 	ble.w	8008b9c <_strtod_l+0x854>
 800894c:	2b34      	cmp	r3, #52	; 0x34
 800894e:	bfde      	ittt	le
 8008950:	3b20      	suble	r3, #32
 8008952:	f04f 32ff 	movle.w	r2, #4294967295
 8008956:	fa02 f303 	lslle.w	r3, r2, r3
 800895a:	f04f 0a00 	mov.w	sl, #0
 800895e:	bfcc      	ite	gt
 8008960:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008964:	ea03 0b01 	andle.w	fp, r3, r1
 8008968:	2200      	movs	r2, #0
 800896a:	2300      	movs	r3, #0
 800896c:	4650      	mov	r0, sl
 800896e:	4659      	mov	r1, fp
 8008970:	f7f8 f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008974:	2800      	cmp	r0, #0
 8008976:	d1a4      	bne.n	80088c2 <_strtod_l+0x57a>
 8008978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800897e:	462b      	mov	r3, r5
 8008980:	463a      	mov	r2, r7
 8008982:	4620      	mov	r0, r4
 8008984:	f001 fe38 	bl	800a5f8 <__s2b>
 8008988:	9009      	str	r0, [sp, #36]	; 0x24
 800898a:	2800      	cmp	r0, #0
 800898c:	f43f af24 	beq.w	80087d8 <_strtod_l+0x490>
 8008990:	9b07      	ldr	r3, [sp, #28]
 8008992:	1b9e      	subs	r6, r3, r6
 8008994:	9b08      	ldr	r3, [sp, #32]
 8008996:	2b00      	cmp	r3, #0
 8008998:	bfb4      	ite	lt
 800899a:	4633      	movlt	r3, r6
 800899c:	2300      	movge	r3, #0
 800899e:	9310      	str	r3, [sp, #64]	; 0x40
 80089a0:	9b08      	ldr	r3, [sp, #32]
 80089a2:	2500      	movs	r5, #0
 80089a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80089a8:	9318      	str	r3, [sp, #96]	; 0x60
 80089aa:	462e      	mov	r6, r5
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	4620      	mov	r0, r4
 80089b0:	6859      	ldr	r1, [r3, #4]
 80089b2:	f001 fd75 	bl	800a4a0 <_Balloc>
 80089b6:	9007      	str	r0, [sp, #28]
 80089b8:	2800      	cmp	r0, #0
 80089ba:	f43f af11 	beq.w	80087e0 <_strtod_l+0x498>
 80089be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	3202      	adds	r2, #2
 80089c4:	f103 010c 	add.w	r1, r3, #12
 80089c8:	0092      	lsls	r2, r2, #2
 80089ca:	300c      	adds	r0, #12
 80089cc:	f001 fd5a 	bl	800a484 <memcpy>
 80089d0:	ec4b ab10 	vmov	d0, sl, fp
 80089d4:	aa20      	add	r2, sp, #128	; 0x80
 80089d6:	a91f      	add	r1, sp, #124	; 0x7c
 80089d8:	4620      	mov	r0, r4
 80089da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80089de:	f002 f947 	bl	800ac70 <__d2b>
 80089e2:	901e      	str	r0, [sp, #120]	; 0x78
 80089e4:	2800      	cmp	r0, #0
 80089e6:	f43f aefb 	beq.w	80087e0 <_strtod_l+0x498>
 80089ea:	2101      	movs	r1, #1
 80089ec:	4620      	mov	r0, r4
 80089ee:	f001 fe9d 	bl	800a72c <__i2b>
 80089f2:	4606      	mov	r6, r0
 80089f4:	2800      	cmp	r0, #0
 80089f6:	f43f aef3 	beq.w	80087e0 <_strtod_l+0x498>
 80089fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80089fc:	9904      	ldr	r1, [sp, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bfab      	itete	ge
 8008a02:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008a04:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008a06:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008a08:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008a0c:	bfac      	ite	ge
 8008a0e:	eb03 0902 	addge.w	r9, r3, r2
 8008a12:	1ad7      	sublt	r7, r2, r3
 8008a14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008a16:	eba3 0801 	sub.w	r8, r3, r1
 8008a1a:	4490      	add	r8, r2
 8008a1c:	4ba3      	ldr	r3, [pc, #652]	; (8008cac <_strtod_l+0x964>)
 8008a1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a22:	4598      	cmp	r8, r3
 8008a24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a28:	f280 80cc 	bge.w	8008bc4 <_strtod_l+0x87c>
 8008a2c:	eba3 0308 	sub.w	r3, r3, r8
 8008a30:	2b1f      	cmp	r3, #31
 8008a32:	eba2 0203 	sub.w	r2, r2, r3
 8008a36:	f04f 0101 	mov.w	r1, #1
 8008a3a:	f300 80b6 	bgt.w	8008baa <_strtod_l+0x862>
 8008a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a42:	9311      	str	r3, [sp, #68]	; 0x44
 8008a44:	2300      	movs	r3, #0
 8008a46:	930c      	str	r3, [sp, #48]	; 0x30
 8008a48:	eb09 0802 	add.w	r8, r9, r2
 8008a4c:	9b04      	ldr	r3, [sp, #16]
 8008a4e:	45c1      	cmp	r9, r8
 8008a50:	4417      	add	r7, r2
 8008a52:	441f      	add	r7, r3
 8008a54:	464b      	mov	r3, r9
 8008a56:	bfa8      	it	ge
 8008a58:	4643      	movge	r3, r8
 8008a5a:	42bb      	cmp	r3, r7
 8008a5c:	bfa8      	it	ge
 8008a5e:	463b      	movge	r3, r7
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bfc2      	ittt	gt
 8008a64:	eba8 0803 	subgt.w	r8, r8, r3
 8008a68:	1aff      	subgt	r7, r7, r3
 8008a6a:	eba9 0903 	subgt.w	r9, r9, r3
 8008a6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dd17      	ble.n	8008aa4 <_strtod_l+0x75c>
 8008a74:	4631      	mov	r1, r6
 8008a76:	461a      	mov	r2, r3
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f001 ff13 	bl	800a8a4 <__pow5mult>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	2800      	cmp	r0, #0
 8008a82:	f43f aead 	beq.w	80087e0 <_strtod_l+0x498>
 8008a86:	4601      	mov	r1, r0
 8008a88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f001 fe64 	bl	800a758 <__multiply>
 8008a90:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f43f aea4 	beq.w	80087e0 <_strtod_l+0x498>
 8008a98:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f001 fd40 	bl	800a520 <_Bfree>
 8008aa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aa2:	931e      	str	r3, [sp, #120]	; 0x78
 8008aa4:	f1b8 0f00 	cmp.w	r8, #0
 8008aa8:	f300 8091 	bgt.w	8008bce <_strtod_l+0x886>
 8008aac:	9b08      	ldr	r3, [sp, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dd08      	ble.n	8008ac4 <_strtod_l+0x77c>
 8008ab2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ab4:	9907      	ldr	r1, [sp, #28]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f001 fef4 	bl	800a8a4 <__pow5mult>
 8008abc:	9007      	str	r0, [sp, #28]
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f43f ae8e 	beq.w	80087e0 <_strtod_l+0x498>
 8008ac4:	2f00      	cmp	r7, #0
 8008ac6:	dd08      	ble.n	8008ada <_strtod_l+0x792>
 8008ac8:	9907      	ldr	r1, [sp, #28]
 8008aca:	463a      	mov	r2, r7
 8008acc:	4620      	mov	r0, r4
 8008ace:	f001 ff43 	bl	800a958 <__lshift>
 8008ad2:	9007      	str	r0, [sp, #28]
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	f43f ae83 	beq.w	80087e0 <_strtod_l+0x498>
 8008ada:	f1b9 0f00 	cmp.w	r9, #0
 8008ade:	dd08      	ble.n	8008af2 <_strtod_l+0x7aa>
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	464a      	mov	r2, r9
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f001 ff37 	bl	800a958 <__lshift>
 8008aea:	4606      	mov	r6, r0
 8008aec:	2800      	cmp	r0, #0
 8008aee:	f43f ae77 	beq.w	80087e0 <_strtod_l+0x498>
 8008af2:	9a07      	ldr	r2, [sp, #28]
 8008af4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008af6:	4620      	mov	r0, r4
 8008af8:	f001 ffb6 	bl	800aa68 <__mdiff>
 8008afc:	4605      	mov	r5, r0
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f43f ae6e 	beq.w	80087e0 <_strtod_l+0x498>
 8008b04:	68c3      	ldr	r3, [r0, #12]
 8008b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60c3      	str	r3, [r0, #12]
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	f001 ff8f 	bl	800aa30 <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	da65      	bge.n	8008be2 <_strtod_l+0x89a>
 8008b16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b18:	ea53 030a 	orrs.w	r3, r3, sl
 8008b1c:	f040 8087 	bne.w	8008c2e <_strtod_l+0x8e6>
 8008b20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f040 8082 	bne.w	8008c2e <_strtod_l+0x8e6>
 8008b2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b2e:	0d1b      	lsrs	r3, r3, #20
 8008b30:	051b      	lsls	r3, r3, #20
 8008b32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b36:	d97a      	bls.n	8008c2e <_strtod_l+0x8e6>
 8008b38:	696b      	ldr	r3, [r5, #20]
 8008b3a:	b913      	cbnz	r3, 8008b42 <_strtod_l+0x7fa>
 8008b3c:	692b      	ldr	r3, [r5, #16]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	dd75      	ble.n	8008c2e <_strtod_l+0x8e6>
 8008b42:	4629      	mov	r1, r5
 8008b44:	2201      	movs	r2, #1
 8008b46:	4620      	mov	r0, r4
 8008b48:	f001 ff06 	bl	800a958 <__lshift>
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4605      	mov	r5, r0
 8008b50:	f001 ff6e 	bl	800aa30 <__mcmp>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	dd6a      	ble.n	8008c2e <_strtod_l+0x8e6>
 8008b58:	9904      	ldr	r1, [sp, #16]
 8008b5a:	4a55      	ldr	r2, [pc, #340]	; (8008cb0 <_strtod_l+0x968>)
 8008b5c:	465b      	mov	r3, fp
 8008b5e:	2900      	cmp	r1, #0
 8008b60:	f000 8085 	beq.w	8008c6e <_strtod_l+0x926>
 8008b64:	ea02 010b 	and.w	r1, r2, fp
 8008b68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b6c:	dc7f      	bgt.n	8008c6e <_strtod_l+0x926>
 8008b6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b72:	f77f aeaa 	ble.w	80088ca <_strtod_l+0x582>
 8008b76:	4a4f      	ldr	r2, [pc, #316]	; (8008cb4 <_strtod_l+0x96c>)
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008b7e:	4650      	mov	r0, sl
 8008b80:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008b84:	4659      	mov	r1, fp
 8008b86:	f7f7 fd37 	bl	80005f8 <__aeabi_dmul>
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4303      	orrs	r3, r0
 8008b8e:	bf08      	it	eq
 8008b90:	2322      	moveq	r3, #34	; 0x22
 8008b92:	4682      	mov	sl, r0
 8008b94:	468b      	mov	fp, r1
 8008b96:	bf08      	it	eq
 8008b98:	6023      	streq	r3, [r4, #0]
 8008b9a:	e62b      	b.n	80087f4 <_strtod_l+0x4ac>
 8008b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	ea03 0a0a 	and.w	sl, r3, sl
 8008ba8:	e6de      	b.n	8008968 <_strtod_l+0x620>
 8008baa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008bae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008bb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008bb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008bba:	fa01 f308 	lsl.w	r3, r1, r8
 8008bbe:	930c      	str	r3, [sp, #48]	; 0x30
 8008bc0:	9111      	str	r1, [sp, #68]	; 0x44
 8008bc2:	e741      	b.n	8008a48 <_strtod_l+0x700>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	930c      	str	r3, [sp, #48]	; 0x30
 8008bc8:	2301      	movs	r3, #1
 8008bca:	9311      	str	r3, [sp, #68]	; 0x44
 8008bcc:	e73c      	b.n	8008a48 <_strtod_l+0x700>
 8008bce:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f001 fec0 	bl	800a958 <__lshift>
 8008bd8:	901e      	str	r0, [sp, #120]	; 0x78
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	f47f af66 	bne.w	8008aac <_strtod_l+0x764>
 8008be0:	e5fe      	b.n	80087e0 <_strtod_l+0x498>
 8008be2:	465f      	mov	r7, fp
 8008be4:	d16e      	bne.n	8008cc4 <_strtod_l+0x97c>
 8008be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008be8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bec:	b342      	cbz	r2, 8008c40 <_strtod_l+0x8f8>
 8008bee:	4a32      	ldr	r2, [pc, #200]	; (8008cb8 <_strtod_l+0x970>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d128      	bne.n	8008c46 <_strtod_l+0x8fe>
 8008bf4:	9b04      	ldr	r3, [sp, #16]
 8008bf6:	4650      	mov	r0, sl
 8008bf8:	b1eb      	cbz	r3, 8008c36 <_strtod_l+0x8ee>
 8008bfa:	4a2d      	ldr	r2, [pc, #180]	; (8008cb0 <_strtod_l+0x968>)
 8008bfc:	403a      	ands	r2, r7
 8008bfe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008c02:	f04f 31ff 	mov.w	r1, #4294967295
 8008c06:	d819      	bhi.n	8008c3c <_strtod_l+0x8f4>
 8008c08:	0d12      	lsrs	r2, r2, #20
 8008c0a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c12:	4298      	cmp	r0, r3
 8008c14:	d117      	bne.n	8008c46 <_strtod_l+0x8fe>
 8008c16:	4b29      	ldr	r3, [pc, #164]	; (8008cbc <_strtod_l+0x974>)
 8008c18:	429f      	cmp	r7, r3
 8008c1a:	d102      	bne.n	8008c22 <_strtod_l+0x8da>
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	f43f addf 	beq.w	80087e0 <_strtod_l+0x498>
 8008c22:	4b23      	ldr	r3, [pc, #140]	; (8008cb0 <_strtod_l+0x968>)
 8008c24:	403b      	ands	r3, r7
 8008c26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008c2a:	f04f 0a00 	mov.w	sl, #0
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1a0      	bne.n	8008b76 <_strtod_l+0x82e>
 8008c34:	e5de      	b.n	80087f4 <_strtod_l+0x4ac>
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3a:	e7ea      	b.n	8008c12 <_strtod_l+0x8ca>
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	e7e8      	b.n	8008c12 <_strtod_l+0x8ca>
 8008c40:	ea53 030a 	orrs.w	r3, r3, sl
 8008c44:	d088      	beq.n	8008b58 <_strtod_l+0x810>
 8008c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c48:	b1db      	cbz	r3, 8008c82 <_strtod_l+0x93a>
 8008c4a:	423b      	tst	r3, r7
 8008c4c:	d0ef      	beq.n	8008c2e <_strtod_l+0x8e6>
 8008c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c50:	9a04      	ldr	r2, [sp, #16]
 8008c52:	4650      	mov	r0, sl
 8008c54:	4659      	mov	r1, fp
 8008c56:	b1c3      	cbz	r3, 8008c8a <_strtod_l+0x942>
 8008c58:	f7ff fb58 	bl	800830c <sulp>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c64:	f7f7 fb12 	bl	800028c <__adddf3>
 8008c68:	4682      	mov	sl, r0
 8008c6a:	468b      	mov	fp, r1
 8008c6c:	e7df      	b.n	8008c2e <_strtod_l+0x8e6>
 8008c6e:	4013      	ands	r3, r2
 8008c70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008c78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008c7c:	f04f 3aff 	mov.w	sl, #4294967295
 8008c80:	e7d5      	b.n	8008c2e <_strtod_l+0x8e6>
 8008c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c84:	ea13 0f0a 	tst.w	r3, sl
 8008c88:	e7e0      	b.n	8008c4c <_strtod_l+0x904>
 8008c8a:	f7ff fb3f 	bl	800830c <sulp>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c96:	f7f7 faf7 	bl	8000288 <__aeabi_dsub>
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	468b      	mov	fp, r1
 8008ca2:	f7f7 ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d0c1      	beq.n	8008c2e <_strtod_l+0x8e6>
 8008caa:	e60e      	b.n	80088ca <_strtod_l+0x582>
 8008cac:	fffffc02 	.word	0xfffffc02
 8008cb0:	7ff00000 	.word	0x7ff00000
 8008cb4:	39500000 	.word	0x39500000
 8008cb8:	000fffff 	.word	0x000fffff
 8008cbc:	7fefffff 	.word	0x7fefffff
 8008cc0:	0800cfa0 	.word	0x0800cfa0
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f002 f82e 	bl	800ad28 <__ratio>
 8008ccc:	ec59 8b10 	vmov	r8, r9, d0
 8008cd0:	ee10 0a10 	vmov	r0, s0
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008cda:	4649      	mov	r1, r9
 8008cdc:	f7f7 ff08 	bl	8000af0 <__aeabi_dcmple>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d07c      	beq.n	8008dde <_strtod_l+0xa96>
 8008ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d04c      	beq.n	8008d84 <_strtod_l+0xa3c>
 8008cea:	4b95      	ldr	r3, [pc, #596]	; (8008f40 <_strtod_l+0xbf8>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008cf2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008f40 <_strtod_l+0xbf8>
 8008cf6:	f04f 0800 	mov.w	r8, #0
 8008cfa:	4b92      	ldr	r3, [pc, #584]	; (8008f44 <_strtod_l+0xbfc>)
 8008cfc:	403b      	ands	r3, r7
 8008cfe:	9311      	str	r3, [sp, #68]	; 0x44
 8008d00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d02:	4b91      	ldr	r3, [pc, #580]	; (8008f48 <_strtod_l+0xc00>)
 8008d04:	429a      	cmp	r2, r3
 8008d06:	f040 80b2 	bne.w	8008e6e <_strtod_l+0xb26>
 8008d0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d12:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008d16:	ec4b ab10 	vmov	d0, sl, fp
 8008d1a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008d1e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d22:	f001 ff29 	bl	800ab78 <__ulp>
 8008d26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d2a:	ec53 2b10 	vmov	r2, r3, d0
 8008d2e:	f7f7 fc63 	bl	80005f8 <__aeabi_dmul>
 8008d32:	4652      	mov	r2, sl
 8008d34:	465b      	mov	r3, fp
 8008d36:	f7f7 faa9 	bl	800028c <__adddf3>
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4981      	ldr	r1, [pc, #516]	; (8008f44 <_strtod_l+0xbfc>)
 8008d3e:	4a83      	ldr	r2, [pc, #524]	; (8008f4c <_strtod_l+0xc04>)
 8008d40:	4019      	ands	r1, r3
 8008d42:	4291      	cmp	r1, r2
 8008d44:	4682      	mov	sl, r0
 8008d46:	d95e      	bls.n	8008e06 <_strtod_l+0xabe>
 8008d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d4a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d103      	bne.n	8008d5a <_strtod_l+0xa12>
 8008d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d54:	3301      	adds	r3, #1
 8008d56:	f43f ad43 	beq.w	80087e0 <_strtod_l+0x498>
 8008d5a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008f58 <_strtod_l+0xc10>
 8008d5e:	f04f 3aff 	mov.w	sl, #4294967295
 8008d62:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008d64:	4620      	mov	r0, r4
 8008d66:	f001 fbdb 	bl	800a520 <_Bfree>
 8008d6a:	9907      	ldr	r1, [sp, #28]
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f001 fbd7 	bl	800a520 <_Bfree>
 8008d72:	4631      	mov	r1, r6
 8008d74:	4620      	mov	r0, r4
 8008d76:	f001 fbd3 	bl	800a520 <_Bfree>
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f001 fbcf 	bl	800a520 <_Bfree>
 8008d82:	e613      	b.n	80089ac <_strtod_l+0x664>
 8008d84:	f1ba 0f00 	cmp.w	sl, #0
 8008d88:	d11b      	bne.n	8008dc2 <_strtod_l+0xa7a>
 8008d8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d8e:	b9f3      	cbnz	r3, 8008dce <_strtod_l+0xa86>
 8008d90:	4b6b      	ldr	r3, [pc, #428]	; (8008f40 <_strtod_l+0xbf8>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	4640      	mov	r0, r8
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 fea0 	bl	8000adc <__aeabi_dcmplt>
 8008d9c:	b9d0      	cbnz	r0, 8008dd4 <_strtod_l+0xa8c>
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4649      	mov	r1, r9
 8008da2:	4b6b      	ldr	r3, [pc, #428]	; (8008f50 <_strtod_l+0xc08>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	f7f7 fc27 	bl	80005f8 <__aeabi_dmul>
 8008daa:	4680      	mov	r8, r0
 8008dac:	4689      	mov	r9, r1
 8008dae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008db2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008db6:	931b      	str	r3, [sp, #108]	; 0x6c
 8008db8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008dbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008dc0:	e79b      	b.n	8008cfa <_strtod_l+0x9b2>
 8008dc2:	f1ba 0f01 	cmp.w	sl, #1
 8008dc6:	d102      	bne.n	8008dce <_strtod_l+0xa86>
 8008dc8:	2f00      	cmp	r7, #0
 8008dca:	f43f ad7e 	beq.w	80088ca <_strtod_l+0x582>
 8008dce:	4b61      	ldr	r3, [pc, #388]	; (8008f54 <_strtod_l+0xc0c>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	e78c      	b.n	8008cee <_strtod_l+0x9a6>
 8008dd4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008f50 <_strtod_l+0xc08>
 8008dd8:	f04f 0800 	mov.w	r8, #0
 8008ddc:	e7e7      	b.n	8008dae <_strtod_l+0xa66>
 8008dde:	4b5c      	ldr	r3, [pc, #368]	; (8008f50 <_strtod_l+0xc08>)
 8008de0:	4640      	mov	r0, r8
 8008de2:	4649      	mov	r1, r9
 8008de4:	2200      	movs	r2, #0
 8008de6:	f7f7 fc07 	bl	80005f8 <__aeabi_dmul>
 8008dea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dec:	4680      	mov	r8, r0
 8008dee:	4689      	mov	r9, r1
 8008df0:	b933      	cbnz	r3, 8008e00 <_strtod_l+0xab8>
 8008df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008df6:	9012      	str	r0, [sp, #72]	; 0x48
 8008df8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008dfa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008dfe:	e7dd      	b.n	8008dbc <_strtod_l+0xa74>
 8008e00:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008e04:	e7f9      	b.n	8008dfa <_strtod_l+0xab2>
 8008e06:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008e0a:	9b04      	ldr	r3, [sp, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1a8      	bne.n	8008d62 <_strtod_l+0xa1a>
 8008e10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e16:	0d1b      	lsrs	r3, r3, #20
 8008e18:	051b      	lsls	r3, r3, #20
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d1a1      	bne.n	8008d62 <_strtod_l+0xa1a>
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 ff31 	bl	8000c88 <__aeabi_d2lz>
 8008e26:	f7f7 fbb9 	bl	800059c <__aeabi_l2d>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fa29 	bl	8000288 <__aeabi_dsub>
 8008e36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e3c:	ea43 030a 	orr.w	r3, r3, sl
 8008e40:	4313      	orrs	r3, r2
 8008e42:	4680      	mov	r8, r0
 8008e44:	4689      	mov	r9, r1
 8008e46:	d053      	beq.n	8008ef0 <_strtod_l+0xba8>
 8008e48:	a335      	add	r3, pc, #212	; (adr r3, 8008f20 <_strtod_l+0xbd8>)
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	f7f7 fe45 	bl	8000adc <__aeabi_dcmplt>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	f47f acce 	bne.w	80087f4 <_strtod_l+0x4ac>
 8008e58:	a333      	add	r3, pc, #204	; (adr r3, 8008f28 <_strtod_l+0xbe0>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	4640      	mov	r0, r8
 8008e60:	4649      	mov	r1, r9
 8008e62:	f7f7 fe59 	bl	8000b18 <__aeabi_dcmpgt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f43f af7b 	beq.w	8008d62 <_strtod_l+0xa1a>
 8008e6c:	e4c2      	b.n	80087f4 <_strtod_l+0x4ac>
 8008e6e:	9b04      	ldr	r3, [sp, #16]
 8008e70:	b333      	cbz	r3, 8008ec0 <_strtod_l+0xb78>
 8008e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e78:	d822      	bhi.n	8008ec0 <_strtod_l+0xb78>
 8008e7a:	a32d      	add	r3, pc, #180	; (adr r3, 8008f30 <_strtod_l+0xbe8>)
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	4640      	mov	r0, r8
 8008e82:	4649      	mov	r1, r9
 8008e84:	f7f7 fe34 	bl	8000af0 <__aeabi_dcmple>
 8008e88:	b1a0      	cbz	r0, 8008eb4 <_strtod_l+0xb6c>
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	f7f7 fe8b 	bl	8000ba8 <__aeabi_d2uiz>
 8008e92:	2801      	cmp	r0, #1
 8008e94:	bf38      	it	cc
 8008e96:	2001      	movcc	r0, #1
 8008e98:	f7f7 fb34 	bl	8000504 <__aeabi_ui2d>
 8008e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	4689      	mov	r9, r1
 8008ea2:	bb13      	cbnz	r3, 8008eea <_strtod_l+0xba2>
 8008ea4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ea8:	9014      	str	r0, [sp, #80]	; 0x50
 8008eaa:	9315      	str	r3, [sp, #84]	; 0x54
 8008eac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008eb0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008eb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008ebc:	1a9b      	subs	r3, r3, r2
 8008ebe:	930d      	str	r3, [sp, #52]	; 0x34
 8008ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ec4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008ec8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ecc:	f001 fe54 	bl	800ab78 <__ulp>
 8008ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ed4:	ec53 2b10 	vmov	r2, r3, d0
 8008ed8:	f7f7 fb8e 	bl	80005f8 <__aeabi_dmul>
 8008edc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ee0:	f7f7 f9d4 	bl	800028c <__adddf3>
 8008ee4:	4682      	mov	sl, r0
 8008ee6:	468b      	mov	fp, r1
 8008ee8:	e78f      	b.n	8008e0a <_strtod_l+0xac2>
 8008eea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008eee:	e7dd      	b.n	8008eac <_strtod_l+0xb64>
 8008ef0:	a311      	add	r3, pc, #68	; (adr r3, 8008f38 <_strtod_l+0xbf0>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	f7f7 fdf1 	bl	8000adc <__aeabi_dcmplt>
 8008efa:	e7b4      	b.n	8008e66 <_strtod_l+0xb1e>
 8008efc:	2300      	movs	r3, #0
 8008efe:	930e      	str	r3, [sp, #56]	; 0x38
 8008f00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	f7ff ba65 	b.w	80083d4 <_strtod_l+0x8c>
 8008f0a:	2b65      	cmp	r3, #101	; 0x65
 8008f0c:	f43f ab5d 	beq.w	80085ca <_strtod_l+0x282>
 8008f10:	2b45      	cmp	r3, #69	; 0x45
 8008f12:	f43f ab5a 	beq.w	80085ca <_strtod_l+0x282>
 8008f16:	2201      	movs	r2, #1
 8008f18:	f7ff bb92 	b.w	8008640 <_strtod_l+0x2f8>
 8008f1c:	f3af 8000 	nop.w
 8008f20:	94a03595 	.word	0x94a03595
 8008f24:	3fdfffff 	.word	0x3fdfffff
 8008f28:	35afe535 	.word	0x35afe535
 8008f2c:	3fe00000 	.word	0x3fe00000
 8008f30:	ffc00000 	.word	0xffc00000
 8008f34:	41dfffff 	.word	0x41dfffff
 8008f38:	94a03595 	.word	0x94a03595
 8008f3c:	3fcfffff 	.word	0x3fcfffff
 8008f40:	3ff00000 	.word	0x3ff00000
 8008f44:	7ff00000 	.word	0x7ff00000
 8008f48:	7fe00000 	.word	0x7fe00000
 8008f4c:	7c9fffff 	.word	0x7c9fffff
 8008f50:	3fe00000 	.word	0x3fe00000
 8008f54:	bff00000 	.word	0xbff00000
 8008f58:	7fefffff 	.word	0x7fefffff

08008f5c <_strtod_r>:
 8008f5c:	4b01      	ldr	r3, [pc, #4]	; (8008f64 <_strtod_r+0x8>)
 8008f5e:	f7ff b9f3 	b.w	8008348 <_strtod_l>
 8008f62:	bf00      	nop
 8008f64:	200001d8 	.word	0x200001d8

08008f68 <_strtol_l.isra.0>:
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f6e:	d001      	beq.n	8008f74 <_strtol_l.isra.0+0xc>
 8008f70:	2b24      	cmp	r3, #36	; 0x24
 8008f72:	d906      	bls.n	8008f82 <_strtol_l.isra.0+0x1a>
 8008f74:	f7fe fa9e 	bl	80074b4 <__errno>
 8008f78:	2316      	movs	r3, #22
 8008f7a:	6003      	str	r3, [r0, #0]
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f82:	4f3a      	ldr	r7, [pc, #232]	; (800906c <_strtol_l.isra.0+0x104>)
 8008f84:	468e      	mov	lr, r1
 8008f86:	4676      	mov	r6, lr
 8008f88:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008f8c:	5de5      	ldrb	r5, [r4, r7]
 8008f8e:	f015 0508 	ands.w	r5, r5, #8
 8008f92:	d1f8      	bne.n	8008f86 <_strtol_l.isra.0+0x1e>
 8008f94:	2c2d      	cmp	r4, #45	; 0x2d
 8008f96:	d134      	bne.n	8009002 <_strtol_l.isra.0+0x9a>
 8008f98:	f89e 4000 	ldrb.w	r4, [lr]
 8008f9c:	f04f 0801 	mov.w	r8, #1
 8008fa0:	f106 0e02 	add.w	lr, r6, #2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d05c      	beq.n	8009062 <_strtol_l.isra.0+0xfa>
 8008fa8:	2b10      	cmp	r3, #16
 8008faa:	d10c      	bne.n	8008fc6 <_strtol_l.isra.0+0x5e>
 8008fac:	2c30      	cmp	r4, #48	; 0x30
 8008fae:	d10a      	bne.n	8008fc6 <_strtol_l.isra.0+0x5e>
 8008fb0:	f89e 4000 	ldrb.w	r4, [lr]
 8008fb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008fb8:	2c58      	cmp	r4, #88	; 0x58
 8008fba:	d14d      	bne.n	8009058 <_strtol_l.isra.0+0xf0>
 8008fbc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008fc0:	2310      	movs	r3, #16
 8008fc2:	f10e 0e02 	add.w	lr, lr, #2
 8008fc6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008fca:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008fce:	2600      	movs	r6, #0
 8008fd0:	fbbc f9f3 	udiv	r9, ip, r3
 8008fd4:	4635      	mov	r5, r6
 8008fd6:	fb03 ca19 	mls	sl, r3, r9, ip
 8008fda:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008fde:	2f09      	cmp	r7, #9
 8008fe0:	d818      	bhi.n	8009014 <_strtol_l.isra.0+0xac>
 8008fe2:	463c      	mov	r4, r7
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	dd24      	ble.n	8009032 <_strtol_l.isra.0+0xca>
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	db1f      	blt.n	800902c <_strtol_l.isra.0+0xc4>
 8008fec:	45a9      	cmp	r9, r5
 8008fee:	d31d      	bcc.n	800902c <_strtol_l.isra.0+0xc4>
 8008ff0:	d101      	bne.n	8008ff6 <_strtol_l.isra.0+0x8e>
 8008ff2:	45a2      	cmp	sl, r4
 8008ff4:	db1a      	blt.n	800902c <_strtol_l.isra.0+0xc4>
 8008ff6:	fb05 4503 	mla	r5, r5, r3, r4
 8008ffa:	2601      	movs	r6, #1
 8008ffc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009000:	e7eb      	b.n	8008fda <_strtol_l.isra.0+0x72>
 8009002:	2c2b      	cmp	r4, #43	; 0x2b
 8009004:	bf08      	it	eq
 8009006:	f89e 4000 	ldrbeq.w	r4, [lr]
 800900a:	46a8      	mov	r8, r5
 800900c:	bf08      	it	eq
 800900e:	f106 0e02 	addeq.w	lr, r6, #2
 8009012:	e7c7      	b.n	8008fa4 <_strtol_l.isra.0+0x3c>
 8009014:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009018:	2f19      	cmp	r7, #25
 800901a:	d801      	bhi.n	8009020 <_strtol_l.isra.0+0xb8>
 800901c:	3c37      	subs	r4, #55	; 0x37
 800901e:	e7e1      	b.n	8008fe4 <_strtol_l.isra.0+0x7c>
 8009020:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009024:	2f19      	cmp	r7, #25
 8009026:	d804      	bhi.n	8009032 <_strtol_l.isra.0+0xca>
 8009028:	3c57      	subs	r4, #87	; 0x57
 800902a:	e7db      	b.n	8008fe4 <_strtol_l.isra.0+0x7c>
 800902c:	f04f 36ff 	mov.w	r6, #4294967295
 8009030:	e7e4      	b.n	8008ffc <_strtol_l.isra.0+0x94>
 8009032:	2e00      	cmp	r6, #0
 8009034:	da05      	bge.n	8009042 <_strtol_l.isra.0+0xda>
 8009036:	2322      	movs	r3, #34	; 0x22
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	4665      	mov	r5, ip
 800903c:	b942      	cbnz	r2, 8009050 <_strtol_l.isra.0+0xe8>
 800903e:	4628      	mov	r0, r5
 8009040:	e79d      	b.n	8008f7e <_strtol_l.isra.0+0x16>
 8009042:	f1b8 0f00 	cmp.w	r8, #0
 8009046:	d000      	beq.n	800904a <_strtol_l.isra.0+0xe2>
 8009048:	426d      	negs	r5, r5
 800904a:	2a00      	cmp	r2, #0
 800904c:	d0f7      	beq.n	800903e <_strtol_l.isra.0+0xd6>
 800904e:	b10e      	cbz	r6, 8009054 <_strtol_l.isra.0+0xec>
 8009050:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009054:	6011      	str	r1, [r2, #0]
 8009056:	e7f2      	b.n	800903e <_strtol_l.isra.0+0xd6>
 8009058:	2430      	movs	r4, #48	; 0x30
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1b3      	bne.n	8008fc6 <_strtol_l.isra.0+0x5e>
 800905e:	2308      	movs	r3, #8
 8009060:	e7b1      	b.n	8008fc6 <_strtol_l.isra.0+0x5e>
 8009062:	2c30      	cmp	r4, #48	; 0x30
 8009064:	d0a4      	beq.n	8008fb0 <_strtol_l.isra.0+0x48>
 8009066:	230a      	movs	r3, #10
 8009068:	e7ad      	b.n	8008fc6 <_strtol_l.isra.0+0x5e>
 800906a:	bf00      	nop
 800906c:	0800cfc9 	.word	0x0800cfc9

08009070 <_strtol_r>:
 8009070:	f7ff bf7a 	b.w	8008f68 <_strtol_l.isra.0>

08009074 <quorem>:
 8009074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	6903      	ldr	r3, [r0, #16]
 800907a:	690c      	ldr	r4, [r1, #16]
 800907c:	42a3      	cmp	r3, r4
 800907e:	4607      	mov	r7, r0
 8009080:	f2c0 8081 	blt.w	8009186 <quorem+0x112>
 8009084:	3c01      	subs	r4, #1
 8009086:	f101 0814 	add.w	r8, r1, #20
 800908a:	f100 0514 	add.w	r5, r0, #20
 800908e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009098:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800909c:	3301      	adds	r3, #1
 800909e:	429a      	cmp	r2, r3
 80090a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80090a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80090ac:	d331      	bcc.n	8009112 <quorem+0x9e>
 80090ae:	f04f 0e00 	mov.w	lr, #0
 80090b2:	4640      	mov	r0, r8
 80090b4:	46ac      	mov	ip, r5
 80090b6:	46f2      	mov	sl, lr
 80090b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80090bc:	b293      	uxth	r3, r2
 80090be:	fb06 e303 	mla	r3, r6, r3, lr
 80090c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	ebaa 0303 	sub.w	r3, sl, r3
 80090cc:	0c12      	lsrs	r2, r2, #16
 80090ce:	f8dc a000 	ldr.w	sl, [ip]
 80090d2:	fb06 e202 	mla	r2, r6, r2, lr
 80090d6:	fa13 f38a 	uxtah	r3, r3, sl
 80090da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090de:	fa1f fa82 	uxth.w	sl, r2
 80090e2:	f8dc 2000 	ldr.w	r2, [ip]
 80090e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80090ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090f4:	4581      	cmp	r9, r0
 80090f6:	f84c 3b04 	str.w	r3, [ip], #4
 80090fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090fe:	d2db      	bcs.n	80090b8 <quorem+0x44>
 8009100:	f855 300b 	ldr.w	r3, [r5, fp]
 8009104:	b92b      	cbnz	r3, 8009112 <quorem+0x9e>
 8009106:	9b01      	ldr	r3, [sp, #4]
 8009108:	3b04      	subs	r3, #4
 800910a:	429d      	cmp	r5, r3
 800910c:	461a      	mov	r2, r3
 800910e:	d32e      	bcc.n	800916e <quorem+0xfa>
 8009110:	613c      	str	r4, [r7, #16]
 8009112:	4638      	mov	r0, r7
 8009114:	f001 fc8c 	bl	800aa30 <__mcmp>
 8009118:	2800      	cmp	r0, #0
 800911a:	db24      	blt.n	8009166 <quorem+0xf2>
 800911c:	3601      	adds	r6, #1
 800911e:	4628      	mov	r0, r5
 8009120:	f04f 0c00 	mov.w	ip, #0
 8009124:	f858 2b04 	ldr.w	r2, [r8], #4
 8009128:	f8d0 e000 	ldr.w	lr, [r0]
 800912c:	b293      	uxth	r3, r2
 800912e:	ebac 0303 	sub.w	r3, ip, r3
 8009132:	0c12      	lsrs	r2, r2, #16
 8009134:	fa13 f38e 	uxtah	r3, r3, lr
 8009138:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800913c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009140:	b29b      	uxth	r3, r3
 8009142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009146:	45c1      	cmp	r9, r8
 8009148:	f840 3b04 	str.w	r3, [r0], #4
 800914c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009150:	d2e8      	bcs.n	8009124 <quorem+0xb0>
 8009152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800915a:	b922      	cbnz	r2, 8009166 <quorem+0xf2>
 800915c:	3b04      	subs	r3, #4
 800915e:	429d      	cmp	r5, r3
 8009160:	461a      	mov	r2, r3
 8009162:	d30a      	bcc.n	800917a <quorem+0x106>
 8009164:	613c      	str	r4, [r7, #16]
 8009166:	4630      	mov	r0, r6
 8009168:	b003      	add	sp, #12
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	6812      	ldr	r2, [r2, #0]
 8009170:	3b04      	subs	r3, #4
 8009172:	2a00      	cmp	r2, #0
 8009174:	d1cc      	bne.n	8009110 <quorem+0x9c>
 8009176:	3c01      	subs	r4, #1
 8009178:	e7c7      	b.n	800910a <quorem+0x96>
 800917a:	6812      	ldr	r2, [r2, #0]
 800917c:	3b04      	subs	r3, #4
 800917e:	2a00      	cmp	r2, #0
 8009180:	d1f0      	bne.n	8009164 <quorem+0xf0>
 8009182:	3c01      	subs	r4, #1
 8009184:	e7eb      	b.n	800915e <quorem+0xea>
 8009186:	2000      	movs	r0, #0
 8009188:	e7ee      	b.n	8009168 <quorem+0xf4>
 800918a:	0000      	movs	r0, r0
 800918c:	0000      	movs	r0, r0
	...

08009190 <_dtoa_r>:
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	ed2d 8b02 	vpush	{d8}
 8009198:	ec57 6b10 	vmov	r6, r7, d0
 800919c:	b095      	sub	sp, #84	; 0x54
 800919e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80091a4:	9105      	str	r1, [sp, #20]
 80091a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80091aa:	4604      	mov	r4, r0
 80091ac:	9209      	str	r2, [sp, #36]	; 0x24
 80091ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80091b0:	b975      	cbnz	r5, 80091d0 <_dtoa_r+0x40>
 80091b2:	2010      	movs	r0, #16
 80091b4:	f001 f94c 	bl	800a450 <malloc>
 80091b8:	4602      	mov	r2, r0
 80091ba:	6260      	str	r0, [r4, #36]	; 0x24
 80091bc:	b920      	cbnz	r0, 80091c8 <_dtoa_r+0x38>
 80091be:	4bb2      	ldr	r3, [pc, #712]	; (8009488 <_dtoa_r+0x2f8>)
 80091c0:	21ea      	movs	r1, #234	; 0xea
 80091c2:	48b2      	ldr	r0, [pc, #712]	; (800948c <_dtoa_r+0x2fc>)
 80091c4:	f002 f874 	bl	800b2b0 <__assert_func>
 80091c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091cc:	6005      	str	r5, [r0, #0]
 80091ce:	60c5      	str	r5, [r0, #12]
 80091d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091d2:	6819      	ldr	r1, [r3, #0]
 80091d4:	b151      	cbz	r1, 80091ec <_dtoa_r+0x5c>
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	604a      	str	r2, [r1, #4]
 80091da:	2301      	movs	r3, #1
 80091dc:	4093      	lsls	r3, r2
 80091de:	608b      	str	r3, [r1, #8]
 80091e0:	4620      	mov	r0, r4
 80091e2:	f001 f99d 	bl	800a520 <_Bfree>
 80091e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	1e3b      	subs	r3, r7, #0
 80091ee:	bfb9      	ittee	lt
 80091f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80091f4:	9303      	strlt	r3, [sp, #12]
 80091f6:	2300      	movge	r3, #0
 80091f8:	f8c8 3000 	strge.w	r3, [r8]
 80091fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009200:	4ba3      	ldr	r3, [pc, #652]	; (8009490 <_dtoa_r+0x300>)
 8009202:	bfbc      	itt	lt
 8009204:	2201      	movlt	r2, #1
 8009206:	f8c8 2000 	strlt.w	r2, [r8]
 800920a:	ea33 0309 	bics.w	r3, r3, r9
 800920e:	d11b      	bne.n	8009248 <_dtoa_r+0xb8>
 8009210:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009212:	f242 730f 	movw	r3, #9999	; 0x270f
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800921c:	4333      	orrs	r3, r6
 800921e:	f000 857a 	beq.w	8009d16 <_dtoa_r+0xb86>
 8009222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009224:	b963      	cbnz	r3, 8009240 <_dtoa_r+0xb0>
 8009226:	4b9b      	ldr	r3, [pc, #620]	; (8009494 <_dtoa_r+0x304>)
 8009228:	e024      	b.n	8009274 <_dtoa_r+0xe4>
 800922a:	4b9b      	ldr	r3, [pc, #620]	; (8009498 <_dtoa_r+0x308>)
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	3308      	adds	r3, #8
 8009230:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	9800      	ldr	r0, [sp, #0]
 8009236:	b015      	add	sp, #84	; 0x54
 8009238:	ecbd 8b02 	vpop	{d8}
 800923c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009240:	4b94      	ldr	r3, [pc, #592]	; (8009494 <_dtoa_r+0x304>)
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	3303      	adds	r3, #3
 8009246:	e7f3      	b.n	8009230 <_dtoa_r+0xa0>
 8009248:	ed9d 7b02 	vldr	d7, [sp, #8]
 800924c:	2200      	movs	r2, #0
 800924e:	ec51 0b17 	vmov	r0, r1, d7
 8009252:	2300      	movs	r3, #0
 8009254:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009258:	f7f7 fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800925c:	4680      	mov	r8, r0
 800925e:	b158      	cbz	r0, 8009278 <_dtoa_r+0xe8>
 8009260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009262:	2301      	movs	r3, #1
 8009264:	6013      	str	r3, [r2, #0]
 8009266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 8551 	beq.w	8009d10 <_dtoa_r+0xb80>
 800926e:	488b      	ldr	r0, [pc, #556]	; (800949c <_dtoa_r+0x30c>)
 8009270:	6018      	str	r0, [r3, #0]
 8009272:	1e43      	subs	r3, r0, #1
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	e7dd      	b.n	8009234 <_dtoa_r+0xa4>
 8009278:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800927c:	aa12      	add	r2, sp, #72	; 0x48
 800927e:	a913      	add	r1, sp, #76	; 0x4c
 8009280:	4620      	mov	r0, r4
 8009282:	f001 fcf5 	bl	800ac70 <__d2b>
 8009286:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800928a:	4683      	mov	fp, r0
 800928c:	2d00      	cmp	r5, #0
 800928e:	d07c      	beq.n	800938a <_dtoa_r+0x1fa>
 8009290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009292:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800929a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800929e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80092a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80092a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80092aa:	4b7d      	ldr	r3, [pc, #500]	; (80094a0 <_dtoa_r+0x310>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	4630      	mov	r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	f7f6 ffe9 	bl	8000288 <__aeabi_dsub>
 80092b6:	a36e      	add	r3, pc, #440	; (adr r3, 8009470 <_dtoa_r+0x2e0>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f7f7 f99c 	bl	80005f8 <__aeabi_dmul>
 80092c0:	a36d      	add	r3, pc, #436	; (adr r3, 8009478 <_dtoa_r+0x2e8>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f6 ffe1 	bl	800028c <__adddf3>
 80092ca:	4606      	mov	r6, r0
 80092cc:	4628      	mov	r0, r5
 80092ce:	460f      	mov	r7, r1
 80092d0:	f7f7 f928 	bl	8000524 <__aeabi_i2d>
 80092d4:	a36a      	add	r3, pc, #424	; (adr r3, 8009480 <_dtoa_r+0x2f0>)
 80092d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092da:	f7f7 f98d 	bl	80005f8 <__aeabi_dmul>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4630      	mov	r0, r6
 80092e4:	4639      	mov	r1, r7
 80092e6:	f7f6 ffd1 	bl	800028c <__adddf3>
 80092ea:	4606      	mov	r6, r0
 80092ec:	460f      	mov	r7, r1
 80092ee:	f7f7 fc33 	bl	8000b58 <__aeabi_d2iz>
 80092f2:	2200      	movs	r2, #0
 80092f4:	4682      	mov	sl, r0
 80092f6:	2300      	movs	r3, #0
 80092f8:	4630      	mov	r0, r6
 80092fa:	4639      	mov	r1, r7
 80092fc:	f7f7 fbee 	bl	8000adc <__aeabi_dcmplt>
 8009300:	b148      	cbz	r0, 8009316 <_dtoa_r+0x186>
 8009302:	4650      	mov	r0, sl
 8009304:	f7f7 f90e 	bl	8000524 <__aeabi_i2d>
 8009308:	4632      	mov	r2, r6
 800930a:	463b      	mov	r3, r7
 800930c:	f7f7 fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009310:	b908      	cbnz	r0, 8009316 <_dtoa_r+0x186>
 8009312:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009316:	f1ba 0f16 	cmp.w	sl, #22
 800931a:	d854      	bhi.n	80093c6 <_dtoa_r+0x236>
 800931c:	4b61      	ldr	r3, [pc, #388]	; (80094a4 <_dtoa_r+0x314>)
 800931e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800932a:	f7f7 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800932e:	2800      	cmp	r0, #0
 8009330:	d04b      	beq.n	80093ca <_dtoa_r+0x23a>
 8009332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009336:	2300      	movs	r3, #0
 8009338:	930e      	str	r3, [sp, #56]	; 0x38
 800933a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800933c:	1b5d      	subs	r5, r3, r5
 800933e:	1e6b      	subs	r3, r5, #1
 8009340:	9304      	str	r3, [sp, #16]
 8009342:	bf43      	ittte	mi
 8009344:	2300      	movmi	r3, #0
 8009346:	f1c5 0801 	rsbmi	r8, r5, #1
 800934a:	9304      	strmi	r3, [sp, #16]
 800934c:	f04f 0800 	movpl.w	r8, #0
 8009350:	f1ba 0f00 	cmp.w	sl, #0
 8009354:	db3b      	blt.n	80093ce <_dtoa_r+0x23e>
 8009356:	9b04      	ldr	r3, [sp, #16]
 8009358:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800935c:	4453      	add	r3, sl
 800935e:	9304      	str	r3, [sp, #16]
 8009360:	2300      	movs	r3, #0
 8009362:	9306      	str	r3, [sp, #24]
 8009364:	9b05      	ldr	r3, [sp, #20]
 8009366:	2b09      	cmp	r3, #9
 8009368:	d869      	bhi.n	800943e <_dtoa_r+0x2ae>
 800936a:	2b05      	cmp	r3, #5
 800936c:	bfc4      	itt	gt
 800936e:	3b04      	subgt	r3, #4
 8009370:	9305      	strgt	r3, [sp, #20]
 8009372:	9b05      	ldr	r3, [sp, #20]
 8009374:	f1a3 0302 	sub.w	r3, r3, #2
 8009378:	bfcc      	ite	gt
 800937a:	2500      	movgt	r5, #0
 800937c:	2501      	movle	r5, #1
 800937e:	2b03      	cmp	r3, #3
 8009380:	d869      	bhi.n	8009456 <_dtoa_r+0x2c6>
 8009382:	e8df f003 	tbb	[pc, r3]
 8009386:	4e2c      	.short	0x4e2c
 8009388:	5a4c      	.short	0x5a4c
 800938a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800938e:	441d      	add	r5, r3
 8009390:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009394:	2b20      	cmp	r3, #32
 8009396:	bfc1      	itttt	gt
 8009398:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800939c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80093a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80093a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80093a8:	bfda      	itte	le
 80093aa:	f1c3 0320 	rsble	r3, r3, #32
 80093ae:	fa06 f003 	lslle.w	r0, r6, r3
 80093b2:	4318      	orrgt	r0, r3
 80093b4:	f7f7 f8a6 	bl	8000504 <__aeabi_ui2d>
 80093b8:	2301      	movs	r3, #1
 80093ba:	4606      	mov	r6, r0
 80093bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80093c0:	3d01      	subs	r5, #1
 80093c2:	9310      	str	r3, [sp, #64]	; 0x40
 80093c4:	e771      	b.n	80092aa <_dtoa_r+0x11a>
 80093c6:	2301      	movs	r3, #1
 80093c8:	e7b6      	b.n	8009338 <_dtoa_r+0x1a8>
 80093ca:	900e      	str	r0, [sp, #56]	; 0x38
 80093cc:	e7b5      	b.n	800933a <_dtoa_r+0x1aa>
 80093ce:	f1ca 0300 	rsb	r3, sl, #0
 80093d2:	9306      	str	r3, [sp, #24]
 80093d4:	2300      	movs	r3, #0
 80093d6:	eba8 080a 	sub.w	r8, r8, sl
 80093da:	930d      	str	r3, [sp, #52]	; 0x34
 80093dc:	e7c2      	b.n	8009364 <_dtoa_r+0x1d4>
 80093de:	2300      	movs	r3, #0
 80093e0:	9308      	str	r3, [sp, #32]
 80093e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dc39      	bgt.n	800945c <_dtoa_r+0x2cc>
 80093e8:	f04f 0901 	mov.w	r9, #1
 80093ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80093f0:	464b      	mov	r3, r9
 80093f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80093f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80093f8:	2200      	movs	r2, #0
 80093fa:	6042      	str	r2, [r0, #4]
 80093fc:	2204      	movs	r2, #4
 80093fe:	f102 0614 	add.w	r6, r2, #20
 8009402:	429e      	cmp	r6, r3
 8009404:	6841      	ldr	r1, [r0, #4]
 8009406:	d92f      	bls.n	8009468 <_dtoa_r+0x2d8>
 8009408:	4620      	mov	r0, r4
 800940a:	f001 f849 	bl	800a4a0 <_Balloc>
 800940e:	9000      	str	r0, [sp, #0]
 8009410:	2800      	cmp	r0, #0
 8009412:	d14b      	bne.n	80094ac <_dtoa_r+0x31c>
 8009414:	4b24      	ldr	r3, [pc, #144]	; (80094a8 <_dtoa_r+0x318>)
 8009416:	4602      	mov	r2, r0
 8009418:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800941c:	e6d1      	b.n	80091c2 <_dtoa_r+0x32>
 800941e:	2301      	movs	r3, #1
 8009420:	e7de      	b.n	80093e0 <_dtoa_r+0x250>
 8009422:	2300      	movs	r3, #0
 8009424:	9308      	str	r3, [sp, #32]
 8009426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009428:	eb0a 0903 	add.w	r9, sl, r3
 800942c:	f109 0301 	add.w	r3, r9, #1
 8009430:	2b01      	cmp	r3, #1
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	bfb8      	it	lt
 8009436:	2301      	movlt	r3, #1
 8009438:	e7dd      	b.n	80093f6 <_dtoa_r+0x266>
 800943a:	2301      	movs	r3, #1
 800943c:	e7f2      	b.n	8009424 <_dtoa_r+0x294>
 800943e:	2501      	movs	r5, #1
 8009440:	2300      	movs	r3, #0
 8009442:	9305      	str	r3, [sp, #20]
 8009444:	9508      	str	r5, [sp, #32]
 8009446:	f04f 39ff 	mov.w	r9, #4294967295
 800944a:	2200      	movs	r2, #0
 800944c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009450:	2312      	movs	r3, #18
 8009452:	9209      	str	r2, [sp, #36]	; 0x24
 8009454:	e7cf      	b.n	80093f6 <_dtoa_r+0x266>
 8009456:	2301      	movs	r3, #1
 8009458:	9308      	str	r3, [sp, #32]
 800945a:	e7f4      	b.n	8009446 <_dtoa_r+0x2b6>
 800945c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009460:	f8cd 9004 	str.w	r9, [sp, #4]
 8009464:	464b      	mov	r3, r9
 8009466:	e7c6      	b.n	80093f6 <_dtoa_r+0x266>
 8009468:	3101      	adds	r1, #1
 800946a:	6041      	str	r1, [r0, #4]
 800946c:	0052      	lsls	r2, r2, #1
 800946e:	e7c6      	b.n	80093fe <_dtoa_r+0x26e>
 8009470:	636f4361 	.word	0x636f4361
 8009474:	3fd287a7 	.word	0x3fd287a7
 8009478:	8b60c8b3 	.word	0x8b60c8b3
 800947c:	3fc68a28 	.word	0x3fc68a28
 8009480:	509f79fb 	.word	0x509f79fb
 8009484:	3fd34413 	.word	0x3fd34413
 8009488:	0800d0d6 	.word	0x0800d0d6
 800948c:	0800d0ed 	.word	0x0800d0ed
 8009490:	7ff00000 	.word	0x7ff00000
 8009494:	0800d0d2 	.word	0x0800d0d2
 8009498:	0800d0c9 	.word	0x0800d0c9
 800949c:	0800cf4d 	.word	0x0800cf4d
 80094a0:	3ff80000 	.word	0x3ff80000
 80094a4:	0800d268 	.word	0x0800d268
 80094a8:	0800d14c 	.word	0x0800d14c
 80094ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094ae:	9a00      	ldr	r2, [sp, #0]
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	9b01      	ldr	r3, [sp, #4]
 80094b4:	2b0e      	cmp	r3, #14
 80094b6:	f200 80ad 	bhi.w	8009614 <_dtoa_r+0x484>
 80094ba:	2d00      	cmp	r5, #0
 80094bc:	f000 80aa 	beq.w	8009614 <_dtoa_r+0x484>
 80094c0:	f1ba 0f00 	cmp.w	sl, #0
 80094c4:	dd36      	ble.n	8009534 <_dtoa_r+0x3a4>
 80094c6:	4ac3      	ldr	r2, [pc, #780]	; (80097d4 <_dtoa_r+0x644>)
 80094c8:	f00a 030f 	and.w	r3, sl, #15
 80094cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094d0:	ed93 7b00 	vldr	d7, [r3]
 80094d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80094d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80094dc:	eeb0 8a47 	vmov.f32	s16, s14
 80094e0:	eef0 8a67 	vmov.f32	s17, s15
 80094e4:	d016      	beq.n	8009514 <_dtoa_r+0x384>
 80094e6:	4bbc      	ldr	r3, [pc, #752]	; (80097d8 <_dtoa_r+0x648>)
 80094e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094f0:	f7f7 f9ac 	bl	800084c <__aeabi_ddiv>
 80094f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094f8:	f007 070f 	and.w	r7, r7, #15
 80094fc:	2503      	movs	r5, #3
 80094fe:	4eb6      	ldr	r6, [pc, #728]	; (80097d8 <_dtoa_r+0x648>)
 8009500:	b957      	cbnz	r7, 8009518 <_dtoa_r+0x388>
 8009502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009506:	ec53 2b18 	vmov	r2, r3, d8
 800950a:	f7f7 f99f 	bl	800084c <__aeabi_ddiv>
 800950e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009512:	e029      	b.n	8009568 <_dtoa_r+0x3d8>
 8009514:	2502      	movs	r5, #2
 8009516:	e7f2      	b.n	80094fe <_dtoa_r+0x36e>
 8009518:	07f9      	lsls	r1, r7, #31
 800951a:	d508      	bpl.n	800952e <_dtoa_r+0x39e>
 800951c:	ec51 0b18 	vmov	r0, r1, d8
 8009520:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009524:	f7f7 f868 	bl	80005f8 <__aeabi_dmul>
 8009528:	ec41 0b18 	vmov	d8, r0, r1
 800952c:	3501      	adds	r5, #1
 800952e:	107f      	asrs	r7, r7, #1
 8009530:	3608      	adds	r6, #8
 8009532:	e7e5      	b.n	8009500 <_dtoa_r+0x370>
 8009534:	f000 80a6 	beq.w	8009684 <_dtoa_r+0x4f4>
 8009538:	f1ca 0600 	rsb	r6, sl, #0
 800953c:	4ba5      	ldr	r3, [pc, #660]	; (80097d4 <_dtoa_r+0x644>)
 800953e:	4fa6      	ldr	r7, [pc, #664]	; (80097d8 <_dtoa_r+0x648>)
 8009540:	f006 020f 	and.w	r2, r6, #15
 8009544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009550:	f7f7 f852 	bl	80005f8 <__aeabi_dmul>
 8009554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009558:	1136      	asrs	r6, r6, #4
 800955a:	2300      	movs	r3, #0
 800955c:	2502      	movs	r5, #2
 800955e:	2e00      	cmp	r6, #0
 8009560:	f040 8085 	bne.w	800966e <_dtoa_r+0x4de>
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1d2      	bne.n	800950e <_dtoa_r+0x37e>
 8009568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 808c 	beq.w	8009688 <_dtoa_r+0x4f8>
 8009570:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009574:	4b99      	ldr	r3, [pc, #612]	; (80097dc <_dtoa_r+0x64c>)
 8009576:	2200      	movs	r2, #0
 8009578:	4630      	mov	r0, r6
 800957a:	4639      	mov	r1, r7
 800957c:	f7f7 faae 	bl	8000adc <__aeabi_dcmplt>
 8009580:	2800      	cmp	r0, #0
 8009582:	f000 8081 	beq.w	8009688 <_dtoa_r+0x4f8>
 8009586:	9b01      	ldr	r3, [sp, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d07d      	beq.n	8009688 <_dtoa_r+0x4f8>
 800958c:	f1b9 0f00 	cmp.w	r9, #0
 8009590:	dd3c      	ble.n	800960c <_dtoa_r+0x47c>
 8009592:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009596:	9307      	str	r3, [sp, #28]
 8009598:	2200      	movs	r2, #0
 800959a:	4b91      	ldr	r3, [pc, #580]	; (80097e0 <_dtoa_r+0x650>)
 800959c:	4630      	mov	r0, r6
 800959e:	4639      	mov	r1, r7
 80095a0:	f7f7 f82a 	bl	80005f8 <__aeabi_dmul>
 80095a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095a8:	3501      	adds	r5, #1
 80095aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80095ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095b2:	4628      	mov	r0, r5
 80095b4:	f7f6 ffb6 	bl	8000524 <__aeabi_i2d>
 80095b8:	4632      	mov	r2, r6
 80095ba:	463b      	mov	r3, r7
 80095bc:	f7f7 f81c 	bl	80005f8 <__aeabi_dmul>
 80095c0:	4b88      	ldr	r3, [pc, #544]	; (80097e4 <_dtoa_r+0x654>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	f7f6 fe62 	bl	800028c <__adddf3>
 80095c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80095cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095d0:	9303      	str	r3, [sp, #12]
 80095d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d15c      	bne.n	8009692 <_dtoa_r+0x502>
 80095d8:	4b83      	ldr	r3, [pc, #524]	; (80097e8 <_dtoa_r+0x658>)
 80095da:	2200      	movs	r2, #0
 80095dc:	4630      	mov	r0, r6
 80095de:	4639      	mov	r1, r7
 80095e0:	f7f6 fe52 	bl	8000288 <__aeabi_dsub>
 80095e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095e8:	4606      	mov	r6, r0
 80095ea:	460f      	mov	r7, r1
 80095ec:	f7f7 fa94 	bl	8000b18 <__aeabi_dcmpgt>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	f040 8296 	bne.w	8009b22 <_dtoa_r+0x992>
 80095f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80095fa:	4630      	mov	r0, r6
 80095fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009600:	4639      	mov	r1, r7
 8009602:	f7f7 fa6b 	bl	8000adc <__aeabi_dcmplt>
 8009606:	2800      	cmp	r0, #0
 8009608:	f040 8288 	bne.w	8009b1c <_dtoa_r+0x98c>
 800960c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009610:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009616:	2b00      	cmp	r3, #0
 8009618:	f2c0 8158 	blt.w	80098cc <_dtoa_r+0x73c>
 800961c:	f1ba 0f0e 	cmp.w	sl, #14
 8009620:	f300 8154 	bgt.w	80098cc <_dtoa_r+0x73c>
 8009624:	4b6b      	ldr	r3, [pc, #428]	; (80097d4 <_dtoa_r+0x644>)
 8009626:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800962a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800962e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009630:	2b00      	cmp	r3, #0
 8009632:	f280 80e3 	bge.w	80097fc <_dtoa_r+0x66c>
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f300 80df 	bgt.w	80097fc <_dtoa_r+0x66c>
 800963e:	f040 826d 	bne.w	8009b1c <_dtoa_r+0x98c>
 8009642:	4b69      	ldr	r3, [pc, #420]	; (80097e8 <_dtoa_r+0x658>)
 8009644:	2200      	movs	r2, #0
 8009646:	4640      	mov	r0, r8
 8009648:	4649      	mov	r1, r9
 800964a:	f7f6 ffd5 	bl	80005f8 <__aeabi_dmul>
 800964e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009652:	f7f7 fa57 	bl	8000b04 <__aeabi_dcmpge>
 8009656:	9e01      	ldr	r6, [sp, #4]
 8009658:	4637      	mov	r7, r6
 800965a:	2800      	cmp	r0, #0
 800965c:	f040 8243 	bne.w	8009ae6 <_dtoa_r+0x956>
 8009660:	9d00      	ldr	r5, [sp, #0]
 8009662:	2331      	movs	r3, #49	; 0x31
 8009664:	f805 3b01 	strb.w	r3, [r5], #1
 8009668:	f10a 0a01 	add.w	sl, sl, #1
 800966c:	e23f      	b.n	8009aee <_dtoa_r+0x95e>
 800966e:	07f2      	lsls	r2, r6, #31
 8009670:	d505      	bpl.n	800967e <_dtoa_r+0x4ee>
 8009672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	3501      	adds	r5, #1
 800967c:	2301      	movs	r3, #1
 800967e:	1076      	asrs	r6, r6, #1
 8009680:	3708      	adds	r7, #8
 8009682:	e76c      	b.n	800955e <_dtoa_r+0x3ce>
 8009684:	2502      	movs	r5, #2
 8009686:	e76f      	b.n	8009568 <_dtoa_r+0x3d8>
 8009688:	9b01      	ldr	r3, [sp, #4]
 800968a:	f8cd a01c 	str.w	sl, [sp, #28]
 800968e:	930c      	str	r3, [sp, #48]	; 0x30
 8009690:	e78d      	b.n	80095ae <_dtoa_r+0x41e>
 8009692:	9900      	ldr	r1, [sp, #0]
 8009694:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009698:	4b4e      	ldr	r3, [pc, #312]	; (80097d4 <_dtoa_r+0x644>)
 800969a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800969e:	4401      	add	r1, r0
 80096a0:	9102      	str	r1, [sp, #8]
 80096a2:	9908      	ldr	r1, [sp, #32]
 80096a4:	eeb0 8a47 	vmov.f32	s16, s14
 80096a8:	eef0 8a67 	vmov.f32	s17, s15
 80096ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80096b4:	2900      	cmp	r1, #0
 80096b6:	d045      	beq.n	8009744 <_dtoa_r+0x5b4>
 80096b8:	494c      	ldr	r1, [pc, #304]	; (80097ec <_dtoa_r+0x65c>)
 80096ba:	2000      	movs	r0, #0
 80096bc:	f7f7 f8c6 	bl	800084c <__aeabi_ddiv>
 80096c0:	ec53 2b18 	vmov	r2, r3, d8
 80096c4:	f7f6 fde0 	bl	8000288 <__aeabi_dsub>
 80096c8:	9d00      	ldr	r5, [sp, #0]
 80096ca:	ec41 0b18 	vmov	d8, r0, r1
 80096ce:	4639      	mov	r1, r7
 80096d0:	4630      	mov	r0, r6
 80096d2:	f7f7 fa41 	bl	8000b58 <__aeabi_d2iz>
 80096d6:	900c      	str	r0, [sp, #48]	; 0x30
 80096d8:	f7f6 ff24 	bl	8000524 <__aeabi_i2d>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4630      	mov	r0, r6
 80096e2:	4639      	mov	r1, r7
 80096e4:	f7f6 fdd0 	bl	8000288 <__aeabi_dsub>
 80096e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096ea:	3330      	adds	r3, #48	; 0x30
 80096ec:	f805 3b01 	strb.w	r3, [r5], #1
 80096f0:	ec53 2b18 	vmov	r2, r3, d8
 80096f4:	4606      	mov	r6, r0
 80096f6:	460f      	mov	r7, r1
 80096f8:	f7f7 f9f0 	bl	8000adc <__aeabi_dcmplt>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d165      	bne.n	80097cc <_dtoa_r+0x63c>
 8009700:	4632      	mov	r2, r6
 8009702:	463b      	mov	r3, r7
 8009704:	4935      	ldr	r1, [pc, #212]	; (80097dc <_dtoa_r+0x64c>)
 8009706:	2000      	movs	r0, #0
 8009708:	f7f6 fdbe 	bl	8000288 <__aeabi_dsub>
 800970c:	ec53 2b18 	vmov	r2, r3, d8
 8009710:	f7f7 f9e4 	bl	8000adc <__aeabi_dcmplt>
 8009714:	2800      	cmp	r0, #0
 8009716:	f040 80b9 	bne.w	800988c <_dtoa_r+0x6fc>
 800971a:	9b02      	ldr	r3, [sp, #8]
 800971c:	429d      	cmp	r5, r3
 800971e:	f43f af75 	beq.w	800960c <_dtoa_r+0x47c>
 8009722:	4b2f      	ldr	r3, [pc, #188]	; (80097e0 <_dtoa_r+0x650>)
 8009724:	ec51 0b18 	vmov	r0, r1, d8
 8009728:	2200      	movs	r2, #0
 800972a:	f7f6 ff65 	bl	80005f8 <__aeabi_dmul>
 800972e:	4b2c      	ldr	r3, [pc, #176]	; (80097e0 <_dtoa_r+0x650>)
 8009730:	ec41 0b18 	vmov	d8, r0, r1
 8009734:	2200      	movs	r2, #0
 8009736:	4630      	mov	r0, r6
 8009738:	4639      	mov	r1, r7
 800973a:	f7f6 ff5d 	bl	80005f8 <__aeabi_dmul>
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	e7c4      	b.n	80096ce <_dtoa_r+0x53e>
 8009744:	ec51 0b17 	vmov	r0, r1, d7
 8009748:	f7f6 ff56 	bl	80005f8 <__aeabi_dmul>
 800974c:	9b02      	ldr	r3, [sp, #8]
 800974e:	9d00      	ldr	r5, [sp, #0]
 8009750:	930c      	str	r3, [sp, #48]	; 0x30
 8009752:	ec41 0b18 	vmov	d8, r0, r1
 8009756:	4639      	mov	r1, r7
 8009758:	4630      	mov	r0, r6
 800975a:	f7f7 f9fd 	bl	8000b58 <__aeabi_d2iz>
 800975e:	9011      	str	r0, [sp, #68]	; 0x44
 8009760:	f7f6 fee0 	bl	8000524 <__aeabi_i2d>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4630      	mov	r0, r6
 800976a:	4639      	mov	r1, r7
 800976c:	f7f6 fd8c 	bl	8000288 <__aeabi_dsub>
 8009770:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009772:	3330      	adds	r3, #48	; 0x30
 8009774:	f805 3b01 	strb.w	r3, [r5], #1
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	429d      	cmp	r5, r3
 800977c:	4606      	mov	r6, r0
 800977e:	460f      	mov	r7, r1
 8009780:	f04f 0200 	mov.w	r2, #0
 8009784:	d134      	bne.n	80097f0 <_dtoa_r+0x660>
 8009786:	4b19      	ldr	r3, [pc, #100]	; (80097ec <_dtoa_r+0x65c>)
 8009788:	ec51 0b18 	vmov	r0, r1, d8
 800978c:	f7f6 fd7e 	bl	800028c <__adddf3>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	4630      	mov	r0, r6
 8009796:	4639      	mov	r1, r7
 8009798:	f7f7 f9be 	bl	8000b18 <__aeabi_dcmpgt>
 800979c:	2800      	cmp	r0, #0
 800979e:	d175      	bne.n	800988c <_dtoa_r+0x6fc>
 80097a0:	ec53 2b18 	vmov	r2, r3, d8
 80097a4:	4911      	ldr	r1, [pc, #68]	; (80097ec <_dtoa_r+0x65c>)
 80097a6:	2000      	movs	r0, #0
 80097a8:	f7f6 fd6e 	bl	8000288 <__aeabi_dsub>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f7 f992 	bl	8000adc <__aeabi_dcmplt>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	f43f af27 	beq.w	800960c <_dtoa_r+0x47c>
 80097be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097c0:	1e6b      	subs	r3, r5, #1
 80097c2:	930c      	str	r3, [sp, #48]	; 0x30
 80097c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097c8:	2b30      	cmp	r3, #48	; 0x30
 80097ca:	d0f8      	beq.n	80097be <_dtoa_r+0x62e>
 80097cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80097d0:	e04a      	b.n	8009868 <_dtoa_r+0x6d8>
 80097d2:	bf00      	nop
 80097d4:	0800d268 	.word	0x0800d268
 80097d8:	0800d240 	.word	0x0800d240
 80097dc:	3ff00000 	.word	0x3ff00000
 80097e0:	40240000 	.word	0x40240000
 80097e4:	401c0000 	.word	0x401c0000
 80097e8:	40140000 	.word	0x40140000
 80097ec:	3fe00000 	.word	0x3fe00000
 80097f0:	4baf      	ldr	r3, [pc, #700]	; (8009ab0 <_dtoa_r+0x920>)
 80097f2:	f7f6 ff01 	bl	80005f8 <__aeabi_dmul>
 80097f6:	4606      	mov	r6, r0
 80097f8:	460f      	mov	r7, r1
 80097fa:	e7ac      	b.n	8009756 <_dtoa_r+0x5c6>
 80097fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009800:	9d00      	ldr	r5, [sp, #0]
 8009802:	4642      	mov	r2, r8
 8009804:	464b      	mov	r3, r9
 8009806:	4630      	mov	r0, r6
 8009808:	4639      	mov	r1, r7
 800980a:	f7f7 f81f 	bl	800084c <__aeabi_ddiv>
 800980e:	f7f7 f9a3 	bl	8000b58 <__aeabi_d2iz>
 8009812:	9002      	str	r0, [sp, #8]
 8009814:	f7f6 fe86 	bl	8000524 <__aeabi_i2d>
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	f7f6 feec 	bl	80005f8 <__aeabi_dmul>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	4630      	mov	r0, r6
 8009826:	4639      	mov	r1, r7
 8009828:	f7f6 fd2e 	bl	8000288 <__aeabi_dsub>
 800982c:	9e02      	ldr	r6, [sp, #8]
 800982e:	9f01      	ldr	r7, [sp, #4]
 8009830:	3630      	adds	r6, #48	; 0x30
 8009832:	f805 6b01 	strb.w	r6, [r5], #1
 8009836:	9e00      	ldr	r6, [sp, #0]
 8009838:	1bae      	subs	r6, r5, r6
 800983a:	42b7      	cmp	r7, r6
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	d137      	bne.n	80098b2 <_dtoa_r+0x722>
 8009842:	f7f6 fd23 	bl	800028c <__adddf3>
 8009846:	4642      	mov	r2, r8
 8009848:	464b      	mov	r3, r9
 800984a:	4606      	mov	r6, r0
 800984c:	460f      	mov	r7, r1
 800984e:	f7f7 f963 	bl	8000b18 <__aeabi_dcmpgt>
 8009852:	b9c8      	cbnz	r0, 8009888 <_dtoa_r+0x6f8>
 8009854:	4642      	mov	r2, r8
 8009856:	464b      	mov	r3, r9
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f7f7 f934 	bl	8000ac8 <__aeabi_dcmpeq>
 8009860:	b110      	cbz	r0, 8009868 <_dtoa_r+0x6d8>
 8009862:	9b02      	ldr	r3, [sp, #8]
 8009864:	07d9      	lsls	r1, r3, #31
 8009866:	d40f      	bmi.n	8009888 <_dtoa_r+0x6f8>
 8009868:	4620      	mov	r0, r4
 800986a:	4659      	mov	r1, fp
 800986c:	f000 fe58 	bl	800a520 <_Bfree>
 8009870:	2300      	movs	r3, #0
 8009872:	702b      	strb	r3, [r5, #0]
 8009874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009876:	f10a 0001 	add.w	r0, sl, #1
 800987a:	6018      	str	r0, [r3, #0]
 800987c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800987e:	2b00      	cmp	r3, #0
 8009880:	f43f acd8 	beq.w	8009234 <_dtoa_r+0xa4>
 8009884:	601d      	str	r5, [r3, #0]
 8009886:	e4d5      	b.n	8009234 <_dtoa_r+0xa4>
 8009888:	f8cd a01c 	str.w	sl, [sp, #28]
 800988c:	462b      	mov	r3, r5
 800988e:	461d      	mov	r5, r3
 8009890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009894:	2a39      	cmp	r2, #57	; 0x39
 8009896:	d108      	bne.n	80098aa <_dtoa_r+0x71a>
 8009898:	9a00      	ldr	r2, [sp, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d1f7      	bne.n	800988e <_dtoa_r+0x6fe>
 800989e:	9a07      	ldr	r2, [sp, #28]
 80098a0:	9900      	ldr	r1, [sp, #0]
 80098a2:	3201      	adds	r2, #1
 80098a4:	9207      	str	r2, [sp, #28]
 80098a6:	2230      	movs	r2, #48	; 0x30
 80098a8:	700a      	strb	r2, [r1, #0]
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	3201      	adds	r2, #1
 80098ae:	701a      	strb	r2, [r3, #0]
 80098b0:	e78c      	b.n	80097cc <_dtoa_r+0x63c>
 80098b2:	4b7f      	ldr	r3, [pc, #508]	; (8009ab0 <_dtoa_r+0x920>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	f7f6 fe9f 	bl	80005f8 <__aeabi_dmul>
 80098ba:	2200      	movs	r2, #0
 80098bc:	2300      	movs	r3, #0
 80098be:	4606      	mov	r6, r0
 80098c0:	460f      	mov	r7, r1
 80098c2:	f7f7 f901 	bl	8000ac8 <__aeabi_dcmpeq>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d09b      	beq.n	8009802 <_dtoa_r+0x672>
 80098ca:	e7cd      	b.n	8009868 <_dtoa_r+0x6d8>
 80098cc:	9a08      	ldr	r2, [sp, #32]
 80098ce:	2a00      	cmp	r2, #0
 80098d0:	f000 80c4 	beq.w	8009a5c <_dtoa_r+0x8cc>
 80098d4:	9a05      	ldr	r2, [sp, #20]
 80098d6:	2a01      	cmp	r2, #1
 80098d8:	f300 80a8 	bgt.w	8009a2c <_dtoa_r+0x89c>
 80098dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098de:	2a00      	cmp	r2, #0
 80098e0:	f000 80a0 	beq.w	8009a24 <_dtoa_r+0x894>
 80098e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80098e8:	9e06      	ldr	r6, [sp, #24]
 80098ea:	4645      	mov	r5, r8
 80098ec:	9a04      	ldr	r2, [sp, #16]
 80098ee:	2101      	movs	r1, #1
 80098f0:	441a      	add	r2, r3
 80098f2:	4620      	mov	r0, r4
 80098f4:	4498      	add	r8, r3
 80098f6:	9204      	str	r2, [sp, #16]
 80098f8:	f000 ff18 	bl	800a72c <__i2b>
 80098fc:	4607      	mov	r7, r0
 80098fe:	2d00      	cmp	r5, #0
 8009900:	dd0b      	ble.n	800991a <_dtoa_r+0x78a>
 8009902:	9b04      	ldr	r3, [sp, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	dd08      	ble.n	800991a <_dtoa_r+0x78a>
 8009908:	42ab      	cmp	r3, r5
 800990a:	9a04      	ldr	r2, [sp, #16]
 800990c:	bfa8      	it	ge
 800990e:	462b      	movge	r3, r5
 8009910:	eba8 0803 	sub.w	r8, r8, r3
 8009914:	1aed      	subs	r5, r5, r3
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	9304      	str	r3, [sp, #16]
 800991a:	9b06      	ldr	r3, [sp, #24]
 800991c:	b1fb      	cbz	r3, 800995e <_dtoa_r+0x7ce>
 800991e:	9b08      	ldr	r3, [sp, #32]
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 809f 	beq.w	8009a64 <_dtoa_r+0x8d4>
 8009926:	2e00      	cmp	r6, #0
 8009928:	dd11      	ble.n	800994e <_dtoa_r+0x7be>
 800992a:	4639      	mov	r1, r7
 800992c:	4632      	mov	r2, r6
 800992e:	4620      	mov	r0, r4
 8009930:	f000 ffb8 	bl	800a8a4 <__pow5mult>
 8009934:	465a      	mov	r2, fp
 8009936:	4601      	mov	r1, r0
 8009938:	4607      	mov	r7, r0
 800993a:	4620      	mov	r0, r4
 800993c:	f000 ff0c 	bl	800a758 <__multiply>
 8009940:	4659      	mov	r1, fp
 8009942:	9007      	str	r0, [sp, #28]
 8009944:	4620      	mov	r0, r4
 8009946:	f000 fdeb 	bl	800a520 <_Bfree>
 800994a:	9b07      	ldr	r3, [sp, #28]
 800994c:	469b      	mov	fp, r3
 800994e:	9b06      	ldr	r3, [sp, #24]
 8009950:	1b9a      	subs	r2, r3, r6
 8009952:	d004      	beq.n	800995e <_dtoa_r+0x7ce>
 8009954:	4659      	mov	r1, fp
 8009956:	4620      	mov	r0, r4
 8009958:	f000 ffa4 	bl	800a8a4 <__pow5mult>
 800995c:	4683      	mov	fp, r0
 800995e:	2101      	movs	r1, #1
 8009960:	4620      	mov	r0, r4
 8009962:	f000 fee3 	bl	800a72c <__i2b>
 8009966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009968:	2b00      	cmp	r3, #0
 800996a:	4606      	mov	r6, r0
 800996c:	dd7c      	ble.n	8009a68 <_dtoa_r+0x8d8>
 800996e:	461a      	mov	r2, r3
 8009970:	4601      	mov	r1, r0
 8009972:	4620      	mov	r0, r4
 8009974:	f000 ff96 	bl	800a8a4 <__pow5mult>
 8009978:	9b05      	ldr	r3, [sp, #20]
 800997a:	2b01      	cmp	r3, #1
 800997c:	4606      	mov	r6, r0
 800997e:	dd76      	ble.n	8009a6e <_dtoa_r+0x8de>
 8009980:	2300      	movs	r3, #0
 8009982:	9306      	str	r3, [sp, #24]
 8009984:	6933      	ldr	r3, [r6, #16]
 8009986:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800998a:	6918      	ldr	r0, [r3, #16]
 800998c:	f000 fe7e 	bl	800a68c <__hi0bits>
 8009990:	f1c0 0020 	rsb	r0, r0, #32
 8009994:	9b04      	ldr	r3, [sp, #16]
 8009996:	4418      	add	r0, r3
 8009998:	f010 001f 	ands.w	r0, r0, #31
 800999c:	f000 8086 	beq.w	8009aac <_dtoa_r+0x91c>
 80099a0:	f1c0 0320 	rsb	r3, r0, #32
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	dd7f      	ble.n	8009aa8 <_dtoa_r+0x918>
 80099a8:	f1c0 001c 	rsb	r0, r0, #28
 80099ac:	9b04      	ldr	r3, [sp, #16]
 80099ae:	4403      	add	r3, r0
 80099b0:	4480      	add	r8, r0
 80099b2:	4405      	add	r5, r0
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	f1b8 0f00 	cmp.w	r8, #0
 80099ba:	dd05      	ble.n	80099c8 <_dtoa_r+0x838>
 80099bc:	4659      	mov	r1, fp
 80099be:	4642      	mov	r2, r8
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 ffc9 	bl	800a958 <__lshift>
 80099c6:	4683      	mov	fp, r0
 80099c8:	9b04      	ldr	r3, [sp, #16]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	dd05      	ble.n	80099da <_dtoa_r+0x84a>
 80099ce:	4631      	mov	r1, r6
 80099d0:	461a      	mov	r2, r3
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 ffc0 	bl	800a958 <__lshift>
 80099d8:	4606      	mov	r6, r0
 80099da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d069      	beq.n	8009ab4 <_dtoa_r+0x924>
 80099e0:	4631      	mov	r1, r6
 80099e2:	4658      	mov	r0, fp
 80099e4:	f001 f824 	bl	800aa30 <__mcmp>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	da63      	bge.n	8009ab4 <_dtoa_r+0x924>
 80099ec:	2300      	movs	r3, #0
 80099ee:	4659      	mov	r1, fp
 80099f0:	220a      	movs	r2, #10
 80099f2:	4620      	mov	r0, r4
 80099f4:	f000 fdb6 	bl	800a564 <__multadd>
 80099f8:	9b08      	ldr	r3, [sp, #32]
 80099fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099fe:	4683      	mov	fp, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 818f 	beq.w	8009d24 <_dtoa_r+0xb94>
 8009a06:	4639      	mov	r1, r7
 8009a08:	2300      	movs	r3, #0
 8009a0a:	220a      	movs	r2, #10
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 fda9 	bl	800a564 <__multadd>
 8009a12:	f1b9 0f00 	cmp.w	r9, #0
 8009a16:	4607      	mov	r7, r0
 8009a18:	f300 808e 	bgt.w	8009b38 <_dtoa_r+0x9a8>
 8009a1c:	9b05      	ldr	r3, [sp, #20]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	dc50      	bgt.n	8009ac4 <_dtoa_r+0x934>
 8009a22:	e089      	b.n	8009b38 <_dtoa_r+0x9a8>
 8009a24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a2a:	e75d      	b.n	80098e8 <_dtoa_r+0x758>
 8009a2c:	9b01      	ldr	r3, [sp, #4]
 8009a2e:	1e5e      	subs	r6, r3, #1
 8009a30:	9b06      	ldr	r3, [sp, #24]
 8009a32:	42b3      	cmp	r3, r6
 8009a34:	bfbf      	itttt	lt
 8009a36:	9b06      	ldrlt	r3, [sp, #24]
 8009a38:	9606      	strlt	r6, [sp, #24]
 8009a3a:	1af2      	sublt	r2, r6, r3
 8009a3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009a3e:	bfb6      	itet	lt
 8009a40:	189b      	addlt	r3, r3, r2
 8009a42:	1b9e      	subge	r6, r3, r6
 8009a44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	bfb8      	it	lt
 8009a4a:	2600      	movlt	r6, #0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	bfb5      	itete	lt
 8009a50:	eba8 0503 	sublt.w	r5, r8, r3
 8009a54:	9b01      	ldrge	r3, [sp, #4]
 8009a56:	2300      	movlt	r3, #0
 8009a58:	4645      	movge	r5, r8
 8009a5a:	e747      	b.n	80098ec <_dtoa_r+0x75c>
 8009a5c:	9e06      	ldr	r6, [sp, #24]
 8009a5e:	9f08      	ldr	r7, [sp, #32]
 8009a60:	4645      	mov	r5, r8
 8009a62:	e74c      	b.n	80098fe <_dtoa_r+0x76e>
 8009a64:	9a06      	ldr	r2, [sp, #24]
 8009a66:	e775      	b.n	8009954 <_dtoa_r+0x7c4>
 8009a68:	9b05      	ldr	r3, [sp, #20]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	dc18      	bgt.n	8009aa0 <_dtoa_r+0x910>
 8009a6e:	9b02      	ldr	r3, [sp, #8]
 8009a70:	b9b3      	cbnz	r3, 8009aa0 <_dtoa_r+0x910>
 8009a72:	9b03      	ldr	r3, [sp, #12]
 8009a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a78:	b9a3      	cbnz	r3, 8009aa4 <_dtoa_r+0x914>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a80:	0d1b      	lsrs	r3, r3, #20
 8009a82:	051b      	lsls	r3, r3, #20
 8009a84:	b12b      	cbz	r3, 8009a92 <_dtoa_r+0x902>
 8009a86:	9b04      	ldr	r3, [sp, #16]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	f108 0801 	add.w	r8, r8, #1
 8009a90:	2301      	movs	r3, #1
 8009a92:	9306      	str	r3, [sp, #24]
 8009a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f47f af74 	bne.w	8009984 <_dtoa_r+0x7f4>
 8009a9c:	2001      	movs	r0, #1
 8009a9e:	e779      	b.n	8009994 <_dtoa_r+0x804>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e7f6      	b.n	8009a92 <_dtoa_r+0x902>
 8009aa4:	9b02      	ldr	r3, [sp, #8]
 8009aa6:	e7f4      	b.n	8009a92 <_dtoa_r+0x902>
 8009aa8:	d085      	beq.n	80099b6 <_dtoa_r+0x826>
 8009aaa:	4618      	mov	r0, r3
 8009aac:	301c      	adds	r0, #28
 8009aae:	e77d      	b.n	80099ac <_dtoa_r+0x81c>
 8009ab0:	40240000 	.word	0x40240000
 8009ab4:	9b01      	ldr	r3, [sp, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dc38      	bgt.n	8009b2c <_dtoa_r+0x99c>
 8009aba:	9b05      	ldr	r3, [sp, #20]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	dd35      	ble.n	8009b2c <_dtoa_r+0x99c>
 8009ac0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009ac4:	f1b9 0f00 	cmp.w	r9, #0
 8009ac8:	d10d      	bne.n	8009ae6 <_dtoa_r+0x956>
 8009aca:	4631      	mov	r1, r6
 8009acc:	464b      	mov	r3, r9
 8009ace:	2205      	movs	r2, #5
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f000 fd47 	bl	800a564 <__multadd>
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	4606      	mov	r6, r0
 8009ada:	4658      	mov	r0, fp
 8009adc:	f000 ffa8 	bl	800aa30 <__mcmp>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	f73f adbd 	bgt.w	8009660 <_dtoa_r+0x4d0>
 8009ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae8:	9d00      	ldr	r5, [sp, #0]
 8009aea:	ea6f 0a03 	mvn.w	sl, r3
 8009aee:	f04f 0800 	mov.w	r8, #0
 8009af2:	4631      	mov	r1, r6
 8009af4:	4620      	mov	r0, r4
 8009af6:	f000 fd13 	bl	800a520 <_Bfree>
 8009afa:	2f00      	cmp	r7, #0
 8009afc:	f43f aeb4 	beq.w	8009868 <_dtoa_r+0x6d8>
 8009b00:	f1b8 0f00 	cmp.w	r8, #0
 8009b04:	d005      	beq.n	8009b12 <_dtoa_r+0x982>
 8009b06:	45b8      	cmp	r8, r7
 8009b08:	d003      	beq.n	8009b12 <_dtoa_r+0x982>
 8009b0a:	4641      	mov	r1, r8
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f000 fd07 	bl	800a520 <_Bfree>
 8009b12:	4639      	mov	r1, r7
 8009b14:	4620      	mov	r0, r4
 8009b16:	f000 fd03 	bl	800a520 <_Bfree>
 8009b1a:	e6a5      	b.n	8009868 <_dtoa_r+0x6d8>
 8009b1c:	2600      	movs	r6, #0
 8009b1e:	4637      	mov	r7, r6
 8009b20:	e7e1      	b.n	8009ae6 <_dtoa_r+0x956>
 8009b22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009b24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009b28:	4637      	mov	r7, r6
 8009b2a:	e599      	b.n	8009660 <_dtoa_r+0x4d0>
 8009b2c:	9b08      	ldr	r3, [sp, #32]
 8009b2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 80fd 	beq.w	8009d32 <_dtoa_r+0xba2>
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	dd05      	ble.n	8009b48 <_dtoa_r+0x9b8>
 8009b3c:	4639      	mov	r1, r7
 8009b3e:	462a      	mov	r2, r5
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 ff09 	bl	800a958 <__lshift>
 8009b46:	4607      	mov	r7, r0
 8009b48:	9b06      	ldr	r3, [sp, #24]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d05c      	beq.n	8009c08 <_dtoa_r+0xa78>
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	4620      	mov	r0, r4
 8009b52:	f000 fca5 	bl	800a4a0 <_Balloc>
 8009b56:	4605      	mov	r5, r0
 8009b58:	b928      	cbnz	r0, 8009b66 <_dtoa_r+0x9d6>
 8009b5a:	4b80      	ldr	r3, [pc, #512]	; (8009d5c <_dtoa_r+0xbcc>)
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b62:	f7ff bb2e 	b.w	80091c2 <_dtoa_r+0x32>
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	3202      	adds	r2, #2
 8009b6a:	0092      	lsls	r2, r2, #2
 8009b6c:	f107 010c 	add.w	r1, r7, #12
 8009b70:	300c      	adds	r0, #12
 8009b72:	f000 fc87 	bl	800a484 <memcpy>
 8009b76:	2201      	movs	r2, #1
 8009b78:	4629      	mov	r1, r5
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 feec 	bl	800a958 <__lshift>
 8009b80:	9b00      	ldr	r3, [sp, #0]
 8009b82:	3301      	adds	r3, #1
 8009b84:	9301      	str	r3, [sp, #4]
 8009b86:	9b00      	ldr	r3, [sp, #0]
 8009b88:	444b      	add	r3, r9
 8009b8a:	9307      	str	r3, [sp, #28]
 8009b8c:	9b02      	ldr	r3, [sp, #8]
 8009b8e:	f003 0301 	and.w	r3, r3, #1
 8009b92:	46b8      	mov	r8, r7
 8009b94:	9306      	str	r3, [sp, #24]
 8009b96:	4607      	mov	r7, r0
 8009b98:	9b01      	ldr	r3, [sp, #4]
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	4658      	mov	r0, fp
 8009ba0:	9302      	str	r3, [sp, #8]
 8009ba2:	f7ff fa67 	bl	8009074 <quorem>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	3330      	adds	r3, #48	; 0x30
 8009baa:	9004      	str	r0, [sp, #16]
 8009bac:	4641      	mov	r1, r8
 8009bae:	4658      	mov	r0, fp
 8009bb0:	9308      	str	r3, [sp, #32]
 8009bb2:	f000 ff3d 	bl	800aa30 <__mcmp>
 8009bb6:	463a      	mov	r2, r7
 8009bb8:	4681      	mov	r9, r0
 8009bba:	4631      	mov	r1, r6
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 ff53 	bl	800aa68 <__mdiff>
 8009bc2:	68c2      	ldr	r2, [r0, #12]
 8009bc4:	9b08      	ldr	r3, [sp, #32]
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	bb02      	cbnz	r2, 8009c0c <_dtoa_r+0xa7c>
 8009bca:	4601      	mov	r1, r0
 8009bcc:	4658      	mov	r0, fp
 8009bce:	f000 ff2f 	bl	800aa30 <__mcmp>
 8009bd2:	9b08      	ldr	r3, [sp, #32]
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4620      	mov	r0, r4
 8009bda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009bde:	f000 fc9f 	bl	800a520 <_Bfree>
 8009be2:	9b05      	ldr	r3, [sp, #20]
 8009be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009be6:	9d01      	ldr	r5, [sp, #4]
 8009be8:	ea43 0102 	orr.w	r1, r3, r2
 8009bec:	9b06      	ldr	r3, [sp, #24]
 8009bee:	430b      	orrs	r3, r1
 8009bf0:	9b08      	ldr	r3, [sp, #32]
 8009bf2:	d10d      	bne.n	8009c10 <_dtoa_r+0xa80>
 8009bf4:	2b39      	cmp	r3, #57	; 0x39
 8009bf6:	d029      	beq.n	8009c4c <_dtoa_r+0xabc>
 8009bf8:	f1b9 0f00 	cmp.w	r9, #0
 8009bfc:	dd01      	ble.n	8009c02 <_dtoa_r+0xa72>
 8009bfe:	9b04      	ldr	r3, [sp, #16]
 8009c00:	3331      	adds	r3, #49	; 0x31
 8009c02:	9a02      	ldr	r2, [sp, #8]
 8009c04:	7013      	strb	r3, [r2, #0]
 8009c06:	e774      	b.n	8009af2 <_dtoa_r+0x962>
 8009c08:	4638      	mov	r0, r7
 8009c0a:	e7b9      	b.n	8009b80 <_dtoa_r+0x9f0>
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	e7e2      	b.n	8009bd6 <_dtoa_r+0xa46>
 8009c10:	f1b9 0f00 	cmp.w	r9, #0
 8009c14:	db06      	blt.n	8009c24 <_dtoa_r+0xa94>
 8009c16:	9905      	ldr	r1, [sp, #20]
 8009c18:	ea41 0909 	orr.w	r9, r1, r9
 8009c1c:	9906      	ldr	r1, [sp, #24]
 8009c1e:	ea59 0101 	orrs.w	r1, r9, r1
 8009c22:	d120      	bne.n	8009c66 <_dtoa_r+0xad6>
 8009c24:	2a00      	cmp	r2, #0
 8009c26:	ddec      	ble.n	8009c02 <_dtoa_r+0xa72>
 8009c28:	4659      	mov	r1, fp
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	4620      	mov	r0, r4
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	f000 fe92 	bl	800a958 <__lshift>
 8009c34:	4631      	mov	r1, r6
 8009c36:	4683      	mov	fp, r0
 8009c38:	f000 fefa 	bl	800aa30 <__mcmp>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	9b01      	ldr	r3, [sp, #4]
 8009c40:	dc02      	bgt.n	8009c48 <_dtoa_r+0xab8>
 8009c42:	d1de      	bne.n	8009c02 <_dtoa_r+0xa72>
 8009c44:	07da      	lsls	r2, r3, #31
 8009c46:	d5dc      	bpl.n	8009c02 <_dtoa_r+0xa72>
 8009c48:	2b39      	cmp	r3, #57	; 0x39
 8009c4a:	d1d8      	bne.n	8009bfe <_dtoa_r+0xa6e>
 8009c4c:	9a02      	ldr	r2, [sp, #8]
 8009c4e:	2339      	movs	r3, #57	; 0x39
 8009c50:	7013      	strb	r3, [r2, #0]
 8009c52:	462b      	mov	r3, r5
 8009c54:	461d      	mov	r5, r3
 8009c56:	3b01      	subs	r3, #1
 8009c58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c5c:	2a39      	cmp	r2, #57	; 0x39
 8009c5e:	d050      	beq.n	8009d02 <_dtoa_r+0xb72>
 8009c60:	3201      	adds	r2, #1
 8009c62:	701a      	strb	r2, [r3, #0]
 8009c64:	e745      	b.n	8009af2 <_dtoa_r+0x962>
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	dd03      	ble.n	8009c72 <_dtoa_r+0xae2>
 8009c6a:	2b39      	cmp	r3, #57	; 0x39
 8009c6c:	d0ee      	beq.n	8009c4c <_dtoa_r+0xabc>
 8009c6e:	3301      	adds	r3, #1
 8009c70:	e7c7      	b.n	8009c02 <_dtoa_r+0xa72>
 8009c72:	9a01      	ldr	r2, [sp, #4]
 8009c74:	9907      	ldr	r1, [sp, #28]
 8009c76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009c7a:	428a      	cmp	r2, r1
 8009c7c:	d02a      	beq.n	8009cd4 <_dtoa_r+0xb44>
 8009c7e:	4659      	mov	r1, fp
 8009c80:	2300      	movs	r3, #0
 8009c82:	220a      	movs	r2, #10
 8009c84:	4620      	mov	r0, r4
 8009c86:	f000 fc6d 	bl	800a564 <__multadd>
 8009c8a:	45b8      	cmp	r8, r7
 8009c8c:	4683      	mov	fp, r0
 8009c8e:	f04f 0300 	mov.w	r3, #0
 8009c92:	f04f 020a 	mov.w	r2, #10
 8009c96:	4641      	mov	r1, r8
 8009c98:	4620      	mov	r0, r4
 8009c9a:	d107      	bne.n	8009cac <_dtoa_r+0xb1c>
 8009c9c:	f000 fc62 	bl	800a564 <__multadd>
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	e775      	b.n	8009b98 <_dtoa_r+0xa08>
 8009cac:	f000 fc5a 	bl	800a564 <__multadd>
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	4680      	mov	r8, r0
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	220a      	movs	r2, #10
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fc53 	bl	800a564 <__multadd>
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	e7f0      	b.n	8009ca4 <_dtoa_r+0xb14>
 8009cc2:	f1b9 0f00 	cmp.w	r9, #0
 8009cc6:	9a00      	ldr	r2, [sp, #0]
 8009cc8:	bfcc      	ite	gt
 8009cca:	464d      	movgt	r5, r9
 8009ccc:	2501      	movle	r5, #1
 8009cce:	4415      	add	r5, r2
 8009cd0:	f04f 0800 	mov.w	r8, #0
 8009cd4:	4659      	mov	r1, fp
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	4620      	mov	r0, r4
 8009cda:	9301      	str	r3, [sp, #4]
 8009cdc:	f000 fe3c 	bl	800a958 <__lshift>
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4683      	mov	fp, r0
 8009ce4:	f000 fea4 	bl	800aa30 <__mcmp>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	dcb2      	bgt.n	8009c52 <_dtoa_r+0xac2>
 8009cec:	d102      	bne.n	8009cf4 <_dtoa_r+0xb64>
 8009cee:	9b01      	ldr	r3, [sp, #4]
 8009cf0:	07db      	lsls	r3, r3, #31
 8009cf2:	d4ae      	bmi.n	8009c52 <_dtoa_r+0xac2>
 8009cf4:	462b      	mov	r3, r5
 8009cf6:	461d      	mov	r5, r3
 8009cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cfc:	2a30      	cmp	r2, #48	; 0x30
 8009cfe:	d0fa      	beq.n	8009cf6 <_dtoa_r+0xb66>
 8009d00:	e6f7      	b.n	8009af2 <_dtoa_r+0x962>
 8009d02:	9a00      	ldr	r2, [sp, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d1a5      	bne.n	8009c54 <_dtoa_r+0xac4>
 8009d08:	f10a 0a01 	add.w	sl, sl, #1
 8009d0c:	2331      	movs	r3, #49	; 0x31
 8009d0e:	e779      	b.n	8009c04 <_dtoa_r+0xa74>
 8009d10:	4b13      	ldr	r3, [pc, #76]	; (8009d60 <_dtoa_r+0xbd0>)
 8009d12:	f7ff baaf 	b.w	8009274 <_dtoa_r+0xe4>
 8009d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f47f aa86 	bne.w	800922a <_dtoa_r+0x9a>
 8009d1e:	4b11      	ldr	r3, [pc, #68]	; (8009d64 <_dtoa_r+0xbd4>)
 8009d20:	f7ff baa8 	b.w	8009274 <_dtoa_r+0xe4>
 8009d24:	f1b9 0f00 	cmp.w	r9, #0
 8009d28:	dc03      	bgt.n	8009d32 <_dtoa_r+0xba2>
 8009d2a:	9b05      	ldr	r3, [sp, #20]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	f73f aec9 	bgt.w	8009ac4 <_dtoa_r+0x934>
 8009d32:	9d00      	ldr	r5, [sp, #0]
 8009d34:	4631      	mov	r1, r6
 8009d36:	4658      	mov	r0, fp
 8009d38:	f7ff f99c 	bl	8009074 <quorem>
 8009d3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009d40:	f805 3b01 	strb.w	r3, [r5], #1
 8009d44:	9a00      	ldr	r2, [sp, #0]
 8009d46:	1aaa      	subs	r2, r5, r2
 8009d48:	4591      	cmp	r9, r2
 8009d4a:	ddba      	ble.n	8009cc2 <_dtoa_r+0xb32>
 8009d4c:	4659      	mov	r1, fp
 8009d4e:	2300      	movs	r3, #0
 8009d50:	220a      	movs	r2, #10
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 fc06 	bl	800a564 <__multadd>
 8009d58:	4683      	mov	fp, r0
 8009d5a:	e7eb      	b.n	8009d34 <_dtoa_r+0xba4>
 8009d5c:	0800d14c 	.word	0x0800d14c
 8009d60:	0800cf4c 	.word	0x0800cf4c
 8009d64:	0800d0c9 	.word	0x0800d0c9

08009d68 <rshift>:
 8009d68:	6903      	ldr	r3, [r0, #16]
 8009d6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009d6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d72:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009d76:	f100 0414 	add.w	r4, r0, #20
 8009d7a:	dd45      	ble.n	8009e08 <rshift+0xa0>
 8009d7c:	f011 011f 	ands.w	r1, r1, #31
 8009d80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009d84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009d88:	d10c      	bne.n	8009da4 <rshift+0x3c>
 8009d8a:	f100 0710 	add.w	r7, r0, #16
 8009d8e:	4629      	mov	r1, r5
 8009d90:	42b1      	cmp	r1, r6
 8009d92:	d334      	bcc.n	8009dfe <rshift+0x96>
 8009d94:	1a9b      	subs	r3, r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	1eea      	subs	r2, r5, #3
 8009d9a:	4296      	cmp	r6, r2
 8009d9c:	bf38      	it	cc
 8009d9e:	2300      	movcc	r3, #0
 8009da0:	4423      	add	r3, r4
 8009da2:	e015      	b.n	8009dd0 <rshift+0x68>
 8009da4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009da8:	f1c1 0820 	rsb	r8, r1, #32
 8009dac:	40cf      	lsrs	r7, r1
 8009dae:	f105 0e04 	add.w	lr, r5, #4
 8009db2:	46a1      	mov	r9, r4
 8009db4:	4576      	cmp	r6, lr
 8009db6:	46f4      	mov	ip, lr
 8009db8:	d815      	bhi.n	8009de6 <rshift+0x7e>
 8009dba:	1a9b      	subs	r3, r3, r2
 8009dbc:	009a      	lsls	r2, r3, #2
 8009dbe:	3a04      	subs	r2, #4
 8009dc0:	3501      	adds	r5, #1
 8009dc2:	42ae      	cmp	r6, r5
 8009dc4:	bf38      	it	cc
 8009dc6:	2200      	movcc	r2, #0
 8009dc8:	18a3      	adds	r3, r4, r2
 8009dca:	50a7      	str	r7, [r4, r2]
 8009dcc:	b107      	cbz	r7, 8009dd0 <rshift+0x68>
 8009dce:	3304      	adds	r3, #4
 8009dd0:	1b1a      	subs	r2, r3, r4
 8009dd2:	42a3      	cmp	r3, r4
 8009dd4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009dd8:	bf08      	it	eq
 8009dda:	2300      	moveq	r3, #0
 8009ddc:	6102      	str	r2, [r0, #16]
 8009dde:	bf08      	it	eq
 8009de0:	6143      	streq	r3, [r0, #20]
 8009de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009de6:	f8dc c000 	ldr.w	ip, [ip]
 8009dea:	fa0c fc08 	lsl.w	ip, ip, r8
 8009dee:	ea4c 0707 	orr.w	r7, ip, r7
 8009df2:	f849 7b04 	str.w	r7, [r9], #4
 8009df6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009dfa:	40cf      	lsrs	r7, r1
 8009dfc:	e7da      	b.n	8009db4 <rshift+0x4c>
 8009dfe:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e02:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e06:	e7c3      	b.n	8009d90 <rshift+0x28>
 8009e08:	4623      	mov	r3, r4
 8009e0a:	e7e1      	b.n	8009dd0 <rshift+0x68>

08009e0c <__hexdig_fun>:
 8009e0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e10:	2b09      	cmp	r3, #9
 8009e12:	d802      	bhi.n	8009e1a <__hexdig_fun+0xe>
 8009e14:	3820      	subs	r0, #32
 8009e16:	b2c0      	uxtb	r0, r0
 8009e18:	4770      	bx	lr
 8009e1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e1e:	2b05      	cmp	r3, #5
 8009e20:	d801      	bhi.n	8009e26 <__hexdig_fun+0x1a>
 8009e22:	3847      	subs	r0, #71	; 0x47
 8009e24:	e7f7      	b.n	8009e16 <__hexdig_fun+0xa>
 8009e26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009e2a:	2b05      	cmp	r3, #5
 8009e2c:	d801      	bhi.n	8009e32 <__hexdig_fun+0x26>
 8009e2e:	3827      	subs	r0, #39	; 0x27
 8009e30:	e7f1      	b.n	8009e16 <__hexdig_fun+0xa>
 8009e32:	2000      	movs	r0, #0
 8009e34:	4770      	bx	lr
	...

08009e38 <__gethex>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	ed2d 8b02 	vpush	{d8}
 8009e40:	b089      	sub	sp, #36	; 0x24
 8009e42:	ee08 0a10 	vmov	s16, r0
 8009e46:	9304      	str	r3, [sp, #16]
 8009e48:	4bbc      	ldr	r3, [pc, #752]	; (800a13c <__gethex+0x304>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	468b      	mov	fp, r1
 8009e52:	4690      	mov	r8, r2
 8009e54:	f7f6 f9bc 	bl	80001d0 <strlen>
 8009e58:	9b01      	ldr	r3, [sp, #4]
 8009e5a:	f8db 2000 	ldr.w	r2, [fp]
 8009e5e:	4403      	add	r3, r0
 8009e60:	4682      	mov	sl, r0
 8009e62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	1c93      	adds	r3, r2, #2
 8009e6a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e6e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009e72:	32fe      	adds	r2, #254	; 0xfe
 8009e74:	18d1      	adds	r1, r2, r3
 8009e76:	461f      	mov	r7, r3
 8009e78:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e7c:	9100      	str	r1, [sp, #0]
 8009e7e:	2830      	cmp	r0, #48	; 0x30
 8009e80:	d0f8      	beq.n	8009e74 <__gethex+0x3c>
 8009e82:	f7ff ffc3 	bl	8009e0c <__hexdig_fun>
 8009e86:	4604      	mov	r4, r0
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d13a      	bne.n	8009f02 <__gethex+0xca>
 8009e8c:	9901      	ldr	r1, [sp, #4]
 8009e8e:	4652      	mov	r2, sl
 8009e90:	4638      	mov	r0, r7
 8009e92:	f001 f9ed 	bl	800b270 <strncmp>
 8009e96:	4605      	mov	r5, r0
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d168      	bne.n	8009f6e <__gethex+0x136>
 8009e9c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009ea0:	eb07 060a 	add.w	r6, r7, sl
 8009ea4:	f7ff ffb2 	bl	8009e0c <__hexdig_fun>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d062      	beq.n	8009f72 <__gethex+0x13a>
 8009eac:	4633      	mov	r3, r6
 8009eae:	7818      	ldrb	r0, [r3, #0]
 8009eb0:	2830      	cmp	r0, #48	; 0x30
 8009eb2:	461f      	mov	r7, r3
 8009eb4:	f103 0301 	add.w	r3, r3, #1
 8009eb8:	d0f9      	beq.n	8009eae <__gethex+0x76>
 8009eba:	f7ff ffa7 	bl	8009e0c <__hexdig_fun>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	fab0 f480 	clz	r4, r0
 8009ec4:	0964      	lsrs	r4, r4, #5
 8009ec6:	4635      	mov	r5, r6
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	463a      	mov	r2, r7
 8009ecc:	4616      	mov	r6, r2
 8009ece:	3201      	adds	r2, #1
 8009ed0:	7830      	ldrb	r0, [r6, #0]
 8009ed2:	f7ff ff9b 	bl	8009e0c <__hexdig_fun>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d1f8      	bne.n	8009ecc <__gethex+0x94>
 8009eda:	9901      	ldr	r1, [sp, #4]
 8009edc:	4652      	mov	r2, sl
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f001 f9c6 	bl	800b270 <strncmp>
 8009ee4:	b980      	cbnz	r0, 8009f08 <__gethex+0xd0>
 8009ee6:	b94d      	cbnz	r5, 8009efc <__gethex+0xc4>
 8009ee8:	eb06 050a 	add.w	r5, r6, sl
 8009eec:	462a      	mov	r2, r5
 8009eee:	4616      	mov	r6, r2
 8009ef0:	3201      	adds	r2, #1
 8009ef2:	7830      	ldrb	r0, [r6, #0]
 8009ef4:	f7ff ff8a 	bl	8009e0c <__hexdig_fun>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d1f8      	bne.n	8009eee <__gethex+0xb6>
 8009efc:	1bad      	subs	r5, r5, r6
 8009efe:	00ad      	lsls	r5, r5, #2
 8009f00:	e004      	b.n	8009f0c <__gethex+0xd4>
 8009f02:	2400      	movs	r4, #0
 8009f04:	4625      	mov	r5, r4
 8009f06:	e7e0      	b.n	8009eca <__gethex+0x92>
 8009f08:	2d00      	cmp	r5, #0
 8009f0a:	d1f7      	bne.n	8009efc <__gethex+0xc4>
 8009f0c:	7833      	ldrb	r3, [r6, #0]
 8009f0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f12:	2b50      	cmp	r3, #80	; 0x50
 8009f14:	d13b      	bne.n	8009f8e <__gethex+0x156>
 8009f16:	7873      	ldrb	r3, [r6, #1]
 8009f18:	2b2b      	cmp	r3, #43	; 0x2b
 8009f1a:	d02c      	beq.n	8009f76 <__gethex+0x13e>
 8009f1c:	2b2d      	cmp	r3, #45	; 0x2d
 8009f1e:	d02e      	beq.n	8009f7e <__gethex+0x146>
 8009f20:	1c71      	adds	r1, r6, #1
 8009f22:	f04f 0900 	mov.w	r9, #0
 8009f26:	7808      	ldrb	r0, [r1, #0]
 8009f28:	f7ff ff70 	bl	8009e0c <__hexdig_fun>
 8009f2c:	1e43      	subs	r3, r0, #1
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b18      	cmp	r3, #24
 8009f32:	d82c      	bhi.n	8009f8e <__gethex+0x156>
 8009f34:	f1a0 0210 	sub.w	r2, r0, #16
 8009f38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f3c:	f7ff ff66 	bl	8009e0c <__hexdig_fun>
 8009f40:	1e43      	subs	r3, r0, #1
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b18      	cmp	r3, #24
 8009f46:	d91d      	bls.n	8009f84 <__gethex+0x14c>
 8009f48:	f1b9 0f00 	cmp.w	r9, #0
 8009f4c:	d000      	beq.n	8009f50 <__gethex+0x118>
 8009f4e:	4252      	negs	r2, r2
 8009f50:	4415      	add	r5, r2
 8009f52:	f8cb 1000 	str.w	r1, [fp]
 8009f56:	b1e4      	cbz	r4, 8009f92 <__gethex+0x15a>
 8009f58:	9b00      	ldr	r3, [sp, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	bf14      	ite	ne
 8009f5e:	2700      	movne	r7, #0
 8009f60:	2706      	moveq	r7, #6
 8009f62:	4638      	mov	r0, r7
 8009f64:	b009      	add	sp, #36	; 0x24
 8009f66:	ecbd 8b02 	vpop	{d8}
 8009f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6e:	463e      	mov	r6, r7
 8009f70:	4625      	mov	r5, r4
 8009f72:	2401      	movs	r4, #1
 8009f74:	e7ca      	b.n	8009f0c <__gethex+0xd4>
 8009f76:	f04f 0900 	mov.w	r9, #0
 8009f7a:	1cb1      	adds	r1, r6, #2
 8009f7c:	e7d3      	b.n	8009f26 <__gethex+0xee>
 8009f7e:	f04f 0901 	mov.w	r9, #1
 8009f82:	e7fa      	b.n	8009f7a <__gethex+0x142>
 8009f84:	230a      	movs	r3, #10
 8009f86:	fb03 0202 	mla	r2, r3, r2, r0
 8009f8a:	3a10      	subs	r2, #16
 8009f8c:	e7d4      	b.n	8009f38 <__gethex+0x100>
 8009f8e:	4631      	mov	r1, r6
 8009f90:	e7df      	b.n	8009f52 <__gethex+0x11a>
 8009f92:	1bf3      	subs	r3, r6, r7
 8009f94:	3b01      	subs	r3, #1
 8009f96:	4621      	mov	r1, r4
 8009f98:	2b07      	cmp	r3, #7
 8009f9a:	dc0b      	bgt.n	8009fb4 <__gethex+0x17c>
 8009f9c:	ee18 0a10 	vmov	r0, s16
 8009fa0:	f000 fa7e 	bl	800a4a0 <_Balloc>
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	b940      	cbnz	r0, 8009fba <__gethex+0x182>
 8009fa8:	4b65      	ldr	r3, [pc, #404]	; (800a140 <__gethex+0x308>)
 8009faa:	4602      	mov	r2, r0
 8009fac:	21de      	movs	r1, #222	; 0xde
 8009fae:	4865      	ldr	r0, [pc, #404]	; (800a144 <__gethex+0x30c>)
 8009fb0:	f001 f97e 	bl	800b2b0 <__assert_func>
 8009fb4:	3101      	adds	r1, #1
 8009fb6:	105b      	asrs	r3, r3, #1
 8009fb8:	e7ee      	b.n	8009f98 <__gethex+0x160>
 8009fba:	f100 0914 	add.w	r9, r0, #20
 8009fbe:	f04f 0b00 	mov.w	fp, #0
 8009fc2:	f1ca 0301 	rsb	r3, sl, #1
 8009fc6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009fca:	f8cd b000 	str.w	fp, [sp]
 8009fce:	9306      	str	r3, [sp, #24]
 8009fd0:	42b7      	cmp	r7, r6
 8009fd2:	d340      	bcc.n	800a056 <__gethex+0x21e>
 8009fd4:	9802      	ldr	r0, [sp, #8]
 8009fd6:	9b00      	ldr	r3, [sp, #0]
 8009fd8:	f840 3b04 	str.w	r3, [r0], #4
 8009fdc:	eba0 0009 	sub.w	r0, r0, r9
 8009fe0:	1080      	asrs	r0, r0, #2
 8009fe2:	0146      	lsls	r6, r0, #5
 8009fe4:	6120      	str	r0, [r4, #16]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 fb50 	bl	800a68c <__hi0bits>
 8009fec:	1a30      	subs	r0, r6, r0
 8009fee:	f8d8 6000 	ldr.w	r6, [r8]
 8009ff2:	42b0      	cmp	r0, r6
 8009ff4:	dd63      	ble.n	800a0be <__gethex+0x286>
 8009ff6:	1b87      	subs	r7, r0, r6
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 feea 	bl	800add4 <__any_on>
 800a000:	4682      	mov	sl, r0
 800a002:	b1a8      	cbz	r0, 800a030 <__gethex+0x1f8>
 800a004:	1e7b      	subs	r3, r7, #1
 800a006:	1159      	asrs	r1, r3, #5
 800a008:	f003 021f 	and.w	r2, r3, #31
 800a00c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a010:	f04f 0a01 	mov.w	sl, #1
 800a014:	fa0a f202 	lsl.w	r2, sl, r2
 800a018:	420a      	tst	r2, r1
 800a01a:	d009      	beq.n	800a030 <__gethex+0x1f8>
 800a01c:	4553      	cmp	r3, sl
 800a01e:	dd05      	ble.n	800a02c <__gethex+0x1f4>
 800a020:	1eb9      	subs	r1, r7, #2
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fed6 	bl	800add4 <__any_on>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d145      	bne.n	800a0b8 <__gethex+0x280>
 800a02c:	f04f 0a02 	mov.w	sl, #2
 800a030:	4639      	mov	r1, r7
 800a032:	4620      	mov	r0, r4
 800a034:	f7ff fe98 	bl	8009d68 <rshift>
 800a038:	443d      	add	r5, r7
 800a03a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a03e:	42ab      	cmp	r3, r5
 800a040:	da4c      	bge.n	800a0dc <__gethex+0x2a4>
 800a042:	ee18 0a10 	vmov	r0, s16
 800a046:	4621      	mov	r1, r4
 800a048:	f000 fa6a 	bl	800a520 <_Bfree>
 800a04c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a04e:	2300      	movs	r3, #0
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	27a3      	movs	r7, #163	; 0xa3
 800a054:	e785      	b.n	8009f62 <__gethex+0x12a>
 800a056:	1e73      	subs	r3, r6, #1
 800a058:	9a05      	ldr	r2, [sp, #20]
 800a05a:	9303      	str	r3, [sp, #12]
 800a05c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a060:	4293      	cmp	r3, r2
 800a062:	d019      	beq.n	800a098 <__gethex+0x260>
 800a064:	f1bb 0f20 	cmp.w	fp, #32
 800a068:	d107      	bne.n	800a07a <__gethex+0x242>
 800a06a:	9b02      	ldr	r3, [sp, #8]
 800a06c:	9a00      	ldr	r2, [sp, #0]
 800a06e:	f843 2b04 	str.w	r2, [r3], #4
 800a072:	9302      	str	r3, [sp, #8]
 800a074:	2300      	movs	r3, #0
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	469b      	mov	fp, r3
 800a07a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a07e:	f7ff fec5 	bl	8009e0c <__hexdig_fun>
 800a082:	9b00      	ldr	r3, [sp, #0]
 800a084:	f000 000f 	and.w	r0, r0, #15
 800a088:	fa00 f00b 	lsl.w	r0, r0, fp
 800a08c:	4303      	orrs	r3, r0
 800a08e:	9300      	str	r3, [sp, #0]
 800a090:	f10b 0b04 	add.w	fp, fp, #4
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	e00d      	b.n	800a0b4 <__gethex+0x27c>
 800a098:	9b03      	ldr	r3, [sp, #12]
 800a09a:	9a06      	ldr	r2, [sp, #24]
 800a09c:	4413      	add	r3, r2
 800a09e:	42bb      	cmp	r3, r7
 800a0a0:	d3e0      	bcc.n	800a064 <__gethex+0x22c>
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	9901      	ldr	r1, [sp, #4]
 800a0a6:	9307      	str	r3, [sp, #28]
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	f001 f8e1 	bl	800b270 <strncmp>
 800a0ae:	9b07      	ldr	r3, [sp, #28]
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d1d7      	bne.n	800a064 <__gethex+0x22c>
 800a0b4:	461e      	mov	r6, r3
 800a0b6:	e78b      	b.n	8009fd0 <__gethex+0x198>
 800a0b8:	f04f 0a03 	mov.w	sl, #3
 800a0bc:	e7b8      	b.n	800a030 <__gethex+0x1f8>
 800a0be:	da0a      	bge.n	800a0d6 <__gethex+0x29e>
 800a0c0:	1a37      	subs	r7, r6, r0
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	ee18 0a10 	vmov	r0, s16
 800a0c8:	463a      	mov	r2, r7
 800a0ca:	f000 fc45 	bl	800a958 <__lshift>
 800a0ce:	1bed      	subs	r5, r5, r7
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	f100 0914 	add.w	r9, r0, #20
 800a0d6:	f04f 0a00 	mov.w	sl, #0
 800a0da:	e7ae      	b.n	800a03a <__gethex+0x202>
 800a0dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a0e0:	42a8      	cmp	r0, r5
 800a0e2:	dd72      	ble.n	800a1ca <__gethex+0x392>
 800a0e4:	1b45      	subs	r5, r0, r5
 800a0e6:	42ae      	cmp	r6, r5
 800a0e8:	dc36      	bgt.n	800a158 <__gethex+0x320>
 800a0ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d02a      	beq.n	800a148 <__gethex+0x310>
 800a0f2:	2b03      	cmp	r3, #3
 800a0f4:	d02c      	beq.n	800a150 <__gethex+0x318>
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d115      	bne.n	800a126 <__gethex+0x2ee>
 800a0fa:	42ae      	cmp	r6, r5
 800a0fc:	d113      	bne.n	800a126 <__gethex+0x2ee>
 800a0fe:	2e01      	cmp	r6, #1
 800a100:	d10b      	bne.n	800a11a <__gethex+0x2e2>
 800a102:	9a04      	ldr	r2, [sp, #16]
 800a104:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	2301      	movs	r3, #1
 800a10c:	6123      	str	r3, [r4, #16]
 800a10e:	f8c9 3000 	str.w	r3, [r9]
 800a112:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a114:	2762      	movs	r7, #98	; 0x62
 800a116:	601c      	str	r4, [r3, #0]
 800a118:	e723      	b.n	8009f62 <__gethex+0x12a>
 800a11a:	1e71      	subs	r1, r6, #1
 800a11c:	4620      	mov	r0, r4
 800a11e:	f000 fe59 	bl	800add4 <__any_on>
 800a122:	2800      	cmp	r0, #0
 800a124:	d1ed      	bne.n	800a102 <__gethex+0x2ca>
 800a126:	ee18 0a10 	vmov	r0, s16
 800a12a:	4621      	mov	r1, r4
 800a12c:	f000 f9f8 	bl	800a520 <_Bfree>
 800a130:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a132:	2300      	movs	r3, #0
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	2750      	movs	r7, #80	; 0x50
 800a138:	e713      	b.n	8009f62 <__gethex+0x12a>
 800a13a:	bf00      	nop
 800a13c:	0800d1c8 	.word	0x0800d1c8
 800a140:	0800d14c 	.word	0x0800d14c
 800a144:	0800d15d 	.word	0x0800d15d
 800a148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1eb      	bne.n	800a126 <__gethex+0x2ee>
 800a14e:	e7d8      	b.n	800a102 <__gethex+0x2ca>
 800a150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1d5      	bne.n	800a102 <__gethex+0x2ca>
 800a156:	e7e6      	b.n	800a126 <__gethex+0x2ee>
 800a158:	1e6f      	subs	r7, r5, #1
 800a15a:	f1ba 0f00 	cmp.w	sl, #0
 800a15e:	d131      	bne.n	800a1c4 <__gethex+0x38c>
 800a160:	b127      	cbz	r7, 800a16c <__gethex+0x334>
 800a162:	4639      	mov	r1, r7
 800a164:	4620      	mov	r0, r4
 800a166:	f000 fe35 	bl	800add4 <__any_on>
 800a16a:	4682      	mov	sl, r0
 800a16c:	117b      	asrs	r3, r7, #5
 800a16e:	2101      	movs	r1, #1
 800a170:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a174:	f007 071f 	and.w	r7, r7, #31
 800a178:	fa01 f707 	lsl.w	r7, r1, r7
 800a17c:	421f      	tst	r7, r3
 800a17e:	4629      	mov	r1, r5
 800a180:	4620      	mov	r0, r4
 800a182:	bf18      	it	ne
 800a184:	f04a 0a02 	orrne.w	sl, sl, #2
 800a188:	1b76      	subs	r6, r6, r5
 800a18a:	f7ff fded 	bl	8009d68 <rshift>
 800a18e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a192:	2702      	movs	r7, #2
 800a194:	f1ba 0f00 	cmp.w	sl, #0
 800a198:	d048      	beq.n	800a22c <__gethex+0x3f4>
 800a19a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d015      	beq.n	800a1ce <__gethex+0x396>
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	d017      	beq.n	800a1d6 <__gethex+0x39e>
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d109      	bne.n	800a1be <__gethex+0x386>
 800a1aa:	f01a 0f02 	tst.w	sl, #2
 800a1ae:	d006      	beq.n	800a1be <__gethex+0x386>
 800a1b0:	f8d9 0000 	ldr.w	r0, [r9]
 800a1b4:	ea4a 0a00 	orr.w	sl, sl, r0
 800a1b8:	f01a 0f01 	tst.w	sl, #1
 800a1bc:	d10e      	bne.n	800a1dc <__gethex+0x3a4>
 800a1be:	f047 0710 	orr.w	r7, r7, #16
 800a1c2:	e033      	b.n	800a22c <__gethex+0x3f4>
 800a1c4:	f04f 0a01 	mov.w	sl, #1
 800a1c8:	e7d0      	b.n	800a16c <__gethex+0x334>
 800a1ca:	2701      	movs	r7, #1
 800a1cc:	e7e2      	b.n	800a194 <__gethex+0x35c>
 800a1ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1d0:	f1c3 0301 	rsb	r3, r3, #1
 800a1d4:	9315      	str	r3, [sp, #84]	; 0x54
 800a1d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d0f0      	beq.n	800a1be <__gethex+0x386>
 800a1dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a1e0:	f104 0314 	add.w	r3, r4, #20
 800a1e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a1e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a1ec:	f04f 0c00 	mov.w	ip, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a1fa:	d01c      	beq.n	800a236 <__gethex+0x3fe>
 800a1fc:	3201      	adds	r2, #1
 800a1fe:	6002      	str	r2, [r0, #0]
 800a200:	2f02      	cmp	r7, #2
 800a202:	f104 0314 	add.w	r3, r4, #20
 800a206:	d13f      	bne.n	800a288 <__gethex+0x450>
 800a208:	f8d8 2000 	ldr.w	r2, [r8]
 800a20c:	3a01      	subs	r2, #1
 800a20e:	42b2      	cmp	r2, r6
 800a210:	d10a      	bne.n	800a228 <__gethex+0x3f0>
 800a212:	1171      	asrs	r1, r6, #5
 800a214:	2201      	movs	r2, #1
 800a216:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a21a:	f006 061f 	and.w	r6, r6, #31
 800a21e:	fa02 f606 	lsl.w	r6, r2, r6
 800a222:	421e      	tst	r6, r3
 800a224:	bf18      	it	ne
 800a226:	4617      	movne	r7, r2
 800a228:	f047 0720 	orr.w	r7, r7, #32
 800a22c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a22e:	601c      	str	r4, [r3, #0]
 800a230:	9b04      	ldr	r3, [sp, #16]
 800a232:	601d      	str	r5, [r3, #0]
 800a234:	e695      	b.n	8009f62 <__gethex+0x12a>
 800a236:	4299      	cmp	r1, r3
 800a238:	f843 cc04 	str.w	ip, [r3, #-4]
 800a23c:	d8d8      	bhi.n	800a1f0 <__gethex+0x3b8>
 800a23e:	68a3      	ldr	r3, [r4, #8]
 800a240:	459b      	cmp	fp, r3
 800a242:	db19      	blt.n	800a278 <__gethex+0x440>
 800a244:	6861      	ldr	r1, [r4, #4]
 800a246:	ee18 0a10 	vmov	r0, s16
 800a24a:	3101      	adds	r1, #1
 800a24c:	f000 f928 	bl	800a4a0 <_Balloc>
 800a250:	4681      	mov	r9, r0
 800a252:	b918      	cbnz	r0, 800a25c <__gethex+0x424>
 800a254:	4b1a      	ldr	r3, [pc, #104]	; (800a2c0 <__gethex+0x488>)
 800a256:	4602      	mov	r2, r0
 800a258:	2184      	movs	r1, #132	; 0x84
 800a25a:	e6a8      	b.n	8009fae <__gethex+0x176>
 800a25c:	6922      	ldr	r2, [r4, #16]
 800a25e:	3202      	adds	r2, #2
 800a260:	f104 010c 	add.w	r1, r4, #12
 800a264:	0092      	lsls	r2, r2, #2
 800a266:	300c      	adds	r0, #12
 800a268:	f000 f90c 	bl	800a484 <memcpy>
 800a26c:	4621      	mov	r1, r4
 800a26e:	ee18 0a10 	vmov	r0, s16
 800a272:	f000 f955 	bl	800a520 <_Bfree>
 800a276:	464c      	mov	r4, r9
 800a278:	6923      	ldr	r3, [r4, #16]
 800a27a:	1c5a      	adds	r2, r3, #1
 800a27c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a280:	6122      	str	r2, [r4, #16]
 800a282:	2201      	movs	r2, #1
 800a284:	615a      	str	r2, [r3, #20]
 800a286:	e7bb      	b.n	800a200 <__gethex+0x3c8>
 800a288:	6922      	ldr	r2, [r4, #16]
 800a28a:	455a      	cmp	r2, fp
 800a28c:	dd0b      	ble.n	800a2a6 <__gethex+0x46e>
 800a28e:	2101      	movs	r1, #1
 800a290:	4620      	mov	r0, r4
 800a292:	f7ff fd69 	bl	8009d68 <rshift>
 800a296:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a29a:	3501      	adds	r5, #1
 800a29c:	42ab      	cmp	r3, r5
 800a29e:	f6ff aed0 	blt.w	800a042 <__gethex+0x20a>
 800a2a2:	2701      	movs	r7, #1
 800a2a4:	e7c0      	b.n	800a228 <__gethex+0x3f0>
 800a2a6:	f016 061f 	ands.w	r6, r6, #31
 800a2aa:	d0fa      	beq.n	800a2a2 <__gethex+0x46a>
 800a2ac:	449a      	add	sl, r3
 800a2ae:	f1c6 0620 	rsb	r6, r6, #32
 800a2b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a2b6:	f000 f9e9 	bl	800a68c <__hi0bits>
 800a2ba:	42b0      	cmp	r0, r6
 800a2bc:	dbe7      	blt.n	800a28e <__gethex+0x456>
 800a2be:	e7f0      	b.n	800a2a2 <__gethex+0x46a>
 800a2c0:	0800d14c 	.word	0x0800d14c

0800a2c4 <L_shift>:
 800a2c4:	f1c2 0208 	rsb	r2, r2, #8
 800a2c8:	0092      	lsls	r2, r2, #2
 800a2ca:	b570      	push	{r4, r5, r6, lr}
 800a2cc:	f1c2 0620 	rsb	r6, r2, #32
 800a2d0:	6843      	ldr	r3, [r0, #4]
 800a2d2:	6804      	ldr	r4, [r0, #0]
 800a2d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a2d8:	432c      	orrs	r4, r5
 800a2da:	40d3      	lsrs	r3, r2
 800a2dc:	6004      	str	r4, [r0, #0]
 800a2de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a2e2:	4288      	cmp	r0, r1
 800a2e4:	d3f4      	bcc.n	800a2d0 <L_shift+0xc>
 800a2e6:	bd70      	pop	{r4, r5, r6, pc}

0800a2e8 <__match>:
 800a2e8:	b530      	push	{r4, r5, lr}
 800a2ea:	6803      	ldr	r3, [r0, #0]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2f2:	b914      	cbnz	r4, 800a2fa <__match+0x12>
 800a2f4:	6003      	str	r3, [r0, #0]
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	bd30      	pop	{r4, r5, pc}
 800a2fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a302:	2d19      	cmp	r5, #25
 800a304:	bf98      	it	ls
 800a306:	3220      	addls	r2, #32
 800a308:	42a2      	cmp	r2, r4
 800a30a:	d0f0      	beq.n	800a2ee <__match+0x6>
 800a30c:	2000      	movs	r0, #0
 800a30e:	e7f3      	b.n	800a2f8 <__match+0x10>

0800a310 <__hexnan>:
 800a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	680b      	ldr	r3, [r1, #0]
 800a316:	6801      	ldr	r1, [r0, #0]
 800a318:	115e      	asrs	r6, r3, #5
 800a31a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a31e:	f013 031f 	ands.w	r3, r3, #31
 800a322:	b087      	sub	sp, #28
 800a324:	bf18      	it	ne
 800a326:	3604      	addne	r6, #4
 800a328:	2500      	movs	r5, #0
 800a32a:	1f37      	subs	r7, r6, #4
 800a32c:	4682      	mov	sl, r0
 800a32e:	4690      	mov	r8, r2
 800a330:	9301      	str	r3, [sp, #4]
 800a332:	f846 5c04 	str.w	r5, [r6, #-4]
 800a336:	46b9      	mov	r9, r7
 800a338:	463c      	mov	r4, r7
 800a33a:	9502      	str	r5, [sp, #8]
 800a33c:	46ab      	mov	fp, r5
 800a33e:	784a      	ldrb	r2, [r1, #1]
 800a340:	1c4b      	adds	r3, r1, #1
 800a342:	9303      	str	r3, [sp, #12]
 800a344:	b342      	cbz	r2, 800a398 <__hexnan+0x88>
 800a346:	4610      	mov	r0, r2
 800a348:	9105      	str	r1, [sp, #20]
 800a34a:	9204      	str	r2, [sp, #16]
 800a34c:	f7ff fd5e 	bl	8009e0c <__hexdig_fun>
 800a350:	2800      	cmp	r0, #0
 800a352:	d14f      	bne.n	800a3f4 <__hexnan+0xe4>
 800a354:	9a04      	ldr	r2, [sp, #16]
 800a356:	9905      	ldr	r1, [sp, #20]
 800a358:	2a20      	cmp	r2, #32
 800a35a:	d818      	bhi.n	800a38e <__hexnan+0x7e>
 800a35c:	9b02      	ldr	r3, [sp, #8]
 800a35e:	459b      	cmp	fp, r3
 800a360:	dd13      	ble.n	800a38a <__hexnan+0x7a>
 800a362:	454c      	cmp	r4, r9
 800a364:	d206      	bcs.n	800a374 <__hexnan+0x64>
 800a366:	2d07      	cmp	r5, #7
 800a368:	dc04      	bgt.n	800a374 <__hexnan+0x64>
 800a36a:	462a      	mov	r2, r5
 800a36c:	4649      	mov	r1, r9
 800a36e:	4620      	mov	r0, r4
 800a370:	f7ff ffa8 	bl	800a2c4 <L_shift>
 800a374:	4544      	cmp	r4, r8
 800a376:	d950      	bls.n	800a41a <__hexnan+0x10a>
 800a378:	2300      	movs	r3, #0
 800a37a:	f1a4 0904 	sub.w	r9, r4, #4
 800a37e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a382:	f8cd b008 	str.w	fp, [sp, #8]
 800a386:	464c      	mov	r4, r9
 800a388:	461d      	mov	r5, r3
 800a38a:	9903      	ldr	r1, [sp, #12]
 800a38c:	e7d7      	b.n	800a33e <__hexnan+0x2e>
 800a38e:	2a29      	cmp	r2, #41	; 0x29
 800a390:	d156      	bne.n	800a440 <__hexnan+0x130>
 800a392:	3102      	adds	r1, #2
 800a394:	f8ca 1000 	str.w	r1, [sl]
 800a398:	f1bb 0f00 	cmp.w	fp, #0
 800a39c:	d050      	beq.n	800a440 <__hexnan+0x130>
 800a39e:	454c      	cmp	r4, r9
 800a3a0:	d206      	bcs.n	800a3b0 <__hexnan+0xa0>
 800a3a2:	2d07      	cmp	r5, #7
 800a3a4:	dc04      	bgt.n	800a3b0 <__hexnan+0xa0>
 800a3a6:	462a      	mov	r2, r5
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f7ff ff8a 	bl	800a2c4 <L_shift>
 800a3b0:	4544      	cmp	r4, r8
 800a3b2:	d934      	bls.n	800a41e <__hexnan+0x10e>
 800a3b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a3b8:	4623      	mov	r3, r4
 800a3ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a3be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a3c2:	429f      	cmp	r7, r3
 800a3c4:	d2f9      	bcs.n	800a3ba <__hexnan+0xaa>
 800a3c6:	1b3b      	subs	r3, r7, r4
 800a3c8:	f023 0303 	bic.w	r3, r3, #3
 800a3cc:	3304      	adds	r3, #4
 800a3ce:	3401      	adds	r4, #1
 800a3d0:	3e03      	subs	r6, #3
 800a3d2:	42b4      	cmp	r4, r6
 800a3d4:	bf88      	it	hi
 800a3d6:	2304      	movhi	r3, #4
 800a3d8:	4443      	add	r3, r8
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f843 2b04 	str.w	r2, [r3], #4
 800a3e0:	429f      	cmp	r7, r3
 800a3e2:	d2fb      	bcs.n	800a3dc <__hexnan+0xcc>
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	b91b      	cbnz	r3, 800a3f0 <__hexnan+0xe0>
 800a3e8:	4547      	cmp	r7, r8
 800a3ea:	d127      	bne.n	800a43c <__hexnan+0x12c>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	603b      	str	r3, [r7, #0]
 800a3f0:	2005      	movs	r0, #5
 800a3f2:	e026      	b.n	800a442 <__hexnan+0x132>
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	2d08      	cmp	r5, #8
 800a3f8:	f10b 0b01 	add.w	fp, fp, #1
 800a3fc:	dd06      	ble.n	800a40c <__hexnan+0xfc>
 800a3fe:	4544      	cmp	r4, r8
 800a400:	d9c3      	bls.n	800a38a <__hexnan+0x7a>
 800a402:	2300      	movs	r3, #0
 800a404:	f844 3c04 	str.w	r3, [r4, #-4]
 800a408:	2501      	movs	r5, #1
 800a40a:	3c04      	subs	r4, #4
 800a40c:	6822      	ldr	r2, [r4, #0]
 800a40e:	f000 000f 	and.w	r0, r0, #15
 800a412:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a416:	6022      	str	r2, [r4, #0]
 800a418:	e7b7      	b.n	800a38a <__hexnan+0x7a>
 800a41a:	2508      	movs	r5, #8
 800a41c:	e7b5      	b.n	800a38a <__hexnan+0x7a>
 800a41e:	9b01      	ldr	r3, [sp, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d0df      	beq.n	800a3e4 <__hexnan+0xd4>
 800a424:	f04f 32ff 	mov.w	r2, #4294967295
 800a428:	f1c3 0320 	rsb	r3, r3, #32
 800a42c:	fa22 f303 	lsr.w	r3, r2, r3
 800a430:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a434:	401a      	ands	r2, r3
 800a436:	f846 2c04 	str.w	r2, [r6, #-4]
 800a43a:	e7d3      	b.n	800a3e4 <__hexnan+0xd4>
 800a43c:	3f04      	subs	r7, #4
 800a43e:	e7d1      	b.n	800a3e4 <__hexnan+0xd4>
 800a440:	2004      	movs	r0, #4
 800a442:	b007      	add	sp, #28
 800a444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a448 <_localeconv_r>:
 800a448:	4800      	ldr	r0, [pc, #0]	; (800a44c <_localeconv_r+0x4>)
 800a44a:	4770      	bx	lr
 800a44c:	200002c8 	.word	0x200002c8

0800a450 <malloc>:
 800a450:	4b02      	ldr	r3, [pc, #8]	; (800a45c <malloc+0xc>)
 800a452:	4601      	mov	r1, r0
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	f000 bd3d 	b.w	800aed4 <_malloc_r>
 800a45a:	bf00      	nop
 800a45c:	20000170 	.word	0x20000170

0800a460 <__ascii_mbtowc>:
 800a460:	b082      	sub	sp, #8
 800a462:	b901      	cbnz	r1, 800a466 <__ascii_mbtowc+0x6>
 800a464:	a901      	add	r1, sp, #4
 800a466:	b142      	cbz	r2, 800a47a <__ascii_mbtowc+0x1a>
 800a468:	b14b      	cbz	r3, 800a47e <__ascii_mbtowc+0x1e>
 800a46a:	7813      	ldrb	r3, [r2, #0]
 800a46c:	600b      	str	r3, [r1, #0]
 800a46e:	7812      	ldrb	r2, [r2, #0]
 800a470:	1e10      	subs	r0, r2, #0
 800a472:	bf18      	it	ne
 800a474:	2001      	movne	r0, #1
 800a476:	b002      	add	sp, #8
 800a478:	4770      	bx	lr
 800a47a:	4610      	mov	r0, r2
 800a47c:	e7fb      	b.n	800a476 <__ascii_mbtowc+0x16>
 800a47e:	f06f 0001 	mvn.w	r0, #1
 800a482:	e7f8      	b.n	800a476 <__ascii_mbtowc+0x16>

0800a484 <memcpy>:
 800a484:	440a      	add	r2, r1
 800a486:	4291      	cmp	r1, r2
 800a488:	f100 33ff 	add.w	r3, r0, #4294967295
 800a48c:	d100      	bne.n	800a490 <memcpy+0xc>
 800a48e:	4770      	bx	lr
 800a490:	b510      	push	{r4, lr}
 800a492:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a49a:	4291      	cmp	r1, r2
 800a49c:	d1f9      	bne.n	800a492 <memcpy+0xe>
 800a49e:	bd10      	pop	{r4, pc}

0800a4a0 <_Balloc>:
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	460d      	mov	r5, r1
 800a4a8:	b976      	cbnz	r6, 800a4c8 <_Balloc+0x28>
 800a4aa:	2010      	movs	r0, #16
 800a4ac:	f7ff ffd0 	bl	800a450 <malloc>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	6260      	str	r0, [r4, #36]	; 0x24
 800a4b4:	b920      	cbnz	r0, 800a4c0 <_Balloc+0x20>
 800a4b6:	4b18      	ldr	r3, [pc, #96]	; (800a518 <_Balloc+0x78>)
 800a4b8:	4818      	ldr	r0, [pc, #96]	; (800a51c <_Balloc+0x7c>)
 800a4ba:	2166      	movs	r1, #102	; 0x66
 800a4bc:	f000 fef8 	bl	800b2b0 <__assert_func>
 800a4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4c4:	6006      	str	r6, [r0, #0]
 800a4c6:	60c6      	str	r6, [r0, #12]
 800a4c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4ca:	68f3      	ldr	r3, [r6, #12]
 800a4cc:	b183      	cbz	r3, 800a4f0 <_Balloc+0x50>
 800a4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4d6:	b9b8      	cbnz	r0, 800a508 <_Balloc+0x68>
 800a4d8:	2101      	movs	r1, #1
 800a4da:	fa01 f605 	lsl.w	r6, r1, r5
 800a4de:	1d72      	adds	r2, r6, #5
 800a4e0:	0092      	lsls	r2, r2, #2
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 fc97 	bl	800ae16 <_calloc_r>
 800a4e8:	b160      	cbz	r0, 800a504 <_Balloc+0x64>
 800a4ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4ee:	e00e      	b.n	800a50e <_Balloc+0x6e>
 800a4f0:	2221      	movs	r2, #33	; 0x21
 800a4f2:	2104      	movs	r1, #4
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 fc8e 	bl	800ae16 <_calloc_r>
 800a4fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4fc:	60f0      	str	r0, [r6, #12]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e4      	bne.n	800a4ce <_Balloc+0x2e>
 800a504:	2000      	movs	r0, #0
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	6802      	ldr	r2, [r0, #0]
 800a50a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a50e:	2300      	movs	r3, #0
 800a510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a514:	e7f7      	b.n	800a506 <_Balloc+0x66>
 800a516:	bf00      	nop
 800a518:	0800d0d6 	.word	0x0800d0d6
 800a51c:	0800d1dc 	.word	0x0800d1dc

0800a520 <_Bfree>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a524:	4605      	mov	r5, r0
 800a526:	460c      	mov	r4, r1
 800a528:	b976      	cbnz	r6, 800a548 <_Bfree+0x28>
 800a52a:	2010      	movs	r0, #16
 800a52c:	f7ff ff90 	bl	800a450 <malloc>
 800a530:	4602      	mov	r2, r0
 800a532:	6268      	str	r0, [r5, #36]	; 0x24
 800a534:	b920      	cbnz	r0, 800a540 <_Bfree+0x20>
 800a536:	4b09      	ldr	r3, [pc, #36]	; (800a55c <_Bfree+0x3c>)
 800a538:	4809      	ldr	r0, [pc, #36]	; (800a560 <_Bfree+0x40>)
 800a53a:	218a      	movs	r1, #138	; 0x8a
 800a53c:	f000 feb8 	bl	800b2b0 <__assert_func>
 800a540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a544:	6006      	str	r6, [r0, #0]
 800a546:	60c6      	str	r6, [r0, #12]
 800a548:	b13c      	cbz	r4, 800a55a <_Bfree+0x3a>
 800a54a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a54c:	6862      	ldr	r2, [r4, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a554:	6021      	str	r1, [r4, #0]
 800a556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a55a:	bd70      	pop	{r4, r5, r6, pc}
 800a55c:	0800d0d6 	.word	0x0800d0d6
 800a560:	0800d1dc 	.word	0x0800d1dc

0800a564 <__multadd>:
 800a564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a568:	690e      	ldr	r6, [r1, #16]
 800a56a:	4607      	mov	r7, r0
 800a56c:	4698      	mov	r8, r3
 800a56e:	460c      	mov	r4, r1
 800a570:	f101 0014 	add.w	r0, r1, #20
 800a574:	2300      	movs	r3, #0
 800a576:	6805      	ldr	r5, [r0, #0]
 800a578:	b2a9      	uxth	r1, r5
 800a57a:	fb02 8101 	mla	r1, r2, r1, r8
 800a57e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a582:	0c2d      	lsrs	r5, r5, #16
 800a584:	fb02 c505 	mla	r5, r2, r5, ip
 800a588:	b289      	uxth	r1, r1
 800a58a:	3301      	adds	r3, #1
 800a58c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a590:	429e      	cmp	r6, r3
 800a592:	f840 1b04 	str.w	r1, [r0], #4
 800a596:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a59a:	dcec      	bgt.n	800a576 <__multadd+0x12>
 800a59c:	f1b8 0f00 	cmp.w	r8, #0
 800a5a0:	d022      	beq.n	800a5e8 <__multadd+0x84>
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	42b3      	cmp	r3, r6
 800a5a6:	dc19      	bgt.n	800a5dc <__multadd+0x78>
 800a5a8:	6861      	ldr	r1, [r4, #4]
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	3101      	adds	r1, #1
 800a5ae:	f7ff ff77 	bl	800a4a0 <_Balloc>
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	b928      	cbnz	r0, 800a5c2 <__multadd+0x5e>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	4b0d      	ldr	r3, [pc, #52]	; (800a5f0 <__multadd+0x8c>)
 800a5ba:	480e      	ldr	r0, [pc, #56]	; (800a5f4 <__multadd+0x90>)
 800a5bc:	21b5      	movs	r1, #181	; 0xb5
 800a5be:	f000 fe77 	bl	800b2b0 <__assert_func>
 800a5c2:	6922      	ldr	r2, [r4, #16]
 800a5c4:	3202      	adds	r2, #2
 800a5c6:	f104 010c 	add.w	r1, r4, #12
 800a5ca:	0092      	lsls	r2, r2, #2
 800a5cc:	300c      	adds	r0, #12
 800a5ce:	f7ff ff59 	bl	800a484 <memcpy>
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f7ff ffa3 	bl	800a520 <_Bfree>
 800a5da:	462c      	mov	r4, r5
 800a5dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a5e0:	3601      	adds	r6, #1
 800a5e2:	f8c3 8014 	str.w	r8, [r3, #20]
 800a5e6:	6126      	str	r6, [r4, #16]
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ee:	bf00      	nop
 800a5f0:	0800d14c 	.word	0x0800d14c
 800a5f4:	0800d1dc 	.word	0x0800d1dc

0800a5f8 <__s2b>:
 800a5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	4615      	mov	r5, r2
 800a600:	461f      	mov	r7, r3
 800a602:	2209      	movs	r2, #9
 800a604:	3308      	adds	r3, #8
 800a606:	4606      	mov	r6, r0
 800a608:	fb93 f3f2 	sdiv	r3, r3, r2
 800a60c:	2100      	movs	r1, #0
 800a60e:	2201      	movs	r2, #1
 800a610:	429a      	cmp	r2, r3
 800a612:	db09      	blt.n	800a628 <__s2b+0x30>
 800a614:	4630      	mov	r0, r6
 800a616:	f7ff ff43 	bl	800a4a0 <_Balloc>
 800a61a:	b940      	cbnz	r0, 800a62e <__s2b+0x36>
 800a61c:	4602      	mov	r2, r0
 800a61e:	4b19      	ldr	r3, [pc, #100]	; (800a684 <__s2b+0x8c>)
 800a620:	4819      	ldr	r0, [pc, #100]	; (800a688 <__s2b+0x90>)
 800a622:	21ce      	movs	r1, #206	; 0xce
 800a624:	f000 fe44 	bl	800b2b0 <__assert_func>
 800a628:	0052      	lsls	r2, r2, #1
 800a62a:	3101      	adds	r1, #1
 800a62c:	e7f0      	b.n	800a610 <__s2b+0x18>
 800a62e:	9b08      	ldr	r3, [sp, #32]
 800a630:	6143      	str	r3, [r0, #20]
 800a632:	2d09      	cmp	r5, #9
 800a634:	f04f 0301 	mov.w	r3, #1
 800a638:	6103      	str	r3, [r0, #16]
 800a63a:	dd16      	ble.n	800a66a <__s2b+0x72>
 800a63c:	f104 0909 	add.w	r9, r4, #9
 800a640:	46c8      	mov	r8, r9
 800a642:	442c      	add	r4, r5
 800a644:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a648:	4601      	mov	r1, r0
 800a64a:	3b30      	subs	r3, #48	; 0x30
 800a64c:	220a      	movs	r2, #10
 800a64e:	4630      	mov	r0, r6
 800a650:	f7ff ff88 	bl	800a564 <__multadd>
 800a654:	45a0      	cmp	r8, r4
 800a656:	d1f5      	bne.n	800a644 <__s2b+0x4c>
 800a658:	f1a5 0408 	sub.w	r4, r5, #8
 800a65c:	444c      	add	r4, r9
 800a65e:	1b2d      	subs	r5, r5, r4
 800a660:	1963      	adds	r3, r4, r5
 800a662:	42bb      	cmp	r3, r7
 800a664:	db04      	blt.n	800a670 <__s2b+0x78>
 800a666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66a:	340a      	adds	r4, #10
 800a66c:	2509      	movs	r5, #9
 800a66e:	e7f6      	b.n	800a65e <__s2b+0x66>
 800a670:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a674:	4601      	mov	r1, r0
 800a676:	3b30      	subs	r3, #48	; 0x30
 800a678:	220a      	movs	r2, #10
 800a67a:	4630      	mov	r0, r6
 800a67c:	f7ff ff72 	bl	800a564 <__multadd>
 800a680:	e7ee      	b.n	800a660 <__s2b+0x68>
 800a682:	bf00      	nop
 800a684:	0800d14c 	.word	0x0800d14c
 800a688:	0800d1dc 	.word	0x0800d1dc

0800a68c <__hi0bits>:
 800a68c:	0c03      	lsrs	r3, r0, #16
 800a68e:	041b      	lsls	r3, r3, #16
 800a690:	b9d3      	cbnz	r3, 800a6c8 <__hi0bits+0x3c>
 800a692:	0400      	lsls	r0, r0, #16
 800a694:	2310      	movs	r3, #16
 800a696:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a69a:	bf04      	itt	eq
 800a69c:	0200      	lsleq	r0, r0, #8
 800a69e:	3308      	addeq	r3, #8
 800a6a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a6a4:	bf04      	itt	eq
 800a6a6:	0100      	lsleq	r0, r0, #4
 800a6a8:	3304      	addeq	r3, #4
 800a6aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a6ae:	bf04      	itt	eq
 800a6b0:	0080      	lsleq	r0, r0, #2
 800a6b2:	3302      	addeq	r3, #2
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	db05      	blt.n	800a6c4 <__hi0bits+0x38>
 800a6b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a6bc:	f103 0301 	add.w	r3, r3, #1
 800a6c0:	bf08      	it	eq
 800a6c2:	2320      	moveq	r3, #32
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	4770      	bx	lr
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e7e4      	b.n	800a696 <__hi0bits+0xa>

0800a6cc <__lo0bits>:
 800a6cc:	6803      	ldr	r3, [r0, #0]
 800a6ce:	f013 0207 	ands.w	r2, r3, #7
 800a6d2:	4601      	mov	r1, r0
 800a6d4:	d00b      	beq.n	800a6ee <__lo0bits+0x22>
 800a6d6:	07da      	lsls	r2, r3, #31
 800a6d8:	d424      	bmi.n	800a724 <__lo0bits+0x58>
 800a6da:	0798      	lsls	r0, r3, #30
 800a6dc:	bf49      	itett	mi
 800a6de:	085b      	lsrmi	r3, r3, #1
 800a6e0:	089b      	lsrpl	r3, r3, #2
 800a6e2:	2001      	movmi	r0, #1
 800a6e4:	600b      	strmi	r3, [r1, #0]
 800a6e6:	bf5c      	itt	pl
 800a6e8:	600b      	strpl	r3, [r1, #0]
 800a6ea:	2002      	movpl	r0, #2
 800a6ec:	4770      	bx	lr
 800a6ee:	b298      	uxth	r0, r3
 800a6f0:	b9b0      	cbnz	r0, 800a720 <__lo0bits+0x54>
 800a6f2:	0c1b      	lsrs	r3, r3, #16
 800a6f4:	2010      	movs	r0, #16
 800a6f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a6fa:	bf04      	itt	eq
 800a6fc:	0a1b      	lsreq	r3, r3, #8
 800a6fe:	3008      	addeq	r0, #8
 800a700:	071a      	lsls	r2, r3, #28
 800a702:	bf04      	itt	eq
 800a704:	091b      	lsreq	r3, r3, #4
 800a706:	3004      	addeq	r0, #4
 800a708:	079a      	lsls	r2, r3, #30
 800a70a:	bf04      	itt	eq
 800a70c:	089b      	lsreq	r3, r3, #2
 800a70e:	3002      	addeq	r0, #2
 800a710:	07da      	lsls	r2, r3, #31
 800a712:	d403      	bmi.n	800a71c <__lo0bits+0x50>
 800a714:	085b      	lsrs	r3, r3, #1
 800a716:	f100 0001 	add.w	r0, r0, #1
 800a71a:	d005      	beq.n	800a728 <__lo0bits+0x5c>
 800a71c:	600b      	str	r3, [r1, #0]
 800a71e:	4770      	bx	lr
 800a720:	4610      	mov	r0, r2
 800a722:	e7e8      	b.n	800a6f6 <__lo0bits+0x2a>
 800a724:	2000      	movs	r0, #0
 800a726:	4770      	bx	lr
 800a728:	2020      	movs	r0, #32
 800a72a:	4770      	bx	lr

0800a72c <__i2b>:
 800a72c:	b510      	push	{r4, lr}
 800a72e:	460c      	mov	r4, r1
 800a730:	2101      	movs	r1, #1
 800a732:	f7ff feb5 	bl	800a4a0 <_Balloc>
 800a736:	4602      	mov	r2, r0
 800a738:	b928      	cbnz	r0, 800a746 <__i2b+0x1a>
 800a73a:	4b05      	ldr	r3, [pc, #20]	; (800a750 <__i2b+0x24>)
 800a73c:	4805      	ldr	r0, [pc, #20]	; (800a754 <__i2b+0x28>)
 800a73e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a742:	f000 fdb5 	bl	800b2b0 <__assert_func>
 800a746:	2301      	movs	r3, #1
 800a748:	6144      	str	r4, [r0, #20]
 800a74a:	6103      	str	r3, [r0, #16]
 800a74c:	bd10      	pop	{r4, pc}
 800a74e:	bf00      	nop
 800a750:	0800d14c 	.word	0x0800d14c
 800a754:	0800d1dc 	.word	0x0800d1dc

0800a758 <__multiply>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	4614      	mov	r4, r2
 800a75e:	690a      	ldr	r2, [r1, #16]
 800a760:	6923      	ldr	r3, [r4, #16]
 800a762:	429a      	cmp	r2, r3
 800a764:	bfb8      	it	lt
 800a766:	460b      	movlt	r3, r1
 800a768:	460d      	mov	r5, r1
 800a76a:	bfbc      	itt	lt
 800a76c:	4625      	movlt	r5, r4
 800a76e:	461c      	movlt	r4, r3
 800a770:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a774:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a778:	68ab      	ldr	r3, [r5, #8]
 800a77a:	6869      	ldr	r1, [r5, #4]
 800a77c:	eb0a 0709 	add.w	r7, sl, r9
 800a780:	42bb      	cmp	r3, r7
 800a782:	b085      	sub	sp, #20
 800a784:	bfb8      	it	lt
 800a786:	3101      	addlt	r1, #1
 800a788:	f7ff fe8a 	bl	800a4a0 <_Balloc>
 800a78c:	b930      	cbnz	r0, 800a79c <__multiply+0x44>
 800a78e:	4602      	mov	r2, r0
 800a790:	4b42      	ldr	r3, [pc, #264]	; (800a89c <__multiply+0x144>)
 800a792:	4843      	ldr	r0, [pc, #268]	; (800a8a0 <__multiply+0x148>)
 800a794:	f240 115d 	movw	r1, #349	; 0x15d
 800a798:	f000 fd8a 	bl	800b2b0 <__assert_func>
 800a79c:	f100 0614 	add.w	r6, r0, #20
 800a7a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a7a4:	4633      	mov	r3, r6
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	4543      	cmp	r3, r8
 800a7aa:	d31e      	bcc.n	800a7ea <__multiply+0x92>
 800a7ac:	f105 0c14 	add.w	ip, r5, #20
 800a7b0:	f104 0314 	add.w	r3, r4, #20
 800a7b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a7b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a7bc:	9202      	str	r2, [sp, #8]
 800a7be:	ebac 0205 	sub.w	r2, ip, r5
 800a7c2:	3a15      	subs	r2, #21
 800a7c4:	f022 0203 	bic.w	r2, r2, #3
 800a7c8:	3204      	adds	r2, #4
 800a7ca:	f105 0115 	add.w	r1, r5, #21
 800a7ce:	458c      	cmp	ip, r1
 800a7d0:	bf38      	it	cc
 800a7d2:	2204      	movcc	r2, #4
 800a7d4:	9201      	str	r2, [sp, #4]
 800a7d6:	9a02      	ldr	r2, [sp, #8]
 800a7d8:	9303      	str	r3, [sp, #12]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d808      	bhi.n	800a7f0 <__multiply+0x98>
 800a7de:	2f00      	cmp	r7, #0
 800a7e0:	dc55      	bgt.n	800a88e <__multiply+0x136>
 800a7e2:	6107      	str	r7, [r0, #16]
 800a7e4:	b005      	add	sp, #20
 800a7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ea:	f843 2b04 	str.w	r2, [r3], #4
 800a7ee:	e7db      	b.n	800a7a8 <__multiply+0x50>
 800a7f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800a7f4:	f1ba 0f00 	cmp.w	sl, #0
 800a7f8:	d020      	beq.n	800a83c <__multiply+0xe4>
 800a7fa:	f105 0e14 	add.w	lr, r5, #20
 800a7fe:	46b1      	mov	r9, r6
 800a800:	2200      	movs	r2, #0
 800a802:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a806:	f8d9 b000 	ldr.w	fp, [r9]
 800a80a:	b2a1      	uxth	r1, r4
 800a80c:	fa1f fb8b 	uxth.w	fp, fp
 800a810:	fb0a b101 	mla	r1, sl, r1, fp
 800a814:	4411      	add	r1, r2
 800a816:	f8d9 2000 	ldr.w	r2, [r9]
 800a81a:	0c24      	lsrs	r4, r4, #16
 800a81c:	0c12      	lsrs	r2, r2, #16
 800a81e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a822:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a826:	b289      	uxth	r1, r1
 800a828:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a82c:	45f4      	cmp	ip, lr
 800a82e:	f849 1b04 	str.w	r1, [r9], #4
 800a832:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a836:	d8e4      	bhi.n	800a802 <__multiply+0xaa>
 800a838:	9901      	ldr	r1, [sp, #4]
 800a83a:	5072      	str	r2, [r6, r1]
 800a83c:	9a03      	ldr	r2, [sp, #12]
 800a83e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a842:	3304      	adds	r3, #4
 800a844:	f1b9 0f00 	cmp.w	r9, #0
 800a848:	d01f      	beq.n	800a88a <__multiply+0x132>
 800a84a:	6834      	ldr	r4, [r6, #0]
 800a84c:	f105 0114 	add.w	r1, r5, #20
 800a850:	46b6      	mov	lr, r6
 800a852:	f04f 0a00 	mov.w	sl, #0
 800a856:	880a      	ldrh	r2, [r1, #0]
 800a858:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a85c:	fb09 b202 	mla	r2, r9, r2, fp
 800a860:	4492      	add	sl, r2
 800a862:	b2a4      	uxth	r4, r4
 800a864:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a868:	f84e 4b04 	str.w	r4, [lr], #4
 800a86c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a870:	f8be 2000 	ldrh.w	r2, [lr]
 800a874:	0c24      	lsrs	r4, r4, #16
 800a876:	fb09 2404 	mla	r4, r9, r4, r2
 800a87a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a87e:	458c      	cmp	ip, r1
 800a880:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a884:	d8e7      	bhi.n	800a856 <__multiply+0xfe>
 800a886:	9a01      	ldr	r2, [sp, #4]
 800a888:	50b4      	str	r4, [r6, r2]
 800a88a:	3604      	adds	r6, #4
 800a88c:	e7a3      	b.n	800a7d6 <__multiply+0x7e>
 800a88e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1a5      	bne.n	800a7e2 <__multiply+0x8a>
 800a896:	3f01      	subs	r7, #1
 800a898:	e7a1      	b.n	800a7de <__multiply+0x86>
 800a89a:	bf00      	nop
 800a89c:	0800d14c 	.word	0x0800d14c
 800a8a0:	0800d1dc 	.word	0x0800d1dc

0800a8a4 <__pow5mult>:
 800a8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	4615      	mov	r5, r2
 800a8aa:	f012 0203 	ands.w	r2, r2, #3
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	460f      	mov	r7, r1
 800a8b2:	d007      	beq.n	800a8c4 <__pow5mult+0x20>
 800a8b4:	4c25      	ldr	r4, [pc, #148]	; (800a94c <__pow5mult+0xa8>)
 800a8b6:	3a01      	subs	r2, #1
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8be:	f7ff fe51 	bl	800a564 <__multadd>
 800a8c2:	4607      	mov	r7, r0
 800a8c4:	10ad      	asrs	r5, r5, #2
 800a8c6:	d03d      	beq.n	800a944 <__pow5mult+0xa0>
 800a8c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a8ca:	b97c      	cbnz	r4, 800a8ec <__pow5mult+0x48>
 800a8cc:	2010      	movs	r0, #16
 800a8ce:	f7ff fdbf 	bl	800a450 <malloc>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	6270      	str	r0, [r6, #36]	; 0x24
 800a8d6:	b928      	cbnz	r0, 800a8e4 <__pow5mult+0x40>
 800a8d8:	4b1d      	ldr	r3, [pc, #116]	; (800a950 <__pow5mult+0xac>)
 800a8da:	481e      	ldr	r0, [pc, #120]	; (800a954 <__pow5mult+0xb0>)
 800a8dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a8e0:	f000 fce6 	bl	800b2b0 <__assert_func>
 800a8e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8e8:	6004      	str	r4, [r0, #0]
 800a8ea:	60c4      	str	r4, [r0, #12]
 800a8ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a8f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8f4:	b94c      	cbnz	r4, 800a90a <__pow5mult+0x66>
 800a8f6:	f240 2171 	movw	r1, #625	; 0x271
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f7ff ff16 	bl	800a72c <__i2b>
 800a900:	2300      	movs	r3, #0
 800a902:	f8c8 0008 	str.w	r0, [r8, #8]
 800a906:	4604      	mov	r4, r0
 800a908:	6003      	str	r3, [r0, #0]
 800a90a:	f04f 0900 	mov.w	r9, #0
 800a90e:	07eb      	lsls	r3, r5, #31
 800a910:	d50a      	bpl.n	800a928 <__pow5mult+0x84>
 800a912:	4639      	mov	r1, r7
 800a914:	4622      	mov	r2, r4
 800a916:	4630      	mov	r0, r6
 800a918:	f7ff ff1e 	bl	800a758 <__multiply>
 800a91c:	4639      	mov	r1, r7
 800a91e:	4680      	mov	r8, r0
 800a920:	4630      	mov	r0, r6
 800a922:	f7ff fdfd 	bl	800a520 <_Bfree>
 800a926:	4647      	mov	r7, r8
 800a928:	106d      	asrs	r5, r5, #1
 800a92a:	d00b      	beq.n	800a944 <__pow5mult+0xa0>
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	b938      	cbnz	r0, 800a940 <__pow5mult+0x9c>
 800a930:	4622      	mov	r2, r4
 800a932:	4621      	mov	r1, r4
 800a934:	4630      	mov	r0, r6
 800a936:	f7ff ff0f 	bl	800a758 <__multiply>
 800a93a:	6020      	str	r0, [r4, #0]
 800a93c:	f8c0 9000 	str.w	r9, [r0]
 800a940:	4604      	mov	r4, r0
 800a942:	e7e4      	b.n	800a90e <__pow5mult+0x6a>
 800a944:	4638      	mov	r0, r7
 800a946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a94a:	bf00      	nop
 800a94c:	0800d330 	.word	0x0800d330
 800a950:	0800d0d6 	.word	0x0800d0d6
 800a954:	0800d1dc 	.word	0x0800d1dc

0800a958 <__lshift>:
 800a958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a95c:	460c      	mov	r4, r1
 800a95e:	6849      	ldr	r1, [r1, #4]
 800a960:	6923      	ldr	r3, [r4, #16]
 800a962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a966:	68a3      	ldr	r3, [r4, #8]
 800a968:	4607      	mov	r7, r0
 800a96a:	4691      	mov	r9, r2
 800a96c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a970:	f108 0601 	add.w	r6, r8, #1
 800a974:	42b3      	cmp	r3, r6
 800a976:	db0b      	blt.n	800a990 <__lshift+0x38>
 800a978:	4638      	mov	r0, r7
 800a97a:	f7ff fd91 	bl	800a4a0 <_Balloc>
 800a97e:	4605      	mov	r5, r0
 800a980:	b948      	cbnz	r0, 800a996 <__lshift+0x3e>
 800a982:	4602      	mov	r2, r0
 800a984:	4b28      	ldr	r3, [pc, #160]	; (800aa28 <__lshift+0xd0>)
 800a986:	4829      	ldr	r0, [pc, #164]	; (800aa2c <__lshift+0xd4>)
 800a988:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a98c:	f000 fc90 	bl	800b2b0 <__assert_func>
 800a990:	3101      	adds	r1, #1
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	e7ee      	b.n	800a974 <__lshift+0x1c>
 800a996:	2300      	movs	r3, #0
 800a998:	f100 0114 	add.w	r1, r0, #20
 800a99c:	f100 0210 	add.w	r2, r0, #16
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	4553      	cmp	r3, sl
 800a9a4:	db33      	blt.n	800aa0e <__lshift+0xb6>
 800a9a6:	6920      	ldr	r0, [r4, #16]
 800a9a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9ac:	f104 0314 	add.w	r3, r4, #20
 800a9b0:	f019 091f 	ands.w	r9, r9, #31
 800a9b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9bc:	d02b      	beq.n	800aa16 <__lshift+0xbe>
 800a9be:	f1c9 0e20 	rsb	lr, r9, #32
 800a9c2:	468a      	mov	sl, r1
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	6818      	ldr	r0, [r3, #0]
 800a9c8:	fa00 f009 	lsl.w	r0, r0, r9
 800a9cc:	4302      	orrs	r2, r0
 800a9ce:	f84a 2b04 	str.w	r2, [sl], #4
 800a9d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9d6:	459c      	cmp	ip, r3
 800a9d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9dc:	d8f3      	bhi.n	800a9c6 <__lshift+0x6e>
 800a9de:	ebac 0304 	sub.w	r3, ip, r4
 800a9e2:	3b15      	subs	r3, #21
 800a9e4:	f023 0303 	bic.w	r3, r3, #3
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	f104 0015 	add.w	r0, r4, #21
 800a9ee:	4584      	cmp	ip, r0
 800a9f0:	bf38      	it	cc
 800a9f2:	2304      	movcc	r3, #4
 800a9f4:	50ca      	str	r2, [r1, r3]
 800a9f6:	b10a      	cbz	r2, 800a9fc <__lshift+0xa4>
 800a9f8:	f108 0602 	add.w	r6, r8, #2
 800a9fc:	3e01      	subs	r6, #1
 800a9fe:	4638      	mov	r0, r7
 800aa00:	612e      	str	r6, [r5, #16]
 800aa02:	4621      	mov	r1, r4
 800aa04:	f7ff fd8c 	bl	800a520 <_Bfree>
 800aa08:	4628      	mov	r0, r5
 800aa0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa12:	3301      	adds	r3, #1
 800aa14:	e7c5      	b.n	800a9a2 <__lshift+0x4a>
 800aa16:	3904      	subs	r1, #4
 800aa18:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa20:	459c      	cmp	ip, r3
 800aa22:	d8f9      	bhi.n	800aa18 <__lshift+0xc0>
 800aa24:	e7ea      	b.n	800a9fc <__lshift+0xa4>
 800aa26:	bf00      	nop
 800aa28:	0800d14c 	.word	0x0800d14c
 800aa2c:	0800d1dc 	.word	0x0800d1dc

0800aa30 <__mcmp>:
 800aa30:	b530      	push	{r4, r5, lr}
 800aa32:	6902      	ldr	r2, [r0, #16]
 800aa34:	690c      	ldr	r4, [r1, #16]
 800aa36:	1b12      	subs	r2, r2, r4
 800aa38:	d10e      	bne.n	800aa58 <__mcmp+0x28>
 800aa3a:	f100 0314 	add.w	r3, r0, #20
 800aa3e:	3114      	adds	r1, #20
 800aa40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa50:	42a5      	cmp	r5, r4
 800aa52:	d003      	beq.n	800aa5c <__mcmp+0x2c>
 800aa54:	d305      	bcc.n	800aa62 <__mcmp+0x32>
 800aa56:	2201      	movs	r2, #1
 800aa58:	4610      	mov	r0, r2
 800aa5a:	bd30      	pop	{r4, r5, pc}
 800aa5c:	4283      	cmp	r3, r0
 800aa5e:	d3f3      	bcc.n	800aa48 <__mcmp+0x18>
 800aa60:	e7fa      	b.n	800aa58 <__mcmp+0x28>
 800aa62:	f04f 32ff 	mov.w	r2, #4294967295
 800aa66:	e7f7      	b.n	800aa58 <__mcmp+0x28>

0800aa68 <__mdiff>:
 800aa68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	4606      	mov	r6, r0
 800aa70:	4611      	mov	r1, r2
 800aa72:	4620      	mov	r0, r4
 800aa74:	4617      	mov	r7, r2
 800aa76:	f7ff ffdb 	bl	800aa30 <__mcmp>
 800aa7a:	1e05      	subs	r5, r0, #0
 800aa7c:	d110      	bne.n	800aaa0 <__mdiff+0x38>
 800aa7e:	4629      	mov	r1, r5
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7ff fd0d 	bl	800a4a0 <_Balloc>
 800aa86:	b930      	cbnz	r0, 800aa96 <__mdiff+0x2e>
 800aa88:	4b39      	ldr	r3, [pc, #228]	; (800ab70 <__mdiff+0x108>)
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	f240 2132 	movw	r1, #562	; 0x232
 800aa90:	4838      	ldr	r0, [pc, #224]	; (800ab74 <__mdiff+0x10c>)
 800aa92:	f000 fc0d 	bl	800b2b0 <__assert_func>
 800aa96:	2301      	movs	r3, #1
 800aa98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa0:	bfa4      	itt	ge
 800aaa2:	463b      	movge	r3, r7
 800aaa4:	4627      	movge	r7, r4
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	bfa6      	itte	ge
 800aaac:	461c      	movge	r4, r3
 800aaae:	2500      	movge	r5, #0
 800aab0:	2501      	movlt	r5, #1
 800aab2:	f7ff fcf5 	bl	800a4a0 <_Balloc>
 800aab6:	b920      	cbnz	r0, 800aac2 <__mdiff+0x5a>
 800aab8:	4b2d      	ldr	r3, [pc, #180]	; (800ab70 <__mdiff+0x108>)
 800aaba:	4602      	mov	r2, r0
 800aabc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aac0:	e7e6      	b.n	800aa90 <__mdiff+0x28>
 800aac2:	693e      	ldr	r6, [r7, #16]
 800aac4:	60c5      	str	r5, [r0, #12]
 800aac6:	6925      	ldr	r5, [r4, #16]
 800aac8:	f107 0114 	add.w	r1, r7, #20
 800aacc:	f104 0914 	add.w	r9, r4, #20
 800aad0:	f100 0e14 	add.w	lr, r0, #20
 800aad4:	f107 0210 	add.w	r2, r7, #16
 800aad8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aadc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aae0:	46f2      	mov	sl, lr
 800aae2:	2700      	movs	r7, #0
 800aae4:	f859 3b04 	ldr.w	r3, [r9], #4
 800aae8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aaec:	fa1f f883 	uxth.w	r8, r3
 800aaf0:	fa17 f78b 	uxtah	r7, r7, fp
 800aaf4:	0c1b      	lsrs	r3, r3, #16
 800aaf6:	eba7 0808 	sub.w	r8, r7, r8
 800aafa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aafe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab02:	fa1f f888 	uxth.w	r8, r8
 800ab06:	141f      	asrs	r7, r3, #16
 800ab08:	454d      	cmp	r5, r9
 800ab0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab0e:	f84a 3b04 	str.w	r3, [sl], #4
 800ab12:	d8e7      	bhi.n	800aae4 <__mdiff+0x7c>
 800ab14:	1b2b      	subs	r3, r5, r4
 800ab16:	3b15      	subs	r3, #21
 800ab18:	f023 0303 	bic.w	r3, r3, #3
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	3415      	adds	r4, #21
 800ab20:	42a5      	cmp	r5, r4
 800ab22:	bf38      	it	cc
 800ab24:	2304      	movcc	r3, #4
 800ab26:	4419      	add	r1, r3
 800ab28:	4473      	add	r3, lr
 800ab2a:	469e      	mov	lr, r3
 800ab2c:	460d      	mov	r5, r1
 800ab2e:	4565      	cmp	r5, ip
 800ab30:	d30e      	bcc.n	800ab50 <__mdiff+0xe8>
 800ab32:	f10c 0203 	add.w	r2, ip, #3
 800ab36:	1a52      	subs	r2, r2, r1
 800ab38:	f022 0203 	bic.w	r2, r2, #3
 800ab3c:	3903      	subs	r1, #3
 800ab3e:	458c      	cmp	ip, r1
 800ab40:	bf38      	it	cc
 800ab42:	2200      	movcc	r2, #0
 800ab44:	441a      	add	r2, r3
 800ab46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ab4a:	b17b      	cbz	r3, 800ab6c <__mdiff+0x104>
 800ab4c:	6106      	str	r6, [r0, #16]
 800ab4e:	e7a5      	b.n	800aa9c <__mdiff+0x34>
 800ab50:	f855 8b04 	ldr.w	r8, [r5], #4
 800ab54:	fa17 f488 	uxtah	r4, r7, r8
 800ab58:	1422      	asrs	r2, r4, #16
 800ab5a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ab5e:	b2a4      	uxth	r4, r4
 800ab60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ab64:	f84e 4b04 	str.w	r4, [lr], #4
 800ab68:	1417      	asrs	r7, r2, #16
 800ab6a:	e7e0      	b.n	800ab2e <__mdiff+0xc6>
 800ab6c:	3e01      	subs	r6, #1
 800ab6e:	e7ea      	b.n	800ab46 <__mdiff+0xde>
 800ab70:	0800d14c 	.word	0x0800d14c
 800ab74:	0800d1dc 	.word	0x0800d1dc

0800ab78 <__ulp>:
 800ab78:	b082      	sub	sp, #8
 800ab7a:	ed8d 0b00 	vstr	d0, [sp]
 800ab7e:	9b01      	ldr	r3, [sp, #4]
 800ab80:	4912      	ldr	r1, [pc, #72]	; (800abcc <__ulp+0x54>)
 800ab82:	4019      	ands	r1, r3
 800ab84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ab88:	2900      	cmp	r1, #0
 800ab8a:	dd05      	ble.n	800ab98 <__ulp+0x20>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	ec43 2b10 	vmov	d0, r2, r3
 800ab94:	b002      	add	sp, #8
 800ab96:	4770      	bx	lr
 800ab98:	4249      	negs	r1, r1
 800ab9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ab9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aba2:	f04f 0200 	mov.w	r2, #0
 800aba6:	f04f 0300 	mov.w	r3, #0
 800abaa:	da04      	bge.n	800abb6 <__ulp+0x3e>
 800abac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800abb0:	fa41 f300 	asr.w	r3, r1, r0
 800abb4:	e7ec      	b.n	800ab90 <__ulp+0x18>
 800abb6:	f1a0 0114 	sub.w	r1, r0, #20
 800abba:	291e      	cmp	r1, #30
 800abbc:	bfda      	itte	le
 800abbe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800abc2:	fa20 f101 	lsrle.w	r1, r0, r1
 800abc6:	2101      	movgt	r1, #1
 800abc8:	460a      	mov	r2, r1
 800abca:	e7e1      	b.n	800ab90 <__ulp+0x18>
 800abcc:	7ff00000 	.word	0x7ff00000

0800abd0 <__b2d>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	6905      	ldr	r5, [r0, #16]
 800abd4:	f100 0714 	add.w	r7, r0, #20
 800abd8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800abdc:	1f2e      	subs	r6, r5, #4
 800abde:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800abe2:	4620      	mov	r0, r4
 800abe4:	f7ff fd52 	bl	800a68c <__hi0bits>
 800abe8:	f1c0 0320 	rsb	r3, r0, #32
 800abec:	280a      	cmp	r0, #10
 800abee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ac6c <__b2d+0x9c>
 800abf2:	600b      	str	r3, [r1, #0]
 800abf4:	dc14      	bgt.n	800ac20 <__b2d+0x50>
 800abf6:	f1c0 0e0b 	rsb	lr, r0, #11
 800abfa:	fa24 f10e 	lsr.w	r1, r4, lr
 800abfe:	42b7      	cmp	r7, r6
 800ac00:	ea41 030c 	orr.w	r3, r1, ip
 800ac04:	bf34      	ite	cc
 800ac06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ac0a:	2100      	movcs	r1, #0
 800ac0c:	3015      	adds	r0, #21
 800ac0e:	fa04 f000 	lsl.w	r0, r4, r0
 800ac12:	fa21 f10e 	lsr.w	r1, r1, lr
 800ac16:	ea40 0201 	orr.w	r2, r0, r1
 800ac1a:	ec43 2b10 	vmov	d0, r2, r3
 800ac1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac20:	42b7      	cmp	r7, r6
 800ac22:	bf3a      	itte	cc
 800ac24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ac28:	f1a5 0608 	subcc.w	r6, r5, #8
 800ac2c:	2100      	movcs	r1, #0
 800ac2e:	380b      	subs	r0, #11
 800ac30:	d017      	beq.n	800ac62 <__b2d+0x92>
 800ac32:	f1c0 0c20 	rsb	ip, r0, #32
 800ac36:	fa04 f500 	lsl.w	r5, r4, r0
 800ac3a:	42be      	cmp	r6, r7
 800ac3c:	fa21 f40c 	lsr.w	r4, r1, ip
 800ac40:	ea45 0504 	orr.w	r5, r5, r4
 800ac44:	bf8c      	ite	hi
 800ac46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ac4a:	2400      	movls	r4, #0
 800ac4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ac50:	fa01 f000 	lsl.w	r0, r1, r0
 800ac54:	fa24 f40c 	lsr.w	r4, r4, ip
 800ac58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ac5c:	ea40 0204 	orr.w	r2, r0, r4
 800ac60:	e7db      	b.n	800ac1a <__b2d+0x4a>
 800ac62:	ea44 030c 	orr.w	r3, r4, ip
 800ac66:	460a      	mov	r2, r1
 800ac68:	e7d7      	b.n	800ac1a <__b2d+0x4a>
 800ac6a:	bf00      	nop
 800ac6c:	3ff00000 	.word	0x3ff00000

0800ac70 <__d2b>:
 800ac70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac74:	4689      	mov	r9, r1
 800ac76:	2101      	movs	r1, #1
 800ac78:	ec57 6b10 	vmov	r6, r7, d0
 800ac7c:	4690      	mov	r8, r2
 800ac7e:	f7ff fc0f 	bl	800a4a0 <_Balloc>
 800ac82:	4604      	mov	r4, r0
 800ac84:	b930      	cbnz	r0, 800ac94 <__d2b+0x24>
 800ac86:	4602      	mov	r2, r0
 800ac88:	4b25      	ldr	r3, [pc, #148]	; (800ad20 <__d2b+0xb0>)
 800ac8a:	4826      	ldr	r0, [pc, #152]	; (800ad24 <__d2b+0xb4>)
 800ac8c:	f240 310a 	movw	r1, #778	; 0x30a
 800ac90:	f000 fb0e 	bl	800b2b0 <__assert_func>
 800ac94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac9c:	bb35      	cbnz	r5, 800acec <__d2b+0x7c>
 800ac9e:	2e00      	cmp	r6, #0
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	d028      	beq.n	800acf6 <__d2b+0x86>
 800aca4:	4668      	mov	r0, sp
 800aca6:	9600      	str	r6, [sp, #0]
 800aca8:	f7ff fd10 	bl	800a6cc <__lo0bits>
 800acac:	9900      	ldr	r1, [sp, #0]
 800acae:	b300      	cbz	r0, 800acf2 <__d2b+0x82>
 800acb0:	9a01      	ldr	r2, [sp, #4]
 800acb2:	f1c0 0320 	rsb	r3, r0, #32
 800acb6:	fa02 f303 	lsl.w	r3, r2, r3
 800acba:	430b      	orrs	r3, r1
 800acbc:	40c2      	lsrs	r2, r0
 800acbe:	6163      	str	r3, [r4, #20]
 800acc0:	9201      	str	r2, [sp, #4]
 800acc2:	9b01      	ldr	r3, [sp, #4]
 800acc4:	61a3      	str	r3, [r4, #24]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	bf14      	ite	ne
 800acca:	2202      	movne	r2, #2
 800accc:	2201      	moveq	r2, #1
 800acce:	6122      	str	r2, [r4, #16]
 800acd0:	b1d5      	cbz	r5, 800ad08 <__d2b+0x98>
 800acd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acd6:	4405      	add	r5, r0
 800acd8:	f8c9 5000 	str.w	r5, [r9]
 800acdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ace0:	f8c8 0000 	str.w	r0, [r8]
 800ace4:	4620      	mov	r0, r4
 800ace6:	b003      	add	sp, #12
 800ace8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acf0:	e7d5      	b.n	800ac9e <__d2b+0x2e>
 800acf2:	6161      	str	r1, [r4, #20]
 800acf4:	e7e5      	b.n	800acc2 <__d2b+0x52>
 800acf6:	a801      	add	r0, sp, #4
 800acf8:	f7ff fce8 	bl	800a6cc <__lo0bits>
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	6163      	str	r3, [r4, #20]
 800ad00:	2201      	movs	r2, #1
 800ad02:	6122      	str	r2, [r4, #16]
 800ad04:	3020      	adds	r0, #32
 800ad06:	e7e3      	b.n	800acd0 <__d2b+0x60>
 800ad08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad10:	f8c9 0000 	str.w	r0, [r9]
 800ad14:	6918      	ldr	r0, [r3, #16]
 800ad16:	f7ff fcb9 	bl	800a68c <__hi0bits>
 800ad1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad1e:	e7df      	b.n	800ace0 <__d2b+0x70>
 800ad20:	0800d14c 	.word	0x0800d14c
 800ad24:	0800d1dc 	.word	0x0800d1dc

0800ad28 <__ratio>:
 800ad28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	4688      	mov	r8, r1
 800ad2e:	4669      	mov	r1, sp
 800ad30:	4681      	mov	r9, r0
 800ad32:	f7ff ff4d 	bl	800abd0 <__b2d>
 800ad36:	a901      	add	r1, sp, #4
 800ad38:	4640      	mov	r0, r8
 800ad3a:	ec55 4b10 	vmov	r4, r5, d0
 800ad3e:	f7ff ff47 	bl	800abd0 <__b2d>
 800ad42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ad4a:	eba3 0c02 	sub.w	ip, r3, r2
 800ad4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad52:	1a9b      	subs	r3, r3, r2
 800ad54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ad58:	ec51 0b10 	vmov	r0, r1, d0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bfd6      	itet	le
 800ad60:	460a      	movle	r2, r1
 800ad62:	462a      	movgt	r2, r5
 800ad64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad68:	468b      	mov	fp, r1
 800ad6a:	462f      	mov	r7, r5
 800ad6c:	bfd4      	ite	le
 800ad6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ad72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad76:	4620      	mov	r0, r4
 800ad78:	ee10 2a10 	vmov	r2, s0
 800ad7c:	465b      	mov	r3, fp
 800ad7e:	4639      	mov	r1, r7
 800ad80:	f7f5 fd64 	bl	800084c <__aeabi_ddiv>
 800ad84:	ec41 0b10 	vmov	d0, r0, r1
 800ad88:	b003      	add	sp, #12
 800ad8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad8e <__copybits>:
 800ad8e:	3901      	subs	r1, #1
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	1149      	asrs	r1, r1, #5
 800ad94:	6914      	ldr	r4, [r2, #16]
 800ad96:	3101      	adds	r1, #1
 800ad98:	f102 0314 	add.w	r3, r2, #20
 800ad9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ada0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ada4:	1f05      	subs	r5, r0, #4
 800ada6:	42a3      	cmp	r3, r4
 800ada8:	d30c      	bcc.n	800adc4 <__copybits+0x36>
 800adaa:	1aa3      	subs	r3, r4, r2
 800adac:	3b11      	subs	r3, #17
 800adae:	f023 0303 	bic.w	r3, r3, #3
 800adb2:	3211      	adds	r2, #17
 800adb4:	42a2      	cmp	r2, r4
 800adb6:	bf88      	it	hi
 800adb8:	2300      	movhi	r3, #0
 800adba:	4418      	add	r0, r3
 800adbc:	2300      	movs	r3, #0
 800adbe:	4288      	cmp	r0, r1
 800adc0:	d305      	bcc.n	800adce <__copybits+0x40>
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	f853 6b04 	ldr.w	r6, [r3], #4
 800adc8:	f845 6f04 	str.w	r6, [r5, #4]!
 800adcc:	e7eb      	b.n	800ada6 <__copybits+0x18>
 800adce:	f840 3b04 	str.w	r3, [r0], #4
 800add2:	e7f4      	b.n	800adbe <__copybits+0x30>

0800add4 <__any_on>:
 800add4:	f100 0214 	add.w	r2, r0, #20
 800add8:	6900      	ldr	r0, [r0, #16]
 800adda:	114b      	asrs	r3, r1, #5
 800addc:	4298      	cmp	r0, r3
 800adde:	b510      	push	{r4, lr}
 800ade0:	db11      	blt.n	800ae06 <__any_on+0x32>
 800ade2:	dd0a      	ble.n	800adfa <__any_on+0x26>
 800ade4:	f011 011f 	ands.w	r1, r1, #31
 800ade8:	d007      	beq.n	800adfa <__any_on+0x26>
 800adea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adee:	fa24 f001 	lsr.w	r0, r4, r1
 800adf2:	fa00 f101 	lsl.w	r1, r0, r1
 800adf6:	428c      	cmp	r4, r1
 800adf8:	d10b      	bne.n	800ae12 <__any_on+0x3e>
 800adfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d803      	bhi.n	800ae0a <__any_on+0x36>
 800ae02:	2000      	movs	r0, #0
 800ae04:	bd10      	pop	{r4, pc}
 800ae06:	4603      	mov	r3, r0
 800ae08:	e7f7      	b.n	800adfa <__any_on+0x26>
 800ae0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae0e:	2900      	cmp	r1, #0
 800ae10:	d0f5      	beq.n	800adfe <__any_on+0x2a>
 800ae12:	2001      	movs	r0, #1
 800ae14:	e7f6      	b.n	800ae04 <__any_on+0x30>

0800ae16 <_calloc_r>:
 800ae16:	b513      	push	{r0, r1, r4, lr}
 800ae18:	434a      	muls	r2, r1
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	9201      	str	r2, [sp, #4]
 800ae1e:	f000 f859 	bl	800aed4 <_malloc_r>
 800ae22:	4604      	mov	r4, r0
 800ae24:	b118      	cbz	r0, 800ae2e <_calloc_r+0x18>
 800ae26:	9a01      	ldr	r2, [sp, #4]
 800ae28:	2100      	movs	r1, #0
 800ae2a:	f7fc fb6d 	bl	8007508 <memset>
 800ae2e:	4620      	mov	r0, r4
 800ae30:	b002      	add	sp, #8
 800ae32:	bd10      	pop	{r4, pc}

0800ae34 <_free_r>:
 800ae34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae36:	2900      	cmp	r1, #0
 800ae38:	d048      	beq.n	800aecc <_free_r+0x98>
 800ae3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae3e:	9001      	str	r0, [sp, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f1a1 0404 	sub.w	r4, r1, #4
 800ae46:	bfb8      	it	lt
 800ae48:	18e4      	addlt	r4, r4, r3
 800ae4a:	f000 fa7b 	bl	800b344 <__malloc_lock>
 800ae4e:	4a20      	ldr	r2, [pc, #128]	; (800aed0 <_free_r+0x9c>)
 800ae50:	9801      	ldr	r0, [sp, #4]
 800ae52:	6813      	ldr	r3, [r2, #0]
 800ae54:	4615      	mov	r5, r2
 800ae56:	b933      	cbnz	r3, 800ae66 <_free_r+0x32>
 800ae58:	6063      	str	r3, [r4, #4]
 800ae5a:	6014      	str	r4, [r2, #0]
 800ae5c:	b003      	add	sp, #12
 800ae5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae62:	f000 ba75 	b.w	800b350 <__malloc_unlock>
 800ae66:	42a3      	cmp	r3, r4
 800ae68:	d90b      	bls.n	800ae82 <_free_r+0x4e>
 800ae6a:	6821      	ldr	r1, [r4, #0]
 800ae6c:	1862      	adds	r2, r4, r1
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	bf04      	itt	eq
 800ae72:	681a      	ldreq	r2, [r3, #0]
 800ae74:	685b      	ldreq	r3, [r3, #4]
 800ae76:	6063      	str	r3, [r4, #4]
 800ae78:	bf04      	itt	eq
 800ae7a:	1852      	addeq	r2, r2, r1
 800ae7c:	6022      	streq	r2, [r4, #0]
 800ae7e:	602c      	str	r4, [r5, #0]
 800ae80:	e7ec      	b.n	800ae5c <_free_r+0x28>
 800ae82:	461a      	mov	r2, r3
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	b10b      	cbz	r3, 800ae8c <_free_r+0x58>
 800ae88:	42a3      	cmp	r3, r4
 800ae8a:	d9fa      	bls.n	800ae82 <_free_r+0x4e>
 800ae8c:	6811      	ldr	r1, [r2, #0]
 800ae8e:	1855      	adds	r5, r2, r1
 800ae90:	42a5      	cmp	r5, r4
 800ae92:	d10b      	bne.n	800aeac <_free_r+0x78>
 800ae94:	6824      	ldr	r4, [r4, #0]
 800ae96:	4421      	add	r1, r4
 800ae98:	1854      	adds	r4, r2, r1
 800ae9a:	42a3      	cmp	r3, r4
 800ae9c:	6011      	str	r1, [r2, #0]
 800ae9e:	d1dd      	bne.n	800ae5c <_free_r+0x28>
 800aea0:	681c      	ldr	r4, [r3, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	6053      	str	r3, [r2, #4]
 800aea6:	4421      	add	r1, r4
 800aea8:	6011      	str	r1, [r2, #0]
 800aeaa:	e7d7      	b.n	800ae5c <_free_r+0x28>
 800aeac:	d902      	bls.n	800aeb4 <_free_r+0x80>
 800aeae:	230c      	movs	r3, #12
 800aeb0:	6003      	str	r3, [r0, #0]
 800aeb2:	e7d3      	b.n	800ae5c <_free_r+0x28>
 800aeb4:	6825      	ldr	r5, [r4, #0]
 800aeb6:	1961      	adds	r1, r4, r5
 800aeb8:	428b      	cmp	r3, r1
 800aeba:	bf04      	itt	eq
 800aebc:	6819      	ldreq	r1, [r3, #0]
 800aebe:	685b      	ldreq	r3, [r3, #4]
 800aec0:	6063      	str	r3, [r4, #4]
 800aec2:	bf04      	itt	eq
 800aec4:	1949      	addeq	r1, r1, r5
 800aec6:	6021      	streq	r1, [r4, #0]
 800aec8:	6054      	str	r4, [r2, #4]
 800aeca:	e7c7      	b.n	800ae5c <_free_r+0x28>
 800aecc:	b003      	add	sp, #12
 800aece:	bd30      	pop	{r4, r5, pc}
 800aed0:	20000390 	.word	0x20000390

0800aed4 <_malloc_r>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	1ccd      	adds	r5, r1, #3
 800aed8:	f025 0503 	bic.w	r5, r5, #3
 800aedc:	3508      	adds	r5, #8
 800aede:	2d0c      	cmp	r5, #12
 800aee0:	bf38      	it	cc
 800aee2:	250c      	movcc	r5, #12
 800aee4:	2d00      	cmp	r5, #0
 800aee6:	4606      	mov	r6, r0
 800aee8:	db01      	blt.n	800aeee <_malloc_r+0x1a>
 800aeea:	42a9      	cmp	r1, r5
 800aeec:	d903      	bls.n	800aef6 <_malloc_r+0x22>
 800aeee:	230c      	movs	r3, #12
 800aef0:	6033      	str	r3, [r6, #0]
 800aef2:	2000      	movs	r0, #0
 800aef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef6:	f000 fa25 	bl	800b344 <__malloc_lock>
 800aefa:	4921      	ldr	r1, [pc, #132]	; (800af80 <_malloc_r+0xac>)
 800aefc:	680a      	ldr	r2, [r1, #0]
 800aefe:	4614      	mov	r4, r2
 800af00:	b99c      	cbnz	r4, 800af2a <_malloc_r+0x56>
 800af02:	4f20      	ldr	r7, [pc, #128]	; (800af84 <_malloc_r+0xb0>)
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	b923      	cbnz	r3, 800af12 <_malloc_r+0x3e>
 800af08:	4621      	mov	r1, r4
 800af0a:	4630      	mov	r0, r6
 800af0c:	f000 f9a0 	bl	800b250 <_sbrk_r>
 800af10:	6038      	str	r0, [r7, #0]
 800af12:	4629      	mov	r1, r5
 800af14:	4630      	mov	r0, r6
 800af16:	f000 f99b 	bl	800b250 <_sbrk_r>
 800af1a:	1c43      	adds	r3, r0, #1
 800af1c:	d123      	bne.n	800af66 <_malloc_r+0x92>
 800af1e:	230c      	movs	r3, #12
 800af20:	6033      	str	r3, [r6, #0]
 800af22:	4630      	mov	r0, r6
 800af24:	f000 fa14 	bl	800b350 <__malloc_unlock>
 800af28:	e7e3      	b.n	800aef2 <_malloc_r+0x1e>
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	1b5b      	subs	r3, r3, r5
 800af2e:	d417      	bmi.n	800af60 <_malloc_r+0x8c>
 800af30:	2b0b      	cmp	r3, #11
 800af32:	d903      	bls.n	800af3c <_malloc_r+0x68>
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	441c      	add	r4, r3
 800af38:	6025      	str	r5, [r4, #0]
 800af3a:	e004      	b.n	800af46 <_malloc_r+0x72>
 800af3c:	6863      	ldr	r3, [r4, #4]
 800af3e:	42a2      	cmp	r2, r4
 800af40:	bf0c      	ite	eq
 800af42:	600b      	streq	r3, [r1, #0]
 800af44:	6053      	strne	r3, [r2, #4]
 800af46:	4630      	mov	r0, r6
 800af48:	f000 fa02 	bl	800b350 <__malloc_unlock>
 800af4c:	f104 000b 	add.w	r0, r4, #11
 800af50:	1d23      	adds	r3, r4, #4
 800af52:	f020 0007 	bic.w	r0, r0, #7
 800af56:	1ac2      	subs	r2, r0, r3
 800af58:	d0cc      	beq.n	800aef4 <_malloc_r+0x20>
 800af5a:	1a1b      	subs	r3, r3, r0
 800af5c:	50a3      	str	r3, [r4, r2]
 800af5e:	e7c9      	b.n	800aef4 <_malloc_r+0x20>
 800af60:	4622      	mov	r2, r4
 800af62:	6864      	ldr	r4, [r4, #4]
 800af64:	e7cc      	b.n	800af00 <_malloc_r+0x2c>
 800af66:	1cc4      	adds	r4, r0, #3
 800af68:	f024 0403 	bic.w	r4, r4, #3
 800af6c:	42a0      	cmp	r0, r4
 800af6e:	d0e3      	beq.n	800af38 <_malloc_r+0x64>
 800af70:	1a21      	subs	r1, r4, r0
 800af72:	4630      	mov	r0, r6
 800af74:	f000 f96c 	bl	800b250 <_sbrk_r>
 800af78:	3001      	adds	r0, #1
 800af7a:	d1dd      	bne.n	800af38 <_malloc_r+0x64>
 800af7c:	e7cf      	b.n	800af1e <_malloc_r+0x4a>
 800af7e:	bf00      	nop
 800af80:	20000390 	.word	0x20000390
 800af84:	20000394 	.word	0x20000394

0800af88 <__ssputs_r>:
 800af88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af8c:	688e      	ldr	r6, [r1, #8]
 800af8e:	429e      	cmp	r6, r3
 800af90:	4682      	mov	sl, r0
 800af92:	460c      	mov	r4, r1
 800af94:	4690      	mov	r8, r2
 800af96:	461f      	mov	r7, r3
 800af98:	d838      	bhi.n	800b00c <__ssputs_r+0x84>
 800af9a:	898a      	ldrh	r2, [r1, #12]
 800af9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800afa0:	d032      	beq.n	800b008 <__ssputs_r+0x80>
 800afa2:	6825      	ldr	r5, [r4, #0]
 800afa4:	6909      	ldr	r1, [r1, #16]
 800afa6:	eba5 0901 	sub.w	r9, r5, r1
 800afaa:	6965      	ldr	r5, [r4, #20]
 800afac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afb4:	3301      	adds	r3, #1
 800afb6:	444b      	add	r3, r9
 800afb8:	106d      	asrs	r5, r5, #1
 800afba:	429d      	cmp	r5, r3
 800afbc:	bf38      	it	cc
 800afbe:	461d      	movcc	r5, r3
 800afc0:	0553      	lsls	r3, r2, #21
 800afc2:	d531      	bpl.n	800b028 <__ssputs_r+0xa0>
 800afc4:	4629      	mov	r1, r5
 800afc6:	f7ff ff85 	bl	800aed4 <_malloc_r>
 800afca:	4606      	mov	r6, r0
 800afcc:	b950      	cbnz	r0, 800afe4 <__ssputs_r+0x5c>
 800afce:	230c      	movs	r3, #12
 800afd0:	f8ca 3000 	str.w	r3, [sl]
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afda:	81a3      	strh	r3, [r4, #12]
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
 800afe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe4:	6921      	ldr	r1, [r4, #16]
 800afe6:	464a      	mov	r2, r9
 800afe8:	f7ff fa4c 	bl	800a484 <memcpy>
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff6:	81a3      	strh	r3, [r4, #12]
 800aff8:	6126      	str	r6, [r4, #16]
 800affa:	6165      	str	r5, [r4, #20]
 800affc:	444e      	add	r6, r9
 800affe:	eba5 0509 	sub.w	r5, r5, r9
 800b002:	6026      	str	r6, [r4, #0]
 800b004:	60a5      	str	r5, [r4, #8]
 800b006:	463e      	mov	r6, r7
 800b008:	42be      	cmp	r6, r7
 800b00a:	d900      	bls.n	800b00e <__ssputs_r+0x86>
 800b00c:	463e      	mov	r6, r7
 800b00e:	4632      	mov	r2, r6
 800b010:	6820      	ldr	r0, [r4, #0]
 800b012:	4641      	mov	r1, r8
 800b014:	f000 f97c 	bl	800b310 <memmove>
 800b018:	68a3      	ldr	r3, [r4, #8]
 800b01a:	6822      	ldr	r2, [r4, #0]
 800b01c:	1b9b      	subs	r3, r3, r6
 800b01e:	4432      	add	r2, r6
 800b020:	60a3      	str	r3, [r4, #8]
 800b022:	6022      	str	r2, [r4, #0]
 800b024:	2000      	movs	r0, #0
 800b026:	e7db      	b.n	800afe0 <__ssputs_r+0x58>
 800b028:	462a      	mov	r2, r5
 800b02a:	f000 f997 	bl	800b35c <_realloc_r>
 800b02e:	4606      	mov	r6, r0
 800b030:	2800      	cmp	r0, #0
 800b032:	d1e1      	bne.n	800aff8 <__ssputs_r+0x70>
 800b034:	6921      	ldr	r1, [r4, #16]
 800b036:	4650      	mov	r0, sl
 800b038:	f7ff fefc 	bl	800ae34 <_free_r>
 800b03c:	e7c7      	b.n	800afce <__ssputs_r+0x46>
	...

0800b040 <_svfiprintf_r>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	4698      	mov	r8, r3
 800b046:	898b      	ldrh	r3, [r1, #12]
 800b048:	061b      	lsls	r3, r3, #24
 800b04a:	b09d      	sub	sp, #116	; 0x74
 800b04c:	4607      	mov	r7, r0
 800b04e:	460d      	mov	r5, r1
 800b050:	4614      	mov	r4, r2
 800b052:	d50e      	bpl.n	800b072 <_svfiprintf_r+0x32>
 800b054:	690b      	ldr	r3, [r1, #16]
 800b056:	b963      	cbnz	r3, 800b072 <_svfiprintf_r+0x32>
 800b058:	2140      	movs	r1, #64	; 0x40
 800b05a:	f7ff ff3b 	bl	800aed4 <_malloc_r>
 800b05e:	6028      	str	r0, [r5, #0]
 800b060:	6128      	str	r0, [r5, #16]
 800b062:	b920      	cbnz	r0, 800b06e <_svfiprintf_r+0x2e>
 800b064:	230c      	movs	r3, #12
 800b066:	603b      	str	r3, [r7, #0]
 800b068:	f04f 30ff 	mov.w	r0, #4294967295
 800b06c:	e0d1      	b.n	800b212 <_svfiprintf_r+0x1d2>
 800b06e:	2340      	movs	r3, #64	; 0x40
 800b070:	616b      	str	r3, [r5, #20]
 800b072:	2300      	movs	r3, #0
 800b074:	9309      	str	r3, [sp, #36]	; 0x24
 800b076:	2320      	movs	r3, #32
 800b078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b07c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b080:	2330      	movs	r3, #48	; 0x30
 800b082:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b22c <_svfiprintf_r+0x1ec>
 800b086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b08a:	f04f 0901 	mov.w	r9, #1
 800b08e:	4623      	mov	r3, r4
 800b090:	469a      	mov	sl, r3
 800b092:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b096:	b10a      	cbz	r2, 800b09c <_svfiprintf_r+0x5c>
 800b098:	2a25      	cmp	r2, #37	; 0x25
 800b09a:	d1f9      	bne.n	800b090 <_svfiprintf_r+0x50>
 800b09c:	ebba 0b04 	subs.w	fp, sl, r4
 800b0a0:	d00b      	beq.n	800b0ba <_svfiprintf_r+0x7a>
 800b0a2:	465b      	mov	r3, fp
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	f7ff ff6d 	bl	800af88 <__ssputs_r>
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	f000 80aa 	beq.w	800b208 <_svfiprintf_r+0x1c8>
 800b0b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0b6:	445a      	add	r2, fp
 800b0b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f000 80a2 	beq.w	800b208 <_svfiprintf_r+0x1c8>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0ce:	f10a 0a01 	add.w	sl, sl, #1
 800b0d2:	9304      	str	r3, [sp, #16]
 800b0d4:	9307      	str	r3, [sp, #28]
 800b0d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0da:	931a      	str	r3, [sp, #104]	; 0x68
 800b0dc:	4654      	mov	r4, sl
 800b0de:	2205      	movs	r2, #5
 800b0e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e4:	4851      	ldr	r0, [pc, #324]	; (800b22c <_svfiprintf_r+0x1ec>)
 800b0e6:	f7f5 f87b 	bl	80001e0 <memchr>
 800b0ea:	9a04      	ldr	r2, [sp, #16]
 800b0ec:	b9d8      	cbnz	r0, 800b126 <_svfiprintf_r+0xe6>
 800b0ee:	06d0      	lsls	r0, r2, #27
 800b0f0:	bf44      	itt	mi
 800b0f2:	2320      	movmi	r3, #32
 800b0f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0f8:	0711      	lsls	r1, r2, #28
 800b0fa:	bf44      	itt	mi
 800b0fc:	232b      	movmi	r3, #43	; 0x2b
 800b0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b102:	f89a 3000 	ldrb.w	r3, [sl]
 800b106:	2b2a      	cmp	r3, #42	; 0x2a
 800b108:	d015      	beq.n	800b136 <_svfiprintf_r+0xf6>
 800b10a:	9a07      	ldr	r2, [sp, #28]
 800b10c:	4654      	mov	r4, sl
 800b10e:	2000      	movs	r0, #0
 800b110:	f04f 0c0a 	mov.w	ip, #10
 800b114:	4621      	mov	r1, r4
 800b116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b11a:	3b30      	subs	r3, #48	; 0x30
 800b11c:	2b09      	cmp	r3, #9
 800b11e:	d94e      	bls.n	800b1be <_svfiprintf_r+0x17e>
 800b120:	b1b0      	cbz	r0, 800b150 <_svfiprintf_r+0x110>
 800b122:	9207      	str	r2, [sp, #28]
 800b124:	e014      	b.n	800b150 <_svfiprintf_r+0x110>
 800b126:	eba0 0308 	sub.w	r3, r0, r8
 800b12a:	fa09 f303 	lsl.w	r3, r9, r3
 800b12e:	4313      	orrs	r3, r2
 800b130:	9304      	str	r3, [sp, #16]
 800b132:	46a2      	mov	sl, r4
 800b134:	e7d2      	b.n	800b0dc <_svfiprintf_r+0x9c>
 800b136:	9b03      	ldr	r3, [sp, #12]
 800b138:	1d19      	adds	r1, r3, #4
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	9103      	str	r1, [sp, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	bfbb      	ittet	lt
 800b142:	425b      	neglt	r3, r3
 800b144:	f042 0202 	orrlt.w	r2, r2, #2
 800b148:	9307      	strge	r3, [sp, #28]
 800b14a:	9307      	strlt	r3, [sp, #28]
 800b14c:	bfb8      	it	lt
 800b14e:	9204      	strlt	r2, [sp, #16]
 800b150:	7823      	ldrb	r3, [r4, #0]
 800b152:	2b2e      	cmp	r3, #46	; 0x2e
 800b154:	d10c      	bne.n	800b170 <_svfiprintf_r+0x130>
 800b156:	7863      	ldrb	r3, [r4, #1]
 800b158:	2b2a      	cmp	r3, #42	; 0x2a
 800b15a:	d135      	bne.n	800b1c8 <_svfiprintf_r+0x188>
 800b15c:	9b03      	ldr	r3, [sp, #12]
 800b15e:	1d1a      	adds	r2, r3, #4
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	9203      	str	r2, [sp, #12]
 800b164:	2b00      	cmp	r3, #0
 800b166:	bfb8      	it	lt
 800b168:	f04f 33ff 	movlt.w	r3, #4294967295
 800b16c:	3402      	adds	r4, #2
 800b16e:	9305      	str	r3, [sp, #20]
 800b170:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b23c <_svfiprintf_r+0x1fc>
 800b174:	7821      	ldrb	r1, [r4, #0]
 800b176:	2203      	movs	r2, #3
 800b178:	4650      	mov	r0, sl
 800b17a:	f7f5 f831 	bl	80001e0 <memchr>
 800b17e:	b140      	cbz	r0, 800b192 <_svfiprintf_r+0x152>
 800b180:	2340      	movs	r3, #64	; 0x40
 800b182:	eba0 000a 	sub.w	r0, r0, sl
 800b186:	fa03 f000 	lsl.w	r0, r3, r0
 800b18a:	9b04      	ldr	r3, [sp, #16]
 800b18c:	4303      	orrs	r3, r0
 800b18e:	3401      	adds	r4, #1
 800b190:	9304      	str	r3, [sp, #16]
 800b192:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b196:	4826      	ldr	r0, [pc, #152]	; (800b230 <_svfiprintf_r+0x1f0>)
 800b198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b19c:	2206      	movs	r2, #6
 800b19e:	f7f5 f81f 	bl	80001e0 <memchr>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d038      	beq.n	800b218 <_svfiprintf_r+0x1d8>
 800b1a6:	4b23      	ldr	r3, [pc, #140]	; (800b234 <_svfiprintf_r+0x1f4>)
 800b1a8:	bb1b      	cbnz	r3, 800b1f2 <_svfiprintf_r+0x1b2>
 800b1aa:	9b03      	ldr	r3, [sp, #12]
 800b1ac:	3307      	adds	r3, #7
 800b1ae:	f023 0307 	bic.w	r3, r3, #7
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	9303      	str	r3, [sp, #12]
 800b1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b8:	4433      	add	r3, r6
 800b1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b1bc:	e767      	b.n	800b08e <_svfiprintf_r+0x4e>
 800b1be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	2001      	movs	r0, #1
 800b1c6:	e7a5      	b.n	800b114 <_svfiprintf_r+0xd4>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	3401      	adds	r4, #1
 800b1cc:	9305      	str	r3, [sp, #20]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	f04f 0c0a 	mov.w	ip, #10
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1da:	3a30      	subs	r2, #48	; 0x30
 800b1dc:	2a09      	cmp	r2, #9
 800b1de:	d903      	bls.n	800b1e8 <_svfiprintf_r+0x1a8>
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d0c5      	beq.n	800b170 <_svfiprintf_r+0x130>
 800b1e4:	9105      	str	r1, [sp, #20]
 800b1e6:	e7c3      	b.n	800b170 <_svfiprintf_r+0x130>
 800b1e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e7f0      	b.n	800b1d4 <_svfiprintf_r+0x194>
 800b1f2:	ab03      	add	r3, sp, #12
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	462a      	mov	r2, r5
 800b1f8:	4b0f      	ldr	r3, [pc, #60]	; (800b238 <_svfiprintf_r+0x1f8>)
 800b1fa:	a904      	add	r1, sp, #16
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f7fc fa2b 	bl	8007658 <_printf_float>
 800b202:	1c42      	adds	r2, r0, #1
 800b204:	4606      	mov	r6, r0
 800b206:	d1d6      	bne.n	800b1b6 <_svfiprintf_r+0x176>
 800b208:	89ab      	ldrh	r3, [r5, #12]
 800b20a:	065b      	lsls	r3, r3, #25
 800b20c:	f53f af2c 	bmi.w	800b068 <_svfiprintf_r+0x28>
 800b210:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b212:	b01d      	add	sp, #116	; 0x74
 800b214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b218:	ab03      	add	r3, sp, #12
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	462a      	mov	r2, r5
 800b21e:	4b06      	ldr	r3, [pc, #24]	; (800b238 <_svfiprintf_r+0x1f8>)
 800b220:	a904      	add	r1, sp, #16
 800b222:	4638      	mov	r0, r7
 800b224:	f7fc fcbc 	bl	8007ba0 <_printf_i>
 800b228:	e7eb      	b.n	800b202 <_svfiprintf_r+0x1c2>
 800b22a:	bf00      	nop
 800b22c:	0800d33c 	.word	0x0800d33c
 800b230:	0800d346 	.word	0x0800d346
 800b234:	08007659 	.word	0x08007659
 800b238:	0800af89 	.word	0x0800af89
 800b23c:	0800d342 	.word	0x0800d342

0800b240 <nan>:
 800b240:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b248 <nan+0x8>
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	00000000 	.word	0x00000000
 800b24c:	7ff80000 	.word	0x7ff80000

0800b250 <_sbrk_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4d06      	ldr	r5, [pc, #24]	; (800b26c <_sbrk_r+0x1c>)
 800b254:	2300      	movs	r3, #0
 800b256:	4604      	mov	r4, r0
 800b258:	4608      	mov	r0, r1
 800b25a:	602b      	str	r3, [r5, #0]
 800b25c:	f7f8 fd9a 	bl	8003d94 <_sbrk>
 800b260:	1c43      	adds	r3, r0, #1
 800b262:	d102      	bne.n	800b26a <_sbrk_r+0x1a>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	b103      	cbz	r3, 800b26a <_sbrk_r+0x1a>
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	bd38      	pop	{r3, r4, r5, pc}
 800b26c:	20003508 	.word	0x20003508

0800b270 <strncmp>:
 800b270:	b510      	push	{r4, lr}
 800b272:	b16a      	cbz	r2, 800b290 <strncmp+0x20>
 800b274:	3901      	subs	r1, #1
 800b276:	1884      	adds	r4, r0, r2
 800b278:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b27c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b280:	4293      	cmp	r3, r2
 800b282:	d103      	bne.n	800b28c <strncmp+0x1c>
 800b284:	42a0      	cmp	r0, r4
 800b286:	d001      	beq.n	800b28c <strncmp+0x1c>
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1f5      	bne.n	800b278 <strncmp+0x8>
 800b28c:	1a98      	subs	r0, r3, r2
 800b28e:	bd10      	pop	{r4, pc}
 800b290:	4610      	mov	r0, r2
 800b292:	e7fc      	b.n	800b28e <strncmp+0x1e>

0800b294 <__ascii_wctomb>:
 800b294:	b149      	cbz	r1, 800b2aa <__ascii_wctomb+0x16>
 800b296:	2aff      	cmp	r2, #255	; 0xff
 800b298:	bf85      	ittet	hi
 800b29a:	238a      	movhi	r3, #138	; 0x8a
 800b29c:	6003      	strhi	r3, [r0, #0]
 800b29e:	700a      	strbls	r2, [r1, #0]
 800b2a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2a4:	bf98      	it	ls
 800b2a6:	2001      	movls	r0, #1
 800b2a8:	4770      	bx	lr
 800b2aa:	4608      	mov	r0, r1
 800b2ac:	4770      	bx	lr
	...

0800b2b0 <__assert_func>:
 800b2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2b2:	4614      	mov	r4, r2
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	4b09      	ldr	r3, [pc, #36]	; (800b2dc <__assert_func+0x2c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	68d8      	ldr	r0, [r3, #12]
 800b2be:	b14c      	cbz	r4, 800b2d4 <__assert_func+0x24>
 800b2c0:	4b07      	ldr	r3, [pc, #28]	; (800b2e0 <__assert_func+0x30>)
 800b2c2:	9100      	str	r1, [sp, #0]
 800b2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2c8:	4906      	ldr	r1, [pc, #24]	; (800b2e4 <__assert_func+0x34>)
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	f000 f80e 	bl	800b2ec <fiprintf>
 800b2d0:	f000 fa84 	bl	800b7dc <abort>
 800b2d4:	4b04      	ldr	r3, [pc, #16]	; (800b2e8 <__assert_func+0x38>)
 800b2d6:	461c      	mov	r4, r3
 800b2d8:	e7f3      	b.n	800b2c2 <__assert_func+0x12>
 800b2da:	bf00      	nop
 800b2dc:	20000170 	.word	0x20000170
 800b2e0:	0800d34d 	.word	0x0800d34d
 800b2e4:	0800d35a 	.word	0x0800d35a
 800b2e8:	0800d388 	.word	0x0800d388

0800b2ec <fiprintf>:
 800b2ec:	b40e      	push	{r1, r2, r3}
 800b2ee:	b503      	push	{r0, r1, lr}
 800b2f0:	4601      	mov	r1, r0
 800b2f2:	ab03      	add	r3, sp, #12
 800b2f4:	4805      	ldr	r0, [pc, #20]	; (800b30c <fiprintf+0x20>)
 800b2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2fa:	6800      	ldr	r0, [r0, #0]
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	f000 f87d 	bl	800b3fc <_vfiprintf_r>
 800b302:	b002      	add	sp, #8
 800b304:	f85d eb04 	ldr.w	lr, [sp], #4
 800b308:	b003      	add	sp, #12
 800b30a:	4770      	bx	lr
 800b30c:	20000170 	.word	0x20000170

0800b310 <memmove>:
 800b310:	4288      	cmp	r0, r1
 800b312:	b510      	push	{r4, lr}
 800b314:	eb01 0402 	add.w	r4, r1, r2
 800b318:	d902      	bls.n	800b320 <memmove+0x10>
 800b31a:	4284      	cmp	r4, r0
 800b31c:	4623      	mov	r3, r4
 800b31e:	d807      	bhi.n	800b330 <memmove+0x20>
 800b320:	1e43      	subs	r3, r0, #1
 800b322:	42a1      	cmp	r1, r4
 800b324:	d008      	beq.n	800b338 <memmove+0x28>
 800b326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b32a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b32e:	e7f8      	b.n	800b322 <memmove+0x12>
 800b330:	4402      	add	r2, r0
 800b332:	4601      	mov	r1, r0
 800b334:	428a      	cmp	r2, r1
 800b336:	d100      	bne.n	800b33a <memmove+0x2a>
 800b338:	bd10      	pop	{r4, pc}
 800b33a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b33e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b342:	e7f7      	b.n	800b334 <memmove+0x24>

0800b344 <__malloc_lock>:
 800b344:	4801      	ldr	r0, [pc, #4]	; (800b34c <__malloc_lock+0x8>)
 800b346:	f000 bc09 	b.w	800bb5c <__retarget_lock_acquire_recursive>
 800b34a:	bf00      	nop
 800b34c:	20003510 	.word	0x20003510

0800b350 <__malloc_unlock>:
 800b350:	4801      	ldr	r0, [pc, #4]	; (800b358 <__malloc_unlock+0x8>)
 800b352:	f000 bc04 	b.w	800bb5e <__retarget_lock_release_recursive>
 800b356:	bf00      	nop
 800b358:	20003510 	.word	0x20003510

0800b35c <_realloc_r>:
 800b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35e:	4607      	mov	r7, r0
 800b360:	4614      	mov	r4, r2
 800b362:	460e      	mov	r6, r1
 800b364:	b921      	cbnz	r1, 800b370 <_realloc_r+0x14>
 800b366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b36a:	4611      	mov	r1, r2
 800b36c:	f7ff bdb2 	b.w	800aed4 <_malloc_r>
 800b370:	b922      	cbnz	r2, 800b37c <_realloc_r+0x20>
 800b372:	f7ff fd5f 	bl	800ae34 <_free_r>
 800b376:	4625      	mov	r5, r4
 800b378:	4628      	mov	r0, r5
 800b37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b37c:	f000 fc54 	bl	800bc28 <_malloc_usable_size_r>
 800b380:	42a0      	cmp	r0, r4
 800b382:	d20f      	bcs.n	800b3a4 <_realloc_r+0x48>
 800b384:	4621      	mov	r1, r4
 800b386:	4638      	mov	r0, r7
 800b388:	f7ff fda4 	bl	800aed4 <_malloc_r>
 800b38c:	4605      	mov	r5, r0
 800b38e:	2800      	cmp	r0, #0
 800b390:	d0f2      	beq.n	800b378 <_realloc_r+0x1c>
 800b392:	4631      	mov	r1, r6
 800b394:	4622      	mov	r2, r4
 800b396:	f7ff f875 	bl	800a484 <memcpy>
 800b39a:	4631      	mov	r1, r6
 800b39c:	4638      	mov	r0, r7
 800b39e:	f7ff fd49 	bl	800ae34 <_free_r>
 800b3a2:	e7e9      	b.n	800b378 <_realloc_r+0x1c>
 800b3a4:	4635      	mov	r5, r6
 800b3a6:	e7e7      	b.n	800b378 <_realloc_r+0x1c>

0800b3a8 <__sfputc_r>:
 800b3a8:	6893      	ldr	r3, [r2, #8]
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	b410      	push	{r4}
 800b3b0:	6093      	str	r3, [r2, #8]
 800b3b2:	da08      	bge.n	800b3c6 <__sfputc_r+0x1e>
 800b3b4:	6994      	ldr	r4, [r2, #24]
 800b3b6:	42a3      	cmp	r3, r4
 800b3b8:	db01      	blt.n	800b3be <__sfputc_r+0x16>
 800b3ba:	290a      	cmp	r1, #10
 800b3bc:	d103      	bne.n	800b3c6 <__sfputc_r+0x1e>
 800b3be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3c2:	f000 b94b 	b.w	800b65c <__swbuf_r>
 800b3c6:	6813      	ldr	r3, [r2, #0]
 800b3c8:	1c58      	adds	r0, r3, #1
 800b3ca:	6010      	str	r0, [r2, #0]
 800b3cc:	7019      	strb	r1, [r3, #0]
 800b3ce:	4608      	mov	r0, r1
 800b3d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <__sfputs_r>:
 800b3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d8:	4606      	mov	r6, r0
 800b3da:	460f      	mov	r7, r1
 800b3dc:	4614      	mov	r4, r2
 800b3de:	18d5      	adds	r5, r2, r3
 800b3e0:	42ac      	cmp	r4, r5
 800b3e2:	d101      	bne.n	800b3e8 <__sfputs_r+0x12>
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	e007      	b.n	800b3f8 <__sfputs_r+0x22>
 800b3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ec:	463a      	mov	r2, r7
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f7ff ffda 	bl	800b3a8 <__sfputc_r>
 800b3f4:	1c43      	adds	r3, r0, #1
 800b3f6:	d1f3      	bne.n	800b3e0 <__sfputs_r+0xa>
 800b3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3fc <_vfiprintf_r>:
 800b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b400:	460d      	mov	r5, r1
 800b402:	b09d      	sub	sp, #116	; 0x74
 800b404:	4614      	mov	r4, r2
 800b406:	4698      	mov	r8, r3
 800b408:	4606      	mov	r6, r0
 800b40a:	b118      	cbz	r0, 800b414 <_vfiprintf_r+0x18>
 800b40c:	6983      	ldr	r3, [r0, #24]
 800b40e:	b90b      	cbnz	r3, 800b414 <_vfiprintf_r+0x18>
 800b410:	f000 fb06 	bl	800ba20 <__sinit>
 800b414:	4b89      	ldr	r3, [pc, #548]	; (800b63c <_vfiprintf_r+0x240>)
 800b416:	429d      	cmp	r5, r3
 800b418:	d11b      	bne.n	800b452 <_vfiprintf_r+0x56>
 800b41a:	6875      	ldr	r5, [r6, #4]
 800b41c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b41e:	07d9      	lsls	r1, r3, #31
 800b420:	d405      	bmi.n	800b42e <_vfiprintf_r+0x32>
 800b422:	89ab      	ldrh	r3, [r5, #12]
 800b424:	059a      	lsls	r2, r3, #22
 800b426:	d402      	bmi.n	800b42e <_vfiprintf_r+0x32>
 800b428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b42a:	f000 fb97 	bl	800bb5c <__retarget_lock_acquire_recursive>
 800b42e:	89ab      	ldrh	r3, [r5, #12]
 800b430:	071b      	lsls	r3, r3, #28
 800b432:	d501      	bpl.n	800b438 <_vfiprintf_r+0x3c>
 800b434:	692b      	ldr	r3, [r5, #16]
 800b436:	b9eb      	cbnz	r3, 800b474 <_vfiprintf_r+0x78>
 800b438:	4629      	mov	r1, r5
 800b43a:	4630      	mov	r0, r6
 800b43c:	f000 f960 	bl	800b700 <__swsetup_r>
 800b440:	b1c0      	cbz	r0, 800b474 <_vfiprintf_r+0x78>
 800b442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b444:	07dc      	lsls	r4, r3, #31
 800b446:	d50e      	bpl.n	800b466 <_vfiprintf_r+0x6a>
 800b448:	f04f 30ff 	mov.w	r0, #4294967295
 800b44c:	b01d      	add	sp, #116	; 0x74
 800b44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b452:	4b7b      	ldr	r3, [pc, #492]	; (800b640 <_vfiprintf_r+0x244>)
 800b454:	429d      	cmp	r5, r3
 800b456:	d101      	bne.n	800b45c <_vfiprintf_r+0x60>
 800b458:	68b5      	ldr	r5, [r6, #8]
 800b45a:	e7df      	b.n	800b41c <_vfiprintf_r+0x20>
 800b45c:	4b79      	ldr	r3, [pc, #484]	; (800b644 <_vfiprintf_r+0x248>)
 800b45e:	429d      	cmp	r5, r3
 800b460:	bf08      	it	eq
 800b462:	68f5      	ldreq	r5, [r6, #12]
 800b464:	e7da      	b.n	800b41c <_vfiprintf_r+0x20>
 800b466:	89ab      	ldrh	r3, [r5, #12]
 800b468:	0598      	lsls	r0, r3, #22
 800b46a:	d4ed      	bmi.n	800b448 <_vfiprintf_r+0x4c>
 800b46c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b46e:	f000 fb76 	bl	800bb5e <__retarget_lock_release_recursive>
 800b472:	e7e9      	b.n	800b448 <_vfiprintf_r+0x4c>
 800b474:	2300      	movs	r3, #0
 800b476:	9309      	str	r3, [sp, #36]	; 0x24
 800b478:	2320      	movs	r3, #32
 800b47a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b47e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b482:	2330      	movs	r3, #48	; 0x30
 800b484:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b648 <_vfiprintf_r+0x24c>
 800b488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b48c:	f04f 0901 	mov.w	r9, #1
 800b490:	4623      	mov	r3, r4
 800b492:	469a      	mov	sl, r3
 800b494:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b498:	b10a      	cbz	r2, 800b49e <_vfiprintf_r+0xa2>
 800b49a:	2a25      	cmp	r2, #37	; 0x25
 800b49c:	d1f9      	bne.n	800b492 <_vfiprintf_r+0x96>
 800b49e:	ebba 0b04 	subs.w	fp, sl, r4
 800b4a2:	d00b      	beq.n	800b4bc <_vfiprintf_r+0xc0>
 800b4a4:	465b      	mov	r3, fp
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f7ff ff93 	bl	800b3d6 <__sfputs_r>
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	f000 80aa 	beq.w	800b60a <_vfiprintf_r+0x20e>
 800b4b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4b8:	445a      	add	r2, fp
 800b4ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b4bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f000 80a2 	beq.w	800b60a <_vfiprintf_r+0x20e>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4d0:	f10a 0a01 	add.w	sl, sl, #1
 800b4d4:	9304      	str	r3, [sp, #16]
 800b4d6:	9307      	str	r3, [sp, #28]
 800b4d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4dc:	931a      	str	r3, [sp, #104]	; 0x68
 800b4de:	4654      	mov	r4, sl
 800b4e0:	2205      	movs	r2, #5
 800b4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e6:	4858      	ldr	r0, [pc, #352]	; (800b648 <_vfiprintf_r+0x24c>)
 800b4e8:	f7f4 fe7a 	bl	80001e0 <memchr>
 800b4ec:	9a04      	ldr	r2, [sp, #16]
 800b4ee:	b9d8      	cbnz	r0, 800b528 <_vfiprintf_r+0x12c>
 800b4f0:	06d1      	lsls	r1, r2, #27
 800b4f2:	bf44      	itt	mi
 800b4f4:	2320      	movmi	r3, #32
 800b4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4fa:	0713      	lsls	r3, r2, #28
 800b4fc:	bf44      	itt	mi
 800b4fe:	232b      	movmi	r3, #43	; 0x2b
 800b500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b504:	f89a 3000 	ldrb.w	r3, [sl]
 800b508:	2b2a      	cmp	r3, #42	; 0x2a
 800b50a:	d015      	beq.n	800b538 <_vfiprintf_r+0x13c>
 800b50c:	9a07      	ldr	r2, [sp, #28]
 800b50e:	4654      	mov	r4, sl
 800b510:	2000      	movs	r0, #0
 800b512:	f04f 0c0a 	mov.w	ip, #10
 800b516:	4621      	mov	r1, r4
 800b518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b51c:	3b30      	subs	r3, #48	; 0x30
 800b51e:	2b09      	cmp	r3, #9
 800b520:	d94e      	bls.n	800b5c0 <_vfiprintf_r+0x1c4>
 800b522:	b1b0      	cbz	r0, 800b552 <_vfiprintf_r+0x156>
 800b524:	9207      	str	r2, [sp, #28]
 800b526:	e014      	b.n	800b552 <_vfiprintf_r+0x156>
 800b528:	eba0 0308 	sub.w	r3, r0, r8
 800b52c:	fa09 f303 	lsl.w	r3, r9, r3
 800b530:	4313      	orrs	r3, r2
 800b532:	9304      	str	r3, [sp, #16]
 800b534:	46a2      	mov	sl, r4
 800b536:	e7d2      	b.n	800b4de <_vfiprintf_r+0xe2>
 800b538:	9b03      	ldr	r3, [sp, #12]
 800b53a:	1d19      	adds	r1, r3, #4
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	9103      	str	r1, [sp, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	bfbb      	ittet	lt
 800b544:	425b      	neglt	r3, r3
 800b546:	f042 0202 	orrlt.w	r2, r2, #2
 800b54a:	9307      	strge	r3, [sp, #28]
 800b54c:	9307      	strlt	r3, [sp, #28]
 800b54e:	bfb8      	it	lt
 800b550:	9204      	strlt	r2, [sp, #16]
 800b552:	7823      	ldrb	r3, [r4, #0]
 800b554:	2b2e      	cmp	r3, #46	; 0x2e
 800b556:	d10c      	bne.n	800b572 <_vfiprintf_r+0x176>
 800b558:	7863      	ldrb	r3, [r4, #1]
 800b55a:	2b2a      	cmp	r3, #42	; 0x2a
 800b55c:	d135      	bne.n	800b5ca <_vfiprintf_r+0x1ce>
 800b55e:	9b03      	ldr	r3, [sp, #12]
 800b560:	1d1a      	adds	r2, r3, #4
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	9203      	str	r2, [sp, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	bfb8      	it	lt
 800b56a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b56e:	3402      	adds	r4, #2
 800b570:	9305      	str	r3, [sp, #20]
 800b572:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b658 <_vfiprintf_r+0x25c>
 800b576:	7821      	ldrb	r1, [r4, #0]
 800b578:	2203      	movs	r2, #3
 800b57a:	4650      	mov	r0, sl
 800b57c:	f7f4 fe30 	bl	80001e0 <memchr>
 800b580:	b140      	cbz	r0, 800b594 <_vfiprintf_r+0x198>
 800b582:	2340      	movs	r3, #64	; 0x40
 800b584:	eba0 000a 	sub.w	r0, r0, sl
 800b588:	fa03 f000 	lsl.w	r0, r3, r0
 800b58c:	9b04      	ldr	r3, [sp, #16]
 800b58e:	4303      	orrs	r3, r0
 800b590:	3401      	adds	r4, #1
 800b592:	9304      	str	r3, [sp, #16]
 800b594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b598:	482c      	ldr	r0, [pc, #176]	; (800b64c <_vfiprintf_r+0x250>)
 800b59a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b59e:	2206      	movs	r2, #6
 800b5a0:	f7f4 fe1e 	bl	80001e0 <memchr>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d03f      	beq.n	800b628 <_vfiprintf_r+0x22c>
 800b5a8:	4b29      	ldr	r3, [pc, #164]	; (800b650 <_vfiprintf_r+0x254>)
 800b5aa:	bb1b      	cbnz	r3, 800b5f4 <_vfiprintf_r+0x1f8>
 800b5ac:	9b03      	ldr	r3, [sp, #12]
 800b5ae:	3307      	adds	r3, #7
 800b5b0:	f023 0307 	bic.w	r3, r3, #7
 800b5b4:	3308      	adds	r3, #8
 800b5b6:	9303      	str	r3, [sp, #12]
 800b5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ba:	443b      	add	r3, r7
 800b5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5be:	e767      	b.n	800b490 <_vfiprintf_r+0x94>
 800b5c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	2001      	movs	r0, #1
 800b5c8:	e7a5      	b.n	800b516 <_vfiprintf_r+0x11a>
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	3401      	adds	r4, #1
 800b5ce:	9305      	str	r3, [sp, #20]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	f04f 0c0a 	mov.w	ip, #10
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5dc:	3a30      	subs	r2, #48	; 0x30
 800b5de:	2a09      	cmp	r2, #9
 800b5e0:	d903      	bls.n	800b5ea <_vfiprintf_r+0x1ee>
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d0c5      	beq.n	800b572 <_vfiprintf_r+0x176>
 800b5e6:	9105      	str	r1, [sp, #20]
 800b5e8:	e7c3      	b.n	800b572 <_vfiprintf_r+0x176>
 800b5ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e7f0      	b.n	800b5d6 <_vfiprintf_r+0x1da>
 800b5f4:	ab03      	add	r3, sp, #12
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	462a      	mov	r2, r5
 800b5fa:	4b16      	ldr	r3, [pc, #88]	; (800b654 <_vfiprintf_r+0x258>)
 800b5fc:	a904      	add	r1, sp, #16
 800b5fe:	4630      	mov	r0, r6
 800b600:	f7fc f82a 	bl	8007658 <_printf_float>
 800b604:	4607      	mov	r7, r0
 800b606:	1c78      	adds	r0, r7, #1
 800b608:	d1d6      	bne.n	800b5b8 <_vfiprintf_r+0x1bc>
 800b60a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b60c:	07d9      	lsls	r1, r3, #31
 800b60e:	d405      	bmi.n	800b61c <_vfiprintf_r+0x220>
 800b610:	89ab      	ldrh	r3, [r5, #12]
 800b612:	059a      	lsls	r2, r3, #22
 800b614:	d402      	bmi.n	800b61c <_vfiprintf_r+0x220>
 800b616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b618:	f000 faa1 	bl	800bb5e <__retarget_lock_release_recursive>
 800b61c:	89ab      	ldrh	r3, [r5, #12]
 800b61e:	065b      	lsls	r3, r3, #25
 800b620:	f53f af12 	bmi.w	800b448 <_vfiprintf_r+0x4c>
 800b624:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b626:	e711      	b.n	800b44c <_vfiprintf_r+0x50>
 800b628:	ab03      	add	r3, sp, #12
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	462a      	mov	r2, r5
 800b62e:	4b09      	ldr	r3, [pc, #36]	; (800b654 <_vfiprintf_r+0x258>)
 800b630:	a904      	add	r1, sp, #16
 800b632:	4630      	mov	r0, r6
 800b634:	f7fc fab4 	bl	8007ba0 <_printf_i>
 800b638:	e7e4      	b.n	800b604 <_vfiprintf_r+0x208>
 800b63a:	bf00      	nop
 800b63c:	0800d3ac 	.word	0x0800d3ac
 800b640:	0800d3cc 	.word	0x0800d3cc
 800b644:	0800d38c 	.word	0x0800d38c
 800b648:	0800d33c 	.word	0x0800d33c
 800b64c:	0800d346 	.word	0x0800d346
 800b650:	08007659 	.word	0x08007659
 800b654:	0800b3d7 	.word	0x0800b3d7
 800b658:	0800d342 	.word	0x0800d342

0800b65c <__swbuf_r>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	460e      	mov	r6, r1
 800b660:	4614      	mov	r4, r2
 800b662:	4605      	mov	r5, r0
 800b664:	b118      	cbz	r0, 800b66e <__swbuf_r+0x12>
 800b666:	6983      	ldr	r3, [r0, #24]
 800b668:	b90b      	cbnz	r3, 800b66e <__swbuf_r+0x12>
 800b66a:	f000 f9d9 	bl	800ba20 <__sinit>
 800b66e:	4b21      	ldr	r3, [pc, #132]	; (800b6f4 <__swbuf_r+0x98>)
 800b670:	429c      	cmp	r4, r3
 800b672:	d12b      	bne.n	800b6cc <__swbuf_r+0x70>
 800b674:	686c      	ldr	r4, [r5, #4]
 800b676:	69a3      	ldr	r3, [r4, #24]
 800b678:	60a3      	str	r3, [r4, #8]
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	071a      	lsls	r2, r3, #28
 800b67e:	d52f      	bpl.n	800b6e0 <__swbuf_r+0x84>
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	b36b      	cbz	r3, 800b6e0 <__swbuf_r+0x84>
 800b684:	6923      	ldr	r3, [r4, #16]
 800b686:	6820      	ldr	r0, [r4, #0]
 800b688:	1ac0      	subs	r0, r0, r3
 800b68a:	6963      	ldr	r3, [r4, #20]
 800b68c:	b2f6      	uxtb	r6, r6
 800b68e:	4283      	cmp	r3, r0
 800b690:	4637      	mov	r7, r6
 800b692:	dc04      	bgt.n	800b69e <__swbuf_r+0x42>
 800b694:	4621      	mov	r1, r4
 800b696:	4628      	mov	r0, r5
 800b698:	f000 f92e 	bl	800b8f8 <_fflush_r>
 800b69c:	bb30      	cbnz	r0, 800b6ec <__swbuf_r+0x90>
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	60a3      	str	r3, [r4, #8]
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	6022      	str	r2, [r4, #0]
 800b6aa:	701e      	strb	r6, [r3, #0]
 800b6ac:	6963      	ldr	r3, [r4, #20]
 800b6ae:	3001      	adds	r0, #1
 800b6b0:	4283      	cmp	r3, r0
 800b6b2:	d004      	beq.n	800b6be <__swbuf_r+0x62>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	07db      	lsls	r3, r3, #31
 800b6b8:	d506      	bpl.n	800b6c8 <__swbuf_r+0x6c>
 800b6ba:	2e0a      	cmp	r6, #10
 800b6bc:	d104      	bne.n	800b6c8 <__swbuf_r+0x6c>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f000 f919 	bl	800b8f8 <_fflush_r>
 800b6c6:	b988      	cbnz	r0, 800b6ec <__swbuf_r+0x90>
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <__swbuf_r+0x9c>)
 800b6ce:	429c      	cmp	r4, r3
 800b6d0:	d101      	bne.n	800b6d6 <__swbuf_r+0x7a>
 800b6d2:	68ac      	ldr	r4, [r5, #8]
 800b6d4:	e7cf      	b.n	800b676 <__swbuf_r+0x1a>
 800b6d6:	4b09      	ldr	r3, [pc, #36]	; (800b6fc <__swbuf_r+0xa0>)
 800b6d8:	429c      	cmp	r4, r3
 800b6da:	bf08      	it	eq
 800b6dc:	68ec      	ldreq	r4, [r5, #12]
 800b6de:	e7ca      	b.n	800b676 <__swbuf_r+0x1a>
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	f000 f80c 	bl	800b700 <__swsetup_r>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d0cb      	beq.n	800b684 <__swbuf_r+0x28>
 800b6ec:	f04f 37ff 	mov.w	r7, #4294967295
 800b6f0:	e7ea      	b.n	800b6c8 <__swbuf_r+0x6c>
 800b6f2:	bf00      	nop
 800b6f4:	0800d3ac 	.word	0x0800d3ac
 800b6f8:	0800d3cc 	.word	0x0800d3cc
 800b6fc:	0800d38c 	.word	0x0800d38c

0800b700 <__swsetup_r>:
 800b700:	4b32      	ldr	r3, [pc, #200]	; (800b7cc <__swsetup_r+0xcc>)
 800b702:	b570      	push	{r4, r5, r6, lr}
 800b704:	681d      	ldr	r5, [r3, #0]
 800b706:	4606      	mov	r6, r0
 800b708:	460c      	mov	r4, r1
 800b70a:	b125      	cbz	r5, 800b716 <__swsetup_r+0x16>
 800b70c:	69ab      	ldr	r3, [r5, #24]
 800b70e:	b913      	cbnz	r3, 800b716 <__swsetup_r+0x16>
 800b710:	4628      	mov	r0, r5
 800b712:	f000 f985 	bl	800ba20 <__sinit>
 800b716:	4b2e      	ldr	r3, [pc, #184]	; (800b7d0 <__swsetup_r+0xd0>)
 800b718:	429c      	cmp	r4, r3
 800b71a:	d10f      	bne.n	800b73c <__swsetup_r+0x3c>
 800b71c:	686c      	ldr	r4, [r5, #4]
 800b71e:	89a3      	ldrh	r3, [r4, #12]
 800b720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b724:	0719      	lsls	r1, r3, #28
 800b726:	d42c      	bmi.n	800b782 <__swsetup_r+0x82>
 800b728:	06dd      	lsls	r5, r3, #27
 800b72a:	d411      	bmi.n	800b750 <__swsetup_r+0x50>
 800b72c:	2309      	movs	r3, #9
 800b72e:	6033      	str	r3, [r6, #0]
 800b730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	f04f 30ff 	mov.w	r0, #4294967295
 800b73a:	e03e      	b.n	800b7ba <__swsetup_r+0xba>
 800b73c:	4b25      	ldr	r3, [pc, #148]	; (800b7d4 <__swsetup_r+0xd4>)
 800b73e:	429c      	cmp	r4, r3
 800b740:	d101      	bne.n	800b746 <__swsetup_r+0x46>
 800b742:	68ac      	ldr	r4, [r5, #8]
 800b744:	e7eb      	b.n	800b71e <__swsetup_r+0x1e>
 800b746:	4b24      	ldr	r3, [pc, #144]	; (800b7d8 <__swsetup_r+0xd8>)
 800b748:	429c      	cmp	r4, r3
 800b74a:	bf08      	it	eq
 800b74c:	68ec      	ldreq	r4, [r5, #12]
 800b74e:	e7e6      	b.n	800b71e <__swsetup_r+0x1e>
 800b750:	0758      	lsls	r0, r3, #29
 800b752:	d512      	bpl.n	800b77a <__swsetup_r+0x7a>
 800b754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b756:	b141      	cbz	r1, 800b76a <__swsetup_r+0x6a>
 800b758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b75c:	4299      	cmp	r1, r3
 800b75e:	d002      	beq.n	800b766 <__swsetup_r+0x66>
 800b760:	4630      	mov	r0, r6
 800b762:	f7ff fb67 	bl	800ae34 <_free_r>
 800b766:	2300      	movs	r3, #0
 800b768:	6363      	str	r3, [r4, #52]	; 0x34
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b770:	81a3      	strh	r3, [r4, #12]
 800b772:	2300      	movs	r3, #0
 800b774:	6063      	str	r3, [r4, #4]
 800b776:	6923      	ldr	r3, [r4, #16]
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	f043 0308 	orr.w	r3, r3, #8
 800b780:	81a3      	strh	r3, [r4, #12]
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	b94b      	cbnz	r3, 800b79a <__swsetup_r+0x9a>
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b78c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b790:	d003      	beq.n	800b79a <__swsetup_r+0x9a>
 800b792:	4621      	mov	r1, r4
 800b794:	4630      	mov	r0, r6
 800b796:	f000 fa07 	bl	800bba8 <__smakebuf_r>
 800b79a:	89a0      	ldrh	r0, [r4, #12]
 800b79c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7a0:	f010 0301 	ands.w	r3, r0, #1
 800b7a4:	d00a      	beq.n	800b7bc <__swsetup_r+0xbc>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60a3      	str	r3, [r4, #8]
 800b7aa:	6963      	ldr	r3, [r4, #20]
 800b7ac:	425b      	negs	r3, r3
 800b7ae:	61a3      	str	r3, [r4, #24]
 800b7b0:	6923      	ldr	r3, [r4, #16]
 800b7b2:	b943      	cbnz	r3, 800b7c6 <__swsetup_r+0xc6>
 800b7b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7b8:	d1ba      	bne.n	800b730 <__swsetup_r+0x30>
 800b7ba:	bd70      	pop	{r4, r5, r6, pc}
 800b7bc:	0781      	lsls	r1, r0, #30
 800b7be:	bf58      	it	pl
 800b7c0:	6963      	ldrpl	r3, [r4, #20]
 800b7c2:	60a3      	str	r3, [r4, #8]
 800b7c4:	e7f4      	b.n	800b7b0 <__swsetup_r+0xb0>
 800b7c6:	2000      	movs	r0, #0
 800b7c8:	e7f7      	b.n	800b7ba <__swsetup_r+0xba>
 800b7ca:	bf00      	nop
 800b7cc:	20000170 	.word	0x20000170
 800b7d0:	0800d3ac 	.word	0x0800d3ac
 800b7d4:	0800d3cc 	.word	0x0800d3cc
 800b7d8:	0800d38c 	.word	0x0800d38c

0800b7dc <abort>:
 800b7dc:	b508      	push	{r3, lr}
 800b7de:	2006      	movs	r0, #6
 800b7e0:	f000 fa52 	bl	800bc88 <raise>
 800b7e4:	2001      	movs	r0, #1
 800b7e6:	f7f8 fa5d 	bl	8003ca4 <_exit>
	...

0800b7ec <__sflush_r>:
 800b7ec:	898a      	ldrh	r2, [r1, #12]
 800b7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	0710      	lsls	r0, r2, #28
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	d458      	bmi.n	800b8ac <__sflush_r+0xc0>
 800b7fa:	684b      	ldr	r3, [r1, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	dc05      	bgt.n	800b80c <__sflush_r+0x20>
 800b800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b802:	2b00      	cmp	r3, #0
 800b804:	dc02      	bgt.n	800b80c <__sflush_r+0x20>
 800b806:	2000      	movs	r0, #0
 800b808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b80c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b80e:	2e00      	cmp	r6, #0
 800b810:	d0f9      	beq.n	800b806 <__sflush_r+0x1a>
 800b812:	2300      	movs	r3, #0
 800b814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b818:	682f      	ldr	r7, [r5, #0]
 800b81a:	602b      	str	r3, [r5, #0]
 800b81c:	d032      	beq.n	800b884 <__sflush_r+0x98>
 800b81e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	075a      	lsls	r2, r3, #29
 800b824:	d505      	bpl.n	800b832 <__sflush_r+0x46>
 800b826:	6863      	ldr	r3, [r4, #4]
 800b828:	1ac0      	subs	r0, r0, r3
 800b82a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b82c:	b10b      	cbz	r3, 800b832 <__sflush_r+0x46>
 800b82e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b830:	1ac0      	subs	r0, r0, r3
 800b832:	2300      	movs	r3, #0
 800b834:	4602      	mov	r2, r0
 800b836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b838:	6a21      	ldr	r1, [r4, #32]
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b0      	blx	r6
 800b83e:	1c43      	adds	r3, r0, #1
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	d106      	bne.n	800b852 <__sflush_r+0x66>
 800b844:	6829      	ldr	r1, [r5, #0]
 800b846:	291d      	cmp	r1, #29
 800b848:	d82c      	bhi.n	800b8a4 <__sflush_r+0xb8>
 800b84a:	4a2a      	ldr	r2, [pc, #168]	; (800b8f4 <__sflush_r+0x108>)
 800b84c:	40ca      	lsrs	r2, r1
 800b84e:	07d6      	lsls	r6, r2, #31
 800b850:	d528      	bpl.n	800b8a4 <__sflush_r+0xb8>
 800b852:	2200      	movs	r2, #0
 800b854:	6062      	str	r2, [r4, #4]
 800b856:	04d9      	lsls	r1, r3, #19
 800b858:	6922      	ldr	r2, [r4, #16]
 800b85a:	6022      	str	r2, [r4, #0]
 800b85c:	d504      	bpl.n	800b868 <__sflush_r+0x7c>
 800b85e:	1c42      	adds	r2, r0, #1
 800b860:	d101      	bne.n	800b866 <__sflush_r+0x7a>
 800b862:	682b      	ldr	r3, [r5, #0]
 800b864:	b903      	cbnz	r3, 800b868 <__sflush_r+0x7c>
 800b866:	6560      	str	r0, [r4, #84]	; 0x54
 800b868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b86a:	602f      	str	r7, [r5, #0]
 800b86c:	2900      	cmp	r1, #0
 800b86e:	d0ca      	beq.n	800b806 <__sflush_r+0x1a>
 800b870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b874:	4299      	cmp	r1, r3
 800b876:	d002      	beq.n	800b87e <__sflush_r+0x92>
 800b878:	4628      	mov	r0, r5
 800b87a:	f7ff fadb 	bl	800ae34 <_free_r>
 800b87e:	2000      	movs	r0, #0
 800b880:	6360      	str	r0, [r4, #52]	; 0x34
 800b882:	e7c1      	b.n	800b808 <__sflush_r+0x1c>
 800b884:	6a21      	ldr	r1, [r4, #32]
 800b886:	2301      	movs	r3, #1
 800b888:	4628      	mov	r0, r5
 800b88a:	47b0      	blx	r6
 800b88c:	1c41      	adds	r1, r0, #1
 800b88e:	d1c7      	bne.n	800b820 <__sflush_r+0x34>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d0c4      	beq.n	800b820 <__sflush_r+0x34>
 800b896:	2b1d      	cmp	r3, #29
 800b898:	d001      	beq.n	800b89e <__sflush_r+0xb2>
 800b89a:	2b16      	cmp	r3, #22
 800b89c:	d101      	bne.n	800b8a2 <__sflush_r+0xb6>
 800b89e:	602f      	str	r7, [r5, #0]
 800b8a0:	e7b1      	b.n	800b806 <__sflush_r+0x1a>
 800b8a2:	89a3      	ldrh	r3, [r4, #12]
 800b8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8a8:	81a3      	strh	r3, [r4, #12]
 800b8aa:	e7ad      	b.n	800b808 <__sflush_r+0x1c>
 800b8ac:	690f      	ldr	r7, [r1, #16]
 800b8ae:	2f00      	cmp	r7, #0
 800b8b0:	d0a9      	beq.n	800b806 <__sflush_r+0x1a>
 800b8b2:	0793      	lsls	r3, r2, #30
 800b8b4:	680e      	ldr	r6, [r1, #0]
 800b8b6:	bf08      	it	eq
 800b8b8:	694b      	ldreq	r3, [r1, #20]
 800b8ba:	600f      	str	r7, [r1, #0]
 800b8bc:	bf18      	it	ne
 800b8be:	2300      	movne	r3, #0
 800b8c0:	eba6 0807 	sub.w	r8, r6, r7
 800b8c4:	608b      	str	r3, [r1, #8]
 800b8c6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ca:	dd9c      	ble.n	800b806 <__sflush_r+0x1a>
 800b8cc:	6a21      	ldr	r1, [r4, #32]
 800b8ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8d0:	4643      	mov	r3, r8
 800b8d2:	463a      	mov	r2, r7
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	47b0      	blx	r6
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	dc06      	bgt.n	800b8ea <__sflush_r+0xfe>
 800b8dc:	89a3      	ldrh	r3, [r4, #12]
 800b8de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8e2:	81a3      	strh	r3, [r4, #12]
 800b8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e8:	e78e      	b.n	800b808 <__sflush_r+0x1c>
 800b8ea:	4407      	add	r7, r0
 800b8ec:	eba8 0800 	sub.w	r8, r8, r0
 800b8f0:	e7e9      	b.n	800b8c6 <__sflush_r+0xda>
 800b8f2:	bf00      	nop
 800b8f4:	20400001 	.word	0x20400001

0800b8f8 <_fflush_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	690b      	ldr	r3, [r1, #16]
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	b913      	cbnz	r3, 800b908 <_fflush_r+0x10>
 800b902:	2500      	movs	r5, #0
 800b904:	4628      	mov	r0, r5
 800b906:	bd38      	pop	{r3, r4, r5, pc}
 800b908:	b118      	cbz	r0, 800b912 <_fflush_r+0x1a>
 800b90a:	6983      	ldr	r3, [r0, #24]
 800b90c:	b90b      	cbnz	r3, 800b912 <_fflush_r+0x1a>
 800b90e:	f000 f887 	bl	800ba20 <__sinit>
 800b912:	4b14      	ldr	r3, [pc, #80]	; (800b964 <_fflush_r+0x6c>)
 800b914:	429c      	cmp	r4, r3
 800b916:	d11b      	bne.n	800b950 <_fflush_r+0x58>
 800b918:	686c      	ldr	r4, [r5, #4]
 800b91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d0ef      	beq.n	800b902 <_fflush_r+0xa>
 800b922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b924:	07d0      	lsls	r0, r2, #31
 800b926:	d404      	bmi.n	800b932 <_fflush_r+0x3a>
 800b928:	0599      	lsls	r1, r3, #22
 800b92a:	d402      	bmi.n	800b932 <_fflush_r+0x3a>
 800b92c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b92e:	f000 f915 	bl	800bb5c <__retarget_lock_acquire_recursive>
 800b932:	4628      	mov	r0, r5
 800b934:	4621      	mov	r1, r4
 800b936:	f7ff ff59 	bl	800b7ec <__sflush_r>
 800b93a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b93c:	07da      	lsls	r2, r3, #31
 800b93e:	4605      	mov	r5, r0
 800b940:	d4e0      	bmi.n	800b904 <_fflush_r+0xc>
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	059b      	lsls	r3, r3, #22
 800b946:	d4dd      	bmi.n	800b904 <_fflush_r+0xc>
 800b948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b94a:	f000 f908 	bl	800bb5e <__retarget_lock_release_recursive>
 800b94e:	e7d9      	b.n	800b904 <_fflush_r+0xc>
 800b950:	4b05      	ldr	r3, [pc, #20]	; (800b968 <_fflush_r+0x70>)
 800b952:	429c      	cmp	r4, r3
 800b954:	d101      	bne.n	800b95a <_fflush_r+0x62>
 800b956:	68ac      	ldr	r4, [r5, #8]
 800b958:	e7df      	b.n	800b91a <_fflush_r+0x22>
 800b95a:	4b04      	ldr	r3, [pc, #16]	; (800b96c <_fflush_r+0x74>)
 800b95c:	429c      	cmp	r4, r3
 800b95e:	bf08      	it	eq
 800b960:	68ec      	ldreq	r4, [r5, #12]
 800b962:	e7da      	b.n	800b91a <_fflush_r+0x22>
 800b964:	0800d3ac 	.word	0x0800d3ac
 800b968:	0800d3cc 	.word	0x0800d3cc
 800b96c:	0800d38c 	.word	0x0800d38c

0800b970 <std>:
 800b970:	2300      	movs	r3, #0
 800b972:	b510      	push	{r4, lr}
 800b974:	4604      	mov	r4, r0
 800b976:	e9c0 3300 	strd	r3, r3, [r0]
 800b97a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b97e:	6083      	str	r3, [r0, #8]
 800b980:	8181      	strh	r1, [r0, #12]
 800b982:	6643      	str	r3, [r0, #100]	; 0x64
 800b984:	81c2      	strh	r2, [r0, #14]
 800b986:	6183      	str	r3, [r0, #24]
 800b988:	4619      	mov	r1, r3
 800b98a:	2208      	movs	r2, #8
 800b98c:	305c      	adds	r0, #92	; 0x5c
 800b98e:	f7fb fdbb 	bl	8007508 <memset>
 800b992:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <std+0x38>)
 800b994:	6263      	str	r3, [r4, #36]	; 0x24
 800b996:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <std+0x3c>)
 800b998:	62a3      	str	r3, [r4, #40]	; 0x28
 800b99a:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <std+0x40>)
 800b99c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b99e:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <std+0x44>)
 800b9a0:	6224      	str	r4, [r4, #32]
 800b9a2:	6323      	str	r3, [r4, #48]	; 0x30
 800b9a4:	bd10      	pop	{r4, pc}
 800b9a6:	bf00      	nop
 800b9a8:	0800bcc1 	.word	0x0800bcc1
 800b9ac:	0800bce3 	.word	0x0800bce3
 800b9b0:	0800bd1b 	.word	0x0800bd1b
 800b9b4:	0800bd3f 	.word	0x0800bd3f

0800b9b8 <_cleanup_r>:
 800b9b8:	4901      	ldr	r1, [pc, #4]	; (800b9c0 <_cleanup_r+0x8>)
 800b9ba:	f000 b8af 	b.w	800bb1c <_fwalk_reent>
 800b9be:	bf00      	nop
 800b9c0:	0800b8f9 	.word	0x0800b8f9

0800b9c4 <__sfmoreglue>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	1e4a      	subs	r2, r1, #1
 800b9c8:	2568      	movs	r5, #104	; 0x68
 800b9ca:	4355      	muls	r5, r2
 800b9cc:	460e      	mov	r6, r1
 800b9ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b9d2:	f7ff fa7f 	bl	800aed4 <_malloc_r>
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	b140      	cbz	r0, 800b9ec <__sfmoreglue+0x28>
 800b9da:	2100      	movs	r1, #0
 800b9dc:	e9c0 1600 	strd	r1, r6, [r0]
 800b9e0:	300c      	adds	r0, #12
 800b9e2:	60a0      	str	r0, [r4, #8]
 800b9e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9e8:	f7fb fd8e 	bl	8007508 <memset>
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	bd70      	pop	{r4, r5, r6, pc}

0800b9f0 <__sfp_lock_acquire>:
 800b9f0:	4801      	ldr	r0, [pc, #4]	; (800b9f8 <__sfp_lock_acquire+0x8>)
 800b9f2:	f000 b8b3 	b.w	800bb5c <__retarget_lock_acquire_recursive>
 800b9f6:	bf00      	nop
 800b9f8:	20003514 	.word	0x20003514

0800b9fc <__sfp_lock_release>:
 800b9fc:	4801      	ldr	r0, [pc, #4]	; (800ba04 <__sfp_lock_release+0x8>)
 800b9fe:	f000 b8ae 	b.w	800bb5e <__retarget_lock_release_recursive>
 800ba02:	bf00      	nop
 800ba04:	20003514 	.word	0x20003514

0800ba08 <__sinit_lock_acquire>:
 800ba08:	4801      	ldr	r0, [pc, #4]	; (800ba10 <__sinit_lock_acquire+0x8>)
 800ba0a:	f000 b8a7 	b.w	800bb5c <__retarget_lock_acquire_recursive>
 800ba0e:	bf00      	nop
 800ba10:	2000350f 	.word	0x2000350f

0800ba14 <__sinit_lock_release>:
 800ba14:	4801      	ldr	r0, [pc, #4]	; (800ba1c <__sinit_lock_release+0x8>)
 800ba16:	f000 b8a2 	b.w	800bb5e <__retarget_lock_release_recursive>
 800ba1a:	bf00      	nop
 800ba1c:	2000350f 	.word	0x2000350f

0800ba20 <__sinit>:
 800ba20:	b510      	push	{r4, lr}
 800ba22:	4604      	mov	r4, r0
 800ba24:	f7ff fff0 	bl	800ba08 <__sinit_lock_acquire>
 800ba28:	69a3      	ldr	r3, [r4, #24]
 800ba2a:	b11b      	cbz	r3, 800ba34 <__sinit+0x14>
 800ba2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba30:	f7ff bff0 	b.w	800ba14 <__sinit_lock_release>
 800ba34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba38:	6523      	str	r3, [r4, #80]	; 0x50
 800ba3a:	4b13      	ldr	r3, [pc, #76]	; (800ba88 <__sinit+0x68>)
 800ba3c:	4a13      	ldr	r2, [pc, #76]	; (800ba8c <__sinit+0x6c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba42:	42a3      	cmp	r3, r4
 800ba44:	bf04      	itt	eq
 800ba46:	2301      	moveq	r3, #1
 800ba48:	61a3      	streq	r3, [r4, #24]
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 f820 	bl	800ba90 <__sfp>
 800ba50:	6060      	str	r0, [r4, #4]
 800ba52:	4620      	mov	r0, r4
 800ba54:	f000 f81c 	bl	800ba90 <__sfp>
 800ba58:	60a0      	str	r0, [r4, #8]
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f000 f818 	bl	800ba90 <__sfp>
 800ba60:	2200      	movs	r2, #0
 800ba62:	60e0      	str	r0, [r4, #12]
 800ba64:	2104      	movs	r1, #4
 800ba66:	6860      	ldr	r0, [r4, #4]
 800ba68:	f7ff ff82 	bl	800b970 <std>
 800ba6c:	68a0      	ldr	r0, [r4, #8]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	2109      	movs	r1, #9
 800ba72:	f7ff ff7d 	bl	800b970 <std>
 800ba76:	68e0      	ldr	r0, [r4, #12]
 800ba78:	2202      	movs	r2, #2
 800ba7a:	2112      	movs	r1, #18
 800ba7c:	f7ff ff78 	bl	800b970 <std>
 800ba80:	2301      	movs	r3, #1
 800ba82:	61a3      	str	r3, [r4, #24]
 800ba84:	e7d2      	b.n	800ba2c <__sinit+0xc>
 800ba86:	bf00      	nop
 800ba88:	0800cf38 	.word	0x0800cf38
 800ba8c:	0800b9b9 	.word	0x0800b9b9

0800ba90 <__sfp>:
 800ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba92:	4607      	mov	r7, r0
 800ba94:	f7ff ffac 	bl	800b9f0 <__sfp_lock_acquire>
 800ba98:	4b1e      	ldr	r3, [pc, #120]	; (800bb14 <__sfp+0x84>)
 800ba9a:	681e      	ldr	r6, [r3, #0]
 800ba9c:	69b3      	ldr	r3, [r6, #24]
 800ba9e:	b913      	cbnz	r3, 800baa6 <__sfp+0x16>
 800baa0:	4630      	mov	r0, r6
 800baa2:	f7ff ffbd 	bl	800ba20 <__sinit>
 800baa6:	3648      	adds	r6, #72	; 0x48
 800baa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800baac:	3b01      	subs	r3, #1
 800baae:	d503      	bpl.n	800bab8 <__sfp+0x28>
 800bab0:	6833      	ldr	r3, [r6, #0]
 800bab2:	b30b      	cbz	r3, 800baf8 <__sfp+0x68>
 800bab4:	6836      	ldr	r6, [r6, #0]
 800bab6:	e7f7      	b.n	800baa8 <__sfp+0x18>
 800bab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800babc:	b9d5      	cbnz	r5, 800baf4 <__sfp+0x64>
 800babe:	4b16      	ldr	r3, [pc, #88]	; (800bb18 <__sfp+0x88>)
 800bac0:	60e3      	str	r3, [r4, #12]
 800bac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bac6:	6665      	str	r5, [r4, #100]	; 0x64
 800bac8:	f000 f847 	bl	800bb5a <__retarget_lock_init_recursive>
 800bacc:	f7ff ff96 	bl	800b9fc <__sfp_lock_release>
 800bad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bad8:	6025      	str	r5, [r4, #0]
 800bada:	61a5      	str	r5, [r4, #24]
 800badc:	2208      	movs	r2, #8
 800bade:	4629      	mov	r1, r5
 800bae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bae4:	f7fb fd10 	bl	8007508 <memset>
 800bae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800baec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800baf0:	4620      	mov	r0, r4
 800baf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baf4:	3468      	adds	r4, #104	; 0x68
 800baf6:	e7d9      	b.n	800baac <__sfp+0x1c>
 800baf8:	2104      	movs	r1, #4
 800bafa:	4638      	mov	r0, r7
 800bafc:	f7ff ff62 	bl	800b9c4 <__sfmoreglue>
 800bb00:	4604      	mov	r4, r0
 800bb02:	6030      	str	r0, [r6, #0]
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d1d5      	bne.n	800bab4 <__sfp+0x24>
 800bb08:	f7ff ff78 	bl	800b9fc <__sfp_lock_release>
 800bb0c:	230c      	movs	r3, #12
 800bb0e:	603b      	str	r3, [r7, #0]
 800bb10:	e7ee      	b.n	800baf0 <__sfp+0x60>
 800bb12:	bf00      	nop
 800bb14:	0800cf38 	.word	0x0800cf38
 800bb18:	ffff0001 	.word	0xffff0001

0800bb1c <_fwalk_reent>:
 800bb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb20:	4606      	mov	r6, r0
 800bb22:	4688      	mov	r8, r1
 800bb24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb28:	2700      	movs	r7, #0
 800bb2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb2e:	f1b9 0901 	subs.w	r9, r9, #1
 800bb32:	d505      	bpl.n	800bb40 <_fwalk_reent+0x24>
 800bb34:	6824      	ldr	r4, [r4, #0]
 800bb36:	2c00      	cmp	r4, #0
 800bb38:	d1f7      	bne.n	800bb2a <_fwalk_reent+0xe>
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb40:	89ab      	ldrh	r3, [r5, #12]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d907      	bls.n	800bb56 <_fwalk_reent+0x3a>
 800bb46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	d003      	beq.n	800bb56 <_fwalk_reent+0x3a>
 800bb4e:	4629      	mov	r1, r5
 800bb50:	4630      	mov	r0, r6
 800bb52:	47c0      	blx	r8
 800bb54:	4307      	orrs	r7, r0
 800bb56:	3568      	adds	r5, #104	; 0x68
 800bb58:	e7e9      	b.n	800bb2e <_fwalk_reent+0x12>

0800bb5a <__retarget_lock_init_recursive>:
 800bb5a:	4770      	bx	lr

0800bb5c <__retarget_lock_acquire_recursive>:
 800bb5c:	4770      	bx	lr

0800bb5e <__retarget_lock_release_recursive>:
 800bb5e:	4770      	bx	lr

0800bb60 <__swhatbuf_r>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	460e      	mov	r6, r1
 800bb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb68:	2900      	cmp	r1, #0
 800bb6a:	b096      	sub	sp, #88	; 0x58
 800bb6c:	4614      	mov	r4, r2
 800bb6e:	461d      	mov	r5, r3
 800bb70:	da07      	bge.n	800bb82 <__swhatbuf_r+0x22>
 800bb72:	2300      	movs	r3, #0
 800bb74:	602b      	str	r3, [r5, #0]
 800bb76:	89b3      	ldrh	r3, [r6, #12]
 800bb78:	061a      	lsls	r2, r3, #24
 800bb7a:	d410      	bmi.n	800bb9e <__swhatbuf_r+0x3e>
 800bb7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb80:	e00e      	b.n	800bba0 <__swhatbuf_r+0x40>
 800bb82:	466a      	mov	r2, sp
 800bb84:	f000 f902 	bl	800bd8c <_fstat_r>
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	dbf2      	blt.n	800bb72 <__swhatbuf_r+0x12>
 800bb8c:	9a01      	ldr	r2, [sp, #4]
 800bb8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb96:	425a      	negs	r2, r3
 800bb98:	415a      	adcs	r2, r3
 800bb9a:	602a      	str	r2, [r5, #0]
 800bb9c:	e7ee      	b.n	800bb7c <__swhatbuf_r+0x1c>
 800bb9e:	2340      	movs	r3, #64	; 0x40
 800bba0:	2000      	movs	r0, #0
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	b016      	add	sp, #88	; 0x58
 800bba6:	bd70      	pop	{r4, r5, r6, pc}

0800bba8 <__smakebuf_r>:
 800bba8:	898b      	ldrh	r3, [r1, #12]
 800bbaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbac:	079d      	lsls	r5, r3, #30
 800bbae:	4606      	mov	r6, r0
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	d507      	bpl.n	800bbc4 <__smakebuf_r+0x1c>
 800bbb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	6123      	str	r3, [r4, #16]
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	6163      	str	r3, [r4, #20]
 800bbc0:	b002      	add	sp, #8
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
 800bbc4:	ab01      	add	r3, sp, #4
 800bbc6:	466a      	mov	r2, sp
 800bbc8:	f7ff ffca 	bl	800bb60 <__swhatbuf_r>
 800bbcc:	9900      	ldr	r1, [sp, #0]
 800bbce:	4605      	mov	r5, r0
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	f7ff f97f 	bl	800aed4 <_malloc_r>
 800bbd6:	b948      	cbnz	r0, 800bbec <__smakebuf_r+0x44>
 800bbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbdc:	059a      	lsls	r2, r3, #22
 800bbde:	d4ef      	bmi.n	800bbc0 <__smakebuf_r+0x18>
 800bbe0:	f023 0303 	bic.w	r3, r3, #3
 800bbe4:	f043 0302 	orr.w	r3, r3, #2
 800bbe8:	81a3      	strh	r3, [r4, #12]
 800bbea:	e7e3      	b.n	800bbb4 <__smakebuf_r+0xc>
 800bbec:	4b0d      	ldr	r3, [pc, #52]	; (800bc24 <__smakebuf_r+0x7c>)
 800bbee:	62b3      	str	r3, [r6, #40]	; 0x28
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	6020      	str	r0, [r4, #0]
 800bbf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbf8:	81a3      	strh	r3, [r4, #12]
 800bbfa:	9b00      	ldr	r3, [sp, #0]
 800bbfc:	6163      	str	r3, [r4, #20]
 800bbfe:	9b01      	ldr	r3, [sp, #4]
 800bc00:	6120      	str	r0, [r4, #16]
 800bc02:	b15b      	cbz	r3, 800bc1c <__smakebuf_r+0x74>
 800bc04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f000 f8d1 	bl	800bdb0 <_isatty_r>
 800bc0e:	b128      	cbz	r0, 800bc1c <__smakebuf_r+0x74>
 800bc10:	89a3      	ldrh	r3, [r4, #12]
 800bc12:	f023 0303 	bic.w	r3, r3, #3
 800bc16:	f043 0301 	orr.w	r3, r3, #1
 800bc1a:	81a3      	strh	r3, [r4, #12]
 800bc1c:	89a0      	ldrh	r0, [r4, #12]
 800bc1e:	4305      	orrs	r5, r0
 800bc20:	81a5      	strh	r5, [r4, #12]
 800bc22:	e7cd      	b.n	800bbc0 <__smakebuf_r+0x18>
 800bc24:	0800b9b9 	.word	0x0800b9b9

0800bc28 <_malloc_usable_size_r>:
 800bc28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc2c:	1f18      	subs	r0, r3, #4
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	bfbc      	itt	lt
 800bc32:	580b      	ldrlt	r3, [r1, r0]
 800bc34:	18c0      	addlt	r0, r0, r3
 800bc36:	4770      	bx	lr

0800bc38 <_raise_r>:
 800bc38:	291f      	cmp	r1, #31
 800bc3a:	b538      	push	{r3, r4, r5, lr}
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	460d      	mov	r5, r1
 800bc40:	d904      	bls.n	800bc4c <_raise_r+0x14>
 800bc42:	2316      	movs	r3, #22
 800bc44:	6003      	str	r3, [r0, #0]
 800bc46:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc4e:	b112      	cbz	r2, 800bc56 <_raise_r+0x1e>
 800bc50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc54:	b94b      	cbnz	r3, 800bc6a <_raise_r+0x32>
 800bc56:	4620      	mov	r0, r4
 800bc58:	f000 f830 	bl	800bcbc <_getpid_r>
 800bc5c:	462a      	mov	r2, r5
 800bc5e:	4601      	mov	r1, r0
 800bc60:	4620      	mov	r0, r4
 800bc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc66:	f000 b817 	b.w	800bc98 <_kill_r>
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d00a      	beq.n	800bc84 <_raise_r+0x4c>
 800bc6e:	1c59      	adds	r1, r3, #1
 800bc70:	d103      	bne.n	800bc7a <_raise_r+0x42>
 800bc72:	2316      	movs	r3, #22
 800bc74:	6003      	str	r3, [r0, #0]
 800bc76:	2001      	movs	r0, #1
 800bc78:	e7e7      	b.n	800bc4a <_raise_r+0x12>
 800bc7a:	2400      	movs	r4, #0
 800bc7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc80:	4628      	mov	r0, r5
 800bc82:	4798      	blx	r3
 800bc84:	2000      	movs	r0, #0
 800bc86:	e7e0      	b.n	800bc4a <_raise_r+0x12>

0800bc88 <raise>:
 800bc88:	4b02      	ldr	r3, [pc, #8]	; (800bc94 <raise+0xc>)
 800bc8a:	4601      	mov	r1, r0
 800bc8c:	6818      	ldr	r0, [r3, #0]
 800bc8e:	f7ff bfd3 	b.w	800bc38 <_raise_r>
 800bc92:	bf00      	nop
 800bc94:	20000170 	.word	0x20000170

0800bc98 <_kill_r>:
 800bc98:	b538      	push	{r3, r4, r5, lr}
 800bc9a:	4d07      	ldr	r5, [pc, #28]	; (800bcb8 <_kill_r+0x20>)
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	4604      	mov	r4, r0
 800bca0:	4608      	mov	r0, r1
 800bca2:	4611      	mov	r1, r2
 800bca4:	602b      	str	r3, [r5, #0]
 800bca6:	f7f7 ffed 	bl	8003c84 <_kill>
 800bcaa:	1c43      	adds	r3, r0, #1
 800bcac:	d102      	bne.n	800bcb4 <_kill_r+0x1c>
 800bcae:	682b      	ldr	r3, [r5, #0]
 800bcb0:	b103      	cbz	r3, 800bcb4 <_kill_r+0x1c>
 800bcb2:	6023      	str	r3, [r4, #0]
 800bcb4:	bd38      	pop	{r3, r4, r5, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20003508 	.word	0x20003508

0800bcbc <_getpid_r>:
 800bcbc:	f7f7 bfda 	b.w	8003c74 <_getpid>

0800bcc0 <__sread>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc8:	f000 f894 	bl	800bdf4 <_read_r>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	bfab      	itete	ge
 800bcd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcd2:	89a3      	ldrhlt	r3, [r4, #12]
 800bcd4:	181b      	addge	r3, r3, r0
 800bcd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcda:	bfac      	ite	ge
 800bcdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcde:	81a3      	strhlt	r3, [r4, #12]
 800bce0:	bd10      	pop	{r4, pc}

0800bce2 <__swrite>:
 800bce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce6:	461f      	mov	r7, r3
 800bce8:	898b      	ldrh	r3, [r1, #12]
 800bcea:	05db      	lsls	r3, r3, #23
 800bcec:	4605      	mov	r5, r0
 800bcee:	460c      	mov	r4, r1
 800bcf0:	4616      	mov	r6, r2
 800bcf2:	d505      	bpl.n	800bd00 <__swrite+0x1e>
 800bcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f000 f868 	bl	800bdd0 <_lseek_r>
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd0a:	81a3      	strh	r3, [r4, #12]
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	463b      	mov	r3, r7
 800bd10:	4628      	mov	r0, r5
 800bd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd16:	f000 b817 	b.w	800bd48 <_write_r>

0800bd1a <__sseek>:
 800bd1a:	b510      	push	{r4, lr}
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd22:	f000 f855 	bl	800bdd0 <_lseek_r>
 800bd26:	1c43      	adds	r3, r0, #1
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	bf15      	itete	ne
 800bd2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd36:	81a3      	strheq	r3, [r4, #12]
 800bd38:	bf18      	it	ne
 800bd3a:	81a3      	strhne	r3, [r4, #12]
 800bd3c:	bd10      	pop	{r4, pc}

0800bd3e <__sclose>:
 800bd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd42:	f000 b813 	b.w	800bd6c <_close_r>
	...

0800bd48 <_write_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d07      	ldr	r5, [pc, #28]	; (800bd68 <_write_r+0x20>)
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	4608      	mov	r0, r1
 800bd50:	4611      	mov	r1, r2
 800bd52:	2200      	movs	r2, #0
 800bd54:	602a      	str	r2, [r5, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	f7f7 ffcb 	bl	8003cf2 <_write>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d102      	bne.n	800bd66 <_write_r+0x1e>
 800bd60:	682b      	ldr	r3, [r5, #0]
 800bd62:	b103      	cbz	r3, 800bd66 <_write_r+0x1e>
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	20003508 	.word	0x20003508

0800bd6c <_close_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4d06      	ldr	r5, [pc, #24]	; (800bd88 <_close_r+0x1c>)
 800bd70:	2300      	movs	r3, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	f7f7 ffd7 	bl	8003d2a <_close>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d102      	bne.n	800bd86 <_close_r+0x1a>
 800bd80:	682b      	ldr	r3, [r5, #0]
 800bd82:	b103      	cbz	r3, 800bd86 <_close_r+0x1a>
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	20003508 	.word	0x20003508

0800bd8c <_fstat_r>:
 800bd8c:	b538      	push	{r3, r4, r5, lr}
 800bd8e:	4d07      	ldr	r5, [pc, #28]	; (800bdac <_fstat_r+0x20>)
 800bd90:	2300      	movs	r3, #0
 800bd92:	4604      	mov	r4, r0
 800bd94:	4608      	mov	r0, r1
 800bd96:	4611      	mov	r1, r2
 800bd98:	602b      	str	r3, [r5, #0]
 800bd9a:	f7f7 ffd2 	bl	8003d42 <_fstat>
 800bd9e:	1c43      	adds	r3, r0, #1
 800bda0:	d102      	bne.n	800bda8 <_fstat_r+0x1c>
 800bda2:	682b      	ldr	r3, [r5, #0]
 800bda4:	b103      	cbz	r3, 800bda8 <_fstat_r+0x1c>
 800bda6:	6023      	str	r3, [r4, #0]
 800bda8:	bd38      	pop	{r3, r4, r5, pc}
 800bdaa:	bf00      	nop
 800bdac:	20003508 	.word	0x20003508

0800bdb0 <_isatty_r>:
 800bdb0:	b538      	push	{r3, r4, r5, lr}
 800bdb2:	4d06      	ldr	r5, [pc, #24]	; (800bdcc <_isatty_r+0x1c>)
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	4608      	mov	r0, r1
 800bdba:	602b      	str	r3, [r5, #0]
 800bdbc:	f7f7 ffd1 	bl	8003d62 <_isatty>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d102      	bne.n	800bdca <_isatty_r+0x1a>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	b103      	cbz	r3, 800bdca <_isatty_r+0x1a>
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	20003508 	.word	0x20003508

0800bdd0 <_lseek_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4d07      	ldr	r5, [pc, #28]	; (800bdf0 <_lseek_r+0x20>)
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	4608      	mov	r0, r1
 800bdd8:	4611      	mov	r1, r2
 800bdda:	2200      	movs	r2, #0
 800bddc:	602a      	str	r2, [r5, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	f7f7 ffca 	bl	8003d78 <_lseek>
 800bde4:	1c43      	adds	r3, r0, #1
 800bde6:	d102      	bne.n	800bdee <_lseek_r+0x1e>
 800bde8:	682b      	ldr	r3, [r5, #0]
 800bdea:	b103      	cbz	r3, 800bdee <_lseek_r+0x1e>
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	bd38      	pop	{r3, r4, r5, pc}
 800bdf0:	20003508 	.word	0x20003508

0800bdf4 <_read_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4d07      	ldr	r5, [pc, #28]	; (800be14 <_read_r+0x20>)
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	4608      	mov	r0, r1
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	2200      	movs	r2, #0
 800be00:	602a      	str	r2, [r5, #0]
 800be02:	461a      	mov	r2, r3
 800be04:	f7f7 ff58 	bl	8003cb8 <_read>
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	d102      	bne.n	800be12 <_read_r+0x1e>
 800be0c:	682b      	ldr	r3, [r5, #0]
 800be0e:	b103      	cbz	r3, 800be12 <_read_r+0x1e>
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	20003508 	.word	0x20003508

0800be18 <pow>:
 800be18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be1c:	ec59 8b10 	vmov	r8, r9, d0
 800be20:	ec57 6b11 	vmov	r6, r7, d1
 800be24:	f000 f8a8 	bl	800bf78 <__ieee754_pow>
 800be28:	4b4e      	ldr	r3, [pc, #312]	; (800bf64 <pow+0x14c>)
 800be2a:	f993 3000 	ldrsb.w	r3, [r3]
 800be2e:	3301      	adds	r3, #1
 800be30:	ec55 4b10 	vmov	r4, r5, d0
 800be34:	d015      	beq.n	800be62 <pow+0x4a>
 800be36:	4632      	mov	r2, r6
 800be38:	463b      	mov	r3, r7
 800be3a:	4630      	mov	r0, r6
 800be3c:	4639      	mov	r1, r7
 800be3e:	f7f4 fe75 	bl	8000b2c <__aeabi_dcmpun>
 800be42:	b970      	cbnz	r0, 800be62 <pow+0x4a>
 800be44:	4642      	mov	r2, r8
 800be46:	464b      	mov	r3, r9
 800be48:	4640      	mov	r0, r8
 800be4a:	4649      	mov	r1, r9
 800be4c:	f7f4 fe6e 	bl	8000b2c <__aeabi_dcmpun>
 800be50:	2200      	movs	r2, #0
 800be52:	2300      	movs	r3, #0
 800be54:	b148      	cbz	r0, 800be6a <pow+0x52>
 800be56:	4630      	mov	r0, r6
 800be58:	4639      	mov	r1, r7
 800be5a:	f7f4 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 800be5e:	2800      	cmp	r0, #0
 800be60:	d17d      	bne.n	800bf5e <pow+0x146>
 800be62:	ec45 4b10 	vmov	d0, r4, r5
 800be66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6a:	4640      	mov	r0, r8
 800be6c:	4649      	mov	r1, r9
 800be6e:	f7f4 fe2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800be72:	b1e0      	cbz	r0, 800beae <pow+0x96>
 800be74:	2200      	movs	r2, #0
 800be76:	2300      	movs	r3, #0
 800be78:	4630      	mov	r0, r6
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 800be80:	2800      	cmp	r0, #0
 800be82:	d16c      	bne.n	800bf5e <pow+0x146>
 800be84:	ec47 6b10 	vmov	d0, r6, r7
 800be88:	f000 fe55 	bl	800cb36 <finite>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d0e8      	beq.n	800be62 <pow+0x4a>
 800be90:	2200      	movs	r2, #0
 800be92:	2300      	movs	r3, #0
 800be94:	4630      	mov	r0, r6
 800be96:	4639      	mov	r1, r7
 800be98:	f7f4 fe20 	bl	8000adc <__aeabi_dcmplt>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d0e0      	beq.n	800be62 <pow+0x4a>
 800bea0:	f7fb fb08 	bl	80074b4 <__errno>
 800bea4:	2321      	movs	r3, #33	; 0x21
 800bea6:	6003      	str	r3, [r0, #0]
 800bea8:	2400      	movs	r4, #0
 800beaa:	4d2f      	ldr	r5, [pc, #188]	; (800bf68 <pow+0x150>)
 800beac:	e7d9      	b.n	800be62 <pow+0x4a>
 800beae:	ec45 4b10 	vmov	d0, r4, r5
 800beb2:	f000 fe40 	bl	800cb36 <finite>
 800beb6:	bbb8      	cbnz	r0, 800bf28 <pow+0x110>
 800beb8:	ec49 8b10 	vmov	d0, r8, r9
 800bebc:	f000 fe3b 	bl	800cb36 <finite>
 800bec0:	b390      	cbz	r0, 800bf28 <pow+0x110>
 800bec2:	ec47 6b10 	vmov	d0, r6, r7
 800bec6:	f000 fe36 	bl	800cb36 <finite>
 800beca:	b368      	cbz	r0, 800bf28 <pow+0x110>
 800becc:	4622      	mov	r2, r4
 800bece:	462b      	mov	r3, r5
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	f7f4 fe2a 	bl	8000b2c <__aeabi_dcmpun>
 800bed8:	b160      	cbz	r0, 800bef4 <pow+0xdc>
 800beda:	f7fb faeb 	bl	80074b4 <__errno>
 800bede:	2321      	movs	r3, #33	; 0x21
 800bee0:	6003      	str	r3, [r0, #0]
 800bee2:	2200      	movs	r2, #0
 800bee4:	2300      	movs	r3, #0
 800bee6:	4610      	mov	r0, r2
 800bee8:	4619      	mov	r1, r3
 800beea:	f7f4 fcaf 	bl	800084c <__aeabi_ddiv>
 800beee:	4604      	mov	r4, r0
 800bef0:	460d      	mov	r5, r1
 800bef2:	e7b6      	b.n	800be62 <pow+0x4a>
 800bef4:	f7fb fade 	bl	80074b4 <__errno>
 800bef8:	2322      	movs	r3, #34	; 0x22
 800befa:	6003      	str	r3, [r0, #0]
 800befc:	2200      	movs	r2, #0
 800befe:	2300      	movs	r3, #0
 800bf00:	4640      	mov	r0, r8
 800bf02:	4649      	mov	r1, r9
 800bf04:	f7f4 fdea 	bl	8000adc <__aeabi_dcmplt>
 800bf08:	2400      	movs	r4, #0
 800bf0a:	b158      	cbz	r0, 800bf24 <pow+0x10c>
 800bf0c:	ec47 6b10 	vmov	d0, r6, r7
 800bf10:	f000 fe1c 	bl	800cb4c <rint>
 800bf14:	4632      	mov	r2, r6
 800bf16:	ec51 0b10 	vmov	r0, r1, d0
 800bf1a:	463b      	mov	r3, r7
 800bf1c:	f7f4 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d0c2      	beq.n	800beaa <pow+0x92>
 800bf24:	4d11      	ldr	r5, [pc, #68]	; (800bf6c <pow+0x154>)
 800bf26:	e79c      	b.n	800be62 <pow+0x4a>
 800bf28:	2200      	movs	r2, #0
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	4629      	mov	r1, r5
 800bf30:	f7f4 fdca 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d094      	beq.n	800be62 <pow+0x4a>
 800bf38:	ec49 8b10 	vmov	d0, r8, r9
 800bf3c:	f000 fdfb 	bl	800cb36 <finite>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d08e      	beq.n	800be62 <pow+0x4a>
 800bf44:	ec47 6b10 	vmov	d0, r6, r7
 800bf48:	f000 fdf5 	bl	800cb36 <finite>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d088      	beq.n	800be62 <pow+0x4a>
 800bf50:	f7fb fab0 	bl	80074b4 <__errno>
 800bf54:	2322      	movs	r3, #34	; 0x22
 800bf56:	6003      	str	r3, [r0, #0]
 800bf58:	2400      	movs	r4, #0
 800bf5a:	2500      	movs	r5, #0
 800bf5c:	e781      	b.n	800be62 <pow+0x4a>
 800bf5e:	4d04      	ldr	r5, [pc, #16]	; (800bf70 <pow+0x158>)
 800bf60:	2400      	movs	r4, #0
 800bf62:	e77e      	b.n	800be62 <pow+0x4a>
 800bf64:	20000344 	.word	0x20000344
 800bf68:	fff00000 	.word	0xfff00000
 800bf6c:	7ff00000 	.word	0x7ff00000
 800bf70:	3ff00000 	.word	0x3ff00000
 800bf74:	00000000 	.word	0x00000000

0800bf78 <__ieee754_pow>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	ed2d 8b06 	vpush	{d8-d10}
 800bf80:	b08d      	sub	sp, #52	; 0x34
 800bf82:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bf86:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800bf8a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800bf8e:	ea56 0100 	orrs.w	r1, r6, r0
 800bf92:	ec53 2b10 	vmov	r2, r3, d0
 800bf96:	f000 84d1 	beq.w	800c93c <__ieee754_pow+0x9c4>
 800bf9a:	497f      	ldr	r1, [pc, #508]	; (800c198 <__ieee754_pow+0x220>)
 800bf9c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800bfa0:	428c      	cmp	r4, r1
 800bfa2:	ee10 8a10 	vmov	r8, s0
 800bfa6:	4699      	mov	r9, r3
 800bfa8:	dc09      	bgt.n	800bfbe <__ieee754_pow+0x46>
 800bfaa:	d103      	bne.n	800bfb4 <__ieee754_pow+0x3c>
 800bfac:	b97a      	cbnz	r2, 800bfce <__ieee754_pow+0x56>
 800bfae:	42a6      	cmp	r6, r4
 800bfb0:	dd02      	ble.n	800bfb8 <__ieee754_pow+0x40>
 800bfb2:	e00c      	b.n	800bfce <__ieee754_pow+0x56>
 800bfb4:	428e      	cmp	r6, r1
 800bfb6:	dc02      	bgt.n	800bfbe <__ieee754_pow+0x46>
 800bfb8:	428e      	cmp	r6, r1
 800bfba:	d110      	bne.n	800bfde <__ieee754_pow+0x66>
 800bfbc:	b178      	cbz	r0, 800bfde <__ieee754_pow+0x66>
 800bfbe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bfc2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bfc6:	ea54 0308 	orrs.w	r3, r4, r8
 800bfca:	f000 84b7 	beq.w	800c93c <__ieee754_pow+0x9c4>
 800bfce:	4873      	ldr	r0, [pc, #460]	; (800c19c <__ieee754_pow+0x224>)
 800bfd0:	b00d      	add	sp, #52	; 0x34
 800bfd2:	ecbd 8b06 	vpop	{d8-d10}
 800bfd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfda:	f7ff b931 	b.w	800b240 <nan>
 800bfde:	f1b9 0f00 	cmp.w	r9, #0
 800bfe2:	da36      	bge.n	800c052 <__ieee754_pow+0xda>
 800bfe4:	496e      	ldr	r1, [pc, #440]	; (800c1a0 <__ieee754_pow+0x228>)
 800bfe6:	428e      	cmp	r6, r1
 800bfe8:	dc51      	bgt.n	800c08e <__ieee754_pow+0x116>
 800bfea:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800bfee:	428e      	cmp	r6, r1
 800bff0:	f340 84af 	ble.w	800c952 <__ieee754_pow+0x9da>
 800bff4:	1531      	asrs	r1, r6, #20
 800bff6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bffa:	2914      	cmp	r1, #20
 800bffc:	dd0f      	ble.n	800c01e <__ieee754_pow+0xa6>
 800bffe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c002:	fa20 fc01 	lsr.w	ip, r0, r1
 800c006:	fa0c f101 	lsl.w	r1, ip, r1
 800c00a:	4281      	cmp	r1, r0
 800c00c:	f040 84a1 	bne.w	800c952 <__ieee754_pow+0x9da>
 800c010:	f00c 0c01 	and.w	ip, ip, #1
 800c014:	f1cc 0102 	rsb	r1, ip, #2
 800c018:	9100      	str	r1, [sp, #0]
 800c01a:	b180      	cbz	r0, 800c03e <__ieee754_pow+0xc6>
 800c01c:	e059      	b.n	800c0d2 <__ieee754_pow+0x15a>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d155      	bne.n	800c0ce <__ieee754_pow+0x156>
 800c022:	f1c1 0114 	rsb	r1, r1, #20
 800c026:	fa46 fc01 	asr.w	ip, r6, r1
 800c02a:	fa0c f101 	lsl.w	r1, ip, r1
 800c02e:	42b1      	cmp	r1, r6
 800c030:	f040 848c 	bne.w	800c94c <__ieee754_pow+0x9d4>
 800c034:	f00c 0c01 	and.w	ip, ip, #1
 800c038:	f1cc 0102 	rsb	r1, ip, #2
 800c03c:	9100      	str	r1, [sp, #0]
 800c03e:	4959      	ldr	r1, [pc, #356]	; (800c1a4 <__ieee754_pow+0x22c>)
 800c040:	428e      	cmp	r6, r1
 800c042:	d12d      	bne.n	800c0a0 <__ieee754_pow+0x128>
 800c044:	2f00      	cmp	r7, #0
 800c046:	da79      	bge.n	800c13c <__ieee754_pow+0x1c4>
 800c048:	4956      	ldr	r1, [pc, #344]	; (800c1a4 <__ieee754_pow+0x22c>)
 800c04a:	2000      	movs	r0, #0
 800c04c:	f7f4 fbfe 	bl	800084c <__aeabi_ddiv>
 800c050:	e016      	b.n	800c080 <__ieee754_pow+0x108>
 800c052:	2100      	movs	r1, #0
 800c054:	9100      	str	r1, [sp, #0]
 800c056:	2800      	cmp	r0, #0
 800c058:	d13b      	bne.n	800c0d2 <__ieee754_pow+0x15a>
 800c05a:	494f      	ldr	r1, [pc, #316]	; (800c198 <__ieee754_pow+0x220>)
 800c05c:	428e      	cmp	r6, r1
 800c05e:	d1ee      	bne.n	800c03e <__ieee754_pow+0xc6>
 800c060:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c064:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c068:	ea53 0308 	orrs.w	r3, r3, r8
 800c06c:	f000 8466 	beq.w	800c93c <__ieee754_pow+0x9c4>
 800c070:	4b4d      	ldr	r3, [pc, #308]	; (800c1a8 <__ieee754_pow+0x230>)
 800c072:	429c      	cmp	r4, r3
 800c074:	dd0d      	ble.n	800c092 <__ieee754_pow+0x11a>
 800c076:	2f00      	cmp	r7, #0
 800c078:	f280 8464 	bge.w	800c944 <__ieee754_pow+0x9cc>
 800c07c:	2000      	movs	r0, #0
 800c07e:	2100      	movs	r1, #0
 800c080:	ec41 0b10 	vmov	d0, r0, r1
 800c084:	b00d      	add	sp, #52	; 0x34
 800c086:	ecbd 8b06 	vpop	{d8-d10}
 800c08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08e:	2102      	movs	r1, #2
 800c090:	e7e0      	b.n	800c054 <__ieee754_pow+0xdc>
 800c092:	2f00      	cmp	r7, #0
 800c094:	daf2      	bge.n	800c07c <__ieee754_pow+0x104>
 800c096:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c09a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c09e:	e7ef      	b.n	800c080 <__ieee754_pow+0x108>
 800c0a0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c0a4:	d104      	bne.n	800c0b0 <__ieee754_pow+0x138>
 800c0a6:	4610      	mov	r0, r2
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	f7f4 faa5 	bl	80005f8 <__aeabi_dmul>
 800c0ae:	e7e7      	b.n	800c080 <__ieee754_pow+0x108>
 800c0b0:	493e      	ldr	r1, [pc, #248]	; (800c1ac <__ieee754_pow+0x234>)
 800c0b2:	428f      	cmp	r7, r1
 800c0b4:	d10d      	bne.n	800c0d2 <__ieee754_pow+0x15a>
 800c0b6:	f1b9 0f00 	cmp.w	r9, #0
 800c0ba:	db0a      	blt.n	800c0d2 <__ieee754_pow+0x15a>
 800c0bc:	ec43 2b10 	vmov	d0, r2, r3
 800c0c0:	b00d      	add	sp, #52	; 0x34
 800c0c2:	ecbd 8b06 	vpop	{d8-d10}
 800c0c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ca:	f000 bc77 	b.w	800c9bc <__ieee754_sqrt>
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	9100      	str	r1, [sp, #0]
 800c0d2:	ec43 2b10 	vmov	d0, r2, r3
 800c0d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0da:	f000 fd23 	bl	800cb24 <fabs>
 800c0de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0e2:	ec51 0b10 	vmov	r0, r1, d0
 800c0e6:	f1b8 0f00 	cmp.w	r8, #0
 800c0ea:	d12a      	bne.n	800c142 <__ieee754_pow+0x1ca>
 800c0ec:	b12c      	cbz	r4, 800c0fa <__ieee754_pow+0x182>
 800c0ee:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c1a4 <__ieee754_pow+0x22c>
 800c0f2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c0f6:	45e6      	cmp	lr, ip
 800c0f8:	d123      	bne.n	800c142 <__ieee754_pow+0x1ca>
 800c0fa:	2f00      	cmp	r7, #0
 800c0fc:	da05      	bge.n	800c10a <__ieee754_pow+0x192>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	2000      	movs	r0, #0
 800c104:	4927      	ldr	r1, [pc, #156]	; (800c1a4 <__ieee754_pow+0x22c>)
 800c106:	f7f4 fba1 	bl	800084c <__aeabi_ddiv>
 800c10a:	f1b9 0f00 	cmp.w	r9, #0
 800c10e:	dab7      	bge.n	800c080 <__ieee754_pow+0x108>
 800c110:	9b00      	ldr	r3, [sp, #0]
 800c112:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c116:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c11a:	4323      	orrs	r3, r4
 800c11c:	d108      	bne.n	800c130 <__ieee754_pow+0x1b8>
 800c11e:	4602      	mov	r2, r0
 800c120:	460b      	mov	r3, r1
 800c122:	4610      	mov	r0, r2
 800c124:	4619      	mov	r1, r3
 800c126:	f7f4 f8af 	bl	8000288 <__aeabi_dsub>
 800c12a:	4602      	mov	r2, r0
 800c12c:	460b      	mov	r3, r1
 800c12e:	e78d      	b.n	800c04c <__ieee754_pow+0xd4>
 800c130:	9b00      	ldr	r3, [sp, #0]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d1a4      	bne.n	800c080 <__ieee754_pow+0x108>
 800c136:	4602      	mov	r2, r0
 800c138:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c13c:	4610      	mov	r0, r2
 800c13e:	4619      	mov	r1, r3
 800c140:	e79e      	b.n	800c080 <__ieee754_pow+0x108>
 800c142:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c146:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c14a:	950a      	str	r5, [sp, #40]	; 0x28
 800c14c:	9d00      	ldr	r5, [sp, #0]
 800c14e:	46ac      	mov	ip, r5
 800c150:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c152:	ea5c 0505 	orrs.w	r5, ip, r5
 800c156:	d0e4      	beq.n	800c122 <__ieee754_pow+0x1aa>
 800c158:	4b15      	ldr	r3, [pc, #84]	; (800c1b0 <__ieee754_pow+0x238>)
 800c15a:	429e      	cmp	r6, r3
 800c15c:	f340 80fc 	ble.w	800c358 <__ieee754_pow+0x3e0>
 800c160:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c164:	429e      	cmp	r6, r3
 800c166:	4b10      	ldr	r3, [pc, #64]	; (800c1a8 <__ieee754_pow+0x230>)
 800c168:	dd07      	ble.n	800c17a <__ieee754_pow+0x202>
 800c16a:	429c      	cmp	r4, r3
 800c16c:	dc0a      	bgt.n	800c184 <__ieee754_pow+0x20c>
 800c16e:	2f00      	cmp	r7, #0
 800c170:	da84      	bge.n	800c07c <__ieee754_pow+0x104>
 800c172:	a307      	add	r3, pc, #28	; (adr r3, 800c190 <__ieee754_pow+0x218>)
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	e795      	b.n	800c0a6 <__ieee754_pow+0x12e>
 800c17a:	429c      	cmp	r4, r3
 800c17c:	dbf7      	blt.n	800c16e <__ieee754_pow+0x1f6>
 800c17e:	4b09      	ldr	r3, [pc, #36]	; (800c1a4 <__ieee754_pow+0x22c>)
 800c180:	429c      	cmp	r4, r3
 800c182:	dd17      	ble.n	800c1b4 <__ieee754_pow+0x23c>
 800c184:	2f00      	cmp	r7, #0
 800c186:	dcf4      	bgt.n	800c172 <__ieee754_pow+0x1fa>
 800c188:	e778      	b.n	800c07c <__ieee754_pow+0x104>
 800c18a:	bf00      	nop
 800c18c:	f3af 8000 	nop.w
 800c190:	8800759c 	.word	0x8800759c
 800c194:	7e37e43c 	.word	0x7e37e43c
 800c198:	7ff00000 	.word	0x7ff00000
 800c19c:	0800d388 	.word	0x0800d388
 800c1a0:	433fffff 	.word	0x433fffff
 800c1a4:	3ff00000 	.word	0x3ff00000
 800c1a8:	3fefffff 	.word	0x3fefffff
 800c1ac:	3fe00000 	.word	0x3fe00000
 800c1b0:	41e00000 	.word	0x41e00000
 800c1b4:	4b64      	ldr	r3, [pc, #400]	; (800c348 <__ieee754_pow+0x3d0>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f7f4 f866 	bl	8000288 <__aeabi_dsub>
 800c1bc:	a356      	add	r3, pc, #344	; (adr r3, 800c318 <__ieee754_pow+0x3a0>)
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	460d      	mov	r5, r1
 800c1c6:	f7f4 fa17 	bl	80005f8 <__aeabi_dmul>
 800c1ca:	a355      	add	r3, pc, #340	; (adr r3, 800c320 <__ieee754_pow+0x3a8>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	4606      	mov	r6, r0
 800c1d2:	460f      	mov	r7, r1
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	f7f4 fa0e 	bl	80005f8 <__aeabi_dmul>
 800c1dc:	4b5b      	ldr	r3, [pc, #364]	; (800c34c <__ieee754_pow+0x3d4>)
 800c1de:	4682      	mov	sl, r0
 800c1e0:	468b      	mov	fp, r1
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	f7f4 fa06 	bl	80005f8 <__aeabi_dmul>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	a14d      	add	r1, pc, #308	; (adr r1, 800c328 <__ieee754_pow+0x3b0>)
 800c1f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1f6:	f7f4 f847 	bl	8000288 <__aeabi_dsub>
 800c1fa:	4622      	mov	r2, r4
 800c1fc:	462b      	mov	r3, r5
 800c1fe:	f7f4 f9fb 	bl	80005f8 <__aeabi_dmul>
 800c202:	4602      	mov	r2, r0
 800c204:	460b      	mov	r3, r1
 800c206:	2000      	movs	r0, #0
 800c208:	4951      	ldr	r1, [pc, #324]	; (800c350 <__ieee754_pow+0x3d8>)
 800c20a:	f7f4 f83d 	bl	8000288 <__aeabi_dsub>
 800c20e:	4622      	mov	r2, r4
 800c210:	4680      	mov	r8, r0
 800c212:	4689      	mov	r9, r1
 800c214:	462b      	mov	r3, r5
 800c216:	4620      	mov	r0, r4
 800c218:	4629      	mov	r1, r5
 800c21a:	f7f4 f9ed 	bl	80005f8 <__aeabi_dmul>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	4640      	mov	r0, r8
 800c224:	4649      	mov	r1, r9
 800c226:	f7f4 f9e7 	bl	80005f8 <__aeabi_dmul>
 800c22a:	a341      	add	r3, pc, #260	; (adr r3, 800c330 <__ieee754_pow+0x3b8>)
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	f7f4 f9e2 	bl	80005f8 <__aeabi_dmul>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	4650      	mov	r0, sl
 800c23a:	4659      	mov	r1, fp
 800c23c:	f7f4 f824 	bl	8000288 <__aeabi_dsub>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4680      	mov	r8, r0
 800c246:	4689      	mov	r9, r1
 800c248:	4630      	mov	r0, r6
 800c24a:	4639      	mov	r1, r7
 800c24c:	f7f4 f81e 	bl	800028c <__adddf3>
 800c250:	2400      	movs	r4, #0
 800c252:	4632      	mov	r2, r6
 800c254:	463b      	mov	r3, r7
 800c256:	4620      	mov	r0, r4
 800c258:	460d      	mov	r5, r1
 800c25a:	f7f4 f815 	bl	8000288 <__aeabi_dsub>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	4640      	mov	r0, r8
 800c264:	4649      	mov	r1, r9
 800c266:	f7f4 f80f 	bl	8000288 <__aeabi_dsub>
 800c26a:	9b00      	ldr	r3, [sp, #0]
 800c26c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c26e:	3b01      	subs	r3, #1
 800c270:	4313      	orrs	r3, r2
 800c272:	4682      	mov	sl, r0
 800c274:	468b      	mov	fp, r1
 800c276:	f040 81f1 	bne.w	800c65c <__ieee754_pow+0x6e4>
 800c27a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c338 <__ieee754_pow+0x3c0>
 800c27e:	eeb0 8a47 	vmov.f32	s16, s14
 800c282:	eef0 8a67 	vmov.f32	s17, s15
 800c286:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c28a:	2600      	movs	r6, #0
 800c28c:	4632      	mov	r2, r6
 800c28e:	463b      	mov	r3, r7
 800c290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c294:	f7f3 fff8 	bl	8000288 <__aeabi_dsub>
 800c298:	4622      	mov	r2, r4
 800c29a:	462b      	mov	r3, r5
 800c29c:	f7f4 f9ac 	bl	80005f8 <__aeabi_dmul>
 800c2a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2a4:	4680      	mov	r8, r0
 800c2a6:	4689      	mov	r9, r1
 800c2a8:	4650      	mov	r0, sl
 800c2aa:	4659      	mov	r1, fp
 800c2ac:	f7f4 f9a4 	bl	80005f8 <__aeabi_dmul>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4640      	mov	r0, r8
 800c2b6:	4649      	mov	r1, r9
 800c2b8:	f7f3 ffe8 	bl	800028c <__adddf3>
 800c2bc:	4632      	mov	r2, r6
 800c2be:	463b      	mov	r3, r7
 800c2c0:	4680      	mov	r8, r0
 800c2c2:	4689      	mov	r9, r1
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7f4 f996 	bl	80005f8 <__aeabi_dmul>
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	f7f3 ffd8 	bl	800028c <__adddf3>
 800c2dc:	4b1d      	ldr	r3, [pc, #116]	; (800c354 <__ieee754_pow+0x3dc>)
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	ec45 4b19 	vmov	d9, r4, r5
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	460f      	mov	r7, r1
 800c2e8:	468b      	mov	fp, r1
 800c2ea:	f340 82fe 	ble.w	800c8ea <__ieee754_pow+0x972>
 800c2ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c2f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c2f6:	4303      	orrs	r3, r0
 800c2f8:	f000 81f0 	beq.w	800c6dc <__ieee754_pow+0x764>
 800c2fc:	a310      	add	r3, pc, #64	; (adr r3, 800c340 <__ieee754_pow+0x3c8>)
 800c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c302:	ec51 0b18 	vmov	r0, r1, d8
 800c306:	f7f4 f977 	bl	80005f8 <__aeabi_dmul>
 800c30a:	a30d      	add	r3, pc, #52	; (adr r3, 800c340 <__ieee754_pow+0x3c8>)
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	e6cb      	b.n	800c0aa <__ieee754_pow+0x132>
 800c312:	bf00      	nop
 800c314:	f3af 8000 	nop.w
 800c318:	60000000 	.word	0x60000000
 800c31c:	3ff71547 	.word	0x3ff71547
 800c320:	f85ddf44 	.word	0xf85ddf44
 800c324:	3e54ae0b 	.word	0x3e54ae0b
 800c328:	55555555 	.word	0x55555555
 800c32c:	3fd55555 	.word	0x3fd55555
 800c330:	652b82fe 	.word	0x652b82fe
 800c334:	3ff71547 	.word	0x3ff71547
 800c338:	00000000 	.word	0x00000000
 800c33c:	bff00000 	.word	0xbff00000
 800c340:	8800759c 	.word	0x8800759c
 800c344:	7e37e43c 	.word	0x7e37e43c
 800c348:	3ff00000 	.word	0x3ff00000
 800c34c:	3fd00000 	.word	0x3fd00000
 800c350:	3fe00000 	.word	0x3fe00000
 800c354:	408fffff 	.word	0x408fffff
 800c358:	4bd7      	ldr	r3, [pc, #860]	; (800c6b8 <__ieee754_pow+0x740>)
 800c35a:	ea03 0309 	and.w	r3, r3, r9
 800c35e:	2200      	movs	r2, #0
 800c360:	b92b      	cbnz	r3, 800c36e <__ieee754_pow+0x3f6>
 800c362:	4bd6      	ldr	r3, [pc, #856]	; (800c6bc <__ieee754_pow+0x744>)
 800c364:	f7f4 f948 	bl	80005f8 <__aeabi_dmul>
 800c368:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c36c:	460c      	mov	r4, r1
 800c36e:	1523      	asrs	r3, r4, #20
 800c370:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c374:	4413      	add	r3, r2
 800c376:	9309      	str	r3, [sp, #36]	; 0x24
 800c378:	4bd1      	ldr	r3, [pc, #836]	; (800c6c0 <__ieee754_pow+0x748>)
 800c37a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c37e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c382:	429c      	cmp	r4, r3
 800c384:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c388:	dd08      	ble.n	800c39c <__ieee754_pow+0x424>
 800c38a:	4bce      	ldr	r3, [pc, #824]	; (800c6c4 <__ieee754_pow+0x74c>)
 800c38c:	429c      	cmp	r4, r3
 800c38e:	f340 8163 	ble.w	800c658 <__ieee754_pow+0x6e0>
 800c392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c394:	3301      	adds	r3, #1
 800c396:	9309      	str	r3, [sp, #36]	; 0x24
 800c398:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c39c:	2400      	movs	r4, #0
 800c39e:	00e3      	lsls	r3, r4, #3
 800c3a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3a2:	4bc9      	ldr	r3, [pc, #804]	; (800c6c8 <__ieee754_pow+0x750>)
 800c3a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3a8:	ed93 7b00 	vldr	d7, [r3]
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	ec53 2b17 	vmov	r2, r3, d7
 800c3b2:	eeb0 8a47 	vmov.f32	s16, s14
 800c3b6:	eef0 8a67 	vmov.f32	s17, s15
 800c3ba:	4682      	mov	sl, r0
 800c3bc:	f7f3 ff64 	bl	8000288 <__aeabi_dsub>
 800c3c0:	4652      	mov	r2, sl
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	460f      	mov	r7, r1
 800c3c6:	462b      	mov	r3, r5
 800c3c8:	ec51 0b18 	vmov	r0, r1, d8
 800c3cc:	f7f3 ff5e 	bl	800028c <__adddf3>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	49bd      	ldr	r1, [pc, #756]	; (800c6cc <__ieee754_pow+0x754>)
 800c3d8:	f7f4 fa38 	bl	800084c <__aeabi_ddiv>
 800c3dc:	ec41 0b19 	vmov	d9, r0, r1
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	4639      	mov	r1, r7
 800c3e8:	f7f4 f906 	bl	80005f8 <__aeabi_dmul>
 800c3ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c3f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c3f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	9304      	str	r3, [sp, #16]
 800c3fc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c400:	46ab      	mov	fp, r5
 800c402:	106d      	asrs	r5, r5, #1
 800c404:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c408:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c40c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c410:	2200      	movs	r2, #0
 800c412:	4640      	mov	r0, r8
 800c414:	4649      	mov	r1, r9
 800c416:	4614      	mov	r4, r2
 800c418:	461d      	mov	r5, r3
 800c41a:	f7f4 f8ed 	bl	80005f8 <__aeabi_dmul>
 800c41e:	4602      	mov	r2, r0
 800c420:	460b      	mov	r3, r1
 800c422:	4630      	mov	r0, r6
 800c424:	4639      	mov	r1, r7
 800c426:	f7f3 ff2f 	bl	8000288 <__aeabi_dsub>
 800c42a:	ec53 2b18 	vmov	r2, r3, d8
 800c42e:	4606      	mov	r6, r0
 800c430:	460f      	mov	r7, r1
 800c432:	4620      	mov	r0, r4
 800c434:	4629      	mov	r1, r5
 800c436:	f7f3 ff27 	bl	8000288 <__aeabi_dsub>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4650      	mov	r0, sl
 800c440:	4659      	mov	r1, fp
 800c442:	f7f3 ff21 	bl	8000288 <__aeabi_dsub>
 800c446:	4642      	mov	r2, r8
 800c448:	464b      	mov	r3, r9
 800c44a:	f7f4 f8d5 	bl	80005f8 <__aeabi_dmul>
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	4630      	mov	r0, r6
 800c454:	4639      	mov	r1, r7
 800c456:	f7f3 ff17 	bl	8000288 <__aeabi_dsub>
 800c45a:	ec53 2b19 	vmov	r2, r3, d9
 800c45e:	f7f4 f8cb 	bl	80005f8 <__aeabi_dmul>
 800c462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c466:	ec41 0b18 	vmov	d8, r0, r1
 800c46a:	4610      	mov	r0, r2
 800c46c:	4619      	mov	r1, r3
 800c46e:	f7f4 f8c3 	bl	80005f8 <__aeabi_dmul>
 800c472:	a37d      	add	r3, pc, #500	; (adr r3, 800c668 <__ieee754_pow+0x6f0>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	4604      	mov	r4, r0
 800c47a:	460d      	mov	r5, r1
 800c47c:	f7f4 f8bc 	bl	80005f8 <__aeabi_dmul>
 800c480:	a37b      	add	r3, pc, #492	; (adr r3, 800c670 <__ieee754_pow+0x6f8>)
 800c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c486:	f7f3 ff01 	bl	800028c <__adddf3>
 800c48a:	4622      	mov	r2, r4
 800c48c:	462b      	mov	r3, r5
 800c48e:	f7f4 f8b3 	bl	80005f8 <__aeabi_dmul>
 800c492:	a379      	add	r3, pc, #484	; (adr r3, 800c678 <__ieee754_pow+0x700>)
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f7f3 fef8 	bl	800028c <__adddf3>
 800c49c:	4622      	mov	r2, r4
 800c49e:	462b      	mov	r3, r5
 800c4a0:	f7f4 f8aa 	bl	80005f8 <__aeabi_dmul>
 800c4a4:	a376      	add	r3, pc, #472	; (adr r3, 800c680 <__ieee754_pow+0x708>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	f7f3 feef 	bl	800028c <__adddf3>
 800c4ae:	4622      	mov	r2, r4
 800c4b0:	462b      	mov	r3, r5
 800c4b2:	f7f4 f8a1 	bl	80005f8 <__aeabi_dmul>
 800c4b6:	a374      	add	r3, pc, #464	; (adr r3, 800c688 <__ieee754_pow+0x710>)
 800c4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4bc:	f7f3 fee6 	bl	800028c <__adddf3>
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	462b      	mov	r3, r5
 800c4c4:	f7f4 f898 	bl	80005f8 <__aeabi_dmul>
 800c4c8:	a371      	add	r3, pc, #452	; (adr r3, 800c690 <__ieee754_pow+0x718>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f3 fedd 	bl	800028c <__adddf3>
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	460f      	mov	r7, r1
 800c4d8:	462b      	mov	r3, r5
 800c4da:	4620      	mov	r0, r4
 800c4dc:	4629      	mov	r1, r5
 800c4de:	f7f4 f88b 	bl	80005f8 <__aeabi_dmul>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	4639      	mov	r1, r7
 800c4ea:	f7f4 f885 	bl	80005f8 <__aeabi_dmul>
 800c4ee:	4642      	mov	r2, r8
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	460d      	mov	r5, r1
 800c4f4:	464b      	mov	r3, r9
 800c4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4fa:	f7f3 fec7 	bl	800028c <__adddf3>
 800c4fe:	ec53 2b18 	vmov	r2, r3, d8
 800c502:	f7f4 f879 	bl	80005f8 <__aeabi_dmul>
 800c506:	4622      	mov	r2, r4
 800c508:	462b      	mov	r3, r5
 800c50a:	f7f3 febf 	bl	800028c <__adddf3>
 800c50e:	4642      	mov	r2, r8
 800c510:	4682      	mov	sl, r0
 800c512:	468b      	mov	fp, r1
 800c514:	464b      	mov	r3, r9
 800c516:	4640      	mov	r0, r8
 800c518:	4649      	mov	r1, r9
 800c51a:	f7f4 f86d 	bl	80005f8 <__aeabi_dmul>
 800c51e:	4b6c      	ldr	r3, [pc, #432]	; (800c6d0 <__ieee754_pow+0x758>)
 800c520:	2200      	movs	r2, #0
 800c522:	4606      	mov	r6, r0
 800c524:	460f      	mov	r7, r1
 800c526:	f7f3 feb1 	bl	800028c <__adddf3>
 800c52a:	4652      	mov	r2, sl
 800c52c:	465b      	mov	r3, fp
 800c52e:	f7f3 fead 	bl	800028c <__adddf3>
 800c532:	9c04      	ldr	r4, [sp, #16]
 800c534:	460d      	mov	r5, r1
 800c536:	4622      	mov	r2, r4
 800c538:	460b      	mov	r3, r1
 800c53a:	4640      	mov	r0, r8
 800c53c:	4649      	mov	r1, r9
 800c53e:	f7f4 f85b 	bl	80005f8 <__aeabi_dmul>
 800c542:	4b63      	ldr	r3, [pc, #396]	; (800c6d0 <__ieee754_pow+0x758>)
 800c544:	4680      	mov	r8, r0
 800c546:	4689      	mov	r9, r1
 800c548:	2200      	movs	r2, #0
 800c54a:	4620      	mov	r0, r4
 800c54c:	4629      	mov	r1, r5
 800c54e:	f7f3 fe9b 	bl	8000288 <__aeabi_dsub>
 800c552:	4632      	mov	r2, r6
 800c554:	463b      	mov	r3, r7
 800c556:	f7f3 fe97 	bl	8000288 <__aeabi_dsub>
 800c55a:	4602      	mov	r2, r0
 800c55c:	460b      	mov	r3, r1
 800c55e:	4650      	mov	r0, sl
 800c560:	4659      	mov	r1, fp
 800c562:	f7f3 fe91 	bl	8000288 <__aeabi_dsub>
 800c566:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c56a:	f7f4 f845 	bl	80005f8 <__aeabi_dmul>
 800c56e:	4622      	mov	r2, r4
 800c570:	4606      	mov	r6, r0
 800c572:	460f      	mov	r7, r1
 800c574:	462b      	mov	r3, r5
 800c576:	ec51 0b18 	vmov	r0, r1, d8
 800c57a:	f7f4 f83d 	bl	80005f8 <__aeabi_dmul>
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	4630      	mov	r0, r6
 800c584:	4639      	mov	r1, r7
 800c586:	f7f3 fe81 	bl	800028c <__adddf3>
 800c58a:	4606      	mov	r6, r0
 800c58c:	460f      	mov	r7, r1
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	4640      	mov	r0, r8
 800c594:	4649      	mov	r1, r9
 800c596:	f7f3 fe79 	bl	800028c <__adddf3>
 800c59a:	9c04      	ldr	r4, [sp, #16]
 800c59c:	a33e      	add	r3, pc, #248	; (adr r3, 800c698 <__ieee754_pow+0x720>)
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	460d      	mov	r5, r1
 800c5a6:	f7f4 f827 	bl	80005f8 <__aeabi_dmul>
 800c5aa:	4642      	mov	r2, r8
 800c5ac:	ec41 0b18 	vmov	d8, r0, r1
 800c5b0:	464b      	mov	r3, r9
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	f7f3 fe67 	bl	8000288 <__aeabi_dsub>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	460b      	mov	r3, r1
 800c5be:	4630      	mov	r0, r6
 800c5c0:	4639      	mov	r1, r7
 800c5c2:	f7f3 fe61 	bl	8000288 <__aeabi_dsub>
 800c5c6:	a336      	add	r3, pc, #216	; (adr r3, 800c6a0 <__ieee754_pow+0x728>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	f7f4 f814 	bl	80005f8 <__aeabi_dmul>
 800c5d0:	a335      	add	r3, pc, #212	; (adr r3, 800c6a8 <__ieee754_pow+0x730>)
 800c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	460f      	mov	r7, r1
 800c5da:	4620      	mov	r0, r4
 800c5dc:	4629      	mov	r1, r5
 800c5de:	f7f4 f80b 	bl	80005f8 <__aeabi_dmul>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	4639      	mov	r1, r7
 800c5ea:	f7f3 fe4f 	bl	800028c <__adddf3>
 800c5ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5f0:	4b38      	ldr	r3, [pc, #224]	; (800c6d4 <__ieee754_pow+0x75c>)
 800c5f2:	4413      	add	r3, r2
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	f7f3 fe48 	bl	800028c <__adddf3>
 800c5fc:	4682      	mov	sl, r0
 800c5fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c600:	468b      	mov	fp, r1
 800c602:	f7f3 ff8f 	bl	8000524 <__aeabi_i2d>
 800c606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c608:	4b33      	ldr	r3, [pc, #204]	; (800c6d8 <__ieee754_pow+0x760>)
 800c60a:	4413      	add	r3, r2
 800c60c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c610:	4606      	mov	r6, r0
 800c612:	460f      	mov	r7, r1
 800c614:	4652      	mov	r2, sl
 800c616:	465b      	mov	r3, fp
 800c618:	ec51 0b18 	vmov	r0, r1, d8
 800c61c:	f7f3 fe36 	bl	800028c <__adddf3>
 800c620:	4642      	mov	r2, r8
 800c622:	464b      	mov	r3, r9
 800c624:	f7f3 fe32 	bl	800028c <__adddf3>
 800c628:	4632      	mov	r2, r6
 800c62a:	463b      	mov	r3, r7
 800c62c:	f7f3 fe2e 	bl	800028c <__adddf3>
 800c630:	9c04      	ldr	r4, [sp, #16]
 800c632:	4632      	mov	r2, r6
 800c634:	463b      	mov	r3, r7
 800c636:	4620      	mov	r0, r4
 800c638:	460d      	mov	r5, r1
 800c63a:	f7f3 fe25 	bl	8000288 <__aeabi_dsub>
 800c63e:	4642      	mov	r2, r8
 800c640:	464b      	mov	r3, r9
 800c642:	f7f3 fe21 	bl	8000288 <__aeabi_dsub>
 800c646:	ec53 2b18 	vmov	r2, r3, d8
 800c64a:	f7f3 fe1d 	bl	8000288 <__aeabi_dsub>
 800c64e:	4602      	mov	r2, r0
 800c650:	460b      	mov	r3, r1
 800c652:	4650      	mov	r0, sl
 800c654:	4659      	mov	r1, fp
 800c656:	e606      	b.n	800c266 <__ieee754_pow+0x2ee>
 800c658:	2401      	movs	r4, #1
 800c65a:	e6a0      	b.n	800c39e <__ieee754_pow+0x426>
 800c65c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c6b0 <__ieee754_pow+0x738>
 800c660:	e60d      	b.n	800c27e <__ieee754_pow+0x306>
 800c662:	bf00      	nop
 800c664:	f3af 8000 	nop.w
 800c668:	4a454eef 	.word	0x4a454eef
 800c66c:	3fca7e28 	.word	0x3fca7e28
 800c670:	93c9db65 	.word	0x93c9db65
 800c674:	3fcd864a 	.word	0x3fcd864a
 800c678:	a91d4101 	.word	0xa91d4101
 800c67c:	3fd17460 	.word	0x3fd17460
 800c680:	518f264d 	.word	0x518f264d
 800c684:	3fd55555 	.word	0x3fd55555
 800c688:	db6fabff 	.word	0xdb6fabff
 800c68c:	3fdb6db6 	.word	0x3fdb6db6
 800c690:	33333303 	.word	0x33333303
 800c694:	3fe33333 	.word	0x3fe33333
 800c698:	e0000000 	.word	0xe0000000
 800c69c:	3feec709 	.word	0x3feec709
 800c6a0:	dc3a03fd 	.word	0xdc3a03fd
 800c6a4:	3feec709 	.word	0x3feec709
 800c6a8:	145b01f5 	.word	0x145b01f5
 800c6ac:	be3e2fe0 	.word	0xbe3e2fe0
 800c6b0:	00000000 	.word	0x00000000
 800c6b4:	3ff00000 	.word	0x3ff00000
 800c6b8:	7ff00000 	.word	0x7ff00000
 800c6bc:	43400000 	.word	0x43400000
 800c6c0:	0003988e 	.word	0x0003988e
 800c6c4:	000bb679 	.word	0x000bb679
 800c6c8:	0800d3f0 	.word	0x0800d3f0
 800c6cc:	3ff00000 	.word	0x3ff00000
 800c6d0:	40080000 	.word	0x40080000
 800c6d4:	0800d410 	.word	0x0800d410
 800c6d8:	0800d400 	.word	0x0800d400
 800c6dc:	a3b5      	add	r3, pc, #724	; (adr r3, 800c9b4 <__ieee754_pow+0xa3c>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	4640      	mov	r0, r8
 800c6e4:	4649      	mov	r1, r9
 800c6e6:	f7f3 fdd1 	bl	800028c <__adddf3>
 800c6ea:	4622      	mov	r2, r4
 800c6ec:	ec41 0b1a 	vmov	d10, r0, r1
 800c6f0:	462b      	mov	r3, r5
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	4639      	mov	r1, r7
 800c6f6:	f7f3 fdc7 	bl	8000288 <__aeabi_dsub>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	ec51 0b1a 	vmov	r0, r1, d10
 800c702:	f7f4 fa09 	bl	8000b18 <__aeabi_dcmpgt>
 800c706:	2800      	cmp	r0, #0
 800c708:	f47f adf8 	bne.w	800c2fc <__ieee754_pow+0x384>
 800c70c:	4aa4      	ldr	r2, [pc, #656]	; (800c9a0 <__ieee754_pow+0xa28>)
 800c70e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c712:	4293      	cmp	r3, r2
 800c714:	f340 810b 	ble.w	800c92e <__ieee754_pow+0x9b6>
 800c718:	151b      	asrs	r3, r3, #20
 800c71a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c71e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c722:	fa4a f303 	asr.w	r3, sl, r3
 800c726:	445b      	add	r3, fp
 800c728:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c72c:	4e9d      	ldr	r6, [pc, #628]	; (800c9a4 <__ieee754_pow+0xa2c>)
 800c72e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c732:	4116      	asrs	r6, r2
 800c734:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c738:	2000      	movs	r0, #0
 800c73a:	ea23 0106 	bic.w	r1, r3, r6
 800c73e:	f1c2 0214 	rsb	r2, r2, #20
 800c742:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c746:	fa4a fa02 	asr.w	sl, sl, r2
 800c74a:	f1bb 0f00 	cmp.w	fp, #0
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4620      	mov	r0, r4
 800c754:	4629      	mov	r1, r5
 800c756:	bfb8      	it	lt
 800c758:	f1ca 0a00 	rsblt	sl, sl, #0
 800c75c:	f7f3 fd94 	bl	8000288 <__aeabi_dsub>
 800c760:	ec41 0b19 	vmov	d9, r0, r1
 800c764:	4642      	mov	r2, r8
 800c766:	464b      	mov	r3, r9
 800c768:	ec51 0b19 	vmov	r0, r1, d9
 800c76c:	f7f3 fd8e 	bl	800028c <__adddf3>
 800c770:	2400      	movs	r4, #0
 800c772:	a379      	add	r3, pc, #484	; (adr r3, 800c958 <__ieee754_pow+0x9e0>)
 800c774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c778:	4620      	mov	r0, r4
 800c77a:	460d      	mov	r5, r1
 800c77c:	f7f3 ff3c 	bl	80005f8 <__aeabi_dmul>
 800c780:	ec53 2b19 	vmov	r2, r3, d9
 800c784:	4606      	mov	r6, r0
 800c786:	460f      	mov	r7, r1
 800c788:	4620      	mov	r0, r4
 800c78a:	4629      	mov	r1, r5
 800c78c:	f7f3 fd7c 	bl	8000288 <__aeabi_dsub>
 800c790:	4602      	mov	r2, r0
 800c792:	460b      	mov	r3, r1
 800c794:	4640      	mov	r0, r8
 800c796:	4649      	mov	r1, r9
 800c798:	f7f3 fd76 	bl	8000288 <__aeabi_dsub>
 800c79c:	a370      	add	r3, pc, #448	; (adr r3, 800c960 <__ieee754_pow+0x9e8>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	f7f3 ff29 	bl	80005f8 <__aeabi_dmul>
 800c7a6:	a370      	add	r3, pc, #448	; (adr r3, 800c968 <__ieee754_pow+0x9f0>)
 800c7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ac:	4680      	mov	r8, r0
 800c7ae:	4689      	mov	r9, r1
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	4629      	mov	r1, r5
 800c7b4:	f7f3 ff20 	bl	80005f8 <__aeabi_dmul>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	4640      	mov	r0, r8
 800c7be:	4649      	mov	r1, r9
 800c7c0:	f7f3 fd64 	bl	800028c <__adddf3>
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	460d      	mov	r5, r1
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	4639      	mov	r1, r7
 800c7d0:	f7f3 fd5c 	bl	800028c <__adddf3>
 800c7d4:	4632      	mov	r2, r6
 800c7d6:	463b      	mov	r3, r7
 800c7d8:	4680      	mov	r8, r0
 800c7da:	4689      	mov	r9, r1
 800c7dc:	f7f3 fd54 	bl	8000288 <__aeabi_dsub>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	f7f3 fd4e 	bl	8000288 <__aeabi_dsub>
 800c7ec:	4642      	mov	r2, r8
 800c7ee:	4606      	mov	r6, r0
 800c7f0:	460f      	mov	r7, r1
 800c7f2:	464b      	mov	r3, r9
 800c7f4:	4640      	mov	r0, r8
 800c7f6:	4649      	mov	r1, r9
 800c7f8:	f7f3 fefe 	bl	80005f8 <__aeabi_dmul>
 800c7fc:	a35c      	add	r3, pc, #368	; (adr r3, 800c970 <__ieee754_pow+0x9f8>)
 800c7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c802:	4604      	mov	r4, r0
 800c804:	460d      	mov	r5, r1
 800c806:	f7f3 fef7 	bl	80005f8 <__aeabi_dmul>
 800c80a:	a35b      	add	r3, pc, #364	; (adr r3, 800c978 <__ieee754_pow+0xa00>)
 800c80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c810:	f7f3 fd3a 	bl	8000288 <__aeabi_dsub>
 800c814:	4622      	mov	r2, r4
 800c816:	462b      	mov	r3, r5
 800c818:	f7f3 feee 	bl	80005f8 <__aeabi_dmul>
 800c81c:	a358      	add	r3, pc, #352	; (adr r3, 800c980 <__ieee754_pow+0xa08>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f7f3 fd33 	bl	800028c <__adddf3>
 800c826:	4622      	mov	r2, r4
 800c828:	462b      	mov	r3, r5
 800c82a:	f7f3 fee5 	bl	80005f8 <__aeabi_dmul>
 800c82e:	a356      	add	r3, pc, #344	; (adr r3, 800c988 <__ieee754_pow+0xa10>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	f7f3 fd28 	bl	8000288 <__aeabi_dsub>
 800c838:	4622      	mov	r2, r4
 800c83a:	462b      	mov	r3, r5
 800c83c:	f7f3 fedc 	bl	80005f8 <__aeabi_dmul>
 800c840:	a353      	add	r3, pc, #332	; (adr r3, 800c990 <__ieee754_pow+0xa18>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	f7f3 fd21 	bl	800028c <__adddf3>
 800c84a:	4622      	mov	r2, r4
 800c84c:	462b      	mov	r3, r5
 800c84e:	f7f3 fed3 	bl	80005f8 <__aeabi_dmul>
 800c852:	4602      	mov	r2, r0
 800c854:	460b      	mov	r3, r1
 800c856:	4640      	mov	r0, r8
 800c858:	4649      	mov	r1, r9
 800c85a:	f7f3 fd15 	bl	8000288 <__aeabi_dsub>
 800c85e:	4604      	mov	r4, r0
 800c860:	460d      	mov	r5, r1
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f3 fec5 	bl	80005f8 <__aeabi_dmul>
 800c86e:	2200      	movs	r2, #0
 800c870:	ec41 0b19 	vmov	d9, r0, r1
 800c874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c878:	4620      	mov	r0, r4
 800c87a:	4629      	mov	r1, r5
 800c87c:	f7f3 fd04 	bl	8000288 <__aeabi_dsub>
 800c880:	4602      	mov	r2, r0
 800c882:	460b      	mov	r3, r1
 800c884:	ec51 0b19 	vmov	r0, r1, d9
 800c888:	f7f3 ffe0 	bl	800084c <__aeabi_ddiv>
 800c88c:	4632      	mov	r2, r6
 800c88e:	4604      	mov	r4, r0
 800c890:	460d      	mov	r5, r1
 800c892:	463b      	mov	r3, r7
 800c894:	4640      	mov	r0, r8
 800c896:	4649      	mov	r1, r9
 800c898:	f7f3 feae 	bl	80005f8 <__aeabi_dmul>
 800c89c:	4632      	mov	r2, r6
 800c89e:	463b      	mov	r3, r7
 800c8a0:	f7f3 fcf4 	bl	800028c <__adddf3>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	f7f3 fcec 	bl	8000288 <__aeabi_dsub>
 800c8b0:	4642      	mov	r2, r8
 800c8b2:	464b      	mov	r3, r9
 800c8b4:	f7f3 fce8 	bl	8000288 <__aeabi_dsub>
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	493a      	ldr	r1, [pc, #232]	; (800c9a8 <__ieee754_pow+0xa30>)
 800c8be:	2000      	movs	r0, #0
 800c8c0:	f7f3 fce2 	bl	8000288 <__aeabi_dsub>
 800c8c4:	e9cd 0100 	strd	r0, r1, [sp]
 800c8c8:	9b01      	ldr	r3, [sp, #4]
 800c8ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c8ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8d2:	da2f      	bge.n	800c934 <__ieee754_pow+0x9bc>
 800c8d4:	4650      	mov	r0, sl
 800c8d6:	ed9d 0b00 	vldr	d0, [sp]
 800c8da:	f000 f9c1 	bl	800cc60 <scalbn>
 800c8de:	ec51 0b10 	vmov	r0, r1, d0
 800c8e2:	ec53 2b18 	vmov	r2, r3, d8
 800c8e6:	f7ff bbe0 	b.w	800c0aa <__ieee754_pow+0x132>
 800c8ea:	4b30      	ldr	r3, [pc, #192]	; (800c9ac <__ieee754_pow+0xa34>)
 800c8ec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c8f0:	429e      	cmp	r6, r3
 800c8f2:	f77f af0b 	ble.w	800c70c <__ieee754_pow+0x794>
 800c8f6:	4b2e      	ldr	r3, [pc, #184]	; (800c9b0 <__ieee754_pow+0xa38>)
 800c8f8:	440b      	add	r3, r1
 800c8fa:	4303      	orrs	r3, r0
 800c8fc:	d00b      	beq.n	800c916 <__ieee754_pow+0x99e>
 800c8fe:	a326      	add	r3, pc, #152	; (adr r3, 800c998 <__ieee754_pow+0xa20>)
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	ec51 0b18 	vmov	r0, r1, d8
 800c908:	f7f3 fe76 	bl	80005f8 <__aeabi_dmul>
 800c90c:	a322      	add	r3, pc, #136	; (adr r3, 800c998 <__ieee754_pow+0xa20>)
 800c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c912:	f7ff bbca 	b.w	800c0aa <__ieee754_pow+0x132>
 800c916:	4622      	mov	r2, r4
 800c918:	462b      	mov	r3, r5
 800c91a:	f7f3 fcb5 	bl	8000288 <__aeabi_dsub>
 800c91e:	4642      	mov	r2, r8
 800c920:	464b      	mov	r3, r9
 800c922:	f7f4 f8ef 	bl	8000b04 <__aeabi_dcmpge>
 800c926:	2800      	cmp	r0, #0
 800c928:	f43f aef0 	beq.w	800c70c <__ieee754_pow+0x794>
 800c92c:	e7e7      	b.n	800c8fe <__ieee754_pow+0x986>
 800c92e:	f04f 0a00 	mov.w	sl, #0
 800c932:	e717      	b.n	800c764 <__ieee754_pow+0x7ec>
 800c934:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c938:	4619      	mov	r1, r3
 800c93a:	e7d2      	b.n	800c8e2 <__ieee754_pow+0x96a>
 800c93c:	491a      	ldr	r1, [pc, #104]	; (800c9a8 <__ieee754_pow+0xa30>)
 800c93e:	2000      	movs	r0, #0
 800c940:	f7ff bb9e 	b.w	800c080 <__ieee754_pow+0x108>
 800c944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c948:	f7ff bb9a 	b.w	800c080 <__ieee754_pow+0x108>
 800c94c:	9000      	str	r0, [sp, #0]
 800c94e:	f7ff bb76 	b.w	800c03e <__ieee754_pow+0xc6>
 800c952:	2100      	movs	r1, #0
 800c954:	f7ff bb60 	b.w	800c018 <__ieee754_pow+0xa0>
 800c958:	00000000 	.word	0x00000000
 800c95c:	3fe62e43 	.word	0x3fe62e43
 800c960:	fefa39ef 	.word	0xfefa39ef
 800c964:	3fe62e42 	.word	0x3fe62e42
 800c968:	0ca86c39 	.word	0x0ca86c39
 800c96c:	be205c61 	.word	0xbe205c61
 800c970:	72bea4d0 	.word	0x72bea4d0
 800c974:	3e663769 	.word	0x3e663769
 800c978:	c5d26bf1 	.word	0xc5d26bf1
 800c97c:	3ebbbd41 	.word	0x3ebbbd41
 800c980:	af25de2c 	.word	0xaf25de2c
 800c984:	3f11566a 	.word	0x3f11566a
 800c988:	16bebd93 	.word	0x16bebd93
 800c98c:	3f66c16c 	.word	0x3f66c16c
 800c990:	5555553e 	.word	0x5555553e
 800c994:	3fc55555 	.word	0x3fc55555
 800c998:	c2f8f359 	.word	0xc2f8f359
 800c99c:	01a56e1f 	.word	0x01a56e1f
 800c9a0:	3fe00000 	.word	0x3fe00000
 800c9a4:	000fffff 	.word	0x000fffff
 800c9a8:	3ff00000 	.word	0x3ff00000
 800c9ac:	4090cbff 	.word	0x4090cbff
 800c9b0:	3f6f3400 	.word	0x3f6f3400
 800c9b4:	652b82fe 	.word	0x652b82fe
 800c9b8:	3c971547 	.word	0x3c971547

0800c9bc <__ieee754_sqrt>:
 800c9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c0:	ec55 4b10 	vmov	r4, r5, d0
 800c9c4:	4e56      	ldr	r6, [pc, #344]	; (800cb20 <__ieee754_sqrt+0x164>)
 800c9c6:	43ae      	bics	r6, r5
 800c9c8:	ee10 0a10 	vmov	r0, s0
 800c9cc:	ee10 3a10 	vmov	r3, s0
 800c9d0:	4629      	mov	r1, r5
 800c9d2:	462a      	mov	r2, r5
 800c9d4:	d110      	bne.n	800c9f8 <__ieee754_sqrt+0x3c>
 800c9d6:	ee10 2a10 	vmov	r2, s0
 800c9da:	462b      	mov	r3, r5
 800c9dc:	f7f3 fe0c 	bl	80005f8 <__aeabi_dmul>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	f7f3 fc50 	bl	800028c <__adddf3>
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	460d      	mov	r5, r1
 800c9f0:	ec45 4b10 	vmov	d0, r4, r5
 800c9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f8:	2d00      	cmp	r5, #0
 800c9fa:	dc10      	bgt.n	800ca1e <__ieee754_sqrt+0x62>
 800c9fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca00:	4330      	orrs	r0, r6
 800ca02:	d0f5      	beq.n	800c9f0 <__ieee754_sqrt+0x34>
 800ca04:	b15d      	cbz	r5, 800ca1e <__ieee754_sqrt+0x62>
 800ca06:	ee10 2a10 	vmov	r2, s0
 800ca0a:	462b      	mov	r3, r5
 800ca0c:	ee10 0a10 	vmov	r0, s0
 800ca10:	f7f3 fc3a 	bl	8000288 <__aeabi_dsub>
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	f7f3 ff18 	bl	800084c <__aeabi_ddiv>
 800ca1c:	e7e6      	b.n	800c9ec <__ieee754_sqrt+0x30>
 800ca1e:	1509      	asrs	r1, r1, #20
 800ca20:	d076      	beq.n	800cb10 <__ieee754_sqrt+0x154>
 800ca22:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ca26:	07ce      	lsls	r6, r1, #31
 800ca28:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ca2c:	bf5e      	ittt	pl
 800ca2e:	0fda      	lsrpl	r2, r3, #31
 800ca30:	005b      	lslpl	r3, r3, #1
 800ca32:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ca36:	0fda      	lsrs	r2, r3, #31
 800ca38:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ca3c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ca40:	2000      	movs	r0, #0
 800ca42:	106d      	asrs	r5, r5, #1
 800ca44:	005b      	lsls	r3, r3, #1
 800ca46:	f04f 0e16 	mov.w	lr, #22
 800ca4a:	4684      	mov	ip, r0
 800ca4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca50:	eb0c 0401 	add.w	r4, ip, r1
 800ca54:	4294      	cmp	r4, r2
 800ca56:	bfde      	ittt	le
 800ca58:	1b12      	suble	r2, r2, r4
 800ca5a:	eb04 0c01 	addle.w	ip, r4, r1
 800ca5e:	1840      	addle	r0, r0, r1
 800ca60:	0052      	lsls	r2, r2, #1
 800ca62:	f1be 0e01 	subs.w	lr, lr, #1
 800ca66:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ca6a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ca6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca72:	d1ed      	bne.n	800ca50 <__ieee754_sqrt+0x94>
 800ca74:	4671      	mov	r1, lr
 800ca76:	2720      	movs	r7, #32
 800ca78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ca7c:	4562      	cmp	r2, ip
 800ca7e:	eb04 060e 	add.w	r6, r4, lr
 800ca82:	dc02      	bgt.n	800ca8a <__ieee754_sqrt+0xce>
 800ca84:	d113      	bne.n	800caae <__ieee754_sqrt+0xf2>
 800ca86:	429e      	cmp	r6, r3
 800ca88:	d811      	bhi.n	800caae <__ieee754_sqrt+0xf2>
 800ca8a:	2e00      	cmp	r6, #0
 800ca8c:	eb06 0e04 	add.w	lr, r6, r4
 800ca90:	da43      	bge.n	800cb1a <__ieee754_sqrt+0x15e>
 800ca92:	f1be 0f00 	cmp.w	lr, #0
 800ca96:	db40      	blt.n	800cb1a <__ieee754_sqrt+0x15e>
 800ca98:	f10c 0801 	add.w	r8, ip, #1
 800ca9c:	eba2 020c 	sub.w	r2, r2, ip
 800caa0:	429e      	cmp	r6, r3
 800caa2:	bf88      	it	hi
 800caa4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800caa8:	1b9b      	subs	r3, r3, r6
 800caaa:	4421      	add	r1, r4
 800caac:	46c4      	mov	ip, r8
 800caae:	0052      	lsls	r2, r2, #1
 800cab0:	3f01      	subs	r7, #1
 800cab2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cab6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800caba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cabe:	d1dd      	bne.n	800ca7c <__ieee754_sqrt+0xc0>
 800cac0:	4313      	orrs	r3, r2
 800cac2:	d006      	beq.n	800cad2 <__ieee754_sqrt+0x116>
 800cac4:	1c4c      	adds	r4, r1, #1
 800cac6:	bf13      	iteet	ne
 800cac8:	3101      	addne	r1, #1
 800caca:	3001      	addeq	r0, #1
 800cacc:	4639      	moveq	r1, r7
 800cace:	f021 0101 	bicne.w	r1, r1, #1
 800cad2:	1043      	asrs	r3, r0, #1
 800cad4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cad8:	0849      	lsrs	r1, r1, #1
 800cada:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cade:	07c2      	lsls	r2, r0, #31
 800cae0:	bf48      	it	mi
 800cae2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cae6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800caea:	460c      	mov	r4, r1
 800caec:	463d      	mov	r5, r7
 800caee:	e77f      	b.n	800c9f0 <__ieee754_sqrt+0x34>
 800caf0:	0ada      	lsrs	r2, r3, #11
 800caf2:	3815      	subs	r0, #21
 800caf4:	055b      	lsls	r3, r3, #21
 800caf6:	2a00      	cmp	r2, #0
 800caf8:	d0fa      	beq.n	800caf0 <__ieee754_sqrt+0x134>
 800cafa:	02d7      	lsls	r7, r2, #11
 800cafc:	d50a      	bpl.n	800cb14 <__ieee754_sqrt+0x158>
 800cafe:	f1c1 0420 	rsb	r4, r1, #32
 800cb02:	fa23 f404 	lsr.w	r4, r3, r4
 800cb06:	1e4d      	subs	r5, r1, #1
 800cb08:	408b      	lsls	r3, r1
 800cb0a:	4322      	orrs	r2, r4
 800cb0c:	1b41      	subs	r1, r0, r5
 800cb0e:	e788      	b.n	800ca22 <__ieee754_sqrt+0x66>
 800cb10:	4608      	mov	r0, r1
 800cb12:	e7f0      	b.n	800caf6 <__ieee754_sqrt+0x13a>
 800cb14:	0052      	lsls	r2, r2, #1
 800cb16:	3101      	adds	r1, #1
 800cb18:	e7ef      	b.n	800cafa <__ieee754_sqrt+0x13e>
 800cb1a:	46e0      	mov	r8, ip
 800cb1c:	e7be      	b.n	800ca9c <__ieee754_sqrt+0xe0>
 800cb1e:	bf00      	nop
 800cb20:	7ff00000 	.word	0x7ff00000

0800cb24 <fabs>:
 800cb24:	ec51 0b10 	vmov	r0, r1, d0
 800cb28:	ee10 2a10 	vmov	r2, s0
 800cb2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb30:	ec43 2b10 	vmov	d0, r2, r3
 800cb34:	4770      	bx	lr

0800cb36 <finite>:
 800cb36:	b082      	sub	sp, #8
 800cb38:	ed8d 0b00 	vstr	d0, [sp]
 800cb3c:	9801      	ldr	r0, [sp, #4]
 800cb3e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cb42:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cb46:	0fc0      	lsrs	r0, r0, #31
 800cb48:	b002      	add	sp, #8
 800cb4a:	4770      	bx	lr

0800cb4c <rint>:
 800cb4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb4e:	ec51 0b10 	vmov	r0, r1, d0
 800cb52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cb56:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cb5a:	2e13      	cmp	r6, #19
 800cb5c:	ee10 4a10 	vmov	r4, s0
 800cb60:	460b      	mov	r3, r1
 800cb62:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800cb66:	dc58      	bgt.n	800cc1a <rint+0xce>
 800cb68:	2e00      	cmp	r6, #0
 800cb6a:	da2b      	bge.n	800cbc4 <rint+0x78>
 800cb6c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cb70:	4302      	orrs	r2, r0
 800cb72:	d023      	beq.n	800cbbc <rint+0x70>
 800cb74:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cb78:	4302      	orrs	r2, r0
 800cb7a:	4254      	negs	r4, r2
 800cb7c:	4314      	orrs	r4, r2
 800cb7e:	0c4b      	lsrs	r3, r1, #17
 800cb80:	0b24      	lsrs	r4, r4, #12
 800cb82:	045b      	lsls	r3, r3, #17
 800cb84:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cb88:	ea44 0103 	orr.w	r1, r4, r3
 800cb8c:	4b32      	ldr	r3, [pc, #200]	; (800cc58 <rint+0x10c>)
 800cb8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cb92:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cb96:	4602      	mov	r2, r0
 800cb98:	460b      	mov	r3, r1
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	4639      	mov	r1, r7
 800cb9e:	f7f3 fb75 	bl	800028c <__adddf3>
 800cba2:	e9cd 0100 	strd	r0, r1, [sp]
 800cba6:	463b      	mov	r3, r7
 800cba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbac:	4632      	mov	r2, r6
 800cbae:	f7f3 fb6b 	bl	8000288 <__aeabi_dsub>
 800cbb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cbb6:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cbba:	4639      	mov	r1, r7
 800cbbc:	ec41 0b10 	vmov	d0, r0, r1
 800cbc0:	b003      	add	sp, #12
 800cbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc4:	4a25      	ldr	r2, [pc, #148]	; (800cc5c <rint+0x110>)
 800cbc6:	4132      	asrs	r2, r6
 800cbc8:	ea01 0702 	and.w	r7, r1, r2
 800cbcc:	4307      	orrs	r7, r0
 800cbce:	d0f5      	beq.n	800cbbc <rint+0x70>
 800cbd0:	0851      	lsrs	r1, r2, #1
 800cbd2:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800cbd6:	4314      	orrs	r4, r2
 800cbd8:	d00c      	beq.n	800cbf4 <rint+0xa8>
 800cbda:	ea23 0201 	bic.w	r2, r3, r1
 800cbde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cbe2:	2e13      	cmp	r6, #19
 800cbe4:	fa43 f606 	asr.w	r6, r3, r6
 800cbe8:	bf0c      	ite	eq
 800cbea:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cbee:	2400      	movne	r4, #0
 800cbf0:	ea42 0306 	orr.w	r3, r2, r6
 800cbf4:	4918      	ldr	r1, [pc, #96]	; (800cc58 <rint+0x10c>)
 800cbf6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cbfa:	4622      	mov	r2, r4
 800cbfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc00:	4620      	mov	r0, r4
 800cc02:	4629      	mov	r1, r5
 800cc04:	f7f3 fb42 	bl	800028c <__adddf3>
 800cc08:	e9cd 0100 	strd	r0, r1, [sp]
 800cc0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc10:	4622      	mov	r2, r4
 800cc12:	462b      	mov	r3, r5
 800cc14:	f7f3 fb38 	bl	8000288 <__aeabi_dsub>
 800cc18:	e7d0      	b.n	800cbbc <rint+0x70>
 800cc1a:	2e33      	cmp	r6, #51	; 0x33
 800cc1c:	dd07      	ble.n	800cc2e <rint+0xe2>
 800cc1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cc22:	d1cb      	bne.n	800cbbc <rint+0x70>
 800cc24:	ee10 2a10 	vmov	r2, s0
 800cc28:	f7f3 fb30 	bl	800028c <__adddf3>
 800cc2c:	e7c6      	b.n	800cbbc <rint+0x70>
 800cc2e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cc32:	f04f 36ff 	mov.w	r6, #4294967295
 800cc36:	40d6      	lsrs	r6, r2
 800cc38:	4230      	tst	r0, r6
 800cc3a:	d0bf      	beq.n	800cbbc <rint+0x70>
 800cc3c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800cc40:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800cc44:	bf1f      	itttt	ne
 800cc46:	ea24 0101 	bicne.w	r1, r4, r1
 800cc4a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cc4e:	fa44 f202 	asrne.w	r2, r4, r2
 800cc52:	ea41 0402 	orrne.w	r4, r1, r2
 800cc56:	e7cd      	b.n	800cbf4 <rint+0xa8>
 800cc58:	0800d420 	.word	0x0800d420
 800cc5c:	000fffff 	.word	0x000fffff

0800cc60 <scalbn>:
 800cc60:	b570      	push	{r4, r5, r6, lr}
 800cc62:	ec55 4b10 	vmov	r4, r5, d0
 800cc66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	462b      	mov	r3, r5
 800cc6e:	b99a      	cbnz	r2, 800cc98 <scalbn+0x38>
 800cc70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cc74:	4323      	orrs	r3, r4
 800cc76:	d036      	beq.n	800cce6 <scalbn+0x86>
 800cc78:	4b39      	ldr	r3, [pc, #228]	; (800cd60 <scalbn+0x100>)
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	ee10 0a10 	vmov	r0, s0
 800cc80:	2200      	movs	r2, #0
 800cc82:	f7f3 fcb9 	bl	80005f8 <__aeabi_dmul>
 800cc86:	4b37      	ldr	r3, [pc, #220]	; (800cd64 <scalbn+0x104>)
 800cc88:	429e      	cmp	r6, r3
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	460d      	mov	r5, r1
 800cc8e:	da10      	bge.n	800ccb2 <scalbn+0x52>
 800cc90:	a32b      	add	r3, pc, #172	; (adr r3, 800cd40 <scalbn+0xe0>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	e03a      	b.n	800cd0e <scalbn+0xae>
 800cc98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cc9c:	428a      	cmp	r2, r1
 800cc9e:	d10c      	bne.n	800ccba <scalbn+0x5a>
 800cca0:	ee10 2a10 	vmov	r2, s0
 800cca4:	4620      	mov	r0, r4
 800cca6:	4629      	mov	r1, r5
 800cca8:	f7f3 faf0 	bl	800028c <__adddf3>
 800ccac:	4604      	mov	r4, r0
 800ccae:	460d      	mov	r5, r1
 800ccb0:	e019      	b.n	800cce6 <scalbn+0x86>
 800ccb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	3a36      	subs	r2, #54	; 0x36
 800ccba:	4432      	add	r2, r6
 800ccbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ccc0:	428a      	cmp	r2, r1
 800ccc2:	dd08      	ble.n	800ccd6 <scalbn+0x76>
 800ccc4:	2d00      	cmp	r5, #0
 800ccc6:	a120      	add	r1, pc, #128	; (adr r1, 800cd48 <scalbn+0xe8>)
 800ccc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cccc:	da1c      	bge.n	800cd08 <scalbn+0xa8>
 800ccce:	a120      	add	r1, pc, #128	; (adr r1, 800cd50 <scalbn+0xf0>)
 800ccd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccd4:	e018      	b.n	800cd08 <scalbn+0xa8>
 800ccd6:	2a00      	cmp	r2, #0
 800ccd8:	dd08      	ble.n	800ccec <scalbn+0x8c>
 800ccda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ccde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cce2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cce6:	ec45 4b10 	vmov	d0, r4, r5
 800ccea:	bd70      	pop	{r4, r5, r6, pc}
 800ccec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ccf0:	da19      	bge.n	800cd26 <scalbn+0xc6>
 800ccf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ccf6:	429e      	cmp	r6, r3
 800ccf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ccfc:	dd0a      	ble.n	800cd14 <scalbn+0xb4>
 800ccfe:	a112      	add	r1, pc, #72	; (adr r1, 800cd48 <scalbn+0xe8>)
 800cd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1e2      	bne.n	800ccce <scalbn+0x6e>
 800cd08:	a30f      	add	r3, pc, #60	; (adr r3, 800cd48 <scalbn+0xe8>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	f7f3 fc73 	bl	80005f8 <__aeabi_dmul>
 800cd12:	e7cb      	b.n	800ccac <scalbn+0x4c>
 800cd14:	a10a      	add	r1, pc, #40	; (adr r1, 800cd40 <scalbn+0xe0>)
 800cd16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0b8      	beq.n	800cc90 <scalbn+0x30>
 800cd1e:	a10e      	add	r1, pc, #56	; (adr r1, 800cd58 <scalbn+0xf8>)
 800cd20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd24:	e7b4      	b.n	800cc90 <scalbn+0x30>
 800cd26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd2a:	3236      	adds	r2, #54	; 0x36
 800cd2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cd34:	4620      	mov	r0, r4
 800cd36:	4b0c      	ldr	r3, [pc, #48]	; (800cd68 <scalbn+0x108>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	e7e8      	b.n	800cd0e <scalbn+0xae>
 800cd3c:	f3af 8000 	nop.w
 800cd40:	c2f8f359 	.word	0xc2f8f359
 800cd44:	01a56e1f 	.word	0x01a56e1f
 800cd48:	8800759c 	.word	0x8800759c
 800cd4c:	7e37e43c 	.word	0x7e37e43c
 800cd50:	8800759c 	.word	0x8800759c
 800cd54:	fe37e43c 	.word	0xfe37e43c
 800cd58:	c2f8f359 	.word	0xc2f8f359
 800cd5c:	81a56e1f 	.word	0x81a56e1f
 800cd60:	43500000 	.word	0x43500000
 800cd64:	ffff3cb0 	.word	0xffff3cb0
 800cd68:	3c900000 	.word	0x3c900000

0800cd6c <_init>:
 800cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6e:	bf00      	nop
 800cd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd72:	bc08      	pop	{r3}
 800cd74:	469e      	mov	lr, r3
 800cd76:	4770      	bx	lr

0800cd78 <_fini>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	bf00      	nop
 800cd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7e:	bc08      	pop	{r3}
 800cd80:	469e      	mov	lr, r3
 800cd82:	4770      	bx	lr
