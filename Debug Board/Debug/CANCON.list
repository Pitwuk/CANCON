
CANCON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c374  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800c508  0800c508  0001c508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbb0  0800cbb0  00020344  2**0
                  CONTENTS
  4 .ARM          00000000  0800cbb0  0800cbb0  00020344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cbb0  0800cbb0  00020344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbb0  0800cbb0  0001cbb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbb4  0800cbb4  0001cbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0800cbb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000348  0800cefc  00020348  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  0800cefc  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114df  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a8  00000000  00000000  00031853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00034200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  000351e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d389  00000000  00000000  00036088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011efd  00000000  00000000  00053411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a890a  00000000  00000000  0006530e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010dc18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a4  00000000  00000000  0010dc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000348 	.word	0x20000348
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4ec 	.word	0x0800c4ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	0800c4ec 	.word	0x0800c4ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <delay>:
#define timer htim2


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <delay+0x30>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000d06:	bf00      	nop
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <delay+0x30>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3f9      	bcc.n	8000d08 <delay+0x14>
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200004f0 	.word	0x200004f0

08000d28 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d40:	f003 fef4 	bl	8004b2c <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	461a      	mov	r2, r3
 8000d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <send_to_lcd+0xa0>)
 8000d58:	f003 fee8 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <send_to_lcd+0xa0>)
 8000d6e:	f003 fedd 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	085b      	lsrs	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	2102      	movs	r1, #2
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <send_to_lcd+0xa4>)
 8000d84:	f003 fed2 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	2101      	movs	r1, #1
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <send_to_lcd+0xa4>)
 8000d96:	f003 fec9 	bl	8004b2c <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f003 fec3 	bl	8004b2c <HAL_GPIO_WritePin>
	delay (20);
 8000da6:	2014      	movs	r0, #20
 8000da8:	f7ff ffa4 	bl	8000cf4 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f003 feba 	bl	8004b2c <HAL_GPIO_WritePin>
	delay (20);
 8000db8:	2014      	movs	r0, #20
 8000dba:	f7ff ff9b 	bl	8000cf4 <delay>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	48001000 	.word	0x48001000
 8000dcc:	48000400 	.word	0x48000400

08000dd0 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff9f 	bl	8000d28 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff96 	bl	8000d28 <send_to_lcd>
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2101      	movs	r1, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff85 	bl	8000d28 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff7c 	bl	8000d28 <send_to_lcd>
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    switch (row)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <lcd_put_cur+0x18>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d005      	beq.n	8000e5a <lcd_put_cur+0x22>
 8000e4e:	e009      	b.n	8000e64 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e56:	603b      	str	r3, [r7, #0]
            break;
 8000e58:	e004      	b.n	8000e64 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e60:	603b      	str	r3, [r7, #0]
            break;
 8000e62:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffb1 	bl	8000dd0 <lcd_send_cmd>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <lcd_init>:


void lcd_init (void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000e7a:	2032      	movs	r0, #50	; 0x32
 8000e7c:	f002 fe90 	bl	8003ba0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e80:	2030      	movs	r0, #48	; 0x30
 8000e82:	f7ff ffa5 	bl	8000dd0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000e86:	2005      	movs	r0, #5
 8000e88:	f002 fe8a 	bl	8003ba0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e8c:	2030      	movs	r0, #48	; 0x30
 8000e8e:	f7ff ff9f 	bl	8000dd0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000e92:	2001      	movs	r0, #1
 8000e94:	f002 fe84 	bl	8003ba0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e98:	2030      	movs	r0, #48	; 0x30
 8000e9a:	f7ff ff99 	bl	8000dd0 <lcd_send_cmd>
	HAL_Delay(10);
 8000e9e:	200a      	movs	r0, #10
 8000ea0:	f002 fe7e 	bl	8003ba0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ea4:	2020      	movs	r0, #32
 8000ea6:	f7ff ff93 	bl	8000dd0 <lcd_send_cmd>
	HAL_Delay(10);
 8000eaa:	200a      	movs	r0, #10
 8000eac:	f002 fe78 	bl	8003ba0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000eb0:	2028      	movs	r0, #40	; 0x28
 8000eb2:	f7ff ff8d 	bl	8000dd0 <lcd_send_cmd>
	HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f002 fe72 	bl	8003ba0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ebc:	2008      	movs	r0, #8
 8000ebe:	f7ff ff87 	bl	8000dd0 <lcd_send_cmd>
	HAL_Delay(1);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f002 fe6c 	bl	8003ba0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff ff81 	bl	8000dd0 <lcd_send_cmd>
	HAL_Delay(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f002 fe66 	bl	8003ba0 <HAL_Delay>
	HAL_Delay(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f002 fe63 	bl	8003ba0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000eda:	2006      	movs	r0, #6
 8000edc:	f7ff ff78 	bl	8000dd0 <lcd_send_cmd>
	HAL_Delay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f002 fe5d 	bl	8003ba0 <HAL_Delay>
	lcd_send_cmd (0x0F); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f7ff ff72 	bl	8000dd0 <lcd_send_cmd>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ef8:	e006      	b.n	8000f08 <lcd_send_string+0x18>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff7e 	bl	8000e04 <lcd_send_data>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f4      	bne.n	8000efa <lcd_send_string+0xa>
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	0000      	movs	r0, r0
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//booleans to track the state of the buttons
	uint8_t up_btn_pressed = 0; // up button pressed
 8000f26:	2300      	movs	r3, #0
 8000f28:	77fb      	strb	r3, [r7, #31]
	uint8_t down_btn_pressed = 0; // down button pressed
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	77bb      	strb	r3, [r7, #30]
	uint8_t sel_btn_pressed = 0; // select button pressed
 8000f2e:	2300      	movs	r3, #0
 8000f30:	777b      	strb	r3, [r7, #29]
	uint8_t change_value_bool = 0; //boolean for changing the value the selected item
 8000f32:	2300      	movs	r3, #0
 8000f34:	773b      	strb	r3, [r7, #28]
	uint8_t a_data_1[2], a_data_2[2], a_data_3[2]; //analog data in a byte array

	//Get variables from Flash Memory

	// retrieve the stored CAN IDs
	CAN_IDs=(*(__IO uint32_t *) 0x0800F800);
 8000f36:	4bac      	ldr	r3, [pc, #688]	; (80011e8 <main+0x2c8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4bab      	ldr	r3, [pc, #684]	; (80011ec <main+0x2cc>)
 8000f3e:	601a      	str	r2, [r3, #0]
	memcpy(id_arr, wordToBytes(CAN_IDs), 4);
 8000f40:	4baa      	ldr	r3, [pc, #680]	; (80011ec <main+0x2cc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fa27 	bl	8003398 <wordToBytes>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4ba7      	ldr	r3, [pc, #668]	; (80011f0 <main+0x2d0>)
 8000f52:	601a      	str	r2, [r3, #0]
	can_id_1=id_arr[0];
 8000f54:	4ba6      	ldr	r3, [pc, #664]	; (80011f0 <main+0x2d0>)
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	4ba6      	ldr	r3, [pc, #664]	; (80011f4 <main+0x2d4>)
 8000f5a:	701a      	strb	r2, [r3, #0]
	can_id_2=id_arr[1];
 8000f5c:	4ba4      	ldr	r3, [pc, #656]	; (80011f0 <main+0x2d0>)
 8000f5e:	785a      	ldrb	r2, [r3, #1]
 8000f60:	4ba5      	ldr	r3, [pc, #660]	; (80011f8 <main+0x2d8>)
 8000f62:	701a      	strb	r2, [r3, #0]
	can_id_3=id_arr[2];
 8000f64:	4ba2      	ldr	r3, [pc, #648]	; (80011f0 <main+0x2d0>)
 8000f66:	789a      	ldrb	r2, [r3, #2]
 8000f68:	4ba4      	ldr	r3, [pc, #656]	; (80011fc <main+0x2dc>)
 8000f6a:	701a      	strb	r2, [r3, #0]
	//if duplicate IDs set IDs to 1, 2, and 3 respectively
	if(can_id_1==can_id_2 || can_id_1==can_id_3||can_id_2==can_id_3){
 8000f6c:	4ba1      	ldr	r3, [pc, #644]	; (80011f4 <main+0x2d4>)
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	4ba1      	ldr	r3, [pc, #644]	; (80011f8 <main+0x2d8>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d00b      	beq.n	8000f90 <main+0x70>
 8000f78:	4b9e      	ldr	r3, [pc, #632]	; (80011f4 <main+0x2d4>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	4b9f      	ldr	r3, [pc, #636]	; (80011fc <main+0x2dc>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d005      	beq.n	8000f90 <main+0x70>
 8000f84:	4b9c      	ldr	r3, [pc, #624]	; (80011f8 <main+0x2d8>)
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	4b9c      	ldr	r3, [pc, #624]	; (80011fc <main+0x2dc>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d108      	bne.n	8000fa2 <main+0x82>
		can_id_1=1;
 8000f90:	4b98      	ldr	r3, [pc, #608]	; (80011f4 <main+0x2d4>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
		can_id_2=2;
 8000f96:	4b98      	ldr	r3, [pc, #608]	; (80011f8 <main+0x2d8>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	701a      	strb	r2, [r3, #0]
		can_id_3=3;
 8000f9c:	4b97      	ldr	r3, [pc, #604]	; (80011fc <main+0x2dc>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	701a      	strb	r2, [r3, #0]
	}

	//get the baud rate
	baud_pos=(uint8_t)(*(__IO uint32_t *) 0x0800F804);
 8000fa2:	4b97      	ldr	r3, [pc, #604]	; (8001200 <main+0x2e0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	4b96      	ldr	r3, [pc, #600]	; (8001204 <main+0x2e4>)
 8000faa:	701a      	strb	r2, [r3, #0]
	//if invalid baud rate then set to 1M
	if(baud_pos<0||baud_pos>3)
 8000fac:	4b95      	ldr	r3, [pc, #596]	; (8001204 <main+0x2e4>)
 8000fae:	f993 3000 	ldrsb.w	r3, [r3]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db04      	blt.n	8000fc0 <main+0xa0>
 8000fb6:	4b93      	ldr	r3, [pc, #588]	; (8001204 <main+0x2e4>)
 8000fb8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	dd02      	ble.n	8000fc6 <main+0xa6>
		baud_pos=3;
 8000fc0:	4b90      	ldr	r3, [pc, #576]	; (8001204 <main+0x2e4>)
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	701a      	strb	r2, [r3, #0]
	PSC=pow(2,4-baud_pos);//set prescaler
 8000fc6:	4b8f      	ldr	r3, [pc, #572]	; (8001204 <main+0x2e4>)
 8000fc8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fcc:	f1c3 0304 	rsb	r3, r3, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff faa7 	bl	8000524 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	ec43 2b11 	vmov	d1, r2, r3
 8000fde:	ed9f 0b80 	vldr	d0, [pc, #512]	; 80011e0 <main+0x2c0>
 8000fe2:	f00a fad9 	bl	800b598 <pow>
 8000fe6:	ec53 2b10 	vmov	r2, r3, d0
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fddb 	bl	8000ba8 <__aeabi_d2uiz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b84      	ldr	r3, [pc, #528]	; (8001208 <main+0x2e8>)
 8000ff8:	701a      	strb	r2, [r3, #0]

	//get the number of delays between samples
	num_delays=(uint8_t)(*(__IO uint32_t *) 0x0800F808);
 8000ffa:	4b84      	ldr	r3, [pc, #528]	; (800120c <main+0x2ec>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b83      	ldr	r3, [pc, #524]	; (8001210 <main+0x2f0>)
 8001002:	701a      	strb	r2, [r3, #0]

	// retrieve the analog enabled booleans
	enable_word=(*(__IO uint32_t *) 0x0800F80C);
 8001004:	4b83      	ldr	r3, [pc, #524]	; (8001214 <main+0x2f4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b83      	ldr	r3, [pc, #524]	; (8001218 <main+0x2f8>)
 800100c:	601a      	str	r2, [r3, #0]
	memcpy(analog_enable_arr, wordToBytes(enable_word), 4);
 800100e:	4b82      	ldr	r3, [pc, #520]	; (8001218 <main+0x2f8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f002 f9c0 	bl	8003398 <wordToBytes>
 8001018:	4603      	mov	r3, r0
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b7f      	ldr	r3, [pc, #508]	; (800121c <main+0x2fc>)
 8001020:	601a      	str	r2, [r3, #0]
	//invert values so the default is on after erasing the memory
	analog_1_enabled=!analog_enable_arr[0];
 8001022:	4b7e      	ldr	r3, [pc, #504]	; (800121c <main+0x2fc>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	bf0c      	ite	eq
 800102a:	2301      	moveq	r3, #1
 800102c:	2300      	movne	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	4b7b      	ldr	r3, [pc, #492]	; (8001220 <main+0x300>)
 8001034:	701a      	strb	r2, [r3, #0]
	analog_2_enabled=!analog_enable_arr[1];
 8001036:	4b79      	ldr	r3, [pc, #484]	; (800121c <main+0x2fc>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	4b77      	ldr	r3, [pc, #476]	; (8001224 <main+0x304>)
 8001048:	701a      	strb	r2, [r3, #0]
	analog_3_enabled=!analog_enable_arr[2];
 800104a:	4b74      	ldr	r3, [pc, #464]	; (800121c <main+0x2fc>)
 800104c:	789b      	ldrb	r3, [r3, #2]
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	4b73      	ldr	r3, [pc, #460]	; (8001228 <main+0x308>)
 800105c:	701a      	strb	r2, [r3, #0]

	//get the offsets
	analog_1_offset=(*(__IO uint32_t *) 0x0800F810);
 800105e:	4b73      	ldr	r3, [pc, #460]	; (800122c <main+0x30c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a73      	ldr	r2, [pc, #460]	; (8001230 <main+0x310>)
 8001064:	6013      	str	r3, [r2, #0]
	analog_2_offset=(*(__IO uint32_t *) 0x0800F814);
 8001066:	4b73      	ldr	r3, [pc, #460]	; (8001234 <main+0x314>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a73      	ldr	r2, [pc, #460]	; (8001238 <main+0x318>)
 800106c:	6013      	str	r3, [r2, #0]
	analog_3_offset=(*(__IO uint32_t *) 0x0800F818);
 800106e:	4b73      	ldr	r3, [pc, #460]	; (800123c <main+0x31c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a73      	ldr	r2, [pc, #460]	; (8001240 <main+0x320>)
 8001074:	6013      	str	r3, [r2, #0]


	// Set the headers for the first analog device
	headers_1.StdId = can_id_1; // set the CAN ID
 8001076:	4b5f      	ldr	r3, [pc, #380]	; (80011f4 <main+0x2d4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	4b71      	ldr	r3, [pc, #452]	; (8001244 <main+0x324>)
 800107e:	601a      	str	r2, [r3, #0]
	headers_1.IDE = CAN_ID_STD;
 8001080:	4b70      	ldr	r3, [pc, #448]	; (8001244 <main+0x324>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
	headers_1.RTR = CAN_RTR_DATA;
 8001086:	4b6f      	ldr	r3, [pc, #444]	; (8001244 <main+0x324>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
	headers_1.DLC = sizeof(a_data_1); // set the size of the data
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <main+0x324>)
 800108e:	2202      	movs	r2, #2
 8001090:	611a      	str	r2, [r3, #16]
	headers_1.TransmitGlobalTime = DISABLE; // disable transmission of time
 8001092:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <main+0x324>)
 8001094:	2200      	movs	r2, #0
 8001096:	751a      	strb	r2, [r3, #20]

	// Set the headers for the second analog device
	headers_2.StdId = can_id_2; // set the CAN ID
 8001098:	4b57      	ldr	r3, [pc, #348]	; (80011f8 <main+0x2d8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <main+0x328>)
 80010a0:	601a      	str	r2, [r3, #0]
	headers_2.IDE = CAN_ID_STD;
 80010a2:	4b69      	ldr	r3, [pc, #420]	; (8001248 <main+0x328>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
	headers_2.RTR = CAN_RTR_DATA;
 80010a8:	4b67      	ldr	r3, [pc, #412]	; (8001248 <main+0x328>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
	headers_2.DLC = sizeof(a_data_2); // set the size of the data
 80010ae:	4b66      	ldr	r3, [pc, #408]	; (8001248 <main+0x328>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	611a      	str	r2, [r3, #16]
	headers_2.TransmitGlobalTime = DISABLE; // disable transmission of time
 80010b4:	4b64      	ldr	r3, [pc, #400]	; (8001248 <main+0x328>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	751a      	strb	r2, [r3, #20]

	// Set the headers for the third analog device
	headers_3.StdId = can_id_3; // set the CAN ID
 80010ba:	4b50      	ldr	r3, [pc, #320]	; (80011fc <main+0x2dc>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	4b62      	ldr	r3, [pc, #392]	; (800124c <main+0x32c>)
 80010c2:	601a      	str	r2, [r3, #0]
	headers_3.IDE = CAN_ID_STD;
 80010c4:	4b61      	ldr	r3, [pc, #388]	; (800124c <main+0x32c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
	headers_3.RTR = CAN_RTR_DATA;
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <main+0x32c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
	headers_3.DLC = sizeof(a_data_3); // set the size of the data
 80010d0:	4b5e      	ldr	r3, [pc, #376]	; (800124c <main+0x32c>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	611a      	str	r2, [r3, #16]
	headers_3.TransmitGlobalTime = DISABLE; // disable transmission of time
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <main+0x32c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	751a      	strb	r2, [r3, #20]


	//Save the stored values to the menus
	//set the baud rate
	memset(temp,0,17); // erase the temp array
 80010dc:	2211      	movs	r2, #17
 80010de:	2100      	movs	r1, #0
 80010e0:	485b      	ldr	r0, [pc, #364]	; (8001250 <main+0x330>)
 80010e2:	f005 fdd1 	bl	8006c88 <memset>
	strncpy(temp, "Baud rate:  ",16); // copy the string to the temp array (limiting the length to 16 characters)
 80010e6:	2210      	movs	r2, #16
 80010e8:	495a      	ldr	r1, [pc, #360]	; (8001254 <main+0x334>)
 80010ea:	4859      	ldr	r0, [pc, #356]	; (8001250 <main+0x330>)
 80010ec:	f006 fcbb 	bl	8007a66 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <main+0x2e4>)
 80010f2:	f993 3000 	ldrsb.w	r3, [r3]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4a57      	ldr	r2, [pc, #348]	; (8001258 <main+0x338>)
 80010fa:	4413      	add	r3, r2
 80010fc:	2211      	movs	r2, #17
 80010fe:	4619      	mov	r1, r3
 8001100:	4853      	ldr	r0, [pc, #332]	; (8001250 <main+0x330>)
 8001102:	f006 fc78 	bl	80079f6 <strlcat>
	strlcpy(can_menu[1],temp,17);
 8001106:	2211      	movs	r2, #17
 8001108:	4951      	ldr	r1, [pc, #324]	; (8001250 <main+0x330>)
 800110a:	4854      	ldr	r0, [pc, #336]	; (800125c <main+0x33c>)
 800110c:	f006 fc96 	bl	8007a3c <strlcpy>

	//set can IDs
	memset(temp,0,17); // erase the temp array
 8001110:	2211      	movs	r2, #17
 8001112:	2100      	movs	r1, #0
 8001114:	484e      	ldr	r0, [pc, #312]	; (8001250 <main+0x330>)
 8001116:	f005 fdb7 	bl	8006c88 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 800111a:	2210      	movs	r2, #16
 800111c:	4950      	ldr	r1, [pc, #320]	; (8001260 <main+0x340>)
 800111e:	484c      	ldr	r0, [pc, #304]	; (8001250 <main+0x330>)
 8001120:	f006 fca1 	bl	8007a66 <strncpy>
	strcat(temp, "1:    ");
 8001124:	484a      	ldr	r0, [pc, #296]	; (8001250 <main+0x330>)
 8001126:	f7ff f853 	bl	80001d0 <strlen>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b48      	ldr	r3, [pc, #288]	; (8001250 <main+0x330>)
 8001130:	4413      	add	r3, r2
 8001132:	4a4c      	ldr	r2, [pc, #304]	; (8001264 <main+0x344>)
 8001134:	6810      	ldr	r0, [r2, #0]
 8001136:	6018      	str	r0, [r3, #0]
 8001138:	8891      	ldrh	r1, [r2, #4]
 800113a:	7992      	ldrb	r2, [r2, #6]
 800113c:	8099      	strh	r1, [r3, #4]
 800113e:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8001140:	2210      	movs	r2, #16
 8001142:	2100      	movs	r1, #0
 8001144:	4848      	ldr	r0, [pc, #288]	; (8001268 <main+0x348>)
 8001146:	f005 fd9f 	bl	8006c88 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <main+0x2d4>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4946      	ldr	r1, [pc, #280]	; (800126c <main+0x34c>)
 8001152:	4845      	ldr	r0, [pc, #276]	; (8001268 <main+0x348>)
 8001154:	f006 fc20 	bl	8007998 <siprintf>
	strlcat(temp, char_arr,17);
 8001158:	2211      	movs	r2, #17
 800115a:	4943      	ldr	r1, [pc, #268]	; (8001268 <main+0x348>)
 800115c:	483c      	ldr	r0, [pc, #240]	; (8001250 <main+0x330>)
 800115e:	f006 fc4a 	bl	80079f6 <strlcat>
	memcpy(can_menu[2],temp,17);
 8001162:	4b43      	ldr	r3, [pc, #268]	; (8001270 <main+0x350>)
 8001164:	4a3a      	ldr	r2, [pc, #232]	; (8001250 <main+0x330>)
 8001166:	3322      	adds	r3, #34	; 0x22
 8001168:	6815      	ldr	r5, [r2, #0]
 800116a:	6854      	ldr	r4, [r2, #4]
 800116c:	6890      	ldr	r0, [r2, #8]
 800116e:	68d1      	ldr	r1, [r2, #12]
 8001170:	601d      	str	r5, [r3, #0]
 8001172:	605c      	str	r4, [r3, #4]
 8001174:	6098      	str	r0, [r3, #8]
 8001176:	60d9      	str	r1, [r3, #12]
 8001178:	7c12      	ldrb	r2, [r2, #16]
 800117a:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 800117c:	2211      	movs	r2, #17
 800117e:	2100      	movs	r1, #0
 8001180:	4833      	ldr	r0, [pc, #204]	; (8001250 <main+0x330>)
 8001182:	f005 fd81 	bl	8006c88 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8001186:	2210      	movs	r2, #16
 8001188:	4935      	ldr	r1, [pc, #212]	; (8001260 <main+0x340>)
 800118a:	4831      	ldr	r0, [pc, #196]	; (8001250 <main+0x330>)
 800118c:	f006 fc6b 	bl	8007a66 <strncpy>
	strcat(temp, "2:    ");
 8001190:	482f      	ldr	r0, [pc, #188]	; (8001250 <main+0x330>)
 8001192:	f7ff f81d 	bl	80001d0 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <main+0x330>)
 800119c:	4413      	add	r3, r2
 800119e:	4a35      	ldr	r2, [pc, #212]	; (8001274 <main+0x354>)
 80011a0:	6810      	ldr	r0, [r2, #0]
 80011a2:	6018      	str	r0, [r3, #0]
 80011a4:	8891      	ldrh	r1, [r2, #4]
 80011a6:	7992      	ldrb	r2, [r2, #6]
 80011a8:	8099      	strh	r1, [r3, #4]
 80011aa:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 80011ac:	2210      	movs	r2, #16
 80011ae:	2100      	movs	r1, #0
 80011b0:	482d      	ldr	r0, [pc, #180]	; (8001268 <main+0x348>)
 80011b2:	f005 fd69 	bl	8006c88 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <main+0x2d8>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	492b      	ldr	r1, [pc, #172]	; (800126c <main+0x34c>)
 80011be:	482a      	ldr	r0, [pc, #168]	; (8001268 <main+0x348>)
 80011c0:	f006 fbea 	bl	8007998 <siprintf>
	strlcat(temp, char_arr,17);
 80011c4:	2211      	movs	r2, #17
 80011c6:	4928      	ldr	r1, [pc, #160]	; (8001268 <main+0x348>)
 80011c8:	4821      	ldr	r0, [pc, #132]	; (8001250 <main+0x330>)
 80011ca:	f006 fc14 	bl	80079f6 <strlcat>
	memcpy(can_menu[3],temp,17);
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <main+0x350>)
 80011d0:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <main+0x330>)
 80011d2:	3333      	adds	r3, #51	; 0x33
 80011d4:	6815      	ldr	r5, [r2, #0]
 80011d6:	6854      	ldr	r4, [r2, #4]
 80011d8:	6890      	ldr	r0, [r2, #8]
 80011da:	68d1      	ldr	r1, [r2, #12]
 80011dc:	e04c      	b.n	8001278 <main+0x358>
 80011de:	bf00      	nop
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40000000 	.word	0x40000000
 80011e8:	0800f800 	.word	0x0800f800
 80011ec:	20000480 	.word	0x20000480
 80011f0:	20000390 	.word	0x20000390
 80011f4:	200004d4 	.word	0x200004d4
 80011f8:	2000040c 	.word	0x2000040c
 80011fc:	20000384 	.word	0x20000384
 8001200:	0800f804 	.word	0x0800f804
 8001204:	2000015b 	.word	0x2000015b
 8001208:	20000000 	.word	0x20000000
 800120c:	0800f808 	.word	0x0800f808
 8001210:	20000377 	.word	0x20000377
 8001214:	0800f80c 	.word	0x0800f80c
 8001218:	20000410 	.word	0x20000410
 800121c:	2000048c 	.word	0x2000048c
 8001220:	20000001 	.word	0x20000001
 8001224:	20000002 	.word	0x20000002
 8001228:	20000003 	.word	0x20000003
 800122c:	0800f810 	.word	0x0800f810
 8001230:	20000364 	.word	0x20000364
 8001234:	0800f814 	.word	0x0800f814
 8001238:	20000368 	.word	0x20000368
 800123c:	0800f818 	.word	0x0800f818
 8001240:	2000036c 	.word	0x2000036c
 8001244:	200003b0 	.word	0x200003b0
 8001248:	200004d8 	.word	0x200004d8
 800124c:	20000398 	.word	0x20000398
 8001250:	200003f4 	.word	0x200003f4
 8001254:	0800c508 	.word	0x0800c508
 8001258:	0800c678 	.word	0x0800c678
 800125c:	20000059 	.word	0x20000059
 8001260:	0800c518 	.word	0x0800c518
 8001264:	0800c520 	.word	0x0800c520
 8001268:	20000540 	.word	0x20000540
 800126c:	0800c528 	.word	0x0800c528
 8001270:	20000048 	.word	0x20000048
 8001274:	0800c530 	.word	0x0800c530
 8001278:	601d      	str	r5, [r3, #0]
 800127a:	605c      	str	r4, [r3, #4]
 800127c:	6098      	str	r0, [r3, #8]
 800127e:	60d9      	str	r1, [r3, #12]
 8001280:	7c12      	ldrb	r2, [r2, #16]
 8001282:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 8001284:	2211      	movs	r2, #17
 8001286:	2100      	movs	r1, #0
 8001288:	48bd      	ldr	r0, [pc, #756]	; (8001580 <main+0x660>)
 800128a:	f005 fcfd 	bl	8006c88 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 800128e:	2210      	movs	r2, #16
 8001290:	49bc      	ldr	r1, [pc, #752]	; (8001584 <main+0x664>)
 8001292:	48bb      	ldr	r0, [pc, #748]	; (8001580 <main+0x660>)
 8001294:	f006 fbe7 	bl	8007a66 <strncpy>
	strcat(temp, "3:    ");
 8001298:	48b9      	ldr	r0, [pc, #740]	; (8001580 <main+0x660>)
 800129a:	f7fe ff99 	bl	80001d0 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4bb7      	ldr	r3, [pc, #732]	; (8001580 <main+0x660>)
 80012a4:	4413      	add	r3, r2
 80012a6:	4ab8      	ldr	r2, [pc, #736]	; (8001588 <main+0x668>)
 80012a8:	6810      	ldr	r0, [r2, #0]
 80012aa:	6018      	str	r0, [r3, #0]
 80012ac:	8891      	ldrh	r1, [r2, #4]
 80012ae:	7992      	ldrb	r2, [r2, #6]
 80012b0:	8099      	strh	r1, [r3, #4]
 80012b2:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 80012b4:	2210      	movs	r2, #16
 80012b6:	2100      	movs	r1, #0
 80012b8:	48b4      	ldr	r0, [pc, #720]	; (800158c <main+0x66c>)
 80012ba:	f005 fce5 	bl	8006c88 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 80012be:	4bb4      	ldr	r3, [pc, #720]	; (8001590 <main+0x670>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	49b3      	ldr	r1, [pc, #716]	; (8001594 <main+0x674>)
 80012c6:	48b1      	ldr	r0, [pc, #708]	; (800158c <main+0x66c>)
 80012c8:	f006 fb66 	bl	8007998 <siprintf>
	strlcat(temp, char_arr,17);
 80012cc:	2211      	movs	r2, #17
 80012ce:	49af      	ldr	r1, [pc, #700]	; (800158c <main+0x66c>)
 80012d0:	48ab      	ldr	r0, [pc, #684]	; (8001580 <main+0x660>)
 80012d2:	f006 fb90 	bl	80079f6 <strlcat>
	memcpy(can_menu[4],temp,17);
 80012d6:	4bb0      	ldr	r3, [pc, #704]	; (8001598 <main+0x678>)
 80012d8:	4aa9      	ldr	r2, [pc, #676]	; (8001580 <main+0x660>)
 80012da:	f103 0444 	add.w	r4, r3, #68	; 0x44
 80012de:	4615      	mov	r5, r2
 80012e0:	6828      	ldr	r0, [r5, #0]
 80012e2:	6869      	ldr	r1, [r5, #4]
 80012e4:	68aa      	ldr	r2, [r5, #8]
 80012e6:	68eb      	ldr	r3, [r5, #12]
 80012e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ea:	7c2b      	ldrb	r3, [r5, #16]
 80012ec:	7023      	strb	r3, [r4, #0]

	//Delay
	memset(temp,0,17); // erase the temp array
 80012ee:	2211      	movs	r2, #17
 80012f0:	2100      	movs	r1, #0
 80012f2:	48a3      	ldr	r0, [pc, #652]	; (8001580 <main+0x660>)
 80012f4:	f005 fcc8 	bl	8006c88 <memset>
	strncpy(temp, "Delay:   ",16); // copy the string to the temp array (limiting the length to 16 characters)
 80012f8:	2210      	movs	r2, #16
 80012fa:	49a8      	ldr	r1, [pc, #672]	; (800159c <main+0x67c>)
 80012fc:	48a0      	ldr	r0, [pc, #640]	; (8001580 <main+0x660>)
 80012fe:	f006 fbb2 	bl	8007a66 <strncpy>
	memset(char_arr, 0, 16);
 8001302:	2210      	movs	r2, #16
 8001304:	2100      	movs	r1, #0
 8001306:	48a1      	ldr	r0, [pc, #644]	; (800158c <main+0x66c>)
 8001308:	f005 fcbe 	bl	8006c88 <memset>
	sprintf(char_arr, "%05d", us*(num_delays+1));
 800130c:	4ba4      	ldr	r3, [pc, #656]	; (80015a0 <main+0x680>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	461a      	mov	r2, r3
 8001314:	4ba3      	ldr	r3, [pc, #652]	; (80015a4 <main+0x684>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	fb03 f302 	mul.w	r3, r3, r2
 800131e:	461a      	mov	r2, r3
 8001320:	49a1      	ldr	r1, [pc, #644]	; (80015a8 <main+0x688>)
 8001322:	489a      	ldr	r0, [pc, #616]	; (800158c <main+0x66c>)
 8001324:	f006 fb38 	bl	8007998 <siprintf>
	strcat(temp, char_arr);
 8001328:	4998      	ldr	r1, [pc, #608]	; (800158c <main+0x66c>)
 800132a:	4895      	ldr	r0, [pc, #596]	; (8001580 <main+0x660>)
 800132c:	f006 fb54 	bl	80079d8 <strcat>
	strlcat(temp,"us",17);
 8001330:	2211      	movs	r2, #17
 8001332:	499e      	ldr	r1, [pc, #632]	; (80015ac <main+0x68c>)
 8001334:	4892      	ldr	r0, [pc, #584]	; (8001580 <main+0x660>)
 8001336:	f006 fb5e 	bl	80079f6 <strlcat>
	memcpy(main_menu[3],temp,17);
 800133a:	4b9d      	ldr	r3, [pc, #628]	; (80015b0 <main+0x690>)
 800133c:	4a90      	ldr	r2, [pc, #576]	; (8001580 <main+0x660>)
 800133e:	3333      	adds	r3, #51	; 0x33
 8001340:	6815      	ldr	r5, [r2, #0]
 8001342:	6854      	ldr	r4, [r2, #4]
 8001344:	6890      	ldr	r0, [r2, #8]
 8001346:	68d1      	ldr	r1, [r2, #12]
 8001348:	601d      	str	r5, [r3, #0]
 800134a:	605c      	str	r4, [r3, #4]
 800134c:	6098      	str	r0, [r3, #8]
 800134e:	60d9      	str	r1, [r3, #12]
 8001350:	7c12      	ldrb	r2, [r2, #16]
 8001352:	741a      	strb	r2, [r3, #16]

	//Analog enabled bools
	if(!analog_1_enabled)
 8001354:	4b97      	ldr	r3, [pc, #604]	; (80015b4 <main+0x694>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10b      	bne.n	8001374 <main+0x454>
		memcpy(analog_menu[5],"Analog 1:    OFF",17);
 800135c:	4b96      	ldr	r3, [pc, #600]	; (80015b8 <main+0x698>)
 800135e:	4a97      	ldr	r2, [pc, #604]	; (80015bc <main+0x69c>)
 8001360:	f103 0555 	add.w	r5, r3, #85	; 0x55
 8001364:	4614      	mov	r4, r2
 8001366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001368:	6028      	str	r0, [r5, #0]
 800136a:	6069      	str	r1, [r5, #4]
 800136c:	60aa      	str	r2, [r5, #8]
 800136e:	60eb      	str	r3, [r5, #12]
 8001370:	7823      	ldrb	r3, [r4, #0]
 8001372:	742b      	strb	r3, [r5, #16]
	if(!analog_2_enabled)
 8001374:	4b92      	ldr	r3, [pc, #584]	; (80015c0 <main+0x6a0>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10b      	bne.n	8001394 <main+0x474>
		memcpy(analog_menu[6],"Analog 2:    OFF",17);
 800137c:	4b8e      	ldr	r3, [pc, #568]	; (80015b8 <main+0x698>)
 800137e:	4a91      	ldr	r2, [pc, #580]	; (80015c4 <main+0x6a4>)
 8001380:	f103 0566 	add.w	r5, r3, #102	; 0x66
 8001384:	4614      	mov	r4, r2
 8001386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001388:	6028      	str	r0, [r5, #0]
 800138a:	6069      	str	r1, [r5, #4]
 800138c:	60aa      	str	r2, [r5, #8]
 800138e:	60eb      	str	r3, [r5, #12]
 8001390:	7823      	ldrb	r3, [r4, #0]
 8001392:	742b      	strb	r3, [r5, #16]
	if(!analog_3_enabled)
 8001394:	4b8c      	ldr	r3, [pc, #560]	; (80015c8 <main+0x6a8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10b      	bne.n	80013b4 <main+0x494>
		memcpy(analog_menu[7],"Analog 3:    OFF",17);
 800139c:	4b86      	ldr	r3, [pc, #536]	; (80015b8 <main+0x698>)
 800139e:	4a8b      	ldr	r2, [pc, #556]	; (80015cc <main+0x6ac>)
 80013a0:	f103 0577 	add.w	r5, r3, #119	; 0x77
 80013a4:	4614      	mov	r4, r2
 80013a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a8:	6028      	str	r0, [r5, #0]
 80013aa:	6069      	str	r1, [r5, #4]
 80013ac:	60aa      	str	r2, [r5, #8]
 80013ae:	60eb      	str	r3, [r5, #12]
 80013b0:	7823      	ldrb	r3, [r4, #0]
 80013b2:	742b      	strb	r3, [r5, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b4:	f002 fb8e 	bl	8003ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b8:	f000 ff92 	bl	80022e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013bc:	f001 f934 	bl	8002628 <MX_GPIO_Init>
  MX_CAN_Init();
 80013c0:	f000 ffec 	bl	800239c <MX_CAN_Init>
  MX_SDADC1_Init();
 80013c4:	f001 f82e 	bl	8002424 <MX_SDADC1_Init>
  MX_SDADC2_Init();
 80013c8:	f001 f868 	bl	800249c <MX_SDADC2_Init>
  MX_SDADC3_Init();
 80013cc:	f001 f8a4 	bl	8002518 <MX_SDADC3_Init>
  MX_TIM2_Init();
 80013d0:	f001 f8de 	bl	8002590 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);// start timer
 80013d4:	487e      	ldr	r0, [pc, #504]	; (80015d0 <main+0x6b0>)
 80013d6:	f005 f961 	bl	800669c <HAL_TIM_Base_Start>

	//initialize LCD
	lcd_init();
 80013da:	f7ff fd4c 	bl	8000e76 <lcd_init>
	lcd_put_cur(0,0);
 80013de:	2100      	movs	r1, #0
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff fd29 	bl	8000e38 <lcd_put_cur>
	lcd_send_string("Starting Up...");
 80013e6:	487b      	ldr	r0, [pc, #492]	; (80015d4 <main+0x6b4>)
 80013e8:	f7ff fd82 	bl	8000ef0 <lcd_send_string>
	HAL_Delay(1000);
 80013ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f0:	f002 fbd6 	bl	8003ba0 <HAL_Delay>
	lcd_put_cur(0,0);
 80013f4:	2100      	movs	r1, #0
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff fd1e 	bl	8000e38 <lcd_put_cur>
	lcd_send_string("Initializing CAN");
 80013fc:	4876      	ldr	r0, [pc, #472]	; (80015d8 <main+0x6b8>)
 80013fe:	f7ff fd77 	bl	8000ef0 <lcd_send_string>
	HAL_Delay(1000);
 8001402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001406:	f002 fbcb 	bl	8003ba0 <HAL_Delay>

	//setup CAN filter
	can_filter.FilterMaskIdHigh = 0x0000;
 800140a:	4b74      	ldr	r3, [pc, #464]	; (80015dc <main+0x6bc>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8001410:	4b72      	ldr	r3, [pc, #456]	; (80015dc <main+0x6bc>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001416:	4b71      	ldr	r3, [pc, #452]	; (80015dc <main+0x6bc>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
	can_filter.FilterBank = 0;
 800141c:	4b6f      	ldr	r3, [pc, #444]	; (80015dc <main+0x6bc>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001422:	4b6e      	ldr	r3, [pc, #440]	; (80015dc <main+0x6bc>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001428:	4b6c      	ldr	r3, [pc, #432]	; (80015dc <main+0x6bc>)
 800142a:	2201      	movs	r2, #1
 800142c:	61da      	str	r2, [r3, #28]
	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 800142e:	4b6b      	ldr	r3, [pc, #428]	; (80015dc <main+0x6bc>)
 8001430:	2201      	movs	r2, #1
 8001432:	621a      	str	r2, [r3, #32]
	//check that CAN Filter was setup correctly
	if (HAL_CAN_ConfigFilter(&hcan, &can_filter) != HAL_OK) {
 8001434:	4969      	ldr	r1, [pc, #420]	; (80015dc <main+0x6bc>)
 8001436:	486a      	ldr	r0, [pc, #424]	; (80015e0 <main+0x6c0>)
 8001438:	f002 fcd1 	bl	8003dde <HAL_CAN_ConfigFilter>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <main+0x526>
		Error_Handler();
 8001442:	f002 f8d5 	bl	80035f0 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001446:	4866      	ldr	r0, [pc, #408]	; (80015e0 <main+0x6c0>)
 8001448:	f002 fd93 	bl	8003f72 <HAL_CAN_Start>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <main+0x536>
		Error_Handler();
 8001452:	f002 f8cd 	bl	80035f0 <Error_Handler>
	}

	//display main menu
	lcd_put_cur(0,0);
 8001456:	2100      	movs	r1, #0
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff fced 	bl	8000e38 <lcd_put_cur>
	//the string is copied to temp to remove the null character at the end of the string in the menu
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 800145e:	4b61      	ldr	r3, [pc, #388]	; (80015e4 <main+0x6c4>)
 8001460:	f993 3000 	ldrsb.w	r3, [r3]
 8001464:	461a      	mov	r2, r3
 8001466:	4613      	mov	r3, r2
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4413      	add	r3, r2
 800146c:	4a50      	ldr	r2, [pc, #320]	; (80015b0 <main+0x690>)
 800146e:	4413      	add	r3, r2
 8001470:	2210      	movs	r2, #16
 8001472:	4619      	mov	r1, r3
 8001474:	4842      	ldr	r0, [pc, #264]	; (8001580 <main+0x660>)
 8001476:	f006 faf6 	bl	8007a66 <strncpy>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fd37 	bl	8000ef0 <lcd_send_string>
	lcd_put_cur(1,0);
 8001482:	2100      	movs	r1, #0
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff fcd7 	bl	8000e38 <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 800148a:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <main+0x6c4>)
 800148c:	f993 3000 	ldrsb.w	r3, [r3]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	4613      	mov	r3, r2
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	4413      	add	r3, r2
 8001498:	4a45      	ldr	r2, [pc, #276]	; (80015b0 <main+0x690>)
 800149a:	4413      	add	r3, r2
 800149c:	2210      	movs	r2, #16
 800149e:	4619      	mov	r1, r3
 80014a0:	4837      	ldr	r0, [pc, #220]	; (8001580 <main+0x660>)
 80014a2:	f006 fae0 	bl	8007a66 <strncpy>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fd21 	bl	8000ef0 <lcd_send_string>
	lcd_put_cur(0,0);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fcc1 	bl	8000e38 <lcd_put_cur>

	int analog_counter = 0;//counter used for sampling the analog signals
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
	int display_counter=0;//counter used in updating the display
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
	int btn_counter=0;//button counter used to reduce double clicks
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
	int16_t timer_compensation=0;//compensation for when the operations within the loop take too long
 80014c2:	2300      	movs	r3, #0
 80014c4:	81fb      	strh	r3, [r7, #14]

	//calibrate the SDADCs
	calibrateSDADC(&hsdadc1, SDADC_CHANNEL_1);
 80014c6:	4948      	ldr	r1, [pc, #288]	; (80015e8 <main+0x6c8>)
 80014c8:	4848      	ldr	r0, [pc, #288]	; (80015ec <main+0x6cc>)
 80014ca:	f001 ff85 	bl	80033d8 <calibrateSDADC>
	calibrateSDADC(&hsdadc2, SDADC_CHANNEL_0);
 80014ce:	2101      	movs	r1, #1
 80014d0:	4847      	ldr	r0, [pc, #284]	; (80015f0 <main+0x6d0>)
 80014d2:	f001 ff81 	bl	80033d8 <calibrateSDADC>
	calibrateSDADC(&hsdadc3, SDADC_CHANNEL_4);
 80014d6:	4947      	ldr	r1, [pc, #284]	; (80015f4 <main+0x6d4>)
 80014d8:	4847      	ldr	r0, [pc, #284]	; (80015f8 <main+0x6d8>)
 80014da:	f001 ff7d 	bl	80033d8 <calibrateSDADC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		__HAL_TIM_SET_COUNTER(&htim2,0); // reset timer
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <main+0x6b0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
		//reset display counter (waits 200 delays between updates to the display in the display values menu)
		if(display_counter>200)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2bc8      	cmp	r3, #200	; 0xc8
 80014ea:	dd01      	ble.n	80014f0 <main+0x5d0>
			display_counter=0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
		//reset analog counter (waits num_delays delays between samples)
		if(analog_counter>num_delays)
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <main+0x684>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4293      	cmp	r3, r2
 80014fa:	dd01      	ble.n	8001500 <main+0x5e0>
			analog_counter=0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]

		//get and send analog 1 data
		if(analog_1_enabled && analog_counter==0){
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <main+0x694>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80ac 	beq.w	8001662 <main+0x742>
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	f040 80a8 	bne.w	8001662 <main+0x742>
			//get raw data for analog 1
			HAL_SDADC_Start(&hsdadc1);
 8001512:	4836      	ldr	r0, [pc, #216]	; (80015ec <main+0x6cc>)
 8001514:	f004 ff73 	bl	80063fe <HAL_SDADC_Start>
			HAL_SDADC_PollForConversion(&hsdadc1, HAL_MAX_DELAY);
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	4833      	ldr	r0, [pc, #204]	; (80015ec <main+0x6cc>)
 800151e:	f004 ff89 	bl	8006434 <HAL_SDADC_PollForConversion>
			raw_1 = (int16_t)HAL_SDADC_GetValue(&hsdadc1);
 8001522:	4832      	ldr	r0, [pc, #200]	; (80015ec <main+0x6cc>)
 8001524:	f004 ffe0 	bl	80064e8 <HAL_SDADC_GetValue>
 8001528:	4603      	mov	r3, r0
 800152a:	b21b      	sxth	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <main+0x6dc>)
 8001530:	601a      	str	r2, [r3, #0]
			raw_1+=32768;
 8001532:	4b32      	ldr	r3, [pc, #200]	; (80015fc <main+0x6dc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800153a:	4a30      	ldr	r2, [pc, #192]	; (80015fc <main+0x6dc>)
 800153c:	6013      	str	r3, [r2, #0]
			//convert and scale raw data
			a_in_1=(raw_1-analog_1_offset);
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <main+0x6dc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <main+0x6e0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	461a      	mov	r2, r3
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <main+0x6e4>)
 800154e:	601a      	str	r2, [r3, #0]
			if(a_in_1<0)
 8001550:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <main+0x6e4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	da02      	bge.n	800155e <main+0x63e>
				a_in_1=0;
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <main+0x6e4>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
			a_in_1=(uint16_t)(a_in_1*((65535)/(float)(65535-analog_1_offset)));//scale value
 800155e:	4b29      	ldr	r3, [pc, #164]	; (8001604 <main+0x6e4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <main+0x6e0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001572:	33ff      	adds	r3, #255	; 0xff
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800157c:	e046      	b.n	800160c <main+0x6ec>
 800157e:	bf00      	nop
 8001580:	200003f4 	.word	0x200003f4
 8001584:	0800c518 	.word	0x0800c518
 8001588:	0800c538 	.word	0x0800c538
 800158c:	20000540 	.word	0x20000540
 8001590:	20000384 	.word	0x20000384
 8001594:	0800c528 	.word	0x0800c528
 8001598:	20000048 	.word	0x20000048
 800159c:	0800c540 	.word	0x0800c540
 80015a0:	2000015c 	.word	0x2000015c
 80015a4:	20000377 	.word	0x20000377
 80015a8:	0800c54c 	.word	0x0800c54c
 80015ac:	0800c554 	.word	0x0800c554
 80015b0:	20000004 	.word	0x20000004
 80015b4:	20000001 	.word	0x20000001
 80015b8:	200000b0 	.word	0x200000b0
 80015bc:	0800c558 	.word	0x0800c558
 80015c0:	20000002 	.word	0x20000002
 80015c4:	0800c56c 	.word	0x0800c56c
 80015c8:	20000003 	.word	0x20000003
 80015cc:	0800c580 	.word	0x0800c580
 80015d0:	200004f0 	.word	0x200004f0
 80015d4:	0800c594 	.word	0x0800c594
 80015d8:	0800c5a4 	.word	0x0800c5a4
 80015dc:	20000414 	.word	0x20000414
 80015e0:	200003c8 	.word	0x200003c8
 80015e4:	20000374 	.word	0x20000374
 80015e8:	00010002 	.word	0x00010002
 80015ec:	2000043c 	.word	0x2000043c
 80015f0:	20000490 	.word	0x20000490
 80015f4:	00040010 	.word	0x00040010
 80015f8:	20000550 	.word	0x20000550
 80015fc:	20000394 	.word	0x20000394
 8001600:	20000364 	.word	0x20000364
 8001604:	20000488 	.word	0x20000488
 8001608:	477fff00 	.word	0x477fff00
 800160c:	ed1f 6a02 	vldr	s12, [pc, #-8]	; 8001608 <main+0x6e8>
 8001610:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800161c:	ee17 3a90 	vmov	r3, s15
 8001620:	b29b      	uxth	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4ba2      	ldr	r3, [pc, #648]	; (80018b0 <main+0x990>)
 8001626:	601a      	str	r2, [r3, #0]
			//put raw data into byte arrays
			a_data_1[0]=a_in_1 & 0xff;
 8001628:	4ba1      	ldr	r3, [pc, #644]	; (80018b0 <main+0x990>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	733b      	strb	r3, [r7, #12]
			a_data_1[1]=(a_in_1 >> 8);
 8001630:	4b9f      	ldr	r3, [pc, #636]	; (80018b0 <main+0x990>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	121b      	asrs	r3, r3, #8
 8001636:	b2db      	uxtb	r3, r3
 8001638:	737b      	strb	r3, [r7, #13]
			//transmit CAN data for analog 1
			HAL_CAN_AddTxMessage(&hcan, &headers_1, a_data_1, *tx_mailbox);
 800163a:	4b9e      	ldr	r3, [pc, #632]	; (80018b4 <main+0x994>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f107 020c 	add.w	r2, r7, #12
 8001644:	499c      	ldr	r1, [pc, #624]	; (80018b8 <main+0x998>)
 8001646:	489d      	ldr	r0, [pc, #628]	; (80018bc <main+0x99c>)
 8001648:	f002 fd20 	bl	800408c <HAL_CAN_AddTxMessage>
			while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 1
 800164c:	bf00      	nop
 800164e:	4b99      	ldr	r3, [pc, #612]	; (80018b4 <main+0x994>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	4899      	ldr	r0, [pc, #612]	; (80018bc <main+0x99c>)
 8001658:	f002 fdf3 	bl	8004242 <HAL_CAN_IsTxMessagePending>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f5      	bne.n	800164e <main+0x72e>
		}

		//get and send analog 2 data
		if(analog_2_enabled&& analog_counter==0){
 8001662:	4b97      	ldr	r3, [pc, #604]	; (80018c0 <main+0x9a0>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d062      	beq.n	8001730 <main+0x810>
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d15f      	bne.n	8001730 <main+0x810>
			//get raw data for analog 2
			HAL_SDADC_Start(&hsdadc2);
 8001670:	4894      	ldr	r0, [pc, #592]	; (80018c4 <main+0x9a4>)
 8001672:	f004 fec4 	bl	80063fe <HAL_SDADC_Start>
			HAL_SDADC_PollForConversion(&hsdadc2, HAL_MAX_DELAY);
 8001676:	f04f 31ff 	mov.w	r1, #4294967295
 800167a:	4892      	ldr	r0, [pc, #584]	; (80018c4 <main+0x9a4>)
 800167c:	f004 feda 	bl	8006434 <HAL_SDADC_PollForConversion>
			raw_2 = (int16_t)HAL_SDADC_GetValue(&hsdadc2);
 8001680:	4890      	ldr	r0, [pc, #576]	; (80018c4 <main+0x9a4>)
 8001682:	f004 ff31 	bl	80064e8 <HAL_SDADC_GetValue>
 8001686:	4603      	mov	r3, r0
 8001688:	b21b      	sxth	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	4b8e      	ldr	r3, [pc, #568]	; (80018c8 <main+0x9a8>)
 800168e:	601a      	str	r2, [r3, #0]
			raw_2+=32768;
 8001690:	4b8d      	ldr	r3, [pc, #564]	; (80018c8 <main+0x9a8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001698:	4a8b      	ldr	r2, [pc, #556]	; (80018c8 <main+0x9a8>)
 800169a:	6013      	str	r3, [r2, #0]
			//convert and scale raw data
			a_in_2=(raw_2-analog_2_offset);
 800169c:	4b8a      	ldr	r3, [pc, #552]	; (80018c8 <main+0x9a8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b8a      	ldr	r3, [pc, #552]	; (80018cc <main+0x9ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <main+0x9b0>)
 80016ac:	601a      	str	r2, [r3, #0]
			if(a_in_2<0)
 80016ae:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <main+0x9b0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da02      	bge.n	80016bc <main+0x79c>
				a_in_2=0;
 80016b6:	4b86      	ldr	r3, [pc, #536]	; (80018d0 <main+0x9b0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
			a_in_2=(uint16_t)(a_in_2*((65535)/(float)(65535-analog_2_offset)));//scale value
 80016bc:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <main+0x9b0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c8:	4b80      	ldr	r3, [pc, #512]	; (80018cc <main+0x9ac>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80016d0:	33ff      	adds	r3, #255	; 0xff
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016da:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 80018d4 <main+0x9b4>
 80016de:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ea:	ee17 3a90 	vmov	r3, s15
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b77      	ldr	r3, [pc, #476]	; (80018d0 <main+0x9b0>)
 80016f4:	601a      	str	r2, [r3, #0]
			//put raw data into byte arrays
			a_data_2[0]=a_in_2 & 0xff;
 80016f6:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <main+0x9b0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	723b      	strb	r3, [r7, #8]
			a_data_2[1]=(a_in_2 >> 8);
 80016fe:	4b74      	ldr	r3, [pc, #464]	; (80018d0 <main+0x9b0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	121b      	asrs	r3, r3, #8
 8001704:	b2db      	uxtb	r3, r3
 8001706:	727b      	strb	r3, [r7, #9]
			//transmit CAN data for analog 2
			HAL_CAN_AddTxMessage(&hcan, &headers_2, a_data_2, *tx_mailbox);
 8001708:	4b6a      	ldr	r3, [pc, #424]	; (80018b4 <main+0x994>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f107 0208 	add.w	r2, r7, #8
 8001712:	4971      	ldr	r1, [pc, #452]	; (80018d8 <main+0x9b8>)
 8001714:	4869      	ldr	r0, [pc, #420]	; (80018bc <main+0x99c>)
 8001716:	f002 fcb9 	bl	800408c <HAL_CAN_AddTxMessage>
			while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 2
 800171a:	bf00      	nop
 800171c:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <main+0x994>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	4865      	ldr	r0, [pc, #404]	; (80018bc <main+0x99c>)
 8001726:	f002 fd8c 	bl	8004242 <HAL_CAN_IsTxMessagePending>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f5      	bne.n	800171c <main+0x7fc>
		}

		//get and send analog 3 data
		if(analog_3_enabled&& analog_counter==0){
 8001730:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <main+0x9bc>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d061      	beq.n	80017fc <main+0x8dc>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d15e      	bne.n	80017fc <main+0x8dc>
			//get raw data for analog 3
			HAL_SDADC_Start(&hsdadc3);
 800173e:	4868      	ldr	r0, [pc, #416]	; (80018e0 <main+0x9c0>)
 8001740:	f004 fe5d 	bl	80063fe <HAL_SDADC_Start>
			HAL_SDADC_PollForConversion(&hsdadc3, HAL_MAX_DELAY);
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	4865      	ldr	r0, [pc, #404]	; (80018e0 <main+0x9c0>)
 800174a:	f004 fe73 	bl	8006434 <HAL_SDADC_PollForConversion>
			raw_3 = (int16_t)HAL_SDADC_GetValue(&hsdadc3);
 800174e:	4864      	ldr	r0, [pc, #400]	; (80018e0 <main+0x9c0>)
 8001750:	f004 feca 	bl	80064e8 <HAL_SDADC_GetValue>
 8001754:	4603      	mov	r3, r0
 8001756:	b21b      	sxth	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	4b62      	ldr	r3, [pc, #392]	; (80018e4 <main+0x9c4>)
 800175c:	601a      	str	r2, [r3, #0]
			raw_3+=32768;
 800175e:	4b61      	ldr	r3, [pc, #388]	; (80018e4 <main+0x9c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001766:	4a5f      	ldr	r2, [pc, #380]	; (80018e4 <main+0x9c4>)
 8001768:	6013      	str	r3, [r2, #0]
			//convert and scale raw data
			a_in_3=(raw_3-analog_3_offset);
 800176a:	4b5e      	ldr	r3, [pc, #376]	; (80018e4 <main+0x9c4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	4b5d      	ldr	r3, [pc, #372]	; (80018e8 <main+0x9c8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	461a      	mov	r2, r3
 8001778:	4b5c      	ldr	r3, [pc, #368]	; (80018ec <main+0x9cc>)
 800177a:	601a      	str	r2, [r3, #0]
			if(a_in_3<0)
 800177c:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <main+0x9cc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	da02      	bge.n	800178a <main+0x86a>
				a_in_3=0;
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <main+0x9cc>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
			a_in_3=(uint16_t)(a_in_3*((65535)/(float)(65535-analog_3_offset)));//scale value
 800178a:	4b58      	ldr	r3, [pc, #352]	; (80018ec <main+0x9cc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001796:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <main+0x9c8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800179e:	33ff      	adds	r3, #255	; 0xff
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017a8:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 80018d4 <main+0x9b4>
 80017ac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b8:	ee17 3a90 	vmov	r3, s15
 80017bc:	b29b      	uxth	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <main+0x9cc>)
 80017c2:	601a      	str	r2, [r3, #0]
			//put raw data into byte arrays
			a_data_3[0]=a_in_3 & 0xff;
 80017c4:	4b49      	ldr	r3, [pc, #292]	; (80018ec <main+0x9cc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	713b      	strb	r3, [r7, #4]
			a_data_3[1]=(a_in_3 >> 8);
 80017cc:	4b47      	ldr	r3, [pc, #284]	; (80018ec <main+0x9cc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	121b      	asrs	r3, r3, #8
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	717b      	strb	r3, [r7, #5]
			//transmit CAN data for analog 3
			HAL_CAN_AddTxMessage(&hcan, &headers_3, a_data_3, *tx_mailbox);
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <main+0x994>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	1d3a      	adds	r2, r7, #4
 80017de:	4944      	ldr	r1, [pc, #272]	; (80018f0 <main+0x9d0>)
 80017e0:	4836      	ldr	r0, [pc, #216]	; (80018bc <main+0x99c>)
 80017e2:	f002 fc53 	bl	800408c <HAL_CAN_AddTxMessage>
			while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 3
 80017e6:	bf00      	nop
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <main+0x994>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4832      	ldr	r0, [pc, #200]	; (80018bc <main+0x99c>)
 80017f2:	f002 fd26 	bl	8004242 <HAL_CAN_IsTxMessagePending>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f5      	bne.n	80017e8 <main+0x8c8>
		}


		//if the up button is pressed
		if(up_btn_pressed==0 && HAL_GPIO_ReadPin(UP_BTN_PORT, UP_BTN_PIN)){
 80017fc:	7ffb      	ldrb	r3, [r7, #31]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 8166 	bne.w	8001ad0 <main+0xbb0>
 8001804:	2140      	movs	r1, #64	; 0x40
 8001806:	483b      	ldr	r0, [pc, #236]	; (80018f4 <main+0x9d4>)
 8001808:	f003 f978 	bl	8004afc <HAL_GPIO_ReadPin>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 815e 	beq.w	8001ad0 <main+0xbb0>
			if(change_value_bool){//if changing a value
 8001814:	7f3b      	ldrb	r3, [r7, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d03a      	beq.n	8001890 <main+0x970>
				//change the value of the selected item
				//main menu changes
				if(in_main_menu){
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <main+0x9d8>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d018      	beq.n	8001854 <main+0x934>
					if(menu_pos==2)
 8001822:	4b36      	ldr	r3, [pc, #216]	; (80018fc <main+0x9dc>)
 8001824:	f993 3000 	ldrsb.w	r3, [r3]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d10b      	bne.n	8001844 <main+0x924>
						display_scroll=(display_scroll==0)?2:(display_scroll-1);//scroll through devices in display values menu
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <main+0x9e0>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <main+0x91e>
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <main+0x9e0>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	e000      	b.n	8001840 <main+0x920>
 800183e:	2302      	movs	r3, #2
 8001840:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <main+0x9e0>)
 8001842:	7013      	strb	r3, [r2, #0]
					if(menu_pos == 3)
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <main+0x9dc>)
 8001846:	f993 3000 	ldrsb.w	r3, [r3]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d102      	bne.n	8001854 <main+0x934>
						changeDelay(1);//increment Delay
 800184e:	2001      	movs	r0, #1
 8001850:	f001 fa00 	bl	8002c54 <changeDelay>
				}
				//can menu changes
				if(in_can_menu){
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <main+0x9e4>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8134 	beq.w	8001ac6 <main+0xba6>
					if(can_pos==1)
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <main+0x9e8>)
 8001860:	f993 3000 	ldrsb.w	r3, [r3]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d103      	bne.n	8001870 <main+0x950>
						changeBaudRate(1);//increment baud rate
 8001868:	2001      	movs	r0, #1
 800186a:	f000 ff95 	bl	8002798 <changeBaudRate>
 800186e:	e12a      	b.n	8001ac6 <main+0xba6>
					else if(can_pos>=2&&can_pos<=4)
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <main+0x9e8>)
 8001872:	f993 3000 	ldrsb.w	r3, [r3]
 8001876:	2b01      	cmp	r3, #1
 8001878:	f340 8125 	ble.w	8001ac6 <main+0xba6>
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <main+0x9e8>)
 800187e:	f993 3000 	ldrsb.w	r3, [r3]
 8001882:	2b04      	cmp	r3, #4
 8001884:	f300 811f 	bgt.w	8001ac6 <main+0xba6>
						changeCANID(1);//increment CAN ID
 8001888:	2001      	movs	r0, #1
 800188a:	f001 f82b 	bl	80028e4 <changeCANID>
 800188e:	e11a      	b.n	8001ac6 <main+0xba6>
				}

			} else {
				//scroll menu up
				if(in_main_menu){
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <main+0x9d8>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d079      	beq.n	800198c <main+0xa6c>
					menu_pos=(menu_pos==0)?main_menu_length-1:(menu_pos-1);//decrement menu position
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <main+0x9dc>)
 800189a:	f993 3000 	ldrsb.w	r3, [r3]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d134      	bne.n	800190c <main+0x9ec>
 80018a2:	2304      	movs	r3, #4
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	e035      	b.n	800191a <main+0x9fa>
 80018ae:	bf00      	nop
 80018b0:	20000488 	.word	0x20000488
 80018b4:	20000408 	.word	0x20000408
 80018b8:	200003b0 	.word	0x200003b0
 80018bc:	200003c8 	.word	0x200003c8
 80018c0:	20000002 	.word	0x20000002
 80018c4:	20000490 	.word	0x20000490
 80018c8:	20000484 	.word	0x20000484
 80018cc:	20000368 	.word	0x20000368
 80018d0:	20000388 	.word	0x20000388
 80018d4:	477fff00 	.word	0x477fff00
 80018d8:	200004d8 	.word	0x200004d8
 80018dc:	20000003 	.word	0x20000003
 80018e0:	20000550 	.word	0x20000550
 80018e4:	2000038c 	.word	0x2000038c
 80018e8:	2000036c 	.word	0x2000036c
 80018ec:	200003f0 	.word	0x200003f0
 80018f0:	20000398 	.word	0x20000398
 80018f4:	48000800 	.word	0x48000800
 80018f8:	2000015a 	.word	0x2000015a
 80018fc:	20000374 	.word	0x20000374
 8001900:	20000373 	.word	0x20000373
 8001904:	20000371 	.word	0x20000371
 8001908:	20000375 	.word	0x20000375
 800190c:	4bc8      	ldr	r3, [pc, #800]	; (8001c30 <main+0xd10>)
 800190e:	f993 3000 	ldrsb.w	r3, [r3]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	b25b      	sxtb	r3, r3
 800191a:	4ac5      	ldr	r2, [pc, #788]	; (8001c30 <main+0xd10>)
 800191c:	7013      	strb	r3, [r2, #0]
					lcd_put_cur(0,0);
 800191e:	2100      	movs	r1, #0
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fa89 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8001926:	4bc2      	ldr	r3, [pc, #776]	; (8001c30 <main+0xd10>)
 8001928:	f993 3000 	ldrsb.w	r3, [r3]
 800192c:	461a      	mov	r2, r3
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	4413      	add	r3, r2
 8001934:	4abf      	ldr	r2, [pc, #764]	; (8001c34 <main+0xd14>)
 8001936:	4413      	add	r3, r2
 8001938:	2210      	movs	r2, #16
 800193a:	4619      	mov	r1, r3
 800193c:	48be      	ldr	r0, [pc, #760]	; (8001c38 <main+0xd18>)
 800193e:	f006 f892 	bl	8007a66 <strncpy>
 8001942:	4603      	mov	r3, r0
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fad3 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(1,0);
 800194a:	2100      	movs	r1, #0
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff fa73 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8001952:	4bb7      	ldr	r3, [pc, #732]	; (8001c30 <main+0xd10>)
 8001954:	f993 3000 	ldrsb.w	r3, [r3]
 8001958:	3301      	adds	r3, #1
 800195a:	2204      	movs	r2, #4
 800195c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001960:	fb02 f201 	mul.w	r2, r2, r1
 8001964:	1a9a      	subs	r2, r3, r2
 8001966:	4613      	mov	r3, r2
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	4413      	add	r3, r2
 800196c:	4ab1      	ldr	r2, [pc, #708]	; (8001c34 <main+0xd14>)
 800196e:	4413      	add	r3, r2
 8001970:	2210      	movs	r2, #16
 8001972:	4619      	mov	r1, r3
 8001974:	48b0      	ldr	r0, [pc, #704]	; (8001c38 <main+0xd18>)
 8001976:	f006 f876 	bl	8007a66 <strncpy>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fab7 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(0,0);
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fa57 	bl	8000e38 <lcd_put_cur>
 800198a:	e09c      	b.n	8001ac6 <main+0xba6>
				} else if(in_can_menu){
 800198c:	4bab      	ldr	r3, [pc, #684]	; (8001c3c <main+0xd1c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d04a      	beq.n	8001a2a <main+0xb0a>
					can_pos=(can_pos==0)?can_menu_length-1:(can_pos-1);//decrement menu position
 8001994:	4baa      	ldr	r3, [pc, #680]	; (8001c40 <main+0xd20>)
 8001996:	f993 3000 	ldrsb.w	r3, [r3]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d105      	bne.n	80019aa <main+0xa8a>
 800199e:	2306      	movs	r3, #6
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	e006      	b.n	80019b8 <main+0xa98>
 80019aa:	4ba5      	ldr	r3, [pc, #660]	; (8001c40 <main+0xd20>)
 80019ac:	f993 3000 	ldrsb.w	r3, [r3]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	4aa1      	ldr	r2, [pc, #644]	; (8001c40 <main+0xd20>)
 80019ba:	7013      	strb	r3, [r2, #0]
					lcd_put_cur(0,0);
 80019bc:	2100      	movs	r1, #0
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff fa3a 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 80019c4:	4b9e      	ldr	r3, [pc, #632]	; (8001c40 <main+0xd20>)
 80019c6:	f993 3000 	ldrsb.w	r3, [r3]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4613      	mov	r3, r2
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	4413      	add	r3, r2
 80019d2:	4a9c      	ldr	r2, [pc, #624]	; (8001c44 <main+0xd24>)
 80019d4:	4413      	add	r3, r2
 80019d6:	2210      	movs	r2, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	4897      	ldr	r0, [pc, #604]	; (8001c38 <main+0xd18>)
 80019dc:	f006 f843 	bl	8007a66 <strncpy>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fa84 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(1,0);
 80019e8:	2100      	movs	r1, #0
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff fa24 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 80019f0:	4b93      	ldr	r3, [pc, #588]	; (8001c40 <main+0xd20>)
 80019f2:	f993 3000 	ldrsb.w	r3, [r3]
 80019f6:	3301      	adds	r3, #1
 80019f8:	2206      	movs	r2, #6
 80019fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80019fe:	fb02 f201 	mul.w	r2, r2, r1
 8001a02:	1a9a      	subs	r2, r3, r2
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a8e      	ldr	r2, [pc, #568]	; (8001c44 <main+0xd24>)
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2210      	movs	r2, #16
 8001a10:	4619      	mov	r1, r3
 8001a12:	4889      	ldr	r0, [pc, #548]	; (8001c38 <main+0xd18>)
 8001a14:	f006 f827 	bl	8007a66 <strncpy>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fa68 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(0,0);
 8001a20:	2100      	movs	r1, #0
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fa08 	bl	8000e38 <lcd_put_cur>
 8001a28:	e04d      	b.n	8001ac6 <main+0xba6>
				} else if(in_analog_menu){
 8001a2a:	4b87      	ldr	r3, [pc, #540]	; (8001c48 <main+0xd28>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d049      	beq.n	8001ac6 <main+0xba6>
					analog_pos=(analog_pos==0)?analog_menu_length-1:(analog_pos-1);//decrement menu position
 8001a32:	4b86      	ldr	r3, [pc, #536]	; (8001c4c <main+0xd2c>)
 8001a34:	f993 3000 	ldrsb.w	r3, [r3]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <main+0xb28>
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	e006      	b.n	8001a56 <main+0xb36>
 8001a48:	4b80      	ldr	r3, [pc, #512]	; (8001c4c <main+0xd2c>)
 8001a4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	4a7d      	ldr	r2, [pc, #500]	; (8001c4c <main+0xd2c>)
 8001a58:	7013      	strb	r3, [r2, #0]
					lcd_put_cur(0,0);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff f9eb 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 8001a62:	4b7a      	ldr	r3, [pc, #488]	; (8001c4c <main+0xd2c>)
 8001a64:	f993 3000 	ldrsb.w	r3, [r3]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a77      	ldr	r2, [pc, #476]	; (8001c50 <main+0xd30>)
 8001a72:	4413      	add	r3, r2
 8001a74:	2210      	movs	r2, #16
 8001a76:	4619      	mov	r1, r3
 8001a78:	486f      	ldr	r0, [pc, #444]	; (8001c38 <main+0xd18>)
 8001a7a:	f005 fff4 	bl	8007a66 <strncpy>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fa35 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(1,0);
 8001a86:	2100      	movs	r1, #0
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7ff f9d5 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 8001a8e:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <main+0xd2c>)
 8001a90:	f993 3000 	ldrsb.w	r3, [r3]
 8001a94:	3301      	adds	r3, #1
 8001a96:	220a      	movs	r2, #10
 8001a98:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a9c:	fb02 f201 	mul.w	r2, r2, r1
 8001aa0:	1a9a      	subs	r2, r3, r2
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a69      	ldr	r2, [pc, #420]	; (8001c50 <main+0xd30>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	2210      	movs	r2, #16
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4861      	ldr	r0, [pc, #388]	; (8001c38 <main+0xd18>)
 8001ab2:	f005 ffd8 	bl	8007a66 <strncpy>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa19 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(0,0);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff f9b9 	bl	8000e38 <lcd_put_cur>
				}
			}
			up_btn_pressed = 1; // set button value to pressed
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	77fb      	strb	r3, [r7, #31]
			btn_counter=0; // reset button counter
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	e017      	b.n	8001b00 <main+0xbe0>
		} else if ((up_btn_pressed==1 &&!HAL_GPIO_ReadPin(UP_BTN_PORT, UP_BTN_PIN)&&btn_counter>1000)||(up_btn_pressed==1&&btn_counter>7000)){
 8001ad0:	7ffb      	ldrb	r3, [r7, #31]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d10a      	bne.n	8001aec <main+0xbcc>
 8001ad6:	2140      	movs	r1, #64	; 0x40
 8001ad8:	485e      	ldr	r0, [pc, #376]	; (8001c54 <main+0xd34>)
 8001ada:	f003 f80f 	bl	8004afc <HAL_GPIO_ReadPin>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d103      	bne.n	8001aec <main+0xbcc>
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aea:	dc07      	bgt.n	8001afc <main+0xbdc>
 8001aec:	7ffb      	ldrb	r3, [r7, #31]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d106      	bne.n	8001b00 <main+0xbe0>
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001af8:	4293      	cmp	r3, r2
 8001afa:	dd01      	ble.n	8001b00 <main+0xbe0>
			up_btn_pressed = 0; // reset up button value
 8001afc:	2300      	movs	r3, #0
 8001afe:	77fb      	strb	r3, [r7, #31]
		}

		//if the down button is pressed
		if(down_btn_pressed==0 && HAL_GPIO_ReadPin(DOWN_BTN_PORT, DOWN_BTN_PIN)){
 8001b00:	7fbb      	ldrb	r3, [r7, #30]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 8142 	bne.w	8001d8c <main+0xe6c>
 8001b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b0c:	4851      	ldr	r0, [pc, #324]	; (8001c54 <main+0xd34>)
 8001b0e:	f002 fff5 	bl	8004afc <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8139 	beq.w	8001d8c <main+0xe6c>
			if(change_value_bool){//if changing a value
 8001b1a:	7f3b      	ldrb	r3, [r7, #28]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03e      	beq.n	8001b9e <main+0xc7e>
				//change the value of the selected item
				//main menu changes
				if(in_main_menu){
 8001b20:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <main+0xd38>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01c      	beq.n	8001b62 <main+0xc42>
					if(menu_pos==2)
 8001b28:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <main+0xd10>)
 8001b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d10e      	bne.n	8001b50 <main+0xc30>
						display_scroll=(display_scroll+1)%3;//scroll through devices in display values menu
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <main+0xd3c>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <main+0xd40>)
 8001b3a:	fb83 3102 	smull	r3, r1, r3, r2
 8001b3e:	17d3      	asrs	r3, r2, #31
 8001b40:	1ac9      	subs	r1, r1, r3
 8001b42:	460b      	mov	r3, r1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	440b      	add	r3, r1
 8001b48:	1ad1      	subs	r1, r2, r3
 8001b4a:	b2ca      	uxtb	r2, r1
 8001b4c:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <main+0xd3c>)
 8001b4e:	701a      	strb	r2, [r3, #0]
					if(menu_pos == 3)
 8001b50:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <main+0xd10>)
 8001b52:	f993 3000 	ldrsb.w	r3, [r3]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d103      	bne.n	8001b62 <main+0xc42>
						changeDelay(-1);//decrement Delay
 8001b5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b5e:	f001 f879 	bl	8002c54 <changeDelay>
				}
				//can menu changes
				if(in_can_menu){
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <main+0xd1c>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 810b 	beq.w	8001d82 <main+0xe62>
					if(can_pos==1)
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <main+0xd20>)
 8001b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d103      	bne.n	8001b7e <main+0xc5e>
						changeBaudRate(-1);//decrement baud rate
 8001b76:	20ff      	movs	r0, #255	; 0xff
 8001b78:	f000 fe0e 	bl	8002798 <changeBaudRate>
 8001b7c:	e101      	b.n	8001d82 <main+0xe62>
					else if(can_pos>=2&&can_pos<=4)
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <main+0xd20>)
 8001b80:	f993 3000 	ldrsb.w	r3, [r3]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f340 80fc 	ble.w	8001d82 <main+0xe62>
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <main+0xd20>)
 8001b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	f300 80f6 	bgt.w	8001d82 <main+0xe62>
						changeCANID(-1);//decrement CAN ID
 8001b96:	20ff      	movs	r0, #255	; 0xff
 8001b98:	f000 fea4 	bl	80028e4 <changeCANID>
 8001b9c:	e0f1      	b.n	8001d82 <main+0xe62>
				}
			} else {
				//scroll menu down
				if(in_main_menu){
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <main+0xd38>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d05e      	beq.n	8001c64 <main+0xd44>
					menu_pos = (menu_pos+1)%main_menu_length;//increment menu position
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <main+0xd10>)
 8001ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bac:	3301      	adds	r3, #1
 8001bae:	2204      	movs	r2, #4
 8001bb0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bb4:	fb02 f201 	mul.w	r2, r2, r1
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	b25a      	sxtb	r2, r3
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <main+0xd10>)
 8001bbe:	701a      	strb	r2, [r3, #0]
					lcd_put_cur(0,0);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff f938 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <main+0xd10>)
 8001bca:	f993 3000 	ldrsb.w	r3, [r3]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <main+0xd14>)
 8001bd8:	4413      	add	r3, r2
 8001bda:	2210      	movs	r2, #16
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4816      	ldr	r0, [pc, #88]	; (8001c38 <main+0xd18>)
 8001be0:	f005 ff41 	bl	8007a66 <strncpy>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f982 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(1,0);
 8001bec:	2100      	movs	r1, #0
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7ff f922 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <main+0xd10>)
 8001bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c02:	fb02 f201 	mul.w	r2, r2, r1
 8001c06:	1a9a      	subs	r2, r3, r2
 8001c08:	4613      	mov	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <main+0xd14>)
 8001c10:	4413      	add	r3, r2
 8001c12:	2210      	movs	r2, #16
 8001c14:	4619      	mov	r1, r3
 8001c16:	4808      	ldr	r0, [pc, #32]	; (8001c38 <main+0xd18>)
 8001c18:	f005 ff25 	bl	8007a66 <strncpy>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f966 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff f906 	bl	8000e38 <lcd_put_cur>
 8001c2c:	e0a9      	b.n	8001d82 <main+0xe62>
 8001c2e:	bf00      	nop
 8001c30:	20000374 	.word	0x20000374
 8001c34:	20000004 	.word	0x20000004
 8001c38:	200003f4 	.word	0x200003f4
 8001c3c:	20000371 	.word	0x20000371
 8001c40:	20000375 	.word	0x20000375
 8001c44:	20000048 	.word	0x20000048
 8001c48:	20000372 	.word	0x20000372
 8001c4c:	20000376 	.word	0x20000376
 8001c50:	200000b0 	.word	0x200000b0
 8001c54:	48000800 	.word	0x48000800
 8001c58:	2000015a 	.word	0x2000015a
 8001c5c:	20000373 	.word	0x20000373
 8001c60:	55555556 	.word	0x55555556
				} else if(in_can_menu){
 8001c64:	4bb4      	ldr	r3, [pc, #720]	; (8001f38 <main+0x1018>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d043      	beq.n	8001cf4 <main+0xdd4>
					can_pos=(can_pos+1)%can_menu_length;//increment menu position
 8001c6c:	4bb3      	ldr	r3, [pc, #716]	; (8001f3c <main+0x101c>)
 8001c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c72:	3301      	adds	r3, #1
 8001c74:	2206      	movs	r2, #6
 8001c76:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c7a:	fb02 f201 	mul.w	r2, r2, r1
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	b25a      	sxtb	r2, r3
 8001c82:	4bae      	ldr	r3, [pc, #696]	; (8001f3c <main+0x101c>)
 8001c84:	701a      	strb	r2, [r3, #0]
					lcd_put_cur(0,0);
 8001c86:	2100      	movs	r1, #0
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff f8d5 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 8001c8e:	4bab      	ldr	r3, [pc, #684]	; (8001f3c <main+0x101c>)
 8001c90:	f993 3000 	ldrsb.w	r3, [r3]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4613      	mov	r3, r2
 8001c98:	011b      	lsls	r3, r3, #4
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4aa8      	ldr	r2, [pc, #672]	; (8001f40 <main+0x1020>)
 8001c9e:	4413      	add	r3, r2
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	48a7      	ldr	r0, [pc, #668]	; (8001f44 <main+0x1024>)
 8001ca6:	f005 fede 	bl	8007a66 <strncpy>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff f91f 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(1,0);
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7ff f8bf 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 8001cba:	4ba0      	ldr	r3, [pc, #640]	; (8001f3c <main+0x101c>)
 8001cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	2206      	movs	r2, #6
 8001cc4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cc8:	fb02 f201 	mul.w	r2, r2, r1
 8001ccc:	1a9a      	subs	r2, r3, r2
 8001cce:	4613      	mov	r3, r2
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a9a      	ldr	r2, [pc, #616]	; (8001f40 <main+0x1020>)
 8001cd6:	4413      	add	r3, r2
 8001cd8:	2210      	movs	r2, #16
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4899      	ldr	r0, [pc, #612]	; (8001f44 <main+0x1024>)
 8001cde:	f005 fec2 	bl	8007a66 <strncpy>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff f903 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(0,0);
 8001cea:	2100      	movs	r1, #0
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff f8a3 	bl	8000e38 <lcd_put_cur>
 8001cf2:	e046      	b.n	8001d82 <main+0xe62>
				} else if(in_analog_menu){
 8001cf4:	4b94      	ldr	r3, [pc, #592]	; (8001f48 <main+0x1028>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d042      	beq.n	8001d82 <main+0xe62>
					analog_pos=(analog_pos+1)%analog_menu_length;//increment menu position
 8001cfc:	4b93      	ldr	r3, [pc, #588]	; (8001f4c <main+0x102c>)
 8001cfe:	f993 3000 	ldrsb.w	r3, [r3]
 8001d02:	3301      	adds	r3, #1
 8001d04:	220a      	movs	r2, #10
 8001d06:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d0a:	fb02 f201 	mul.w	r2, r2, r1
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	b25a      	sxtb	r2, r3
 8001d12:	4b8e      	ldr	r3, [pc, #568]	; (8001f4c <main+0x102c>)
 8001d14:	701a      	strb	r2, [r3, #0]
					lcd_put_cur(0,0);
 8001d16:	2100      	movs	r1, #0
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff f88d 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 8001d1e:	4b8b      	ldr	r3, [pc, #556]	; (8001f4c <main+0x102c>)
 8001d20:	f993 3000 	ldrsb.w	r3, [r3]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4613      	mov	r3, r2
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4413      	add	r3, r2
 8001d2c:	4a88      	ldr	r2, [pc, #544]	; (8001f50 <main+0x1030>)
 8001d2e:	4413      	add	r3, r2
 8001d30:	2210      	movs	r2, #16
 8001d32:	4619      	mov	r1, r3
 8001d34:	4883      	ldr	r0, [pc, #524]	; (8001f44 <main+0x1024>)
 8001d36:	f005 fe96 	bl	8007a66 <strncpy>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f8d7 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(1,0);
 8001d42:	2100      	movs	r1, #0
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7ff f877 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 8001d4a:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <main+0x102c>)
 8001d4c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d50:	3301      	adds	r3, #1
 8001d52:	220a      	movs	r2, #10
 8001d54:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d58:	fb02 f201 	mul.w	r2, r2, r1
 8001d5c:	1a9a      	subs	r2, r3, r2
 8001d5e:	4613      	mov	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	4a7a      	ldr	r2, [pc, #488]	; (8001f50 <main+0x1030>)
 8001d66:	4413      	add	r3, r2
 8001d68:	2210      	movs	r2, #16
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4875      	ldr	r0, [pc, #468]	; (8001f44 <main+0x1024>)
 8001d6e:	f005 fe7a 	bl	8007a66 <strncpy>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f8bb 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(0,0);
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff f85b 	bl	8000e38 <lcd_put_cur>
				}

			}
			down_btn_pressed = 1; // set button value to pressed
 8001d82:	2301      	movs	r3, #1
 8001d84:	77bb      	strb	r3, [r7, #30]
			btn_counter=0;// reset button counter
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e018      	b.n	8001dbe <main+0xe9e>
		} else if ((down_btn_pressed==1&& !HAL_GPIO_ReadPin(DOWN_BTN_PORT, DOWN_BTN_PIN)&&btn_counter>1000)||(down_btn_pressed==1&&btn_counter>7000)){
 8001d8c:	7fbb      	ldrb	r3, [r7, #30]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10b      	bne.n	8001daa <main+0xe8a>
 8001d92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d96:	486f      	ldr	r0, [pc, #444]	; (8001f54 <main+0x1034>)
 8001d98:	f002 feb0 	bl	8004afc <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <main+0xe8a>
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001da8:	dc07      	bgt.n	8001dba <main+0xe9a>
 8001daa:	7fbb      	ldrb	r3, [r7, #30]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d106      	bne.n	8001dbe <main+0xe9e>
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001db6:	4293      	cmp	r3, r2
 8001db8:	dd01      	ble.n	8001dbe <main+0xe9e>
			down_btn_pressed = 0; // reset up button value
 8001dba:	2300      	movs	r3, #0
 8001dbc:	77bb      	strb	r3, [r7, #30]
		}

		//if the select button is pressed
		if(sel_btn_pressed==0 && HAL_GPIO_ReadPin(SEL_BTN_PORT, SEL_BTN_PIN)){
 8001dbe:	7f7b      	ldrb	r3, [r7, #29]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f040 821b 	bne.w	80021fc <main+0x12dc>
 8001dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dce:	f002 fe95 	bl	8004afc <HAL_GPIO_ReadPin>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 8211 	beq.w	80021fc <main+0x12dc>
			//set changes and reinitialize can bus
			if(!change_value_bool){
 8001dda:	7f3b      	ldrb	r3, [r7, #28]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 818e 	bne.w	80020fe <main+0x11de>
				if(in_main_menu){
 8001de2:	4b5d      	ldr	r3, [pc, #372]	; (8001f58 <main+0x1038>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80bc 	beq.w	8001f64 <main+0x1044>
					if(menu_pos==0){
 8001dec:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <main+0x103c>)
 8001dee:	f993 3000 	ldrsb.w	r3, [r3]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d143      	bne.n	8001e7e <main+0xf5e>
						//display can menu
						lcd_put_cur(0,0);
 8001df6:	2100      	movs	r1, #0
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff f81d 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 8001dfe:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <main+0x101c>)
 8001e00:	f993 3000 	ldrsb.w	r3, [r3]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4613      	mov	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <main+0x1020>)
 8001e0e:	4413      	add	r3, r2
 8001e10:	2210      	movs	r2, #16
 8001e12:	4619      	mov	r1, r3
 8001e14:	484b      	ldr	r0, [pc, #300]	; (8001f44 <main+0x1024>)
 8001e16:	f005 fe26 	bl	8007a66 <strncpy>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f867 	bl	8000ef0 <lcd_send_string>
						lcd_put_cur(1,0);
 8001e22:	2100      	movs	r1, #0
 8001e24:	2001      	movs	r0, #1
 8001e26:	f7ff f807 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 8001e2a:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <main+0x101c>)
 8001e2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e30:	3301      	adds	r3, #1
 8001e32:	2206      	movs	r2, #6
 8001e34:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e38:	fb02 f201 	mul.w	r2, r2, r1
 8001e3c:	1a9a      	subs	r2, r3, r2
 8001e3e:	4613      	mov	r3, r2
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	4413      	add	r3, r2
 8001e44:	4a3e      	ldr	r2, [pc, #248]	; (8001f40 <main+0x1020>)
 8001e46:	4413      	add	r3, r2
 8001e48:	2210      	movs	r2, #16
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	483d      	ldr	r0, [pc, #244]	; (8001f44 <main+0x1024>)
 8001e4e:	f005 fe0a 	bl	8007a66 <strncpy>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff f84b 	bl	8000ef0 <lcd_send_string>
						lcd_put_cur(0,0);
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7fe ffeb 	bl	8000e38 <lcd_put_cur>
						//update menu booleans
						in_can_menu=1;
 8001e62:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <main+0x1018>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
						in_main_menu=0;
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <main+0x1038>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
						change_value_bool=!change_value_bool;//invert change value bool
 8001e6e:	7f3b      	ldrb	r3, [r7, #28]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	773b      	strb	r3, [r7, #28]
 8001e7c:	e19f      	b.n	80021be <main+0x129e>
					} else if(menu_pos==1){
 8001e7e:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <main+0x103c>)
 8001e80:	f993 3000 	ldrsb.w	r3, [r3]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d143      	bne.n	8001f10 <main+0xff0>
						//display can menu
						lcd_put_cur(0,0);
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7fe ffd4 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <main+0x102c>)
 8001e92:	f993 3000 	ldrsb.w	r3, [r3]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4613      	mov	r3, r2
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a2c      	ldr	r2, [pc, #176]	; (8001f50 <main+0x1030>)
 8001ea0:	4413      	add	r3, r2
 8001ea2:	2210      	movs	r2, #16
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4827      	ldr	r0, [pc, #156]	; (8001f44 <main+0x1024>)
 8001ea8:	f005 fddd 	bl	8007a66 <strncpy>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f81e 	bl	8000ef0 <lcd_send_string>
						lcd_put_cur(1,0);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f7fe ffbe 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <main+0x102c>)
 8001ebe:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	220a      	movs	r2, #10
 8001ec6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001eca:	fb02 f201 	mul.w	r2, r2, r1
 8001ece:	1a9a      	subs	r2, r3, r2
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <main+0x1030>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	2210      	movs	r2, #16
 8001edc:	4619      	mov	r1, r3
 8001ede:	4819      	ldr	r0, [pc, #100]	; (8001f44 <main+0x1024>)
 8001ee0:	f005 fdc1 	bl	8007a66 <strncpy>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f802 	bl	8000ef0 <lcd_send_string>
						lcd_put_cur(0,0);
 8001eec:	2100      	movs	r1, #0
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7fe ffa2 	bl	8000e38 <lcd_put_cur>
						//update menu booleans
						in_analog_menu=1;
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <main+0x1028>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
						in_main_menu=0;
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <main+0x1038>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
						change_value_bool=!change_value_bool;//invert change value bool
 8001f00:	7f3b      	ldrb	r3, [r7, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf0c      	ite	eq
 8001f06:	2301      	moveq	r3, #1
 8001f08:	2300      	movne	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	773b      	strb	r3, [r7, #28]
 8001f0e:	e156      	b.n	80021be <main+0x129e>
					} else if (menu_pos==2){
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <main+0x103c>)
 8001f12:	f993 3000 	ldrsb.w	r3, [r3]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d103      	bne.n	8001f22 <main+0x1002>
						display_scroll=0;// reset display value menu position
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <main+0x1040>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	e14d      	b.n	80021be <main+0x129e>
					} else if (menu_pos==3){
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <main+0x103c>)
 8001f24:	f993 3000 	ldrsb.w	r3, [r3]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	f040 8148 	bne.w	80021be <main+0x129e>
						//move cursor for delay change
						lcd_put_cur(0,13);
 8001f2e:	210d      	movs	r1, #13
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7fe ff81 	bl	8000e38 <lcd_put_cur>
 8001f36:	e142      	b.n	80021be <main+0x129e>
 8001f38:	20000371 	.word	0x20000371
 8001f3c:	20000375 	.word	0x20000375
 8001f40:	20000048 	.word	0x20000048
 8001f44:	200003f4 	.word	0x200003f4
 8001f48:	20000372 	.word	0x20000372
 8001f4c:	20000376 	.word	0x20000376
 8001f50:	200000b0 	.word	0x200000b0
 8001f54:	48000800 	.word	0x48000800
 8001f58:	2000015a 	.word	0x2000015a
 8001f5c:	20000374 	.word	0x20000374
 8001f60:	20000373 	.word	0x20000373
					}
				} else if((in_can_menu&&can_pos==0)||(in_analog_menu&&analog_pos==0)){// back buttons
 8001f64:	4b9c      	ldr	r3, [pc, #624]	; (80021d8 <main+0x12b8>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <main+0x1056>
 8001f6c:	4b9b      	ldr	r3, [pc, #620]	; (80021dc <main+0x12bc>)
 8001f6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <main+0x1068>
 8001f76:	4b9a      	ldr	r3, [pc, #616]	; (80021e0 <main+0x12c0>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d04b      	beq.n	8002016 <main+0x10f6>
 8001f7e:	4b99      	ldr	r3, [pc, #612]	; (80021e4 <main+0x12c4>)
 8001f80:	f993 3000 	ldrsb.w	r3, [r3]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d146      	bne.n	8002016 <main+0x10f6>
					//display main menu
					lcd_put_cur(0,0);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7fe ff54 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8001f90:	4b95      	ldr	r3, [pc, #596]	; (80021e8 <main+0x12c8>)
 8001f92:	f993 3000 	ldrsb.w	r3, [r3]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4613      	mov	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a93      	ldr	r2, [pc, #588]	; (80021ec <main+0x12cc>)
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2210      	movs	r2, #16
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4892      	ldr	r0, [pc, #584]	; (80021f0 <main+0x12d0>)
 8001fa8:	f005 fd5d 	bl	8007a66 <strncpy>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe ff9e 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(1,0);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7fe ff3e 	bl	8000e38 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8001fbc:	4b8a      	ldr	r3, [pc, #552]	; (80021e8 <main+0x12c8>)
 8001fbe:	f993 3000 	ldrsb.w	r3, [r3]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fca:	fb02 f201 	mul.w	r2, r2, r1
 8001fce:	1a9a      	subs	r2, r3, r2
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a85      	ldr	r2, [pc, #532]	; (80021ec <main+0x12cc>)
 8001fd8:	4413      	add	r3, r2
 8001fda:	2210      	movs	r2, #16
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4884      	ldr	r0, [pc, #528]	; (80021f0 <main+0x12d0>)
 8001fe0:	f005 fd41 	bl	8007a66 <strncpy>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe ff82 	bl	8000ef0 <lcd_send_string>
					lcd_put_cur(0,0);
 8001fec:	2100      	movs	r1, #0
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7fe ff22 	bl	8000e38 <lcd_put_cur>
					//update menu booleans
					in_can_menu=0;
 8001ff4:	4b78      	ldr	r3, [pc, #480]	; (80021d8 <main+0x12b8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
					in_analog_menu=0;
 8001ffa:	4b79      	ldr	r3, [pc, #484]	; (80021e0 <main+0x12c0>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
					in_main_menu=1;
 8002000:	4b7c      	ldr	r3, [pc, #496]	; (80021f4 <main+0x12d4>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
					change_value_bool=!change_value_bool;//invert change value bool
 8002006:	7f3b      	ldrb	r3, [r7, #28]
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	773b      	strb	r3, [r7, #28]
 8002014:	e0d3      	b.n	80021be <main+0x129e>
				} else if (in_analog_menu){
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <main+0x12c0>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d057      	beq.n	80020ce <main+0x11ae>
					if(analog_pos>=1 && analog_pos<=4){
 800201e:	4b71      	ldr	r3, [pc, #452]	; (80021e4 <main+0x12c4>)
 8002020:	f993 3000 	ldrsb.w	r3, [r3]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dd15      	ble.n	8002054 <main+0x1134>
 8002028:	4b6e      	ldr	r3, [pc, #440]	; (80021e4 <main+0x12c4>)
 800202a:	f993 3000 	ldrsb.w	r3, [r3]
 800202e:	2b04      	cmp	r3, #4
 8002030:	dc10      	bgt.n	8002054 <main+0x1134>
						zeroAnalog(analog_pos-1);// set the analog offsets to the current value
 8002032:	4b6c      	ldr	r3, [pc, #432]	; (80021e4 <main+0x12c4>)
 8002034:	f993 3000 	ldrsb.w	r3, [r3]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fe8a 	bl	8002d58 <zeroAnalog>
						change_value_bool=!change_value_bool;//invert change value bool
 8002044:	7f3b      	ldrb	r3, [r7, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf0c      	ite	eq
 800204a:	2301      	moveq	r3, #1
 800204c:	2300      	movne	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	773b      	strb	r3, [r7, #28]
 8002052:	e0b4      	b.n	80021be <main+0x129e>
					}else if(analog_pos>=5 && analog_pos<=7){
 8002054:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <main+0x12c4>)
 8002056:	f993 3000 	ldrsb.w	r3, [r3]
 800205a:	2b04      	cmp	r3, #4
 800205c:	dd15      	ble.n	800208a <main+0x116a>
 800205e:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <main+0x12c4>)
 8002060:	f993 3000 	ldrsb.w	r3, [r3]
 8002064:	2b07      	cmp	r3, #7
 8002066:	dc10      	bgt.n	800208a <main+0x116a>
						toggleAnalog(analog_pos-4);
 8002068:	4b5e      	ldr	r3, [pc, #376]	; (80021e4 <main+0x12c4>)
 800206a:	f993 3000 	ldrsb.w	r3, [r3]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3b04      	subs	r3, #4
 8002072:	b2db      	uxtb	r3, r3
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fecd 	bl	8002e14 <toggleAnalog>
						change_value_bool=!change_value_bool;//invert change value bool
 800207a:	7f3b      	ldrb	r3, [r7, #28]
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	773b      	strb	r3, [r7, #28]
 8002088:	e099      	b.n	80021be <main+0x129e>
					}else if(analog_pos==8){
 800208a:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <main+0x12c4>)
 800208c:	f993 3000 	ldrsb.w	r3, [r3]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d109      	bne.n	80020a8 <main+0x1188>
						resetOffsets();// reset the analog offsets
 8002094:	f000 fea4 	bl	8002de0 <resetOffsets>
						change_value_bool =!change_value_bool;//invert change value bool
 8002098:	7f3b      	ldrb	r3, [r7, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	773b      	strb	r3, [r7, #28]
 80020a6:	e08a      	b.n	80021be <main+0x129e>
					}else if(analog_pos==9){
 80020a8:	4b4e      	ldr	r3, [pc, #312]	; (80021e4 <main+0x12c4>)
 80020aa:	f993 3000 	ldrsb.w	r3, [r3]
 80020ae:	2b09      	cmp	r3, #9
 80020b0:	f040 8085 	bne.w	80021be <main+0x129e>
						store_offsets=1;
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <main+0x12d8>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
						storeInFlash();// store the analog offsets
 80020ba:	f001 f9f7 	bl	80034ac <storeInFlash>
						change_value_bool=!change_value_bool;//invert change value bool
 80020be:	7f3b      	ldrb	r3, [r7, #28]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	773b      	strb	r3, [r7, #28]
 80020cc:	e077      	b.n	80021be <main+0x129e>
					}

				} else if (in_can_menu){
 80020ce:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <main+0x12b8>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00e      	beq.n	80020f4 <main+0x11d4>
					if(can_pos==5){
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <main+0x12bc>)
 80020d8:	f993 3000 	ldrsb.w	r3, [r3]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d16e      	bne.n	80021be <main+0x129e>
						resetCAN();// reset the CAN options to default
 80020e0:	f000 fd9c 	bl	8002c1c <resetCAN>
						change_value_bool=!change_value_bool;//invert change value bool
 80020e4:	7f3b      	ldrb	r3, [r7, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	773b      	strb	r3, [r7, #28]
 80020f2:	e064      	b.n	80021be <main+0x129e>
					}
				} else{
					//move cursor to end
					lcd_put_cur(0,15);
 80020f4:	210f      	movs	r1, #15
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7fe fe9e 	bl	8000e38 <lcd_put_cur>
 80020fc:	e05f      	b.n	80021be <main+0x129e>
				}

			}else{
				if(in_main_menu){
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <main+0x12d4>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d043      	beq.n	800218e <main+0x126e>
					if(menu_pos==2){ //display menu
 8002106:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <main+0x12c8>)
 8002108:	f993 3000 	ldrsb.w	r3, [r3]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d136      	bne.n	800217e <main+0x125e>
						lcd_put_cur(0,0);
 8002110:	2100      	movs	r1, #0
 8002112:	2000      	movs	r0, #0
 8002114:	f7fe fe90 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8002118:	4b33      	ldr	r3, [pc, #204]	; (80021e8 <main+0x12c8>)
 800211a:	f993 3000 	ldrsb.w	r3, [r3]
 800211e:	461a      	mov	r2, r3
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	4413      	add	r3, r2
 8002126:	4a31      	ldr	r2, [pc, #196]	; (80021ec <main+0x12cc>)
 8002128:	4413      	add	r3, r2
 800212a:	2210      	movs	r2, #16
 800212c:	4619      	mov	r1, r3
 800212e:	4830      	ldr	r0, [pc, #192]	; (80021f0 <main+0x12d0>)
 8002130:	f005 fc99 	bl	8007a66 <strncpy>
 8002134:	4603      	mov	r3, r0
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe feda 	bl	8000ef0 <lcd_send_string>
						lcd_put_cur(1,0);
 800213c:	2100      	movs	r1, #0
 800213e:	2001      	movs	r0, #1
 8002140:	f7fe fe7a 	bl	8000e38 <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <main+0x12c8>)
 8002146:	f993 3000 	ldrsb.w	r3, [r3]
 800214a:	3301      	adds	r3, #1
 800214c:	2204      	movs	r2, #4
 800214e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002152:	fb02 f201 	mul.w	r2, r2, r1
 8002156:	1a9a      	subs	r2, r3, r2
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4413      	add	r3, r2
 800215e:	4a23      	ldr	r2, [pc, #140]	; (80021ec <main+0x12cc>)
 8002160:	4413      	add	r3, r2
 8002162:	2210      	movs	r2, #16
 8002164:	4619      	mov	r1, r3
 8002166:	4822      	ldr	r0, [pc, #136]	; (80021f0 <main+0x12d0>)
 8002168:	f005 fc7d 	bl	8007a66 <strncpy>
 800216c:	4603      	mov	r3, r0
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe febe 	bl	8000ef0 <lcd_send_string>
						lcd_put_cur(0,0);
 8002174:	2100      	movs	r1, #0
 8002176:	2000      	movs	r0, #0
 8002178:	f7fe fe5e 	bl	8000e38 <lcd_put_cur>
 800217c:	e01f      	b.n	80021be <main+0x129e>
					}
					else if(menu_pos==3)
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <main+0x12c8>)
 8002180:	f993 3000 	ldrsb.w	r3, [r3]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d11a      	bne.n	80021be <main+0x129e>
						setDelay();//set Delay
 8002188:	f000 fd98 	bl	8002cbc <setDelay>
 800218c:	e017      	b.n	80021be <main+0x129e>
				}
				else if(in_can_menu){
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <main+0x12b8>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d013      	beq.n	80021be <main+0x129e>
					if(can_pos==1)
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <main+0x12bc>)
 8002198:	f993 3000 	ldrsb.w	r3, [r3]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d102      	bne.n	80021a6 <main+0x1286>
						setBaudRate(); // set and store the selected baud rate
 80021a0:	f000 fb36 	bl	8002810 <setBaudRate>
 80021a4:	e00b      	b.n	80021be <main+0x129e>
					else if(can_pos>=2 && can_pos<=4)
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <main+0x12bc>)
 80021a8:	f993 3000 	ldrsb.w	r3, [r3]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	dd06      	ble.n	80021be <main+0x129e>
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <main+0x12bc>)
 80021b2:	f993 3000 	ldrsb.w	r3, [r3]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	dc01      	bgt.n	80021be <main+0x129e>
						setCANID(); // set and store the selected can id
 80021ba:	f000 fc47 	bl	8002a4c <setCANID>
				}

			}
			change_value_bool=!change_value_bool;//invert change value bool
 80021be:	7f3b      	ldrb	r3, [r7, #28]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	773b      	strb	r3, [r7, #28]
			sel_btn_pressed=1;//set select button to pressed
 80021cc:	2301      	movs	r3, #1
 80021ce:	777b      	strb	r3, [r7, #29]
			btn_counter=0;// reset button counter
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	e024      	b.n	8002220 <main+0x1300>
 80021d6:	bf00      	nop
 80021d8:	20000371 	.word	0x20000371
 80021dc:	20000375 	.word	0x20000375
 80021e0:	20000372 	.word	0x20000372
 80021e4:	20000376 	.word	0x20000376
 80021e8:	20000374 	.word	0x20000374
 80021ec:	20000004 	.word	0x20000004
 80021f0:	200003f4 	.word	0x200003f4
 80021f4:	2000015a 	.word	0x2000015a
 80021f8:	20000370 	.word	0x20000370
		} else if (sel_btn_pressed==1 && !HAL_GPIO_ReadPin(SEL_BTN_PORT, SEL_BTN_PIN) && btn_counter>1000){
 80021fc:	7f7b      	ldrb	r3, [r7, #29]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d10e      	bne.n	8002220 <main+0x1300>
 8002202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220a:	f002 fc77 	bl	8004afc <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <main+0x1300>
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800221a:	dd01      	ble.n	8002220 <main+0x1300>
			sel_btn_pressed = 0; // reset select button value
 800221c:	2300      	movs	r3, #0
 800221e:	777b      	strb	r3, [r7, #29]
		}

		//Display analog values on display
		if(in_main_menu && menu_pos==2 && change_value_bool && display_counter==0)
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <main+0x13b0>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00c      	beq.n	8002242 <main+0x1322>
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <main+0x13b4>)
 800222a:	f993 3000 	ldrsb.w	r3, [r3]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d107      	bne.n	8002242 <main+0x1322>
 8002232:	7f3b      	ldrb	r3, [r7, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d004      	beq.n	8002242 <main+0x1322>
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <main+0x1322>
			displayValues();
 800223e:	f000 ff07 	bl	8003050 <displayValues>


		//increment counters
		analog_counter++;
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	3301      	adds	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
		display_counter++;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3301      	adds	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
		btn_counter++;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	3301      	adds	r3, #1
 8002252:	613b      	str	r3, [r7, #16]


		//Delay between samples
		while ((int16_t)__HAL_TIM_GET_COUNTER(&htim2) < us-timer_compensation-7);
 8002254:	bf00      	nop
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <main+0x13b8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	b21b      	sxth	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <main+0x13bc>)
 8002262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002266:	4619      	mov	r1, r3
 8002268:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800226c:	1acb      	subs	r3, r1, r3
 800226e:	3b07      	subs	r3, #7
 8002270:	429a      	cmp	r2, r3
 8002272:	dbf0      	blt.n	8002256 <main+0x1336>
		//compensation for when operations take longer than the specified delay
		if((int16_t)__HAL_TIM_GET_COUNTER(&htim2)>us)
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <main+0x13b8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	b21a      	sxth	r2, r3
 800227c:	4b17      	ldr	r3, [pc, #92]	; (80022dc <main+0x13bc>)
 800227e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002282:	429a      	cmp	r2, r3
 8002284:	dd0c      	ble.n	80022a0 <main+0x1380>
			timer_compensation=((int16_t)__HAL_TIM_GET_COUNTER(&htim2)-us);
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <main+0x13b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	b29a      	uxth	r2, r3
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <main+0x13bc>)
 8002290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002294:	b29b      	uxth	r3, r3
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	81fb      	strh	r3, [r7, #14]
 800229c:	f7ff b91f 	b.w	80014de <main+0x5be>
		else if(us-timer_compensation<0) // if the issue wasn't resolved in this loop
 80022a0:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <main+0x13bc>)
 80022a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a6:	461a      	mov	r2, r3
 80022a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da0a      	bge.n	80022c8 <main+0x13a8>
			timer_compensation-=(int16_t)__HAL_TIM_GET_COUNTER(&htim2);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <main+0x13b8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	89fa      	ldrh	r2, [r7, #14]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	81fb      	strh	r3, [r7, #14]
 80022c4:	f7ff b90b 	b.w	80014de <main+0x5be>
		else
			timer_compensation=0;//reset compensation
 80022c8:	2300      	movs	r3, #0
 80022ca:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(&htim2,0); // reset timer
 80022cc:	f7ff b907 	b.w	80014de <main+0x5be>
 80022d0:	2000015a 	.word	0x2000015a
 80022d4:	20000374 	.word	0x20000374
 80022d8:	200004f0 	.word	0x200004f0
 80022dc:	2000015c 	.word	0x2000015c

080022e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b09a      	sub	sp, #104	; 0x68
 80022e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022ea:	2228      	movs	r2, #40	; 0x28
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fcca 	bl	8006c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002304:	463b      	mov	r3, r7
 8002306:	222c      	movs	r2, #44	; 0x2c
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f004 fcbc 	bl	8006c88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002310:	2302      	movs	r3, #2
 8002312:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002314:	2301      	movs	r3, #1
 8002316:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002318:	2310      	movs	r3, #16
 800231a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800231c:	2300      	movs	r3, #0
 800231e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002320:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fc39 	bl	8004b9c <HAL_RCC_OscConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002330:	f001 f95e 	bl	80035f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002334:	230f      	movs	r3, #15
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002338:	2300      	movs	r3, #0
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800233c:	2300      	movs	r3, #0
 800233e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002344:	2300      	movs	r3, #0
 8002346:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f003 fb2c 	bl	80059ac <HAL_RCC_ClockConfig>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800235a:	f001 f949 	bl	80035f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDADC;
 800235e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002362:	603b      	str	r3, [r7, #0]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV4;
 8002364:	f04f 4308 	mov.w	r3, #2281701376	; 0x88000000
 8002368:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800236a:	463b      	mov	r3, r7
 800236c:	4618      	mov	r0, r3
 800236e:	f003 fd05 	bl	8005d7c <HAL_RCCEx_PeriphCLKConfig>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002378:	f001 f93a 	bl	80035f0 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 800237c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002380:	f002 fbec 	bl	8004b5c <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG2);
 8002384:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002388:	f002 fbe8 	bl	8004b5c <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 800238c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002390:	f002 fbe4 	bl	8004b5c <HAL_PWREx_EnableSDADC>
}
 8002394:	bf00      	nop
 8002396:	3768      	adds	r7, #104	; 0x68
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <MX_CAN_Init+0x7c>)
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <MX_CAN_Init+0x80>)
 80023a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <MX_CAN_Init+0x7c>)
 80023a8:	2202      	movs	r2, #2
 80023aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <MX_CAN_Init+0x7c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <MX_CAN_Init+0x7c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <MX_CAN_Init+0x7c>)
 80023ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023be:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <MX_CAN_Init+0x7c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <MX_CAN_Init+0x7c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <MX_CAN_Init+0x7c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_CAN_Init+0x7c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <MX_CAN_Init+0x7c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_CAN_Init+0x7c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_CAN_Init+0x7c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80023ea:	480b      	ldr	r0, [pc, #44]	; (8002418 <MX_CAN_Init+0x7c>)
 80023ec:	f001 fbfc 	bl	8003be8 <HAL_CAN_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80023f6:	f001 f8fb 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	//set the prescaler to the right value for the stored baud rate
	hcan.Init.Prescaler = PSC;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <MX_CAN_Init+0x84>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <MX_CAN_Init+0x7c>)
 8002402:	605a      	str	r2, [r3, #4]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002404:	4804      	ldr	r0, [pc, #16]	; (8002418 <MX_CAN_Init+0x7c>)
 8002406:	f001 fbef 	bl	8003be8 <HAL_CAN_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_CAN_Init+0x78>
	{
		Error_Handler();
 8002410:	f001 f8ee 	bl	80035f0 <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200003c8 	.word	0x200003c8
 800241c:	40006400 	.word	0x40006400
 8002420:	20000000 	.word	0x20000000

08002424 <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 800242a:	463b      	mov	r3, r7
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC1_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8002436:	4b17      	ldr	r3, [pc, #92]	; (8002494 <MX_SDADC1_Init+0x70>)
 8002438:	4a17      	ldr	r2, [pc, #92]	; (8002498 <MX_SDADC1_Init+0x74>)
 800243a:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <MX_SDADC1_Init+0x70>)
 800243e:	2200      	movs	r2, #0
 8002440:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <MX_SDADC1_Init+0x70>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <MX_SDADC1_Init+0x70>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <MX_SDADC1_Init+0x70>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8002454:	480f      	ldr	r0, [pc, #60]	; (8002494 <MX_SDADC1_Init+0x70>)
 8002456:	f003 fe05 	bl	8006064 <HAL_SDADC_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_SDADC1_Init+0x40>
  {
    Error_Handler();
 8002460:	f001 f8c6 	bl	80035f0 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8002464:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8002468:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8002476:	463b      	mov	r3, r7
 8002478:	461a      	mov	r2, r3
 800247a:	2100      	movs	r1, #0
 800247c:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_SDADC1_Init+0x70>)
 800247e:	f003 fe75 	bl	800616c <HAL_SDADC_PrepareChannelConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_SDADC1_Init+0x68>
  {
    Error_Handler();
 8002488:	f001 f8b2 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	2000043c 	.word	0x2000043c
 8002498:	40016000 	.word	0x40016000

0800249c <MX_SDADC2_Init>:
  * @brief SDADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC2_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC2_Init 0 */

  /* USER CODE END SDADC2_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 80024a2:	463b      	mov	r3, r7
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC2_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc2.Instance = SDADC2;
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <MX_SDADC2_Init+0x74>)
 80024b0:	4a18      	ldr	r2, [pc, #96]	; (8002514 <MX_SDADC2_Init+0x78>)
 80024b2:	601a      	str	r2, [r3, #0]
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_SDADC2_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	605a      	str	r2, [r3, #4]
  hsdadc2.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <MX_SDADC2_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  hsdadc2.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <MX_SDADC2_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
  hsdadc2.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <MX_SDADC2_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 80024cc:	4810      	ldr	r0, [pc, #64]	; (8002510 <MX_SDADC2_Init+0x74>)
 80024ce:	f003 fdc9 	bl	8006064 <HAL_SDADC_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_SDADC2_Init+0x40>
  {
    Error_Handler();
 80024d8:	f001 f88a 	bl	80035f0 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 80024dc:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80024e0:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VDDA;
 80024e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80024ea:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 80024f0:	463b      	mov	r3, r7
 80024f2:	461a      	mov	r2, r3
 80024f4:	2100      	movs	r1, #0
 80024f6:	4806      	ldr	r0, [pc, #24]	; (8002510 <MX_SDADC2_Init+0x74>)
 80024f8:	f003 fe38 	bl	800616c <HAL_SDADC_PrepareChannelConfig>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_SDADC2_Init+0x6a>
  {
    Error_Handler();
 8002502:	f001 f875 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC2_Init 2 */

  /* USER CODE END SDADC2_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000490 	.word	0x20000490
 8002514:	40016400 	.word	0x40016400

08002518 <MX_SDADC3_Init>:
  * @brief SDADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC3_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC3_Init 0 */

  /* USER CODE END SDADC3_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 800251e:	463b      	mov	r3, r7
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC3_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc3.Instance = SDADC3;
 800252a:	4b17      	ldr	r3, [pc, #92]	; (8002588 <MX_SDADC3_Init+0x70>)
 800252c:	4a17      	ldr	r2, [pc, #92]	; (800258c <MX_SDADC3_Init+0x74>)
 800252e:	601a      	str	r2, [r3, #0]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8002530:	4b15      	ldr	r3, [pc, #84]	; (8002588 <MX_SDADC3_Init+0x70>)
 8002532:	2200      	movs	r2, #0
 8002534:	605a      	str	r2, [r3, #4]
  hsdadc3.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <MX_SDADC3_Init+0x70>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <MX_SDADC3_Init+0x70>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8002542:	4b11      	ldr	r3, [pc, #68]	; (8002588 <MX_SDADC3_Init+0x70>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8002548:	480f      	ldr	r0, [pc, #60]	; (8002588 <MX_SDADC3_Init+0x70>)
 800254a:	f003 fd8b 	bl	8006064 <HAL_SDADC_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_SDADC3_Init+0x40>
  {
    Error_Handler();
 8002554:	f001 f84c 	bl	80035f0 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8002558:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800255c:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 800256a:	463b      	mov	r3, r7
 800256c:	461a      	mov	r2, r3
 800256e:	2100      	movs	r1, #0
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_SDADC3_Init+0x70>)
 8002572:	f003 fdfb 	bl	800616c <HAL_SDADC_PrepareChannelConfig>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_SDADC3_Init+0x68>
  {
    Error_Handler();
 800257c:	f001 f838 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC3_Init 2 */

  /* USER CODE END SDADC3_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000550 	.word	0x20000550
 800258c:	40016800 	.word	0x40016800

08002590 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	463b      	mov	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <MX_TIM2_Init+0x94>)
 80025ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <MX_TIM2_Init+0x94>)
 80025b6:	2207      	movs	r2, #7
 80025b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <MX_TIM2_Init+0x94>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <MX_TIM2_Init+0x94>)
 80025c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c8:	4b16      	ldr	r3, [pc, #88]	; (8002624 <MX_TIM2_Init+0x94>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <MX_TIM2_Init+0x94>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025d4:	4813      	ldr	r0, [pc, #76]	; (8002624 <MX_TIM2_Init+0x94>)
 80025d6:	f004 f811 	bl	80065fc <HAL_TIM_Base_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80025e0:	f001 f806 	bl	80035f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ea:	f107 0308 	add.w	r3, r7, #8
 80025ee:	4619      	mov	r1, r3
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <MX_TIM2_Init+0x94>)
 80025f2:	f004 f8b3 	bl	800675c <HAL_TIM_ConfigClockSource>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80025fc:	f000 fff8 	bl	80035f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002608:	463b      	mov	r3, r7
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_TIM2_Init+0x94>)
 800260e:	f004 fa9d 	bl	8006b4c <HAL_TIMEx_MasterConfigSynchronization>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002618:	f000 ffea 	bl	80035f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800261c:	bf00      	nop
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200004f0 	.word	0x200004f0

08002628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	4b52      	ldr	r3, [pc, #328]	; (8002788 <MX_GPIO_Init+0x160>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4a51      	ldr	r2, [pc, #324]	; (8002788 <MX_GPIO_Init+0x160>)
 8002644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002648:	6153      	str	r3, [r2, #20]
 800264a:	4b4f      	ldr	r3, [pc, #316]	; (8002788 <MX_GPIO_Init+0x160>)
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	4b4c      	ldr	r3, [pc, #304]	; (8002788 <MX_GPIO_Init+0x160>)
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	4a4b      	ldr	r2, [pc, #300]	; (8002788 <MX_GPIO_Init+0x160>)
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	6153      	str	r3, [r2, #20]
 8002662:	4b49      	ldr	r3, [pc, #292]	; (8002788 <MX_GPIO_Init+0x160>)
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266e:	4b46      	ldr	r3, [pc, #280]	; (8002788 <MX_GPIO_Init+0x160>)
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	4a45      	ldr	r2, [pc, #276]	; (8002788 <MX_GPIO_Init+0x160>)
 8002674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002678:	6153      	str	r3, [r2, #20]
 800267a:	4b43      	ldr	r3, [pc, #268]	; (8002788 <MX_GPIO_Init+0x160>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002686:	4b40      	ldr	r3, [pc, #256]	; (8002788 <MX_GPIO_Init+0x160>)
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	4a3f      	ldr	r2, [pc, #252]	; (8002788 <MX_GPIO_Init+0x160>)
 800268c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002690:	6153      	str	r3, [r2, #20]
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <MX_GPIO_Init+0x160>)
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800269e:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <MX_GPIO_Init+0x160>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4a39      	ldr	r2, [pc, #228]	; (8002788 <MX_GPIO_Init+0x160>)
 80026a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a8:	6153      	str	r3, [r2, #20]
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <MX_GPIO_Init+0x160>)
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b6:	4b34      	ldr	r3, [pc, #208]	; (8002788 <MX_GPIO_Init+0x160>)
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	4a33      	ldr	r2, [pc, #204]	; (8002788 <MX_GPIO_Init+0x160>)
 80026bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026c0:	6153      	str	r3, [r2, #20]
 80026c2:	4b31      	ldr	r3, [pc, #196]	; (8002788 <MX_GPIO_Init+0x160>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2192      	movs	r1, #146	; 0x92
 80026d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d6:	f002 fa29 	bl	8004b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80026da:	2200      	movs	r2, #0
 80026dc:	2103      	movs	r1, #3
 80026de:	482b      	ldr	r0, [pc, #172]	; (800278c <MX_GPIO_Init+0x164>)
 80026e0:	f002 fa24 	bl	8004b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80026ea:	4829      	ldr	r0, [pc, #164]	; (8002790 <MX_GPIO_Init+0x168>)
 80026ec:	f002 fa1e 	bl	8004b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fe:	f107 031c 	add.w	r3, r7, #28
 8002702:	4619      	mov	r1, r3
 8002704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002708:	f002 f87e 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 800270c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271a:	f107 031c 	add.w	r3, r7, #28
 800271e:	4619      	mov	r1, r3
 8002720:	481c      	ldr	r0, [pc, #112]	; (8002794 <MX_GPIO_Init+0x16c>)
 8002722:	f002 f871 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 8002726:	2392      	movs	r3, #146	; 0x92
 8002728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272a:	2301      	movs	r3, #1
 800272c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	2300      	movs	r3, #0
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002740:	f002 f862 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002744:	2303      	movs	r3, #3
 8002746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002748:	2301      	movs	r3, #1
 800274a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4619      	mov	r1, r3
 800275a:	480c      	ldr	r0, [pc, #48]	; (800278c <MX_GPIO_Init+0x164>)
 800275c:	f002 f854 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8002760:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002766:	2301      	movs	r3, #1
 8002768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002772:	f107 031c 	add.w	r3, r7, #28
 8002776:	4619      	mov	r1, r3
 8002778:	4805      	ldr	r0, [pc, #20]	; (8002790 <MX_GPIO_Init+0x168>)
 800277a:	f002 f845 	bl	8004808 <HAL_GPIO_Init>

}
 800277e:	bf00      	nop
 8002780:	3730      	adds	r7, #48	; 0x30
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	48000400 	.word	0x48000400
 8002790:	48001000 	.word	0x48001000
 8002794:	48000800 	.word	0x48000800

08002798 <changeBaudRate>:

/* USER CODE BEGIN 4 */
//changes the baud rate of the CAN connection
void changeBaudRate(uint8_t direction){
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
	baud_pos = ((baud_pos+direction)<0)?baud_rates_length-1:(baud_pos+direction)%baud_rates_length;//move baud rate position in given direction
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <changeBaudRate+0x70>)
 80027a4:	f993 3000 	ldrsb.w	r3, [r3]
 80027a8:	461a      	mov	r2, r3
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4413      	add	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da05      	bge.n	80027be <changeBaudRate+0x26>
 80027b2:	2304      	movs	r3, #4
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	e00c      	b.n	80027d8 <changeBaudRate+0x40>
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <changeBaudRate+0x70>)
 80027c0:	f993 3000 	ldrsb.w	r3, [r3]
 80027c4:	461a      	mov	r2, r3
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	4413      	add	r3, r2
 80027ca:	2204      	movs	r2, #4
 80027cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80027d0:	fb02 f201 	mul.w	r2, r2, r1
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <changeBaudRate+0x70>)
 80027da:	7013      	strb	r3, [r2, #0]

	//display the selected baud rate
	lcd_put_cur(0,12);
 80027dc:	210c      	movs	r1, #12
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe fb2a 	bl	8000e38 <lcd_put_cur>
	lcd_send_string(baud_rates[baud_pos]);
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <changeBaudRate+0x70>)
 80027e6:	f993 3000 	ldrsb.w	r3, [r3]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <changeBaudRate+0x74>)
 80027ee:	4413      	add	r3, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fb7d 	bl	8000ef0 <lcd_send_string>
	lcd_put_cur(0,15);
 80027f6:	210f      	movs	r1, #15
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe fb1d 	bl	8000e38 <lcd_put_cur>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000015b 	.word	0x2000015b
 800280c:	0800c678 	.word	0x0800c678

08002810 <setBaudRate>:

//set the baud rate and store it
void setBaudRate(void){
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
	//stop can bus
	HAL_CAN_Stop(&hcan);
 8002814:	482c      	ldr	r0, [pc, #176]	; (80028c8 <setBaudRate+0xb8>)
 8002816:	f001 fbf0 	bl	8003ffa <HAL_CAN_Stop>

	//set prescaler
	PSC=pow(2,4-baud_pos);
 800281a:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <setBaudRate+0xbc>)
 800281c:	f993 3000 	ldrsb.w	r3, [r3]
 8002820:	f1c3 0304 	rsb	r3, r3, #4
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fe7d 	bl	8000524 <__aeabi_i2d>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	ec43 2b11 	vmov	d1, r2, r3
 8002832:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80028c0 <setBaudRate+0xb0>
 8002836:	f008 feaf 	bl	800b598 <pow>
 800283a:	ec53 2b10 	vmov	r2, r3, d0
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f9b1 	bl	8000ba8 <__aeabi_d2uiz>
 8002846:	4603      	mov	r3, r0
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <setBaudRate+0xc0>)
 800284c:	701a      	strb	r2, [r3, #0]
	hcan.Init.Prescaler = PSC;
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <setBaudRate+0xc0>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <setBaudRate+0xb8>)
 8002856:	605a      	str	r2, [r3, #4]

	//reinitialize can
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002858:	481b      	ldr	r0, [pc, #108]	; (80028c8 <setBaudRate+0xb8>)
 800285a:	f001 f9c5 	bl	8003be8 <HAL_CAN_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <setBaudRate+0x58>
	{
		Error_Handler();
 8002864:	f000 fec4 	bl	80035f0 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002868:	4817      	ldr	r0, [pc, #92]	; (80028c8 <setBaudRate+0xb8>)
 800286a:	f001 fb82 	bl	8003f72 <HAL_CAN_Start>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <setBaudRate+0x68>
		Error_Handler();
 8002874:	f000 febc 	bl	80035f0 <Error_Handler>
	}

	//store new baud in flash
	storeInFlash();
 8002878:	f000 fe18 	bl	80034ac <storeInFlash>

	//save the baud rate in menu
	memset(temp,0,17); // erase the temp array
 800287c:	2211      	movs	r2, #17
 800287e:	2100      	movs	r1, #0
 8002880:	4814      	ldr	r0, [pc, #80]	; (80028d4 <setBaudRate+0xc4>)
 8002882:	f004 fa01 	bl	8006c88 <memset>
	strncpy(temp, "Baud rate:  ",16);
 8002886:	2210      	movs	r2, #16
 8002888:	4913      	ldr	r1, [pc, #76]	; (80028d8 <setBaudRate+0xc8>)
 800288a:	4812      	ldr	r0, [pc, #72]	; (80028d4 <setBaudRate+0xc4>)
 800288c:	f005 f8eb 	bl	8007a66 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <setBaudRate+0xbc>)
 8002892:	f993 3000 	ldrsb.w	r3, [r3]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4a10      	ldr	r2, [pc, #64]	; (80028dc <setBaudRate+0xcc>)
 800289a:	4413      	add	r3, r2
 800289c:	2211      	movs	r2, #17
 800289e:	4619      	mov	r1, r3
 80028a0:	480c      	ldr	r0, [pc, #48]	; (80028d4 <setBaudRate+0xc4>)
 80028a2:	f005 f8a8 	bl	80079f6 <strlcat>
	strlcpy(can_menu[1],temp,17);
 80028a6:	2211      	movs	r2, #17
 80028a8:	490a      	ldr	r1, [pc, #40]	; (80028d4 <setBaudRate+0xc4>)
 80028aa:	480d      	ldr	r0, [pc, #52]	; (80028e0 <setBaudRate+0xd0>)
 80028ac:	f005 f8c6 	bl	8007a3c <strlcpy>
	lcd_put_cur(0,0);
 80028b0:	2100      	movs	r1, #0
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe fac0 	bl	8000e38 <lcd_put_cur>
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	f3af 8000 	nop.w
 80028c0:	00000000 	.word	0x00000000
 80028c4:	40000000 	.word	0x40000000
 80028c8:	200003c8 	.word	0x200003c8
 80028cc:	2000015b 	.word	0x2000015b
 80028d0:	20000000 	.word	0x20000000
 80028d4:	200003f4 	.word	0x200003f4
 80028d8:	0800c508 	.word	0x0800c508
 80028dc:	0800c678 	.word	0x0800c678
 80028e0:	20000059 	.word	0x20000059

080028e4 <changeCANID>:

//changes the ID of the selected can device
void changeCANID(uint8_t direction){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
	if(can_pos==2){//change can id 1
 80028ee:	4b4f      	ldr	r3, [pc, #316]	; (8002a2c <changeCANID+0x148>)
 80028f0:	f993 3000 	ldrsb.w	r3, [r3]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d128      	bne.n	800294a <changeCANID+0x66>
		can_id_1+=direction;
 80028f8:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <changeCANID+0x14c>)
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	4413      	add	r3, r2
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <changeCANID+0x14c>)
 8002904:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 8002906:	e006      	b.n	8002916 <changeCANID+0x32>
			can_id_1+=direction;
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <changeCANID+0x14c>)
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	4413      	add	r3, r2
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <changeCANID+0x14c>)
 8002914:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 8002916:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <changeCANID+0x14c>)
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <changeCANID+0x150>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d0f2      	beq.n	8002908 <changeCANID+0x24>
 8002922:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <changeCANID+0x14c>)
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	4b44      	ldr	r3, [pc, #272]	; (8002a38 <changeCANID+0x154>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d0ec      	beq.n	8002908 <changeCANID+0x24>
		sprintf(char_arr, "%03d", can_id_1);
 800292e:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <changeCANID+0x14c>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	4941      	ldr	r1, [pc, #260]	; (8002a3c <changeCANID+0x158>)
 8002936:	4842      	ldr	r0, [pc, #264]	; (8002a40 <changeCANID+0x15c>)
 8002938:	f005 f82e 	bl	8007998 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 800293c:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <changeCANID+0x160>)
 800293e:	4a40      	ldr	r2, [pc, #256]	; (8002a40 <changeCANID+0x15c>)
 8002940:	8811      	ldrh	r1, [r2, #0]
 8002942:	7892      	ldrb	r2, [r2, #2]
 8002944:	8019      	strh	r1, [r3, #0]
 8002946:	709a      	strb	r2, [r3, #2]
 8002948:	e05a      	b.n	8002a00 <changeCANID+0x11c>
	} else if(can_pos==3){//change can id 2
 800294a:	4b38      	ldr	r3, [pc, #224]	; (8002a2c <changeCANID+0x148>)
 800294c:	f993 3000 	ldrsb.w	r3, [r3]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d128      	bne.n	80029a6 <changeCANID+0xc2>
		can_id_2+=direction;
 8002954:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <changeCANID+0x150>)
 8002956:	781a      	ldrb	r2, [r3, #0]
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	4413      	add	r3, r2
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <changeCANID+0x150>)
 8002960:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 8002962:	e006      	b.n	8002972 <changeCANID+0x8e>
			can_id_2+=direction;
 8002964:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <changeCANID+0x150>)
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	4413      	add	r3, r2
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <changeCANID+0x150>)
 8002970:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 8002972:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <changeCANID+0x150>)
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <changeCANID+0x14c>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d0f2      	beq.n	8002964 <changeCANID+0x80>
 800297e:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <changeCANID+0x150>)
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <changeCANID+0x154>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d0ec      	beq.n	8002964 <changeCANID+0x80>
		sprintf(char_arr, "%03d", can_id_2);
 800298a:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <changeCANID+0x150>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	492a      	ldr	r1, [pc, #168]	; (8002a3c <changeCANID+0x158>)
 8002992:	482b      	ldr	r0, [pc, #172]	; (8002a40 <changeCANID+0x15c>)
 8002994:	f005 f800 	bl	8007998 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <changeCANID+0x160>)
 800299a:	4a29      	ldr	r2, [pc, #164]	; (8002a40 <changeCANID+0x15c>)
 800299c:	8811      	ldrh	r1, [r2, #0]
 800299e:	7892      	ldrb	r2, [r2, #2]
 80029a0:	8019      	strh	r1, [r3, #0]
 80029a2:	709a      	strb	r2, [r3, #2]
 80029a4:	e02c      	b.n	8002a00 <changeCANID+0x11c>
	} else if(can_pos==4){// change can id 3
 80029a6:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <changeCANID+0x148>)
 80029a8:	f993 3000 	ldrsb.w	r3, [r3]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d127      	bne.n	8002a00 <changeCANID+0x11c>
		can_id_3+=direction;
 80029b0:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <changeCANID+0x154>)
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	4413      	add	r3, r2
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <changeCANID+0x154>)
 80029bc:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 80029be:	e006      	b.n	80029ce <changeCANID+0xea>
			can_id_3+=direction;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <changeCANID+0x154>)
 80029c2:	781a      	ldrb	r2, [r3, #0]
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	4413      	add	r3, r2
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <changeCANID+0x154>)
 80029cc:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <changeCANID+0x154>)
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <changeCANID+0x14c>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d0f2      	beq.n	80029c0 <changeCANID+0xdc>
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <changeCANID+0x154>)
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <changeCANID+0x150>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d0ec      	beq.n	80029c0 <changeCANID+0xdc>
		sprintf(char_arr, "%03d", can_id_3);
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <changeCANID+0x154>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	4913      	ldr	r1, [pc, #76]	; (8002a3c <changeCANID+0x158>)
 80029ee:	4814      	ldr	r0, [pc, #80]	; (8002a40 <changeCANID+0x15c>)
 80029f0:	f004 ffd2 	bl	8007998 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <changeCANID+0x160>)
 80029f6:	4a12      	ldr	r2, [pc, #72]	; (8002a40 <changeCANID+0x15c>)
 80029f8:	8811      	ldrh	r1, [r2, #0]
 80029fa:	7892      	ldrb	r2, [r2, #2]
 80029fc:	8019      	strh	r1, [r3, #0]
 80029fe:	709a      	strb	r2, [r3, #2]
	}
	//display the selected CAN ID
	lcd_put_cur(0,13);
 8002a00:	210d      	movs	r1, #13
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe fa18 	bl	8000e38 <lcd_put_cur>
	lcd_send_string("    ");
 8002a08:	480f      	ldr	r0, [pc, #60]	; (8002a48 <changeCANID+0x164>)
 8002a0a:	f7fe fa71 	bl	8000ef0 <lcd_send_string>
	lcd_put_cur(0,13);
 8002a0e:	210d      	movs	r1, #13
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe fa11 	bl	8000e38 <lcd_put_cur>
	lcd_send_string(modified_can_id);
 8002a16:	480b      	ldr	r0, [pc, #44]	; (8002a44 <changeCANID+0x160>)
 8002a18:	f7fe fa6a 	bl	8000ef0 <lcd_send_string>
	lcd_put_cur(0,15);
 8002a1c:	210f      	movs	r1, #15
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe fa0a 	bl	8000e38 <lcd_put_cur>
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000375 	.word	0x20000375
 8002a30:	200004d4 	.word	0x200004d4
 8002a34:	2000040c 	.word	0x2000040c
 8002a38:	20000384 	.word	0x20000384
 8002a3c:	0800c528 	.word	0x0800c528
 8002a40:	20000540 	.word	0x20000540
 8002a44:	2000053c 	.word	0x2000053c
 8002a48:	0800c5b8 	.word	0x0800c5b8

08002a4c <setCANID>:

//set the can IDs
void setCANID(void){
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	headers_1.StdId = can_id_1; // set CAN ID 1
 8002a50:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <setCANID+0x194>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b63      	ldr	r3, [pc, #396]	; (8002be4 <setCANID+0x198>)
 8002a58:	601a      	str	r2, [r3, #0]
	headers_2.StdId = can_id_2; // set CAN ID 2
 8002a5a:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <setCANID+0x19c>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4b62      	ldr	r3, [pc, #392]	; (8002bec <setCANID+0x1a0>)
 8002a62:	601a      	str	r2, [r3, #0]
	headers_3.StdId = can_id_3; // set CAN ID 3
 8002a64:	4b62      	ldr	r3, [pc, #392]	; (8002bf0 <setCANID+0x1a4>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b62      	ldr	r3, [pc, #392]	; (8002bf4 <setCANID+0x1a8>)
 8002a6c:	601a      	str	r2, [r3, #0]

	//Store the CAN IDs
	id_arr[0]=can_id_1;
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	; (8002be0 <setCANID+0x194>)
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <setCANID+0x1ac>)
 8002a74:	701a      	strb	r2, [r3, #0]
	id_arr[1]=can_id_2;
 8002a76:	4b5c      	ldr	r3, [pc, #368]	; (8002be8 <setCANID+0x19c>)
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	4b5f      	ldr	r3, [pc, #380]	; (8002bf8 <setCANID+0x1ac>)
 8002a7c:	705a      	strb	r2, [r3, #1]
	id_arr[2]=can_id_3;
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <setCANID+0x1a4>)
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	4b5d      	ldr	r3, [pc, #372]	; (8002bf8 <setCANID+0x1ac>)
 8002a84:	709a      	strb	r2, [r3, #2]
	id_arr[3]=0;
 8002a86:	4b5c      	ldr	r3, [pc, #368]	; (8002bf8 <setCANID+0x1ac>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	70da      	strb	r2, [r3, #3]

	storeInFlash();
 8002a8c:	f000 fd0e 	bl	80034ac <storeInFlash>


	//save can IDs in menu
	//can id 1
	memset(temp,0,17); // erase the temp array
 8002a90:	2211      	movs	r2, #17
 8002a92:	2100      	movs	r1, #0
 8002a94:	4859      	ldr	r0, [pc, #356]	; (8002bfc <setCANID+0x1b0>)
 8002a96:	f004 f8f7 	bl	8006c88 <memset>
	strncpy(temp, "CAN ID ",16);
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	4958      	ldr	r1, [pc, #352]	; (8002c00 <setCANID+0x1b4>)
 8002a9e:	4857      	ldr	r0, [pc, #348]	; (8002bfc <setCANID+0x1b0>)
 8002aa0:	f004 ffe1 	bl	8007a66 <strncpy>
	strcat(temp, "1:    ");
 8002aa4:	4855      	ldr	r0, [pc, #340]	; (8002bfc <setCANID+0x1b0>)
 8002aa6:	f7fd fb93 	bl	80001d0 <strlen>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <setCANID+0x1b0>)
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a54      	ldr	r2, [pc, #336]	; (8002c04 <setCANID+0x1b8>)
 8002ab4:	6810      	ldr	r0, [r2, #0]
 8002ab6:	6018      	str	r0, [r3, #0]
 8002ab8:	8891      	ldrh	r1, [r2, #4]
 8002aba:	7992      	ldrb	r2, [r2, #6]
 8002abc:	8099      	strh	r1, [r3, #4]
 8002abe:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4850      	ldr	r0, [pc, #320]	; (8002c08 <setCANID+0x1bc>)
 8002ac6:	f004 f8df 	bl	8006c88 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8002aca:	4b45      	ldr	r3, [pc, #276]	; (8002be0 <setCANID+0x194>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	494e      	ldr	r1, [pc, #312]	; (8002c0c <setCANID+0x1c0>)
 8002ad2:	484d      	ldr	r0, [pc, #308]	; (8002c08 <setCANID+0x1bc>)
 8002ad4:	f004 ff60 	bl	8007998 <siprintf>
	strlcat(temp, char_arr,17);
 8002ad8:	2211      	movs	r2, #17
 8002ada:	494b      	ldr	r1, [pc, #300]	; (8002c08 <setCANID+0x1bc>)
 8002adc:	4847      	ldr	r0, [pc, #284]	; (8002bfc <setCANID+0x1b0>)
 8002ade:	f004 ff8a 	bl	80079f6 <strlcat>
	memcpy(can_menu[2],temp,17);
 8002ae2:	4b4b      	ldr	r3, [pc, #300]	; (8002c10 <setCANID+0x1c4>)
 8002ae4:	4a45      	ldr	r2, [pc, #276]	; (8002bfc <setCANID+0x1b0>)
 8002ae6:	3322      	adds	r3, #34	; 0x22
 8002ae8:	6815      	ldr	r5, [r2, #0]
 8002aea:	6854      	ldr	r4, [r2, #4]
 8002aec:	6890      	ldr	r0, [r2, #8]
 8002aee:	68d1      	ldr	r1, [r2, #12]
 8002af0:	601d      	str	r5, [r3, #0]
 8002af2:	605c      	str	r4, [r3, #4]
 8002af4:	6098      	str	r0, [r3, #8]
 8002af6:	60d9      	str	r1, [r3, #12]
 8002af8:	7c12      	ldrb	r2, [r2, #16]
 8002afa:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 8002afc:	2211      	movs	r2, #17
 8002afe:	2100      	movs	r1, #0
 8002b00:	483e      	ldr	r0, [pc, #248]	; (8002bfc <setCANID+0x1b0>)
 8002b02:	f004 f8c1 	bl	8006c88 <memset>
	strncpy(temp, "CAN ID ",16);
 8002b06:	2210      	movs	r2, #16
 8002b08:	493d      	ldr	r1, [pc, #244]	; (8002c00 <setCANID+0x1b4>)
 8002b0a:	483c      	ldr	r0, [pc, #240]	; (8002bfc <setCANID+0x1b0>)
 8002b0c:	f004 ffab 	bl	8007a66 <strncpy>
	strcat(temp, "2:    ");
 8002b10:	483a      	ldr	r0, [pc, #232]	; (8002bfc <setCANID+0x1b0>)
 8002b12:	f7fd fb5d 	bl	80001d0 <strlen>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <setCANID+0x1b0>)
 8002b1c:	4413      	add	r3, r2
 8002b1e:	4a3d      	ldr	r2, [pc, #244]	; (8002c14 <setCANID+0x1c8>)
 8002b20:	6810      	ldr	r0, [r2, #0]
 8002b22:	6018      	str	r0, [r3, #0]
 8002b24:	8891      	ldrh	r1, [r2, #4]
 8002b26:	7992      	ldrb	r2, [r2, #6]
 8002b28:	8099      	strh	r1, [r3, #4]
 8002b2a:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4835      	ldr	r0, [pc, #212]	; (8002c08 <setCANID+0x1bc>)
 8002b32:	f004 f8a9 	bl	8006c88 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 8002b36:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <setCANID+0x19c>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4933      	ldr	r1, [pc, #204]	; (8002c0c <setCANID+0x1c0>)
 8002b3e:	4832      	ldr	r0, [pc, #200]	; (8002c08 <setCANID+0x1bc>)
 8002b40:	f004 ff2a 	bl	8007998 <siprintf>
	strlcat(temp, char_arr,17);
 8002b44:	2211      	movs	r2, #17
 8002b46:	4930      	ldr	r1, [pc, #192]	; (8002c08 <setCANID+0x1bc>)
 8002b48:	482c      	ldr	r0, [pc, #176]	; (8002bfc <setCANID+0x1b0>)
 8002b4a:	f004 ff54 	bl	80079f6 <strlcat>
	memcpy(can_menu[3],temp,17);
 8002b4e:	4b30      	ldr	r3, [pc, #192]	; (8002c10 <setCANID+0x1c4>)
 8002b50:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <setCANID+0x1b0>)
 8002b52:	3333      	adds	r3, #51	; 0x33
 8002b54:	6815      	ldr	r5, [r2, #0]
 8002b56:	6854      	ldr	r4, [r2, #4]
 8002b58:	6890      	ldr	r0, [r2, #8]
 8002b5a:	68d1      	ldr	r1, [r2, #12]
 8002b5c:	601d      	str	r5, [r3, #0]
 8002b5e:	605c      	str	r4, [r3, #4]
 8002b60:	6098      	str	r0, [r3, #8]
 8002b62:	60d9      	str	r1, [r3, #12]
 8002b64:	7c12      	ldrb	r2, [r2, #16]
 8002b66:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 8002b68:	2211      	movs	r2, #17
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4823      	ldr	r0, [pc, #140]	; (8002bfc <setCANID+0x1b0>)
 8002b6e:	f004 f88b 	bl	8006c88 <memset>
	strncpy(temp, "CAN ID ",16);
 8002b72:	2210      	movs	r2, #16
 8002b74:	4922      	ldr	r1, [pc, #136]	; (8002c00 <setCANID+0x1b4>)
 8002b76:	4821      	ldr	r0, [pc, #132]	; (8002bfc <setCANID+0x1b0>)
 8002b78:	f004 ff75 	bl	8007a66 <strncpy>
	strcat(temp, "3:    ");
 8002b7c:	481f      	ldr	r0, [pc, #124]	; (8002bfc <setCANID+0x1b0>)
 8002b7e:	f7fd fb27 	bl	80001d0 <strlen>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <setCANID+0x1b0>)
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <setCANID+0x1cc>)
 8002b8c:	6810      	ldr	r0, [r2, #0]
 8002b8e:	6018      	str	r0, [r3, #0]
 8002b90:	8891      	ldrh	r1, [r2, #4]
 8002b92:	7992      	ldrb	r2, [r2, #6]
 8002b94:	8099      	strh	r1, [r3, #4]
 8002b96:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002b98:	2210      	movs	r2, #16
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	481a      	ldr	r0, [pc, #104]	; (8002c08 <setCANID+0x1bc>)
 8002b9e:	f004 f873 	bl	8006c88 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <setCANID+0x1a4>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4918      	ldr	r1, [pc, #96]	; (8002c0c <setCANID+0x1c0>)
 8002baa:	4817      	ldr	r0, [pc, #92]	; (8002c08 <setCANID+0x1bc>)
 8002bac:	f004 fef4 	bl	8007998 <siprintf>
	strlcat(temp, char_arr,17);
 8002bb0:	2211      	movs	r2, #17
 8002bb2:	4915      	ldr	r1, [pc, #84]	; (8002c08 <setCANID+0x1bc>)
 8002bb4:	4811      	ldr	r0, [pc, #68]	; (8002bfc <setCANID+0x1b0>)
 8002bb6:	f004 ff1e 	bl	80079f6 <strlcat>
	memcpy(can_menu[4],temp,17);
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <setCANID+0x1c4>)
 8002bbc:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <setCANID+0x1b0>)
 8002bbe:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8002bc2:	4615      	mov	r5, r2
 8002bc4:	6828      	ldr	r0, [r5, #0]
 8002bc6:	6869      	ldr	r1, [r5, #4]
 8002bc8:	68aa      	ldr	r2, [r5, #8]
 8002bca:	68eb      	ldr	r3, [r5, #12]
 8002bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bce:	7c2b      	ldrb	r3, [r5, #16]
 8002bd0:	7023      	strb	r3, [r4, #0]

	lcd_put_cur(0,0);
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fe f92f 	bl	8000e38 <lcd_put_cur>
}
 8002bda:	bf00      	nop
 8002bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200004d4 	.word	0x200004d4
 8002be4:	200003b0 	.word	0x200003b0
 8002be8:	2000040c 	.word	0x2000040c
 8002bec:	200004d8 	.word	0x200004d8
 8002bf0:	20000384 	.word	0x20000384
 8002bf4:	20000398 	.word	0x20000398
 8002bf8:	20000390 	.word	0x20000390
 8002bfc:	200003f4 	.word	0x200003f4
 8002c00:	0800c518 	.word	0x0800c518
 8002c04:	0800c520 	.word	0x0800c520
 8002c08:	20000540 	.word	0x20000540
 8002c0c:	0800c528 	.word	0x0800c528
 8002c10:	20000048 	.word	0x20000048
 8002c14:	0800c530 	.word	0x0800c530
 8002c18:	0800c538 	.word	0x0800c538

08002c1c <resetCAN>:

//reset CAN Variables
void resetCAN(void){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
	//reset IDs
	can_id_1=1;
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <resetCAN+0x28>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
	can_id_2=2;
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <resetCAN+0x2c>)
 8002c28:	2202      	movs	r2, #2
 8002c2a:	701a      	strb	r2, [r3, #0]
	can_id_3=3;
 8002c2c:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <resetCAN+0x30>)
 8002c2e:	2203      	movs	r2, #3
 8002c30:	701a      	strb	r2, [r3, #0]
	setCANID();
 8002c32:	f7ff ff0b 	bl	8002a4c <setCANID>

	//reset baud rate to 1M
	baud_pos=3;
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <resetCAN+0x34>)
 8002c38:	2203      	movs	r2, #3
 8002c3a:	701a      	strb	r2, [r3, #0]
	setBaudRate();
 8002c3c:	f7ff fde8 	bl	8002810 <setBaudRate>
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200004d4 	.word	0x200004d4
 8002c48:	2000040c 	.word	0x2000040c
 8002c4c:	20000384 	.word	0x20000384
 8002c50:	2000015b 	.word	0x2000015b

08002c54 <changeDelay>:

//change the number of delays between samples
void changeDelay(uint16_t direction){
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
	num_delays+=direction;//move num_delays in given direction
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <changeDelay+0x5c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <changeDelay+0x5c>)
 8002c6c:	701a      	strb	r2, [r3, #0]

	//display new delay in microseconds
	lcd_put_cur(0,9);
 8002c6e:	2109      	movs	r1, #9
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fe f8e1 	bl	8000e38 <lcd_put_cur>
	char temp_arr[5];
	sprintf(temp_arr, "%05d", us*(num_delays+1));
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <changeDelay+0x60>)
 8002c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <changeDelay+0x5c>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	fb03 f202 	mul.w	r2, r3, r2
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	490a      	ldr	r1, [pc, #40]	; (8002cb8 <changeDelay+0x64>)
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f004 fe82 	bl	8007998 <siprintf>
	lcd_send_string(temp_arr);
 8002c94:	f107 0308 	add.w	r3, r7, #8
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe f929 	bl	8000ef0 <lcd_send_string>
	lcd_put_cur(0,13);
 8002c9e:	210d      	movs	r1, #13
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fe f8c9 	bl	8000e38 <lcd_put_cur>
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000377 	.word	0x20000377
 8002cb4:	2000015c 	.word	0x2000015c
 8002cb8:	0800c54c 	.word	0x0800c54c

08002cbc <setDelay>:

//change the prescaler to achieve the desired baud rate and reinitialize the can bus
void setDelay(void){
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
	//sore the nmber of delays in flash
	storeInFlash();
 8002cc0:	f000 fbf4 	bl	80034ac <storeInFlash>

	//save the delay in microseconds in menu
	memset(temp,0,17); // erase the temp array
 8002cc4:	2211      	movs	r2, #17
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	481b      	ldr	r0, [pc, #108]	; (8002d38 <setDelay+0x7c>)
 8002cca:	f003 ffdd 	bl	8006c88 <memset>
	strncpy(temp, "Delay:   ",16);
 8002cce:	2210      	movs	r2, #16
 8002cd0:	491a      	ldr	r1, [pc, #104]	; (8002d3c <setDelay+0x80>)
 8002cd2:	4819      	ldr	r0, [pc, #100]	; (8002d38 <setDelay+0x7c>)
 8002cd4:	f004 fec7 	bl	8007a66 <strncpy>
	memset(char_arr, 0, 16);
 8002cd8:	2210      	movs	r2, #16
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4818      	ldr	r0, [pc, #96]	; (8002d40 <setDelay+0x84>)
 8002cde:	f003 ffd3 	bl	8006c88 <memset>
	sprintf(char_arr, "%05d", us*(num_delays+1));
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <setDelay+0x88>)
 8002ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <setDelay+0x8c>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	fb03 f302 	mul.w	r3, r3, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4915      	ldr	r1, [pc, #84]	; (8002d4c <setDelay+0x90>)
 8002cf8:	4811      	ldr	r0, [pc, #68]	; (8002d40 <setDelay+0x84>)
 8002cfa:	f004 fe4d 	bl	8007998 <siprintf>
	strcat(temp, char_arr);
 8002cfe:	4910      	ldr	r1, [pc, #64]	; (8002d40 <setDelay+0x84>)
 8002d00:	480d      	ldr	r0, [pc, #52]	; (8002d38 <setDelay+0x7c>)
 8002d02:	f004 fe69 	bl	80079d8 <strcat>
	strlcat(temp,"us",17);
 8002d06:	2211      	movs	r2, #17
 8002d08:	4911      	ldr	r1, [pc, #68]	; (8002d50 <setDelay+0x94>)
 8002d0a:	480b      	ldr	r0, [pc, #44]	; (8002d38 <setDelay+0x7c>)
 8002d0c:	f004 fe73 	bl	80079f6 <strlcat>
	memcpy(main_menu[3],temp,17);
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <setDelay+0x98>)
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <setDelay+0x7c>)
 8002d14:	3333      	adds	r3, #51	; 0x33
 8002d16:	6815      	ldr	r5, [r2, #0]
 8002d18:	6854      	ldr	r4, [r2, #4]
 8002d1a:	6890      	ldr	r0, [r2, #8]
 8002d1c:	68d1      	ldr	r1, [r2, #12]
 8002d1e:	601d      	str	r5, [r3, #0]
 8002d20:	605c      	str	r4, [r3, #4]
 8002d22:	6098      	str	r0, [r3, #8]
 8002d24:	60d9      	str	r1, [r3, #12]
 8002d26:	7c12      	ldrb	r2, [r2, #16]
 8002d28:	741a      	strb	r2, [r3, #16]
	lcd_put_cur(0,0);
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fe f883 	bl	8000e38 <lcd_put_cur>
}
 8002d32:	bf00      	nop
 8002d34:	bdb0      	pop	{r4, r5, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200003f4 	.word	0x200003f4
 8002d3c:	0800c540 	.word	0x0800c540
 8002d40:	20000540 	.word	0x20000540
 8002d44:	2000015c 	.word	0x2000015c
 8002d48:	20000377 	.word	0x20000377
 8002d4c:	0800c54c 	.word	0x0800c54c
 8002d50:	0800c554 	.word	0x0800c554
 8002d54:	20000004 	.word	0x20000004

08002d58 <zeroAnalog>:

//sets an offset for the specified analog value
void zeroAnalog(uint8_t analog_id){
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
	if(analog_id==0){//zero all
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10f      	bne.n	8002d88 <zeroAnalog+0x30>
		analog_1_offset = raw_1;
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <zeroAnalog+0x70>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <zeroAnalog+0x74>)
 8002d70:	601a      	str	r2, [r3, #0]
		analog_2_offset = raw_2;
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <zeroAnalog+0x78>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <zeroAnalog+0x7c>)
 8002d7a:	601a      	str	r2, [r3, #0]
		analog_3_offset = raw_3;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <zeroAnalog+0x80>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <zeroAnalog+0x84>)
 8002d84:	601a      	str	r2, [r3, #0]
		analog_1_offset = raw_1;
	else if(analog_id==2)//zero 2
		analog_2_offset = raw_2;
	else if(analog_id==3)//zero 3
		analog_3_offset = raw_3;
}
 8002d86:	e019      	b.n	8002dbc <zeroAnalog+0x64>
	}else if(analog_id==1)//zero 1
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d105      	bne.n	8002d9a <zeroAnalog+0x42>
		analog_1_offset = raw_1;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <zeroAnalog+0x70>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <zeroAnalog+0x74>)
 8002d96:	601a      	str	r2, [r3, #0]
}
 8002d98:	e010      	b.n	8002dbc <zeroAnalog+0x64>
	else if(analog_id==2)//zero 2
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d105      	bne.n	8002dac <zeroAnalog+0x54>
		analog_2_offset = raw_2;
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <zeroAnalog+0x78>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <zeroAnalog+0x7c>)
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	e007      	b.n	8002dbc <zeroAnalog+0x64>
	else if(analog_id==3)//zero 3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d104      	bne.n	8002dbc <zeroAnalog+0x64>
		analog_3_offset = raw_3;
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <zeroAnalog+0x80>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <zeroAnalog+0x84>)
 8002dba:	601a      	str	r2, [r3, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	20000394 	.word	0x20000394
 8002dcc:	20000364 	.word	0x20000364
 8002dd0:	20000484 	.word	0x20000484
 8002dd4:	20000368 	.word	0x20000368
 8002dd8:	2000038c 	.word	0x2000038c
 8002ddc:	2000036c 	.word	0x2000036c

08002de0 <resetOffsets>:

//resets all analog offsets to 0 and stores it in flash
void resetOffsets(void){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
	analog_1_offset=0;
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <resetOffsets+0x24>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
	analog_2_offset=0;
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <resetOffsets+0x28>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
	analog_3_offset=0;
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <resetOffsets+0x2c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

	store_offsets=1;
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <resetOffsets+0x30>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]

	storeInFlash();
 8002dfc:	f000 fb56 	bl	80034ac <storeInFlash>
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000364 	.word	0x20000364
 8002e08:	20000368 	.word	0x20000368
 8002e0c:	2000036c 	.word	0x2000036c
 8002e10:	20000370 	.word	0x20000370

08002e14 <toggleAnalog>:

//turns the analog device on or off
void toggleAnalog(uint8_t analog_id){
 8002e14:	b5b0      	push	{r4, r5, r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
	uint8_t enabled=0;//bool to indicate if the change enabled the device
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
	//update state and display it
	lcd_put_cur(0,13);
 8002e22:	210d      	movs	r1, #13
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7fe f807 	bl	8000e38 <lcd_put_cur>
	if(analog_id==1){
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d117      	bne.n	8002e60 <toggleAnalog+0x4c>
		if(analog_1_enabled)
 8002e30:	4b79      	ldr	r3, [pc, #484]	; (8003018 <toggleAnalog+0x204>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <toggleAnalog+0x2c>
			lcd_send_string("OFF");
 8002e38:	4878      	ldr	r0, [pc, #480]	; (800301c <toggleAnalog+0x208>)
 8002e3a:	f7fe f859 	bl	8000ef0 <lcd_send_string>
 8002e3e:	e004      	b.n	8002e4a <toggleAnalog+0x36>
		else{
			lcd_send_string(" ON");
 8002e40:	4877      	ldr	r0, [pc, #476]	; (8003020 <toggleAnalog+0x20c>)
 8002e42:	f7fe f855 	bl	8000ef0 <lcd_send_string>
			enabled=1;}
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
		analog_1_enabled=!analog_1_enabled;
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <toggleAnalog+0x204>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf0c      	ite	eq
 8002e52:	2301      	moveq	r3, #1
 8002e54:	2300      	movne	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b6f      	ldr	r3, [pc, #444]	; (8003018 <toggleAnalog+0x204>)
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	e034      	b.n	8002eca <toggleAnalog+0xb6>
	}else if(analog_id==2){
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d117      	bne.n	8002e96 <toggleAnalog+0x82>
		if(analog_2_enabled)
 8002e66:	4b6f      	ldr	r3, [pc, #444]	; (8003024 <toggleAnalog+0x210>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <toggleAnalog+0x62>
			lcd_send_string("OFF");
 8002e6e:	486b      	ldr	r0, [pc, #428]	; (800301c <toggleAnalog+0x208>)
 8002e70:	f7fe f83e 	bl	8000ef0 <lcd_send_string>
 8002e74:	e004      	b.n	8002e80 <toggleAnalog+0x6c>
		else{
			lcd_send_string(" ON");
 8002e76:	486a      	ldr	r0, [pc, #424]	; (8003020 <toggleAnalog+0x20c>)
 8002e78:	f7fe f83a 	bl	8000ef0 <lcd_send_string>
			enabled=1;}
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
		analog_2_enabled=!analog_2_enabled;
 8002e80:	4b68      	ldr	r3, [pc, #416]	; (8003024 <toggleAnalog+0x210>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b64      	ldr	r3, [pc, #400]	; (8003024 <toggleAnalog+0x210>)
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e019      	b.n	8002eca <toggleAnalog+0xb6>
	}else if(analog_id==3){
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d116      	bne.n	8002eca <toggleAnalog+0xb6>
		if(analog_3_enabled)
 8002e9c:	4b62      	ldr	r3, [pc, #392]	; (8003028 <toggleAnalog+0x214>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <toggleAnalog+0x98>
			lcd_send_string("OFF");
 8002ea4:	485d      	ldr	r0, [pc, #372]	; (800301c <toggleAnalog+0x208>)
 8002ea6:	f7fe f823 	bl	8000ef0 <lcd_send_string>
 8002eaa:	e004      	b.n	8002eb6 <toggleAnalog+0xa2>
		else{
			lcd_send_string(" ON");enabled=1;}
 8002eac:	485c      	ldr	r0, [pc, #368]	; (8003020 <toggleAnalog+0x20c>)
 8002eae:	f7fe f81f 	bl	8000ef0 <lcd_send_string>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
		analog_3_enabled=!analog_3_enabled;
 8002eb6:	4b5c      	ldr	r3, [pc, #368]	; (8003028 <toggleAnalog+0x214>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2301      	moveq	r3, #1
 8002ec0:	2300      	movne	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b58      	ldr	r3, [pc, #352]	; (8003028 <toggleAnalog+0x214>)
 8002ec8:	701a      	strb	r2, [r3, #0]
	}

	//store the state in the menu
	if(enabled){
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d03e      	beq.n	8002f4e <toggleAnalog+0x13a>
		memset(temp,0,17); // erase the temp array
 8002ed0:	2211      	movs	r2, #17
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4855      	ldr	r0, [pc, #340]	; (800302c <toggleAnalog+0x218>)
 8002ed6:	f003 fed7 	bl	8006c88 <memset>
		strncpy(temp, "Analog ",16);
 8002eda:	2210      	movs	r2, #16
 8002edc:	4954      	ldr	r1, [pc, #336]	; (8003030 <toggleAnalog+0x21c>)
 8002ede:	4853      	ldr	r0, [pc, #332]	; (800302c <toggleAnalog+0x218>)
 8002ee0:	f004 fdc1 	bl	8007a66 <strncpy>
		memset(char_arr, 0, 16);
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4852      	ldr	r0, [pc, #328]	; (8003034 <toggleAnalog+0x220>)
 8002eea:	f003 fecd 	bl	8006c88 <memset>
		sprintf(char_arr, "%01d", analog_id);
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4951      	ldr	r1, [pc, #324]	; (8003038 <toggleAnalog+0x224>)
 8002ef4:	484f      	ldr	r0, [pc, #316]	; (8003034 <toggleAnalog+0x220>)
 8002ef6:	f004 fd4f 	bl	8007998 <siprintf>
		strcat(temp, char_arr);
 8002efa:	494e      	ldr	r1, [pc, #312]	; (8003034 <toggleAnalog+0x220>)
 8002efc:	484b      	ldr	r0, [pc, #300]	; (800302c <toggleAnalog+0x218>)
 8002efe:	f004 fd6b 	bl	80079d8 <strcat>
		strcat(temp,":     ");
 8002f02:	484a      	ldr	r0, [pc, #296]	; (800302c <toggleAnalog+0x218>)
 8002f04:	f7fd f964 	bl	80001d0 <strlen>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b47      	ldr	r3, [pc, #284]	; (800302c <toggleAnalog+0x218>)
 8002f0e:	4413      	add	r3, r2
 8002f10:	4a4a      	ldr	r2, [pc, #296]	; (800303c <toggleAnalog+0x228>)
 8002f12:	6810      	ldr	r0, [r2, #0]
 8002f14:	6018      	str	r0, [r3, #0]
 8002f16:	8891      	ldrh	r1, [r2, #4]
 8002f18:	7992      	ldrb	r2, [r2, #6]
 8002f1a:	8099      	strh	r1, [r3, #4]
 8002f1c:	719a      	strb	r2, [r3, #6]
		strlcat(temp, "ON",17);
 8002f1e:	2211      	movs	r2, #17
 8002f20:	4947      	ldr	r1, [pc, #284]	; (8003040 <toggleAnalog+0x22c>)
 8002f22:	4842      	ldr	r0, [pc, #264]	; (800302c <toggleAnalog+0x218>)
 8002f24:	f004 fd67 	bl	80079f6 <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	1d1a      	adds	r2, r3, #4
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	4413      	add	r3, r2
 8002f32:	4a44      	ldr	r2, [pc, #272]	; (8003044 <toggleAnalog+0x230>)
 8002f34:	4413      	add	r3, r2
 8002f36:	4a3d      	ldr	r2, [pc, #244]	; (800302c <toggleAnalog+0x218>)
 8002f38:	6815      	ldr	r5, [r2, #0]
 8002f3a:	6854      	ldr	r4, [r2, #4]
 8002f3c:	6890      	ldr	r0, [r2, #8]
 8002f3e:	68d1      	ldr	r1, [r2, #12]
 8002f40:	601d      	str	r5, [r3, #0]
 8002f42:	605c      	str	r4, [r3, #4]
 8002f44:	6098      	str	r0, [r3, #8]
 8002f46:	60d9      	str	r1, [r3, #12]
 8002f48:	7c12      	ldrb	r2, [r2, #16]
 8002f4a:	741a      	strb	r2, [r3, #16]
 8002f4c:	e03b      	b.n	8002fc6 <toggleAnalog+0x1b2>
	}else{
		memset(temp,0,17); // erase the temp array
 8002f4e:	2211      	movs	r2, #17
 8002f50:	2100      	movs	r1, #0
 8002f52:	4836      	ldr	r0, [pc, #216]	; (800302c <toggleAnalog+0x218>)
 8002f54:	f003 fe98 	bl	8006c88 <memset>
		strncpy(temp, "Analog ",16);
 8002f58:	2210      	movs	r2, #16
 8002f5a:	4935      	ldr	r1, [pc, #212]	; (8003030 <toggleAnalog+0x21c>)
 8002f5c:	4833      	ldr	r0, [pc, #204]	; (800302c <toggleAnalog+0x218>)
 8002f5e:	f004 fd82 	bl	8007a66 <strncpy>
		memset(char_arr, 0, 16);
 8002f62:	2210      	movs	r2, #16
 8002f64:	2100      	movs	r1, #0
 8002f66:	4833      	ldr	r0, [pc, #204]	; (8003034 <toggleAnalog+0x220>)
 8002f68:	f003 fe8e 	bl	8006c88 <memset>
		sprintf(char_arr, "%01d", analog_id);
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4931      	ldr	r1, [pc, #196]	; (8003038 <toggleAnalog+0x224>)
 8002f72:	4830      	ldr	r0, [pc, #192]	; (8003034 <toggleAnalog+0x220>)
 8002f74:	f004 fd10 	bl	8007998 <siprintf>
		strcat(temp, char_arr);
 8002f78:	492e      	ldr	r1, [pc, #184]	; (8003034 <toggleAnalog+0x220>)
 8002f7a:	482c      	ldr	r0, [pc, #176]	; (800302c <toggleAnalog+0x218>)
 8002f7c:	f004 fd2c 	bl	80079d8 <strcat>
		strcat(temp,":    ");
 8002f80:	482a      	ldr	r0, [pc, #168]	; (800302c <toggleAnalog+0x218>)
 8002f82:	f7fd f925 	bl	80001d0 <strlen>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b28      	ldr	r3, [pc, #160]	; (800302c <toggleAnalog+0x218>)
 8002f8c:	4413      	add	r3, r2
 8002f8e:	4a2e      	ldr	r2, [pc, #184]	; (8003048 <toggleAnalog+0x234>)
 8002f90:	6810      	ldr	r0, [r2, #0]
 8002f92:	6018      	str	r0, [r3, #0]
 8002f94:	8892      	ldrh	r2, [r2, #4]
 8002f96:	809a      	strh	r2, [r3, #4]
		strlcat(temp, "OFF",17);
 8002f98:	2211      	movs	r2, #17
 8002f9a:	4920      	ldr	r1, [pc, #128]	; (800301c <toggleAnalog+0x208>)
 8002f9c:	4823      	ldr	r0, [pc, #140]	; (800302c <toggleAnalog+0x218>)
 8002f9e:	f004 fd2a 	bl	80079f6 <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);}
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	1d1a      	adds	r2, r3, #4
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	4413      	add	r3, r2
 8002fac:	4a25      	ldr	r2, [pc, #148]	; (8003044 <toggleAnalog+0x230>)
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	; (800302c <toggleAnalog+0x218>)
 8002fb2:	6815      	ldr	r5, [r2, #0]
 8002fb4:	6854      	ldr	r4, [r2, #4]
 8002fb6:	6890      	ldr	r0, [r2, #8]
 8002fb8:	68d1      	ldr	r1, [r2, #12]
 8002fba:	601d      	str	r5, [r3, #0]
 8002fbc:	605c      	str	r4, [r3, #4]
 8002fbe:	6098      	str	r0, [r3, #8]
 8002fc0:	60d9      	str	r1, [r3, #12]
 8002fc2:	7c12      	ldrb	r2, [r2, #16]
 8002fc4:	741a      	strb	r2, [r3, #16]

	//invert values so the default is on after erasing memory
	analog_enable_arr[0]=!analog_1_enabled;
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <toggleAnalog+0x204>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf0c      	ite	eq
 8002fce:	2301      	moveq	r3, #1
 8002fd0:	2300      	movne	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	; (800304c <toggleAnalog+0x238>)
 8002fd8:	701a      	strb	r2, [r3, #0]
	analog_enable_arr[1]=!analog_2_enabled;
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <toggleAnalog+0x210>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <toggleAnalog+0x238>)
 8002fec:	705a      	strb	r2, [r3, #1]
	analog_enable_arr[2]=!analog_3_enabled;
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <toggleAnalog+0x214>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <toggleAnalog+0x238>)
 8003000:	709a      	strb	r2, [r3, #2]

	storeInFlash();
 8003002:	f000 fa53 	bl	80034ac <storeInFlash>

	//reset cursor on display
	lcd_put_cur(0,0);
 8003006:	2100      	movs	r1, #0
 8003008:	2000      	movs	r0, #0
 800300a:	f7fd ff15 	bl	8000e38 <lcd_put_cur>
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bdb0      	pop	{r4, r5, r7, pc}
 8003016:	bf00      	nop
 8003018:	20000001 	.word	0x20000001
 800301c:	0800c5c0 	.word	0x0800c5c0
 8003020:	0800c5c4 	.word	0x0800c5c4
 8003024:	20000002 	.word	0x20000002
 8003028:	20000003 	.word	0x20000003
 800302c:	200003f4 	.word	0x200003f4
 8003030:	0800c5c8 	.word	0x0800c5c8
 8003034:	20000540 	.word	0x20000540
 8003038:	0800c5d0 	.word	0x0800c5d0
 800303c:	0800c5d8 	.word	0x0800c5d8
 8003040:	0800c5e0 	.word	0x0800c5e0
 8003044:	200000b0 	.word	0x200000b0
 8003048:	0800c5e4 	.word	0x0800c5e4
 800304c:	2000048c 	.word	0x2000048c

08003050 <displayValues>:

//display the analog values on the display
void displayValues(void){
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
	lcd_put_cur(0,0);
 8003054:	2100      	movs	r1, #0
 8003056:	2000      	movs	r0, #0
 8003058:	f7fd feee 	bl	8000e38 <lcd_put_cur>
	if(analog_1_enabled&&analog_2_enabled&&analog_3_enabled){//all 3 devices are enabled
 800305c:	4bac      	ldr	r3, [pc, #688]	; (8003310 <displayValues+0x2c0>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80a5 	beq.w	80031b0 <displayValues+0x160>
 8003066:	4bab      	ldr	r3, [pc, #684]	; (8003314 <displayValues+0x2c4>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 80a0 	beq.w	80031b0 <displayValues+0x160>
 8003070:	4ba9      	ldr	r3, [pc, #676]	; (8003318 <displayValues+0x2c8>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 809b 	beq.w	80031b0 <displayValues+0x160>
		if(display_scroll==0){//position 1
 800307a:	4ba8      	ldr	r3, [pc, #672]	; (800331c <displayValues+0x2cc>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d130      	bne.n	80030e4 <displayValues+0x94>
			lcd_send_string("Analog 1:       ");
 8003082:	48a7      	ldr	r0, [pc, #668]	; (8003320 <displayValues+0x2d0>)
 8003084:	f7fd ff34 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(0,11);
 8003088:	210b      	movs	r1, #11
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fed4 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003090:	2210      	movs	r2, #16
 8003092:	2100      	movs	r1, #0
 8003094:	48a3      	ldr	r0, [pc, #652]	; (8003324 <displayValues+0x2d4>)
 8003096:	f003 fdf7 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 800309a:	4ba3      	ldr	r3, [pc, #652]	; (8003328 <displayValues+0x2d8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	49a2      	ldr	r1, [pc, #648]	; (800332c <displayValues+0x2dc>)
 80030a2:	48a0      	ldr	r0, [pc, #640]	; (8003324 <displayValues+0x2d4>)
 80030a4:	f004 fc78 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 80030a8:	489e      	ldr	r0, [pc, #632]	; (8003324 <displayValues+0x2d4>)
 80030aa:	f7fd ff21 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(1,0);
 80030ae:	2100      	movs	r1, #0
 80030b0:	2001      	movs	r0, #1
 80030b2:	f7fd fec1 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 80030b6:	489e      	ldr	r0, [pc, #632]	; (8003330 <displayValues+0x2e0>)
 80030b8:	f7fd ff1a 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(1,11);
 80030bc:	210b      	movs	r1, #11
 80030be:	2001      	movs	r0, #1
 80030c0:	f7fd feba 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80030c4:	2210      	movs	r2, #16
 80030c6:	2100      	movs	r1, #0
 80030c8:	4896      	ldr	r0, [pc, #600]	; (8003324 <displayValues+0x2d4>)
 80030ca:	f003 fddd 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 80030ce:	4b99      	ldr	r3, [pc, #612]	; (8003334 <displayValues+0x2e4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	4995      	ldr	r1, [pc, #596]	; (800332c <displayValues+0x2dc>)
 80030d6:	4893      	ldr	r0, [pc, #588]	; (8003324 <displayValues+0x2d4>)
 80030d8:	f004 fc5e 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 80030dc:	4891      	ldr	r0, [pc, #580]	; (8003324 <displayValues+0x2d4>)
 80030de:	f7fd ff07 	bl	8000ef0 <lcd_send_string>
		if(display_scroll==0){//position 1
 80030e2:	e112      	b.n	800330a <displayValues+0x2ba>
		}else if(display_scroll==1){//position 2
 80030e4:	4b8d      	ldr	r3, [pc, #564]	; (800331c <displayValues+0x2cc>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d130      	bne.n	800314e <displayValues+0xfe>
			lcd_send_string("Analog 2:       ");
 80030ec:	4890      	ldr	r0, [pc, #576]	; (8003330 <displayValues+0x2e0>)
 80030ee:	f7fd feff 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(0,11);
 80030f2:	210b      	movs	r1, #11
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fd fe9f 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80030fa:	2210      	movs	r2, #16
 80030fc:	2100      	movs	r1, #0
 80030fe:	4889      	ldr	r0, [pc, #548]	; (8003324 <displayValues+0x2d4>)
 8003100:	f003 fdc2 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 8003104:	4b8b      	ldr	r3, [pc, #556]	; (8003334 <displayValues+0x2e4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4988      	ldr	r1, [pc, #544]	; (800332c <displayValues+0x2dc>)
 800310c:	4885      	ldr	r0, [pc, #532]	; (8003324 <displayValues+0x2d4>)
 800310e:	f004 fc43 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 8003112:	4884      	ldr	r0, [pc, #528]	; (8003324 <displayValues+0x2d4>)
 8003114:	f7fd feec 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(1,0);
 8003118:	2100      	movs	r1, #0
 800311a:	2001      	movs	r0, #1
 800311c:	f7fd fe8c 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 8003120:	4885      	ldr	r0, [pc, #532]	; (8003338 <displayValues+0x2e8>)
 8003122:	f7fd fee5 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(1,11);
 8003126:	210b      	movs	r1, #11
 8003128:	2001      	movs	r0, #1
 800312a:	f7fd fe85 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 800312e:	2210      	movs	r2, #16
 8003130:	2100      	movs	r1, #0
 8003132:	487c      	ldr	r0, [pc, #496]	; (8003324 <displayValues+0x2d4>)
 8003134:	f003 fda8 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 8003138:	4b80      	ldr	r3, [pc, #512]	; (800333c <displayValues+0x2ec>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	497b      	ldr	r1, [pc, #492]	; (800332c <displayValues+0x2dc>)
 8003140:	4878      	ldr	r0, [pc, #480]	; (8003324 <displayValues+0x2d4>)
 8003142:	f004 fc29 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 8003146:	4877      	ldr	r0, [pc, #476]	; (8003324 <displayValues+0x2d4>)
 8003148:	f7fd fed2 	bl	8000ef0 <lcd_send_string>
		if(display_scroll==0){//position 1
 800314c:	e0dd      	b.n	800330a <displayValues+0x2ba>
		}else {//position 3
			lcd_send_string("Analog 3:       ");
 800314e:	487a      	ldr	r0, [pc, #488]	; (8003338 <displayValues+0x2e8>)
 8003150:	f7fd fece 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(0,11);
 8003154:	210b      	movs	r1, #11
 8003156:	2000      	movs	r0, #0
 8003158:	f7fd fe6e 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 800315c:	2210      	movs	r2, #16
 800315e:	2100      	movs	r1, #0
 8003160:	4870      	ldr	r0, [pc, #448]	; (8003324 <displayValues+0x2d4>)
 8003162:	f003 fd91 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 8003166:	4b75      	ldr	r3, [pc, #468]	; (800333c <displayValues+0x2ec>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	496f      	ldr	r1, [pc, #444]	; (800332c <displayValues+0x2dc>)
 800316e:	486d      	ldr	r0, [pc, #436]	; (8003324 <displayValues+0x2d4>)
 8003170:	f004 fc12 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 8003174:	486b      	ldr	r0, [pc, #428]	; (8003324 <displayValues+0x2d4>)
 8003176:	f7fd febb 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(1,0);
 800317a:	2100      	movs	r1, #0
 800317c:	2001      	movs	r0, #1
 800317e:	f7fd fe5b 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Analog 1:       ");
 8003182:	4867      	ldr	r0, [pc, #412]	; (8003320 <displayValues+0x2d0>)
 8003184:	f7fd feb4 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(1,11);
 8003188:	210b      	movs	r1, #11
 800318a:	2001      	movs	r0, #1
 800318c:	f7fd fe54 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003190:	2210      	movs	r2, #16
 8003192:	2100      	movs	r1, #0
 8003194:	4863      	ldr	r0, [pc, #396]	; (8003324 <displayValues+0x2d4>)
 8003196:	f003 fd77 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 800319a:	4b63      	ldr	r3, [pc, #396]	; (8003328 <displayValues+0x2d8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	4962      	ldr	r1, [pc, #392]	; (800332c <displayValues+0x2dc>)
 80031a2:	4860      	ldr	r0, [pc, #384]	; (8003324 <displayValues+0x2d4>)
 80031a4:	f004 fbf8 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 80031a8:	485e      	ldr	r0, [pc, #376]	; (8003324 <displayValues+0x2d4>)
 80031aa:	f7fd fea1 	bl	8000ef0 <lcd_send_string>
		if(display_scroll==0){//position 1
 80031ae:	e0ac      	b.n	800330a <displayValues+0x2ba>
		}

	}else{//less than 3 are enabled
		if(analog_1_enabled){//display device 1 on first line
 80031b0:	4b57      	ldr	r3, [pc, #348]	; (8003310 <displayValues+0x2c0>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d016      	beq.n	80031e6 <displayValues+0x196>
			lcd_send_string("Analog 1:       ");
 80031b8:	4859      	ldr	r0, [pc, #356]	; (8003320 <displayValues+0x2d0>)
 80031ba:	f7fd fe99 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(0,11);
 80031be:	210b      	movs	r1, #11
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fd fe39 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80031c6:	2210      	movs	r2, #16
 80031c8:	2100      	movs	r1, #0
 80031ca:	4856      	ldr	r0, [pc, #344]	; (8003324 <displayValues+0x2d4>)
 80031cc:	f003 fd5c 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 80031d0:	4b55      	ldr	r3, [pc, #340]	; (8003328 <displayValues+0x2d8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	4955      	ldr	r1, [pc, #340]	; (800332c <displayValues+0x2dc>)
 80031d8:	4852      	ldr	r0, [pc, #328]	; (8003324 <displayValues+0x2d4>)
 80031da:	f004 fbdd 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 80031de:	4851      	ldr	r0, [pc, #324]	; (8003324 <displayValues+0x2d4>)
 80031e0:	f7fd fe86 	bl	8000ef0 <lcd_send_string>
 80031e4:	e043      	b.n	800326e <displayValues+0x21e>
		} else if(analog_2_enabled){//display device 2 on first line
 80031e6:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <displayValues+0x2c4>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d016      	beq.n	800321c <displayValues+0x1cc>
			lcd_send_string("Analog 2:       ");
 80031ee:	4850      	ldr	r0, [pc, #320]	; (8003330 <displayValues+0x2e0>)
 80031f0:	f7fd fe7e 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(0,11);
 80031f4:	210b      	movs	r1, #11
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fd fe1e 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80031fc:	2210      	movs	r2, #16
 80031fe:	2100      	movs	r1, #0
 8003200:	4848      	ldr	r0, [pc, #288]	; (8003324 <displayValues+0x2d4>)
 8003202:	f003 fd41 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 8003206:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <displayValues+0x2e4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4947      	ldr	r1, [pc, #284]	; (800332c <displayValues+0x2dc>)
 800320e:	4845      	ldr	r0, [pc, #276]	; (8003324 <displayValues+0x2d4>)
 8003210:	f004 fbc2 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 8003214:	4843      	ldr	r0, [pc, #268]	; (8003324 <displayValues+0x2d4>)
 8003216:	f7fd fe6b 	bl	8000ef0 <lcd_send_string>
 800321a:	e028      	b.n	800326e <displayValues+0x21e>
		} else if(analog_3_enabled){//display device 3 on first line
 800321c:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <displayValues+0x2c8>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d016      	beq.n	8003252 <displayValues+0x202>
			lcd_send_string("Analog 3:       ");
 8003224:	4844      	ldr	r0, [pc, #272]	; (8003338 <displayValues+0x2e8>)
 8003226:	f7fd fe63 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(0,11);
 800322a:	210b      	movs	r1, #11
 800322c:	2000      	movs	r0, #0
 800322e:	f7fd fe03 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003232:	2210      	movs	r2, #16
 8003234:	2100      	movs	r1, #0
 8003236:	483b      	ldr	r0, [pc, #236]	; (8003324 <displayValues+0x2d4>)
 8003238:	f003 fd26 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 800323c:	4b3f      	ldr	r3, [pc, #252]	; (800333c <displayValues+0x2ec>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	493a      	ldr	r1, [pc, #232]	; (800332c <displayValues+0x2dc>)
 8003244:	4837      	ldr	r0, [pc, #220]	; (8003324 <displayValues+0x2d4>)
 8003246:	f004 fba7 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 800324a:	4836      	ldr	r0, [pc, #216]	; (8003324 <displayValues+0x2d4>)
 800324c:	f7fd fe50 	bl	8000ef0 <lcd_send_string>
 8003250:	e00d      	b.n	800326e <displayValues+0x21e>
		} else{//display no devices enabled
			lcd_send_string("No Devices      ");
 8003252:	483b      	ldr	r0, [pc, #236]	; (8003340 <displayValues+0x2f0>)
 8003254:	f7fd fe4c 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(1,0);
 8003258:	2100      	movs	r1, #0
 800325a:	2001      	movs	r0, #1
 800325c:	f7fd fdec 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Enabled         ");
 8003260:	4838      	ldr	r0, [pc, #224]	; (8003344 <displayValues+0x2f4>)
 8003262:	f7fd fe45 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(1,15);
 8003266:	210f      	movs	r1, #15
 8003268:	2001      	movs	r0, #1
 800326a:	f7fd fde5 	bl	8000e38 <lcd_put_cur>
		}

		if(analog_1_enabled&&analog_2_enabled){//display device 2 on second line
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <displayValues+0x2c0>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01e      	beq.n	80032b4 <displayValues+0x264>
 8003276:	4b27      	ldr	r3, [pc, #156]	; (8003314 <displayValues+0x2c4>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01a      	beq.n	80032b4 <displayValues+0x264>
			lcd_put_cur(1,0);
 800327e:	2100      	movs	r1, #0
 8003280:	2001      	movs	r0, #1
 8003282:	f7fd fdd9 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 8003286:	482a      	ldr	r0, [pc, #168]	; (8003330 <displayValues+0x2e0>)
 8003288:	f7fd fe32 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(1,11);
 800328c:	210b      	movs	r1, #11
 800328e:	2001      	movs	r0, #1
 8003290:	f7fd fdd2 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003294:	2210      	movs	r2, #16
 8003296:	2100      	movs	r1, #0
 8003298:	4822      	ldr	r0, [pc, #136]	; (8003324 <displayValues+0x2d4>)
 800329a:	f003 fcf5 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 800329e:	4b25      	ldr	r3, [pc, #148]	; (8003334 <displayValues+0x2e4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	4921      	ldr	r1, [pc, #132]	; (800332c <displayValues+0x2dc>)
 80032a6:	481f      	ldr	r0, [pc, #124]	; (8003324 <displayValues+0x2d4>)
 80032a8:	f004 fb76 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 80032ac:	481d      	ldr	r0, [pc, #116]	; (8003324 <displayValues+0x2d4>)
 80032ae:	f7fd fe1f 	bl	8000ef0 <lcd_send_string>
 80032b2:	e02a      	b.n	800330a <displayValues+0x2ba>
		} else if((analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled)){//display device 3 on second line
 80032b4:	4b16      	ldr	r3, [pc, #88]	; (8003310 <displayValues+0x2c0>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <displayValues+0x274>
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <displayValues+0x2c8>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <displayValues+0x284>
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <displayValues+0x2c4>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01e      	beq.n	800330a <displayValues+0x2ba>
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <displayValues+0x2c8>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01a      	beq.n	800330a <displayValues+0x2ba>
			lcd_put_cur(1,0);
 80032d4:	2100      	movs	r1, #0
 80032d6:	2001      	movs	r0, #1
 80032d8:	f7fd fdae 	bl	8000e38 <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 80032dc:	4816      	ldr	r0, [pc, #88]	; (8003338 <displayValues+0x2e8>)
 80032de:	f7fd fe07 	bl	8000ef0 <lcd_send_string>
			lcd_put_cur(1,11);
 80032e2:	210b      	movs	r1, #11
 80032e4:	2001      	movs	r0, #1
 80032e6:	f7fd fda7 	bl	8000e38 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80032ea:	2210      	movs	r2, #16
 80032ec:	2100      	movs	r1, #0
 80032ee:	480d      	ldr	r0, [pc, #52]	; (8003324 <displayValues+0x2d4>)
 80032f0:	f003 fcca 	bl	8006c88 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <displayValues+0x2ec>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	490c      	ldr	r1, [pc, #48]	; (800332c <displayValues+0x2dc>)
 80032fc:	4809      	ldr	r0, [pc, #36]	; (8003324 <displayValues+0x2d4>)
 80032fe:	f004 fb4b 	bl	8007998 <siprintf>
			lcd_send_string(char_arr);
 8003302:	4808      	ldr	r0, [pc, #32]	; (8003324 <displayValues+0x2d4>)
 8003304:	f7fd fdf4 	bl	8000ef0 <lcd_send_string>
		}
	}
}
 8003308:	e7ff      	b.n	800330a <displayValues+0x2ba>
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000001 	.word	0x20000001
 8003314:	20000002 	.word	0x20000002
 8003318:	20000003 	.word	0x20000003
 800331c:	20000373 	.word	0x20000373
 8003320:	0800c5ec 	.word	0x0800c5ec
 8003324:	20000540 	.word	0x20000540
 8003328:	20000488 	.word	0x20000488
 800332c:	0800c54c 	.word	0x0800c54c
 8003330:	0800c600 	.word	0x0800c600
 8003334:	20000388 	.word	0x20000388
 8003338:	0800c614 	.word	0x0800c614
 800333c:	200003f0 	.word	0x200003f0
 8003340:	0800c628 	.word	0x0800c628
 8003344:	0800c63c 	.word	0x0800c63c

08003348 <bytesToWord>:


//convert a 4 byte array to a word (unsigned long int)
uint32_t bytesToWord(uint8_t* arr) {
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	uint32_t value = arr[0] & 0xFF;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]
	value |= (arr[1] << 8) & 0xFFFF;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3301      	adds	r3, #1
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	b29b      	uxth	r3, r3
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
	value |= (arr[2] << 16) & 0xFFFFFF;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3302      	adds	r3, #2
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
	value |= (arr[3] << 24) & 0xFFFFFFFF;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3303      	adds	r3, #3
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	061b      	lsls	r3, r3, #24
 8003380:	461a      	mov	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
	return value;
 8003388:	68fb      	ldr	r3, [r7, #12]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <wordToBytes>:

//convert a word (unsigned long int) to a 4 byte array
uint8_t* wordToBytes(uint32_t value){
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	byte_arr[3] = (value >> 24) & 0xFF;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	0e1b      	lsrs	r3, r3, #24
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <wordToBytes+0x3c>)
 80033a8:	70da      	strb	r2, [r3, #3]
	byte_arr[2] = (value >> 16) & 0xFF;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0c1b      	lsrs	r3, r3, #16
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <wordToBytes+0x3c>)
 80033b2:	709a      	strb	r2, [r3, #2]
	byte_arr[1] = (value >> 8) & 0xFF;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <wordToBytes+0x3c>)
 80033bc:	705a      	strb	r2, [r3, #1]
	byte_arr[0] = value & 0xFF;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <wordToBytes+0x3c>)
 80033c4:	701a      	strb	r2, [r3, #0]
	return byte_arr;
 80033c6:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <wordToBytes+0x3c>)
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	20000594 	.word	0x20000594

080033d8 <calibrateSDADC>:

//calibrate the given sdadc for the given channel
void calibrateSDADC(SDADC_HandleTypeDef* adc, uint32_t channel){
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	//Display Calibrating
	lcd_put_cur(0,0);
 80033e2:	2100      	movs	r1, #0
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7fd fd27 	bl	8000e38 <lcd_put_cur>
	lcd_send_string("Calibrating ADC ");
 80033ea:	482b      	ldr	r0, [pc, #172]	; (8003498 <calibrateSDADC+0xc0>)
 80033ec:	f7fd fd80 	bl	8000ef0 <lcd_send_string>
	lcd_put_cur(1,0);
 80033f0:	2100      	movs	r1, #0
 80033f2:	2001      	movs	r0, #1
 80033f4:	f7fd fd20 	bl	8000e38 <lcd_put_cur>
	lcd_send_string("                ");
 80033f8:	4828      	ldr	r0, [pc, #160]	; (800349c <calibrateSDADC+0xc4>)
 80033fa:	f7fd fd79 	bl	8000ef0 <lcd_send_string>

	//Run Calibration Sequence
	HAL_SDADC_AssociateChannelConfig(adc, channel, SDADC_CONF_INDEX_0);
 80033fe:	2200      	movs	r2, #0
 8003400:	6839      	ldr	r1, [r7, #0]
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f002 feee 	bl	80061e4 <HAL_SDADC_AssociateChannelConfig>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_OFF);
 8003408:	2200      	movs	r2, #0
 800340a:	6839      	ldr	r1, [r7, #0]
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f002 ff39 	bl	8006284 <HAL_SDADC_ConfigChannel>
	HAL_SDADC_CalibrationStart(adc, SDADC_CALIBRATION_SEQ_1);
 8003412:	2100      	movs	r1, #0
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f002 ff79 	bl	800630c <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(adc, HAL_MAX_DELAY);
 800341a:	f04f 31ff 	mov.w	r1, #4294967295
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f002 ffb4 	bl	800638c <HAL_SDADC_PollForCalibEvent>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_ON);
 8003424:	2201      	movs	r2, #1
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f002 ff2b 	bl	8006284 <HAL_SDADC_ConfigChannel>

	//Display Menu
	lcd_put_cur(0,0);
 800342e:	2100      	movs	r1, #0
 8003430:	2000      	movs	r0, #0
 8003432:	f7fd fd01 	bl	8000e38 <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <calibrateSDADC+0xc8>)
 8003438:	f993 3000 	ldrsb.w	r3, [r3]
 800343c:	461a      	mov	r2, r3
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	4413      	add	r3, r2
 8003444:	4a17      	ldr	r2, [pc, #92]	; (80034a4 <calibrateSDADC+0xcc>)
 8003446:	4413      	add	r3, r2
 8003448:	2210      	movs	r2, #16
 800344a:	4619      	mov	r1, r3
 800344c:	4816      	ldr	r0, [pc, #88]	; (80034a8 <calibrateSDADC+0xd0>)
 800344e:	f004 fb0a 	bl	8007a66 <strncpy>
 8003452:	4603      	mov	r3, r0
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd fd4b 	bl	8000ef0 <lcd_send_string>
	lcd_put_cur(1,0);
 800345a:	2100      	movs	r1, #0
 800345c:	2001      	movs	r0, #1
 800345e:	f7fd fceb 	bl	8000e38 <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 8003462:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <calibrateSDADC+0xc8>)
 8003464:	f993 3000 	ldrsb.w	r3, [r3]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	4413      	add	r3, r2
 8003470:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <calibrateSDADC+0xcc>)
 8003472:	4413      	add	r3, r2
 8003474:	2210      	movs	r2, #16
 8003476:	4619      	mov	r1, r3
 8003478:	480b      	ldr	r0, [pc, #44]	; (80034a8 <calibrateSDADC+0xd0>)
 800347a:	f004 faf4 	bl	8007a66 <strncpy>
 800347e:	4603      	mov	r3, r0
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd fd35 	bl	8000ef0 <lcd_send_string>
	lcd_put_cur(0,0);
 8003486:	2100      	movs	r1, #0
 8003488:	2000      	movs	r0, #0
 800348a:	f7fd fcd5 	bl	8000e38 <lcd_put_cur>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	0800c650 	.word	0x0800c650
 800349c:	0800c664 	.word	0x0800c664
 80034a0:	20000374 	.word	0x20000374
 80034a4:	20000004 	.word	0x20000004
 80034a8:	200003f4 	.word	0x200003f4

080034ac <storeInFlash>:

//store all saved values in flash memory
void storeInFlash(void){
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
	//Unlock the Flash Program Erase controller
	HAL_FLASH_Unlock();
 80034b2:	f001 f841 	bl	8004538 <HAL_FLASH_Unlock>

	//Erase page
	FLASH_EraseInitTypeDef eraseParams;
	eraseParams.TypeErase = FLASH_TYPEERASE_PAGES;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
	eraseParams.PageAddress = 0x0800F800;
 80034ba:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <storeInFlash+0x108>)
 80034bc:	60bb      	str	r3, [r7, #8]
	eraseParams.NbPages=1;
 80034be:	2301      	movs	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
	uint32_t eraseError=0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	603b      	str	r3, [r7, #0]
	HAL_FLASHEx_Erase(&eraseParams, &eraseError);
 80034c6:	463a      	mov	r2, r7
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f001 f8f7 	bl	80046c0 <HAL_FLASHEx_Erase>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80034d2:	f04f 30ff 	mov.w	r0, #4294967295
 80034d6:	f001 f881 	bl	80045dc <FLASH_WaitForLastOperation>


	//Store the CAN IDs
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F800, bytesToWord(id_arr));//store can ids
 80034da:	4837      	ldr	r0, [pc, #220]	; (80035b8 <storeInFlash+0x10c>)
 80034dc:	f7ff ff34 	bl	8003348 <bytesToWord>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	4932      	ldr	r1, [pc, #200]	; (80035b4 <storeInFlash+0x108>)
 80034ea:	2002      	movs	r0, #2
 80034ec:	f000 ffb4 	bl	8004458 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f001 f872 	bl	80045dc <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F804, (uint32_t)baud_pos); //store baud rate
 80034f8:	4b30      	ldr	r3, [pc, #192]	; (80035bc <storeInFlash+0x110>)
 80034fa:	f993 3000 	ldrsb.w	r3, [r3]
 80034fe:	461a      	mov	r2, r3
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	492e      	ldr	r1, [pc, #184]	; (80035c0 <storeInFlash+0x114>)
 8003506:	2002      	movs	r0, #2
 8003508:	f000 ffa6 	bl	8004458 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	f001 f864 	bl	80045dc <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F808, (uint32_t)num_delays); // store number of delays
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <storeInFlash+0x118>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	492a      	ldr	r1, [pc, #168]	; (80035c8 <storeInFlash+0x11c>)
 8003520:	2002      	movs	r0, #2
 8003522:	f000 ff99 	bl	8004458 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003526:	f04f 30ff 	mov.w	r0, #4294967295
 800352a:	f001 f857 	bl	80045dc <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F80C, bytesToWord(analog_enable_arr)); // store device enable bools
 800352e:	4827      	ldr	r0, [pc, #156]	; (80035cc <storeInFlash+0x120>)
 8003530:	f7ff ff0a 	bl	8003348 <bytesToWord>
 8003534:	4603      	mov	r3, r0
 8003536:	461a      	mov	r2, r3
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	4924      	ldr	r1, [pc, #144]	; (80035d0 <storeInFlash+0x124>)
 800353e:	2002      	movs	r0, #2
 8003540:	f000 ff8a 	bl	8004458 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003544:	f04f 30ff 	mov.w	r0, #4294967295
 8003548:	f001 f848 	bl	80045dc <FLASH_WaitForLastOperation>
	if(store_offsets){
 800354c:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <storeInFlash+0x128>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d029      	beq.n	80035a8 <storeInFlash+0xfc>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F810, analog_1_offset); // store analog 1 offset
 8003554:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <storeInFlash+0x12c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	491f      	ldr	r1, [pc, #124]	; (80035dc <storeInFlash+0x130>)
 8003560:	2002      	movs	r0, #2
 8003562:	f000 ff79 	bl	8004458 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003566:	f04f 30ff 	mov.w	r0, #4294967295
 800356a:	f001 f837 	bl	80045dc <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F814, analog_2_offset); // store analog 2 offset
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <storeInFlash+0x134>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	461a      	mov	r2, r3
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	491a      	ldr	r1, [pc, #104]	; (80035e4 <storeInFlash+0x138>)
 800357a:	2002      	movs	r0, #2
 800357c:	f000 ff6c 	bl	8004458 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	f001 f82a 	bl	80045dc <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F818, analog_3_offset); // store analog 3 offset
 8003588:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <storeInFlash+0x13c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	4916      	ldr	r1, [pc, #88]	; (80035ec <storeInFlash+0x140>)
 8003594:	2002      	movs	r0, #2
 8003596:	f000 ff5f 	bl	8004458 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800359a:	f04f 30ff 	mov.w	r0, #4294967295
 800359e:	f001 f81d 	bl	80045dc <FLASH_WaitForLastOperation>
		store_offsets=0;
 80035a2:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <storeInFlash+0x128>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
	}


	//Lock the Flash Program Erase controller
	HAL_FLASH_Lock();
 80035a8:	f000 ffec 	bl	8004584 <HAL_FLASH_Lock>
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	0800f800 	.word	0x0800f800
 80035b8:	20000390 	.word	0x20000390
 80035bc:	2000015b 	.word	0x2000015b
 80035c0:	0800f804 	.word	0x0800f804
 80035c4:	20000377 	.word	0x20000377
 80035c8:	0800f808 	.word	0x0800f808
 80035cc:	2000048c 	.word	0x2000048c
 80035d0:	0800f80c 	.word	0x0800f80c
 80035d4:	20000370 	.word	0x20000370
 80035d8:	20000364 	.word	0x20000364
 80035dc:	0800f810 	.word	0x0800f810
 80035e0:	20000368 	.word	0x20000368
 80035e4:	0800f814 	.word	0x0800f814
 80035e8:	2000036c 	.word	0x2000036c
 80035ec:	0800f818 	.word	0x0800f818

080035f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035f4:	b672      	cpsid	i
}
 80035f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80035f8:	e7fe      	b.n	80035f8 <Error_Handler+0x8>
	...

080035fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <HAL_MspInit+0x44>)
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <HAL_MspInit+0x44>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6193      	str	r3, [r2, #24]
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_MspInit+0x44>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_MspInit+0x44>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	4a08      	ldr	r2, [pc, #32]	; (8003640 <HAL_MspInit+0x44>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	61d3      	str	r3, [r2, #28]
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_MspInit+0x44>)
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000

08003644 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a26      	ldr	r2, [pc, #152]	; (80036fc <HAL_CAN_MspInit+0xb8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d146      	bne.n	80036f4 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <HAL_CAN_MspInit+0xbc>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	4a25      	ldr	r2, [pc, #148]	; (8003700 <HAL_CAN_MspInit+0xbc>)
 800366c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003670:	61d3      	str	r3, [r2, #28]
 8003672:	4b23      	ldr	r3, [pc, #140]	; (8003700 <HAL_CAN_MspInit+0xbc>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_CAN_MspInit+0xbc>)
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_CAN_MspInit+0xbc>)
 8003684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003688:	6153      	str	r3, [r2, #20]
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <HAL_CAN_MspInit+0xbc>)
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003696:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <HAL_CAN_MspInit+0xbc>)
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_CAN_MspInit+0xbc>)
 800369c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a0:	6153      	str	r3, [r2, #20]
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <HAL_CAN_MspInit+0xbc>)
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	60bb      	str	r3, [r7, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	2302      	movs	r3, #2
 80036b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036bc:	2303      	movs	r3, #3
 80036be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80036c0:	2309      	movs	r3, #9
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	4619      	mov	r1, r3
 80036ca:	480e      	ldr	r0, [pc, #56]	; (8003704 <HAL_CAN_MspInit+0xc0>)
 80036cc:	f001 f89c 	bl	8004808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036de:	2303      	movs	r3, #3
 80036e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80036e2:	2309      	movs	r3, #9
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	4619      	mov	r1, r3
 80036ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f0:	f001 f88a 	bl	8004808 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80036f4:	bf00      	nop
 80036f6:	3728      	adds	r7, #40	; 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40006400 	.word	0x40006400
 8003700:	40021000 	.word	0x40021000
 8003704:	48000400 	.word	0x48000400

08003708 <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08e      	sub	sp, #56	; 0x38
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a40      	ldr	r2, [pc, #256]	; (8003828 <HAL_SDADC_MspInit+0x120>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d125      	bne.n	8003776 <HAL_SDADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 800372a:	4b40      	ldr	r3, [pc, #256]	; (800382c <HAL_SDADC_MspInit+0x124>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	4a3f      	ldr	r2, [pc, #252]	; (800382c <HAL_SDADC_MspInit+0x124>)
 8003730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003734:	6193      	str	r3, [r2, #24]
 8003736:	4b3d      	ldr	r3, [pc, #244]	; (800382c <HAL_SDADC_MspInit+0x124>)
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373e:	623b      	str	r3, [r7, #32]
 8003740:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003742:	4b3a      	ldr	r3, [pc, #232]	; (800382c <HAL_SDADC_MspInit+0x124>)
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	4a39      	ldr	r2, [pc, #228]	; (800382c <HAL_SDADC_MspInit+0x124>)
 8003748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800374c:	6153      	str	r3, [r2, #20]
 800374e:	4b37      	ldr	r3, [pc, #220]	; (800382c <HAL_SDADC_MspInit+0x124>)
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	69fb      	ldr	r3, [r7, #28]
    /**SDADC1 GPIO Configuration
    PE11     ------> SDADC1_AIN1P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800375a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003760:	2303      	movs	r3, #3
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376c:	4619      	mov	r1, r3
 800376e:	4830      	ldr	r0, [pc, #192]	; (8003830 <HAL_SDADC_MspInit+0x128>)
 8003770:	f001 f84a 	bl	8004808 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 8003774:	e054      	b.n	8003820 <HAL_SDADC_MspInit+0x118>
  else if(hsdadc->Instance==SDADC2)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2e      	ldr	r2, [pc, #184]	; (8003834 <HAL_SDADC_MspInit+0x12c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d125      	bne.n	80037cc <HAL_SDADC_MspInit+0xc4>
    __HAL_RCC_SDADC2_CLK_ENABLE();
 8003780:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_SDADC_MspInit+0x124>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	4a29      	ldr	r2, [pc, #164]	; (800382c <HAL_SDADC_MspInit+0x124>)
 8003786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800378a:	6193      	str	r3, [r2, #24]
 800378c:	4b27      	ldr	r3, [pc, #156]	; (800382c <HAL_SDADC_MspInit+0x124>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003798:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_SDADC_MspInit+0x124>)
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	4a23      	ldr	r2, [pc, #140]	; (800382c <HAL_SDADC_MspInit+0x124>)
 800379e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037a2:	6153      	str	r3, [r2, #20]
 80037a4:	4b21      	ldr	r3, [pc, #132]	; (800382c <HAL_SDADC_MspInit+0x124>)
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80037b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037b6:	2303      	movs	r3, #3
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c2:	4619      	mov	r1, r3
 80037c4:	481a      	ldr	r0, [pc, #104]	; (8003830 <HAL_SDADC_MspInit+0x128>)
 80037c6:	f001 f81f 	bl	8004808 <HAL_GPIO_Init>
}
 80037ca:	e029      	b.n	8003820 <HAL_SDADC_MspInit+0x118>
  else if(hsdadc->Instance==SDADC3)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a19      	ldr	r2, [pc, #100]	; (8003838 <HAL_SDADC_MspInit+0x130>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d124      	bne.n	8003820 <HAL_SDADC_MspInit+0x118>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <HAL_SDADC_MspInit+0x124>)
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	4a14      	ldr	r2, [pc, #80]	; (800382c <HAL_SDADC_MspInit+0x124>)
 80037dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037e0:	6193      	str	r3, [r2, #24]
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_SDADC_MspInit+0x124>)
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <HAL_SDADC_MspInit+0x124>)
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	4a0e      	ldr	r2, [pc, #56]	; (800382c <HAL_SDADC_MspInit+0x124>)
 80037f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f8:	6153      	str	r3, [r2, #20]
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <HAL_SDADC_MspInit+0x124>)
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800380c:	2303      	movs	r3, #3
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	2300      	movs	r3, #0
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003818:	4619      	mov	r1, r3
 800381a:	4808      	ldr	r0, [pc, #32]	; (800383c <HAL_SDADC_MspInit+0x134>)
 800381c:	f000 fff4 	bl	8004808 <HAL_GPIO_Init>
}
 8003820:	bf00      	nop
 8003822:	3738      	adds	r7, #56	; 0x38
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40016000 	.word	0x40016000
 800382c:	40021000 	.word	0x40021000
 8003830:	48001000 	.word	0x48001000
 8003834:	40016400 	.word	0x40016400
 8003838:	40016800 	.word	0x40016800
 800383c:	48000c00 	.word	0x48000c00

08003840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d10b      	bne.n	800386a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_TIM_Base_MspInit+0x38>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <HAL_TIM_Base_MspInit+0x38>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	61d3      	str	r3, [r2, #28]
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_TIM_Base_MspInit+0x38>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000

0800387c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003880:	e7fe      	b.n	8003880 <NMI_Handler+0x4>

08003882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003886:	e7fe      	b.n	8003886 <HardFault_Handler+0x4>

08003888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800388c:	e7fe      	b.n	800388c <MemManage_Handler+0x4>

0800388e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800388e:	b480      	push	{r7}
 8003890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003892:	e7fe      	b.n	8003892 <BusFault_Handler+0x4>

08003894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003898:	e7fe      	b.n	8003898 <UsageFault_Handler+0x4>

0800389a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c8:	f000 f94a 	bl	8003b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <_getpid>:
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	2301      	movs	r3, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_kill>:
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
 80038ea:	f003 f9a3 	bl	8006c34 <__errno>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2216      	movs	r2, #22
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <_exit>:
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	f04f 31ff 	mov.w	r1, #4294967295
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ffe7 	bl	80038e0 <_kill>
 8003912:	e7fe      	b.n	8003912 <_exit+0x12>

08003914 <_read>:
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e00a      	b.n	800393c <_read+0x28>
 8003926:	f3af 8000 	nop.w
 800392a:	4601      	mov	r1, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	60ba      	str	r2, [r7, #8]
 8003932:	b2ca      	uxtb	r2, r1
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	429a      	cmp	r2, r3
 8003942:	dbf0      	blt.n	8003926 <_read+0x12>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <_write>:
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e009      	b.n	8003974 <_write+0x26>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	60ba      	str	r2, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f3af 8000 	nop.w
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	3301      	adds	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	dbf1      	blt.n	8003960 <_write+0x12>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <_close>:
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <_fstat>:
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	2300      	movs	r3, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <_isatty>:
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	2301      	movs	r3, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <_lseek>:
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	2300      	movs	r3, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <_sbrk>:
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <_sbrk+0x5c>)
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <_sbrk+0x60>)
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	4b13      	ldr	r3, [pc, #76]	; (8003a54 <_sbrk+0x64>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <_sbrk+0x22>
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <_sbrk+0x64>)
 8003a0e:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <_sbrk+0x68>)
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <_sbrk+0x64>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d207      	bcs.n	8003a30 <_sbrk+0x40>
 8003a20:	f003 f908 	bl	8006c34 <__errno>
 8003a24:	4603      	mov	r3, r0
 8003a26:	220c      	movs	r2, #12
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	e009      	b.n	8003a44 <_sbrk+0x54>
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <_sbrk+0x64>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <_sbrk+0x64>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	4a05      	ldr	r2, [pc, #20]	; (8003a54 <_sbrk+0x64>)
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20004000 	.word	0x20004000
 8003a50:	00000400 	.word	0x00000400
 8003a54:	20000378 	.word	0x20000378
 8003a58:	200005d0 	.word	0x200005d0

08003a5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <SystemInit+0x20>)
 8003a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a66:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <SystemInit+0x20>)
 8003a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <Reset_Handler>:
 8003a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ab8 <LoopForever+0x2>
 8003a84:	480d      	ldr	r0, [pc, #52]	; (8003abc <LoopForever+0x6>)
 8003a86:	490e      	ldr	r1, [pc, #56]	; (8003ac0 <LoopForever+0xa>)
 8003a88:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <LoopForever+0xe>)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e002      	b.n	8003a94 <LoopCopyDataInit>

08003a8e <CopyDataInit>:
 8003a8e:	58d4      	ldr	r4, [r2, r3]
 8003a90:	50c4      	str	r4, [r0, r3]
 8003a92:	3304      	adds	r3, #4

08003a94 <LoopCopyDataInit>:
 8003a94:	18c4      	adds	r4, r0, r3
 8003a96:	428c      	cmp	r4, r1
 8003a98:	d3f9      	bcc.n	8003a8e <CopyDataInit>
 8003a9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <LoopForever+0x12>)
 8003a9c:	4c0b      	ldr	r4, [pc, #44]	; (8003acc <LoopForever+0x16>)
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e001      	b.n	8003aa6 <LoopFillZerobss>

08003aa2 <FillZerobss>:
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	3204      	adds	r2, #4

08003aa6 <LoopFillZerobss>:
 8003aa6:	42a2      	cmp	r2, r4
 8003aa8:	d3fb      	bcc.n	8003aa2 <FillZerobss>
 8003aaa:	f7ff ffd7 	bl	8003a5c <SystemInit>
 8003aae:	f003 f8c7 	bl	8006c40 <__libc_init_array>
 8003ab2:	f7fd fa35 	bl	8000f20 <main>

08003ab6 <LoopForever>:
 8003ab6:	e7fe      	b.n	8003ab6 <LoopForever>
 8003ab8:	20004000 	.word	0x20004000
 8003abc:	20000000 	.word	0x20000000
 8003ac0:	20000344 	.word	0x20000344
 8003ac4:	0800cbb8 	.word	0x0800cbb8
 8003ac8:	20000348 	.word	0x20000348
 8003acc:	200005d0 	.word	0x200005d0

08003ad0 <ADC1_IRQHandler>:
 8003ad0:	e7fe      	b.n	8003ad0 <ADC1_IRQHandler>
	...

08003ad4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad8:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_Init+0x28>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a07      	ldr	r2, [pc, #28]	; (8003afc <HAL_Init+0x28>)
 8003ade:	f043 0310 	orr.w	r3, r3, #16
 8003ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae4:	2003      	movs	r0, #3
 8003ae6:	f000 fc83 	bl	80043f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aea:	2000      	movs	r0, #0
 8003aec:	f000 f808 	bl	8003b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003af0:	f7ff fd84 	bl	80035fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40022000 	.word	0x40022000

08003b00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b08:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_InitTick+0x54>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_InitTick+0x58>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fc8d 	bl	800443e <HAL_SYSTICK_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e00e      	b.n	8003b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d80a      	bhi.n	8003b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b34:	2200      	movs	r2, #0
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3c:	f000 fc63 	bl	8004406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b40:	4a06      	ldr	r2, [pc, #24]	; (8003b5c <HAL_InitTick+0x5c>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e000      	b.n	8003b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000160 	.word	0x20000160
 8003b58:	20000168 	.word	0x20000168
 8003b5c:	20000164 	.word	0x20000164

08003b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_IncTick+0x20>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_IncTick+0x24>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <HAL_IncTick+0x24>)
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000168 	.word	0x20000168
 8003b84:	20000598 	.word	0x20000598

08003b88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_GetTick+0x14>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20000598 	.word	0x20000598

08003ba0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff ffee 	bl	8003b88 <HAL_GetTick>
 8003bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d005      	beq.n	8003bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_Delay+0x44>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003bc6:	bf00      	nop
 8003bc8:	f7ff ffde 	bl	8003b88 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d8f7      	bhi.n	8003bc8 <HAL_Delay+0x28>
  {
  }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000168 	.word	0x20000168

08003be8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0ed      	b.n	8003dd6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fd1c 	bl	8003644 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0202 	bic.w	r2, r2, #2
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c1c:	f7ff ffb4 	bl	8003b88 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c22:	e012      	b.n	8003c4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c24:	f7ff ffb0 	bl	8003b88 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b0a      	cmp	r3, #10
 8003c30:	d90b      	bls.n	8003c4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2205      	movs	r2, #5
 8003c42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e0c5      	b.n	8003dd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c68:	f7ff ff8e 	bl	8003b88 <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c6e:	e012      	b.n	8003c96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c70:	f7ff ff8a 	bl	8003b88 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b0a      	cmp	r3, #10
 8003c7c:	d90b      	bls.n	8003c96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2205      	movs	r2, #5
 8003c8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e09f      	b.n	8003dd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0e5      	beq.n	8003c70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	7e1b      	ldrb	r3, [r3, #24]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d108      	bne.n	8003cbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e007      	b.n	8003cce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	7e5b      	ldrb	r3, [r3, #25]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d108      	bne.n	8003ce8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e007      	b.n	8003cf8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	7e9b      	ldrb	r3, [r3, #26]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d108      	bne.n	8003d12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0220 	orr.w	r2, r2, #32
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e007      	b.n	8003d22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0220 	bic.w	r2, r2, #32
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	7edb      	ldrb	r3, [r3, #27]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d108      	bne.n	8003d3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0210 	bic.w	r2, r2, #16
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e007      	b.n	8003d4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0210 	orr.w	r2, r2, #16
 8003d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	7f1b      	ldrb	r3, [r3, #28]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d108      	bne.n	8003d66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0208 	orr.w	r2, r2, #8
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e007      	b.n	8003d76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0208 	bic.w	r2, r2, #8
 8003d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7f5b      	ldrb	r3, [r3, #29]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d108      	bne.n	8003d90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0204 	orr.w	r2, r2, #4
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e007      	b.n	8003da0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	ea42 0103 	orr.w	r1, r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b087      	sub	sp, #28
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003df6:	7cfb      	ldrb	r3, [r7, #19]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d003      	beq.n	8003e04 <HAL_CAN_ConfigFilter+0x26>
 8003dfc:	7cfb      	ldrb	r3, [r7, #19]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	f040 80aa 	bne.w	8003f58 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e0a:	f043 0201 	orr.w	r2, r3, #1
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	401a      	ands	r2, r3
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d123      	bne.n	8003e86 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	401a      	ands	r2, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	3248      	adds	r2, #72	; 0x48
 8003e66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e7c:	6979      	ldr	r1, [r7, #20]
 8003e7e:	3348      	adds	r3, #72	; 0x48
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d122      	bne.n	8003ed4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003eae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3248      	adds	r2, #72	; 0x48
 8003eb4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ec8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003eca:	6979      	ldr	r1, [r7, #20]
 8003ecc:	3348      	adds	r3, #72	; 0x48
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	440b      	add	r3, r1
 8003ed2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003eee:	e007      	b.n	8003f00 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	401a      	ands	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003f1a:	e007      	b.n	8003f2c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d107      	bne.n	8003f44 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f4a:	f023 0201 	bic.w	r2, r3, #1
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e006      	b.n	8003f66 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
  }
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d12e      	bne.n	8003fe4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f9e:	f7ff fdf3 	bl	8003b88 <HAL_GetTick>
 8003fa2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fa4:	e012      	b.n	8003fcc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fa6:	f7ff fdef 	bl	8003b88 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b0a      	cmp	r3, #10
 8003fb2:	d90b      	bls.n	8003fcc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e012      	b.n	8003ff2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e5      	bne.n	8003fa6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e006      	b.n	8003ff2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
  }
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d133      	bne.n	8004076 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800401e:	f7ff fdb3 	bl	8003b88 <HAL_GetTick>
 8004022:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004024:	e012      	b.n	800404c <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004026:	f7ff fdaf 	bl	8003b88 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b0a      	cmp	r3, #10
 8004032:	d90b      	bls.n	800404c <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2205      	movs	r2, #5
 8004044:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e01b      	b.n	8004084 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0e5      	beq.n	8004026 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0202 	bic.w	r2, r2, #2
 8004068:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e006      	b.n	8004084 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
  }
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80040aa:	7ffb      	ldrb	r3, [r7, #31]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d003      	beq.n	80040b8 <HAL_CAN_AddTxMessage+0x2c>
 80040b0:	7ffb      	ldrb	r3, [r7, #31]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	f040 80b8 	bne.w	8004228 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 80a0 	beq.w	8004218 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	0e1b      	lsrs	r3, r3, #24
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d907      	bls.n	80040f8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e09e      	b.n	8004236 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80040f8:	2201      	movs	r2, #1
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	409a      	lsls	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10d      	bne.n	8004126 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004114:	68f9      	ldr	r1, [r7, #12]
 8004116:	6809      	ldr	r1, [r1, #0]
 8004118:	431a      	orrs	r2, r3
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	3318      	adds	r3, #24
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	440b      	add	r3, r1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e00f      	b.n	8004146 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004130:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800413a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3318      	adds	r3, #24
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	440b      	add	r3, r1
 8004144:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	691a      	ldr	r2, [r3, #16]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	3318      	adds	r3, #24
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	440b      	add	r3, r1
 8004156:	3304      	adds	r3, #4
 8004158:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	7d1b      	ldrb	r3, [r3, #20]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d111      	bne.n	8004186 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	3318      	adds	r3, #24
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	4413      	add	r3, r2
 800416e:	3304      	adds	r3, #4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	6811      	ldr	r1, [r2, #0]
 8004176:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	3318      	adds	r3, #24
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	440b      	add	r3, r1
 8004182:	3304      	adds	r3, #4
 8004184:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3307      	adds	r3, #7
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	061a      	lsls	r2, r3, #24
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3306      	adds	r3, #6
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3305      	adds	r3, #5
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	3204      	adds	r2, #4
 80041a6:	7812      	ldrb	r2, [r2, #0]
 80041a8:	4610      	mov	r0, r2
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	6811      	ldr	r1, [r2, #0]
 80041ae:	ea43 0200 	orr.w	r2, r3, r0
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	440b      	add	r3, r1
 80041b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80041bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3303      	adds	r3, #3
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	061a      	lsls	r2, r3, #24
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3302      	adds	r3, #2
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	041b      	lsls	r3, r3, #16
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3301      	adds	r3, #1
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	4313      	orrs	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	4610      	mov	r0, r2
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	6811      	ldr	r1, [r2, #0]
 80041e4:	ea43 0200 	orr.w	r2, r3, r0
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	440b      	add	r3, r1
 80041ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80041f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	3318      	adds	r3, #24
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	4413      	add	r3, r2
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	6811      	ldr	r1, [r2, #0]
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	3318      	adds	r3, #24
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	440b      	add	r3, r1
 8004212:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	e00e      	b.n	8004236 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e006      	b.n	8004236 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3724      	adds	r7, #36	; 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004256:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d002      	beq.n	8004264 <HAL_CAN_IsTxMessagePending+0x22>
 800425e:	7afb      	ldrb	r3, [r7, #11]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d10b      	bne.n	800427c <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	069b      	lsls	r3, r3, #26
 800426e:	401a      	ands	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	069b      	lsls	r3, r3, #26
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004278:	2301      	movs	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800427c:	68fb      	ldr	r3, [r7, #12]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <__NVIC_SetPriorityGrouping+0x44>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042a8:	4013      	ands	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042be:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <__NVIC_SetPriorityGrouping+0x44>)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	60d3      	str	r3, [r2, #12]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <__NVIC_GetPriorityGrouping+0x18>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	f003 0307 	and.w	r3, r3, #7
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	6039      	str	r1, [r7, #0]
 80042fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004300:	2b00      	cmp	r3, #0
 8004302:	db0a      	blt.n	800431a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	b2da      	uxtb	r2, r3
 8004308:	490c      	ldr	r1, [pc, #48]	; (800433c <__NVIC_SetPriority+0x4c>)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	0112      	lsls	r2, r2, #4
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	440b      	add	r3, r1
 8004314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004318:	e00a      	b.n	8004330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	b2da      	uxtb	r2, r3
 800431e:	4908      	ldr	r1, [pc, #32]	; (8004340 <__NVIC_SetPriority+0x50>)
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	3b04      	subs	r3, #4
 8004328:	0112      	lsls	r2, r2, #4
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	440b      	add	r3, r1
 800432e:	761a      	strb	r2, [r3, #24]
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	e000e100 	.word	0xe000e100
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004344:	b480      	push	{r7}
 8004346:	b089      	sub	sp, #36	; 0x24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f1c3 0307 	rsb	r3, r3, #7
 800435e:	2b04      	cmp	r3, #4
 8004360:	bf28      	it	cs
 8004362:	2304      	movcs	r3, #4
 8004364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3304      	adds	r3, #4
 800436a:	2b06      	cmp	r3, #6
 800436c:	d902      	bls.n	8004374 <NVIC_EncodePriority+0x30>
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3b03      	subs	r3, #3
 8004372:	e000      	b.n	8004376 <NVIC_EncodePriority+0x32>
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004378:	f04f 32ff 	mov.w	r2, #4294967295
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43da      	mvns	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	401a      	ands	r2, r3
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800438c:	f04f 31ff 	mov.w	r1, #4294967295
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	fa01 f303 	lsl.w	r3, r1, r3
 8004396:	43d9      	mvns	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439c:	4313      	orrs	r3, r2
         );
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3724      	adds	r7, #36	; 0x24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043bc:	d301      	bcc.n	80043c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043be:	2301      	movs	r3, #1
 80043c0:	e00f      	b.n	80043e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <SysTick_Config+0x40>)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ca:	210f      	movs	r1, #15
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	f7ff ff8e 	bl	80042f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <SysTick_Config+0x40>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043da:	4b04      	ldr	r3, [pc, #16]	; (80043ec <SysTick_Config+0x40>)
 80043dc:	2207      	movs	r2, #7
 80043de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	e000e010 	.word	0xe000e010

080043f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7ff ff47 	bl	800428c <__NVIC_SetPriorityGrouping>
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b086      	sub	sp, #24
 800440a:	af00      	add	r7, sp, #0
 800440c:	4603      	mov	r3, r0
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
 8004412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004418:	f7ff ff5c 	bl	80042d4 <__NVIC_GetPriorityGrouping>
 800441c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	6978      	ldr	r0, [r7, #20]
 8004424:	f7ff ff8e 	bl	8004344 <NVIC_EncodePriority>
 8004428:	4602      	mov	r2, r0
 800442a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442e:	4611      	mov	r1, r2
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ff5d 	bl	80042f0 <__NVIC_SetPriority>
}
 8004436:	bf00      	nop
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ffb0 	bl	80043ac <SysTick_Config>
 800444c:	4603      	mov	r3, r0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004472:	4b2f      	ldr	r3, [pc, #188]	; (8004530 <HAL_FLASH_Program+0xd8>)
 8004474:	7e1b      	ldrb	r3, [r3, #24]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_FLASH_Program+0x26>
 800447a:	2302      	movs	r3, #2
 800447c:	e054      	b.n	8004528 <HAL_FLASH_Program+0xd0>
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <HAL_FLASH_Program+0xd8>)
 8004480:	2201      	movs	r2, #1
 8004482:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004484:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004488:	f000 f8a8 	bl	80045dc <FLASH_WaitForLastOperation>
 800448c:	4603      	mov	r3, r0
 800448e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d144      	bne.n	8004520 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d102      	bne.n	80044a2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800449c:	2301      	movs	r3, #1
 800449e:	757b      	strb	r3, [r7, #21]
 80044a0:	e007      	b.n	80044b2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d102      	bne.n	80044ae <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80044a8:	2302      	movs	r3, #2
 80044aa:	757b      	strb	r3, [r7, #21]
 80044ac:	e001      	b.n	80044b2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80044ae:	2304      	movs	r3, #4
 80044b0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	75bb      	strb	r3, [r7, #22]
 80044b6:	e02d      	b.n	8004514 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80044b8:	7dbb      	ldrb	r3, [r7, #22]
 80044ba:	005a      	lsls	r2, r3, #1
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	eb02 0c03 	add.w	ip, r2, r3
 80044c2:	7dbb      	ldrb	r3, [r7, #22]
 80044c4:	0119      	lsls	r1, r3, #4
 80044c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044ca:	f1c1 0620 	rsb	r6, r1, #32
 80044ce:	f1a1 0020 	sub.w	r0, r1, #32
 80044d2:	fa22 f401 	lsr.w	r4, r2, r1
 80044d6:	fa03 f606 	lsl.w	r6, r3, r6
 80044da:	4334      	orrs	r4, r6
 80044dc:	fa23 f000 	lsr.w	r0, r3, r0
 80044e0:	4304      	orrs	r4, r0
 80044e2:	fa23 f501 	lsr.w	r5, r3, r1
 80044e6:	b2a3      	uxth	r3, r4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4660      	mov	r0, ip
 80044ec:	f000 f85a 	bl	80045a4 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80044f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044f4:	f000 f872 	bl	80045dc <FLASH_WaitForLastOperation>
 80044f8:	4603      	mov	r3, r0
 80044fa:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80044fc:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <HAL_FLASH_Program+0xdc>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	4a0c      	ldr	r2, [pc, #48]	; (8004534 <HAL_FLASH_Program+0xdc>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d107      	bne.n	800451e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800450e:	7dbb      	ldrb	r3, [r7, #22]
 8004510:	3301      	adds	r3, #1
 8004512:	75bb      	strb	r3, [r7, #22]
 8004514:	7dba      	ldrb	r2, [r7, #22]
 8004516:	7d7b      	ldrb	r3, [r7, #21]
 8004518:	429a      	cmp	r2, r3
 800451a:	d3cd      	bcc.n	80044b8 <HAL_FLASH_Program+0x60>
 800451c:	e000      	b.n	8004520 <HAL_FLASH_Program+0xc8>
      {
        break;
 800451e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004520:	4b03      	ldr	r3, [pc, #12]	; (8004530 <HAL_FLASH_Program+0xd8>)
 8004522:	2200      	movs	r2, #0
 8004524:	761a      	strb	r2, [r3, #24]

  return status;
 8004526:	7dfb      	ldrb	r3, [r7, #23]
}
 8004528:	4618      	mov	r0, r3
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004530:	200005a0 	.word	0x200005a0
 8004534:	40022000 	.word	0x40022000

08004538 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_FLASH_Unlock+0x40>)
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <HAL_FLASH_Unlock+0x40>)
 8004550:	4a0a      	ldr	r2, [pc, #40]	; (800457c <HAL_FLASH_Unlock+0x44>)
 8004552:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004554:	4b08      	ldr	r3, [pc, #32]	; (8004578 <HAL_FLASH_Unlock+0x40>)
 8004556:	4a0a      	ldr	r2, [pc, #40]	; (8004580 <HAL_FLASH_Unlock+0x48>)
 8004558:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800455a:	4b07      	ldr	r3, [pc, #28]	; (8004578 <HAL_FLASH_Unlock+0x40>)
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800456a:	79fb      	ldrb	r3, [r7, #7]
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	40022000 	.word	0x40022000
 800457c:	45670123 	.word	0x45670123
 8004580:	cdef89ab 	.word	0xcdef89ab

08004584 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <HAL_FLASH_Lock+0x1c>)
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <HAL_FLASH_Lock+0x1c>)
 800458e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004592:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40022000 	.word	0x40022000

080045a4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80045b0:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <FLASH_Program_HalfWord+0x30>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <FLASH_Program_HalfWord+0x34>)
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <FLASH_Program_HalfWord+0x34>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	887a      	ldrh	r2, [r7, #2]
 80045c6:	801a      	strh	r2, [r3, #0]
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	200005a0 	.word	0x200005a0
 80045d8:	40022000 	.word	0x40022000

080045dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80045e4:	f7ff fad0 	bl	8003b88 <HAL_GetTick>
 80045e8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80045ea:	e010      	b.n	800460e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d00c      	beq.n	800460e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d007      	beq.n	800460a <FLASH_WaitForLastOperation+0x2e>
 80045fa:	f7ff fac5 	bl	8003b88 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	429a      	cmp	r2, r3
 8004608:	d201      	bcs.n	800460e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e01f      	b.n	800464e <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800460e:	4b12      	ldr	r3, [pc, #72]	; (8004658 <FLASH_WaitForLastOperation+0x7c>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b01      	cmp	r3, #1
 8004618:	d0e8      	beq.n	80045ec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800461a:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <FLASH_WaitForLastOperation+0x7c>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b20      	cmp	r3, #32
 8004624:	d102      	bne.n	800462c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004626:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <FLASH_WaitForLastOperation+0x7c>)
 8004628:	2220      	movs	r2, #32
 800462a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <FLASH_WaitForLastOperation+0x7c>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b10      	cmp	r3, #16
 8004636:	d005      	beq.n	8004644 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004638:	4b07      	ldr	r3, [pc, #28]	; (8004658 <FLASH_WaitForLastOperation+0x7c>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004640:	2b04      	cmp	r3, #4
 8004642:	d103      	bne.n	800464c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004644:	f000 f80a 	bl	800465c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40022000 	.word	0x40022000

0800465c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004666:	4b14      	ldr	r3, [pc, #80]	; (80046b8 <FLASH_SetErrorCode+0x5c>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b10      	cmp	r3, #16
 8004670:	d109      	bne.n	8004686 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <FLASH_SetErrorCode+0x60>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f043 0302 	orr.w	r3, r3, #2
 800467a:	4a10      	ldr	r2, [pc, #64]	; (80046bc <FLASH_SetErrorCode+0x60>)
 800467c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f043 0310 	orr.w	r3, r3, #16
 8004684:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004686:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <FLASH_SetErrorCode+0x5c>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d109      	bne.n	80046a6 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <FLASH_SetErrorCode+0x60>)
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <FLASH_SetErrorCode+0x60>)
 800469c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80046a6:	4a04      	ldr	r2, [pc, #16]	; (80046b8 <FLASH_SetErrorCode+0x5c>)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60d3      	str	r3, [r2, #12]
}  
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40022000 	.word	0x40022000
 80046bc:	200005a0 	.word	0x200005a0

080046c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80046d2:	4b2e      	ldr	r3, [pc, #184]	; (800478c <HAL_FLASHEx_Erase+0xcc>)
 80046d4:	7e1b      	ldrb	r3, [r3, #24]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_FLASHEx_Erase+0x1e>
 80046da:	2302      	movs	r3, #2
 80046dc:	e052      	b.n	8004784 <HAL_FLASHEx_Erase+0xc4>
 80046de:	4b2b      	ldr	r3, [pc, #172]	; (800478c <HAL_FLASHEx_Erase+0xcc>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d115      	bne.n	8004718 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80046ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046f0:	f7ff ff74 	bl	80045dc <FLASH_WaitForLastOperation>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d140      	bne.n	800477c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80046fa:	f000 f84b 	bl	8004794 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80046fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004702:	f7ff ff6b 	bl	80045dc <FLASH_WaitForLastOperation>
 8004706:	4603      	mov	r3, r0
 8004708:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800470a:	4b21      	ldr	r3, [pc, #132]	; (8004790 <HAL_FLASHEx_Erase+0xd0>)
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	4a20      	ldr	r2, [pc, #128]	; (8004790 <HAL_FLASHEx_Erase+0xd0>)
 8004710:	f023 0304 	bic.w	r3, r3, #4
 8004714:	6113      	str	r3, [r2, #16]
 8004716:	e031      	b.n	800477c <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004718:	f24c 3050 	movw	r0, #50000	; 0xc350
 800471c:	f7ff ff5e 	bl	80045dc <FLASH_WaitForLastOperation>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d12a      	bne.n	800477c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f04f 32ff 	mov.w	r2, #4294967295
 800472c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	e019      	b.n	800476a <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004736:	68b8      	ldr	r0, [r7, #8]
 8004738:	f000 f846 	bl	80047c8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800473c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004740:	f7ff ff4c 	bl	80045dc <FLASH_WaitForLastOperation>
 8004744:	4603      	mov	r3, r0
 8004746:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004748:	4b11      	ldr	r3, [pc, #68]	; (8004790 <HAL_FLASHEx_Erase+0xd0>)
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	4a10      	ldr	r2, [pc, #64]	; (8004790 <HAL_FLASHEx_Erase+0xd0>)
 800474e:	f023 0302 	bic.w	r3, r3, #2
 8004752:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	601a      	str	r2, [r3, #0]
            break;
 8004760:	e00c      	b.n	800477c <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004768:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	02da      	lsls	r2, r3, #11
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	429a      	cmp	r2, r3
 800477a:	d3dc      	bcc.n	8004736 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <HAL_FLASHEx_Erase+0xcc>)
 800477e:	2200      	movs	r2, #0
 8004780:	761a      	strb	r2, [r3, #24]

  return status;
 8004782:	7bfb      	ldrb	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200005a0 	.word	0x200005a0
 8004790:	40022000 	.word	0x40022000

08004794 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <FLASH_MassErase+0x2c>)
 800479a:	2200      	movs	r2, #0
 800479c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <FLASH_MassErase+0x30>)
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	4a08      	ldr	r2, [pc, #32]	; (80047c4 <FLASH_MassErase+0x30>)
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <FLASH_MassErase+0x30>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <FLASH_MassErase+0x30>)
 80047b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b4:	6113      	str	r3, [r2, #16]
}
 80047b6:	bf00      	nop
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	200005a0 	.word	0x200005a0
 80047c4:	40022000 	.word	0x40022000

080047c8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <FLASH_PageErase+0x38>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <FLASH_PageErase+0x3c>)
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <FLASH_PageErase+0x3c>)
 80047dc:	f043 0302 	orr.w	r3, r3, #2
 80047e0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80047e2:	4a08      	ldr	r2, [pc, #32]	; (8004804 <FLASH_PageErase+0x3c>)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <FLASH_PageErase+0x3c>)
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	4a05      	ldr	r2, [pc, #20]	; (8004804 <FLASH_PageErase+0x3c>)
 80047ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f2:	6113      	str	r3, [r2, #16]
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	200005a0 	.word	0x200005a0
 8004804:	40022000 	.word	0x40022000

08004808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004816:	e154      	b.n	8004ac2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 8146 	beq.w	8004abc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d00b      	beq.n	8004850 <HAL_GPIO_Init+0x48>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d007      	beq.n	8004850 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004844:	2b11      	cmp	r3, #17
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b12      	cmp	r3, #18
 800484e:	d130      	bne.n	80048b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	2203      	movs	r2, #3
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	43db      	mvns	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004886:	2201      	movs	r2, #1
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 0201 	and.w	r2, r3, #1
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	2203      	movs	r2, #3
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_Init+0xea>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b12      	cmp	r3, #18
 80048f0:	d123      	bne.n	800493a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	08da      	lsrs	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3208      	adds	r2, #8
 80048fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	220f      	movs	r2, #15
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	08da      	lsrs	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3208      	adds	r2, #8
 8004934:	6939      	ldr	r1, [r7, #16]
 8004936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0203 	and.w	r2, r3, #3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80a0 	beq.w	8004abc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497c:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <HAL_GPIO_Init+0x2d8>)
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	4a57      	ldr	r2, [pc, #348]	; (8004ae0 <HAL_GPIO_Init+0x2d8>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6193      	str	r3, [r2, #24]
 8004988:	4b55      	ldr	r3, [pc, #340]	; (8004ae0 <HAL_GPIO_Init+0x2d8>)
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004994:	4a53      	ldr	r2, [pc, #332]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	3302      	adds	r3, #2
 800499c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	220f      	movs	r2, #15
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049be:	d019      	beq.n	80049f4 <HAL_GPIO_Init+0x1ec>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a49      	ldr	r2, [pc, #292]	; (8004ae8 <HAL_GPIO_Init+0x2e0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_GPIO_Init+0x1e8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a48      	ldr	r2, [pc, #288]	; (8004aec <HAL_GPIO_Init+0x2e4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00d      	beq.n	80049ec <HAL_GPIO_Init+0x1e4>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a47      	ldr	r2, [pc, #284]	; (8004af0 <HAL_GPIO_Init+0x2e8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d007      	beq.n	80049e8 <HAL_GPIO_Init+0x1e0>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a46      	ldr	r2, [pc, #280]	; (8004af4 <HAL_GPIO_Init+0x2ec>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <HAL_GPIO_Init+0x1dc>
 80049e0:	2304      	movs	r3, #4
 80049e2:	e008      	b.n	80049f6 <HAL_GPIO_Init+0x1ee>
 80049e4:	2305      	movs	r3, #5
 80049e6:	e006      	b.n	80049f6 <HAL_GPIO_Init+0x1ee>
 80049e8:	2303      	movs	r3, #3
 80049ea:	e004      	b.n	80049f6 <HAL_GPIO_Init+0x1ee>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e002      	b.n	80049f6 <HAL_GPIO_Init+0x1ee>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_GPIO_Init+0x1ee>
 80049f4:	2300      	movs	r3, #0
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	f002 0203 	and.w	r2, r2, #3
 80049fc:	0092      	lsls	r2, r2, #2
 80049fe:	4093      	lsls	r3, r2
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a06:	4937      	ldr	r1, [pc, #220]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	089b      	lsrs	r3, r3, #2
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a14:	4b38      	ldr	r3, [pc, #224]	; (8004af8 <HAL_GPIO_Init+0x2f0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4013      	ands	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a38:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <HAL_GPIO_Init+0x2f0>)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a3e:	4b2e      	ldr	r3, [pc, #184]	; (8004af8 <HAL_GPIO_Init+0x2f0>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	43db      	mvns	r3, r3
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a62:	4a25      	ldr	r2, [pc, #148]	; (8004af8 <HAL_GPIO_Init+0x2f0>)
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a68:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <HAL_GPIO_Init+0x2f0>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4013      	ands	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a8c:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <HAL_GPIO_Init+0x2f0>)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a92:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_GPIO_Init+0x2f0>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ab6:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <HAL_GPIO_Init+0x2f0>)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f aea3 	bne.w	8004818 <HAL_GPIO_Init+0x10>
  }
}
 8004ad2:	bf00      	nop
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	48000400 	.word	0x48000400
 8004aec:	48000800 	.word	0x48000800
 8004af0:	48000c00 	.word	0x48000c00
 8004af4:	48001000 	.word	0x48001000
 8004af8:	40010400 	.word	0x40010400

08004afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	887b      	ldrh	r3, [r7, #2]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
 8004b18:	e001      	b.n	8004b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b3c:	787b      	ldrb	r3, [r7, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b48:	e002      	b.n	8004b50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_PWREx_EnableSDADC+0x38>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <HAL_PWREx_EnableSDADC+0x38>)
 8004b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	61d3      	str	r3, [r2, #28]
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_PWREx_EnableSDADC+0x38>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_PWREx_EnableSDADC+0x3c>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4905      	ldr	r1, [pc, #20]	; (8004b98 <HAL_PWREx_EnableSDADC+0x3c>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	600b      	str	r3, [r1, #0]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40007000 	.word	0x40007000

08004b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	1d3b      	adds	r3, r7, #4
 8004ba6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ba8:	1d3b      	adds	r3, r7, #4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f000 bef4 	b.w	800599e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 816a 	beq.w	8004e9a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004bc6:	4bb3      	ldr	r3, [pc, #716]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d00c      	beq.n	8004bec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bd2:	4bb0      	ldr	r3, [pc, #704]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d159      	bne.n	8004c92 <HAL_RCC_OscConfig+0xf6>
 8004bde:	4bad      	ldr	r3, [pc, #692]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bea:	d152      	bne.n	8004c92 <HAL_RCC_OscConfig+0xf6>
 8004bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bf0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004bf8:	fa93 f3a3 	rbit	r3, r3
 8004bfc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c00:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c04:	fab3 f383 	clz	r3, r3
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d102      	bne.n	8004c1e <HAL_RCC_OscConfig+0x82>
 8004c18:	4b9e      	ldr	r3, [pc, #632]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	e015      	b.n	8004c4a <HAL_RCC_OscConfig+0xae>
 8004c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004c3a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004c3e:	fa93 f3a3 	rbit	r3, r3
 8004c42:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004c46:	4b93      	ldr	r3, [pc, #588]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c4e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004c52:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004c56:	fa92 f2a2 	rbit	r2, r2
 8004c5a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004c5e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004c62:	fab2 f282 	clz	r2, r2
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	f042 0220 	orr.w	r2, r2, #32
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	f002 021f 	and.w	r2, r2, #31
 8004c72:	2101      	movs	r1, #1
 8004c74:	fa01 f202 	lsl.w	r2, r1, r2
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 810c 	beq.w	8004e98 <HAL_RCC_OscConfig+0x2fc>
 8004c80:	1d3b      	adds	r3, r7, #4
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f040 8106 	bne.w	8004e98 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f000 be86 	b.w	800599e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c92:	1d3b      	adds	r3, r7, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9c:	d106      	bne.n	8004cac <HAL_RCC_OscConfig+0x110>
 8004c9e:	4b7d      	ldr	r3, [pc, #500]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a7c      	ldr	r2, [pc, #496]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e030      	b.n	8004d0e <HAL_RCC_OscConfig+0x172>
 8004cac:	1d3b      	adds	r3, r7, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x134>
 8004cb6:	4b77      	ldr	r3, [pc, #476]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a76      	ldr	r2, [pc, #472]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b74      	ldr	r3, [pc, #464]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a73      	ldr	r2, [pc, #460]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e01e      	b.n	8004d0e <HAL_RCC_OscConfig+0x172>
 8004cd0:	1d3b      	adds	r3, r7, #4
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cda:	d10c      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x15a>
 8004cdc:	4b6d      	ldr	r3, [pc, #436]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6c      	ldr	r2, [pc, #432]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4b6a      	ldr	r3, [pc, #424]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a69      	ldr	r2, [pc, #420]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e00b      	b.n	8004d0e <HAL_RCC_OscConfig+0x172>
 8004cf6:	4b67      	ldr	r3, [pc, #412]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a66      	ldr	r2, [pc, #408]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4b64      	ldr	r3, [pc, #400]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a63      	ldr	r2, [pc, #396]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d0e:	4b61      	ldr	r3, [pc, #388]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	f023 020f 	bic.w	r2, r3, #15
 8004d16:	1d3b      	adds	r3, r7, #4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	495d      	ldr	r1, [pc, #372]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d22:	1d3b      	adds	r3, r7, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d059      	beq.n	8004de0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fe ff2c 	bl	8003b88 <HAL_GetTick>
 8004d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d34:	e00a      	b.n	8004d4c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d36:	f7fe ff27 	bl	8003b88 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	; 0x64
 8004d44:	d902      	bls.n	8004d4c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	f000 be29 	b.w	800599e <HAL_RCC_OscConfig+0xe02>
 8004d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d50:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004d58:	fa93 f3a3 	rbit	r3, r3
 8004d5c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004d60:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d64:	fab3 f383 	clz	r3, r3
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d102      	bne.n	8004d7e <HAL_RCC_OscConfig+0x1e2>
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	e015      	b.n	8004daa <HAL_RCC_OscConfig+0x20e>
 8004d7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d82:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d86:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004d8a:	fa93 f3a3 	rbit	r3, r3
 8004d8e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d96:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004d9a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004d9e:	fa93 f3a3 	rbit	r3, r3
 8004da2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004da6:	4b3b      	ldr	r3, [pc, #236]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dae:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004db2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004db6:	fa92 f2a2 	rbit	r2, r2
 8004dba:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004dbe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004dc2:	fab2 f282 	clz	r2, r2
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	f042 0220 	orr.w	r2, r2, #32
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	f002 021f 	and.w	r2, r2, #31
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0ab      	beq.n	8004d36 <HAL_RCC_OscConfig+0x19a>
 8004dde:	e05c      	b.n	8004e9a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de0:	f7fe fed2 	bl	8003b88 <HAL_GetTick>
 8004de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004de8:	e00a      	b.n	8004e00 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dea:	f7fe fecd 	bl	8003b88 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	; 0x64
 8004df8:	d902      	bls.n	8004e00 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	f000 bdcf 	b.w	800599e <HAL_RCC_OscConfig+0xe02>
 8004e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e04:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004e14:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e18:	fab3 f383 	clz	r3, r3
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d102      	bne.n	8004e32 <HAL_RCC_OscConfig+0x296>
 8004e2c:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	e015      	b.n	8004e5e <HAL_RCC_OscConfig+0x2c2>
 8004e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e36:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004e46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e4a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004e4e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004e52:	fa93 f3a3 	rbit	r3, r3
 8004e56:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <HAL_RCC_OscConfig+0x2f8>)
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e62:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004e66:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004e6a:	fa92 f2a2 	rbit	r2, r2
 8004e6e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004e72:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004e76:	fab2 f282 	clz	r2, r2
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	f042 0220 	orr.w	r2, r2, #32
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	f002 021f 	and.w	r2, r2, #31
 8004e86:	2101      	movs	r1, #1
 8004e88:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d1ab      	bne.n	8004dea <HAL_RCC_OscConfig+0x24e>
 8004e92:	e002      	b.n	8004e9a <HAL_RCC_OscConfig+0x2fe>
 8004e94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 816f 	beq.w	8005188 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004eaa:	4bd0      	ldr	r3, [pc, #832]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f003 030c 	and.w	r3, r3, #12
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004eb6:	4bcd      	ldr	r3, [pc, #820]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d16c      	bne.n	8004f9c <HAL_RCC_OscConfig+0x400>
 8004ec2:	4bca      	ldr	r3, [pc, #808]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d166      	bne.n	8004f9c <HAL_RCC_OscConfig+0x400>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004ed8:	fa93 f3a3 	rbit	r3, r3
 8004edc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004ee0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee4:	fab3 f383 	clz	r3, r3
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d102      	bne.n	8004efe <HAL_RCC_OscConfig+0x362>
 8004ef8:	4bbc      	ldr	r3, [pc, #752]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	e013      	b.n	8004f26 <HAL_RCC_OscConfig+0x38a>
 8004efe:	2302      	movs	r3, #2
 8004f00:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f04:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004f08:	fa93 f3a3 	rbit	r3, r3
 8004f0c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004f10:	2302      	movs	r3, #2
 8004f12:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004f16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f1a:	fa93 f3a3 	rbit	r3, r3
 8004f1e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004f22:	4bb2      	ldr	r3, [pc, #712]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	2202      	movs	r2, #2
 8004f28:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004f2c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004f30:	fa92 f2a2 	rbit	r2, r2
 8004f34:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004f38:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004f3c:	fab2 f282 	clz	r2, r2
 8004f40:	b2d2      	uxtb	r2, r2
 8004f42:	f042 0220 	orr.w	r2, r2, #32
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	f002 021f 	and.w	r2, r2, #31
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d007      	beq.n	8004f68 <HAL_RCC_OscConfig+0x3cc>
 8004f58:	1d3b      	adds	r3, r7, #4
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d002      	beq.n	8004f68 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f000 bd1b 	b.w	800599e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f68:	4ba0      	ldr	r3, [pc, #640]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f70:	1d3b      	adds	r3, r7, #4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	21f8      	movs	r1, #248	; 0xf8
 8004f78:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004f80:	fa91 f1a1 	rbit	r1, r1
 8004f84:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004f88:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004f8c:	fab1 f181 	clz	r1, r1
 8004f90:	b2c9      	uxtb	r1, r1
 8004f92:	408b      	lsls	r3, r1
 8004f94:	4995      	ldr	r1, [pc, #596]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9a:	e0f5      	b.n	8005188 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f9c:	1d3b      	adds	r3, r7, #4
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8085 	beq.w	80050b2 <HAL_RCC_OscConfig+0x516>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004fba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	461a      	mov	r2, r3
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd4:	f7fe fdd8 	bl	8003b88 <HAL_GetTick>
 8004fd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fde:	f7fe fdd3 	bl	8003b88 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d902      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	f000 bcd5 	b.w	800599e <HAL_RCC_OscConfig+0xe02>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004ffe:	fa93 f3a3 	rbit	r3, r3
 8005002:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005006:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500a:	fab3 f383 	clz	r3, r3
 800500e:	b2db      	uxtb	r3, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d102      	bne.n	8005024 <HAL_RCC_OscConfig+0x488>
 800501e:	4b73      	ldr	r3, [pc, #460]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	e013      	b.n	800504c <HAL_RCC_OscConfig+0x4b0>
 8005024:	2302      	movs	r3, #2
 8005026:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005036:	2302      	movs	r3, #2
 8005038:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800503c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005040:	fa93 f3a3 	rbit	r3, r3
 8005044:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005048:	4b68      	ldr	r3, [pc, #416]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2202      	movs	r2, #2
 800504e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005052:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005056:	fa92 f2a2 	rbit	r2, r2
 800505a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800505e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005062:	fab2 f282 	clz	r2, r2
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	f042 0220 	orr.w	r2, r2, #32
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	f002 021f 	and.w	r2, r2, #31
 8005072:	2101      	movs	r1, #1
 8005074:	fa01 f202 	lsl.w	r2, r1, r2
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0af      	beq.n	8004fde <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507e:	4b5b      	ldr	r3, [pc, #364]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005086:	1d3b      	adds	r3, r7, #4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	21f8      	movs	r1, #248	; 0xf8
 800508e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005092:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005096:	fa91 f1a1 	rbit	r1, r1
 800509a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800509e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80050a2:	fab1 f181 	clz	r1, r1
 80050a6:	b2c9      	uxtb	r1, r1
 80050a8:	408b      	lsls	r3, r1
 80050aa:	4950      	ldr	r1, [pc, #320]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	600b      	str	r3, [r1, #0]
 80050b0:	e06a      	b.n	8005188 <HAL_RCC_OscConfig+0x5ec>
 80050b2:	2301      	movs	r3, #1
 80050b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050bc:	fa93 f3a3 	rbit	r3, r3
 80050c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80050c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c8:	fab3 f383 	clz	r3, r3
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	461a      	mov	r2, r3
 80050da:	2300      	movs	r3, #0
 80050dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050de:	f7fe fd53 	bl	8003b88 <HAL_GetTick>
 80050e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050e8:	f7fe fd4e 	bl	8003b88 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d902      	bls.n	80050fe <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	f000 bc50 	b.w	800599e <HAL_RCC_OscConfig+0xe02>
 80050fe:	2302      	movs	r3, #2
 8005100:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005104:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005108:	fa93 f3a3 	rbit	r3, r3
 800510c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005114:	fab3 f383 	clz	r3, r3
 8005118:	b2db      	uxtb	r3, r3
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	b2db      	uxtb	r3, r3
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d102      	bne.n	800512e <HAL_RCC_OscConfig+0x592>
 8005128:	4b30      	ldr	r3, [pc, #192]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	e013      	b.n	8005156 <HAL_RCC_OscConfig+0x5ba>
 800512e:	2302      	movs	r3, #2
 8005130:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005138:	fa93 f3a3 	rbit	r3, r3
 800513c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005140:	2302      	movs	r3, #2
 8005142:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005146:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800514a:	fa93 f3a3 	rbit	r3, r3
 800514e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005152:	4b26      	ldr	r3, [pc, #152]	; (80051ec <HAL_RCC_OscConfig+0x650>)
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	2202      	movs	r2, #2
 8005158:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800515c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005160:	fa92 f2a2 	rbit	r2, r2
 8005164:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005168:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800516c:	fab2 f282 	clz	r2, r2
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	f042 0220 	orr.w	r2, r2, #32
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	f002 021f 	and.w	r2, r2, #31
 800517c:	2101      	movs	r1, #1
 800517e:	fa01 f202 	lsl.w	r2, r1, r2
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1af      	bne.n	80050e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005188:	1d3b      	adds	r3, r7, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80da 	beq.w	800534c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005198:	1d3b      	adds	r3, r7, #4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d069      	beq.n	8005276 <HAL_RCC_OscConfig+0x6da>
 80051a2:	2301      	movs	r3, #1
 80051a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80051ac:	fa93 f3a3 	rbit	r3, r3
 80051b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80051b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051b8:	fab3 f383 	clz	r3, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCC_OscConfig+0x654>)
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	461a      	mov	r2, r3
 80051c8:	2301      	movs	r3, #1
 80051ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051cc:	f7fe fcdc 	bl	8003b88 <HAL_GetTick>
 80051d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d4:	e00e      	b.n	80051f4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d6:	f7fe fcd7 	bl	8003b88 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d906      	bls.n	80051f4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e3d9      	b.n	800599e <HAL_RCC_OscConfig+0xe02>
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000
 80051f0:	10908120 	.word	0x10908120
 80051f4:	2302      	movs	r3, #2
 80051f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051fe:	fa93 f3a3 	rbit	r3, r3
 8005202:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005206:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800520a:	2202      	movs	r2, #2
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	fa93 f2a3 	rbit	r2, r3
 8005218:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005222:	2202      	movs	r2, #2
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	fa93 f2a3 	rbit	r2, r3
 8005230:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005234:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005236:	4ba5      	ldr	r3, [pc, #660]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 8005238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800523a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800523e:	2102      	movs	r1, #2
 8005240:	6019      	str	r1, [r3, #0]
 8005242:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	fa93 f1a3 	rbit	r1, r3
 800524c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005250:	6019      	str	r1, [r3, #0]
  return result;
 8005252:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	fab3 f383 	clz	r3, r3
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	2101      	movs	r1, #1
 800526a:	fa01 f303 	lsl.w	r3, r1, r3
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0b0      	beq.n	80051d6 <HAL_RCC_OscConfig+0x63a>
 8005274:	e06a      	b.n	800534c <HAL_RCC_OscConfig+0x7b0>
 8005276:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	fa93 f2a3 	rbit	r2, r3
 8005288:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800528c:	601a      	str	r2, [r3, #0]
  return result;
 800528e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005292:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005294:	fab3 f383 	clz	r3, r3
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	4b8c      	ldr	r3, [pc, #560]	; (80054d0 <HAL_RCC_OscConfig+0x934>)
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	461a      	mov	r2, r3
 80052a4:	2300      	movs	r3, #0
 80052a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a8:	f7fe fc6e 	bl	8003b88 <HAL_GetTick>
 80052ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b0:	e009      	b.n	80052c6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b2:	f7fe fc69 	bl	8003b88 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e36b      	b.n	800599e <HAL_RCC_OscConfig+0xe02>
 80052c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80052ca:	2202      	movs	r2, #2
 80052cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	fa93 f2a3 	rbit	r2, r3
 80052d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80052e2:	2202      	movs	r2, #2
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	fa93 f2a3 	rbit	r2, r3
 80052f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80052fa:	2202      	movs	r2, #2
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	fa93 f2a3 	rbit	r2, r3
 8005308:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800530c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800530e:	4b6f      	ldr	r3, [pc, #444]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 8005310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005312:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005316:	2102      	movs	r1, #2
 8005318:	6019      	str	r1, [r3, #0]
 800531a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	fa93 f1a3 	rbit	r1, r3
 8005324:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005328:	6019      	str	r1, [r3, #0]
  return result;
 800532a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	fab3 f383 	clz	r3, r3
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2101      	movs	r1, #1
 8005342:	fa01 f303 	lsl.w	r3, r1, r3
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1b2      	bne.n	80052b2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800534c:	1d3b      	adds	r3, r7, #4
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 8158 	beq.w	800560c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800535c:	2300      	movs	r3, #0
 800535e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005362:	4b5a      	ldr	r3, [pc, #360]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d112      	bne.n	8005394 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536e:	4b57      	ldr	r3, [pc, #348]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	4a56      	ldr	r2, [pc, #344]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 8005374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005378:	61d3      	str	r3, [r2, #28]
 800537a:	4b54      	ldr	r3, [pc, #336]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005382:	f107 0308 	add.w	r3, r7, #8
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005394:	4b4f      	ldr	r3, [pc, #316]	; (80054d4 <HAL_RCC_OscConfig+0x938>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d11a      	bne.n	80053d6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053a0:	4b4c      	ldr	r3, [pc, #304]	; (80054d4 <HAL_RCC_OscConfig+0x938>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a4b      	ldr	r2, [pc, #300]	; (80054d4 <HAL_RCC_OscConfig+0x938>)
 80053a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ac:	f7fe fbec 	bl	8003b88 <HAL_GetTick>
 80053b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b4:	e009      	b.n	80053ca <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b6:	f7fe fbe7 	bl	8003b88 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	; 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e2e9      	b.n	800599e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ca:	4b42      	ldr	r3, [pc, #264]	; (80054d4 <HAL_RCC_OscConfig+0x938>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0ef      	beq.n	80053b6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d106      	bne.n	80053ee <HAL_RCC_OscConfig+0x852>
 80053e0:	4b3a      	ldr	r3, [pc, #232]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	4a39      	ldr	r2, [pc, #228]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	6213      	str	r3, [r2, #32]
 80053ec:	e02f      	b.n	800544e <HAL_RCC_OscConfig+0x8b2>
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10c      	bne.n	8005412 <HAL_RCC_OscConfig+0x876>
 80053f8:	4b34      	ldr	r3, [pc, #208]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	4a33      	ldr	r2, [pc, #204]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	6213      	str	r3, [r2, #32]
 8005404:	4b31      	ldr	r3, [pc, #196]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	4a30      	ldr	r2, [pc, #192]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 800540a:	f023 0304 	bic.w	r3, r3, #4
 800540e:	6213      	str	r3, [r2, #32]
 8005410:	e01d      	b.n	800544e <HAL_RCC_OscConfig+0x8b2>
 8005412:	1d3b      	adds	r3, r7, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b05      	cmp	r3, #5
 800541a:	d10c      	bne.n	8005436 <HAL_RCC_OscConfig+0x89a>
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 8005422:	f043 0304 	orr.w	r3, r3, #4
 8005426:	6213      	str	r3, [r2, #32]
 8005428:	4b28      	ldr	r3, [pc, #160]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	4a27      	ldr	r2, [pc, #156]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	6213      	str	r3, [r2, #32]
 8005434:	e00b      	b.n	800544e <HAL_RCC_OscConfig+0x8b2>
 8005436:	4b25      	ldr	r3, [pc, #148]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	4a24      	ldr	r2, [pc, #144]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	6213      	str	r3, [r2, #32]
 8005442:	4b22      	ldr	r3, [pc, #136]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	4a21      	ldr	r2, [pc, #132]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 8005448:	f023 0304 	bic.w	r3, r3, #4
 800544c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800544e:	1d3b      	adds	r3, r7, #4
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d06b      	beq.n	8005530 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005458:	f7fe fb96 	bl	8003b88 <HAL_GetTick>
 800545c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005460:	e00b      	b.n	800547a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005462:	f7fe fb91 	bl	8003b88 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005472:	4293      	cmp	r3, r2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e291      	b.n	800599e <HAL_RCC_OscConfig+0xe02>
 800547a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800547e:	2202      	movs	r2, #2
 8005480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005482:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	fa93 f2a3 	rbit	r2, r3
 800548c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005496:	2202      	movs	r2, #2
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	fa93 f2a3 	rbit	r2, r3
 80054a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80054a8:	601a      	str	r2, [r3, #0]
  return result;
 80054aa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80054ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b0:	fab3 f383 	clz	r3, r3
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f043 0302 	orr.w	r3, r3, #2
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d109      	bne.n	80054d8 <HAL_RCC_OscConfig+0x93c>
 80054c4:	4b01      	ldr	r3, [pc, #4]	; (80054cc <HAL_RCC_OscConfig+0x930>)
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	e014      	b.n	80054f4 <HAL_RCC_OscConfig+0x958>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	10908120 	.word	0x10908120
 80054d4:	40007000 	.word	0x40007000
 80054d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80054dc:	2202      	movs	r2, #2
 80054de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	fa93 f2a3 	rbit	r2, r3
 80054ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	4bbb      	ldr	r3, [pc, #748]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80054f8:	2102      	movs	r1, #2
 80054fa:	6011      	str	r1, [r2, #0]
 80054fc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005500:	6812      	ldr	r2, [r2, #0]
 8005502:	fa92 f1a2 	rbit	r1, r2
 8005506:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800550a:	6011      	str	r1, [r2, #0]
  return result;
 800550c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	fab2 f282 	clz	r2, r2
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	f002 021f 	and.w	r2, r2, #31
 8005522:	2101      	movs	r1, #1
 8005524:	fa01 f202 	lsl.w	r2, r1, r2
 8005528:	4013      	ands	r3, r2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d099      	beq.n	8005462 <HAL_RCC_OscConfig+0x8c6>
 800552e:	e063      	b.n	80055f8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005530:	f7fe fb2a 	bl	8003b88 <HAL_GetTick>
 8005534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005538:	e00b      	b.n	8005552 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800553a:	f7fe fb25 	bl	8003b88 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f241 3288 	movw	r2, #5000	; 0x1388
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e225      	b.n	800599e <HAL_RCC_OscConfig+0xe02>
 8005552:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005556:	2202      	movs	r2, #2
 8005558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	fa93 f2a3 	rbit	r2, r3
 8005564:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800556e:	2202      	movs	r2, #2
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	fa93 f2a3 	rbit	r2, r3
 800557c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005580:	601a      	str	r2, [r3, #0]
  return result;
 8005582:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005586:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005588:	fab3 f383 	clz	r3, r3
 800558c:	b2db      	uxtb	r3, r3
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f043 0302 	orr.w	r3, r3, #2
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d102      	bne.n	80055a2 <HAL_RCC_OscConfig+0xa06>
 800559c:	4b90      	ldr	r3, [pc, #576]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	e00d      	b.n	80055be <HAL_RCC_OscConfig+0xa22>
 80055a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80055a6:	2202      	movs	r2, #2
 80055a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	fa93 f2a3 	rbit	r2, r3
 80055b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	4b89      	ldr	r3, [pc, #548]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80055c2:	2102      	movs	r1, #2
 80055c4:	6011      	str	r1, [r2, #0]
 80055c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80055ca:	6812      	ldr	r2, [r2, #0]
 80055cc:	fa92 f1a2 	rbit	r1, r2
 80055d0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80055d4:	6011      	str	r1, [r2, #0]
  return result;
 80055d6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	fab2 f282 	clz	r2, r2
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	f002 021f 	and.w	r2, r2, #31
 80055ec:	2101      	movs	r1, #1
 80055ee:	fa01 f202 	lsl.w	r2, r1, r2
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1a0      	bne.n	800553a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d105      	bne.n	800560c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005600:	4b77      	ldr	r3, [pc, #476]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	4a76      	ldr	r2, [pc, #472]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 8005606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800560c:	1d3b      	adds	r3, r7, #4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 81c2 	beq.w	800599c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005618:	4b71      	ldr	r3, [pc, #452]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	2b08      	cmp	r3, #8
 8005622:	f000 819c 	beq.w	800595e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005626:	1d3b      	adds	r3, r7, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	2b02      	cmp	r3, #2
 800562e:	f040 8114 	bne.w	800585a <HAL_RCC_OscConfig+0xcbe>
 8005632:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005636:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800563a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	fa93 f2a3 	rbit	r2, r3
 8005646:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800564a:	601a      	str	r2, [r3, #0]
  return result;
 800564c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005650:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005652:	fab3 f383 	clz	r3, r3
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800565c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	461a      	mov	r2, r3
 8005664:	2300      	movs	r3, #0
 8005666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005668:	f7fe fa8e 	bl	8003b88 <HAL_GetTick>
 800566c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005670:	e009      	b.n	8005686 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005672:	f7fe fa89 	bl	8003b88 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e18b      	b.n	800599e <HAL_RCC_OscConfig+0xe02>
 8005686:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800568a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800568e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005690:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	fa93 f2a3 	rbit	r2, r3
 800569a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800569e:	601a      	str	r2, [r3, #0]
  return result;
 80056a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80056a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056a6:	fab3 f383 	clz	r3, r3
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f043 0301 	orr.w	r3, r3, #1
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d102      	bne.n	80056c0 <HAL_RCC_OscConfig+0xb24>
 80056ba:	4b49      	ldr	r3, [pc, #292]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	e01b      	b.n	80056f8 <HAL_RCC_OscConfig+0xb5c>
 80056c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80056c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	fa93 f2a3 	rbit	r2, r3
 80056d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80056de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	fa93 f2a3 	rbit	r2, r3
 80056ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	4b3a      	ldr	r3, [pc, #232]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80056fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005700:	6011      	str	r1, [r2, #0]
 8005702:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	fa92 f1a2 	rbit	r1, r2
 800570c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005710:	6011      	str	r1, [r2, #0]
  return result;
 8005712:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	fab2 f282 	clz	r2, r2
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	f042 0220 	orr.w	r2, r2, #32
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	f002 021f 	and.w	r2, r2, #31
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f202 	lsl.w	r2, r1, r2
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d19e      	bne.n	8005672 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005734:	4b2a      	ldr	r3, [pc, #168]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800573c:	1d3b      	adds	r3, r7, #4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005742:	1d3b      	adds	r3, r7, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	430b      	orrs	r3, r1
 800574a:	4925      	ldr	r1, [pc, #148]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 800574c:	4313      	orrs	r3, r2
 800574e:	604b      	str	r3, [r1, #4]
 8005750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	fa93 f2a3 	rbit	r2, r3
 8005764:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005768:	601a      	str	r2, [r3, #0]
  return result;
 800576a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800576e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005770:	fab3 f383 	clz	r3, r3
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800577a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	461a      	mov	r2, r3
 8005782:	2301      	movs	r3, #1
 8005784:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005786:	f7fe f9ff 	bl	8003b88 <HAL_GetTick>
 800578a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800578e:	e009      	b.n	80057a4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005790:	f7fe f9fa 	bl	8003b88 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e0fc      	b.n	800599e <HAL_RCC_OscConfig+0xe02>
 80057a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80057a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	fa93 f2a3 	rbit	r2, r3
 80057b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80057bc:	601a      	str	r2, [r3, #0]
  return result;
 80057be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80057c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057c4:	fab3 f383 	clz	r3, r3
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d105      	bne.n	80057e4 <HAL_RCC_OscConfig+0xc48>
 80057d8:	4b01      	ldr	r3, [pc, #4]	; (80057e0 <HAL_RCC_OscConfig+0xc44>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	e01e      	b.n	800581c <HAL_RCC_OscConfig+0xc80>
 80057de:	bf00      	nop
 80057e0:	40021000 	.word	0x40021000
 80057e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	fa93 f2a3 	rbit	r2, r3
 80057f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	fa93 f2a3 	rbit	r2, r3
 8005812:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	4b63      	ldr	r3, [pc, #396]	; (80059a8 <HAL_RCC_OscConfig+0xe0c>)
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005820:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005824:	6011      	str	r1, [r2, #0]
 8005826:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800582a:	6812      	ldr	r2, [r2, #0]
 800582c:	fa92 f1a2 	rbit	r1, r2
 8005830:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005834:	6011      	str	r1, [r2, #0]
  return result;
 8005836:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	fab2 f282 	clz	r2, r2
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	f042 0220 	orr.w	r2, r2, #32
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	f002 021f 	and.w	r2, r2, #31
 800584c:	2101      	movs	r1, #1
 800584e:	fa01 f202 	lsl.w	r2, r1, r2
 8005852:	4013      	ands	r3, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d09b      	beq.n	8005790 <HAL_RCC_OscConfig+0xbf4>
 8005858:	e0a0      	b.n	800599c <HAL_RCC_OscConfig+0xe00>
 800585a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800585e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005864:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	fa93 f2a3 	rbit	r2, r3
 800586e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005872:	601a      	str	r2, [r3, #0]
  return result;
 8005874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005878:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587a:	fab3 f383 	clz	r3, r3
 800587e:	b2db      	uxtb	r3, r3
 8005880:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005884:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	461a      	mov	r2, r3
 800588c:	2300      	movs	r3, #0
 800588e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005890:	f7fe f97a 	bl	8003b88 <HAL_GetTick>
 8005894:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005898:	e009      	b.n	80058ae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589a:	f7fe f975 	bl	8003b88 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e077      	b.n	800599e <HAL_RCC_OscConfig+0xe02>
 80058ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	fa93 f2a3 	rbit	r2, r3
 80058c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c6:	601a      	str	r2, [r3, #0]
  return result;
 80058c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058ce:	fab3 f383 	clz	r3, r3
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f043 0301 	orr.w	r3, r3, #1
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d102      	bne.n	80058e8 <HAL_RCC_OscConfig+0xd4c>
 80058e2:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <HAL_RCC_OscConfig+0xe0c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	e01b      	b.n	8005920 <HAL_RCC_OscConfig+0xd84>
 80058e8:	f107 0320 	add.w	r3, r7, #32
 80058ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f2:	f107 0320 	add.w	r3, r7, #32
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	fa93 f2a3 	rbit	r2, r3
 80058fc:	f107 031c 	add.w	r3, r7, #28
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f107 0318 	add.w	r3, r7, #24
 8005906:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	f107 0318 	add.w	r3, r7, #24
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	fa93 f2a3 	rbit	r2, r3
 8005916:	f107 0314 	add.w	r3, r7, #20
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <HAL_RCC_OscConfig+0xe0c>)
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	f107 0210 	add.w	r2, r7, #16
 8005924:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005928:	6011      	str	r1, [r2, #0]
 800592a:	f107 0210 	add.w	r2, r7, #16
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	fa92 f1a2 	rbit	r1, r2
 8005934:	f107 020c 	add.w	r2, r7, #12
 8005938:	6011      	str	r1, [r2, #0]
  return result;
 800593a:	f107 020c 	add.w	r2, r7, #12
 800593e:	6812      	ldr	r2, [r2, #0]
 8005940:	fab2 f282 	clz	r2, r2
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	f042 0220 	orr.w	r2, r2, #32
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	f002 021f 	and.w	r2, r2, #31
 8005950:	2101      	movs	r1, #1
 8005952:	fa01 f202 	lsl.w	r2, r1, r2
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d19e      	bne.n	800589a <HAL_RCC_OscConfig+0xcfe>
 800595c:	e01e      	b.n	800599c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e018      	b.n	800599e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800596c:	4b0e      	ldr	r3, [pc, #56]	; (80059a8 <HAL_RCC_OscConfig+0xe0c>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005974:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005978:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800597c:	1d3b      	adds	r3, r7, #4
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	429a      	cmp	r2, r3
 8005984:	d108      	bne.n	8005998 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005986:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800598a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800598e:	1d3b      	adds	r3, r7, #4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005994:	429a      	cmp	r2, r3
 8005996:	d001      	beq.n	800599c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000

080059ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b09e      	sub	sp, #120	; 0x78
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e162      	b.n	8005c8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059c4:	4b90      	ldr	r3, [pc, #576]	; (8005c08 <HAL_RCC_ClockConfig+0x25c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d910      	bls.n	80059f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	4b8d      	ldr	r3, [pc, #564]	; (8005c08 <HAL_RCC_ClockConfig+0x25c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f023 0207 	bic.w	r2, r3, #7
 80059da:	498b      	ldr	r1, [pc, #556]	; (8005c08 <HAL_RCC_ClockConfig+0x25c>)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	4313      	orrs	r3, r2
 80059e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e2:	4b89      	ldr	r3, [pc, #548]	; (8005c08 <HAL_RCC_ClockConfig+0x25c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d001      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e14a      	b.n	8005c8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a00:	4b82      	ldr	r3, [pc, #520]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	497f      	ldr	r1, [pc, #508]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80dc 	beq.w	8005bd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d13c      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xf6>
 8005a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a30:	fa93 f3a3 	rbit	r3, r3
 8005a34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a38:	fab3 f383 	clz	r3, r3
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	f043 0301 	orr.w	r3, r3, #1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d102      	bne.n	8005a52 <HAL_RCC_ClockConfig+0xa6>
 8005a4c:	4b6f      	ldr	r3, [pc, #444]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	e00f      	b.n	8005a72 <HAL_RCC_ClockConfig+0xc6>
 8005a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a5a:	fa93 f3a3 	rbit	r3, r3
 8005a5e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a64:	663b      	str	r3, [r7, #96]	; 0x60
 8005a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a68:	fa93 f3a3 	rbit	r3, r3
 8005a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a6e:	4b67      	ldr	r3, [pc, #412]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a76:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a7a:	fa92 f2a2 	rbit	r2, r2
 8005a7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a82:	fab2 f282 	clz	r2, r2
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	f042 0220 	orr.w	r2, r2, #32
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	f002 021f 	and.w	r2, r2, #31
 8005a92:	2101      	movs	r1, #1
 8005a94:	fa01 f202 	lsl.w	r2, r1, r2
 8005a98:	4013      	ands	r3, r2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d17b      	bne.n	8005b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e0f3      	b.n	8005c8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d13c      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x178>
 8005aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab2:	fa93 f3a3 	rbit	r3, r3
 8005ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aba:	fab3 f383 	clz	r3, r3
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d102      	bne.n	8005ad4 <HAL_RCC_ClockConfig+0x128>
 8005ace:	4b4f      	ldr	r3, [pc, #316]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	e00f      	b.n	8005af4 <HAL_RCC_ClockConfig+0x148>
 8005ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ad8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005adc:	fa93 f3a3 	rbit	r3, r3
 8005ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aea:	fa93 f3a3 	rbit	r3, r3
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af0:	4b46      	ldr	r3, [pc, #280]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005af8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005afc:	fa92 f2a2 	rbit	r2, r2
 8005b00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b04:	fab2 f282 	clz	r2, r2
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	f042 0220 	orr.w	r2, r2, #32
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	f002 021f 	and.w	r2, r2, #31
 8005b14:	2101      	movs	r1, #1
 8005b16:	fa01 f202 	lsl.w	r2, r1, r2
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d13a      	bne.n	8005b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0b2      	b.n	8005c8a <HAL_RCC_ClockConfig+0x2de>
 8005b24:	2302      	movs	r3, #2
 8005b26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	fa93 f3a3 	rbit	r3, r3
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b32:	fab3 f383 	clz	r3, r3
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d102      	bne.n	8005b4c <HAL_RCC_ClockConfig+0x1a0>
 8005b46:	4b31      	ldr	r3, [pc, #196]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	e00d      	b.n	8005b68 <HAL_RCC_ClockConfig+0x1bc>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	fa93 f3a3 	rbit	r3, r3
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
 8005b58:	2302      	movs	r3, #2
 8005b5a:	623b      	str	r3, [r7, #32]
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	fa93 f3a3 	rbit	r3, r3
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	2202      	movs	r2, #2
 8005b6a:	61ba      	str	r2, [r7, #24]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	fa92 f2a2 	rbit	r2, r2
 8005b72:	617a      	str	r2, [r7, #20]
  return result;
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	fab2 f282 	clz	r2, r2
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	f042 0220 	orr.w	r2, r2, #32
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	f002 021f 	and.w	r2, r2, #31
 8005b86:	2101      	movs	r1, #1
 8005b88:	fa01 f202 	lsl.w	r2, r1, r2
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e079      	b.n	8005c8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b96:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f023 0203 	bic.w	r2, r3, #3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	491a      	ldr	r1, [pc, #104]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ba8:	f7fd ffee 	bl	8003b88 <HAL_GetTick>
 8005bac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bae:	e00a      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb0:	f7fd ffea 	bl	8003b88 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e061      	b.n	8005c8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <HAL_RCC_ClockConfig+0x260>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f003 020c 	and.w	r2, r3, #12
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d1eb      	bne.n	8005bb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCC_ClockConfig+0x25c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d214      	bcs.n	8005c10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <HAL_RCC_ClockConfig+0x25c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f023 0207 	bic.w	r2, r3, #7
 8005bee:	4906      	ldr	r1, [pc, #24]	; (8005c08 <HAL_RCC_ClockConfig+0x25c>)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <HAL_RCC_ClockConfig+0x25c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d005      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e040      	b.n	8005c8a <HAL_RCC_ClockConfig+0x2de>
 8005c08:	40022000 	.word	0x40022000
 8005c0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d008      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c1c:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <HAL_RCC_ClockConfig+0x2e8>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	491a      	ldr	r1, [pc, #104]	; (8005c94 <HAL_RCC_ClockConfig+0x2e8>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c3a:	4b16      	ldr	r3, [pc, #88]	; (8005c94 <HAL_RCC_ClockConfig+0x2e8>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	4912      	ldr	r1, [pc, #72]	; (8005c94 <HAL_RCC_ClockConfig+0x2e8>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c4e:	f000 f829 	bl	8005ca4 <HAL_RCC_GetSysClockFreq>
 8005c52:	4601      	mov	r1, r0
 8005c54:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <HAL_RCC_ClockConfig+0x2e8>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c5c:	22f0      	movs	r2, #240	; 0xf0
 8005c5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	fa92 f2a2 	rbit	r2, r2
 8005c66:	60fa      	str	r2, [r7, #12]
  return result;
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	fab2 f282 	clz	r2, r2
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	40d3      	lsrs	r3, r2
 8005c72:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <HAL_RCC_ClockConfig+0x2ec>)
 8005c74:	5cd3      	ldrb	r3, [r2, r3]
 8005c76:	fa21 f303 	lsr.w	r3, r1, r3
 8005c7a:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <HAL_RCC_ClockConfig+0x2f0>)
 8005c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <HAL_RCC_ClockConfig+0x2f4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fd ff3c 	bl	8003b00 <HAL_InitTick>
  
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3778      	adds	r7, #120	; 0x78
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40021000 	.word	0x40021000
 8005c98:	0800c688 	.word	0x0800c688
 8005c9c:	20000160 	.word	0x20000160
 8005ca0:	20000164 	.word	0x20000164

08005ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b08b      	sub	sp, #44	; 0x2c
 8005ca8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005cbe:	4b29      	ldr	r3, [pc, #164]	; (8005d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d002      	beq.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x30>
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d003      	beq.n	8005cda <HAL_RCC_GetSysClockFreq+0x36>
 8005cd2:	e03c      	b.n	8005d4e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cd4:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cd6:	623b      	str	r3, [r7, #32]
      break;
 8005cd8:	e03c      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ce0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ce4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	fa92 f2a2 	rbit	r2, r2
 8005cec:	607a      	str	r2, [r7, #4]
  return result;
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	fab2 f282 	clz	r2, r2
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	40d3      	lsrs	r3, r2
 8005cf8:	4a1c      	ldr	r2, [pc, #112]	; (8005d6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cfa:	5cd3      	ldrb	r3, [r2, r3]
 8005cfc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005cfe:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	220f      	movs	r2, #15
 8005d08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	fa92 f2a2 	rbit	r2, r2
 8005d10:	60fa      	str	r2, [r7, #12]
  return result;
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	fab2 f282 	clz	r2, r2
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	40d3      	lsrs	r3, r2
 8005d1c:	4a14      	ldr	r2, [pc, #80]	; (8005d70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d1e:	5cd3      	ldrb	r3, [r2, r3]
 8005d20:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d2c:	4a0e      	ldr	r2, [pc, #56]	; (8005d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	fb02 f303 	mul.w	r3, r2, r3
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3c:	e004      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d42:	fb02 f303 	mul.w	r3, r2, r3
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	623b      	str	r3, [r7, #32]
      break;
 8005d4c:	e002      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d50:	623b      	str	r3, [r7, #32]
      break;
 8005d52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d54:	6a3b      	ldr	r3, [r7, #32]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	372c      	adds	r7, #44	; 0x2c
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40021000 	.word	0x40021000
 8005d68:	00f42400 	.word	0x00f42400
 8005d6c:	0800c698 	.word	0x0800c698
 8005d70:	0800c6a8 	.word	0x0800c6a8
 8005d74:	003d0900 	.word	0x003d0900
 8005d78:	007a1200 	.word	0x007a1200

08005d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b092      	sub	sp, #72	; 0x48
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 80d4 	beq.w	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005da0:	4b4e      	ldr	r3, [pc, #312]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10e      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dac:	4b4b      	ldr	r3, [pc, #300]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	4a4a      	ldr	r2, [pc, #296]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db6:	61d3      	str	r3, [r2, #28]
 8005db8:	4b48      	ldr	r3, [pc, #288]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dba:	69db      	ldr	r3, [r3, #28]
 8005dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	60bb      	str	r3, [r7, #8]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dca:	4b45      	ldr	r3, [pc, #276]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d118      	bne.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dd6:	4b42      	ldr	r3, [pc, #264]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a41      	ldr	r2, [pc, #260]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005de2:	f7fd fed1 	bl	8003b88 <HAL_GetTick>
 8005de6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de8:	e008      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dea:	f7fd fecd 	bl	8003b88 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b64      	cmp	r3, #100	; 0x64
 8005df6:	d901      	bls.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e12d      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfc:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0f0      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e08:	4b34      	ldr	r3, [pc, #208]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8084 	beq.w	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d07c      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e28:	4b2c      	ldr	r3, [pc, #176]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	fa93 f3a3 	rbit	r3, r3
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e42:	fab3 f383 	clz	r3, r3
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4b26      	ldr	r3, [pc, #152]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	461a      	mov	r2, r3
 8005e52:	2301      	movs	r3, #1
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	fa93 f3a3 	rbit	r3, r3
 8005e62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e66:	fab3 f383 	clz	r3, r3
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	461a      	mov	r2, r3
 8005e76:	2300      	movs	r3, #0
 8005e78:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e7a:	4a18      	ldr	r2, [pc, #96]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d04b      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8a:	f7fd fe7d 	bl	8003b88 <HAL_GetTick>
 8005e8e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e90:	e00a      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e92:	f7fd fe79 	bl	8003b88 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e0d7      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	fa93 f3a3 	rbit	r3, r3
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	623b      	str	r3, [r7, #32]
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	fa93 f3a3 	rbit	r3, r3
 8005ebe:	61fb      	str	r3, [r7, #28]
  return result;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec2:	fab3 f383 	clz	r3, r3
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f043 0302 	orr.w	r3, r3, #2
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d108      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005ed6:	4b01      	ldr	r3, [pc, #4]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	e00d      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	40007000 	.word	0x40007000
 8005ee4:	10908100 	.word	0x10908100
 8005ee8:	2302      	movs	r3, #2
 8005eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	fa93 f3a3 	rbit	r3, r3
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	4b5a      	ldr	r3, [pc, #360]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	2202      	movs	r2, #2
 8005efa:	613a      	str	r2, [r7, #16]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	fa92 f2a2 	rbit	r2, r2
 8005f02:	60fa      	str	r2, [r7, #12]
  return result;
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	fab2 f282 	clz	r2, r2
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	f002 021f 	and.w	r2, r2, #31
 8005f16:	2101      	movs	r1, #1
 8005f18:	fa01 f202 	lsl.w	r2, r1, r2
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0b7      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005f22:	4b4f      	ldr	r3, [pc, #316]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	494c      	ldr	r1, [pc, #304]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d105      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f3c:	4b48      	ldr	r3, [pc, #288]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	4a47      	ldr	r2, [pc, #284]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f54:	4b42      	ldr	r3, [pc, #264]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	f023 0203 	bic.w	r2, r3, #3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	493f      	ldr	r1, [pc, #252]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f72:	4b3b      	ldr	r3, [pc, #236]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	4938      	ldr	r1, [pc, #224]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f90:	4b33      	ldr	r3, [pc, #204]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	4930      	ldr	r1, [pc, #192]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d008      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fae:	4b2c      	ldr	r3, [pc, #176]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	f023 0210 	bic.w	r2, r3, #16
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	4929      	ldr	r1, [pc, #164]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d008      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005fcc:	4b24      	ldr	r3, [pc, #144]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd8:	4921      	ldr	r1, [pc, #132]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d008      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fea:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	f023 0220 	bic.w	r2, r3, #32
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	491a      	ldr	r1, [pc, #104]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006008:	4b15      	ldr	r3, [pc, #84]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	4912      	ldr	r1, [pc, #72]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006016:	4313      	orrs	r3, r2
 8006018:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8006026:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	490b      	ldr	r1, [pc, #44]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006040:	2b00      	cmp	r3, #0
 8006042:	d008      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006044:	4b06      	ldr	r3, [pc, #24]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	4903      	ldr	r1, [pc, #12]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006052:	4313      	orrs	r3, r2
 8006054:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3748      	adds	r7, #72	; 0x48
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40021000 	.word	0x40021000

08006064 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e073      	b.n	800615e <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7fd fb27 	bl	8003708 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80060c8:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80060f0:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6859      	ldr	r1, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8006104:	4b18      	ldr	r3, [pc, #96]	; (8006168 <HAL_SDADC_Init+0x104>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	429a      	cmp	r2, r3
 8006112:	d00f      	beq.n	8006134 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8006114:	4b14      	ldr	r3, [pc, #80]	; (8006168 <HAL_SDADC_Init+0x104>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a13      	ldr	r2, [pc, #76]	; (8006168 <HAL_SDADC_Init+0x104>)
 800611a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611e:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8006120:	4b11      	ldr	r3, [pc, #68]	; (8006168 <HAL_SDADC_Init+0x104>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	490f      	ldr	r1, [pc, #60]	; (8006168 <HAL_SDADC_Init+0x104>)
 800612a:	4313      	orrs	r3, r2
 800612c:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 800612e:	2002      	movs	r0, #2
 8006130:	f7fd fd36 	bl	8003ba0 <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8006144:	bf00      	nop
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1f8      	bne.n	8006146 <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	40016000 	.word	0x40016000

0800616c <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d002      	beq.n	800618c <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	75fb      	strb	r3, [r7, #23]
 800618a:	e025      	b.n	80061d8 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f9c2 	bl	8006516 <SDADC_EnterInitMode>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d006      	beq.n	80061a6 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	22ff      	movs	r2, #255	; 0xff
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	75fb      	strb	r3, [r7, #23]
 80061a4:	e018      	b.n	80061d8 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80061b0:	4413      	add	r3, r2
 80061b2:	3320      	adds	r3, #32
 80061b4:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80061be:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 80061c4:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80061cc:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 80061ce:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80061d0:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f9c2 	bl	800655c <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d002      	beq.n	8006204 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
 8006202:	e037      	b.n	8006274 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f986 	bl	8006516 <SDADC_EnterInitMode>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d006      	beq.n	800621e <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	22ff      	movs	r2, #255	; 0xff
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	75fb      	strb	r3, [r7, #23]
 800621c:	e02a      	b.n	8006274 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4a17      	ldr	r2, [pc, #92]	; (8006280 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d01f      	beq.n	8006266 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	2203      	movs	r2, #3
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	43da      	mvns	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	400a      	ands	r2, r1
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	409a      	lsls	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	641a      	str	r2, [r3, #64]	; 0x40
 8006264:	e003      	b.n	800626e <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	645a      	str	r2, [r3, #68]	; 0x44
      }      
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 f974 	bl	800655c <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	00080100 	.word	0x00080100

08006284 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d02a      	beq.n	80062f4 <HAL_SDADC_ConfigChannel+0x70>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2bff      	cmp	r3, #255	; 0xff
 80062a6:	d025      	beq.n	80062f4 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 80062b6:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d10c      	bne.n	80062d8 <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);    
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	4b10      	ldr	r3, [pc, #64]	; (8006308 <HAL_SDADC_ConfigChannel+0x84>)
 80062c8:	400b      	ands	r3, r1
 80062ca:	431a      	orrs	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	e009      	b.n	80062ec <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));    
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6859      	ldr	r1, [r3, #4]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	041b      	lsls	r3, r3, #16
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	430b      	orrs	r3, r1
 80062ea:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	619a      	str	r2, [r3, #24]
 80062f2:	e001      	b.n	80062f8 <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	ffbf0000 	.word	0xffbf0000

0800630c <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006320:	2b01      	cmp	r3, #1
 8006322:	d12c      	bne.n	800637e <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f8f6 	bl	8006516 <SDADC_EnterInitMode>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	22ff      	movs	r2, #255	; 0xff
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	73fb      	strb	r3, [r7, #15]
 800633c:	e021      	b.n	8006382 <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0206 	bic.w	r2, r2, #6
 800634c:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6859      	ldr	r1, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f8fc 	bl	800655c <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0210 	orr.w	r2, r2, #16
 8006372:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800637c:	e001      	b.n	8006382 <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800639c:	2b02      	cmp	r3, #2
 800639e:	d001      	beq.n	80063a4 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e028      	b.n	80063f6 <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 80063a4:	f7fd fbf0 	bl	8003b88 <HAL_GetTick>
 80063a8:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 80063aa:	e010      	b.n	80063ce <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d00c      	beq.n	80063ce <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 80063b4:	f7fd fbe8 	bl	8003b88 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d302      	bcc.n	80063ca <HAL_SDADC_PollForCalibEvent+0x3e>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e013      	b.n	80063f6 <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d1e7      	bne.n	80063ac <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_SDADC_Start>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start(SDADC_HandleTypeDef *hsdadc)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d004      	beq.n	800641a <HAL_SDADC_Start+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006416:	2b04      	cmp	r3, #4
 8006418:	d105      	bne.n	8006426 <HAL_SDADC_Start+0x28>
  {
    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f8b0 	bl	8006580 <SDADC_RegConvStart>
 8006420:	4603      	mov	r3, r0
 8006422:	73fb      	strb	r3, [r7, #15]
 8006424:	e001      	b.n	800642a <HAL_SDADC_Start+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_SDADC_PollForConversion>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForConversion(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006444:	2b03      	cmp	r3, #3
 8006446:	d006      	beq.n	8006456 <HAL_SDADC_PollForConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 800644e:	2b05      	cmp	r3, #5
 8006450:	d001      	beq.n	8006456 <HAL_SDADC_PollForConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e044      	b.n	80064e0 <HAL_SDADC_PollForConversion+0xac>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 8006456:	f7fd fb97 	bl	8003b88 <HAL_GetTick>
 800645a:	60f8      	str	r0, [r7, #12]

    /* Wait REOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 800645c:	e010      	b.n	8006480 <HAL_SDADC_PollForConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006464:	d00c      	beq.n	8006480 <HAL_SDADC_PollForConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8006466:	f7fd fb8f 	bl	8003b88 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d302      	bcc.n	800647c <HAL_SDADC_PollForConversion+0x48>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_SDADC_PollForConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e02f      	b.n	80064e0 <HAL_SDADC_PollForConversion+0xac>
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b08      	cmp	r3, #8
 800648c:	d1e7      	bne.n	800645e <HAL_SDADC_PollForConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b10      	cmp	r3, #16
 800649a:	d10d      	bne.n	80064b8 <HAL_SDADC_PollForConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f82d 	bl	8006502 <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRROVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0210 	orr.w	r2, r2, #16
 80064b6:	60da      	str	r2, [r3, #12]
    }
    /* Update SDADC state only if not continuous conversion and SW trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10e      	bne.n	80064de <HAL_SDADC_PollForConversion+0xaa>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <HAL_SDADC_PollForConversion+0xaa>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d101      	bne.n	80064d6 <HAL_SDADC_PollForConversion+0xa2>
 80064d2:	2201      	movs	r2, #1
 80064d4:	e000      	b.n	80064d8 <HAL_SDADC_PollForConversion+0xa4>
 80064d6:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Return function status */
    return HAL_OK;
 80064de:	2300      	movs	r3, #0
  }
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800652c:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 800652e:	f7fd fb2b 	bl	8003b88 <HAL_GetTick>
 8006532:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8006534:	e008      	b.n	8006548 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8006536:	f7fd fb27 	bl	8003b88 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2bc8      	cmp	r3, #200	; 0xc8
 8006542:	d901      	bls.n	8006548 <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e005      	b.n	8006554 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	daf1      	bge.n	8006536 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	2b00      	cmp	r3, #0
 8006592:	d108      	bne.n	80065a6 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80065a2:	605a      	str	r2, [r3, #4]
 80065a4:	e017      	b.n	80065d6 <SDADC_RegConvStart+0x56>
  }
  else /* synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff ffb5 	bl	8006516 <SDADC_EnterInitMode>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d006      	beq.n	80065c0 <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	73fb      	strb	r3, [r7, #15]
 80065be:	e00a      	b.n	80065d6 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ce:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff ffc3 	bl	800655c <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <SDADC_RegConvStart+0x6a>
 80065e6:	2203      	movs	r2, #3
 80065e8:	e000      	b.n	80065ec <SDADC_RegConvStart+0x6c>
 80065ea:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e041      	b.n	8006692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fd f90c 	bl	8003840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f000 f952 	bl	80068e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d001      	beq.n	80066b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e041      	b.n	8006738 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c4:	d01d      	beq.n	8006702 <HAL_TIM_Base_Start+0x66>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <HAL_TIM_Base_Start+0xa8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d018      	beq.n	8006702 <HAL_TIM_Base_Start+0x66>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <HAL_TIM_Base_Start+0xac>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_TIM_Base_Start+0x66>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1b      	ldr	r2, [pc, #108]	; (800674c <HAL_TIM_Base_Start+0xb0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00e      	beq.n	8006702 <HAL_TIM_Base_Start+0x66>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a19      	ldr	r2, [pc, #100]	; (8006750 <HAL_TIM_Base_Start+0xb4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d009      	beq.n	8006702 <HAL_TIM_Base_Start+0x66>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a18      	ldr	r2, [pc, #96]	; (8006754 <HAL_TIM_Base_Start+0xb8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_TIM_Base_Start+0x66>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a16      	ldr	r2, [pc, #88]	; (8006758 <HAL_TIM_Base_Start+0xbc>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d111      	bne.n	8006726 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b06      	cmp	r3, #6
 8006712:	d010      	beq.n	8006736 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006724:	e007      	b.n	8006736 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0201 	orr.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	40000400 	.word	0x40000400
 8006748:	40000800 	.word	0x40000800
 800674c:	40000c00 	.word	0x40000c00
 8006750:	40001800 	.word	0x40001800
 8006754:	40014000 	.word	0x40014000
 8006758:	40015c00 	.word	0x40015c00

0800675c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_TIM_ConfigClockSource+0x18>
 8006770:	2302      	movs	r3, #2
 8006772:	e0b3      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x180>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800679a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ac:	d03e      	beq.n	800682c <HAL_TIM_ConfigClockSource+0xd0>
 80067ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b2:	f200 8087 	bhi.w	80068c4 <HAL_TIM_ConfigClockSource+0x168>
 80067b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ba:	f000 8085 	beq.w	80068c8 <HAL_TIM_ConfigClockSource+0x16c>
 80067be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c2:	d87f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x168>
 80067c4:	2b70      	cmp	r3, #112	; 0x70
 80067c6:	d01a      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0xa2>
 80067c8:	2b70      	cmp	r3, #112	; 0x70
 80067ca:	d87b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x168>
 80067cc:	2b60      	cmp	r3, #96	; 0x60
 80067ce:	d050      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x116>
 80067d0:	2b60      	cmp	r3, #96	; 0x60
 80067d2:	d877      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x168>
 80067d4:	2b50      	cmp	r3, #80	; 0x50
 80067d6:	d03c      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0xf6>
 80067d8:	2b50      	cmp	r3, #80	; 0x50
 80067da:	d873      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x168>
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d058      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x136>
 80067e0:	2b40      	cmp	r3, #64	; 0x40
 80067e2:	d86f      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x168>
 80067e4:	2b30      	cmp	r3, #48	; 0x30
 80067e6:	d064      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x156>
 80067e8:	2b30      	cmp	r3, #48	; 0x30
 80067ea:	d86b      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x168>
 80067ec:	2b20      	cmp	r3, #32
 80067ee:	d060      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x156>
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d867      	bhi.n	80068c4 <HAL_TIM_ConfigClockSource+0x168>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d05c      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x156>
 80067f8:	2b10      	cmp	r3, #16
 80067fa:	d05a      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80067fc:	e062      	b.n	80068c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6899      	ldr	r1, [r3, #8]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f000 f97d 	bl	8006b0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006820:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	609a      	str	r2, [r3, #8]
      break;
 800682a:	e04e      	b.n	80068ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6899      	ldr	r1, [r3, #8]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f000 f966 	bl	8006b0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800684e:	609a      	str	r2, [r3, #8]
      break;
 8006850:	e03b      	b.n	80068ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6859      	ldr	r1, [r3, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	461a      	mov	r2, r3
 8006860:	f000 f8da 	bl	8006a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2150      	movs	r1, #80	; 0x50
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f933 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 8006870:	e02b      	b.n	80068ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6859      	ldr	r1, [r3, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	461a      	mov	r2, r3
 8006880:	f000 f8f9 	bl	8006a76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2160      	movs	r1, #96	; 0x60
 800688a:	4618      	mov	r0, r3
 800688c:	f000 f923 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 8006890:	e01b      	b.n	80068ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 f8ba 	bl	8006a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2140      	movs	r1, #64	; 0x40
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f913 	bl	8006ad6 <TIM_ITRx_SetConfig>
      break;
 80068b0:	e00b      	b.n	80068ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4619      	mov	r1, r3
 80068bc:	4610      	mov	r0, r2
 80068be:	f000 f90a 	bl	8006ad6 <TIM_ITRx_SetConfig>
        break;
 80068c2:	e002      	b.n	80068ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068c4:	bf00      	nop
 80068c6:	e000      	b.n	80068ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fa:	d00f      	beq.n	800691c <TIM_Base_SetConfig+0x38>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a3c      	ldr	r2, [pc, #240]	; (80069f0 <TIM_Base_SetConfig+0x10c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00b      	beq.n	800691c <TIM_Base_SetConfig+0x38>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a3b      	ldr	r2, [pc, #236]	; (80069f4 <TIM_Base_SetConfig+0x110>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d007      	beq.n	800691c <TIM_Base_SetConfig+0x38>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a3a      	ldr	r2, [pc, #232]	; (80069f8 <TIM_Base_SetConfig+0x114>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_Base_SetConfig+0x38>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a39      	ldr	r2, [pc, #228]	; (80069fc <TIM_Base_SetConfig+0x118>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d108      	bne.n	800692e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006934:	d027      	beq.n	8006986 <TIM_Base_SetConfig+0xa2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2d      	ldr	r2, [pc, #180]	; (80069f0 <TIM_Base_SetConfig+0x10c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d023      	beq.n	8006986 <TIM_Base_SetConfig+0xa2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2c      	ldr	r2, [pc, #176]	; (80069f4 <TIM_Base_SetConfig+0x110>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01f      	beq.n	8006986 <TIM_Base_SetConfig+0xa2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2b      	ldr	r2, [pc, #172]	; (80069f8 <TIM_Base_SetConfig+0x114>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d01b      	beq.n	8006986 <TIM_Base_SetConfig+0xa2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2b      	ldr	r2, [pc, #172]	; (8006a00 <TIM_Base_SetConfig+0x11c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d017      	beq.n	8006986 <TIM_Base_SetConfig+0xa2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2a      	ldr	r2, [pc, #168]	; (8006a04 <TIM_Base_SetConfig+0x120>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <TIM_Base_SetConfig+0xa2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a29      	ldr	r2, [pc, #164]	; (8006a08 <TIM_Base_SetConfig+0x124>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00f      	beq.n	8006986 <TIM_Base_SetConfig+0xa2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a28      	ldr	r2, [pc, #160]	; (8006a0c <TIM_Base_SetConfig+0x128>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00b      	beq.n	8006986 <TIM_Base_SetConfig+0xa2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a27      	ldr	r2, [pc, #156]	; (8006a10 <TIM_Base_SetConfig+0x12c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_Base_SetConfig+0xa2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a26      	ldr	r2, [pc, #152]	; (8006a14 <TIM_Base_SetConfig+0x130>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_Base_SetConfig+0xa2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1e      	ldr	r2, [pc, #120]	; (80069fc <TIM_Base_SetConfig+0x118>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a13      	ldr	r2, [pc, #76]	; (8006a0c <TIM_Base_SetConfig+0x128>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d007      	beq.n	80069d4 <TIM_Base_SetConfig+0xf0>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <TIM_Base_SetConfig+0x12c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_Base_SetConfig+0xf0>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a11      	ldr	r2, [pc, #68]	; (8006a14 <TIM_Base_SetConfig+0x130>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d103      	bne.n	80069dc <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	615a      	str	r2, [r3, #20]
}
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40000400 	.word	0x40000400
 80069f4:	40000800 	.word	0x40000800
 80069f8:	40000c00 	.word	0x40000c00
 80069fc:	40015c00 	.word	0x40015c00
 8006a00:	40001800 	.word	0x40001800
 8006a04:	40001c00 	.word	0x40001c00
 8006a08:	40002000 	.word	0x40002000
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40014400 	.word	0x40014400
 8006a14:	40014800 	.word	0x40014800

08006a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 030a 	bic.w	r3, r3, #10
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	f023 0210 	bic.w	r2, r3, #16
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	031b      	lsls	r3, r3, #12
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f043 0307 	orr.w	r3, r3, #7
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	609a      	str	r2, [r3, #8]
}
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	021a      	lsls	r2, r3, #8
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	371c      	adds	r7, #28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e055      	b.n	8006c10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba6:	d01d      	beq.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1b      	ldr	r2, [pc, #108]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d018      	beq.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a1a      	ldr	r2, [pc, #104]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a18      	ldr	r2, [pc, #96]	; (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a17      	ldr	r2, [pc, #92]	; (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d10c      	bne.n	8006bfe <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	40000400 	.word	0x40000400
 8006c20:	40000800 	.word	0x40000800
 8006c24:	40000c00 	.word	0x40000c00
 8006c28:	40001800 	.word	0x40001800
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40015c00 	.word	0x40015c00

08006c34 <__errno>:
 8006c34:	4b01      	ldr	r3, [pc, #4]	; (8006c3c <__errno+0x8>)
 8006c36:	6818      	ldr	r0, [r3, #0]
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	2000016c 	.word	0x2000016c

08006c40 <__libc_init_array>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	4d0d      	ldr	r5, [pc, #52]	; (8006c78 <__libc_init_array+0x38>)
 8006c44:	4c0d      	ldr	r4, [pc, #52]	; (8006c7c <__libc_init_array+0x3c>)
 8006c46:	1b64      	subs	r4, r4, r5
 8006c48:	10a4      	asrs	r4, r4, #2
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	42a6      	cmp	r6, r4
 8006c4e:	d109      	bne.n	8006c64 <__libc_init_array+0x24>
 8006c50:	4d0b      	ldr	r5, [pc, #44]	; (8006c80 <__libc_init_array+0x40>)
 8006c52:	4c0c      	ldr	r4, [pc, #48]	; (8006c84 <__libc_init_array+0x44>)
 8006c54:	f005 fc4a 	bl	800c4ec <_init>
 8006c58:	1b64      	subs	r4, r4, r5
 8006c5a:	10a4      	asrs	r4, r4, #2
 8006c5c:	2600      	movs	r6, #0
 8006c5e:	42a6      	cmp	r6, r4
 8006c60:	d105      	bne.n	8006c6e <__libc_init_array+0x2e>
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c68:	4798      	blx	r3
 8006c6a:	3601      	adds	r6, #1
 8006c6c:	e7ee      	b.n	8006c4c <__libc_init_array+0xc>
 8006c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c72:	4798      	blx	r3
 8006c74:	3601      	adds	r6, #1
 8006c76:	e7f2      	b.n	8006c5e <__libc_init_array+0x1e>
 8006c78:	0800cbb0 	.word	0x0800cbb0
 8006c7c:	0800cbb0 	.word	0x0800cbb0
 8006c80:	0800cbb0 	.word	0x0800cbb0
 8006c84:	0800cbb4 	.word	0x0800cbb4

08006c88 <memset>:
 8006c88:	4402      	add	r2, r0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d100      	bne.n	8006c92 <memset+0xa>
 8006c90:	4770      	bx	lr
 8006c92:	f803 1b01 	strb.w	r1, [r3], #1
 8006c96:	e7f9      	b.n	8006c8c <memset+0x4>

08006c98 <__cvt>:
 8006c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c9c:	ec55 4b10 	vmov	r4, r5, d0
 8006ca0:	2d00      	cmp	r5, #0
 8006ca2:	460e      	mov	r6, r1
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	462b      	mov	r3, r5
 8006ca8:	bfbb      	ittet	lt
 8006caa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cae:	461d      	movlt	r5, r3
 8006cb0:	2300      	movge	r3, #0
 8006cb2:	232d      	movlt	r3, #45	; 0x2d
 8006cb4:	700b      	strb	r3, [r1, #0]
 8006cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cbc:	4691      	mov	r9, r2
 8006cbe:	f023 0820 	bic.w	r8, r3, #32
 8006cc2:	bfbc      	itt	lt
 8006cc4:	4622      	movlt	r2, r4
 8006cc6:	4614      	movlt	r4, r2
 8006cc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ccc:	d005      	beq.n	8006cda <__cvt+0x42>
 8006cce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cd2:	d100      	bne.n	8006cd6 <__cvt+0x3e>
 8006cd4:	3601      	adds	r6, #1
 8006cd6:	2102      	movs	r1, #2
 8006cd8:	e000      	b.n	8006cdc <__cvt+0x44>
 8006cda:	2103      	movs	r1, #3
 8006cdc:	ab03      	add	r3, sp, #12
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	ab02      	add	r3, sp, #8
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	ec45 4b10 	vmov	d0, r4, r5
 8006ce8:	4653      	mov	r3, sl
 8006cea:	4632      	mov	r2, r6
 8006cec:	f001 fe10 	bl	8008910 <_dtoa_r>
 8006cf0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	d102      	bne.n	8006cfe <__cvt+0x66>
 8006cf8:	f019 0f01 	tst.w	r9, #1
 8006cfc:	d022      	beq.n	8006d44 <__cvt+0xac>
 8006cfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d02:	eb07 0906 	add.w	r9, r7, r6
 8006d06:	d110      	bne.n	8006d2a <__cvt+0x92>
 8006d08:	783b      	ldrb	r3, [r7, #0]
 8006d0a:	2b30      	cmp	r3, #48	; 0x30
 8006d0c:	d10a      	bne.n	8006d24 <__cvt+0x8c>
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2300      	movs	r3, #0
 8006d12:	4620      	mov	r0, r4
 8006d14:	4629      	mov	r1, r5
 8006d16:	f7f9 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d1a:	b918      	cbnz	r0, 8006d24 <__cvt+0x8c>
 8006d1c:	f1c6 0601 	rsb	r6, r6, #1
 8006d20:	f8ca 6000 	str.w	r6, [sl]
 8006d24:	f8da 3000 	ldr.w	r3, [sl]
 8006d28:	4499      	add	r9, r3
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d36:	b108      	cbz	r0, 8006d3c <__cvt+0xa4>
 8006d38:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d3c:	2230      	movs	r2, #48	; 0x30
 8006d3e:	9b03      	ldr	r3, [sp, #12]
 8006d40:	454b      	cmp	r3, r9
 8006d42:	d307      	bcc.n	8006d54 <__cvt+0xbc>
 8006d44:	9b03      	ldr	r3, [sp, #12]
 8006d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d48:	1bdb      	subs	r3, r3, r7
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	b004      	add	sp, #16
 8006d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d54:	1c59      	adds	r1, r3, #1
 8006d56:	9103      	str	r1, [sp, #12]
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	e7f0      	b.n	8006d3e <__cvt+0xa6>

08006d5c <__exponent>:
 8006d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2900      	cmp	r1, #0
 8006d62:	bfb8      	it	lt
 8006d64:	4249      	neglt	r1, r1
 8006d66:	f803 2b02 	strb.w	r2, [r3], #2
 8006d6a:	bfb4      	ite	lt
 8006d6c:	222d      	movlt	r2, #45	; 0x2d
 8006d6e:	222b      	movge	r2, #43	; 0x2b
 8006d70:	2909      	cmp	r1, #9
 8006d72:	7042      	strb	r2, [r0, #1]
 8006d74:	dd2a      	ble.n	8006dcc <__exponent+0x70>
 8006d76:	f10d 0407 	add.w	r4, sp, #7
 8006d7a:	46a4      	mov	ip, r4
 8006d7c:	270a      	movs	r7, #10
 8006d7e:	46a6      	mov	lr, r4
 8006d80:	460a      	mov	r2, r1
 8006d82:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d86:	fb07 1516 	mls	r5, r7, r6, r1
 8006d8a:	3530      	adds	r5, #48	; 0x30
 8006d8c:	2a63      	cmp	r2, #99	; 0x63
 8006d8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d96:	4631      	mov	r1, r6
 8006d98:	dcf1      	bgt.n	8006d7e <__exponent+0x22>
 8006d9a:	3130      	adds	r1, #48	; 0x30
 8006d9c:	f1ae 0502 	sub.w	r5, lr, #2
 8006da0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006da4:	1c44      	adds	r4, r0, #1
 8006da6:	4629      	mov	r1, r5
 8006da8:	4561      	cmp	r1, ip
 8006daa:	d30a      	bcc.n	8006dc2 <__exponent+0x66>
 8006dac:	f10d 0209 	add.w	r2, sp, #9
 8006db0:	eba2 020e 	sub.w	r2, r2, lr
 8006db4:	4565      	cmp	r5, ip
 8006db6:	bf88      	it	hi
 8006db8:	2200      	movhi	r2, #0
 8006dba:	4413      	add	r3, r2
 8006dbc:	1a18      	subs	r0, r3, r0
 8006dbe:	b003      	add	sp, #12
 8006dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dca:	e7ed      	b.n	8006da8 <__exponent+0x4c>
 8006dcc:	2330      	movs	r3, #48	; 0x30
 8006dce:	3130      	adds	r1, #48	; 0x30
 8006dd0:	7083      	strb	r3, [r0, #2]
 8006dd2:	70c1      	strb	r1, [r0, #3]
 8006dd4:	1d03      	adds	r3, r0, #4
 8006dd6:	e7f1      	b.n	8006dbc <__exponent+0x60>

08006dd8 <_printf_float>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	ed2d 8b02 	vpush	{d8}
 8006de0:	b08d      	sub	sp, #52	; 0x34
 8006de2:	460c      	mov	r4, r1
 8006de4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006de8:	4616      	mov	r6, r2
 8006dea:	461f      	mov	r7, r3
 8006dec:	4605      	mov	r5, r0
 8006dee:	f002 feeb 	bl	8009bc8 <_localeconv_r>
 8006df2:	f8d0 a000 	ldr.w	sl, [r0]
 8006df6:	4650      	mov	r0, sl
 8006df8:	f7f9 f9ea 	bl	80001d0 <strlen>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	9305      	str	r3, [sp, #20]
 8006e04:	f8d8 3000 	ldr.w	r3, [r8]
 8006e08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e0c:	3307      	adds	r3, #7
 8006e0e:	f023 0307 	bic.w	r3, r3, #7
 8006e12:	f103 0208 	add.w	r2, r3, #8
 8006e16:	f8c8 2000 	str.w	r2, [r8]
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e2a:	9307      	str	r3, [sp, #28]
 8006e2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e30:	ee08 0a10 	vmov	s16, r0
 8006e34:	4b9f      	ldr	r3, [pc, #636]	; (80070b4 <_printf_float+0x2dc>)
 8006e36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3e:	f7f9 fe75 	bl	8000b2c <__aeabi_dcmpun>
 8006e42:	bb88      	cbnz	r0, 8006ea8 <_printf_float+0xd0>
 8006e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e48:	4b9a      	ldr	r3, [pc, #616]	; (80070b4 <_printf_float+0x2dc>)
 8006e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4e:	f7f9 fe4f 	bl	8000af0 <__aeabi_dcmple>
 8006e52:	bb48      	cbnz	r0, 8006ea8 <_printf_float+0xd0>
 8006e54:	2200      	movs	r2, #0
 8006e56:	2300      	movs	r3, #0
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	f7f9 fe3e 	bl	8000adc <__aeabi_dcmplt>
 8006e60:	b110      	cbz	r0, 8006e68 <_printf_float+0x90>
 8006e62:	232d      	movs	r3, #45	; 0x2d
 8006e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e68:	4b93      	ldr	r3, [pc, #588]	; (80070b8 <_printf_float+0x2e0>)
 8006e6a:	4894      	ldr	r0, [pc, #592]	; (80070bc <_printf_float+0x2e4>)
 8006e6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e70:	bf94      	ite	ls
 8006e72:	4698      	movls	r8, r3
 8006e74:	4680      	movhi	r8, r0
 8006e76:	2303      	movs	r3, #3
 8006e78:	6123      	str	r3, [r4, #16]
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	f023 0204 	bic.w	r2, r3, #4
 8006e80:	6022      	str	r2, [r4, #0]
 8006e82:	f04f 0900 	mov.w	r9, #0
 8006e86:	9700      	str	r7, [sp, #0]
 8006e88:	4633      	mov	r3, r6
 8006e8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 f9d8 	bl	8007244 <_printf_common>
 8006e94:	3001      	adds	r0, #1
 8006e96:	f040 8090 	bne.w	8006fba <_printf_float+0x1e2>
 8006e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9e:	b00d      	add	sp, #52	; 0x34
 8006ea0:	ecbd 8b02 	vpop	{d8}
 8006ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	464b      	mov	r3, r9
 8006eac:	4640      	mov	r0, r8
 8006eae:	4649      	mov	r1, r9
 8006eb0:	f7f9 fe3c 	bl	8000b2c <__aeabi_dcmpun>
 8006eb4:	b140      	cbz	r0, 8006ec8 <_printf_float+0xf0>
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bfbc      	itt	lt
 8006ebc:	232d      	movlt	r3, #45	; 0x2d
 8006ebe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ec2:	487f      	ldr	r0, [pc, #508]	; (80070c0 <_printf_float+0x2e8>)
 8006ec4:	4b7f      	ldr	r3, [pc, #508]	; (80070c4 <_printf_float+0x2ec>)
 8006ec6:	e7d1      	b.n	8006e6c <_printf_float+0x94>
 8006ec8:	6863      	ldr	r3, [r4, #4]
 8006eca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ece:	9206      	str	r2, [sp, #24]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	d13f      	bne.n	8006f54 <_printf_float+0x17c>
 8006ed4:	2306      	movs	r3, #6
 8006ed6:	6063      	str	r3, [r4, #4]
 8006ed8:	9b05      	ldr	r3, [sp, #20]
 8006eda:	6861      	ldr	r1, [r4, #4]
 8006edc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9303      	str	r3, [sp, #12]
 8006ee4:	ab0a      	add	r3, sp, #40	; 0x28
 8006ee6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006eea:	ab09      	add	r3, sp, #36	; 0x24
 8006eec:	ec49 8b10 	vmov	d0, r8, r9
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	6022      	str	r2, [r4, #0]
 8006ef4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7ff fecd 	bl	8006c98 <__cvt>
 8006efe:	9b06      	ldr	r3, [sp, #24]
 8006f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f02:	2b47      	cmp	r3, #71	; 0x47
 8006f04:	4680      	mov	r8, r0
 8006f06:	d108      	bne.n	8006f1a <_printf_float+0x142>
 8006f08:	1cc8      	adds	r0, r1, #3
 8006f0a:	db02      	blt.n	8006f12 <_printf_float+0x13a>
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	4299      	cmp	r1, r3
 8006f10:	dd41      	ble.n	8006f96 <_printf_float+0x1be>
 8006f12:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f16:	fa5f fb8b 	uxtb.w	fp, fp
 8006f1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f1e:	d820      	bhi.n	8006f62 <_printf_float+0x18a>
 8006f20:	3901      	subs	r1, #1
 8006f22:	465a      	mov	r2, fp
 8006f24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f28:	9109      	str	r1, [sp, #36]	; 0x24
 8006f2a:	f7ff ff17 	bl	8006d5c <__exponent>
 8006f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f30:	1813      	adds	r3, r2, r0
 8006f32:	2a01      	cmp	r2, #1
 8006f34:	4681      	mov	r9, r0
 8006f36:	6123      	str	r3, [r4, #16]
 8006f38:	dc02      	bgt.n	8006f40 <_printf_float+0x168>
 8006f3a:	6822      	ldr	r2, [r4, #0]
 8006f3c:	07d2      	lsls	r2, r2, #31
 8006f3e:	d501      	bpl.n	8006f44 <_printf_float+0x16c>
 8006f40:	3301      	adds	r3, #1
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d09c      	beq.n	8006e86 <_printf_float+0xae>
 8006f4c:	232d      	movs	r3, #45	; 0x2d
 8006f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f52:	e798      	b.n	8006e86 <_printf_float+0xae>
 8006f54:	9a06      	ldr	r2, [sp, #24]
 8006f56:	2a47      	cmp	r2, #71	; 0x47
 8006f58:	d1be      	bne.n	8006ed8 <_printf_float+0x100>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1bc      	bne.n	8006ed8 <_printf_float+0x100>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e7b9      	b.n	8006ed6 <_printf_float+0xfe>
 8006f62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f66:	d118      	bne.n	8006f9a <_printf_float+0x1c2>
 8006f68:	2900      	cmp	r1, #0
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	dd0b      	ble.n	8006f86 <_printf_float+0x1ae>
 8006f6e:	6121      	str	r1, [r4, #16]
 8006f70:	b913      	cbnz	r3, 8006f78 <_printf_float+0x1a0>
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	07d0      	lsls	r0, r2, #31
 8006f76:	d502      	bpl.n	8006f7e <_printf_float+0x1a6>
 8006f78:	3301      	adds	r3, #1
 8006f7a:	440b      	add	r3, r1
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f80:	f04f 0900 	mov.w	r9, #0
 8006f84:	e7de      	b.n	8006f44 <_printf_float+0x16c>
 8006f86:	b913      	cbnz	r3, 8006f8e <_printf_float+0x1b6>
 8006f88:	6822      	ldr	r2, [r4, #0]
 8006f8a:	07d2      	lsls	r2, r2, #31
 8006f8c:	d501      	bpl.n	8006f92 <_printf_float+0x1ba>
 8006f8e:	3302      	adds	r3, #2
 8006f90:	e7f4      	b.n	8006f7c <_printf_float+0x1a4>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e7f2      	b.n	8006f7c <_printf_float+0x1a4>
 8006f96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	db05      	blt.n	8006fac <_printf_float+0x1d4>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	6121      	str	r1, [r4, #16]
 8006fa4:	07d8      	lsls	r0, r3, #31
 8006fa6:	d5ea      	bpl.n	8006f7e <_printf_float+0x1a6>
 8006fa8:	1c4b      	adds	r3, r1, #1
 8006faa:	e7e7      	b.n	8006f7c <_printf_float+0x1a4>
 8006fac:	2900      	cmp	r1, #0
 8006fae:	bfd4      	ite	le
 8006fb0:	f1c1 0202 	rsble	r2, r1, #2
 8006fb4:	2201      	movgt	r2, #1
 8006fb6:	4413      	add	r3, r2
 8006fb8:	e7e0      	b.n	8006f7c <_printf_float+0x1a4>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	055a      	lsls	r2, r3, #21
 8006fbe:	d407      	bmi.n	8006fd0 <_printf_float+0x1f8>
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d12c      	bne.n	8007028 <_printf_float+0x250>
 8006fce:	e764      	b.n	8006e9a <_printf_float+0xc2>
 8006fd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fd4:	f240 80e0 	bls.w	8007198 <_printf_float+0x3c0>
 8006fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f7f9 fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d034      	beq.n	8007052 <_printf_float+0x27a>
 8006fe8:	4a37      	ldr	r2, [pc, #220]	; (80070c8 <_printf_float+0x2f0>)
 8006fea:	2301      	movs	r3, #1
 8006fec:	4631      	mov	r1, r6
 8006fee:	4628      	mov	r0, r5
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	f43f af51 	beq.w	8006e9a <_printf_float+0xc2>
 8006ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	db02      	blt.n	8007006 <_printf_float+0x22e>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	07d8      	lsls	r0, r3, #31
 8007004:	d510      	bpl.n	8007028 <_printf_float+0x250>
 8007006:	ee18 3a10 	vmov	r3, s16
 800700a:	4652      	mov	r2, sl
 800700c:	4631      	mov	r1, r6
 800700e:	4628      	mov	r0, r5
 8007010:	47b8      	blx	r7
 8007012:	3001      	adds	r0, #1
 8007014:	f43f af41 	beq.w	8006e9a <_printf_float+0xc2>
 8007018:	f04f 0800 	mov.w	r8, #0
 800701c:	f104 091a 	add.w	r9, r4, #26
 8007020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007022:	3b01      	subs	r3, #1
 8007024:	4543      	cmp	r3, r8
 8007026:	dc09      	bgt.n	800703c <_printf_float+0x264>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	079b      	lsls	r3, r3, #30
 800702c:	f100 8105 	bmi.w	800723a <_printf_float+0x462>
 8007030:	68e0      	ldr	r0, [r4, #12]
 8007032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007034:	4298      	cmp	r0, r3
 8007036:	bfb8      	it	lt
 8007038:	4618      	movlt	r0, r3
 800703a:	e730      	b.n	8006e9e <_printf_float+0xc6>
 800703c:	2301      	movs	r3, #1
 800703e:	464a      	mov	r2, r9
 8007040:	4631      	mov	r1, r6
 8007042:	4628      	mov	r0, r5
 8007044:	47b8      	blx	r7
 8007046:	3001      	adds	r0, #1
 8007048:	f43f af27 	beq.w	8006e9a <_printf_float+0xc2>
 800704c:	f108 0801 	add.w	r8, r8, #1
 8007050:	e7e6      	b.n	8007020 <_printf_float+0x248>
 8007052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	dc39      	bgt.n	80070cc <_printf_float+0x2f4>
 8007058:	4a1b      	ldr	r2, [pc, #108]	; (80070c8 <_printf_float+0x2f0>)
 800705a:	2301      	movs	r3, #1
 800705c:	4631      	mov	r1, r6
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	f43f af19 	beq.w	8006e9a <_printf_float+0xc2>
 8007068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800706c:	4313      	orrs	r3, r2
 800706e:	d102      	bne.n	8007076 <_printf_float+0x29e>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	07d9      	lsls	r1, r3, #31
 8007074:	d5d8      	bpl.n	8007028 <_printf_float+0x250>
 8007076:	ee18 3a10 	vmov	r3, s16
 800707a:	4652      	mov	r2, sl
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	47b8      	blx	r7
 8007082:	3001      	adds	r0, #1
 8007084:	f43f af09 	beq.w	8006e9a <_printf_float+0xc2>
 8007088:	f04f 0900 	mov.w	r9, #0
 800708c:	f104 0a1a 	add.w	sl, r4, #26
 8007090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007092:	425b      	negs	r3, r3
 8007094:	454b      	cmp	r3, r9
 8007096:	dc01      	bgt.n	800709c <_printf_float+0x2c4>
 8007098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709a:	e792      	b.n	8006fc2 <_printf_float+0x1ea>
 800709c:	2301      	movs	r3, #1
 800709e:	4652      	mov	r2, sl
 80070a0:	4631      	mov	r1, r6
 80070a2:	4628      	mov	r0, r5
 80070a4:	47b8      	blx	r7
 80070a6:	3001      	adds	r0, #1
 80070a8:	f43f aef7 	beq.w	8006e9a <_printf_float+0xc2>
 80070ac:	f109 0901 	add.w	r9, r9, #1
 80070b0:	e7ee      	b.n	8007090 <_printf_float+0x2b8>
 80070b2:	bf00      	nop
 80070b4:	7fefffff 	.word	0x7fefffff
 80070b8:	0800c6bc 	.word	0x0800c6bc
 80070bc:	0800c6c0 	.word	0x0800c6c0
 80070c0:	0800c6c8 	.word	0x0800c6c8
 80070c4:	0800c6c4 	.word	0x0800c6c4
 80070c8:	0800c6cc 	.word	0x0800c6cc
 80070cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070d0:	429a      	cmp	r2, r3
 80070d2:	bfa8      	it	ge
 80070d4:	461a      	movge	r2, r3
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	4691      	mov	r9, r2
 80070da:	dc37      	bgt.n	800714c <_printf_float+0x374>
 80070dc:	f04f 0b00 	mov.w	fp, #0
 80070e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070e4:	f104 021a 	add.w	r2, r4, #26
 80070e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ea:	9305      	str	r3, [sp, #20]
 80070ec:	eba3 0309 	sub.w	r3, r3, r9
 80070f0:	455b      	cmp	r3, fp
 80070f2:	dc33      	bgt.n	800715c <_printf_float+0x384>
 80070f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070f8:	429a      	cmp	r2, r3
 80070fa:	db3b      	blt.n	8007174 <_printf_float+0x39c>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	07da      	lsls	r2, r3, #31
 8007100:	d438      	bmi.n	8007174 <_printf_float+0x39c>
 8007102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007104:	9b05      	ldr	r3, [sp, #20]
 8007106:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	eba2 0901 	sub.w	r9, r2, r1
 800710e:	4599      	cmp	r9, r3
 8007110:	bfa8      	it	ge
 8007112:	4699      	movge	r9, r3
 8007114:	f1b9 0f00 	cmp.w	r9, #0
 8007118:	dc35      	bgt.n	8007186 <_printf_float+0x3ae>
 800711a:	f04f 0800 	mov.w	r8, #0
 800711e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007122:	f104 0a1a 	add.w	sl, r4, #26
 8007126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	eba3 0309 	sub.w	r3, r3, r9
 8007130:	4543      	cmp	r3, r8
 8007132:	f77f af79 	ble.w	8007028 <_printf_float+0x250>
 8007136:	2301      	movs	r3, #1
 8007138:	4652      	mov	r2, sl
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	f43f aeaa 	beq.w	8006e9a <_printf_float+0xc2>
 8007146:	f108 0801 	add.w	r8, r8, #1
 800714a:	e7ec      	b.n	8007126 <_printf_float+0x34e>
 800714c:	4613      	mov	r3, r2
 800714e:	4631      	mov	r1, r6
 8007150:	4642      	mov	r2, r8
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	d1c0      	bne.n	80070dc <_printf_float+0x304>
 800715a:	e69e      	b.n	8006e9a <_printf_float+0xc2>
 800715c:	2301      	movs	r3, #1
 800715e:	4631      	mov	r1, r6
 8007160:	4628      	mov	r0, r5
 8007162:	9205      	str	r2, [sp, #20]
 8007164:	47b8      	blx	r7
 8007166:	3001      	adds	r0, #1
 8007168:	f43f ae97 	beq.w	8006e9a <_printf_float+0xc2>
 800716c:	9a05      	ldr	r2, [sp, #20]
 800716e:	f10b 0b01 	add.w	fp, fp, #1
 8007172:	e7b9      	b.n	80070e8 <_printf_float+0x310>
 8007174:	ee18 3a10 	vmov	r3, s16
 8007178:	4652      	mov	r2, sl
 800717a:	4631      	mov	r1, r6
 800717c:	4628      	mov	r0, r5
 800717e:	47b8      	blx	r7
 8007180:	3001      	adds	r0, #1
 8007182:	d1be      	bne.n	8007102 <_printf_float+0x32a>
 8007184:	e689      	b.n	8006e9a <_printf_float+0xc2>
 8007186:	9a05      	ldr	r2, [sp, #20]
 8007188:	464b      	mov	r3, r9
 800718a:	4442      	add	r2, r8
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	d1c1      	bne.n	800711a <_printf_float+0x342>
 8007196:	e680      	b.n	8006e9a <_printf_float+0xc2>
 8007198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800719a:	2a01      	cmp	r2, #1
 800719c:	dc01      	bgt.n	80071a2 <_printf_float+0x3ca>
 800719e:	07db      	lsls	r3, r3, #31
 80071a0:	d538      	bpl.n	8007214 <_printf_float+0x43c>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4642      	mov	r2, r8
 80071a6:	4631      	mov	r1, r6
 80071a8:	4628      	mov	r0, r5
 80071aa:	47b8      	blx	r7
 80071ac:	3001      	adds	r0, #1
 80071ae:	f43f ae74 	beq.w	8006e9a <_printf_float+0xc2>
 80071b2:	ee18 3a10 	vmov	r3, s16
 80071b6:	4652      	mov	r2, sl
 80071b8:	4631      	mov	r1, r6
 80071ba:	4628      	mov	r0, r5
 80071bc:	47b8      	blx	r7
 80071be:	3001      	adds	r0, #1
 80071c0:	f43f ae6b 	beq.w	8006e9a <_printf_float+0xc2>
 80071c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071c8:	2200      	movs	r2, #0
 80071ca:	2300      	movs	r3, #0
 80071cc:	f7f9 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80071d0:	b9d8      	cbnz	r0, 800720a <_printf_float+0x432>
 80071d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d4:	f108 0201 	add.w	r2, r8, #1
 80071d8:	3b01      	subs	r3, #1
 80071da:	4631      	mov	r1, r6
 80071dc:	4628      	mov	r0, r5
 80071de:	47b8      	blx	r7
 80071e0:	3001      	adds	r0, #1
 80071e2:	d10e      	bne.n	8007202 <_printf_float+0x42a>
 80071e4:	e659      	b.n	8006e9a <_printf_float+0xc2>
 80071e6:	2301      	movs	r3, #1
 80071e8:	4652      	mov	r2, sl
 80071ea:	4631      	mov	r1, r6
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b8      	blx	r7
 80071f0:	3001      	adds	r0, #1
 80071f2:	f43f ae52 	beq.w	8006e9a <_printf_float+0xc2>
 80071f6:	f108 0801 	add.w	r8, r8, #1
 80071fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fc:	3b01      	subs	r3, #1
 80071fe:	4543      	cmp	r3, r8
 8007200:	dcf1      	bgt.n	80071e6 <_printf_float+0x40e>
 8007202:	464b      	mov	r3, r9
 8007204:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007208:	e6dc      	b.n	8006fc4 <_printf_float+0x1ec>
 800720a:	f04f 0800 	mov.w	r8, #0
 800720e:	f104 0a1a 	add.w	sl, r4, #26
 8007212:	e7f2      	b.n	80071fa <_printf_float+0x422>
 8007214:	2301      	movs	r3, #1
 8007216:	4642      	mov	r2, r8
 8007218:	e7df      	b.n	80071da <_printf_float+0x402>
 800721a:	2301      	movs	r3, #1
 800721c:	464a      	mov	r2, r9
 800721e:	4631      	mov	r1, r6
 8007220:	4628      	mov	r0, r5
 8007222:	47b8      	blx	r7
 8007224:	3001      	adds	r0, #1
 8007226:	f43f ae38 	beq.w	8006e9a <_printf_float+0xc2>
 800722a:	f108 0801 	add.w	r8, r8, #1
 800722e:	68e3      	ldr	r3, [r4, #12]
 8007230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007232:	1a5b      	subs	r3, r3, r1
 8007234:	4543      	cmp	r3, r8
 8007236:	dcf0      	bgt.n	800721a <_printf_float+0x442>
 8007238:	e6fa      	b.n	8007030 <_printf_float+0x258>
 800723a:	f04f 0800 	mov.w	r8, #0
 800723e:	f104 0919 	add.w	r9, r4, #25
 8007242:	e7f4      	b.n	800722e <_printf_float+0x456>

08007244 <_printf_common>:
 8007244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007248:	4616      	mov	r6, r2
 800724a:	4699      	mov	r9, r3
 800724c:	688a      	ldr	r2, [r1, #8]
 800724e:	690b      	ldr	r3, [r1, #16]
 8007250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007254:	4293      	cmp	r3, r2
 8007256:	bfb8      	it	lt
 8007258:	4613      	movlt	r3, r2
 800725a:	6033      	str	r3, [r6, #0]
 800725c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007260:	4607      	mov	r7, r0
 8007262:	460c      	mov	r4, r1
 8007264:	b10a      	cbz	r2, 800726a <_printf_common+0x26>
 8007266:	3301      	adds	r3, #1
 8007268:	6033      	str	r3, [r6, #0]
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	0699      	lsls	r1, r3, #26
 800726e:	bf42      	ittt	mi
 8007270:	6833      	ldrmi	r3, [r6, #0]
 8007272:	3302      	addmi	r3, #2
 8007274:	6033      	strmi	r3, [r6, #0]
 8007276:	6825      	ldr	r5, [r4, #0]
 8007278:	f015 0506 	ands.w	r5, r5, #6
 800727c:	d106      	bne.n	800728c <_printf_common+0x48>
 800727e:	f104 0a19 	add.w	sl, r4, #25
 8007282:	68e3      	ldr	r3, [r4, #12]
 8007284:	6832      	ldr	r2, [r6, #0]
 8007286:	1a9b      	subs	r3, r3, r2
 8007288:	42ab      	cmp	r3, r5
 800728a:	dc26      	bgt.n	80072da <_printf_common+0x96>
 800728c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007290:	1e13      	subs	r3, r2, #0
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	bf18      	it	ne
 8007296:	2301      	movne	r3, #1
 8007298:	0692      	lsls	r2, r2, #26
 800729a:	d42b      	bmi.n	80072f4 <_printf_common+0xb0>
 800729c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a0:	4649      	mov	r1, r9
 80072a2:	4638      	mov	r0, r7
 80072a4:	47c0      	blx	r8
 80072a6:	3001      	adds	r0, #1
 80072a8:	d01e      	beq.n	80072e8 <_printf_common+0xa4>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	68e5      	ldr	r5, [r4, #12]
 80072ae:	6832      	ldr	r2, [r6, #0]
 80072b0:	f003 0306 	and.w	r3, r3, #6
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	bf08      	it	eq
 80072b8:	1aad      	subeq	r5, r5, r2
 80072ba:	68a3      	ldr	r3, [r4, #8]
 80072bc:	6922      	ldr	r2, [r4, #16]
 80072be:	bf0c      	ite	eq
 80072c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c4:	2500      	movne	r5, #0
 80072c6:	4293      	cmp	r3, r2
 80072c8:	bfc4      	itt	gt
 80072ca:	1a9b      	subgt	r3, r3, r2
 80072cc:	18ed      	addgt	r5, r5, r3
 80072ce:	2600      	movs	r6, #0
 80072d0:	341a      	adds	r4, #26
 80072d2:	42b5      	cmp	r5, r6
 80072d4:	d11a      	bne.n	800730c <_printf_common+0xc8>
 80072d6:	2000      	movs	r0, #0
 80072d8:	e008      	b.n	80072ec <_printf_common+0xa8>
 80072da:	2301      	movs	r3, #1
 80072dc:	4652      	mov	r2, sl
 80072de:	4649      	mov	r1, r9
 80072e0:	4638      	mov	r0, r7
 80072e2:	47c0      	blx	r8
 80072e4:	3001      	adds	r0, #1
 80072e6:	d103      	bne.n	80072f0 <_printf_common+0xac>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f0:	3501      	adds	r5, #1
 80072f2:	e7c6      	b.n	8007282 <_printf_common+0x3e>
 80072f4:	18e1      	adds	r1, r4, r3
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	2030      	movs	r0, #48	; 0x30
 80072fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072fe:	4422      	add	r2, r4
 8007300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007308:	3302      	adds	r3, #2
 800730a:	e7c7      	b.n	800729c <_printf_common+0x58>
 800730c:	2301      	movs	r3, #1
 800730e:	4622      	mov	r2, r4
 8007310:	4649      	mov	r1, r9
 8007312:	4638      	mov	r0, r7
 8007314:	47c0      	blx	r8
 8007316:	3001      	adds	r0, #1
 8007318:	d0e6      	beq.n	80072e8 <_printf_common+0xa4>
 800731a:	3601      	adds	r6, #1
 800731c:	e7d9      	b.n	80072d2 <_printf_common+0x8e>
	...

08007320 <_printf_i>:
 8007320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	460c      	mov	r4, r1
 8007326:	4691      	mov	r9, r2
 8007328:	7e27      	ldrb	r7, [r4, #24]
 800732a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800732c:	2f78      	cmp	r7, #120	; 0x78
 800732e:	4680      	mov	r8, r0
 8007330:	469a      	mov	sl, r3
 8007332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007336:	d807      	bhi.n	8007348 <_printf_i+0x28>
 8007338:	2f62      	cmp	r7, #98	; 0x62
 800733a:	d80a      	bhi.n	8007352 <_printf_i+0x32>
 800733c:	2f00      	cmp	r7, #0
 800733e:	f000 80d8 	beq.w	80074f2 <_printf_i+0x1d2>
 8007342:	2f58      	cmp	r7, #88	; 0x58
 8007344:	f000 80a3 	beq.w	800748e <_printf_i+0x16e>
 8007348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800734c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007350:	e03a      	b.n	80073c8 <_printf_i+0xa8>
 8007352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007356:	2b15      	cmp	r3, #21
 8007358:	d8f6      	bhi.n	8007348 <_printf_i+0x28>
 800735a:	a001      	add	r0, pc, #4	; (adr r0, 8007360 <_printf_i+0x40>)
 800735c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007360:	080073b9 	.word	0x080073b9
 8007364:	080073cd 	.word	0x080073cd
 8007368:	08007349 	.word	0x08007349
 800736c:	08007349 	.word	0x08007349
 8007370:	08007349 	.word	0x08007349
 8007374:	08007349 	.word	0x08007349
 8007378:	080073cd 	.word	0x080073cd
 800737c:	08007349 	.word	0x08007349
 8007380:	08007349 	.word	0x08007349
 8007384:	08007349 	.word	0x08007349
 8007388:	08007349 	.word	0x08007349
 800738c:	080074d9 	.word	0x080074d9
 8007390:	080073fd 	.word	0x080073fd
 8007394:	080074bb 	.word	0x080074bb
 8007398:	08007349 	.word	0x08007349
 800739c:	08007349 	.word	0x08007349
 80073a0:	080074fb 	.word	0x080074fb
 80073a4:	08007349 	.word	0x08007349
 80073a8:	080073fd 	.word	0x080073fd
 80073ac:	08007349 	.word	0x08007349
 80073b0:	08007349 	.word	0x08007349
 80073b4:	080074c3 	.word	0x080074c3
 80073b8:	680b      	ldr	r3, [r1, #0]
 80073ba:	1d1a      	adds	r2, r3, #4
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	600a      	str	r2, [r1, #0]
 80073c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073c8:	2301      	movs	r3, #1
 80073ca:	e0a3      	b.n	8007514 <_printf_i+0x1f4>
 80073cc:	6825      	ldr	r5, [r4, #0]
 80073ce:	6808      	ldr	r0, [r1, #0]
 80073d0:	062e      	lsls	r6, r5, #24
 80073d2:	f100 0304 	add.w	r3, r0, #4
 80073d6:	d50a      	bpl.n	80073ee <_printf_i+0xce>
 80073d8:	6805      	ldr	r5, [r0, #0]
 80073da:	600b      	str	r3, [r1, #0]
 80073dc:	2d00      	cmp	r5, #0
 80073de:	da03      	bge.n	80073e8 <_printf_i+0xc8>
 80073e0:	232d      	movs	r3, #45	; 0x2d
 80073e2:	426d      	negs	r5, r5
 80073e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e8:	485e      	ldr	r0, [pc, #376]	; (8007564 <_printf_i+0x244>)
 80073ea:	230a      	movs	r3, #10
 80073ec:	e019      	b.n	8007422 <_printf_i+0x102>
 80073ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80073f2:	6805      	ldr	r5, [r0, #0]
 80073f4:	600b      	str	r3, [r1, #0]
 80073f6:	bf18      	it	ne
 80073f8:	b22d      	sxthne	r5, r5
 80073fa:	e7ef      	b.n	80073dc <_printf_i+0xbc>
 80073fc:	680b      	ldr	r3, [r1, #0]
 80073fe:	6825      	ldr	r5, [r4, #0]
 8007400:	1d18      	adds	r0, r3, #4
 8007402:	6008      	str	r0, [r1, #0]
 8007404:	0628      	lsls	r0, r5, #24
 8007406:	d501      	bpl.n	800740c <_printf_i+0xec>
 8007408:	681d      	ldr	r5, [r3, #0]
 800740a:	e002      	b.n	8007412 <_printf_i+0xf2>
 800740c:	0669      	lsls	r1, r5, #25
 800740e:	d5fb      	bpl.n	8007408 <_printf_i+0xe8>
 8007410:	881d      	ldrh	r5, [r3, #0]
 8007412:	4854      	ldr	r0, [pc, #336]	; (8007564 <_printf_i+0x244>)
 8007414:	2f6f      	cmp	r7, #111	; 0x6f
 8007416:	bf0c      	ite	eq
 8007418:	2308      	moveq	r3, #8
 800741a:	230a      	movne	r3, #10
 800741c:	2100      	movs	r1, #0
 800741e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007422:	6866      	ldr	r6, [r4, #4]
 8007424:	60a6      	str	r6, [r4, #8]
 8007426:	2e00      	cmp	r6, #0
 8007428:	bfa2      	ittt	ge
 800742a:	6821      	ldrge	r1, [r4, #0]
 800742c:	f021 0104 	bicge.w	r1, r1, #4
 8007430:	6021      	strge	r1, [r4, #0]
 8007432:	b90d      	cbnz	r5, 8007438 <_printf_i+0x118>
 8007434:	2e00      	cmp	r6, #0
 8007436:	d04d      	beq.n	80074d4 <_printf_i+0x1b4>
 8007438:	4616      	mov	r6, r2
 800743a:	fbb5 f1f3 	udiv	r1, r5, r3
 800743e:	fb03 5711 	mls	r7, r3, r1, r5
 8007442:	5dc7      	ldrb	r7, [r0, r7]
 8007444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007448:	462f      	mov	r7, r5
 800744a:	42bb      	cmp	r3, r7
 800744c:	460d      	mov	r5, r1
 800744e:	d9f4      	bls.n	800743a <_printf_i+0x11a>
 8007450:	2b08      	cmp	r3, #8
 8007452:	d10b      	bne.n	800746c <_printf_i+0x14c>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	07df      	lsls	r7, r3, #31
 8007458:	d508      	bpl.n	800746c <_printf_i+0x14c>
 800745a:	6923      	ldr	r3, [r4, #16]
 800745c:	6861      	ldr	r1, [r4, #4]
 800745e:	4299      	cmp	r1, r3
 8007460:	bfde      	ittt	le
 8007462:	2330      	movle	r3, #48	; 0x30
 8007464:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007468:	f106 36ff 	addle.w	r6, r6, #4294967295
 800746c:	1b92      	subs	r2, r2, r6
 800746e:	6122      	str	r2, [r4, #16]
 8007470:	f8cd a000 	str.w	sl, [sp]
 8007474:	464b      	mov	r3, r9
 8007476:	aa03      	add	r2, sp, #12
 8007478:	4621      	mov	r1, r4
 800747a:	4640      	mov	r0, r8
 800747c:	f7ff fee2 	bl	8007244 <_printf_common>
 8007480:	3001      	adds	r0, #1
 8007482:	d14c      	bne.n	800751e <_printf_i+0x1fe>
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	b004      	add	sp, #16
 800748a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748e:	4835      	ldr	r0, [pc, #212]	; (8007564 <_printf_i+0x244>)
 8007490:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	680e      	ldr	r6, [r1, #0]
 8007498:	061f      	lsls	r7, r3, #24
 800749a:	f856 5b04 	ldr.w	r5, [r6], #4
 800749e:	600e      	str	r6, [r1, #0]
 80074a0:	d514      	bpl.n	80074cc <_printf_i+0x1ac>
 80074a2:	07d9      	lsls	r1, r3, #31
 80074a4:	bf44      	itt	mi
 80074a6:	f043 0320 	orrmi.w	r3, r3, #32
 80074aa:	6023      	strmi	r3, [r4, #0]
 80074ac:	b91d      	cbnz	r5, 80074b6 <_printf_i+0x196>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	f023 0320 	bic.w	r3, r3, #32
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	2310      	movs	r3, #16
 80074b8:	e7b0      	b.n	800741c <_printf_i+0xfc>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f043 0320 	orr.w	r3, r3, #32
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	2378      	movs	r3, #120	; 0x78
 80074c4:	4828      	ldr	r0, [pc, #160]	; (8007568 <_printf_i+0x248>)
 80074c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ca:	e7e3      	b.n	8007494 <_printf_i+0x174>
 80074cc:	065e      	lsls	r6, r3, #25
 80074ce:	bf48      	it	mi
 80074d0:	b2ad      	uxthmi	r5, r5
 80074d2:	e7e6      	b.n	80074a2 <_printf_i+0x182>
 80074d4:	4616      	mov	r6, r2
 80074d6:	e7bb      	b.n	8007450 <_printf_i+0x130>
 80074d8:	680b      	ldr	r3, [r1, #0]
 80074da:	6826      	ldr	r6, [r4, #0]
 80074dc:	6960      	ldr	r0, [r4, #20]
 80074de:	1d1d      	adds	r5, r3, #4
 80074e0:	600d      	str	r5, [r1, #0]
 80074e2:	0635      	lsls	r5, r6, #24
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	d501      	bpl.n	80074ec <_printf_i+0x1cc>
 80074e8:	6018      	str	r0, [r3, #0]
 80074ea:	e002      	b.n	80074f2 <_printf_i+0x1d2>
 80074ec:	0671      	lsls	r1, r6, #25
 80074ee:	d5fb      	bpl.n	80074e8 <_printf_i+0x1c8>
 80074f0:	8018      	strh	r0, [r3, #0]
 80074f2:	2300      	movs	r3, #0
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	4616      	mov	r6, r2
 80074f8:	e7ba      	b.n	8007470 <_printf_i+0x150>
 80074fa:	680b      	ldr	r3, [r1, #0]
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	600a      	str	r2, [r1, #0]
 8007500:	681e      	ldr	r6, [r3, #0]
 8007502:	6862      	ldr	r2, [r4, #4]
 8007504:	2100      	movs	r1, #0
 8007506:	4630      	mov	r0, r6
 8007508:	f7f8 fe6a 	bl	80001e0 <memchr>
 800750c:	b108      	cbz	r0, 8007512 <_printf_i+0x1f2>
 800750e:	1b80      	subs	r0, r0, r6
 8007510:	6060      	str	r0, [r4, #4]
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	2300      	movs	r3, #0
 8007518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800751c:	e7a8      	b.n	8007470 <_printf_i+0x150>
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	4632      	mov	r2, r6
 8007522:	4649      	mov	r1, r9
 8007524:	4640      	mov	r0, r8
 8007526:	47d0      	blx	sl
 8007528:	3001      	adds	r0, #1
 800752a:	d0ab      	beq.n	8007484 <_printf_i+0x164>
 800752c:	6823      	ldr	r3, [r4, #0]
 800752e:	079b      	lsls	r3, r3, #30
 8007530:	d413      	bmi.n	800755a <_printf_i+0x23a>
 8007532:	68e0      	ldr	r0, [r4, #12]
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	4298      	cmp	r0, r3
 8007538:	bfb8      	it	lt
 800753a:	4618      	movlt	r0, r3
 800753c:	e7a4      	b.n	8007488 <_printf_i+0x168>
 800753e:	2301      	movs	r3, #1
 8007540:	4632      	mov	r2, r6
 8007542:	4649      	mov	r1, r9
 8007544:	4640      	mov	r0, r8
 8007546:	47d0      	blx	sl
 8007548:	3001      	adds	r0, #1
 800754a:	d09b      	beq.n	8007484 <_printf_i+0x164>
 800754c:	3501      	adds	r5, #1
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	9903      	ldr	r1, [sp, #12]
 8007552:	1a5b      	subs	r3, r3, r1
 8007554:	42ab      	cmp	r3, r5
 8007556:	dcf2      	bgt.n	800753e <_printf_i+0x21e>
 8007558:	e7eb      	b.n	8007532 <_printf_i+0x212>
 800755a:	2500      	movs	r5, #0
 800755c:	f104 0619 	add.w	r6, r4, #25
 8007560:	e7f5      	b.n	800754e <_printf_i+0x22e>
 8007562:	bf00      	nop
 8007564:	0800c6ce 	.word	0x0800c6ce
 8007568:	0800c6df 	.word	0x0800c6df

0800756c <_scanf_float>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	b087      	sub	sp, #28
 8007572:	4617      	mov	r7, r2
 8007574:	9303      	str	r3, [sp, #12]
 8007576:	688b      	ldr	r3, [r1, #8]
 8007578:	1e5a      	subs	r2, r3, #1
 800757a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800757e:	bf83      	ittte	hi
 8007580:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007584:	195b      	addhi	r3, r3, r5
 8007586:	9302      	strhi	r3, [sp, #8]
 8007588:	2300      	movls	r3, #0
 800758a:	bf86      	itte	hi
 800758c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007590:	608b      	strhi	r3, [r1, #8]
 8007592:	9302      	strls	r3, [sp, #8]
 8007594:	680b      	ldr	r3, [r1, #0]
 8007596:	468b      	mov	fp, r1
 8007598:	2500      	movs	r5, #0
 800759a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800759e:	f84b 3b1c 	str.w	r3, [fp], #28
 80075a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075a6:	4680      	mov	r8, r0
 80075a8:	460c      	mov	r4, r1
 80075aa:	465e      	mov	r6, fp
 80075ac:	46aa      	mov	sl, r5
 80075ae:	46a9      	mov	r9, r5
 80075b0:	9501      	str	r5, [sp, #4]
 80075b2:	68a2      	ldr	r2, [r4, #8]
 80075b4:	b152      	cbz	r2, 80075cc <_scanf_float+0x60>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b4e      	cmp	r3, #78	; 0x4e
 80075bc:	d864      	bhi.n	8007688 <_scanf_float+0x11c>
 80075be:	2b40      	cmp	r3, #64	; 0x40
 80075c0:	d83c      	bhi.n	800763c <_scanf_float+0xd0>
 80075c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80075c6:	b2c8      	uxtb	r0, r1
 80075c8:	280e      	cmp	r0, #14
 80075ca:	d93a      	bls.n	8007642 <_scanf_float+0xd6>
 80075cc:	f1b9 0f00 	cmp.w	r9, #0
 80075d0:	d003      	beq.n	80075da <_scanf_float+0x6e>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075de:	f1ba 0f01 	cmp.w	sl, #1
 80075e2:	f200 8113 	bhi.w	800780c <_scanf_float+0x2a0>
 80075e6:	455e      	cmp	r6, fp
 80075e8:	f200 8105 	bhi.w	80077f6 <_scanf_float+0x28a>
 80075ec:	2501      	movs	r5, #1
 80075ee:	4628      	mov	r0, r5
 80075f0:	b007      	add	sp, #28
 80075f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80075fa:	2a0d      	cmp	r2, #13
 80075fc:	d8e6      	bhi.n	80075cc <_scanf_float+0x60>
 80075fe:	a101      	add	r1, pc, #4	; (adr r1, 8007604 <_scanf_float+0x98>)
 8007600:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007604:	08007743 	.word	0x08007743
 8007608:	080075cd 	.word	0x080075cd
 800760c:	080075cd 	.word	0x080075cd
 8007610:	080075cd 	.word	0x080075cd
 8007614:	080077a3 	.word	0x080077a3
 8007618:	0800777b 	.word	0x0800777b
 800761c:	080075cd 	.word	0x080075cd
 8007620:	080075cd 	.word	0x080075cd
 8007624:	08007751 	.word	0x08007751
 8007628:	080075cd 	.word	0x080075cd
 800762c:	080075cd 	.word	0x080075cd
 8007630:	080075cd 	.word	0x080075cd
 8007634:	080075cd 	.word	0x080075cd
 8007638:	08007709 	.word	0x08007709
 800763c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007640:	e7db      	b.n	80075fa <_scanf_float+0x8e>
 8007642:	290e      	cmp	r1, #14
 8007644:	d8c2      	bhi.n	80075cc <_scanf_float+0x60>
 8007646:	a001      	add	r0, pc, #4	; (adr r0, 800764c <_scanf_float+0xe0>)
 8007648:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800764c:	080076fb 	.word	0x080076fb
 8007650:	080075cd 	.word	0x080075cd
 8007654:	080076fb 	.word	0x080076fb
 8007658:	0800778f 	.word	0x0800778f
 800765c:	080075cd 	.word	0x080075cd
 8007660:	080076a9 	.word	0x080076a9
 8007664:	080076e5 	.word	0x080076e5
 8007668:	080076e5 	.word	0x080076e5
 800766c:	080076e5 	.word	0x080076e5
 8007670:	080076e5 	.word	0x080076e5
 8007674:	080076e5 	.word	0x080076e5
 8007678:	080076e5 	.word	0x080076e5
 800767c:	080076e5 	.word	0x080076e5
 8007680:	080076e5 	.word	0x080076e5
 8007684:	080076e5 	.word	0x080076e5
 8007688:	2b6e      	cmp	r3, #110	; 0x6e
 800768a:	d809      	bhi.n	80076a0 <_scanf_float+0x134>
 800768c:	2b60      	cmp	r3, #96	; 0x60
 800768e:	d8b2      	bhi.n	80075f6 <_scanf_float+0x8a>
 8007690:	2b54      	cmp	r3, #84	; 0x54
 8007692:	d077      	beq.n	8007784 <_scanf_float+0x218>
 8007694:	2b59      	cmp	r3, #89	; 0x59
 8007696:	d199      	bne.n	80075cc <_scanf_float+0x60>
 8007698:	2d07      	cmp	r5, #7
 800769a:	d197      	bne.n	80075cc <_scanf_float+0x60>
 800769c:	2508      	movs	r5, #8
 800769e:	e029      	b.n	80076f4 <_scanf_float+0x188>
 80076a0:	2b74      	cmp	r3, #116	; 0x74
 80076a2:	d06f      	beq.n	8007784 <_scanf_float+0x218>
 80076a4:	2b79      	cmp	r3, #121	; 0x79
 80076a6:	e7f6      	b.n	8007696 <_scanf_float+0x12a>
 80076a8:	6821      	ldr	r1, [r4, #0]
 80076aa:	05c8      	lsls	r0, r1, #23
 80076ac:	d51a      	bpl.n	80076e4 <_scanf_float+0x178>
 80076ae:	9b02      	ldr	r3, [sp, #8]
 80076b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076b4:	6021      	str	r1, [r4, #0]
 80076b6:	f109 0901 	add.w	r9, r9, #1
 80076ba:	b11b      	cbz	r3, 80076c4 <_scanf_float+0x158>
 80076bc:	3b01      	subs	r3, #1
 80076be:	3201      	adds	r2, #1
 80076c0:	9302      	str	r3, [sp, #8]
 80076c2:	60a2      	str	r2, [r4, #8]
 80076c4:	68a3      	ldr	r3, [r4, #8]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	60a3      	str	r3, [r4, #8]
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	3301      	adds	r3, #1
 80076ce:	6123      	str	r3, [r4, #16]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	f340 8084 	ble.w	80077e4 <_scanf_float+0x278>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	3301      	adds	r3, #1
 80076e0:	603b      	str	r3, [r7, #0]
 80076e2:	e766      	b.n	80075b2 <_scanf_float+0x46>
 80076e4:	eb1a 0f05 	cmn.w	sl, r5
 80076e8:	f47f af70 	bne.w	80075cc <_scanf_float+0x60>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80076f2:	6022      	str	r2, [r4, #0]
 80076f4:	f806 3b01 	strb.w	r3, [r6], #1
 80076f8:	e7e4      	b.n	80076c4 <_scanf_float+0x158>
 80076fa:	6822      	ldr	r2, [r4, #0]
 80076fc:	0610      	lsls	r0, r2, #24
 80076fe:	f57f af65 	bpl.w	80075cc <_scanf_float+0x60>
 8007702:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007706:	e7f4      	b.n	80076f2 <_scanf_float+0x186>
 8007708:	f1ba 0f00 	cmp.w	sl, #0
 800770c:	d10e      	bne.n	800772c <_scanf_float+0x1c0>
 800770e:	f1b9 0f00 	cmp.w	r9, #0
 8007712:	d10e      	bne.n	8007732 <_scanf_float+0x1c6>
 8007714:	6822      	ldr	r2, [r4, #0]
 8007716:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800771a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800771e:	d108      	bne.n	8007732 <_scanf_float+0x1c6>
 8007720:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007724:	6022      	str	r2, [r4, #0]
 8007726:	f04f 0a01 	mov.w	sl, #1
 800772a:	e7e3      	b.n	80076f4 <_scanf_float+0x188>
 800772c:	f1ba 0f02 	cmp.w	sl, #2
 8007730:	d055      	beq.n	80077de <_scanf_float+0x272>
 8007732:	2d01      	cmp	r5, #1
 8007734:	d002      	beq.n	800773c <_scanf_float+0x1d0>
 8007736:	2d04      	cmp	r5, #4
 8007738:	f47f af48 	bne.w	80075cc <_scanf_float+0x60>
 800773c:	3501      	adds	r5, #1
 800773e:	b2ed      	uxtb	r5, r5
 8007740:	e7d8      	b.n	80076f4 <_scanf_float+0x188>
 8007742:	f1ba 0f01 	cmp.w	sl, #1
 8007746:	f47f af41 	bne.w	80075cc <_scanf_float+0x60>
 800774a:	f04f 0a02 	mov.w	sl, #2
 800774e:	e7d1      	b.n	80076f4 <_scanf_float+0x188>
 8007750:	b97d      	cbnz	r5, 8007772 <_scanf_float+0x206>
 8007752:	f1b9 0f00 	cmp.w	r9, #0
 8007756:	f47f af3c 	bne.w	80075d2 <_scanf_float+0x66>
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007760:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007764:	f47f af39 	bne.w	80075da <_scanf_float+0x6e>
 8007768:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	2501      	movs	r5, #1
 8007770:	e7c0      	b.n	80076f4 <_scanf_float+0x188>
 8007772:	2d03      	cmp	r5, #3
 8007774:	d0e2      	beq.n	800773c <_scanf_float+0x1d0>
 8007776:	2d05      	cmp	r5, #5
 8007778:	e7de      	b.n	8007738 <_scanf_float+0x1cc>
 800777a:	2d02      	cmp	r5, #2
 800777c:	f47f af26 	bne.w	80075cc <_scanf_float+0x60>
 8007780:	2503      	movs	r5, #3
 8007782:	e7b7      	b.n	80076f4 <_scanf_float+0x188>
 8007784:	2d06      	cmp	r5, #6
 8007786:	f47f af21 	bne.w	80075cc <_scanf_float+0x60>
 800778a:	2507      	movs	r5, #7
 800778c:	e7b2      	b.n	80076f4 <_scanf_float+0x188>
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	0591      	lsls	r1, r2, #22
 8007792:	f57f af1b 	bpl.w	80075cc <_scanf_float+0x60>
 8007796:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800779a:	6022      	str	r2, [r4, #0]
 800779c:	f8cd 9004 	str.w	r9, [sp, #4]
 80077a0:	e7a8      	b.n	80076f4 <_scanf_float+0x188>
 80077a2:	6822      	ldr	r2, [r4, #0]
 80077a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80077a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077ac:	d006      	beq.n	80077bc <_scanf_float+0x250>
 80077ae:	0550      	lsls	r0, r2, #21
 80077b0:	f57f af0c 	bpl.w	80075cc <_scanf_float+0x60>
 80077b4:	f1b9 0f00 	cmp.w	r9, #0
 80077b8:	f43f af0f 	beq.w	80075da <_scanf_float+0x6e>
 80077bc:	0591      	lsls	r1, r2, #22
 80077be:	bf58      	it	pl
 80077c0:	9901      	ldrpl	r1, [sp, #4]
 80077c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077c6:	bf58      	it	pl
 80077c8:	eba9 0101 	subpl.w	r1, r9, r1
 80077cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80077d0:	bf58      	it	pl
 80077d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80077d6:	6022      	str	r2, [r4, #0]
 80077d8:	f04f 0900 	mov.w	r9, #0
 80077dc:	e78a      	b.n	80076f4 <_scanf_float+0x188>
 80077de:	f04f 0a03 	mov.w	sl, #3
 80077e2:	e787      	b.n	80076f4 <_scanf_float+0x188>
 80077e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077e8:	4639      	mov	r1, r7
 80077ea:	4640      	mov	r0, r8
 80077ec:	4798      	blx	r3
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f43f aedf 	beq.w	80075b2 <_scanf_float+0x46>
 80077f4:	e6ea      	b.n	80075cc <_scanf_float+0x60>
 80077f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077fe:	463a      	mov	r2, r7
 8007800:	4640      	mov	r0, r8
 8007802:	4798      	blx	r3
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	3b01      	subs	r3, #1
 8007808:	6123      	str	r3, [r4, #16]
 800780a:	e6ec      	b.n	80075e6 <_scanf_float+0x7a>
 800780c:	1e6b      	subs	r3, r5, #1
 800780e:	2b06      	cmp	r3, #6
 8007810:	d825      	bhi.n	800785e <_scanf_float+0x2f2>
 8007812:	2d02      	cmp	r5, #2
 8007814:	d836      	bhi.n	8007884 <_scanf_float+0x318>
 8007816:	455e      	cmp	r6, fp
 8007818:	f67f aee8 	bls.w	80075ec <_scanf_float+0x80>
 800781c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007820:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007824:	463a      	mov	r2, r7
 8007826:	4640      	mov	r0, r8
 8007828:	4798      	blx	r3
 800782a:	6923      	ldr	r3, [r4, #16]
 800782c:	3b01      	subs	r3, #1
 800782e:	6123      	str	r3, [r4, #16]
 8007830:	e7f1      	b.n	8007816 <_scanf_float+0x2aa>
 8007832:	9802      	ldr	r0, [sp, #8]
 8007834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007838:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800783c:	9002      	str	r0, [sp, #8]
 800783e:	463a      	mov	r2, r7
 8007840:	4640      	mov	r0, r8
 8007842:	4798      	blx	r3
 8007844:	6923      	ldr	r3, [r4, #16]
 8007846:	3b01      	subs	r3, #1
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800784e:	fa5f fa8a 	uxtb.w	sl, sl
 8007852:	f1ba 0f02 	cmp.w	sl, #2
 8007856:	d1ec      	bne.n	8007832 <_scanf_float+0x2c6>
 8007858:	3d03      	subs	r5, #3
 800785a:	b2ed      	uxtb	r5, r5
 800785c:	1b76      	subs	r6, r6, r5
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	05da      	lsls	r2, r3, #23
 8007862:	d52f      	bpl.n	80078c4 <_scanf_float+0x358>
 8007864:	055b      	lsls	r3, r3, #21
 8007866:	d510      	bpl.n	800788a <_scanf_float+0x31e>
 8007868:	455e      	cmp	r6, fp
 800786a:	f67f aebf 	bls.w	80075ec <_scanf_float+0x80>
 800786e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007876:	463a      	mov	r2, r7
 8007878:	4640      	mov	r0, r8
 800787a:	4798      	blx	r3
 800787c:	6923      	ldr	r3, [r4, #16]
 800787e:	3b01      	subs	r3, #1
 8007880:	6123      	str	r3, [r4, #16]
 8007882:	e7f1      	b.n	8007868 <_scanf_float+0x2fc>
 8007884:	46aa      	mov	sl, r5
 8007886:	9602      	str	r6, [sp, #8]
 8007888:	e7df      	b.n	800784a <_scanf_float+0x2de>
 800788a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800788e:	6923      	ldr	r3, [r4, #16]
 8007890:	2965      	cmp	r1, #101	; 0x65
 8007892:	f103 33ff 	add.w	r3, r3, #4294967295
 8007896:	f106 35ff 	add.w	r5, r6, #4294967295
 800789a:	6123      	str	r3, [r4, #16]
 800789c:	d00c      	beq.n	80078b8 <_scanf_float+0x34c>
 800789e:	2945      	cmp	r1, #69	; 0x45
 80078a0:	d00a      	beq.n	80078b8 <_scanf_float+0x34c>
 80078a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078a6:	463a      	mov	r2, r7
 80078a8:	4640      	mov	r0, r8
 80078aa:	4798      	blx	r3
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	1eb5      	subs	r5, r6, #2
 80078b6:	6123      	str	r3, [r4, #16]
 80078b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078bc:	463a      	mov	r2, r7
 80078be:	4640      	mov	r0, r8
 80078c0:	4798      	blx	r3
 80078c2:	462e      	mov	r6, r5
 80078c4:	6825      	ldr	r5, [r4, #0]
 80078c6:	f015 0510 	ands.w	r5, r5, #16
 80078ca:	d158      	bne.n	800797e <_scanf_float+0x412>
 80078cc:	7035      	strb	r5, [r6, #0]
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d8:	d11c      	bne.n	8007914 <_scanf_float+0x3a8>
 80078da:	9b01      	ldr	r3, [sp, #4]
 80078dc:	454b      	cmp	r3, r9
 80078de:	eba3 0209 	sub.w	r2, r3, r9
 80078e2:	d124      	bne.n	800792e <_scanf_float+0x3c2>
 80078e4:	2200      	movs	r2, #0
 80078e6:	4659      	mov	r1, fp
 80078e8:	4640      	mov	r0, r8
 80078ea:	f000 fef7 	bl	80086dc <_strtod_r>
 80078ee:	9b03      	ldr	r3, [sp, #12]
 80078f0:	6821      	ldr	r1, [r4, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f011 0f02 	tst.w	r1, #2
 80078f8:	ec57 6b10 	vmov	r6, r7, d0
 80078fc:	f103 0204 	add.w	r2, r3, #4
 8007900:	d020      	beq.n	8007944 <_scanf_float+0x3d8>
 8007902:	9903      	ldr	r1, [sp, #12]
 8007904:	600a      	str	r2, [r1, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	e9c3 6700 	strd	r6, r7, [r3]
 800790c:	68e3      	ldr	r3, [r4, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	60e3      	str	r3, [r4, #12]
 8007912:	e66c      	b.n	80075ee <_scanf_float+0x82>
 8007914:	9b04      	ldr	r3, [sp, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0e4      	beq.n	80078e4 <_scanf_float+0x378>
 800791a:	9905      	ldr	r1, [sp, #20]
 800791c:	230a      	movs	r3, #10
 800791e:	462a      	mov	r2, r5
 8007920:	3101      	adds	r1, #1
 8007922:	4640      	mov	r0, r8
 8007924:	f000 ff64 	bl	80087f0 <_strtol_r>
 8007928:	9b04      	ldr	r3, [sp, #16]
 800792a:	9e05      	ldr	r6, [sp, #20]
 800792c:	1ac2      	subs	r2, r0, r3
 800792e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007932:	429e      	cmp	r6, r3
 8007934:	bf28      	it	cs
 8007936:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800793a:	4912      	ldr	r1, [pc, #72]	; (8007984 <_scanf_float+0x418>)
 800793c:	4630      	mov	r0, r6
 800793e:	f000 f82b 	bl	8007998 <siprintf>
 8007942:	e7cf      	b.n	80078e4 <_scanf_float+0x378>
 8007944:	f011 0f04 	tst.w	r1, #4
 8007948:	9903      	ldr	r1, [sp, #12]
 800794a:	600a      	str	r2, [r1, #0]
 800794c:	d1db      	bne.n	8007906 <_scanf_float+0x39a>
 800794e:	f8d3 8000 	ldr.w	r8, [r3]
 8007952:	ee10 2a10 	vmov	r2, s0
 8007956:	ee10 0a10 	vmov	r0, s0
 800795a:	463b      	mov	r3, r7
 800795c:	4639      	mov	r1, r7
 800795e:	f7f9 f8e5 	bl	8000b2c <__aeabi_dcmpun>
 8007962:	b128      	cbz	r0, 8007970 <_scanf_float+0x404>
 8007964:	4808      	ldr	r0, [pc, #32]	; (8007988 <_scanf_float+0x41c>)
 8007966:	f000 f811 	bl	800798c <nanf>
 800796a:	ed88 0a00 	vstr	s0, [r8]
 800796e:	e7cd      	b.n	800790c <_scanf_float+0x3a0>
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f9 f938 	bl	8000be8 <__aeabi_d2f>
 8007978:	f8c8 0000 	str.w	r0, [r8]
 800797c:	e7c6      	b.n	800790c <_scanf_float+0x3a0>
 800797e:	2500      	movs	r5, #0
 8007980:	e635      	b.n	80075ee <_scanf_float+0x82>
 8007982:	bf00      	nop
 8007984:	0800c6f0 	.word	0x0800c6f0
 8007988:	0800cb08 	.word	0x0800cb08

0800798c <nanf>:
 800798c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007994 <nanf+0x8>
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	7fc00000 	.word	0x7fc00000

08007998 <siprintf>:
 8007998:	b40e      	push	{r1, r2, r3}
 800799a:	b500      	push	{lr}
 800799c:	b09c      	sub	sp, #112	; 0x70
 800799e:	ab1d      	add	r3, sp, #116	; 0x74
 80079a0:	9002      	str	r0, [sp, #8]
 80079a2:	9006      	str	r0, [sp, #24]
 80079a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079a8:	4809      	ldr	r0, [pc, #36]	; (80079d0 <siprintf+0x38>)
 80079aa:	9107      	str	r1, [sp, #28]
 80079ac:	9104      	str	r1, [sp, #16]
 80079ae:	4909      	ldr	r1, [pc, #36]	; (80079d4 <siprintf+0x3c>)
 80079b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b4:	9105      	str	r1, [sp, #20]
 80079b6:	6800      	ldr	r0, [r0, #0]
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	a902      	add	r1, sp, #8
 80079bc:	f002 ff00 	bl	800a7c0 <_svfiprintf_r>
 80079c0:	9b02      	ldr	r3, [sp, #8]
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	b01c      	add	sp, #112	; 0x70
 80079c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079cc:	b003      	add	sp, #12
 80079ce:	4770      	bx	lr
 80079d0:	2000016c 	.word	0x2000016c
 80079d4:	ffff0208 	.word	0xffff0208

080079d8 <strcat>:
 80079d8:	b510      	push	{r4, lr}
 80079da:	4602      	mov	r2, r0
 80079dc:	7814      	ldrb	r4, [r2, #0]
 80079de:	4613      	mov	r3, r2
 80079e0:	3201      	adds	r2, #1
 80079e2:	2c00      	cmp	r4, #0
 80079e4:	d1fa      	bne.n	80079dc <strcat+0x4>
 80079e6:	3b01      	subs	r3, #1
 80079e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079f0:	2a00      	cmp	r2, #0
 80079f2:	d1f9      	bne.n	80079e8 <strcat+0x10>
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <strlcat>:
 80079f6:	b570      	push	{r4, r5, r6, lr}
 80079f8:	4604      	mov	r4, r0
 80079fa:	1916      	adds	r6, r2, r4
 80079fc:	4608      	mov	r0, r1
 80079fe:	4621      	mov	r1, r4
 8007a00:	42b1      	cmp	r1, r6
 8007a02:	460b      	mov	r3, r1
 8007a04:	d106      	bne.n	8007a14 <strlcat+0x1e>
 8007a06:	1b1c      	subs	r4, r3, r4
 8007a08:	1b12      	subs	r2, r2, r4
 8007a0a:	d108      	bne.n	8007a1e <strlcat+0x28>
 8007a0c:	f7f8 fbe0 	bl	80001d0 <strlen>
 8007a10:	4420      	add	r0, r4
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	781d      	ldrb	r5, [r3, #0]
 8007a16:	3101      	adds	r1, #1
 8007a18:	2d00      	cmp	r5, #0
 8007a1a:	d1f1      	bne.n	8007a00 <strlcat+0xa>
 8007a1c:	e7f3      	b.n	8007a06 <strlcat+0x10>
 8007a1e:	4606      	mov	r6, r0
 8007a20:	4631      	mov	r1, r6
 8007a22:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007a26:	b915      	cbnz	r5, 8007a2e <strlcat+0x38>
 8007a28:	701d      	strb	r5, [r3, #0]
 8007a2a:	1a08      	subs	r0, r1, r0
 8007a2c:	e7f0      	b.n	8007a10 <strlcat+0x1a>
 8007a2e:	2a01      	cmp	r2, #1
 8007a30:	bf1c      	itt	ne
 8007a32:	f803 5b01 	strbne.w	r5, [r3], #1
 8007a36:	f102 32ff 	addne.w	r2, r2, #4294967295
 8007a3a:	e7f1      	b.n	8007a20 <strlcat+0x2a>

08007a3c <strlcpy>:
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	460b      	mov	r3, r1
 8007a40:	b162      	cbz	r2, 8007a5c <strlcpy+0x20>
 8007a42:	3a01      	subs	r2, #1
 8007a44:	d008      	beq.n	8007a58 <strlcpy+0x1c>
 8007a46:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007a4a:	f800 4b01 	strb.w	r4, [r0], #1
 8007a4e:	2c00      	cmp	r4, #0
 8007a50:	d1f7      	bne.n	8007a42 <strlcpy+0x6>
 8007a52:	1a58      	subs	r0, r3, r1
 8007a54:	3801      	subs	r0, #1
 8007a56:	bd10      	pop	{r4, pc}
 8007a58:	2200      	movs	r2, #0
 8007a5a:	7002      	strb	r2, [r0, #0]
 8007a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d1fb      	bne.n	8007a5c <strlcpy+0x20>
 8007a64:	e7f5      	b.n	8007a52 <strlcpy+0x16>

08007a66 <strncpy>:
 8007a66:	b510      	push	{r4, lr}
 8007a68:	3901      	subs	r1, #1
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	b132      	cbz	r2, 8007a7c <strncpy+0x16>
 8007a6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a72:	f803 4b01 	strb.w	r4, [r3], #1
 8007a76:	3a01      	subs	r2, #1
 8007a78:	2c00      	cmp	r4, #0
 8007a7a:	d1f7      	bne.n	8007a6c <strncpy+0x6>
 8007a7c:	441a      	add	r2, r3
 8007a7e:	2100      	movs	r1, #0
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d100      	bne.n	8007a86 <strncpy+0x20>
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	f803 1b01 	strb.w	r1, [r3], #1
 8007a8a:	e7f9      	b.n	8007a80 <strncpy+0x1a>

08007a8c <sulp>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	4604      	mov	r4, r0
 8007a90:	460d      	mov	r5, r1
 8007a92:	ec45 4b10 	vmov	d0, r4, r5
 8007a96:	4616      	mov	r6, r2
 8007a98:	f002 fc2e 	bl	800a2f8 <__ulp>
 8007a9c:	ec51 0b10 	vmov	r0, r1, d0
 8007aa0:	b17e      	cbz	r6, 8007ac2 <sulp+0x36>
 8007aa2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007aa6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	dd09      	ble.n	8007ac2 <sulp+0x36>
 8007aae:	051b      	lsls	r3, r3, #20
 8007ab0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ab4:	2400      	movs	r4, #0
 8007ab6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007aba:	4622      	mov	r2, r4
 8007abc:	462b      	mov	r3, r5
 8007abe:	f7f8 fd9b 	bl	80005f8 <__aeabi_dmul>
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	0000      	movs	r0, r0
	...

08007ac8 <_strtod_l>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	b0a3      	sub	sp, #140	; 0x8c
 8007ace:	461f      	mov	r7, r3
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	931e      	str	r3, [sp, #120]	; 0x78
 8007ad4:	4ba4      	ldr	r3, [pc, #656]	; (8007d68 <_strtod_l+0x2a0>)
 8007ad6:	9219      	str	r2, [sp, #100]	; 0x64
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	9307      	str	r3, [sp, #28]
 8007adc:	4604      	mov	r4, r0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	4688      	mov	r8, r1
 8007ae2:	f7f8 fb75 	bl	80001d0 <strlen>
 8007ae6:	f04f 0a00 	mov.w	sl, #0
 8007aea:	4605      	mov	r5, r0
 8007aec:	f04f 0b00 	mov.w	fp, #0
 8007af0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007af4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007af6:	781a      	ldrb	r2, [r3, #0]
 8007af8:	2a2b      	cmp	r2, #43	; 0x2b
 8007afa:	d04c      	beq.n	8007b96 <_strtod_l+0xce>
 8007afc:	d839      	bhi.n	8007b72 <_strtod_l+0xaa>
 8007afe:	2a0d      	cmp	r2, #13
 8007b00:	d832      	bhi.n	8007b68 <_strtod_l+0xa0>
 8007b02:	2a08      	cmp	r2, #8
 8007b04:	d832      	bhi.n	8007b6c <_strtod_l+0xa4>
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	d03c      	beq.n	8007b84 <_strtod_l+0xbc>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b0e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007b10:	7833      	ldrb	r3, [r6, #0]
 8007b12:	2b30      	cmp	r3, #48	; 0x30
 8007b14:	f040 80b4 	bne.w	8007c80 <_strtod_l+0x1b8>
 8007b18:	7873      	ldrb	r3, [r6, #1]
 8007b1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b1e:	2b58      	cmp	r3, #88	; 0x58
 8007b20:	d16c      	bne.n	8007bfc <_strtod_l+0x134>
 8007b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	ab1e      	add	r3, sp, #120	; 0x78
 8007b28:	9702      	str	r7, [sp, #8]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	4a8f      	ldr	r2, [pc, #572]	; (8007d6c <_strtod_l+0x2a4>)
 8007b2e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007b30:	a91d      	add	r1, sp, #116	; 0x74
 8007b32:	4620      	mov	r0, r4
 8007b34:	f001 fd40 	bl	80095b8 <__gethex>
 8007b38:	f010 0707 	ands.w	r7, r0, #7
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	d005      	beq.n	8007b4c <_strtod_l+0x84>
 8007b40:	2f06      	cmp	r7, #6
 8007b42:	d12a      	bne.n	8007b9a <_strtod_l+0xd2>
 8007b44:	3601      	adds	r6, #1
 8007b46:	2300      	movs	r3, #0
 8007b48:	961d      	str	r6, [sp, #116]	; 0x74
 8007b4a:	930e      	str	r3, [sp, #56]	; 0x38
 8007b4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f040 8596 	bne.w	8008680 <_strtod_l+0xbb8>
 8007b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b56:	b1db      	cbz	r3, 8007b90 <_strtod_l+0xc8>
 8007b58:	4652      	mov	r2, sl
 8007b5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b5e:	ec43 2b10 	vmov	d0, r2, r3
 8007b62:	b023      	add	sp, #140	; 0x8c
 8007b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b68:	2a20      	cmp	r2, #32
 8007b6a:	d1ce      	bne.n	8007b0a <_strtod_l+0x42>
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	931d      	str	r3, [sp, #116]	; 0x74
 8007b70:	e7c0      	b.n	8007af4 <_strtod_l+0x2c>
 8007b72:	2a2d      	cmp	r2, #45	; 0x2d
 8007b74:	d1c9      	bne.n	8007b0a <_strtod_l+0x42>
 8007b76:	2201      	movs	r2, #1
 8007b78:	920e      	str	r2, [sp, #56]	; 0x38
 8007b7a:	1c5a      	adds	r2, r3, #1
 8007b7c:	921d      	str	r2, [sp, #116]	; 0x74
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1c4      	bne.n	8007b0e <_strtod_l+0x46>
 8007b84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b86:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 8576 	bne.w	800867c <_strtod_l+0xbb4>
 8007b90:	4652      	mov	r2, sl
 8007b92:	465b      	mov	r3, fp
 8007b94:	e7e3      	b.n	8007b5e <_strtod_l+0x96>
 8007b96:	2200      	movs	r2, #0
 8007b98:	e7ee      	b.n	8007b78 <_strtod_l+0xb0>
 8007b9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007b9c:	b13a      	cbz	r2, 8007bae <_strtod_l+0xe6>
 8007b9e:	2135      	movs	r1, #53	; 0x35
 8007ba0:	a820      	add	r0, sp, #128	; 0x80
 8007ba2:	f002 fcb4 	bl	800a50e <__copybits>
 8007ba6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f002 f879 	bl	8009ca0 <_Bfree>
 8007bae:	3f01      	subs	r7, #1
 8007bb0:	2f05      	cmp	r7, #5
 8007bb2:	d807      	bhi.n	8007bc4 <_strtod_l+0xfc>
 8007bb4:	e8df f007 	tbb	[pc, r7]
 8007bb8:	1d180b0e 	.word	0x1d180b0e
 8007bbc:	030e      	.short	0x030e
 8007bbe:	f04f 0b00 	mov.w	fp, #0
 8007bc2:	46da      	mov	sl, fp
 8007bc4:	0728      	lsls	r0, r5, #28
 8007bc6:	d5c1      	bpl.n	8007b4c <_strtod_l+0x84>
 8007bc8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007bcc:	e7be      	b.n	8007b4c <_strtod_l+0x84>
 8007bce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007bd2:	e7f7      	b.n	8007bc4 <_strtod_l+0xfc>
 8007bd4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007bd8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007bda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007bde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007be2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007be6:	e7ed      	b.n	8007bc4 <_strtod_l+0xfc>
 8007be8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007d70 <_strtod_l+0x2a8>
 8007bec:	f04f 0a00 	mov.w	sl, #0
 8007bf0:	e7e8      	b.n	8007bc4 <_strtod_l+0xfc>
 8007bf2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007bf6:	f04f 3aff 	mov.w	sl, #4294967295
 8007bfa:	e7e3      	b.n	8007bc4 <_strtod_l+0xfc>
 8007bfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	921d      	str	r2, [sp, #116]	; 0x74
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b30      	cmp	r3, #48	; 0x30
 8007c06:	d0f9      	beq.n	8007bfc <_strtod_l+0x134>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d09f      	beq.n	8007b4c <_strtod_l+0x84>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f04f 0900 	mov.w	r9, #0
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c16:	930a      	str	r3, [sp, #40]	; 0x28
 8007c18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007c1c:	464f      	mov	r7, r9
 8007c1e:	220a      	movs	r2, #10
 8007c20:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007c22:	7806      	ldrb	r6, [r0, #0]
 8007c24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007c28:	b2d9      	uxtb	r1, r3
 8007c2a:	2909      	cmp	r1, #9
 8007c2c:	d92a      	bls.n	8007c84 <_strtod_l+0x1bc>
 8007c2e:	9907      	ldr	r1, [sp, #28]
 8007c30:	462a      	mov	r2, r5
 8007c32:	f002 fedd 	bl	800a9f0 <strncmp>
 8007c36:	b398      	cbz	r0, 8007ca0 <_strtod_l+0x1d8>
 8007c38:	2000      	movs	r0, #0
 8007c3a:	4633      	mov	r3, r6
 8007c3c:	463d      	mov	r5, r7
 8007c3e:	9007      	str	r0, [sp, #28]
 8007c40:	4602      	mov	r2, r0
 8007c42:	2b65      	cmp	r3, #101	; 0x65
 8007c44:	d001      	beq.n	8007c4a <_strtod_l+0x182>
 8007c46:	2b45      	cmp	r3, #69	; 0x45
 8007c48:	d118      	bne.n	8007c7c <_strtod_l+0x1b4>
 8007c4a:	b91d      	cbnz	r5, 8007c54 <_strtod_l+0x18c>
 8007c4c:	9b04      	ldr	r3, [sp, #16]
 8007c4e:	4303      	orrs	r3, r0
 8007c50:	d098      	beq.n	8007b84 <_strtod_l+0xbc>
 8007c52:	2500      	movs	r5, #0
 8007c54:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007c58:	f108 0301 	add.w	r3, r8, #1
 8007c5c:	931d      	str	r3, [sp, #116]	; 0x74
 8007c5e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c62:	2b2b      	cmp	r3, #43	; 0x2b
 8007c64:	d075      	beq.n	8007d52 <_strtod_l+0x28a>
 8007c66:	2b2d      	cmp	r3, #45	; 0x2d
 8007c68:	d07b      	beq.n	8007d62 <_strtod_l+0x29a>
 8007c6a:	f04f 0c00 	mov.w	ip, #0
 8007c6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007c72:	2909      	cmp	r1, #9
 8007c74:	f240 8082 	bls.w	8007d7c <_strtod_l+0x2b4>
 8007c78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007c7c:	2600      	movs	r6, #0
 8007c7e:	e09d      	b.n	8007dbc <_strtod_l+0x2f4>
 8007c80:	2300      	movs	r3, #0
 8007c82:	e7c4      	b.n	8007c0e <_strtod_l+0x146>
 8007c84:	2f08      	cmp	r7, #8
 8007c86:	bfd8      	it	le
 8007c88:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007c8a:	f100 0001 	add.w	r0, r0, #1
 8007c8e:	bfda      	itte	le
 8007c90:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c94:	9309      	strle	r3, [sp, #36]	; 0x24
 8007c96:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007c9a:	3701      	adds	r7, #1
 8007c9c:	901d      	str	r0, [sp, #116]	; 0x74
 8007c9e:	e7bf      	b.n	8007c20 <_strtod_l+0x158>
 8007ca0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ca2:	195a      	adds	r2, r3, r5
 8007ca4:	921d      	str	r2, [sp, #116]	; 0x74
 8007ca6:	5d5b      	ldrb	r3, [r3, r5]
 8007ca8:	2f00      	cmp	r7, #0
 8007caa:	d037      	beq.n	8007d1c <_strtod_l+0x254>
 8007cac:	9007      	str	r0, [sp, #28]
 8007cae:	463d      	mov	r5, r7
 8007cb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007cb4:	2a09      	cmp	r2, #9
 8007cb6:	d912      	bls.n	8007cde <_strtod_l+0x216>
 8007cb8:	2201      	movs	r2, #1
 8007cba:	e7c2      	b.n	8007c42 <_strtod_l+0x17a>
 8007cbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	921d      	str	r2, [sp, #116]	; 0x74
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	2b30      	cmp	r3, #48	; 0x30
 8007cc8:	d0f8      	beq.n	8007cbc <_strtod_l+0x1f4>
 8007cca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007cce:	2a08      	cmp	r2, #8
 8007cd0:	f200 84db 	bhi.w	800868a <_strtod_l+0xbc2>
 8007cd4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007cd6:	9007      	str	r0, [sp, #28]
 8007cd8:	2000      	movs	r0, #0
 8007cda:	920a      	str	r2, [sp, #40]	; 0x28
 8007cdc:	4605      	mov	r5, r0
 8007cde:	3b30      	subs	r3, #48	; 0x30
 8007ce0:	f100 0201 	add.w	r2, r0, #1
 8007ce4:	d014      	beq.n	8007d10 <_strtod_l+0x248>
 8007ce6:	9907      	ldr	r1, [sp, #28]
 8007ce8:	4411      	add	r1, r2
 8007cea:	9107      	str	r1, [sp, #28]
 8007cec:	462a      	mov	r2, r5
 8007cee:	eb00 0e05 	add.w	lr, r0, r5
 8007cf2:	210a      	movs	r1, #10
 8007cf4:	4572      	cmp	r2, lr
 8007cf6:	d113      	bne.n	8007d20 <_strtod_l+0x258>
 8007cf8:	182a      	adds	r2, r5, r0
 8007cfa:	2a08      	cmp	r2, #8
 8007cfc:	f105 0501 	add.w	r5, r5, #1
 8007d00:	4405      	add	r5, r0
 8007d02:	dc1c      	bgt.n	8007d3e <_strtod_l+0x276>
 8007d04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d06:	220a      	movs	r2, #10
 8007d08:	fb02 3301 	mla	r3, r2, r1, r3
 8007d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0e:	2200      	movs	r2, #0
 8007d10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d12:	1c59      	adds	r1, r3, #1
 8007d14:	911d      	str	r1, [sp, #116]	; 0x74
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	4610      	mov	r0, r2
 8007d1a:	e7c9      	b.n	8007cb0 <_strtod_l+0x1e8>
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	e7d2      	b.n	8007cc6 <_strtod_l+0x1fe>
 8007d20:	2a08      	cmp	r2, #8
 8007d22:	dc04      	bgt.n	8007d2e <_strtod_l+0x266>
 8007d24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d26:	434e      	muls	r6, r1
 8007d28:	9609      	str	r6, [sp, #36]	; 0x24
 8007d2a:	3201      	adds	r2, #1
 8007d2c:	e7e2      	b.n	8007cf4 <_strtod_l+0x22c>
 8007d2e:	f102 0c01 	add.w	ip, r2, #1
 8007d32:	f1bc 0f10 	cmp.w	ip, #16
 8007d36:	bfd8      	it	le
 8007d38:	fb01 f909 	mulle.w	r9, r1, r9
 8007d3c:	e7f5      	b.n	8007d2a <_strtod_l+0x262>
 8007d3e:	2d10      	cmp	r5, #16
 8007d40:	bfdc      	itt	le
 8007d42:	220a      	movle	r2, #10
 8007d44:	fb02 3909 	mlale	r9, r2, r9, r3
 8007d48:	e7e1      	b.n	8007d0e <_strtod_l+0x246>
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9307      	str	r3, [sp, #28]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	e77c      	b.n	8007c4c <_strtod_l+0x184>
 8007d52:	f04f 0c00 	mov.w	ip, #0
 8007d56:	f108 0302 	add.w	r3, r8, #2
 8007d5a:	931d      	str	r3, [sp, #116]	; 0x74
 8007d5c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007d60:	e785      	b.n	8007c6e <_strtod_l+0x1a6>
 8007d62:	f04f 0c01 	mov.w	ip, #1
 8007d66:	e7f6      	b.n	8007d56 <_strtod_l+0x28e>
 8007d68:	0800c948 	.word	0x0800c948
 8007d6c:	0800c6f8 	.word	0x0800c6f8
 8007d70:	7ff00000 	.word	0x7ff00000
 8007d74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d76:	1c59      	adds	r1, r3, #1
 8007d78:	911d      	str	r1, [sp, #116]	; 0x74
 8007d7a:	785b      	ldrb	r3, [r3, #1]
 8007d7c:	2b30      	cmp	r3, #48	; 0x30
 8007d7e:	d0f9      	beq.n	8007d74 <_strtod_l+0x2ac>
 8007d80:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007d84:	2908      	cmp	r1, #8
 8007d86:	f63f af79 	bhi.w	8007c7c <_strtod_l+0x1b4>
 8007d8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007d8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d90:	9308      	str	r3, [sp, #32]
 8007d92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d94:	1c59      	adds	r1, r3, #1
 8007d96:	911d      	str	r1, [sp, #116]	; 0x74
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007d9e:	2e09      	cmp	r6, #9
 8007da0:	d937      	bls.n	8007e12 <_strtod_l+0x34a>
 8007da2:	9e08      	ldr	r6, [sp, #32]
 8007da4:	1b89      	subs	r1, r1, r6
 8007da6:	2908      	cmp	r1, #8
 8007da8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007dac:	dc02      	bgt.n	8007db4 <_strtod_l+0x2ec>
 8007dae:	4576      	cmp	r6, lr
 8007db0:	bfa8      	it	ge
 8007db2:	4676      	movge	r6, lr
 8007db4:	f1bc 0f00 	cmp.w	ip, #0
 8007db8:	d000      	beq.n	8007dbc <_strtod_l+0x2f4>
 8007dba:	4276      	negs	r6, r6
 8007dbc:	2d00      	cmp	r5, #0
 8007dbe:	d14f      	bne.n	8007e60 <_strtod_l+0x398>
 8007dc0:	9904      	ldr	r1, [sp, #16]
 8007dc2:	4301      	orrs	r1, r0
 8007dc4:	f47f aec2 	bne.w	8007b4c <_strtod_l+0x84>
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	f47f aedb 	bne.w	8007b84 <_strtod_l+0xbc>
 8007dce:	2b69      	cmp	r3, #105	; 0x69
 8007dd0:	d027      	beq.n	8007e22 <_strtod_l+0x35a>
 8007dd2:	dc24      	bgt.n	8007e1e <_strtod_l+0x356>
 8007dd4:	2b49      	cmp	r3, #73	; 0x49
 8007dd6:	d024      	beq.n	8007e22 <_strtod_l+0x35a>
 8007dd8:	2b4e      	cmp	r3, #78	; 0x4e
 8007dda:	f47f aed3 	bne.w	8007b84 <_strtod_l+0xbc>
 8007dde:	499e      	ldr	r1, [pc, #632]	; (8008058 <_strtod_l+0x590>)
 8007de0:	a81d      	add	r0, sp, #116	; 0x74
 8007de2:	f001 fe41 	bl	8009a68 <__match>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f aecc 	beq.w	8007b84 <_strtod_l+0xbc>
 8007dec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b28      	cmp	r3, #40	; 0x28
 8007df2:	d12d      	bne.n	8007e50 <_strtod_l+0x388>
 8007df4:	4999      	ldr	r1, [pc, #612]	; (800805c <_strtod_l+0x594>)
 8007df6:	aa20      	add	r2, sp, #128	; 0x80
 8007df8:	a81d      	add	r0, sp, #116	; 0x74
 8007dfa:	f001 fe49 	bl	8009a90 <__hexnan>
 8007dfe:	2805      	cmp	r0, #5
 8007e00:	d126      	bne.n	8007e50 <_strtod_l+0x388>
 8007e02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e04:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007e08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007e0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007e10:	e69c      	b.n	8007b4c <_strtod_l+0x84>
 8007e12:	210a      	movs	r1, #10
 8007e14:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007e18:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007e1c:	e7b9      	b.n	8007d92 <_strtod_l+0x2ca>
 8007e1e:	2b6e      	cmp	r3, #110	; 0x6e
 8007e20:	e7db      	b.n	8007dda <_strtod_l+0x312>
 8007e22:	498f      	ldr	r1, [pc, #572]	; (8008060 <_strtod_l+0x598>)
 8007e24:	a81d      	add	r0, sp, #116	; 0x74
 8007e26:	f001 fe1f 	bl	8009a68 <__match>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	f43f aeaa 	beq.w	8007b84 <_strtod_l+0xbc>
 8007e30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e32:	498c      	ldr	r1, [pc, #560]	; (8008064 <_strtod_l+0x59c>)
 8007e34:	3b01      	subs	r3, #1
 8007e36:	a81d      	add	r0, sp, #116	; 0x74
 8007e38:	931d      	str	r3, [sp, #116]	; 0x74
 8007e3a:	f001 fe15 	bl	8009a68 <__match>
 8007e3e:	b910      	cbnz	r0, 8007e46 <_strtod_l+0x37e>
 8007e40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e42:	3301      	adds	r3, #1
 8007e44:	931d      	str	r3, [sp, #116]	; 0x74
 8007e46:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008074 <_strtod_l+0x5ac>
 8007e4a:	f04f 0a00 	mov.w	sl, #0
 8007e4e:	e67d      	b.n	8007b4c <_strtod_l+0x84>
 8007e50:	4885      	ldr	r0, [pc, #532]	; (8008068 <_strtod_l+0x5a0>)
 8007e52:	f002 fdb5 	bl	800a9c0 <nan>
 8007e56:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007e5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007e5e:	e675      	b.n	8007b4c <_strtod_l+0x84>
 8007e60:	9b07      	ldr	r3, [sp, #28]
 8007e62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e64:	1af3      	subs	r3, r6, r3
 8007e66:	2f00      	cmp	r7, #0
 8007e68:	bf08      	it	eq
 8007e6a:	462f      	moveq	r7, r5
 8007e6c:	2d10      	cmp	r5, #16
 8007e6e:	9308      	str	r3, [sp, #32]
 8007e70:	46a8      	mov	r8, r5
 8007e72:	bfa8      	it	ge
 8007e74:	f04f 0810 	movge.w	r8, #16
 8007e78:	f7f8 fb44 	bl	8000504 <__aeabi_ui2d>
 8007e7c:	2d09      	cmp	r5, #9
 8007e7e:	4682      	mov	sl, r0
 8007e80:	468b      	mov	fp, r1
 8007e82:	dd13      	ble.n	8007eac <_strtod_l+0x3e4>
 8007e84:	4b79      	ldr	r3, [pc, #484]	; (800806c <_strtod_l+0x5a4>)
 8007e86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007e8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e8e:	f7f8 fbb3 	bl	80005f8 <__aeabi_dmul>
 8007e92:	4682      	mov	sl, r0
 8007e94:	4648      	mov	r0, r9
 8007e96:	468b      	mov	fp, r1
 8007e98:	f7f8 fb34 	bl	8000504 <__aeabi_ui2d>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4650      	mov	r0, sl
 8007ea2:	4659      	mov	r1, fp
 8007ea4:	f7f8 f9f2 	bl	800028c <__adddf3>
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	468b      	mov	fp, r1
 8007eac:	2d0f      	cmp	r5, #15
 8007eae:	dc38      	bgt.n	8007f22 <_strtod_l+0x45a>
 8007eb0:	9b08      	ldr	r3, [sp, #32]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f43f ae4a 	beq.w	8007b4c <_strtod_l+0x84>
 8007eb8:	dd24      	ble.n	8007f04 <_strtod_l+0x43c>
 8007eba:	2b16      	cmp	r3, #22
 8007ebc:	dc0b      	bgt.n	8007ed6 <_strtod_l+0x40e>
 8007ebe:	4d6b      	ldr	r5, [pc, #428]	; (800806c <_strtod_l+0x5a4>)
 8007ec0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007ec4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007ec8:	4652      	mov	r2, sl
 8007eca:	465b      	mov	r3, fp
 8007ecc:	f7f8 fb94 	bl	80005f8 <__aeabi_dmul>
 8007ed0:	4682      	mov	sl, r0
 8007ed2:	468b      	mov	fp, r1
 8007ed4:	e63a      	b.n	8007b4c <_strtod_l+0x84>
 8007ed6:	9a08      	ldr	r2, [sp, #32]
 8007ed8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007edc:	4293      	cmp	r3, r2
 8007ede:	db20      	blt.n	8007f22 <_strtod_l+0x45a>
 8007ee0:	4c62      	ldr	r4, [pc, #392]	; (800806c <_strtod_l+0x5a4>)
 8007ee2:	f1c5 050f 	rsb	r5, r5, #15
 8007ee6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007eea:	4652      	mov	r2, sl
 8007eec:	465b      	mov	r3, fp
 8007eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ef2:	f7f8 fb81 	bl	80005f8 <__aeabi_dmul>
 8007ef6:	9b08      	ldr	r3, [sp, #32]
 8007ef8:	1b5d      	subs	r5, r3, r5
 8007efa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007efe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f02:	e7e3      	b.n	8007ecc <_strtod_l+0x404>
 8007f04:	9b08      	ldr	r3, [sp, #32]
 8007f06:	3316      	adds	r3, #22
 8007f08:	db0b      	blt.n	8007f22 <_strtod_l+0x45a>
 8007f0a:	9b07      	ldr	r3, [sp, #28]
 8007f0c:	4a57      	ldr	r2, [pc, #348]	; (800806c <_strtod_l+0x5a4>)
 8007f0e:	1b9e      	subs	r6, r3, r6
 8007f10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007f14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f18:	4650      	mov	r0, sl
 8007f1a:	4659      	mov	r1, fp
 8007f1c:	f7f8 fc96 	bl	800084c <__aeabi_ddiv>
 8007f20:	e7d6      	b.n	8007ed0 <_strtod_l+0x408>
 8007f22:	9b08      	ldr	r3, [sp, #32]
 8007f24:	eba5 0808 	sub.w	r8, r5, r8
 8007f28:	4498      	add	r8, r3
 8007f2a:	f1b8 0f00 	cmp.w	r8, #0
 8007f2e:	dd71      	ble.n	8008014 <_strtod_l+0x54c>
 8007f30:	f018 030f 	ands.w	r3, r8, #15
 8007f34:	d00a      	beq.n	8007f4c <_strtod_l+0x484>
 8007f36:	494d      	ldr	r1, [pc, #308]	; (800806c <_strtod_l+0x5a4>)
 8007f38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	465b      	mov	r3, fp
 8007f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f44:	f7f8 fb58 	bl	80005f8 <__aeabi_dmul>
 8007f48:	4682      	mov	sl, r0
 8007f4a:	468b      	mov	fp, r1
 8007f4c:	f038 080f 	bics.w	r8, r8, #15
 8007f50:	d04d      	beq.n	8007fee <_strtod_l+0x526>
 8007f52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007f56:	dd22      	ble.n	8007f9e <_strtod_l+0x4d6>
 8007f58:	2500      	movs	r5, #0
 8007f5a:	462e      	mov	r6, r5
 8007f5c:	9509      	str	r5, [sp, #36]	; 0x24
 8007f5e:	9507      	str	r5, [sp, #28]
 8007f60:	2322      	movs	r3, #34	; 0x22
 8007f62:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008074 <_strtod_l+0x5ac>
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	f04f 0a00 	mov.w	sl, #0
 8007f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f43f adec 	beq.w	8007b4c <_strtod_l+0x84>
 8007f74:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007f76:	4620      	mov	r0, r4
 8007f78:	f001 fe92 	bl	8009ca0 <_Bfree>
 8007f7c:	9907      	ldr	r1, [sp, #28]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f001 fe8e 	bl	8009ca0 <_Bfree>
 8007f84:	4631      	mov	r1, r6
 8007f86:	4620      	mov	r0, r4
 8007f88:	f001 fe8a 	bl	8009ca0 <_Bfree>
 8007f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f001 fe86 	bl	8009ca0 <_Bfree>
 8007f94:	4629      	mov	r1, r5
 8007f96:	4620      	mov	r0, r4
 8007f98:	f001 fe82 	bl	8009ca0 <_Bfree>
 8007f9c:	e5d6      	b.n	8007b4c <_strtod_l+0x84>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	4659      	mov	r1, fp
 8007fa8:	4699      	mov	r9, r3
 8007faa:	f1b8 0f01 	cmp.w	r8, #1
 8007fae:	dc21      	bgt.n	8007ff4 <_strtod_l+0x52c>
 8007fb0:	b10b      	cbz	r3, 8007fb6 <_strtod_l+0x4ee>
 8007fb2:	4682      	mov	sl, r0
 8007fb4:	468b      	mov	fp, r1
 8007fb6:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <_strtod_l+0x5a8>)
 8007fb8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007fbc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007fc0:	4652      	mov	r2, sl
 8007fc2:	465b      	mov	r3, fp
 8007fc4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007fc8:	f7f8 fb16 	bl	80005f8 <__aeabi_dmul>
 8007fcc:	4b29      	ldr	r3, [pc, #164]	; (8008074 <_strtod_l+0x5ac>)
 8007fce:	460a      	mov	r2, r1
 8007fd0:	400b      	ands	r3, r1
 8007fd2:	4929      	ldr	r1, [pc, #164]	; (8008078 <_strtod_l+0x5b0>)
 8007fd4:	428b      	cmp	r3, r1
 8007fd6:	4682      	mov	sl, r0
 8007fd8:	d8be      	bhi.n	8007f58 <_strtod_l+0x490>
 8007fda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007fde:	428b      	cmp	r3, r1
 8007fe0:	bf86      	itte	hi
 8007fe2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800807c <_strtod_l+0x5b4>
 8007fe6:	f04f 3aff 	movhi.w	sl, #4294967295
 8007fea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007fee:	2300      	movs	r3, #0
 8007ff0:	9304      	str	r3, [sp, #16]
 8007ff2:	e081      	b.n	80080f8 <_strtod_l+0x630>
 8007ff4:	f018 0f01 	tst.w	r8, #1
 8007ff8:	d007      	beq.n	800800a <_strtod_l+0x542>
 8007ffa:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <_strtod_l+0x5a8>)
 8007ffc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	f7f8 faf8 	bl	80005f8 <__aeabi_dmul>
 8008008:	2301      	movs	r3, #1
 800800a:	f109 0901 	add.w	r9, r9, #1
 800800e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008012:	e7ca      	b.n	8007faa <_strtod_l+0x4e2>
 8008014:	d0eb      	beq.n	8007fee <_strtod_l+0x526>
 8008016:	f1c8 0800 	rsb	r8, r8, #0
 800801a:	f018 020f 	ands.w	r2, r8, #15
 800801e:	d00a      	beq.n	8008036 <_strtod_l+0x56e>
 8008020:	4b12      	ldr	r3, [pc, #72]	; (800806c <_strtod_l+0x5a4>)
 8008022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008026:	4650      	mov	r0, sl
 8008028:	4659      	mov	r1, fp
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	f7f8 fc0d 	bl	800084c <__aeabi_ddiv>
 8008032:	4682      	mov	sl, r0
 8008034:	468b      	mov	fp, r1
 8008036:	ea5f 1828 	movs.w	r8, r8, asr #4
 800803a:	d0d8      	beq.n	8007fee <_strtod_l+0x526>
 800803c:	f1b8 0f1f 	cmp.w	r8, #31
 8008040:	dd1e      	ble.n	8008080 <_strtod_l+0x5b8>
 8008042:	2500      	movs	r5, #0
 8008044:	462e      	mov	r6, r5
 8008046:	9509      	str	r5, [sp, #36]	; 0x24
 8008048:	9507      	str	r5, [sp, #28]
 800804a:	2322      	movs	r3, #34	; 0x22
 800804c:	f04f 0a00 	mov.w	sl, #0
 8008050:	f04f 0b00 	mov.w	fp, #0
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	e789      	b.n	8007f6c <_strtod_l+0x4a4>
 8008058:	0800c6c9 	.word	0x0800c6c9
 800805c:	0800c70c 	.word	0x0800c70c
 8008060:	0800c6c1 	.word	0x0800c6c1
 8008064:	0800c84c 	.word	0x0800c84c
 8008068:	0800cb08 	.word	0x0800cb08
 800806c:	0800c9e8 	.word	0x0800c9e8
 8008070:	0800c9c0 	.word	0x0800c9c0
 8008074:	7ff00000 	.word	0x7ff00000
 8008078:	7ca00000 	.word	0x7ca00000
 800807c:	7fefffff 	.word	0x7fefffff
 8008080:	f018 0310 	ands.w	r3, r8, #16
 8008084:	bf18      	it	ne
 8008086:	236a      	movne	r3, #106	; 0x6a
 8008088:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008440 <_strtod_l+0x978>
 800808c:	9304      	str	r3, [sp, #16]
 800808e:	4650      	mov	r0, sl
 8008090:	4659      	mov	r1, fp
 8008092:	2300      	movs	r3, #0
 8008094:	f018 0f01 	tst.w	r8, #1
 8008098:	d004      	beq.n	80080a4 <_strtod_l+0x5dc>
 800809a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800809e:	f7f8 faab 	bl	80005f8 <__aeabi_dmul>
 80080a2:	2301      	movs	r3, #1
 80080a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80080a8:	f109 0908 	add.w	r9, r9, #8
 80080ac:	d1f2      	bne.n	8008094 <_strtod_l+0x5cc>
 80080ae:	b10b      	cbz	r3, 80080b4 <_strtod_l+0x5ec>
 80080b0:	4682      	mov	sl, r0
 80080b2:	468b      	mov	fp, r1
 80080b4:	9b04      	ldr	r3, [sp, #16]
 80080b6:	b1bb      	cbz	r3, 80080e8 <_strtod_l+0x620>
 80080b8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80080bc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	4659      	mov	r1, fp
 80080c4:	dd10      	ble.n	80080e8 <_strtod_l+0x620>
 80080c6:	2b1f      	cmp	r3, #31
 80080c8:	f340 8128 	ble.w	800831c <_strtod_l+0x854>
 80080cc:	2b34      	cmp	r3, #52	; 0x34
 80080ce:	bfde      	ittt	le
 80080d0:	3b20      	suble	r3, #32
 80080d2:	f04f 32ff 	movle.w	r2, #4294967295
 80080d6:	fa02 f303 	lslle.w	r3, r2, r3
 80080da:	f04f 0a00 	mov.w	sl, #0
 80080de:	bfcc      	ite	gt
 80080e0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80080e4:	ea03 0b01 	andle.w	fp, r3, r1
 80080e8:	2200      	movs	r2, #0
 80080ea:	2300      	movs	r3, #0
 80080ec:	4650      	mov	r0, sl
 80080ee:	4659      	mov	r1, fp
 80080f0:	f7f8 fcea 	bl	8000ac8 <__aeabi_dcmpeq>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d1a4      	bne.n	8008042 <_strtod_l+0x57a>
 80080f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080fe:	462b      	mov	r3, r5
 8008100:	463a      	mov	r2, r7
 8008102:	4620      	mov	r0, r4
 8008104:	f001 fe38 	bl	8009d78 <__s2b>
 8008108:	9009      	str	r0, [sp, #36]	; 0x24
 800810a:	2800      	cmp	r0, #0
 800810c:	f43f af24 	beq.w	8007f58 <_strtod_l+0x490>
 8008110:	9b07      	ldr	r3, [sp, #28]
 8008112:	1b9e      	subs	r6, r3, r6
 8008114:	9b08      	ldr	r3, [sp, #32]
 8008116:	2b00      	cmp	r3, #0
 8008118:	bfb4      	ite	lt
 800811a:	4633      	movlt	r3, r6
 800811c:	2300      	movge	r3, #0
 800811e:	9310      	str	r3, [sp, #64]	; 0x40
 8008120:	9b08      	ldr	r3, [sp, #32]
 8008122:	2500      	movs	r5, #0
 8008124:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008128:	9318      	str	r3, [sp, #96]	; 0x60
 800812a:	462e      	mov	r6, r5
 800812c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800812e:	4620      	mov	r0, r4
 8008130:	6859      	ldr	r1, [r3, #4]
 8008132:	f001 fd75 	bl	8009c20 <_Balloc>
 8008136:	9007      	str	r0, [sp, #28]
 8008138:	2800      	cmp	r0, #0
 800813a:	f43f af11 	beq.w	8007f60 <_strtod_l+0x498>
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	691a      	ldr	r2, [r3, #16]
 8008142:	3202      	adds	r2, #2
 8008144:	f103 010c 	add.w	r1, r3, #12
 8008148:	0092      	lsls	r2, r2, #2
 800814a:	300c      	adds	r0, #12
 800814c:	f001 fd5a 	bl	8009c04 <memcpy>
 8008150:	ec4b ab10 	vmov	d0, sl, fp
 8008154:	aa20      	add	r2, sp, #128	; 0x80
 8008156:	a91f      	add	r1, sp, #124	; 0x7c
 8008158:	4620      	mov	r0, r4
 800815a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800815e:	f002 f947 	bl	800a3f0 <__d2b>
 8008162:	901e      	str	r0, [sp, #120]	; 0x78
 8008164:	2800      	cmp	r0, #0
 8008166:	f43f aefb 	beq.w	8007f60 <_strtod_l+0x498>
 800816a:	2101      	movs	r1, #1
 800816c:	4620      	mov	r0, r4
 800816e:	f001 fe9d 	bl	8009eac <__i2b>
 8008172:	4606      	mov	r6, r0
 8008174:	2800      	cmp	r0, #0
 8008176:	f43f aef3 	beq.w	8007f60 <_strtod_l+0x498>
 800817a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800817c:	9904      	ldr	r1, [sp, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	bfab      	itete	ge
 8008182:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008184:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008186:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008188:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800818c:	bfac      	ite	ge
 800818e:	eb03 0902 	addge.w	r9, r3, r2
 8008192:	1ad7      	sublt	r7, r2, r3
 8008194:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008196:	eba3 0801 	sub.w	r8, r3, r1
 800819a:	4490      	add	r8, r2
 800819c:	4ba3      	ldr	r3, [pc, #652]	; (800842c <_strtod_l+0x964>)
 800819e:	f108 38ff 	add.w	r8, r8, #4294967295
 80081a2:	4598      	cmp	r8, r3
 80081a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80081a8:	f280 80cc 	bge.w	8008344 <_strtod_l+0x87c>
 80081ac:	eba3 0308 	sub.w	r3, r3, r8
 80081b0:	2b1f      	cmp	r3, #31
 80081b2:	eba2 0203 	sub.w	r2, r2, r3
 80081b6:	f04f 0101 	mov.w	r1, #1
 80081ba:	f300 80b6 	bgt.w	800832a <_strtod_l+0x862>
 80081be:	fa01 f303 	lsl.w	r3, r1, r3
 80081c2:	9311      	str	r3, [sp, #68]	; 0x44
 80081c4:	2300      	movs	r3, #0
 80081c6:	930c      	str	r3, [sp, #48]	; 0x30
 80081c8:	eb09 0802 	add.w	r8, r9, r2
 80081cc:	9b04      	ldr	r3, [sp, #16]
 80081ce:	45c1      	cmp	r9, r8
 80081d0:	4417      	add	r7, r2
 80081d2:	441f      	add	r7, r3
 80081d4:	464b      	mov	r3, r9
 80081d6:	bfa8      	it	ge
 80081d8:	4643      	movge	r3, r8
 80081da:	42bb      	cmp	r3, r7
 80081dc:	bfa8      	it	ge
 80081de:	463b      	movge	r3, r7
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bfc2      	ittt	gt
 80081e4:	eba8 0803 	subgt.w	r8, r8, r3
 80081e8:	1aff      	subgt	r7, r7, r3
 80081ea:	eba9 0903 	subgt.w	r9, r9, r3
 80081ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	dd17      	ble.n	8008224 <_strtod_l+0x75c>
 80081f4:	4631      	mov	r1, r6
 80081f6:	461a      	mov	r2, r3
 80081f8:	4620      	mov	r0, r4
 80081fa:	f001 ff13 	bl	800a024 <__pow5mult>
 80081fe:	4606      	mov	r6, r0
 8008200:	2800      	cmp	r0, #0
 8008202:	f43f aead 	beq.w	8007f60 <_strtod_l+0x498>
 8008206:	4601      	mov	r1, r0
 8008208:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800820a:	4620      	mov	r0, r4
 800820c:	f001 fe64 	bl	8009ed8 <__multiply>
 8008210:	900f      	str	r0, [sp, #60]	; 0x3c
 8008212:	2800      	cmp	r0, #0
 8008214:	f43f aea4 	beq.w	8007f60 <_strtod_l+0x498>
 8008218:	991e      	ldr	r1, [sp, #120]	; 0x78
 800821a:	4620      	mov	r0, r4
 800821c:	f001 fd40 	bl	8009ca0 <_Bfree>
 8008220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008222:	931e      	str	r3, [sp, #120]	; 0x78
 8008224:	f1b8 0f00 	cmp.w	r8, #0
 8008228:	f300 8091 	bgt.w	800834e <_strtod_l+0x886>
 800822c:	9b08      	ldr	r3, [sp, #32]
 800822e:	2b00      	cmp	r3, #0
 8008230:	dd08      	ble.n	8008244 <_strtod_l+0x77c>
 8008232:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008234:	9907      	ldr	r1, [sp, #28]
 8008236:	4620      	mov	r0, r4
 8008238:	f001 fef4 	bl	800a024 <__pow5mult>
 800823c:	9007      	str	r0, [sp, #28]
 800823e:	2800      	cmp	r0, #0
 8008240:	f43f ae8e 	beq.w	8007f60 <_strtod_l+0x498>
 8008244:	2f00      	cmp	r7, #0
 8008246:	dd08      	ble.n	800825a <_strtod_l+0x792>
 8008248:	9907      	ldr	r1, [sp, #28]
 800824a:	463a      	mov	r2, r7
 800824c:	4620      	mov	r0, r4
 800824e:	f001 ff43 	bl	800a0d8 <__lshift>
 8008252:	9007      	str	r0, [sp, #28]
 8008254:	2800      	cmp	r0, #0
 8008256:	f43f ae83 	beq.w	8007f60 <_strtod_l+0x498>
 800825a:	f1b9 0f00 	cmp.w	r9, #0
 800825e:	dd08      	ble.n	8008272 <_strtod_l+0x7aa>
 8008260:	4631      	mov	r1, r6
 8008262:	464a      	mov	r2, r9
 8008264:	4620      	mov	r0, r4
 8008266:	f001 ff37 	bl	800a0d8 <__lshift>
 800826a:	4606      	mov	r6, r0
 800826c:	2800      	cmp	r0, #0
 800826e:	f43f ae77 	beq.w	8007f60 <_strtod_l+0x498>
 8008272:	9a07      	ldr	r2, [sp, #28]
 8008274:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008276:	4620      	mov	r0, r4
 8008278:	f001 ffb6 	bl	800a1e8 <__mdiff>
 800827c:	4605      	mov	r5, r0
 800827e:	2800      	cmp	r0, #0
 8008280:	f43f ae6e 	beq.w	8007f60 <_strtod_l+0x498>
 8008284:	68c3      	ldr	r3, [r0, #12]
 8008286:	930f      	str	r3, [sp, #60]	; 0x3c
 8008288:	2300      	movs	r3, #0
 800828a:	60c3      	str	r3, [r0, #12]
 800828c:	4631      	mov	r1, r6
 800828e:	f001 ff8f 	bl	800a1b0 <__mcmp>
 8008292:	2800      	cmp	r0, #0
 8008294:	da65      	bge.n	8008362 <_strtod_l+0x89a>
 8008296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008298:	ea53 030a 	orrs.w	r3, r3, sl
 800829c:	f040 8087 	bne.w	80083ae <_strtod_l+0x8e6>
 80082a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 8082 	bne.w	80083ae <_strtod_l+0x8e6>
 80082aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80082ae:	0d1b      	lsrs	r3, r3, #20
 80082b0:	051b      	lsls	r3, r3, #20
 80082b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80082b6:	d97a      	bls.n	80083ae <_strtod_l+0x8e6>
 80082b8:	696b      	ldr	r3, [r5, #20]
 80082ba:	b913      	cbnz	r3, 80082c2 <_strtod_l+0x7fa>
 80082bc:	692b      	ldr	r3, [r5, #16]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	dd75      	ble.n	80083ae <_strtod_l+0x8e6>
 80082c2:	4629      	mov	r1, r5
 80082c4:	2201      	movs	r2, #1
 80082c6:	4620      	mov	r0, r4
 80082c8:	f001 ff06 	bl	800a0d8 <__lshift>
 80082cc:	4631      	mov	r1, r6
 80082ce:	4605      	mov	r5, r0
 80082d0:	f001 ff6e 	bl	800a1b0 <__mcmp>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	dd6a      	ble.n	80083ae <_strtod_l+0x8e6>
 80082d8:	9904      	ldr	r1, [sp, #16]
 80082da:	4a55      	ldr	r2, [pc, #340]	; (8008430 <_strtod_l+0x968>)
 80082dc:	465b      	mov	r3, fp
 80082de:	2900      	cmp	r1, #0
 80082e0:	f000 8085 	beq.w	80083ee <_strtod_l+0x926>
 80082e4:	ea02 010b 	and.w	r1, r2, fp
 80082e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80082ec:	dc7f      	bgt.n	80083ee <_strtod_l+0x926>
 80082ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082f2:	f77f aeaa 	ble.w	800804a <_strtod_l+0x582>
 80082f6:	4a4f      	ldr	r2, [pc, #316]	; (8008434 <_strtod_l+0x96c>)
 80082f8:	2300      	movs	r3, #0
 80082fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80082fe:	4650      	mov	r0, sl
 8008300:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008304:	4659      	mov	r1, fp
 8008306:	f7f8 f977 	bl	80005f8 <__aeabi_dmul>
 800830a:	460b      	mov	r3, r1
 800830c:	4303      	orrs	r3, r0
 800830e:	bf08      	it	eq
 8008310:	2322      	moveq	r3, #34	; 0x22
 8008312:	4682      	mov	sl, r0
 8008314:	468b      	mov	fp, r1
 8008316:	bf08      	it	eq
 8008318:	6023      	streq	r3, [r4, #0]
 800831a:	e62b      	b.n	8007f74 <_strtod_l+0x4ac>
 800831c:	f04f 32ff 	mov.w	r2, #4294967295
 8008320:	fa02 f303 	lsl.w	r3, r2, r3
 8008324:	ea03 0a0a 	and.w	sl, r3, sl
 8008328:	e6de      	b.n	80080e8 <_strtod_l+0x620>
 800832a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800832e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008332:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008336:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800833a:	fa01 f308 	lsl.w	r3, r1, r8
 800833e:	930c      	str	r3, [sp, #48]	; 0x30
 8008340:	9111      	str	r1, [sp, #68]	; 0x44
 8008342:	e741      	b.n	80081c8 <_strtod_l+0x700>
 8008344:	2300      	movs	r3, #0
 8008346:	930c      	str	r3, [sp, #48]	; 0x30
 8008348:	2301      	movs	r3, #1
 800834a:	9311      	str	r3, [sp, #68]	; 0x44
 800834c:	e73c      	b.n	80081c8 <_strtod_l+0x700>
 800834e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008350:	4642      	mov	r2, r8
 8008352:	4620      	mov	r0, r4
 8008354:	f001 fec0 	bl	800a0d8 <__lshift>
 8008358:	901e      	str	r0, [sp, #120]	; 0x78
 800835a:	2800      	cmp	r0, #0
 800835c:	f47f af66 	bne.w	800822c <_strtod_l+0x764>
 8008360:	e5fe      	b.n	8007f60 <_strtod_l+0x498>
 8008362:	465f      	mov	r7, fp
 8008364:	d16e      	bne.n	8008444 <_strtod_l+0x97c>
 8008366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008368:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800836c:	b342      	cbz	r2, 80083c0 <_strtod_l+0x8f8>
 800836e:	4a32      	ldr	r2, [pc, #200]	; (8008438 <_strtod_l+0x970>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d128      	bne.n	80083c6 <_strtod_l+0x8fe>
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	4650      	mov	r0, sl
 8008378:	b1eb      	cbz	r3, 80083b6 <_strtod_l+0x8ee>
 800837a:	4a2d      	ldr	r2, [pc, #180]	; (8008430 <_strtod_l+0x968>)
 800837c:	403a      	ands	r2, r7
 800837e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008382:	f04f 31ff 	mov.w	r1, #4294967295
 8008386:	d819      	bhi.n	80083bc <_strtod_l+0x8f4>
 8008388:	0d12      	lsrs	r2, r2, #20
 800838a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800838e:	fa01 f303 	lsl.w	r3, r1, r3
 8008392:	4298      	cmp	r0, r3
 8008394:	d117      	bne.n	80083c6 <_strtod_l+0x8fe>
 8008396:	4b29      	ldr	r3, [pc, #164]	; (800843c <_strtod_l+0x974>)
 8008398:	429f      	cmp	r7, r3
 800839a:	d102      	bne.n	80083a2 <_strtod_l+0x8da>
 800839c:	3001      	adds	r0, #1
 800839e:	f43f addf 	beq.w	8007f60 <_strtod_l+0x498>
 80083a2:	4b23      	ldr	r3, [pc, #140]	; (8008430 <_strtod_l+0x968>)
 80083a4:	403b      	ands	r3, r7
 80083a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80083aa:	f04f 0a00 	mov.w	sl, #0
 80083ae:	9b04      	ldr	r3, [sp, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1a0      	bne.n	80082f6 <_strtod_l+0x82e>
 80083b4:	e5de      	b.n	8007f74 <_strtod_l+0x4ac>
 80083b6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ba:	e7ea      	b.n	8008392 <_strtod_l+0x8ca>
 80083bc:	460b      	mov	r3, r1
 80083be:	e7e8      	b.n	8008392 <_strtod_l+0x8ca>
 80083c0:	ea53 030a 	orrs.w	r3, r3, sl
 80083c4:	d088      	beq.n	80082d8 <_strtod_l+0x810>
 80083c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083c8:	b1db      	cbz	r3, 8008402 <_strtod_l+0x93a>
 80083ca:	423b      	tst	r3, r7
 80083cc:	d0ef      	beq.n	80083ae <_strtod_l+0x8e6>
 80083ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d0:	9a04      	ldr	r2, [sp, #16]
 80083d2:	4650      	mov	r0, sl
 80083d4:	4659      	mov	r1, fp
 80083d6:	b1c3      	cbz	r3, 800840a <_strtod_l+0x942>
 80083d8:	f7ff fb58 	bl	8007a8c <sulp>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80083e4:	f7f7 ff52 	bl	800028c <__adddf3>
 80083e8:	4682      	mov	sl, r0
 80083ea:	468b      	mov	fp, r1
 80083ec:	e7df      	b.n	80083ae <_strtod_l+0x8e6>
 80083ee:	4013      	ands	r3, r2
 80083f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083fc:	f04f 3aff 	mov.w	sl, #4294967295
 8008400:	e7d5      	b.n	80083ae <_strtod_l+0x8e6>
 8008402:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008404:	ea13 0f0a 	tst.w	r3, sl
 8008408:	e7e0      	b.n	80083cc <_strtod_l+0x904>
 800840a:	f7ff fb3f 	bl	8007a8c <sulp>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008416:	f7f7 ff37 	bl	8000288 <__aeabi_dsub>
 800841a:	2200      	movs	r2, #0
 800841c:	2300      	movs	r3, #0
 800841e:	4682      	mov	sl, r0
 8008420:	468b      	mov	fp, r1
 8008422:	f7f8 fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 8008426:	2800      	cmp	r0, #0
 8008428:	d0c1      	beq.n	80083ae <_strtod_l+0x8e6>
 800842a:	e60e      	b.n	800804a <_strtod_l+0x582>
 800842c:	fffffc02 	.word	0xfffffc02
 8008430:	7ff00000 	.word	0x7ff00000
 8008434:	39500000 	.word	0x39500000
 8008438:	000fffff 	.word	0x000fffff
 800843c:	7fefffff 	.word	0x7fefffff
 8008440:	0800c720 	.word	0x0800c720
 8008444:	4631      	mov	r1, r6
 8008446:	4628      	mov	r0, r5
 8008448:	f002 f82e 	bl	800a4a8 <__ratio>
 800844c:	ec59 8b10 	vmov	r8, r9, d0
 8008450:	ee10 0a10 	vmov	r0, s0
 8008454:	2200      	movs	r2, #0
 8008456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800845a:	4649      	mov	r1, r9
 800845c:	f7f8 fb48 	bl	8000af0 <__aeabi_dcmple>
 8008460:	2800      	cmp	r0, #0
 8008462:	d07c      	beq.n	800855e <_strtod_l+0xa96>
 8008464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d04c      	beq.n	8008504 <_strtod_l+0xa3c>
 800846a:	4b95      	ldr	r3, [pc, #596]	; (80086c0 <_strtod_l+0xbf8>)
 800846c:	2200      	movs	r2, #0
 800846e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008472:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80086c0 <_strtod_l+0xbf8>
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	4b92      	ldr	r3, [pc, #584]	; (80086c4 <_strtod_l+0xbfc>)
 800847c:	403b      	ands	r3, r7
 800847e:	9311      	str	r3, [sp, #68]	; 0x44
 8008480:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008482:	4b91      	ldr	r3, [pc, #580]	; (80086c8 <_strtod_l+0xc00>)
 8008484:	429a      	cmp	r2, r3
 8008486:	f040 80b2 	bne.w	80085ee <_strtod_l+0xb26>
 800848a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800848e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008492:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008496:	ec4b ab10 	vmov	d0, sl, fp
 800849a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800849e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084a2:	f001 ff29 	bl	800a2f8 <__ulp>
 80084a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084aa:	ec53 2b10 	vmov	r2, r3, d0
 80084ae:	f7f8 f8a3 	bl	80005f8 <__aeabi_dmul>
 80084b2:	4652      	mov	r2, sl
 80084b4:	465b      	mov	r3, fp
 80084b6:	f7f7 fee9 	bl	800028c <__adddf3>
 80084ba:	460b      	mov	r3, r1
 80084bc:	4981      	ldr	r1, [pc, #516]	; (80086c4 <_strtod_l+0xbfc>)
 80084be:	4a83      	ldr	r2, [pc, #524]	; (80086cc <_strtod_l+0xc04>)
 80084c0:	4019      	ands	r1, r3
 80084c2:	4291      	cmp	r1, r2
 80084c4:	4682      	mov	sl, r0
 80084c6:	d95e      	bls.n	8008586 <_strtod_l+0xabe>
 80084c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d103      	bne.n	80084da <_strtod_l+0xa12>
 80084d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d4:	3301      	adds	r3, #1
 80084d6:	f43f ad43 	beq.w	8007f60 <_strtod_l+0x498>
 80084da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80086d8 <_strtod_l+0xc10>
 80084de:	f04f 3aff 	mov.w	sl, #4294967295
 80084e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80084e4:	4620      	mov	r0, r4
 80084e6:	f001 fbdb 	bl	8009ca0 <_Bfree>
 80084ea:	9907      	ldr	r1, [sp, #28]
 80084ec:	4620      	mov	r0, r4
 80084ee:	f001 fbd7 	bl	8009ca0 <_Bfree>
 80084f2:	4631      	mov	r1, r6
 80084f4:	4620      	mov	r0, r4
 80084f6:	f001 fbd3 	bl	8009ca0 <_Bfree>
 80084fa:	4629      	mov	r1, r5
 80084fc:	4620      	mov	r0, r4
 80084fe:	f001 fbcf 	bl	8009ca0 <_Bfree>
 8008502:	e613      	b.n	800812c <_strtod_l+0x664>
 8008504:	f1ba 0f00 	cmp.w	sl, #0
 8008508:	d11b      	bne.n	8008542 <_strtod_l+0xa7a>
 800850a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800850e:	b9f3      	cbnz	r3, 800854e <_strtod_l+0xa86>
 8008510:	4b6b      	ldr	r3, [pc, #428]	; (80086c0 <_strtod_l+0xbf8>)
 8008512:	2200      	movs	r2, #0
 8008514:	4640      	mov	r0, r8
 8008516:	4649      	mov	r1, r9
 8008518:	f7f8 fae0 	bl	8000adc <__aeabi_dcmplt>
 800851c:	b9d0      	cbnz	r0, 8008554 <_strtod_l+0xa8c>
 800851e:	4640      	mov	r0, r8
 8008520:	4649      	mov	r1, r9
 8008522:	4b6b      	ldr	r3, [pc, #428]	; (80086d0 <_strtod_l+0xc08>)
 8008524:	2200      	movs	r2, #0
 8008526:	f7f8 f867 	bl	80005f8 <__aeabi_dmul>
 800852a:	4680      	mov	r8, r0
 800852c:	4689      	mov	r9, r1
 800852e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008532:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008536:	931b      	str	r3, [sp, #108]	; 0x6c
 8008538:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800853c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008540:	e79b      	b.n	800847a <_strtod_l+0x9b2>
 8008542:	f1ba 0f01 	cmp.w	sl, #1
 8008546:	d102      	bne.n	800854e <_strtod_l+0xa86>
 8008548:	2f00      	cmp	r7, #0
 800854a:	f43f ad7e 	beq.w	800804a <_strtod_l+0x582>
 800854e:	4b61      	ldr	r3, [pc, #388]	; (80086d4 <_strtod_l+0xc0c>)
 8008550:	2200      	movs	r2, #0
 8008552:	e78c      	b.n	800846e <_strtod_l+0x9a6>
 8008554:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80086d0 <_strtod_l+0xc08>
 8008558:	f04f 0800 	mov.w	r8, #0
 800855c:	e7e7      	b.n	800852e <_strtod_l+0xa66>
 800855e:	4b5c      	ldr	r3, [pc, #368]	; (80086d0 <_strtod_l+0xc08>)
 8008560:	4640      	mov	r0, r8
 8008562:	4649      	mov	r1, r9
 8008564:	2200      	movs	r2, #0
 8008566:	f7f8 f847 	bl	80005f8 <__aeabi_dmul>
 800856a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800856c:	4680      	mov	r8, r0
 800856e:	4689      	mov	r9, r1
 8008570:	b933      	cbnz	r3, 8008580 <_strtod_l+0xab8>
 8008572:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008576:	9012      	str	r0, [sp, #72]	; 0x48
 8008578:	9313      	str	r3, [sp, #76]	; 0x4c
 800857a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800857e:	e7dd      	b.n	800853c <_strtod_l+0xa74>
 8008580:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008584:	e7f9      	b.n	800857a <_strtod_l+0xab2>
 8008586:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800858a:	9b04      	ldr	r3, [sp, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1a8      	bne.n	80084e2 <_strtod_l+0xa1a>
 8008590:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008594:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008596:	0d1b      	lsrs	r3, r3, #20
 8008598:	051b      	lsls	r3, r3, #20
 800859a:	429a      	cmp	r2, r3
 800859c:	d1a1      	bne.n	80084e2 <_strtod_l+0xa1a>
 800859e:	4640      	mov	r0, r8
 80085a0:	4649      	mov	r1, r9
 80085a2:	f7f8 fb71 	bl	8000c88 <__aeabi_d2lz>
 80085a6:	f7f7 fff9 	bl	800059c <__aeabi_l2d>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4640      	mov	r0, r8
 80085b0:	4649      	mov	r1, r9
 80085b2:	f7f7 fe69 	bl	8000288 <__aeabi_dsub>
 80085b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085bc:	ea43 030a 	orr.w	r3, r3, sl
 80085c0:	4313      	orrs	r3, r2
 80085c2:	4680      	mov	r8, r0
 80085c4:	4689      	mov	r9, r1
 80085c6:	d053      	beq.n	8008670 <_strtod_l+0xba8>
 80085c8:	a335      	add	r3, pc, #212	; (adr r3, 80086a0 <_strtod_l+0xbd8>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f7f8 fa85 	bl	8000adc <__aeabi_dcmplt>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f47f acce 	bne.w	8007f74 <_strtod_l+0x4ac>
 80085d8:	a333      	add	r3, pc, #204	; (adr r3, 80086a8 <_strtod_l+0xbe0>)
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	4640      	mov	r0, r8
 80085e0:	4649      	mov	r1, r9
 80085e2:	f7f8 fa99 	bl	8000b18 <__aeabi_dcmpgt>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f43f af7b 	beq.w	80084e2 <_strtod_l+0xa1a>
 80085ec:	e4c2      	b.n	8007f74 <_strtod_l+0x4ac>
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	b333      	cbz	r3, 8008640 <_strtod_l+0xb78>
 80085f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085f8:	d822      	bhi.n	8008640 <_strtod_l+0xb78>
 80085fa:	a32d      	add	r3, pc, #180	; (adr r3, 80086b0 <_strtod_l+0xbe8>)
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f8 fa74 	bl	8000af0 <__aeabi_dcmple>
 8008608:	b1a0      	cbz	r0, 8008634 <_strtod_l+0xb6c>
 800860a:	4649      	mov	r1, r9
 800860c:	4640      	mov	r0, r8
 800860e:	f7f8 facb 	bl	8000ba8 <__aeabi_d2uiz>
 8008612:	2801      	cmp	r0, #1
 8008614:	bf38      	it	cc
 8008616:	2001      	movcc	r0, #1
 8008618:	f7f7 ff74 	bl	8000504 <__aeabi_ui2d>
 800861c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800861e:	4680      	mov	r8, r0
 8008620:	4689      	mov	r9, r1
 8008622:	bb13      	cbnz	r3, 800866a <_strtod_l+0xba2>
 8008624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008628:	9014      	str	r0, [sp, #80]	; 0x50
 800862a:	9315      	str	r3, [sp, #84]	; 0x54
 800862c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008630:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008636:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008638:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800863c:	1a9b      	subs	r3, r3, r2
 800863e:	930d      	str	r3, [sp, #52]	; 0x34
 8008640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008644:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008648:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800864c:	f001 fe54 	bl	800a2f8 <__ulp>
 8008650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008654:	ec53 2b10 	vmov	r2, r3, d0
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008660:	f7f7 fe14 	bl	800028c <__adddf3>
 8008664:	4682      	mov	sl, r0
 8008666:	468b      	mov	fp, r1
 8008668:	e78f      	b.n	800858a <_strtod_l+0xac2>
 800866a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800866e:	e7dd      	b.n	800862c <_strtod_l+0xb64>
 8008670:	a311      	add	r3, pc, #68	; (adr r3, 80086b8 <_strtod_l+0xbf0>)
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f7f8 fa31 	bl	8000adc <__aeabi_dcmplt>
 800867a:	e7b4      	b.n	80085e6 <_strtod_l+0xb1e>
 800867c:	2300      	movs	r3, #0
 800867e:	930e      	str	r3, [sp, #56]	; 0x38
 8008680:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008682:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	f7ff ba65 	b.w	8007b54 <_strtod_l+0x8c>
 800868a:	2b65      	cmp	r3, #101	; 0x65
 800868c:	f43f ab5d 	beq.w	8007d4a <_strtod_l+0x282>
 8008690:	2b45      	cmp	r3, #69	; 0x45
 8008692:	f43f ab5a 	beq.w	8007d4a <_strtod_l+0x282>
 8008696:	2201      	movs	r2, #1
 8008698:	f7ff bb92 	b.w	8007dc0 <_strtod_l+0x2f8>
 800869c:	f3af 8000 	nop.w
 80086a0:	94a03595 	.word	0x94a03595
 80086a4:	3fdfffff 	.word	0x3fdfffff
 80086a8:	35afe535 	.word	0x35afe535
 80086ac:	3fe00000 	.word	0x3fe00000
 80086b0:	ffc00000 	.word	0xffc00000
 80086b4:	41dfffff 	.word	0x41dfffff
 80086b8:	94a03595 	.word	0x94a03595
 80086bc:	3fcfffff 	.word	0x3fcfffff
 80086c0:	3ff00000 	.word	0x3ff00000
 80086c4:	7ff00000 	.word	0x7ff00000
 80086c8:	7fe00000 	.word	0x7fe00000
 80086cc:	7c9fffff 	.word	0x7c9fffff
 80086d0:	3fe00000 	.word	0x3fe00000
 80086d4:	bff00000 	.word	0xbff00000
 80086d8:	7fefffff 	.word	0x7fefffff

080086dc <_strtod_r>:
 80086dc:	4b01      	ldr	r3, [pc, #4]	; (80086e4 <_strtod_r+0x8>)
 80086de:	f7ff b9f3 	b.w	8007ac8 <_strtod_l>
 80086e2:	bf00      	nop
 80086e4:	200001d4 	.word	0x200001d4

080086e8 <_strtol_l.isra.0>:
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ee:	d001      	beq.n	80086f4 <_strtol_l.isra.0+0xc>
 80086f0:	2b24      	cmp	r3, #36	; 0x24
 80086f2:	d906      	bls.n	8008702 <_strtol_l.isra.0+0x1a>
 80086f4:	f7fe fa9e 	bl	8006c34 <__errno>
 80086f8:	2316      	movs	r3, #22
 80086fa:	6003      	str	r3, [r0, #0]
 80086fc:	2000      	movs	r0, #0
 80086fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008702:	4f3a      	ldr	r7, [pc, #232]	; (80087ec <_strtol_l.isra.0+0x104>)
 8008704:	468e      	mov	lr, r1
 8008706:	4676      	mov	r6, lr
 8008708:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800870c:	5de5      	ldrb	r5, [r4, r7]
 800870e:	f015 0508 	ands.w	r5, r5, #8
 8008712:	d1f8      	bne.n	8008706 <_strtol_l.isra.0+0x1e>
 8008714:	2c2d      	cmp	r4, #45	; 0x2d
 8008716:	d134      	bne.n	8008782 <_strtol_l.isra.0+0x9a>
 8008718:	f89e 4000 	ldrb.w	r4, [lr]
 800871c:	f04f 0801 	mov.w	r8, #1
 8008720:	f106 0e02 	add.w	lr, r6, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d05c      	beq.n	80087e2 <_strtol_l.isra.0+0xfa>
 8008728:	2b10      	cmp	r3, #16
 800872a:	d10c      	bne.n	8008746 <_strtol_l.isra.0+0x5e>
 800872c:	2c30      	cmp	r4, #48	; 0x30
 800872e:	d10a      	bne.n	8008746 <_strtol_l.isra.0+0x5e>
 8008730:	f89e 4000 	ldrb.w	r4, [lr]
 8008734:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008738:	2c58      	cmp	r4, #88	; 0x58
 800873a:	d14d      	bne.n	80087d8 <_strtol_l.isra.0+0xf0>
 800873c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008740:	2310      	movs	r3, #16
 8008742:	f10e 0e02 	add.w	lr, lr, #2
 8008746:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800874a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800874e:	2600      	movs	r6, #0
 8008750:	fbbc f9f3 	udiv	r9, ip, r3
 8008754:	4635      	mov	r5, r6
 8008756:	fb03 ca19 	mls	sl, r3, r9, ip
 800875a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800875e:	2f09      	cmp	r7, #9
 8008760:	d818      	bhi.n	8008794 <_strtol_l.isra.0+0xac>
 8008762:	463c      	mov	r4, r7
 8008764:	42a3      	cmp	r3, r4
 8008766:	dd24      	ble.n	80087b2 <_strtol_l.isra.0+0xca>
 8008768:	2e00      	cmp	r6, #0
 800876a:	db1f      	blt.n	80087ac <_strtol_l.isra.0+0xc4>
 800876c:	45a9      	cmp	r9, r5
 800876e:	d31d      	bcc.n	80087ac <_strtol_l.isra.0+0xc4>
 8008770:	d101      	bne.n	8008776 <_strtol_l.isra.0+0x8e>
 8008772:	45a2      	cmp	sl, r4
 8008774:	db1a      	blt.n	80087ac <_strtol_l.isra.0+0xc4>
 8008776:	fb05 4503 	mla	r5, r5, r3, r4
 800877a:	2601      	movs	r6, #1
 800877c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008780:	e7eb      	b.n	800875a <_strtol_l.isra.0+0x72>
 8008782:	2c2b      	cmp	r4, #43	; 0x2b
 8008784:	bf08      	it	eq
 8008786:	f89e 4000 	ldrbeq.w	r4, [lr]
 800878a:	46a8      	mov	r8, r5
 800878c:	bf08      	it	eq
 800878e:	f106 0e02 	addeq.w	lr, r6, #2
 8008792:	e7c7      	b.n	8008724 <_strtol_l.isra.0+0x3c>
 8008794:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008798:	2f19      	cmp	r7, #25
 800879a:	d801      	bhi.n	80087a0 <_strtol_l.isra.0+0xb8>
 800879c:	3c37      	subs	r4, #55	; 0x37
 800879e:	e7e1      	b.n	8008764 <_strtol_l.isra.0+0x7c>
 80087a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80087a4:	2f19      	cmp	r7, #25
 80087a6:	d804      	bhi.n	80087b2 <_strtol_l.isra.0+0xca>
 80087a8:	3c57      	subs	r4, #87	; 0x57
 80087aa:	e7db      	b.n	8008764 <_strtol_l.isra.0+0x7c>
 80087ac:	f04f 36ff 	mov.w	r6, #4294967295
 80087b0:	e7e4      	b.n	800877c <_strtol_l.isra.0+0x94>
 80087b2:	2e00      	cmp	r6, #0
 80087b4:	da05      	bge.n	80087c2 <_strtol_l.isra.0+0xda>
 80087b6:	2322      	movs	r3, #34	; 0x22
 80087b8:	6003      	str	r3, [r0, #0]
 80087ba:	4665      	mov	r5, ip
 80087bc:	b942      	cbnz	r2, 80087d0 <_strtol_l.isra.0+0xe8>
 80087be:	4628      	mov	r0, r5
 80087c0:	e79d      	b.n	80086fe <_strtol_l.isra.0+0x16>
 80087c2:	f1b8 0f00 	cmp.w	r8, #0
 80087c6:	d000      	beq.n	80087ca <_strtol_l.isra.0+0xe2>
 80087c8:	426d      	negs	r5, r5
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	d0f7      	beq.n	80087be <_strtol_l.isra.0+0xd6>
 80087ce:	b10e      	cbz	r6, 80087d4 <_strtol_l.isra.0+0xec>
 80087d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80087d4:	6011      	str	r1, [r2, #0]
 80087d6:	e7f2      	b.n	80087be <_strtol_l.isra.0+0xd6>
 80087d8:	2430      	movs	r4, #48	; 0x30
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1b3      	bne.n	8008746 <_strtol_l.isra.0+0x5e>
 80087de:	2308      	movs	r3, #8
 80087e0:	e7b1      	b.n	8008746 <_strtol_l.isra.0+0x5e>
 80087e2:	2c30      	cmp	r4, #48	; 0x30
 80087e4:	d0a4      	beq.n	8008730 <_strtol_l.isra.0+0x48>
 80087e6:	230a      	movs	r3, #10
 80087e8:	e7ad      	b.n	8008746 <_strtol_l.isra.0+0x5e>
 80087ea:	bf00      	nop
 80087ec:	0800c749 	.word	0x0800c749

080087f0 <_strtol_r>:
 80087f0:	f7ff bf7a 	b.w	80086e8 <_strtol_l.isra.0>

080087f4 <quorem>:
 80087f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f8:	6903      	ldr	r3, [r0, #16]
 80087fa:	690c      	ldr	r4, [r1, #16]
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	4607      	mov	r7, r0
 8008800:	f2c0 8081 	blt.w	8008906 <quorem+0x112>
 8008804:	3c01      	subs	r4, #1
 8008806:	f101 0814 	add.w	r8, r1, #20
 800880a:	f100 0514 	add.w	r5, r0, #20
 800880e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008818:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800881c:	3301      	adds	r3, #1
 800881e:	429a      	cmp	r2, r3
 8008820:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008824:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008828:	fbb2 f6f3 	udiv	r6, r2, r3
 800882c:	d331      	bcc.n	8008892 <quorem+0x9e>
 800882e:	f04f 0e00 	mov.w	lr, #0
 8008832:	4640      	mov	r0, r8
 8008834:	46ac      	mov	ip, r5
 8008836:	46f2      	mov	sl, lr
 8008838:	f850 2b04 	ldr.w	r2, [r0], #4
 800883c:	b293      	uxth	r3, r2
 800883e:	fb06 e303 	mla	r3, r6, r3, lr
 8008842:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008846:	b29b      	uxth	r3, r3
 8008848:	ebaa 0303 	sub.w	r3, sl, r3
 800884c:	0c12      	lsrs	r2, r2, #16
 800884e:	f8dc a000 	ldr.w	sl, [ip]
 8008852:	fb06 e202 	mla	r2, r6, r2, lr
 8008856:	fa13 f38a 	uxtah	r3, r3, sl
 800885a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800885e:	fa1f fa82 	uxth.w	sl, r2
 8008862:	f8dc 2000 	ldr.w	r2, [ip]
 8008866:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800886a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800886e:	b29b      	uxth	r3, r3
 8008870:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008874:	4581      	cmp	r9, r0
 8008876:	f84c 3b04 	str.w	r3, [ip], #4
 800887a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800887e:	d2db      	bcs.n	8008838 <quorem+0x44>
 8008880:	f855 300b 	ldr.w	r3, [r5, fp]
 8008884:	b92b      	cbnz	r3, 8008892 <quorem+0x9e>
 8008886:	9b01      	ldr	r3, [sp, #4]
 8008888:	3b04      	subs	r3, #4
 800888a:	429d      	cmp	r5, r3
 800888c:	461a      	mov	r2, r3
 800888e:	d32e      	bcc.n	80088ee <quorem+0xfa>
 8008890:	613c      	str	r4, [r7, #16]
 8008892:	4638      	mov	r0, r7
 8008894:	f001 fc8c 	bl	800a1b0 <__mcmp>
 8008898:	2800      	cmp	r0, #0
 800889a:	db24      	blt.n	80088e6 <quorem+0xf2>
 800889c:	3601      	adds	r6, #1
 800889e:	4628      	mov	r0, r5
 80088a0:	f04f 0c00 	mov.w	ip, #0
 80088a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80088a8:	f8d0 e000 	ldr.w	lr, [r0]
 80088ac:	b293      	uxth	r3, r2
 80088ae:	ebac 0303 	sub.w	r3, ip, r3
 80088b2:	0c12      	lsrs	r2, r2, #16
 80088b4:	fa13 f38e 	uxtah	r3, r3, lr
 80088b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80088bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088c6:	45c1      	cmp	r9, r8
 80088c8:	f840 3b04 	str.w	r3, [r0], #4
 80088cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80088d0:	d2e8      	bcs.n	80088a4 <quorem+0xb0>
 80088d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088da:	b922      	cbnz	r2, 80088e6 <quorem+0xf2>
 80088dc:	3b04      	subs	r3, #4
 80088de:	429d      	cmp	r5, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	d30a      	bcc.n	80088fa <quorem+0x106>
 80088e4:	613c      	str	r4, [r7, #16]
 80088e6:	4630      	mov	r0, r6
 80088e8:	b003      	add	sp, #12
 80088ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	3b04      	subs	r3, #4
 80088f2:	2a00      	cmp	r2, #0
 80088f4:	d1cc      	bne.n	8008890 <quorem+0x9c>
 80088f6:	3c01      	subs	r4, #1
 80088f8:	e7c7      	b.n	800888a <quorem+0x96>
 80088fa:	6812      	ldr	r2, [r2, #0]
 80088fc:	3b04      	subs	r3, #4
 80088fe:	2a00      	cmp	r2, #0
 8008900:	d1f0      	bne.n	80088e4 <quorem+0xf0>
 8008902:	3c01      	subs	r4, #1
 8008904:	e7eb      	b.n	80088de <quorem+0xea>
 8008906:	2000      	movs	r0, #0
 8008908:	e7ee      	b.n	80088e8 <quorem+0xf4>
 800890a:	0000      	movs	r0, r0
 800890c:	0000      	movs	r0, r0
	...

08008910 <_dtoa_r>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	ed2d 8b02 	vpush	{d8}
 8008918:	ec57 6b10 	vmov	r6, r7, d0
 800891c:	b095      	sub	sp, #84	; 0x54
 800891e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008920:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008924:	9105      	str	r1, [sp, #20]
 8008926:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800892a:	4604      	mov	r4, r0
 800892c:	9209      	str	r2, [sp, #36]	; 0x24
 800892e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008930:	b975      	cbnz	r5, 8008950 <_dtoa_r+0x40>
 8008932:	2010      	movs	r0, #16
 8008934:	f001 f94c 	bl	8009bd0 <malloc>
 8008938:	4602      	mov	r2, r0
 800893a:	6260      	str	r0, [r4, #36]	; 0x24
 800893c:	b920      	cbnz	r0, 8008948 <_dtoa_r+0x38>
 800893e:	4bb2      	ldr	r3, [pc, #712]	; (8008c08 <_dtoa_r+0x2f8>)
 8008940:	21ea      	movs	r1, #234	; 0xea
 8008942:	48b2      	ldr	r0, [pc, #712]	; (8008c0c <_dtoa_r+0x2fc>)
 8008944:	f002 f874 	bl	800aa30 <__assert_func>
 8008948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800894c:	6005      	str	r5, [r0, #0]
 800894e:	60c5      	str	r5, [r0, #12]
 8008950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	b151      	cbz	r1, 800896c <_dtoa_r+0x5c>
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	604a      	str	r2, [r1, #4]
 800895a:	2301      	movs	r3, #1
 800895c:	4093      	lsls	r3, r2
 800895e:	608b      	str	r3, [r1, #8]
 8008960:	4620      	mov	r0, r4
 8008962:	f001 f99d 	bl	8009ca0 <_Bfree>
 8008966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	1e3b      	subs	r3, r7, #0
 800896e:	bfb9      	ittee	lt
 8008970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008974:	9303      	strlt	r3, [sp, #12]
 8008976:	2300      	movge	r3, #0
 8008978:	f8c8 3000 	strge.w	r3, [r8]
 800897c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008980:	4ba3      	ldr	r3, [pc, #652]	; (8008c10 <_dtoa_r+0x300>)
 8008982:	bfbc      	itt	lt
 8008984:	2201      	movlt	r2, #1
 8008986:	f8c8 2000 	strlt.w	r2, [r8]
 800898a:	ea33 0309 	bics.w	r3, r3, r9
 800898e:	d11b      	bne.n	80089c8 <_dtoa_r+0xb8>
 8008990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008992:	f242 730f 	movw	r3, #9999	; 0x270f
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800899c:	4333      	orrs	r3, r6
 800899e:	f000 857a 	beq.w	8009496 <_dtoa_r+0xb86>
 80089a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089a4:	b963      	cbnz	r3, 80089c0 <_dtoa_r+0xb0>
 80089a6:	4b9b      	ldr	r3, [pc, #620]	; (8008c14 <_dtoa_r+0x304>)
 80089a8:	e024      	b.n	80089f4 <_dtoa_r+0xe4>
 80089aa:	4b9b      	ldr	r3, [pc, #620]	; (8008c18 <_dtoa_r+0x308>)
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	3308      	adds	r3, #8
 80089b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	9800      	ldr	r0, [sp, #0]
 80089b6:	b015      	add	sp, #84	; 0x54
 80089b8:	ecbd 8b02 	vpop	{d8}
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	4b94      	ldr	r3, [pc, #592]	; (8008c14 <_dtoa_r+0x304>)
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	3303      	adds	r3, #3
 80089c6:	e7f3      	b.n	80089b0 <_dtoa_r+0xa0>
 80089c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089cc:	2200      	movs	r2, #0
 80089ce:	ec51 0b17 	vmov	r0, r1, d7
 80089d2:	2300      	movs	r3, #0
 80089d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80089d8:	f7f8 f876 	bl	8000ac8 <__aeabi_dcmpeq>
 80089dc:	4680      	mov	r8, r0
 80089de:	b158      	cbz	r0, 80089f8 <_dtoa_r+0xe8>
 80089e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089e2:	2301      	movs	r3, #1
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 8551 	beq.w	8009490 <_dtoa_r+0xb80>
 80089ee:	488b      	ldr	r0, [pc, #556]	; (8008c1c <_dtoa_r+0x30c>)
 80089f0:	6018      	str	r0, [r3, #0]
 80089f2:	1e43      	subs	r3, r0, #1
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	e7dd      	b.n	80089b4 <_dtoa_r+0xa4>
 80089f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80089fc:	aa12      	add	r2, sp, #72	; 0x48
 80089fe:	a913      	add	r1, sp, #76	; 0x4c
 8008a00:	4620      	mov	r0, r4
 8008a02:	f001 fcf5 	bl	800a3f0 <__d2b>
 8008a06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a0a:	4683      	mov	fp, r0
 8008a0c:	2d00      	cmp	r5, #0
 8008a0e:	d07c      	beq.n	8008b0a <_dtoa_r+0x1fa>
 8008a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008a1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008a22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008a26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a2a:	4b7d      	ldr	r3, [pc, #500]	; (8008c20 <_dtoa_r+0x310>)
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4630      	mov	r0, r6
 8008a30:	4639      	mov	r1, r7
 8008a32:	f7f7 fc29 	bl	8000288 <__aeabi_dsub>
 8008a36:	a36e      	add	r3, pc, #440	; (adr r3, 8008bf0 <_dtoa_r+0x2e0>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	f7f7 fddc 	bl	80005f8 <__aeabi_dmul>
 8008a40:	a36d      	add	r3, pc, #436	; (adr r3, 8008bf8 <_dtoa_r+0x2e8>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f7f7 fc21 	bl	800028c <__adddf3>
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	460f      	mov	r7, r1
 8008a50:	f7f7 fd68 	bl	8000524 <__aeabi_i2d>
 8008a54:	a36a      	add	r3, pc, #424	; (adr r3, 8008c00 <_dtoa_r+0x2f0>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	f7f7 fdcd 	bl	80005f8 <__aeabi_dmul>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4630      	mov	r0, r6
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f7 fc11 	bl	800028c <__adddf3>
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	460f      	mov	r7, r1
 8008a6e:	f7f8 f873 	bl	8000b58 <__aeabi_d2iz>
 8008a72:	2200      	movs	r2, #0
 8008a74:	4682      	mov	sl, r0
 8008a76:	2300      	movs	r3, #0
 8008a78:	4630      	mov	r0, r6
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	f7f8 f82e 	bl	8000adc <__aeabi_dcmplt>
 8008a80:	b148      	cbz	r0, 8008a96 <_dtoa_r+0x186>
 8008a82:	4650      	mov	r0, sl
 8008a84:	f7f7 fd4e 	bl	8000524 <__aeabi_i2d>
 8008a88:	4632      	mov	r2, r6
 8008a8a:	463b      	mov	r3, r7
 8008a8c:	f7f8 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a90:	b908      	cbnz	r0, 8008a96 <_dtoa_r+0x186>
 8008a92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a96:	f1ba 0f16 	cmp.w	sl, #22
 8008a9a:	d854      	bhi.n	8008b46 <_dtoa_r+0x236>
 8008a9c:	4b61      	ldr	r3, [pc, #388]	; (8008c24 <_dtoa_r+0x314>)
 8008a9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008aaa:	f7f8 f817 	bl	8000adc <__aeabi_dcmplt>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d04b      	beq.n	8008b4a <_dtoa_r+0x23a>
 8008ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	930e      	str	r3, [sp, #56]	; 0x38
 8008aba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008abc:	1b5d      	subs	r5, r3, r5
 8008abe:	1e6b      	subs	r3, r5, #1
 8008ac0:	9304      	str	r3, [sp, #16]
 8008ac2:	bf43      	ittte	mi
 8008ac4:	2300      	movmi	r3, #0
 8008ac6:	f1c5 0801 	rsbmi	r8, r5, #1
 8008aca:	9304      	strmi	r3, [sp, #16]
 8008acc:	f04f 0800 	movpl.w	r8, #0
 8008ad0:	f1ba 0f00 	cmp.w	sl, #0
 8008ad4:	db3b      	blt.n	8008b4e <_dtoa_r+0x23e>
 8008ad6:	9b04      	ldr	r3, [sp, #16]
 8008ad8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008adc:	4453      	add	r3, sl
 8008ade:	9304      	str	r3, [sp, #16]
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9306      	str	r3, [sp, #24]
 8008ae4:	9b05      	ldr	r3, [sp, #20]
 8008ae6:	2b09      	cmp	r3, #9
 8008ae8:	d869      	bhi.n	8008bbe <_dtoa_r+0x2ae>
 8008aea:	2b05      	cmp	r3, #5
 8008aec:	bfc4      	itt	gt
 8008aee:	3b04      	subgt	r3, #4
 8008af0:	9305      	strgt	r3, [sp, #20]
 8008af2:	9b05      	ldr	r3, [sp, #20]
 8008af4:	f1a3 0302 	sub.w	r3, r3, #2
 8008af8:	bfcc      	ite	gt
 8008afa:	2500      	movgt	r5, #0
 8008afc:	2501      	movle	r5, #1
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d869      	bhi.n	8008bd6 <_dtoa_r+0x2c6>
 8008b02:	e8df f003 	tbb	[pc, r3]
 8008b06:	4e2c      	.short	0x4e2c
 8008b08:	5a4c      	.short	0x5a4c
 8008b0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008b0e:	441d      	add	r5, r3
 8008b10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b14:	2b20      	cmp	r3, #32
 8008b16:	bfc1      	itttt	gt
 8008b18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008b20:	fa09 f303 	lslgt.w	r3, r9, r3
 8008b24:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008b28:	bfda      	itte	le
 8008b2a:	f1c3 0320 	rsble	r3, r3, #32
 8008b2e:	fa06 f003 	lslle.w	r0, r6, r3
 8008b32:	4318      	orrgt	r0, r3
 8008b34:	f7f7 fce6 	bl	8000504 <__aeabi_ui2d>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008b40:	3d01      	subs	r5, #1
 8008b42:	9310      	str	r3, [sp, #64]	; 0x40
 8008b44:	e771      	b.n	8008a2a <_dtoa_r+0x11a>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e7b6      	b.n	8008ab8 <_dtoa_r+0x1a8>
 8008b4a:	900e      	str	r0, [sp, #56]	; 0x38
 8008b4c:	e7b5      	b.n	8008aba <_dtoa_r+0x1aa>
 8008b4e:	f1ca 0300 	rsb	r3, sl, #0
 8008b52:	9306      	str	r3, [sp, #24]
 8008b54:	2300      	movs	r3, #0
 8008b56:	eba8 080a 	sub.w	r8, r8, sl
 8008b5a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b5c:	e7c2      	b.n	8008ae4 <_dtoa_r+0x1d4>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	9308      	str	r3, [sp, #32]
 8008b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	dc39      	bgt.n	8008bdc <_dtoa_r+0x2cc>
 8008b68:	f04f 0901 	mov.w	r9, #1
 8008b6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b70:	464b      	mov	r3, r9
 8008b72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008b76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b78:	2200      	movs	r2, #0
 8008b7a:	6042      	str	r2, [r0, #4]
 8008b7c:	2204      	movs	r2, #4
 8008b7e:	f102 0614 	add.w	r6, r2, #20
 8008b82:	429e      	cmp	r6, r3
 8008b84:	6841      	ldr	r1, [r0, #4]
 8008b86:	d92f      	bls.n	8008be8 <_dtoa_r+0x2d8>
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f001 f849 	bl	8009c20 <_Balloc>
 8008b8e:	9000      	str	r0, [sp, #0]
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d14b      	bne.n	8008c2c <_dtoa_r+0x31c>
 8008b94:	4b24      	ldr	r3, [pc, #144]	; (8008c28 <_dtoa_r+0x318>)
 8008b96:	4602      	mov	r2, r0
 8008b98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b9c:	e6d1      	b.n	8008942 <_dtoa_r+0x32>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e7de      	b.n	8008b60 <_dtoa_r+0x250>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	9308      	str	r3, [sp, #32]
 8008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba8:	eb0a 0903 	add.w	r9, sl, r3
 8008bac:	f109 0301 	add.w	r3, r9, #1
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	bfb8      	it	lt
 8008bb6:	2301      	movlt	r3, #1
 8008bb8:	e7dd      	b.n	8008b76 <_dtoa_r+0x266>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e7f2      	b.n	8008ba4 <_dtoa_r+0x294>
 8008bbe:	2501      	movs	r5, #1
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9305      	str	r3, [sp, #20]
 8008bc4:	9508      	str	r5, [sp, #32]
 8008bc6:	f04f 39ff 	mov.w	r9, #4294967295
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bd0:	2312      	movs	r3, #18
 8008bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd4:	e7cf      	b.n	8008b76 <_dtoa_r+0x266>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	9308      	str	r3, [sp, #32]
 8008bda:	e7f4      	b.n	8008bc6 <_dtoa_r+0x2b6>
 8008bdc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008be0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008be4:	464b      	mov	r3, r9
 8008be6:	e7c6      	b.n	8008b76 <_dtoa_r+0x266>
 8008be8:	3101      	adds	r1, #1
 8008bea:	6041      	str	r1, [r0, #4]
 8008bec:	0052      	lsls	r2, r2, #1
 8008bee:	e7c6      	b.n	8008b7e <_dtoa_r+0x26e>
 8008bf0:	636f4361 	.word	0x636f4361
 8008bf4:	3fd287a7 	.word	0x3fd287a7
 8008bf8:	8b60c8b3 	.word	0x8b60c8b3
 8008bfc:	3fc68a28 	.word	0x3fc68a28
 8008c00:	509f79fb 	.word	0x509f79fb
 8008c04:	3fd34413 	.word	0x3fd34413
 8008c08:	0800c856 	.word	0x0800c856
 8008c0c:	0800c86d 	.word	0x0800c86d
 8008c10:	7ff00000 	.word	0x7ff00000
 8008c14:	0800c852 	.word	0x0800c852
 8008c18:	0800c849 	.word	0x0800c849
 8008c1c:	0800c6cd 	.word	0x0800c6cd
 8008c20:	3ff80000 	.word	0x3ff80000
 8008c24:	0800c9e8 	.word	0x0800c9e8
 8008c28:	0800c8cc 	.word	0x0800c8cc
 8008c2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c2e:	9a00      	ldr	r2, [sp, #0]
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	9b01      	ldr	r3, [sp, #4]
 8008c34:	2b0e      	cmp	r3, #14
 8008c36:	f200 80ad 	bhi.w	8008d94 <_dtoa_r+0x484>
 8008c3a:	2d00      	cmp	r5, #0
 8008c3c:	f000 80aa 	beq.w	8008d94 <_dtoa_r+0x484>
 8008c40:	f1ba 0f00 	cmp.w	sl, #0
 8008c44:	dd36      	ble.n	8008cb4 <_dtoa_r+0x3a4>
 8008c46:	4ac3      	ldr	r2, [pc, #780]	; (8008f54 <_dtoa_r+0x644>)
 8008c48:	f00a 030f 	and.w	r3, sl, #15
 8008c4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c50:	ed93 7b00 	vldr	d7, [r3]
 8008c54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008c58:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008c5c:	eeb0 8a47 	vmov.f32	s16, s14
 8008c60:	eef0 8a67 	vmov.f32	s17, s15
 8008c64:	d016      	beq.n	8008c94 <_dtoa_r+0x384>
 8008c66:	4bbc      	ldr	r3, [pc, #752]	; (8008f58 <_dtoa_r+0x648>)
 8008c68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c70:	f7f7 fdec 	bl	800084c <__aeabi_ddiv>
 8008c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c78:	f007 070f 	and.w	r7, r7, #15
 8008c7c:	2503      	movs	r5, #3
 8008c7e:	4eb6      	ldr	r6, [pc, #728]	; (8008f58 <_dtoa_r+0x648>)
 8008c80:	b957      	cbnz	r7, 8008c98 <_dtoa_r+0x388>
 8008c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c86:	ec53 2b18 	vmov	r2, r3, d8
 8008c8a:	f7f7 fddf 	bl	800084c <__aeabi_ddiv>
 8008c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c92:	e029      	b.n	8008ce8 <_dtoa_r+0x3d8>
 8008c94:	2502      	movs	r5, #2
 8008c96:	e7f2      	b.n	8008c7e <_dtoa_r+0x36e>
 8008c98:	07f9      	lsls	r1, r7, #31
 8008c9a:	d508      	bpl.n	8008cae <_dtoa_r+0x39e>
 8008c9c:	ec51 0b18 	vmov	r0, r1, d8
 8008ca0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ca4:	f7f7 fca8 	bl	80005f8 <__aeabi_dmul>
 8008ca8:	ec41 0b18 	vmov	d8, r0, r1
 8008cac:	3501      	adds	r5, #1
 8008cae:	107f      	asrs	r7, r7, #1
 8008cb0:	3608      	adds	r6, #8
 8008cb2:	e7e5      	b.n	8008c80 <_dtoa_r+0x370>
 8008cb4:	f000 80a6 	beq.w	8008e04 <_dtoa_r+0x4f4>
 8008cb8:	f1ca 0600 	rsb	r6, sl, #0
 8008cbc:	4ba5      	ldr	r3, [pc, #660]	; (8008f54 <_dtoa_r+0x644>)
 8008cbe:	4fa6      	ldr	r7, [pc, #664]	; (8008f58 <_dtoa_r+0x648>)
 8008cc0:	f006 020f 	and.w	r2, r6, #15
 8008cc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cd0:	f7f7 fc92 	bl	80005f8 <__aeabi_dmul>
 8008cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cd8:	1136      	asrs	r6, r6, #4
 8008cda:	2300      	movs	r3, #0
 8008cdc:	2502      	movs	r5, #2
 8008cde:	2e00      	cmp	r6, #0
 8008ce0:	f040 8085 	bne.w	8008dee <_dtoa_r+0x4de>
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1d2      	bne.n	8008c8e <_dtoa_r+0x37e>
 8008ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 808c 	beq.w	8008e08 <_dtoa_r+0x4f8>
 8008cf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008cf4:	4b99      	ldr	r3, [pc, #612]	; (8008f5c <_dtoa_r+0x64c>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 feee 	bl	8000adc <__aeabi_dcmplt>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	f000 8081 	beq.w	8008e08 <_dtoa_r+0x4f8>
 8008d06:	9b01      	ldr	r3, [sp, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d07d      	beq.n	8008e08 <_dtoa_r+0x4f8>
 8008d0c:	f1b9 0f00 	cmp.w	r9, #0
 8008d10:	dd3c      	ble.n	8008d8c <_dtoa_r+0x47c>
 8008d12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d16:	9307      	str	r3, [sp, #28]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4b91      	ldr	r3, [pc, #580]	; (8008f60 <_dtoa_r+0x650>)
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	4639      	mov	r1, r7
 8008d20:	f7f7 fc6a 	bl	80005f8 <__aeabi_dmul>
 8008d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d28:	3501      	adds	r5, #1
 8008d2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008d2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d32:	4628      	mov	r0, r5
 8008d34:	f7f7 fbf6 	bl	8000524 <__aeabi_i2d>
 8008d38:	4632      	mov	r2, r6
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	f7f7 fc5c 	bl	80005f8 <__aeabi_dmul>
 8008d40:	4b88      	ldr	r3, [pc, #544]	; (8008f64 <_dtoa_r+0x654>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	f7f7 faa2 	bl	800028c <__adddf3>
 8008d48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d50:	9303      	str	r3, [sp, #12]
 8008d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d15c      	bne.n	8008e12 <_dtoa_r+0x502>
 8008d58:	4b83      	ldr	r3, [pc, #524]	; (8008f68 <_dtoa_r+0x658>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	4639      	mov	r1, r7
 8008d60:	f7f7 fa92 	bl	8000288 <__aeabi_dsub>
 8008d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d68:	4606      	mov	r6, r0
 8008d6a:	460f      	mov	r7, r1
 8008d6c:	f7f7 fed4 	bl	8000b18 <__aeabi_dcmpgt>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	f040 8296 	bne.w	80092a2 <_dtoa_r+0x992>
 8008d76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d80:	4639      	mov	r1, r7
 8008d82:	f7f7 feab 	bl	8000adc <__aeabi_dcmplt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f040 8288 	bne.w	800929c <_dtoa_r+0x98c>
 8008d8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f2c0 8158 	blt.w	800904c <_dtoa_r+0x73c>
 8008d9c:	f1ba 0f0e 	cmp.w	sl, #14
 8008da0:	f300 8154 	bgt.w	800904c <_dtoa_r+0x73c>
 8008da4:	4b6b      	ldr	r3, [pc, #428]	; (8008f54 <_dtoa_r+0x644>)
 8008da6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008daa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f280 80e3 	bge.w	8008f7c <_dtoa_r+0x66c>
 8008db6:	9b01      	ldr	r3, [sp, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f300 80df 	bgt.w	8008f7c <_dtoa_r+0x66c>
 8008dbe:	f040 826d 	bne.w	800929c <_dtoa_r+0x98c>
 8008dc2:	4b69      	ldr	r3, [pc, #420]	; (8008f68 <_dtoa_r+0x658>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	4649      	mov	r1, r9
 8008dca:	f7f7 fc15 	bl	80005f8 <__aeabi_dmul>
 8008dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dd2:	f7f7 fe97 	bl	8000b04 <__aeabi_dcmpge>
 8008dd6:	9e01      	ldr	r6, [sp, #4]
 8008dd8:	4637      	mov	r7, r6
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	f040 8243 	bne.w	8009266 <_dtoa_r+0x956>
 8008de0:	9d00      	ldr	r5, [sp, #0]
 8008de2:	2331      	movs	r3, #49	; 0x31
 8008de4:	f805 3b01 	strb.w	r3, [r5], #1
 8008de8:	f10a 0a01 	add.w	sl, sl, #1
 8008dec:	e23f      	b.n	800926e <_dtoa_r+0x95e>
 8008dee:	07f2      	lsls	r2, r6, #31
 8008df0:	d505      	bpl.n	8008dfe <_dtoa_r+0x4ee>
 8008df2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008df6:	f7f7 fbff 	bl	80005f8 <__aeabi_dmul>
 8008dfa:	3501      	adds	r5, #1
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	1076      	asrs	r6, r6, #1
 8008e00:	3708      	adds	r7, #8
 8008e02:	e76c      	b.n	8008cde <_dtoa_r+0x3ce>
 8008e04:	2502      	movs	r5, #2
 8008e06:	e76f      	b.n	8008ce8 <_dtoa_r+0x3d8>
 8008e08:	9b01      	ldr	r3, [sp, #4]
 8008e0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e0e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e10:	e78d      	b.n	8008d2e <_dtoa_r+0x41e>
 8008e12:	9900      	ldr	r1, [sp, #0]
 8008e14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e18:	4b4e      	ldr	r3, [pc, #312]	; (8008f54 <_dtoa_r+0x644>)
 8008e1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e1e:	4401      	add	r1, r0
 8008e20:	9102      	str	r1, [sp, #8]
 8008e22:	9908      	ldr	r1, [sp, #32]
 8008e24:	eeb0 8a47 	vmov.f32	s16, s14
 8008e28:	eef0 8a67 	vmov.f32	s17, s15
 8008e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e34:	2900      	cmp	r1, #0
 8008e36:	d045      	beq.n	8008ec4 <_dtoa_r+0x5b4>
 8008e38:	494c      	ldr	r1, [pc, #304]	; (8008f6c <_dtoa_r+0x65c>)
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	f7f7 fd06 	bl	800084c <__aeabi_ddiv>
 8008e40:	ec53 2b18 	vmov	r2, r3, d8
 8008e44:	f7f7 fa20 	bl	8000288 <__aeabi_dsub>
 8008e48:	9d00      	ldr	r5, [sp, #0]
 8008e4a:	ec41 0b18 	vmov	d8, r0, r1
 8008e4e:	4639      	mov	r1, r7
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7f7 fe81 	bl	8000b58 <__aeabi_d2iz>
 8008e56:	900c      	str	r0, [sp, #48]	; 0x30
 8008e58:	f7f7 fb64 	bl	8000524 <__aeabi_i2d>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4630      	mov	r0, r6
 8008e62:	4639      	mov	r1, r7
 8008e64:	f7f7 fa10 	bl	8000288 <__aeabi_dsub>
 8008e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e6a:	3330      	adds	r3, #48	; 0x30
 8008e6c:	f805 3b01 	strb.w	r3, [r5], #1
 8008e70:	ec53 2b18 	vmov	r2, r3, d8
 8008e74:	4606      	mov	r6, r0
 8008e76:	460f      	mov	r7, r1
 8008e78:	f7f7 fe30 	bl	8000adc <__aeabi_dcmplt>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d165      	bne.n	8008f4c <_dtoa_r+0x63c>
 8008e80:	4632      	mov	r2, r6
 8008e82:	463b      	mov	r3, r7
 8008e84:	4935      	ldr	r1, [pc, #212]	; (8008f5c <_dtoa_r+0x64c>)
 8008e86:	2000      	movs	r0, #0
 8008e88:	f7f7 f9fe 	bl	8000288 <__aeabi_dsub>
 8008e8c:	ec53 2b18 	vmov	r2, r3, d8
 8008e90:	f7f7 fe24 	bl	8000adc <__aeabi_dcmplt>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	f040 80b9 	bne.w	800900c <_dtoa_r+0x6fc>
 8008e9a:	9b02      	ldr	r3, [sp, #8]
 8008e9c:	429d      	cmp	r5, r3
 8008e9e:	f43f af75 	beq.w	8008d8c <_dtoa_r+0x47c>
 8008ea2:	4b2f      	ldr	r3, [pc, #188]	; (8008f60 <_dtoa_r+0x650>)
 8008ea4:	ec51 0b18 	vmov	r0, r1, d8
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f7f7 fba5 	bl	80005f8 <__aeabi_dmul>
 8008eae:	4b2c      	ldr	r3, [pc, #176]	; (8008f60 <_dtoa_r+0x650>)
 8008eb0:	ec41 0b18 	vmov	d8, r0, r1
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	4639      	mov	r1, r7
 8008eba:	f7f7 fb9d 	bl	80005f8 <__aeabi_dmul>
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	e7c4      	b.n	8008e4e <_dtoa_r+0x53e>
 8008ec4:	ec51 0b17 	vmov	r0, r1, d7
 8008ec8:	f7f7 fb96 	bl	80005f8 <__aeabi_dmul>
 8008ecc:	9b02      	ldr	r3, [sp, #8]
 8008ece:	9d00      	ldr	r5, [sp, #0]
 8008ed0:	930c      	str	r3, [sp, #48]	; 0x30
 8008ed2:	ec41 0b18 	vmov	d8, r0, r1
 8008ed6:	4639      	mov	r1, r7
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7f7 fe3d 	bl	8000b58 <__aeabi_d2iz>
 8008ede:	9011      	str	r0, [sp, #68]	; 0x44
 8008ee0:	f7f7 fb20 	bl	8000524 <__aeabi_i2d>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4639      	mov	r1, r7
 8008eec:	f7f7 f9cc 	bl	8000288 <__aeabi_dsub>
 8008ef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ef2:	3330      	adds	r3, #48	; 0x30
 8008ef4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	429d      	cmp	r5, r3
 8008efc:	4606      	mov	r6, r0
 8008efe:	460f      	mov	r7, r1
 8008f00:	f04f 0200 	mov.w	r2, #0
 8008f04:	d134      	bne.n	8008f70 <_dtoa_r+0x660>
 8008f06:	4b19      	ldr	r3, [pc, #100]	; (8008f6c <_dtoa_r+0x65c>)
 8008f08:	ec51 0b18 	vmov	r0, r1, d8
 8008f0c:	f7f7 f9be 	bl	800028c <__adddf3>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4630      	mov	r0, r6
 8008f16:	4639      	mov	r1, r7
 8008f18:	f7f7 fdfe 	bl	8000b18 <__aeabi_dcmpgt>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d175      	bne.n	800900c <_dtoa_r+0x6fc>
 8008f20:	ec53 2b18 	vmov	r2, r3, d8
 8008f24:	4911      	ldr	r1, [pc, #68]	; (8008f6c <_dtoa_r+0x65c>)
 8008f26:	2000      	movs	r0, #0
 8008f28:	f7f7 f9ae 	bl	8000288 <__aeabi_dsub>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4630      	mov	r0, r6
 8008f32:	4639      	mov	r1, r7
 8008f34:	f7f7 fdd2 	bl	8000adc <__aeabi_dcmplt>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	f43f af27 	beq.w	8008d8c <_dtoa_r+0x47c>
 8008f3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f40:	1e6b      	subs	r3, r5, #1
 8008f42:	930c      	str	r3, [sp, #48]	; 0x30
 8008f44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f48:	2b30      	cmp	r3, #48	; 0x30
 8008f4a:	d0f8      	beq.n	8008f3e <_dtoa_r+0x62e>
 8008f4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008f50:	e04a      	b.n	8008fe8 <_dtoa_r+0x6d8>
 8008f52:	bf00      	nop
 8008f54:	0800c9e8 	.word	0x0800c9e8
 8008f58:	0800c9c0 	.word	0x0800c9c0
 8008f5c:	3ff00000 	.word	0x3ff00000
 8008f60:	40240000 	.word	0x40240000
 8008f64:	401c0000 	.word	0x401c0000
 8008f68:	40140000 	.word	0x40140000
 8008f6c:	3fe00000 	.word	0x3fe00000
 8008f70:	4baf      	ldr	r3, [pc, #700]	; (8009230 <_dtoa_r+0x920>)
 8008f72:	f7f7 fb41 	bl	80005f8 <__aeabi_dmul>
 8008f76:	4606      	mov	r6, r0
 8008f78:	460f      	mov	r7, r1
 8008f7a:	e7ac      	b.n	8008ed6 <_dtoa_r+0x5c6>
 8008f7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f80:	9d00      	ldr	r5, [sp, #0]
 8008f82:	4642      	mov	r2, r8
 8008f84:	464b      	mov	r3, r9
 8008f86:	4630      	mov	r0, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	f7f7 fc5f 	bl	800084c <__aeabi_ddiv>
 8008f8e:	f7f7 fde3 	bl	8000b58 <__aeabi_d2iz>
 8008f92:	9002      	str	r0, [sp, #8]
 8008f94:	f7f7 fac6 	bl	8000524 <__aeabi_i2d>
 8008f98:	4642      	mov	r2, r8
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	f7f7 fb2c 	bl	80005f8 <__aeabi_dmul>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	f7f7 f96e 	bl	8000288 <__aeabi_dsub>
 8008fac:	9e02      	ldr	r6, [sp, #8]
 8008fae:	9f01      	ldr	r7, [sp, #4]
 8008fb0:	3630      	adds	r6, #48	; 0x30
 8008fb2:	f805 6b01 	strb.w	r6, [r5], #1
 8008fb6:	9e00      	ldr	r6, [sp, #0]
 8008fb8:	1bae      	subs	r6, r5, r6
 8008fba:	42b7      	cmp	r7, r6
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	d137      	bne.n	8009032 <_dtoa_r+0x722>
 8008fc2:	f7f7 f963 	bl	800028c <__adddf3>
 8008fc6:	4642      	mov	r2, r8
 8008fc8:	464b      	mov	r3, r9
 8008fca:	4606      	mov	r6, r0
 8008fcc:	460f      	mov	r7, r1
 8008fce:	f7f7 fda3 	bl	8000b18 <__aeabi_dcmpgt>
 8008fd2:	b9c8      	cbnz	r0, 8009008 <_dtoa_r+0x6f8>
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	4630      	mov	r0, r6
 8008fda:	4639      	mov	r1, r7
 8008fdc:	f7f7 fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fe0:	b110      	cbz	r0, 8008fe8 <_dtoa_r+0x6d8>
 8008fe2:	9b02      	ldr	r3, [sp, #8]
 8008fe4:	07d9      	lsls	r1, r3, #31
 8008fe6:	d40f      	bmi.n	8009008 <_dtoa_r+0x6f8>
 8008fe8:	4620      	mov	r0, r4
 8008fea:	4659      	mov	r1, fp
 8008fec:	f000 fe58 	bl	8009ca0 <_Bfree>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	702b      	strb	r3, [r5, #0]
 8008ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ff6:	f10a 0001 	add.w	r0, sl, #1
 8008ffa:	6018      	str	r0, [r3, #0]
 8008ffc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f43f acd8 	beq.w	80089b4 <_dtoa_r+0xa4>
 8009004:	601d      	str	r5, [r3, #0]
 8009006:	e4d5      	b.n	80089b4 <_dtoa_r+0xa4>
 8009008:	f8cd a01c 	str.w	sl, [sp, #28]
 800900c:	462b      	mov	r3, r5
 800900e:	461d      	mov	r5, r3
 8009010:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009014:	2a39      	cmp	r2, #57	; 0x39
 8009016:	d108      	bne.n	800902a <_dtoa_r+0x71a>
 8009018:	9a00      	ldr	r2, [sp, #0]
 800901a:	429a      	cmp	r2, r3
 800901c:	d1f7      	bne.n	800900e <_dtoa_r+0x6fe>
 800901e:	9a07      	ldr	r2, [sp, #28]
 8009020:	9900      	ldr	r1, [sp, #0]
 8009022:	3201      	adds	r2, #1
 8009024:	9207      	str	r2, [sp, #28]
 8009026:	2230      	movs	r2, #48	; 0x30
 8009028:	700a      	strb	r2, [r1, #0]
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	3201      	adds	r2, #1
 800902e:	701a      	strb	r2, [r3, #0]
 8009030:	e78c      	b.n	8008f4c <_dtoa_r+0x63c>
 8009032:	4b7f      	ldr	r3, [pc, #508]	; (8009230 <_dtoa_r+0x920>)
 8009034:	2200      	movs	r2, #0
 8009036:	f7f7 fadf 	bl	80005f8 <__aeabi_dmul>
 800903a:	2200      	movs	r2, #0
 800903c:	2300      	movs	r3, #0
 800903e:	4606      	mov	r6, r0
 8009040:	460f      	mov	r7, r1
 8009042:	f7f7 fd41 	bl	8000ac8 <__aeabi_dcmpeq>
 8009046:	2800      	cmp	r0, #0
 8009048:	d09b      	beq.n	8008f82 <_dtoa_r+0x672>
 800904a:	e7cd      	b.n	8008fe8 <_dtoa_r+0x6d8>
 800904c:	9a08      	ldr	r2, [sp, #32]
 800904e:	2a00      	cmp	r2, #0
 8009050:	f000 80c4 	beq.w	80091dc <_dtoa_r+0x8cc>
 8009054:	9a05      	ldr	r2, [sp, #20]
 8009056:	2a01      	cmp	r2, #1
 8009058:	f300 80a8 	bgt.w	80091ac <_dtoa_r+0x89c>
 800905c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800905e:	2a00      	cmp	r2, #0
 8009060:	f000 80a0 	beq.w	80091a4 <_dtoa_r+0x894>
 8009064:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009068:	9e06      	ldr	r6, [sp, #24]
 800906a:	4645      	mov	r5, r8
 800906c:	9a04      	ldr	r2, [sp, #16]
 800906e:	2101      	movs	r1, #1
 8009070:	441a      	add	r2, r3
 8009072:	4620      	mov	r0, r4
 8009074:	4498      	add	r8, r3
 8009076:	9204      	str	r2, [sp, #16]
 8009078:	f000 ff18 	bl	8009eac <__i2b>
 800907c:	4607      	mov	r7, r0
 800907e:	2d00      	cmp	r5, #0
 8009080:	dd0b      	ble.n	800909a <_dtoa_r+0x78a>
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	dd08      	ble.n	800909a <_dtoa_r+0x78a>
 8009088:	42ab      	cmp	r3, r5
 800908a:	9a04      	ldr	r2, [sp, #16]
 800908c:	bfa8      	it	ge
 800908e:	462b      	movge	r3, r5
 8009090:	eba8 0803 	sub.w	r8, r8, r3
 8009094:	1aed      	subs	r5, r5, r3
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	9b06      	ldr	r3, [sp, #24]
 800909c:	b1fb      	cbz	r3, 80090de <_dtoa_r+0x7ce>
 800909e:	9b08      	ldr	r3, [sp, #32]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 809f 	beq.w	80091e4 <_dtoa_r+0x8d4>
 80090a6:	2e00      	cmp	r6, #0
 80090a8:	dd11      	ble.n	80090ce <_dtoa_r+0x7be>
 80090aa:	4639      	mov	r1, r7
 80090ac:	4632      	mov	r2, r6
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 ffb8 	bl	800a024 <__pow5mult>
 80090b4:	465a      	mov	r2, fp
 80090b6:	4601      	mov	r1, r0
 80090b8:	4607      	mov	r7, r0
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 ff0c 	bl	8009ed8 <__multiply>
 80090c0:	4659      	mov	r1, fp
 80090c2:	9007      	str	r0, [sp, #28]
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 fdeb 	bl	8009ca0 <_Bfree>
 80090ca:	9b07      	ldr	r3, [sp, #28]
 80090cc:	469b      	mov	fp, r3
 80090ce:	9b06      	ldr	r3, [sp, #24]
 80090d0:	1b9a      	subs	r2, r3, r6
 80090d2:	d004      	beq.n	80090de <_dtoa_r+0x7ce>
 80090d4:	4659      	mov	r1, fp
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 ffa4 	bl	800a024 <__pow5mult>
 80090dc:	4683      	mov	fp, r0
 80090de:	2101      	movs	r1, #1
 80090e0:	4620      	mov	r0, r4
 80090e2:	f000 fee3 	bl	8009eac <__i2b>
 80090e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	4606      	mov	r6, r0
 80090ec:	dd7c      	ble.n	80091e8 <_dtoa_r+0x8d8>
 80090ee:	461a      	mov	r2, r3
 80090f0:	4601      	mov	r1, r0
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 ff96 	bl	800a024 <__pow5mult>
 80090f8:	9b05      	ldr	r3, [sp, #20]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	4606      	mov	r6, r0
 80090fe:	dd76      	ble.n	80091ee <_dtoa_r+0x8de>
 8009100:	2300      	movs	r3, #0
 8009102:	9306      	str	r3, [sp, #24]
 8009104:	6933      	ldr	r3, [r6, #16]
 8009106:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800910a:	6918      	ldr	r0, [r3, #16]
 800910c:	f000 fe7e 	bl	8009e0c <__hi0bits>
 8009110:	f1c0 0020 	rsb	r0, r0, #32
 8009114:	9b04      	ldr	r3, [sp, #16]
 8009116:	4418      	add	r0, r3
 8009118:	f010 001f 	ands.w	r0, r0, #31
 800911c:	f000 8086 	beq.w	800922c <_dtoa_r+0x91c>
 8009120:	f1c0 0320 	rsb	r3, r0, #32
 8009124:	2b04      	cmp	r3, #4
 8009126:	dd7f      	ble.n	8009228 <_dtoa_r+0x918>
 8009128:	f1c0 001c 	rsb	r0, r0, #28
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	4403      	add	r3, r0
 8009130:	4480      	add	r8, r0
 8009132:	4405      	add	r5, r0
 8009134:	9304      	str	r3, [sp, #16]
 8009136:	f1b8 0f00 	cmp.w	r8, #0
 800913a:	dd05      	ble.n	8009148 <_dtoa_r+0x838>
 800913c:	4659      	mov	r1, fp
 800913e:	4642      	mov	r2, r8
 8009140:	4620      	mov	r0, r4
 8009142:	f000 ffc9 	bl	800a0d8 <__lshift>
 8009146:	4683      	mov	fp, r0
 8009148:	9b04      	ldr	r3, [sp, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	dd05      	ble.n	800915a <_dtoa_r+0x84a>
 800914e:	4631      	mov	r1, r6
 8009150:	461a      	mov	r2, r3
 8009152:	4620      	mov	r0, r4
 8009154:	f000 ffc0 	bl	800a0d8 <__lshift>
 8009158:	4606      	mov	r6, r0
 800915a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800915c:	2b00      	cmp	r3, #0
 800915e:	d069      	beq.n	8009234 <_dtoa_r+0x924>
 8009160:	4631      	mov	r1, r6
 8009162:	4658      	mov	r0, fp
 8009164:	f001 f824 	bl	800a1b0 <__mcmp>
 8009168:	2800      	cmp	r0, #0
 800916a:	da63      	bge.n	8009234 <_dtoa_r+0x924>
 800916c:	2300      	movs	r3, #0
 800916e:	4659      	mov	r1, fp
 8009170:	220a      	movs	r2, #10
 8009172:	4620      	mov	r0, r4
 8009174:	f000 fdb6 	bl	8009ce4 <__multadd>
 8009178:	9b08      	ldr	r3, [sp, #32]
 800917a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800917e:	4683      	mov	fp, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 818f 	beq.w	80094a4 <_dtoa_r+0xb94>
 8009186:	4639      	mov	r1, r7
 8009188:	2300      	movs	r3, #0
 800918a:	220a      	movs	r2, #10
 800918c:	4620      	mov	r0, r4
 800918e:	f000 fda9 	bl	8009ce4 <__multadd>
 8009192:	f1b9 0f00 	cmp.w	r9, #0
 8009196:	4607      	mov	r7, r0
 8009198:	f300 808e 	bgt.w	80092b8 <_dtoa_r+0x9a8>
 800919c:	9b05      	ldr	r3, [sp, #20]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	dc50      	bgt.n	8009244 <_dtoa_r+0x934>
 80091a2:	e089      	b.n	80092b8 <_dtoa_r+0x9a8>
 80091a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091aa:	e75d      	b.n	8009068 <_dtoa_r+0x758>
 80091ac:	9b01      	ldr	r3, [sp, #4]
 80091ae:	1e5e      	subs	r6, r3, #1
 80091b0:	9b06      	ldr	r3, [sp, #24]
 80091b2:	42b3      	cmp	r3, r6
 80091b4:	bfbf      	itttt	lt
 80091b6:	9b06      	ldrlt	r3, [sp, #24]
 80091b8:	9606      	strlt	r6, [sp, #24]
 80091ba:	1af2      	sublt	r2, r6, r3
 80091bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80091be:	bfb6      	itet	lt
 80091c0:	189b      	addlt	r3, r3, r2
 80091c2:	1b9e      	subge	r6, r3, r6
 80091c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80091c6:	9b01      	ldr	r3, [sp, #4]
 80091c8:	bfb8      	it	lt
 80091ca:	2600      	movlt	r6, #0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bfb5      	itete	lt
 80091d0:	eba8 0503 	sublt.w	r5, r8, r3
 80091d4:	9b01      	ldrge	r3, [sp, #4]
 80091d6:	2300      	movlt	r3, #0
 80091d8:	4645      	movge	r5, r8
 80091da:	e747      	b.n	800906c <_dtoa_r+0x75c>
 80091dc:	9e06      	ldr	r6, [sp, #24]
 80091de:	9f08      	ldr	r7, [sp, #32]
 80091e0:	4645      	mov	r5, r8
 80091e2:	e74c      	b.n	800907e <_dtoa_r+0x76e>
 80091e4:	9a06      	ldr	r2, [sp, #24]
 80091e6:	e775      	b.n	80090d4 <_dtoa_r+0x7c4>
 80091e8:	9b05      	ldr	r3, [sp, #20]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	dc18      	bgt.n	8009220 <_dtoa_r+0x910>
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	b9b3      	cbnz	r3, 8009220 <_dtoa_r+0x910>
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091f8:	b9a3      	cbnz	r3, 8009224 <_dtoa_r+0x914>
 80091fa:	9b03      	ldr	r3, [sp, #12]
 80091fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009200:	0d1b      	lsrs	r3, r3, #20
 8009202:	051b      	lsls	r3, r3, #20
 8009204:	b12b      	cbz	r3, 8009212 <_dtoa_r+0x902>
 8009206:	9b04      	ldr	r3, [sp, #16]
 8009208:	3301      	adds	r3, #1
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	f108 0801 	add.w	r8, r8, #1
 8009210:	2301      	movs	r3, #1
 8009212:	9306      	str	r3, [sp, #24]
 8009214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009216:	2b00      	cmp	r3, #0
 8009218:	f47f af74 	bne.w	8009104 <_dtoa_r+0x7f4>
 800921c:	2001      	movs	r0, #1
 800921e:	e779      	b.n	8009114 <_dtoa_r+0x804>
 8009220:	2300      	movs	r3, #0
 8009222:	e7f6      	b.n	8009212 <_dtoa_r+0x902>
 8009224:	9b02      	ldr	r3, [sp, #8]
 8009226:	e7f4      	b.n	8009212 <_dtoa_r+0x902>
 8009228:	d085      	beq.n	8009136 <_dtoa_r+0x826>
 800922a:	4618      	mov	r0, r3
 800922c:	301c      	adds	r0, #28
 800922e:	e77d      	b.n	800912c <_dtoa_r+0x81c>
 8009230:	40240000 	.word	0x40240000
 8009234:	9b01      	ldr	r3, [sp, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	dc38      	bgt.n	80092ac <_dtoa_r+0x99c>
 800923a:	9b05      	ldr	r3, [sp, #20]
 800923c:	2b02      	cmp	r3, #2
 800923e:	dd35      	ble.n	80092ac <_dtoa_r+0x99c>
 8009240:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009244:	f1b9 0f00 	cmp.w	r9, #0
 8009248:	d10d      	bne.n	8009266 <_dtoa_r+0x956>
 800924a:	4631      	mov	r1, r6
 800924c:	464b      	mov	r3, r9
 800924e:	2205      	movs	r2, #5
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fd47 	bl	8009ce4 <__multadd>
 8009256:	4601      	mov	r1, r0
 8009258:	4606      	mov	r6, r0
 800925a:	4658      	mov	r0, fp
 800925c:	f000 ffa8 	bl	800a1b0 <__mcmp>
 8009260:	2800      	cmp	r0, #0
 8009262:	f73f adbd 	bgt.w	8008de0 <_dtoa_r+0x4d0>
 8009266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009268:	9d00      	ldr	r5, [sp, #0]
 800926a:	ea6f 0a03 	mvn.w	sl, r3
 800926e:	f04f 0800 	mov.w	r8, #0
 8009272:	4631      	mov	r1, r6
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fd13 	bl	8009ca0 <_Bfree>
 800927a:	2f00      	cmp	r7, #0
 800927c:	f43f aeb4 	beq.w	8008fe8 <_dtoa_r+0x6d8>
 8009280:	f1b8 0f00 	cmp.w	r8, #0
 8009284:	d005      	beq.n	8009292 <_dtoa_r+0x982>
 8009286:	45b8      	cmp	r8, r7
 8009288:	d003      	beq.n	8009292 <_dtoa_r+0x982>
 800928a:	4641      	mov	r1, r8
 800928c:	4620      	mov	r0, r4
 800928e:	f000 fd07 	bl	8009ca0 <_Bfree>
 8009292:	4639      	mov	r1, r7
 8009294:	4620      	mov	r0, r4
 8009296:	f000 fd03 	bl	8009ca0 <_Bfree>
 800929a:	e6a5      	b.n	8008fe8 <_dtoa_r+0x6d8>
 800929c:	2600      	movs	r6, #0
 800929e:	4637      	mov	r7, r6
 80092a0:	e7e1      	b.n	8009266 <_dtoa_r+0x956>
 80092a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80092a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80092a8:	4637      	mov	r7, r6
 80092aa:	e599      	b.n	8008de0 <_dtoa_r+0x4d0>
 80092ac:	9b08      	ldr	r3, [sp, #32]
 80092ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 80fd 	beq.w	80094b2 <_dtoa_r+0xba2>
 80092b8:	2d00      	cmp	r5, #0
 80092ba:	dd05      	ble.n	80092c8 <_dtoa_r+0x9b8>
 80092bc:	4639      	mov	r1, r7
 80092be:	462a      	mov	r2, r5
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 ff09 	bl	800a0d8 <__lshift>
 80092c6:	4607      	mov	r7, r0
 80092c8:	9b06      	ldr	r3, [sp, #24]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d05c      	beq.n	8009388 <_dtoa_r+0xa78>
 80092ce:	6879      	ldr	r1, [r7, #4]
 80092d0:	4620      	mov	r0, r4
 80092d2:	f000 fca5 	bl	8009c20 <_Balloc>
 80092d6:	4605      	mov	r5, r0
 80092d8:	b928      	cbnz	r0, 80092e6 <_dtoa_r+0x9d6>
 80092da:	4b80      	ldr	r3, [pc, #512]	; (80094dc <_dtoa_r+0xbcc>)
 80092dc:	4602      	mov	r2, r0
 80092de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80092e2:	f7ff bb2e 	b.w	8008942 <_dtoa_r+0x32>
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	3202      	adds	r2, #2
 80092ea:	0092      	lsls	r2, r2, #2
 80092ec:	f107 010c 	add.w	r1, r7, #12
 80092f0:	300c      	adds	r0, #12
 80092f2:	f000 fc87 	bl	8009c04 <memcpy>
 80092f6:	2201      	movs	r2, #1
 80092f8:	4629      	mov	r1, r5
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 feec 	bl	800a0d8 <__lshift>
 8009300:	9b00      	ldr	r3, [sp, #0]
 8009302:	3301      	adds	r3, #1
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	9b00      	ldr	r3, [sp, #0]
 8009308:	444b      	add	r3, r9
 800930a:	9307      	str	r3, [sp, #28]
 800930c:	9b02      	ldr	r3, [sp, #8]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	46b8      	mov	r8, r7
 8009314:	9306      	str	r3, [sp, #24]
 8009316:	4607      	mov	r7, r0
 8009318:	9b01      	ldr	r3, [sp, #4]
 800931a:	4631      	mov	r1, r6
 800931c:	3b01      	subs	r3, #1
 800931e:	4658      	mov	r0, fp
 8009320:	9302      	str	r3, [sp, #8]
 8009322:	f7ff fa67 	bl	80087f4 <quorem>
 8009326:	4603      	mov	r3, r0
 8009328:	3330      	adds	r3, #48	; 0x30
 800932a:	9004      	str	r0, [sp, #16]
 800932c:	4641      	mov	r1, r8
 800932e:	4658      	mov	r0, fp
 8009330:	9308      	str	r3, [sp, #32]
 8009332:	f000 ff3d 	bl	800a1b0 <__mcmp>
 8009336:	463a      	mov	r2, r7
 8009338:	4681      	mov	r9, r0
 800933a:	4631      	mov	r1, r6
 800933c:	4620      	mov	r0, r4
 800933e:	f000 ff53 	bl	800a1e8 <__mdiff>
 8009342:	68c2      	ldr	r2, [r0, #12]
 8009344:	9b08      	ldr	r3, [sp, #32]
 8009346:	4605      	mov	r5, r0
 8009348:	bb02      	cbnz	r2, 800938c <_dtoa_r+0xa7c>
 800934a:	4601      	mov	r1, r0
 800934c:	4658      	mov	r0, fp
 800934e:	f000 ff2f 	bl	800a1b0 <__mcmp>
 8009352:	9b08      	ldr	r3, [sp, #32]
 8009354:	4602      	mov	r2, r0
 8009356:	4629      	mov	r1, r5
 8009358:	4620      	mov	r0, r4
 800935a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800935e:	f000 fc9f 	bl	8009ca0 <_Bfree>
 8009362:	9b05      	ldr	r3, [sp, #20]
 8009364:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009366:	9d01      	ldr	r5, [sp, #4]
 8009368:	ea43 0102 	orr.w	r1, r3, r2
 800936c:	9b06      	ldr	r3, [sp, #24]
 800936e:	430b      	orrs	r3, r1
 8009370:	9b08      	ldr	r3, [sp, #32]
 8009372:	d10d      	bne.n	8009390 <_dtoa_r+0xa80>
 8009374:	2b39      	cmp	r3, #57	; 0x39
 8009376:	d029      	beq.n	80093cc <_dtoa_r+0xabc>
 8009378:	f1b9 0f00 	cmp.w	r9, #0
 800937c:	dd01      	ble.n	8009382 <_dtoa_r+0xa72>
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	3331      	adds	r3, #49	; 0x31
 8009382:	9a02      	ldr	r2, [sp, #8]
 8009384:	7013      	strb	r3, [r2, #0]
 8009386:	e774      	b.n	8009272 <_dtoa_r+0x962>
 8009388:	4638      	mov	r0, r7
 800938a:	e7b9      	b.n	8009300 <_dtoa_r+0x9f0>
 800938c:	2201      	movs	r2, #1
 800938e:	e7e2      	b.n	8009356 <_dtoa_r+0xa46>
 8009390:	f1b9 0f00 	cmp.w	r9, #0
 8009394:	db06      	blt.n	80093a4 <_dtoa_r+0xa94>
 8009396:	9905      	ldr	r1, [sp, #20]
 8009398:	ea41 0909 	orr.w	r9, r1, r9
 800939c:	9906      	ldr	r1, [sp, #24]
 800939e:	ea59 0101 	orrs.w	r1, r9, r1
 80093a2:	d120      	bne.n	80093e6 <_dtoa_r+0xad6>
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	ddec      	ble.n	8009382 <_dtoa_r+0xa72>
 80093a8:	4659      	mov	r1, fp
 80093aa:	2201      	movs	r2, #1
 80093ac:	4620      	mov	r0, r4
 80093ae:	9301      	str	r3, [sp, #4]
 80093b0:	f000 fe92 	bl	800a0d8 <__lshift>
 80093b4:	4631      	mov	r1, r6
 80093b6:	4683      	mov	fp, r0
 80093b8:	f000 fefa 	bl	800a1b0 <__mcmp>
 80093bc:	2800      	cmp	r0, #0
 80093be:	9b01      	ldr	r3, [sp, #4]
 80093c0:	dc02      	bgt.n	80093c8 <_dtoa_r+0xab8>
 80093c2:	d1de      	bne.n	8009382 <_dtoa_r+0xa72>
 80093c4:	07da      	lsls	r2, r3, #31
 80093c6:	d5dc      	bpl.n	8009382 <_dtoa_r+0xa72>
 80093c8:	2b39      	cmp	r3, #57	; 0x39
 80093ca:	d1d8      	bne.n	800937e <_dtoa_r+0xa6e>
 80093cc:	9a02      	ldr	r2, [sp, #8]
 80093ce:	2339      	movs	r3, #57	; 0x39
 80093d0:	7013      	strb	r3, [r2, #0]
 80093d2:	462b      	mov	r3, r5
 80093d4:	461d      	mov	r5, r3
 80093d6:	3b01      	subs	r3, #1
 80093d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80093dc:	2a39      	cmp	r2, #57	; 0x39
 80093de:	d050      	beq.n	8009482 <_dtoa_r+0xb72>
 80093e0:	3201      	adds	r2, #1
 80093e2:	701a      	strb	r2, [r3, #0]
 80093e4:	e745      	b.n	8009272 <_dtoa_r+0x962>
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	dd03      	ble.n	80093f2 <_dtoa_r+0xae2>
 80093ea:	2b39      	cmp	r3, #57	; 0x39
 80093ec:	d0ee      	beq.n	80093cc <_dtoa_r+0xabc>
 80093ee:	3301      	adds	r3, #1
 80093f0:	e7c7      	b.n	8009382 <_dtoa_r+0xa72>
 80093f2:	9a01      	ldr	r2, [sp, #4]
 80093f4:	9907      	ldr	r1, [sp, #28]
 80093f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093fa:	428a      	cmp	r2, r1
 80093fc:	d02a      	beq.n	8009454 <_dtoa_r+0xb44>
 80093fe:	4659      	mov	r1, fp
 8009400:	2300      	movs	r3, #0
 8009402:	220a      	movs	r2, #10
 8009404:	4620      	mov	r0, r4
 8009406:	f000 fc6d 	bl	8009ce4 <__multadd>
 800940a:	45b8      	cmp	r8, r7
 800940c:	4683      	mov	fp, r0
 800940e:	f04f 0300 	mov.w	r3, #0
 8009412:	f04f 020a 	mov.w	r2, #10
 8009416:	4641      	mov	r1, r8
 8009418:	4620      	mov	r0, r4
 800941a:	d107      	bne.n	800942c <_dtoa_r+0xb1c>
 800941c:	f000 fc62 	bl	8009ce4 <__multadd>
 8009420:	4680      	mov	r8, r0
 8009422:	4607      	mov	r7, r0
 8009424:	9b01      	ldr	r3, [sp, #4]
 8009426:	3301      	adds	r3, #1
 8009428:	9301      	str	r3, [sp, #4]
 800942a:	e775      	b.n	8009318 <_dtoa_r+0xa08>
 800942c:	f000 fc5a 	bl	8009ce4 <__multadd>
 8009430:	4639      	mov	r1, r7
 8009432:	4680      	mov	r8, r0
 8009434:	2300      	movs	r3, #0
 8009436:	220a      	movs	r2, #10
 8009438:	4620      	mov	r0, r4
 800943a:	f000 fc53 	bl	8009ce4 <__multadd>
 800943e:	4607      	mov	r7, r0
 8009440:	e7f0      	b.n	8009424 <_dtoa_r+0xb14>
 8009442:	f1b9 0f00 	cmp.w	r9, #0
 8009446:	9a00      	ldr	r2, [sp, #0]
 8009448:	bfcc      	ite	gt
 800944a:	464d      	movgt	r5, r9
 800944c:	2501      	movle	r5, #1
 800944e:	4415      	add	r5, r2
 8009450:	f04f 0800 	mov.w	r8, #0
 8009454:	4659      	mov	r1, fp
 8009456:	2201      	movs	r2, #1
 8009458:	4620      	mov	r0, r4
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	f000 fe3c 	bl	800a0d8 <__lshift>
 8009460:	4631      	mov	r1, r6
 8009462:	4683      	mov	fp, r0
 8009464:	f000 fea4 	bl	800a1b0 <__mcmp>
 8009468:	2800      	cmp	r0, #0
 800946a:	dcb2      	bgt.n	80093d2 <_dtoa_r+0xac2>
 800946c:	d102      	bne.n	8009474 <_dtoa_r+0xb64>
 800946e:	9b01      	ldr	r3, [sp, #4]
 8009470:	07db      	lsls	r3, r3, #31
 8009472:	d4ae      	bmi.n	80093d2 <_dtoa_r+0xac2>
 8009474:	462b      	mov	r3, r5
 8009476:	461d      	mov	r5, r3
 8009478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800947c:	2a30      	cmp	r2, #48	; 0x30
 800947e:	d0fa      	beq.n	8009476 <_dtoa_r+0xb66>
 8009480:	e6f7      	b.n	8009272 <_dtoa_r+0x962>
 8009482:	9a00      	ldr	r2, [sp, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d1a5      	bne.n	80093d4 <_dtoa_r+0xac4>
 8009488:	f10a 0a01 	add.w	sl, sl, #1
 800948c:	2331      	movs	r3, #49	; 0x31
 800948e:	e779      	b.n	8009384 <_dtoa_r+0xa74>
 8009490:	4b13      	ldr	r3, [pc, #76]	; (80094e0 <_dtoa_r+0xbd0>)
 8009492:	f7ff baaf 	b.w	80089f4 <_dtoa_r+0xe4>
 8009496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009498:	2b00      	cmp	r3, #0
 800949a:	f47f aa86 	bne.w	80089aa <_dtoa_r+0x9a>
 800949e:	4b11      	ldr	r3, [pc, #68]	; (80094e4 <_dtoa_r+0xbd4>)
 80094a0:	f7ff baa8 	b.w	80089f4 <_dtoa_r+0xe4>
 80094a4:	f1b9 0f00 	cmp.w	r9, #0
 80094a8:	dc03      	bgt.n	80094b2 <_dtoa_r+0xba2>
 80094aa:	9b05      	ldr	r3, [sp, #20]
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	f73f aec9 	bgt.w	8009244 <_dtoa_r+0x934>
 80094b2:	9d00      	ldr	r5, [sp, #0]
 80094b4:	4631      	mov	r1, r6
 80094b6:	4658      	mov	r0, fp
 80094b8:	f7ff f99c 	bl	80087f4 <quorem>
 80094bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80094c0:	f805 3b01 	strb.w	r3, [r5], #1
 80094c4:	9a00      	ldr	r2, [sp, #0]
 80094c6:	1aaa      	subs	r2, r5, r2
 80094c8:	4591      	cmp	r9, r2
 80094ca:	ddba      	ble.n	8009442 <_dtoa_r+0xb32>
 80094cc:	4659      	mov	r1, fp
 80094ce:	2300      	movs	r3, #0
 80094d0:	220a      	movs	r2, #10
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 fc06 	bl	8009ce4 <__multadd>
 80094d8:	4683      	mov	fp, r0
 80094da:	e7eb      	b.n	80094b4 <_dtoa_r+0xba4>
 80094dc:	0800c8cc 	.word	0x0800c8cc
 80094e0:	0800c6cc 	.word	0x0800c6cc
 80094e4:	0800c849 	.word	0x0800c849

080094e8 <rshift>:
 80094e8:	6903      	ldr	r3, [r0, #16]
 80094ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80094ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80094f6:	f100 0414 	add.w	r4, r0, #20
 80094fa:	dd45      	ble.n	8009588 <rshift+0xa0>
 80094fc:	f011 011f 	ands.w	r1, r1, #31
 8009500:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009504:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009508:	d10c      	bne.n	8009524 <rshift+0x3c>
 800950a:	f100 0710 	add.w	r7, r0, #16
 800950e:	4629      	mov	r1, r5
 8009510:	42b1      	cmp	r1, r6
 8009512:	d334      	bcc.n	800957e <rshift+0x96>
 8009514:	1a9b      	subs	r3, r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	1eea      	subs	r2, r5, #3
 800951a:	4296      	cmp	r6, r2
 800951c:	bf38      	it	cc
 800951e:	2300      	movcc	r3, #0
 8009520:	4423      	add	r3, r4
 8009522:	e015      	b.n	8009550 <rshift+0x68>
 8009524:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009528:	f1c1 0820 	rsb	r8, r1, #32
 800952c:	40cf      	lsrs	r7, r1
 800952e:	f105 0e04 	add.w	lr, r5, #4
 8009532:	46a1      	mov	r9, r4
 8009534:	4576      	cmp	r6, lr
 8009536:	46f4      	mov	ip, lr
 8009538:	d815      	bhi.n	8009566 <rshift+0x7e>
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	009a      	lsls	r2, r3, #2
 800953e:	3a04      	subs	r2, #4
 8009540:	3501      	adds	r5, #1
 8009542:	42ae      	cmp	r6, r5
 8009544:	bf38      	it	cc
 8009546:	2200      	movcc	r2, #0
 8009548:	18a3      	adds	r3, r4, r2
 800954a:	50a7      	str	r7, [r4, r2]
 800954c:	b107      	cbz	r7, 8009550 <rshift+0x68>
 800954e:	3304      	adds	r3, #4
 8009550:	1b1a      	subs	r2, r3, r4
 8009552:	42a3      	cmp	r3, r4
 8009554:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009558:	bf08      	it	eq
 800955a:	2300      	moveq	r3, #0
 800955c:	6102      	str	r2, [r0, #16]
 800955e:	bf08      	it	eq
 8009560:	6143      	streq	r3, [r0, #20]
 8009562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009566:	f8dc c000 	ldr.w	ip, [ip]
 800956a:	fa0c fc08 	lsl.w	ip, ip, r8
 800956e:	ea4c 0707 	orr.w	r7, ip, r7
 8009572:	f849 7b04 	str.w	r7, [r9], #4
 8009576:	f85e 7b04 	ldr.w	r7, [lr], #4
 800957a:	40cf      	lsrs	r7, r1
 800957c:	e7da      	b.n	8009534 <rshift+0x4c>
 800957e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009582:	f847 cf04 	str.w	ip, [r7, #4]!
 8009586:	e7c3      	b.n	8009510 <rshift+0x28>
 8009588:	4623      	mov	r3, r4
 800958a:	e7e1      	b.n	8009550 <rshift+0x68>

0800958c <__hexdig_fun>:
 800958c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009590:	2b09      	cmp	r3, #9
 8009592:	d802      	bhi.n	800959a <__hexdig_fun+0xe>
 8009594:	3820      	subs	r0, #32
 8009596:	b2c0      	uxtb	r0, r0
 8009598:	4770      	bx	lr
 800959a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800959e:	2b05      	cmp	r3, #5
 80095a0:	d801      	bhi.n	80095a6 <__hexdig_fun+0x1a>
 80095a2:	3847      	subs	r0, #71	; 0x47
 80095a4:	e7f7      	b.n	8009596 <__hexdig_fun+0xa>
 80095a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80095aa:	2b05      	cmp	r3, #5
 80095ac:	d801      	bhi.n	80095b2 <__hexdig_fun+0x26>
 80095ae:	3827      	subs	r0, #39	; 0x27
 80095b0:	e7f1      	b.n	8009596 <__hexdig_fun+0xa>
 80095b2:	2000      	movs	r0, #0
 80095b4:	4770      	bx	lr
	...

080095b8 <__gethex>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	ed2d 8b02 	vpush	{d8}
 80095c0:	b089      	sub	sp, #36	; 0x24
 80095c2:	ee08 0a10 	vmov	s16, r0
 80095c6:	9304      	str	r3, [sp, #16]
 80095c8:	4bbc      	ldr	r3, [pc, #752]	; (80098bc <__gethex+0x304>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	4618      	mov	r0, r3
 80095d0:	468b      	mov	fp, r1
 80095d2:	4690      	mov	r8, r2
 80095d4:	f7f6 fdfc 	bl	80001d0 <strlen>
 80095d8:	9b01      	ldr	r3, [sp, #4]
 80095da:	f8db 2000 	ldr.w	r2, [fp]
 80095de:	4403      	add	r3, r0
 80095e0:	4682      	mov	sl, r0
 80095e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80095e6:	9305      	str	r3, [sp, #20]
 80095e8:	1c93      	adds	r3, r2, #2
 80095ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80095ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80095f2:	32fe      	adds	r2, #254	; 0xfe
 80095f4:	18d1      	adds	r1, r2, r3
 80095f6:	461f      	mov	r7, r3
 80095f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095fc:	9100      	str	r1, [sp, #0]
 80095fe:	2830      	cmp	r0, #48	; 0x30
 8009600:	d0f8      	beq.n	80095f4 <__gethex+0x3c>
 8009602:	f7ff ffc3 	bl	800958c <__hexdig_fun>
 8009606:	4604      	mov	r4, r0
 8009608:	2800      	cmp	r0, #0
 800960a:	d13a      	bne.n	8009682 <__gethex+0xca>
 800960c:	9901      	ldr	r1, [sp, #4]
 800960e:	4652      	mov	r2, sl
 8009610:	4638      	mov	r0, r7
 8009612:	f001 f9ed 	bl	800a9f0 <strncmp>
 8009616:	4605      	mov	r5, r0
 8009618:	2800      	cmp	r0, #0
 800961a:	d168      	bne.n	80096ee <__gethex+0x136>
 800961c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009620:	eb07 060a 	add.w	r6, r7, sl
 8009624:	f7ff ffb2 	bl	800958c <__hexdig_fun>
 8009628:	2800      	cmp	r0, #0
 800962a:	d062      	beq.n	80096f2 <__gethex+0x13a>
 800962c:	4633      	mov	r3, r6
 800962e:	7818      	ldrb	r0, [r3, #0]
 8009630:	2830      	cmp	r0, #48	; 0x30
 8009632:	461f      	mov	r7, r3
 8009634:	f103 0301 	add.w	r3, r3, #1
 8009638:	d0f9      	beq.n	800962e <__gethex+0x76>
 800963a:	f7ff ffa7 	bl	800958c <__hexdig_fun>
 800963e:	2301      	movs	r3, #1
 8009640:	fab0 f480 	clz	r4, r0
 8009644:	0964      	lsrs	r4, r4, #5
 8009646:	4635      	mov	r5, r6
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	463a      	mov	r2, r7
 800964c:	4616      	mov	r6, r2
 800964e:	3201      	adds	r2, #1
 8009650:	7830      	ldrb	r0, [r6, #0]
 8009652:	f7ff ff9b 	bl	800958c <__hexdig_fun>
 8009656:	2800      	cmp	r0, #0
 8009658:	d1f8      	bne.n	800964c <__gethex+0x94>
 800965a:	9901      	ldr	r1, [sp, #4]
 800965c:	4652      	mov	r2, sl
 800965e:	4630      	mov	r0, r6
 8009660:	f001 f9c6 	bl	800a9f0 <strncmp>
 8009664:	b980      	cbnz	r0, 8009688 <__gethex+0xd0>
 8009666:	b94d      	cbnz	r5, 800967c <__gethex+0xc4>
 8009668:	eb06 050a 	add.w	r5, r6, sl
 800966c:	462a      	mov	r2, r5
 800966e:	4616      	mov	r6, r2
 8009670:	3201      	adds	r2, #1
 8009672:	7830      	ldrb	r0, [r6, #0]
 8009674:	f7ff ff8a 	bl	800958c <__hexdig_fun>
 8009678:	2800      	cmp	r0, #0
 800967a:	d1f8      	bne.n	800966e <__gethex+0xb6>
 800967c:	1bad      	subs	r5, r5, r6
 800967e:	00ad      	lsls	r5, r5, #2
 8009680:	e004      	b.n	800968c <__gethex+0xd4>
 8009682:	2400      	movs	r4, #0
 8009684:	4625      	mov	r5, r4
 8009686:	e7e0      	b.n	800964a <__gethex+0x92>
 8009688:	2d00      	cmp	r5, #0
 800968a:	d1f7      	bne.n	800967c <__gethex+0xc4>
 800968c:	7833      	ldrb	r3, [r6, #0]
 800968e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009692:	2b50      	cmp	r3, #80	; 0x50
 8009694:	d13b      	bne.n	800970e <__gethex+0x156>
 8009696:	7873      	ldrb	r3, [r6, #1]
 8009698:	2b2b      	cmp	r3, #43	; 0x2b
 800969a:	d02c      	beq.n	80096f6 <__gethex+0x13e>
 800969c:	2b2d      	cmp	r3, #45	; 0x2d
 800969e:	d02e      	beq.n	80096fe <__gethex+0x146>
 80096a0:	1c71      	adds	r1, r6, #1
 80096a2:	f04f 0900 	mov.w	r9, #0
 80096a6:	7808      	ldrb	r0, [r1, #0]
 80096a8:	f7ff ff70 	bl	800958c <__hexdig_fun>
 80096ac:	1e43      	subs	r3, r0, #1
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b18      	cmp	r3, #24
 80096b2:	d82c      	bhi.n	800970e <__gethex+0x156>
 80096b4:	f1a0 0210 	sub.w	r2, r0, #16
 80096b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80096bc:	f7ff ff66 	bl	800958c <__hexdig_fun>
 80096c0:	1e43      	subs	r3, r0, #1
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b18      	cmp	r3, #24
 80096c6:	d91d      	bls.n	8009704 <__gethex+0x14c>
 80096c8:	f1b9 0f00 	cmp.w	r9, #0
 80096cc:	d000      	beq.n	80096d0 <__gethex+0x118>
 80096ce:	4252      	negs	r2, r2
 80096d0:	4415      	add	r5, r2
 80096d2:	f8cb 1000 	str.w	r1, [fp]
 80096d6:	b1e4      	cbz	r4, 8009712 <__gethex+0x15a>
 80096d8:	9b00      	ldr	r3, [sp, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	bf14      	ite	ne
 80096de:	2700      	movne	r7, #0
 80096e0:	2706      	moveq	r7, #6
 80096e2:	4638      	mov	r0, r7
 80096e4:	b009      	add	sp, #36	; 0x24
 80096e6:	ecbd 8b02 	vpop	{d8}
 80096ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ee:	463e      	mov	r6, r7
 80096f0:	4625      	mov	r5, r4
 80096f2:	2401      	movs	r4, #1
 80096f4:	e7ca      	b.n	800968c <__gethex+0xd4>
 80096f6:	f04f 0900 	mov.w	r9, #0
 80096fa:	1cb1      	adds	r1, r6, #2
 80096fc:	e7d3      	b.n	80096a6 <__gethex+0xee>
 80096fe:	f04f 0901 	mov.w	r9, #1
 8009702:	e7fa      	b.n	80096fa <__gethex+0x142>
 8009704:	230a      	movs	r3, #10
 8009706:	fb03 0202 	mla	r2, r3, r2, r0
 800970a:	3a10      	subs	r2, #16
 800970c:	e7d4      	b.n	80096b8 <__gethex+0x100>
 800970e:	4631      	mov	r1, r6
 8009710:	e7df      	b.n	80096d2 <__gethex+0x11a>
 8009712:	1bf3      	subs	r3, r6, r7
 8009714:	3b01      	subs	r3, #1
 8009716:	4621      	mov	r1, r4
 8009718:	2b07      	cmp	r3, #7
 800971a:	dc0b      	bgt.n	8009734 <__gethex+0x17c>
 800971c:	ee18 0a10 	vmov	r0, s16
 8009720:	f000 fa7e 	bl	8009c20 <_Balloc>
 8009724:	4604      	mov	r4, r0
 8009726:	b940      	cbnz	r0, 800973a <__gethex+0x182>
 8009728:	4b65      	ldr	r3, [pc, #404]	; (80098c0 <__gethex+0x308>)
 800972a:	4602      	mov	r2, r0
 800972c:	21de      	movs	r1, #222	; 0xde
 800972e:	4865      	ldr	r0, [pc, #404]	; (80098c4 <__gethex+0x30c>)
 8009730:	f001 f97e 	bl	800aa30 <__assert_func>
 8009734:	3101      	adds	r1, #1
 8009736:	105b      	asrs	r3, r3, #1
 8009738:	e7ee      	b.n	8009718 <__gethex+0x160>
 800973a:	f100 0914 	add.w	r9, r0, #20
 800973e:	f04f 0b00 	mov.w	fp, #0
 8009742:	f1ca 0301 	rsb	r3, sl, #1
 8009746:	f8cd 9008 	str.w	r9, [sp, #8]
 800974a:	f8cd b000 	str.w	fp, [sp]
 800974e:	9306      	str	r3, [sp, #24]
 8009750:	42b7      	cmp	r7, r6
 8009752:	d340      	bcc.n	80097d6 <__gethex+0x21e>
 8009754:	9802      	ldr	r0, [sp, #8]
 8009756:	9b00      	ldr	r3, [sp, #0]
 8009758:	f840 3b04 	str.w	r3, [r0], #4
 800975c:	eba0 0009 	sub.w	r0, r0, r9
 8009760:	1080      	asrs	r0, r0, #2
 8009762:	0146      	lsls	r6, r0, #5
 8009764:	6120      	str	r0, [r4, #16]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fb50 	bl	8009e0c <__hi0bits>
 800976c:	1a30      	subs	r0, r6, r0
 800976e:	f8d8 6000 	ldr.w	r6, [r8]
 8009772:	42b0      	cmp	r0, r6
 8009774:	dd63      	ble.n	800983e <__gethex+0x286>
 8009776:	1b87      	subs	r7, r0, r6
 8009778:	4639      	mov	r1, r7
 800977a:	4620      	mov	r0, r4
 800977c:	f000 feea 	bl	800a554 <__any_on>
 8009780:	4682      	mov	sl, r0
 8009782:	b1a8      	cbz	r0, 80097b0 <__gethex+0x1f8>
 8009784:	1e7b      	subs	r3, r7, #1
 8009786:	1159      	asrs	r1, r3, #5
 8009788:	f003 021f 	and.w	r2, r3, #31
 800978c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009790:	f04f 0a01 	mov.w	sl, #1
 8009794:	fa0a f202 	lsl.w	r2, sl, r2
 8009798:	420a      	tst	r2, r1
 800979a:	d009      	beq.n	80097b0 <__gethex+0x1f8>
 800979c:	4553      	cmp	r3, sl
 800979e:	dd05      	ble.n	80097ac <__gethex+0x1f4>
 80097a0:	1eb9      	subs	r1, r7, #2
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fed6 	bl	800a554 <__any_on>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d145      	bne.n	8009838 <__gethex+0x280>
 80097ac:	f04f 0a02 	mov.w	sl, #2
 80097b0:	4639      	mov	r1, r7
 80097b2:	4620      	mov	r0, r4
 80097b4:	f7ff fe98 	bl	80094e8 <rshift>
 80097b8:	443d      	add	r5, r7
 80097ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097be:	42ab      	cmp	r3, r5
 80097c0:	da4c      	bge.n	800985c <__gethex+0x2a4>
 80097c2:	ee18 0a10 	vmov	r0, s16
 80097c6:	4621      	mov	r1, r4
 80097c8:	f000 fa6a 	bl	8009ca0 <_Bfree>
 80097cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097ce:	2300      	movs	r3, #0
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	27a3      	movs	r7, #163	; 0xa3
 80097d4:	e785      	b.n	80096e2 <__gethex+0x12a>
 80097d6:	1e73      	subs	r3, r6, #1
 80097d8:	9a05      	ldr	r2, [sp, #20]
 80097da:	9303      	str	r3, [sp, #12]
 80097dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d019      	beq.n	8009818 <__gethex+0x260>
 80097e4:	f1bb 0f20 	cmp.w	fp, #32
 80097e8:	d107      	bne.n	80097fa <__gethex+0x242>
 80097ea:	9b02      	ldr	r3, [sp, #8]
 80097ec:	9a00      	ldr	r2, [sp, #0]
 80097ee:	f843 2b04 	str.w	r2, [r3], #4
 80097f2:	9302      	str	r3, [sp, #8]
 80097f4:	2300      	movs	r3, #0
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	469b      	mov	fp, r3
 80097fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80097fe:	f7ff fec5 	bl	800958c <__hexdig_fun>
 8009802:	9b00      	ldr	r3, [sp, #0]
 8009804:	f000 000f 	and.w	r0, r0, #15
 8009808:	fa00 f00b 	lsl.w	r0, r0, fp
 800980c:	4303      	orrs	r3, r0
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	f10b 0b04 	add.w	fp, fp, #4
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	e00d      	b.n	8009834 <__gethex+0x27c>
 8009818:	9b03      	ldr	r3, [sp, #12]
 800981a:	9a06      	ldr	r2, [sp, #24]
 800981c:	4413      	add	r3, r2
 800981e:	42bb      	cmp	r3, r7
 8009820:	d3e0      	bcc.n	80097e4 <__gethex+0x22c>
 8009822:	4618      	mov	r0, r3
 8009824:	9901      	ldr	r1, [sp, #4]
 8009826:	9307      	str	r3, [sp, #28]
 8009828:	4652      	mov	r2, sl
 800982a:	f001 f8e1 	bl	800a9f0 <strncmp>
 800982e:	9b07      	ldr	r3, [sp, #28]
 8009830:	2800      	cmp	r0, #0
 8009832:	d1d7      	bne.n	80097e4 <__gethex+0x22c>
 8009834:	461e      	mov	r6, r3
 8009836:	e78b      	b.n	8009750 <__gethex+0x198>
 8009838:	f04f 0a03 	mov.w	sl, #3
 800983c:	e7b8      	b.n	80097b0 <__gethex+0x1f8>
 800983e:	da0a      	bge.n	8009856 <__gethex+0x29e>
 8009840:	1a37      	subs	r7, r6, r0
 8009842:	4621      	mov	r1, r4
 8009844:	ee18 0a10 	vmov	r0, s16
 8009848:	463a      	mov	r2, r7
 800984a:	f000 fc45 	bl	800a0d8 <__lshift>
 800984e:	1bed      	subs	r5, r5, r7
 8009850:	4604      	mov	r4, r0
 8009852:	f100 0914 	add.w	r9, r0, #20
 8009856:	f04f 0a00 	mov.w	sl, #0
 800985a:	e7ae      	b.n	80097ba <__gethex+0x202>
 800985c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009860:	42a8      	cmp	r0, r5
 8009862:	dd72      	ble.n	800994a <__gethex+0x392>
 8009864:	1b45      	subs	r5, r0, r5
 8009866:	42ae      	cmp	r6, r5
 8009868:	dc36      	bgt.n	80098d8 <__gethex+0x320>
 800986a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800986e:	2b02      	cmp	r3, #2
 8009870:	d02a      	beq.n	80098c8 <__gethex+0x310>
 8009872:	2b03      	cmp	r3, #3
 8009874:	d02c      	beq.n	80098d0 <__gethex+0x318>
 8009876:	2b01      	cmp	r3, #1
 8009878:	d115      	bne.n	80098a6 <__gethex+0x2ee>
 800987a:	42ae      	cmp	r6, r5
 800987c:	d113      	bne.n	80098a6 <__gethex+0x2ee>
 800987e:	2e01      	cmp	r6, #1
 8009880:	d10b      	bne.n	800989a <__gethex+0x2e2>
 8009882:	9a04      	ldr	r2, [sp, #16]
 8009884:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009888:	6013      	str	r3, [r2, #0]
 800988a:	2301      	movs	r3, #1
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	f8c9 3000 	str.w	r3, [r9]
 8009892:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009894:	2762      	movs	r7, #98	; 0x62
 8009896:	601c      	str	r4, [r3, #0]
 8009898:	e723      	b.n	80096e2 <__gethex+0x12a>
 800989a:	1e71      	subs	r1, r6, #1
 800989c:	4620      	mov	r0, r4
 800989e:	f000 fe59 	bl	800a554 <__any_on>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d1ed      	bne.n	8009882 <__gethex+0x2ca>
 80098a6:	ee18 0a10 	vmov	r0, s16
 80098aa:	4621      	mov	r1, r4
 80098ac:	f000 f9f8 	bl	8009ca0 <_Bfree>
 80098b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80098b2:	2300      	movs	r3, #0
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	2750      	movs	r7, #80	; 0x50
 80098b8:	e713      	b.n	80096e2 <__gethex+0x12a>
 80098ba:	bf00      	nop
 80098bc:	0800c948 	.word	0x0800c948
 80098c0:	0800c8cc 	.word	0x0800c8cc
 80098c4:	0800c8dd 	.word	0x0800c8dd
 80098c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1eb      	bne.n	80098a6 <__gethex+0x2ee>
 80098ce:	e7d8      	b.n	8009882 <__gethex+0x2ca>
 80098d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1d5      	bne.n	8009882 <__gethex+0x2ca>
 80098d6:	e7e6      	b.n	80098a6 <__gethex+0x2ee>
 80098d8:	1e6f      	subs	r7, r5, #1
 80098da:	f1ba 0f00 	cmp.w	sl, #0
 80098de:	d131      	bne.n	8009944 <__gethex+0x38c>
 80098e0:	b127      	cbz	r7, 80098ec <__gethex+0x334>
 80098e2:	4639      	mov	r1, r7
 80098e4:	4620      	mov	r0, r4
 80098e6:	f000 fe35 	bl	800a554 <__any_on>
 80098ea:	4682      	mov	sl, r0
 80098ec:	117b      	asrs	r3, r7, #5
 80098ee:	2101      	movs	r1, #1
 80098f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80098f4:	f007 071f 	and.w	r7, r7, #31
 80098f8:	fa01 f707 	lsl.w	r7, r1, r7
 80098fc:	421f      	tst	r7, r3
 80098fe:	4629      	mov	r1, r5
 8009900:	4620      	mov	r0, r4
 8009902:	bf18      	it	ne
 8009904:	f04a 0a02 	orrne.w	sl, sl, #2
 8009908:	1b76      	subs	r6, r6, r5
 800990a:	f7ff fded 	bl	80094e8 <rshift>
 800990e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009912:	2702      	movs	r7, #2
 8009914:	f1ba 0f00 	cmp.w	sl, #0
 8009918:	d048      	beq.n	80099ac <__gethex+0x3f4>
 800991a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800991e:	2b02      	cmp	r3, #2
 8009920:	d015      	beq.n	800994e <__gethex+0x396>
 8009922:	2b03      	cmp	r3, #3
 8009924:	d017      	beq.n	8009956 <__gethex+0x39e>
 8009926:	2b01      	cmp	r3, #1
 8009928:	d109      	bne.n	800993e <__gethex+0x386>
 800992a:	f01a 0f02 	tst.w	sl, #2
 800992e:	d006      	beq.n	800993e <__gethex+0x386>
 8009930:	f8d9 0000 	ldr.w	r0, [r9]
 8009934:	ea4a 0a00 	orr.w	sl, sl, r0
 8009938:	f01a 0f01 	tst.w	sl, #1
 800993c:	d10e      	bne.n	800995c <__gethex+0x3a4>
 800993e:	f047 0710 	orr.w	r7, r7, #16
 8009942:	e033      	b.n	80099ac <__gethex+0x3f4>
 8009944:	f04f 0a01 	mov.w	sl, #1
 8009948:	e7d0      	b.n	80098ec <__gethex+0x334>
 800994a:	2701      	movs	r7, #1
 800994c:	e7e2      	b.n	8009914 <__gethex+0x35c>
 800994e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009950:	f1c3 0301 	rsb	r3, r3, #1
 8009954:	9315      	str	r3, [sp, #84]	; 0x54
 8009956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0f0      	beq.n	800993e <__gethex+0x386>
 800995c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009960:	f104 0314 	add.w	r3, r4, #20
 8009964:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009968:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800996c:	f04f 0c00 	mov.w	ip, #0
 8009970:	4618      	mov	r0, r3
 8009972:	f853 2b04 	ldr.w	r2, [r3], #4
 8009976:	f1b2 3fff 	cmp.w	r2, #4294967295
 800997a:	d01c      	beq.n	80099b6 <__gethex+0x3fe>
 800997c:	3201      	adds	r2, #1
 800997e:	6002      	str	r2, [r0, #0]
 8009980:	2f02      	cmp	r7, #2
 8009982:	f104 0314 	add.w	r3, r4, #20
 8009986:	d13f      	bne.n	8009a08 <__gethex+0x450>
 8009988:	f8d8 2000 	ldr.w	r2, [r8]
 800998c:	3a01      	subs	r2, #1
 800998e:	42b2      	cmp	r2, r6
 8009990:	d10a      	bne.n	80099a8 <__gethex+0x3f0>
 8009992:	1171      	asrs	r1, r6, #5
 8009994:	2201      	movs	r2, #1
 8009996:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800999a:	f006 061f 	and.w	r6, r6, #31
 800999e:	fa02 f606 	lsl.w	r6, r2, r6
 80099a2:	421e      	tst	r6, r3
 80099a4:	bf18      	it	ne
 80099a6:	4617      	movne	r7, r2
 80099a8:	f047 0720 	orr.w	r7, r7, #32
 80099ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099ae:	601c      	str	r4, [r3, #0]
 80099b0:	9b04      	ldr	r3, [sp, #16]
 80099b2:	601d      	str	r5, [r3, #0]
 80099b4:	e695      	b.n	80096e2 <__gethex+0x12a>
 80099b6:	4299      	cmp	r1, r3
 80099b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80099bc:	d8d8      	bhi.n	8009970 <__gethex+0x3b8>
 80099be:	68a3      	ldr	r3, [r4, #8]
 80099c0:	459b      	cmp	fp, r3
 80099c2:	db19      	blt.n	80099f8 <__gethex+0x440>
 80099c4:	6861      	ldr	r1, [r4, #4]
 80099c6:	ee18 0a10 	vmov	r0, s16
 80099ca:	3101      	adds	r1, #1
 80099cc:	f000 f928 	bl	8009c20 <_Balloc>
 80099d0:	4681      	mov	r9, r0
 80099d2:	b918      	cbnz	r0, 80099dc <__gethex+0x424>
 80099d4:	4b1a      	ldr	r3, [pc, #104]	; (8009a40 <__gethex+0x488>)
 80099d6:	4602      	mov	r2, r0
 80099d8:	2184      	movs	r1, #132	; 0x84
 80099da:	e6a8      	b.n	800972e <__gethex+0x176>
 80099dc:	6922      	ldr	r2, [r4, #16]
 80099de:	3202      	adds	r2, #2
 80099e0:	f104 010c 	add.w	r1, r4, #12
 80099e4:	0092      	lsls	r2, r2, #2
 80099e6:	300c      	adds	r0, #12
 80099e8:	f000 f90c 	bl	8009c04 <memcpy>
 80099ec:	4621      	mov	r1, r4
 80099ee:	ee18 0a10 	vmov	r0, s16
 80099f2:	f000 f955 	bl	8009ca0 <_Bfree>
 80099f6:	464c      	mov	r4, r9
 80099f8:	6923      	ldr	r3, [r4, #16]
 80099fa:	1c5a      	adds	r2, r3, #1
 80099fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a00:	6122      	str	r2, [r4, #16]
 8009a02:	2201      	movs	r2, #1
 8009a04:	615a      	str	r2, [r3, #20]
 8009a06:	e7bb      	b.n	8009980 <__gethex+0x3c8>
 8009a08:	6922      	ldr	r2, [r4, #16]
 8009a0a:	455a      	cmp	r2, fp
 8009a0c:	dd0b      	ble.n	8009a26 <__gethex+0x46e>
 8009a0e:	2101      	movs	r1, #1
 8009a10:	4620      	mov	r0, r4
 8009a12:	f7ff fd69 	bl	80094e8 <rshift>
 8009a16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a1a:	3501      	adds	r5, #1
 8009a1c:	42ab      	cmp	r3, r5
 8009a1e:	f6ff aed0 	blt.w	80097c2 <__gethex+0x20a>
 8009a22:	2701      	movs	r7, #1
 8009a24:	e7c0      	b.n	80099a8 <__gethex+0x3f0>
 8009a26:	f016 061f 	ands.w	r6, r6, #31
 8009a2a:	d0fa      	beq.n	8009a22 <__gethex+0x46a>
 8009a2c:	449a      	add	sl, r3
 8009a2e:	f1c6 0620 	rsb	r6, r6, #32
 8009a32:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009a36:	f000 f9e9 	bl	8009e0c <__hi0bits>
 8009a3a:	42b0      	cmp	r0, r6
 8009a3c:	dbe7      	blt.n	8009a0e <__gethex+0x456>
 8009a3e:	e7f0      	b.n	8009a22 <__gethex+0x46a>
 8009a40:	0800c8cc 	.word	0x0800c8cc

08009a44 <L_shift>:
 8009a44:	f1c2 0208 	rsb	r2, r2, #8
 8009a48:	0092      	lsls	r2, r2, #2
 8009a4a:	b570      	push	{r4, r5, r6, lr}
 8009a4c:	f1c2 0620 	rsb	r6, r2, #32
 8009a50:	6843      	ldr	r3, [r0, #4]
 8009a52:	6804      	ldr	r4, [r0, #0]
 8009a54:	fa03 f506 	lsl.w	r5, r3, r6
 8009a58:	432c      	orrs	r4, r5
 8009a5a:	40d3      	lsrs	r3, r2
 8009a5c:	6004      	str	r4, [r0, #0]
 8009a5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a62:	4288      	cmp	r0, r1
 8009a64:	d3f4      	bcc.n	8009a50 <L_shift+0xc>
 8009a66:	bd70      	pop	{r4, r5, r6, pc}

08009a68 <__match>:
 8009a68:	b530      	push	{r4, r5, lr}
 8009a6a:	6803      	ldr	r3, [r0, #0]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a72:	b914      	cbnz	r4, 8009a7a <__match+0x12>
 8009a74:	6003      	str	r3, [r0, #0]
 8009a76:	2001      	movs	r0, #1
 8009a78:	bd30      	pop	{r4, r5, pc}
 8009a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009a82:	2d19      	cmp	r5, #25
 8009a84:	bf98      	it	ls
 8009a86:	3220      	addls	r2, #32
 8009a88:	42a2      	cmp	r2, r4
 8009a8a:	d0f0      	beq.n	8009a6e <__match+0x6>
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	e7f3      	b.n	8009a78 <__match+0x10>

08009a90 <__hexnan>:
 8009a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	680b      	ldr	r3, [r1, #0]
 8009a96:	6801      	ldr	r1, [r0, #0]
 8009a98:	115e      	asrs	r6, r3, #5
 8009a9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a9e:	f013 031f 	ands.w	r3, r3, #31
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	bf18      	it	ne
 8009aa6:	3604      	addne	r6, #4
 8009aa8:	2500      	movs	r5, #0
 8009aaa:	1f37      	subs	r7, r6, #4
 8009aac:	4682      	mov	sl, r0
 8009aae:	4690      	mov	r8, r2
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ab6:	46b9      	mov	r9, r7
 8009ab8:	463c      	mov	r4, r7
 8009aba:	9502      	str	r5, [sp, #8]
 8009abc:	46ab      	mov	fp, r5
 8009abe:	784a      	ldrb	r2, [r1, #1]
 8009ac0:	1c4b      	adds	r3, r1, #1
 8009ac2:	9303      	str	r3, [sp, #12]
 8009ac4:	b342      	cbz	r2, 8009b18 <__hexnan+0x88>
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	9105      	str	r1, [sp, #20]
 8009aca:	9204      	str	r2, [sp, #16]
 8009acc:	f7ff fd5e 	bl	800958c <__hexdig_fun>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d14f      	bne.n	8009b74 <__hexnan+0xe4>
 8009ad4:	9a04      	ldr	r2, [sp, #16]
 8009ad6:	9905      	ldr	r1, [sp, #20]
 8009ad8:	2a20      	cmp	r2, #32
 8009ada:	d818      	bhi.n	8009b0e <__hexnan+0x7e>
 8009adc:	9b02      	ldr	r3, [sp, #8]
 8009ade:	459b      	cmp	fp, r3
 8009ae0:	dd13      	ble.n	8009b0a <__hexnan+0x7a>
 8009ae2:	454c      	cmp	r4, r9
 8009ae4:	d206      	bcs.n	8009af4 <__hexnan+0x64>
 8009ae6:	2d07      	cmp	r5, #7
 8009ae8:	dc04      	bgt.n	8009af4 <__hexnan+0x64>
 8009aea:	462a      	mov	r2, r5
 8009aec:	4649      	mov	r1, r9
 8009aee:	4620      	mov	r0, r4
 8009af0:	f7ff ffa8 	bl	8009a44 <L_shift>
 8009af4:	4544      	cmp	r4, r8
 8009af6:	d950      	bls.n	8009b9a <__hexnan+0x10a>
 8009af8:	2300      	movs	r3, #0
 8009afa:	f1a4 0904 	sub.w	r9, r4, #4
 8009afe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b02:	f8cd b008 	str.w	fp, [sp, #8]
 8009b06:	464c      	mov	r4, r9
 8009b08:	461d      	mov	r5, r3
 8009b0a:	9903      	ldr	r1, [sp, #12]
 8009b0c:	e7d7      	b.n	8009abe <__hexnan+0x2e>
 8009b0e:	2a29      	cmp	r2, #41	; 0x29
 8009b10:	d156      	bne.n	8009bc0 <__hexnan+0x130>
 8009b12:	3102      	adds	r1, #2
 8009b14:	f8ca 1000 	str.w	r1, [sl]
 8009b18:	f1bb 0f00 	cmp.w	fp, #0
 8009b1c:	d050      	beq.n	8009bc0 <__hexnan+0x130>
 8009b1e:	454c      	cmp	r4, r9
 8009b20:	d206      	bcs.n	8009b30 <__hexnan+0xa0>
 8009b22:	2d07      	cmp	r5, #7
 8009b24:	dc04      	bgt.n	8009b30 <__hexnan+0xa0>
 8009b26:	462a      	mov	r2, r5
 8009b28:	4649      	mov	r1, r9
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f7ff ff8a 	bl	8009a44 <L_shift>
 8009b30:	4544      	cmp	r4, r8
 8009b32:	d934      	bls.n	8009b9e <__hexnan+0x10e>
 8009b34:	f1a8 0204 	sub.w	r2, r8, #4
 8009b38:	4623      	mov	r3, r4
 8009b3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b42:	429f      	cmp	r7, r3
 8009b44:	d2f9      	bcs.n	8009b3a <__hexnan+0xaa>
 8009b46:	1b3b      	subs	r3, r7, r4
 8009b48:	f023 0303 	bic.w	r3, r3, #3
 8009b4c:	3304      	adds	r3, #4
 8009b4e:	3401      	adds	r4, #1
 8009b50:	3e03      	subs	r6, #3
 8009b52:	42b4      	cmp	r4, r6
 8009b54:	bf88      	it	hi
 8009b56:	2304      	movhi	r3, #4
 8009b58:	4443      	add	r3, r8
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f843 2b04 	str.w	r2, [r3], #4
 8009b60:	429f      	cmp	r7, r3
 8009b62:	d2fb      	bcs.n	8009b5c <__hexnan+0xcc>
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	b91b      	cbnz	r3, 8009b70 <__hexnan+0xe0>
 8009b68:	4547      	cmp	r7, r8
 8009b6a:	d127      	bne.n	8009bbc <__hexnan+0x12c>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	603b      	str	r3, [r7, #0]
 8009b70:	2005      	movs	r0, #5
 8009b72:	e026      	b.n	8009bc2 <__hexnan+0x132>
 8009b74:	3501      	adds	r5, #1
 8009b76:	2d08      	cmp	r5, #8
 8009b78:	f10b 0b01 	add.w	fp, fp, #1
 8009b7c:	dd06      	ble.n	8009b8c <__hexnan+0xfc>
 8009b7e:	4544      	cmp	r4, r8
 8009b80:	d9c3      	bls.n	8009b0a <__hexnan+0x7a>
 8009b82:	2300      	movs	r3, #0
 8009b84:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b88:	2501      	movs	r5, #1
 8009b8a:	3c04      	subs	r4, #4
 8009b8c:	6822      	ldr	r2, [r4, #0]
 8009b8e:	f000 000f 	and.w	r0, r0, #15
 8009b92:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009b96:	6022      	str	r2, [r4, #0]
 8009b98:	e7b7      	b.n	8009b0a <__hexnan+0x7a>
 8009b9a:	2508      	movs	r5, #8
 8009b9c:	e7b5      	b.n	8009b0a <__hexnan+0x7a>
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0df      	beq.n	8009b64 <__hexnan+0xd4>
 8009ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba8:	f1c3 0320 	rsb	r3, r3, #32
 8009bac:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009bb4:	401a      	ands	r2, r3
 8009bb6:	f846 2c04 	str.w	r2, [r6, #-4]
 8009bba:	e7d3      	b.n	8009b64 <__hexnan+0xd4>
 8009bbc:	3f04      	subs	r7, #4
 8009bbe:	e7d1      	b.n	8009b64 <__hexnan+0xd4>
 8009bc0:	2004      	movs	r0, #4
 8009bc2:	b007      	add	sp, #28
 8009bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bc8 <_localeconv_r>:
 8009bc8:	4800      	ldr	r0, [pc, #0]	; (8009bcc <_localeconv_r+0x4>)
 8009bca:	4770      	bx	lr
 8009bcc:	200002c4 	.word	0x200002c4

08009bd0 <malloc>:
 8009bd0:	4b02      	ldr	r3, [pc, #8]	; (8009bdc <malloc+0xc>)
 8009bd2:	4601      	mov	r1, r0
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	f000 bd3d 	b.w	800a654 <_malloc_r>
 8009bda:	bf00      	nop
 8009bdc:	2000016c 	.word	0x2000016c

08009be0 <__ascii_mbtowc>:
 8009be0:	b082      	sub	sp, #8
 8009be2:	b901      	cbnz	r1, 8009be6 <__ascii_mbtowc+0x6>
 8009be4:	a901      	add	r1, sp, #4
 8009be6:	b142      	cbz	r2, 8009bfa <__ascii_mbtowc+0x1a>
 8009be8:	b14b      	cbz	r3, 8009bfe <__ascii_mbtowc+0x1e>
 8009bea:	7813      	ldrb	r3, [r2, #0]
 8009bec:	600b      	str	r3, [r1, #0]
 8009bee:	7812      	ldrb	r2, [r2, #0]
 8009bf0:	1e10      	subs	r0, r2, #0
 8009bf2:	bf18      	it	ne
 8009bf4:	2001      	movne	r0, #1
 8009bf6:	b002      	add	sp, #8
 8009bf8:	4770      	bx	lr
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	e7fb      	b.n	8009bf6 <__ascii_mbtowc+0x16>
 8009bfe:	f06f 0001 	mvn.w	r0, #1
 8009c02:	e7f8      	b.n	8009bf6 <__ascii_mbtowc+0x16>

08009c04 <memcpy>:
 8009c04:	440a      	add	r2, r1
 8009c06:	4291      	cmp	r1, r2
 8009c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c0c:	d100      	bne.n	8009c10 <memcpy+0xc>
 8009c0e:	4770      	bx	lr
 8009c10:	b510      	push	{r4, lr}
 8009c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c1a:	4291      	cmp	r1, r2
 8009c1c:	d1f9      	bne.n	8009c12 <memcpy+0xe>
 8009c1e:	bd10      	pop	{r4, pc}

08009c20 <_Balloc>:
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c24:	4604      	mov	r4, r0
 8009c26:	460d      	mov	r5, r1
 8009c28:	b976      	cbnz	r6, 8009c48 <_Balloc+0x28>
 8009c2a:	2010      	movs	r0, #16
 8009c2c:	f7ff ffd0 	bl	8009bd0 <malloc>
 8009c30:	4602      	mov	r2, r0
 8009c32:	6260      	str	r0, [r4, #36]	; 0x24
 8009c34:	b920      	cbnz	r0, 8009c40 <_Balloc+0x20>
 8009c36:	4b18      	ldr	r3, [pc, #96]	; (8009c98 <_Balloc+0x78>)
 8009c38:	4818      	ldr	r0, [pc, #96]	; (8009c9c <_Balloc+0x7c>)
 8009c3a:	2166      	movs	r1, #102	; 0x66
 8009c3c:	f000 fef8 	bl	800aa30 <__assert_func>
 8009c40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c44:	6006      	str	r6, [r0, #0]
 8009c46:	60c6      	str	r6, [r0, #12]
 8009c48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009c4a:	68f3      	ldr	r3, [r6, #12]
 8009c4c:	b183      	cbz	r3, 8009c70 <_Balloc+0x50>
 8009c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c56:	b9b8      	cbnz	r0, 8009c88 <_Balloc+0x68>
 8009c58:	2101      	movs	r1, #1
 8009c5a:	fa01 f605 	lsl.w	r6, r1, r5
 8009c5e:	1d72      	adds	r2, r6, #5
 8009c60:	0092      	lsls	r2, r2, #2
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fc97 	bl	800a596 <_calloc_r>
 8009c68:	b160      	cbz	r0, 8009c84 <_Balloc+0x64>
 8009c6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c6e:	e00e      	b.n	8009c8e <_Balloc+0x6e>
 8009c70:	2221      	movs	r2, #33	; 0x21
 8009c72:	2104      	movs	r1, #4
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 fc8e 	bl	800a596 <_calloc_r>
 8009c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c7c:	60f0      	str	r0, [r6, #12]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1e4      	bne.n	8009c4e <_Balloc+0x2e>
 8009c84:	2000      	movs	r0, #0
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
 8009c88:	6802      	ldr	r2, [r0, #0]
 8009c8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c94:	e7f7      	b.n	8009c86 <_Balloc+0x66>
 8009c96:	bf00      	nop
 8009c98:	0800c856 	.word	0x0800c856
 8009c9c:	0800c95c 	.word	0x0800c95c

08009ca0 <_Bfree>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	b976      	cbnz	r6, 8009cc8 <_Bfree+0x28>
 8009caa:	2010      	movs	r0, #16
 8009cac:	f7ff ff90 	bl	8009bd0 <malloc>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	6268      	str	r0, [r5, #36]	; 0x24
 8009cb4:	b920      	cbnz	r0, 8009cc0 <_Bfree+0x20>
 8009cb6:	4b09      	ldr	r3, [pc, #36]	; (8009cdc <_Bfree+0x3c>)
 8009cb8:	4809      	ldr	r0, [pc, #36]	; (8009ce0 <_Bfree+0x40>)
 8009cba:	218a      	movs	r1, #138	; 0x8a
 8009cbc:	f000 feb8 	bl	800aa30 <__assert_func>
 8009cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cc4:	6006      	str	r6, [r0, #0]
 8009cc6:	60c6      	str	r6, [r0, #12]
 8009cc8:	b13c      	cbz	r4, 8009cda <_Bfree+0x3a>
 8009cca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ccc:	6862      	ldr	r2, [r4, #4]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009cd4:	6021      	str	r1, [r4, #0]
 8009cd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	0800c856 	.word	0x0800c856
 8009ce0:	0800c95c 	.word	0x0800c95c

08009ce4 <__multadd>:
 8009ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce8:	690e      	ldr	r6, [r1, #16]
 8009cea:	4607      	mov	r7, r0
 8009cec:	4698      	mov	r8, r3
 8009cee:	460c      	mov	r4, r1
 8009cf0:	f101 0014 	add.w	r0, r1, #20
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	6805      	ldr	r5, [r0, #0]
 8009cf8:	b2a9      	uxth	r1, r5
 8009cfa:	fb02 8101 	mla	r1, r2, r1, r8
 8009cfe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009d02:	0c2d      	lsrs	r5, r5, #16
 8009d04:	fb02 c505 	mla	r5, r2, r5, ip
 8009d08:	b289      	uxth	r1, r1
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009d10:	429e      	cmp	r6, r3
 8009d12:	f840 1b04 	str.w	r1, [r0], #4
 8009d16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009d1a:	dcec      	bgt.n	8009cf6 <__multadd+0x12>
 8009d1c:	f1b8 0f00 	cmp.w	r8, #0
 8009d20:	d022      	beq.n	8009d68 <__multadd+0x84>
 8009d22:	68a3      	ldr	r3, [r4, #8]
 8009d24:	42b3      	cmp	r3, r6
 8009d26:	dc19      	bgt.n	8009d5c <__multadd+0x78>
 8009d28:	6861      	ldr	r1, [r4, #4]
 8009d2a:	4638      	mov	r0, r7
 8009d2c:	3101      	adds	r1, #1
 8009d2e:	f7ff ff77 	bl	8009c20 <_Balloc>
 8009d32:	4605      	mov	r5, r0
 8009d34:	b928      	cbnz	r0, 8009d42 <__multadd+0x5e>
 8009d36:	4602      	mov	r2, r0
 8009d38:	4b0d      	ldr	r3, [pc, #52]	; (8009d70 <__multadd+0x8c>)
 8009d3a:	480e      	ldr	r0, [pc, #56]	; (8009d74 <__multadd+0x90>)
 8009d3c:	21b5      	movs	r1, #181	; 0xb5
 8009d3e:	f000 fe77 	bl	800aa30 <__assert_func>
 8009d42:	6922      	ldr	r2, [r4, #16]
 8009d44:	3202      	adds	r2, #2
 8009d46:	f104 010c 	add.w	r1, r4, #12
 8009d4a:	0092      	lsls	r2, r2, #2
 8009d4c:	300c      	adds	r0, #12
 8009d4e:	f7ff ff59 	bl	8009c04 <memcpy>
 8009d52:	4621      	mov	r1, r4
 8009d54:	4638      	mov	r0, r7
 8009d56:	f7ff ffa3 	bl	8009ca0 <_Bfree>
 8009d5a:	462c      	mov	r4, r5
 8009d5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009d60:	3601      	adds	r6, #1
 8009d62:	f8c3 8014 	str.w	r8, [r3, #20]
 8009d66:	6126      	str	r6, [r4, #16]
 8009d68:	4620      	mov	r0, r4
 8009d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d6e:	bf00      	nop
 8009d70:	0800c8cc 	.word	0x0800c8cc
 8009d74:	0800c95c 	.word	0x0800c95c

08009d78 <__s2b>:
 8009d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	4615      	mov	r5, r2
 8009d80:	461f      	mov	r7, r3
 8009d82:	2209      	movs	r2, #9
 8009d84:	3308      	adds	r3, #8
 8009d86:	4606      	mov	r6, r0
 8009d88:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	2201      	movs	r2, #1
 8009d90:	429a      	cmp	r2, r3
 8009d92:	db09      	blt.n	8009da8 <__s2b+0x30>
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7ff ff43 	bl	8009c20 <_Balloc>
 8009d9a:	b940      	cbnz	r0, 8009dae <__s2b+0x36>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	4b19      	ldr	r3, [pc, #100]	; (8009e04 <__s2b+0x8c>)
 8009da0:	4819      	ldr	r0, [pc, #100]	; (8009e08 <__s2b+0x90>)
 8009da2:	21ce      	movs	r1, #206	; 0xce
 8009da4:	f000 fe44 	bl	800aa30 <__assert_func>
 8009da8:	0052      	lsls	r2, r2, #1
 8009daa:	3101      	adds	r1, #1
 8009dac:	e7f0      	b.n	8009d90 <__s2b+0x18>
 8009dae:	9b08      	ldr	r3, [sp, #32]
 8009db0:	6143      	str	r3, [r0, #20]
 8009db2:	2d09      	cmp	r5, #9
 8009db4:	f04f 0301 	mov.w	r3, #1
 8009db8:	6103      	str	r3, [r0, #16]
 8009dba:	dd16      	ble.n	8009dea <__s2b+0x72>
 8009dbc:	f104 0909 	add.w	r9, r4, #9
 8009dc0:	46c8      	mov	r8, r9
 8009dc2:	442c      	add	r4, r5
 8009dc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009dc8:	4601      	mov	r1, r0
 8009dca:	3b30      	subs	r3, #48	; 0x30
 8009dcc:	220a      	movs	r2, #10
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f7ff ff88 	bl	8009ce4 <__multadd>
 8009dd4:	45a0      	cmp	r8, r4
 8009dd6:	d1f5      	bne.n	8009dc4 <__s2b+0x4c>
 8009dd8:	f1a5 0408 	sub.w	r4, r5, #8
 8009ddc:	444c      	add	r4, r9
 8009dde:	1b2d      	subs	r5, r5, r4
 8009de0:	1963      	adds	r3, r4, r5
 8009de2:	42bb      	cmp	r3, r7
 8009de4:	db04      	blt.n	8009df0 <__s2b+0x78>
 8009de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dea:	340a      	adds	r4, #10
 8009dec:	2509      	movs	r5, #9
 8009dee:	e7f6      	b.n	8009dde <__s2b+0x66>
 8009df0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009df4:	4601      	mov	r1, r0
 8009df6:	3b30      	subs	r3, #48	; 0x30
 8009df8:	220a      	movs	r2, #10
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7ff ff72 	bl	8009ce4 <__multadd>
 8009e00:	e7ee      	b.n	8009de0 <__s2b+0x68>
 8009e02:	bf00      	nop
 8009e04:	0800c8cc 	.word	0x0800c8cc
 8009e08:	0800c95c 	.word	0x0800c95c

08009e0c <__hi0bits>:
 8009e0c:	0c03      	lsrs	r3, r0, #16
 8009e0e:	041b      	lsls	r3, r3, #16
 8009e10:	b9d3      	cbnz	r3, 8009e48 <__hi0bits+0x3c>
 8009e12:	0400      	lsls	r0, r0, #16
 8009e14:	2310      	movs	r3, #16
 8009e16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e1a:	bf04      	itt	eq
 8009e1c:	0200      	lsleq	r0, r0, #8
 8009e1e:	3308      	addeq	r3, #8
 8009e20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e24:	bf04      	itt	eq
 8009e26:	0100      	lsleq	r0, r0, #4
 8009e28:	3304      	addeq	r3, #4
 8009e2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e2e:	bf04      	itt	eq
 8009e30:	0080      	lsleq	r0, r0, #2
 8009e32:	3302      	addeq	r3, #2
 8009e34:	2800      	cmp	r0, #0
 8009e36:	db05      	blt.n	8009e44 <__hi0bits+0x38>
 8009e38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e3c:	f103 0301 	add.w	r3, r3, #1
 8009e40:	bf08      	it	eq
 8009e42:	2320      	moveq	r3, #32
 8009e44:	4618      	mov	r0, r3
 8009e46:	4770      	bx	lr
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e7e4      	b.n	8009e16 <__hi0bits+0xa>

08009e4c <__lo0bits>:
 8009e4c:	6803      	ldr	r3, [r0, #0]
 8009e4e:	f013 0207 	ands.w	r2, r3, #7
 8009e52:	4601      	mov	r1, r0
 8009e54:	d00b      	beq.n	8009e6e <__lo0bits+0x22>
 8009e56:	07da      	lsls	r2, r3, #31
 8009e58:	d424      	bmi.n	8009ea4 <__lo0bits+0x58>
 8009e5a:	0798      	lsls	r0, r3, #30
 8009e5c:	bf49      	itett	mi
 8009e5e:	085b      	lsrmi	r3, r3, #1
 8009e60:	089b      	lsrpl	r3, r3, #2
 8009e62:	2001      	movmi	r0, #1
 8009e64:	600b      	strmi	r3, [r1, #0]
 8009e66:	bf5c      	itt	pl
 8009e68:	600b      	strpl	r3, [r1, #0]
 8009e6a:	2002      	movpl	r0, #2
 8009e6c:	4770      	bx	lr
 8009e6e:	b298      	uxth	r0, r3
 8009e70:	b9b0      	cbnz	r0, 8009ea0 <__lo0bits+0x54>
 8009e72:	0c1b      	lsrs	r3, r3, #16
 8009e74:	2010      	movs	r0, #16
 8009e76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e7a:	bf04      	itt	eq
 8009e7c:	0a1b      	lsreq	r3, r3, #8
 8009e7e:	3008      	addeq	r0, #8
 8009e80:	071a      	lsls	r2, r3, #28
 8009e82:	bf04      	itt	eq
 8009e84:	091b      	lsreq	r3, r3, #4
 8009e86:	3004      	addeq	r0, #4
 8009e88:	079a      	lsls	r2, r3, #30
 8009e8a:	bf04      	itt	eq
 8009e8c:	089b      	lsreq	r3, r3, #2
 8009e8e:	3002      	addeq	r0, #2
 8009e90:	07da      	lsls	r2, r3, #31
 8009e92:	d403      	bmi.n	8009e9c <__lo0bits+0x50>
 8009e94:	085b      	lsrs	r3, r3, #1
 8009e96:	f100 0001 	add.w	r0, r0, #1
 8009e9a:	d005      	beq.n	8009ea8 <__lo0bits+0x5c>
 8009e9c:	600b      	str	r3, [r1, #0]
 8009e9e:	4770      	bx	lr
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	e7e8      	b.n	8009e76 <__lo0bits+0x2a>
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	4770      	bx	lr
 8009ea8:	2020      	movs	r0, #32
 8009eaa:	4770      	bx	lr

08009eac <__i2b>:
 8009eac:	b510      	push	{r4, lr}
 8009eae:	460c      	mov	r4, r1
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	f7ff feb5 	bl	8009c20 <_Balloc>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	b928      	cbnz	r0, 8009ec6 <__i2b+0x1a>
 8009eba:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <__i2b+0x24>)
 8009ebc:	4805      	ldr	r0, [pc, #20]	; (8009ed4 <__i2b+0x28>)
 8009ebe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ec2:	f000 fdb5 	bl	800aa30 <__assert_func>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	6144      	str	r4, [r0, #20]
 8009eca:	6103      	str	r3, [r0, #16]
 8009ecc:	bd10      	pop	{r4, pc}
 8009ece:	bf00      	nop
 8009ed0:	0800c8cc 	.word	0x0800c8cc
 8009ed4:	0800c95c 	.word	0x0800c95c

08009ed8 <__multiply>:
 8009ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009edc:	4614      	mov	r4, r2
 8009ede:	690a      	ldr	r2, [r1, #16]
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	bfb8      	it	lt
 8009ee6:	460b      	movlt	r3, r1
 8009ee8:	460d      	mov	r5, r1
 8009eea:	bfbc      	itt	lt
 8009eec:	4625      	movlt	r5, r4
 8009eee:	461c      	movlt	r4, r3
 8009ef0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009ef4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ef8:	68ab      	ldr	r3, [r5, #8]
 8009efa:	6869      	ldr	r1, [r5, #4]
 8009efc:	eb0a 0709 	add.w	r7, sl, r9
 8009f00:	42bb      	cmp	r3, r7
 8009f02:	b085      	sub	sp, #20
 8009f04:	bfb8      	it	lt
 8009f06:	3101      	addlt	r1, #1
 8009f08:	f7ff fe8a 	bl	8009c20 <_Balloc>
 8009f0c:	b930      	cbnz	r0, 8009f1c <__multiply+0x44>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	4b42      	ldr	r3, [pc, #264]	; (800a01c <__multiply+0x144>)
 8009f12:	4843      	ldr	r0, [pc, #268]	; (800a020 <__multiply+0x148>)
 8009f14:	f240 115d 	movw	r1, #349	; 0x15d
 8009f18:	f000 fd8a 	bl	800aa30 <__assert_func>
 8009f1c:	f100 0614 	add.w	r6, r0, #20
 8009f20:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009f24:	4633      	mov	r3, r6
 8009f26:	2200      	movs	r2, #0
 8009f28:	4543      	cmp	r3, r8
 8009f2a:	d31e      	bcc.n	8009f6a <__multiply+0x92>
 8009f2c:	f105 0c14 	add.w	ip, r5, #20
 8009f30:	f104 0314 	add.w	r3, r4, #20
 8009f34:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009f38:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009f3c:	9202      	str	r2, [sp, #8]
 8009f3e:	ebac 0205 	sub.w	r2, ip, r5
 8009f42:	3a15      	subs	r2, #21
 8009f44:	f022 0203 	bic.w	r2, r2, #3
 8009f48:	3204      	adds	r2, #4
 8009f4a:	f105 0115 	add.w	r1, r5, #21
 8009f4e:	458c      	cmp	ip, r1
 8009f50:	bf38      	it	cc
 8009f52:	2204      	movcc	r2, #4
 8009f54:	9201      	str	r2, [sp, #4]
 8009f56:	9a02      	ldr	r2, [sp, #8]
 8009f58:	9303      	str	r3, [sp, #12]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d808      	bhi.n	8009f70 <__multiply+0x98>
 8009f5e:	2f00      	cmp	r7, #0
 8009f60:	dc55      	bgt.n	800a00e <__multiply+0x136>
 8009f62:	6107      	str	r7, [r0, #16]
 8009f64:	b005      	add	sp, #20
 8009f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6a:	f843 2b04 	str.w	r2, [r3], #4
 8009f6e:	e7db      	b.n	8009f28 <__multiply+0x50>
 8009f70:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f74:	f1ba 0f00 	cmp.w	sl, #0
 8009f78:	d020      	beq.n	8009fbc <__multiply+0xe4>
 8009f7a:	f105 0e14 	add.w	lr, r5, #20
 8009f7e:	46b1      	mov	r9, r6
 8009f80:	2200      	movs	r2, #0
 8009f82:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009f86:	f8d9 b000 	ldr.w	fp, [r9]
 8009f8a:	b2a1      	uxth	r1, r4
 8009f8c:	fa1f fb8b 	uxth.w	fp, fp
 8009f90:	fb0a b101 	mla	r1, sl, r1, fp
 8009f94:	4411      	add	r1, r2
 8009f96:	f8d9 2000 	ldr.w	r2, [r9]
 8009f9a:	0c24      	lsrs	r4, r4, #16
 8009f9c:	0c12      	lsrs	r2, r2, #16
 8009f9e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009fa2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009fa6:	b289      	uxth	r1, r1
 8009fa8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009fac:	45f4      	cmp	ip, lr
 8009fae:	f849 1b04 	str.w	r1, [r9], #4
 8009fb2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009fb6:	d8e4      	bhi.n	8009f82 <__multiply+0xaa>
 8009fb8:	9901      	ldr	r1, [sp, #4]
 8009fba:	5072      	str	r2, [r6, r1]
 8009fbc:	9a03      	ldr	r2, [sp, #12]
 8009fbe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	f1b9 0f00 	cmp.w	r9, #0
 8009fc8:	d01f      	beq.n	800a00a <__multiply+0x132>
 8009fca:	6834      	ldr	r4, [r6, #0]
 8009fcc:	f105 0114 	add.w	r1, r5, #20
 8009fd0:	46b6      	mov	lr, r6
 8009fd2:	f04f 0a00 	mov.w	sl, #0
 8009fd6:	880a      	ldrh	r2, [r1, #0]
 8009fd8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009fdc:	fb09 b202 	mla	r2, r9, r2, fp
 8009fe0:	4492      	add	sl, r2
 8009fe2:	b2a4      	uxth	r4, r4
 8009fe4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009fe8:	f84e 4b04 	str.w	r4, [lr], #4
 8009fec:	f851 4b04 	ldr.w	r4, [r1], #4
 8009ff0:	f8be 2000 	ldrh.w	r2, [lr]
 8009ff4:	0c24      	lsrs	r4, r4, #16
 8009ff6:	fb09 2404 	mla	r4, r9, r4, r2
 8009ffa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009ffe:	458c      	cmp	ip, r1
 800a000:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a004:	d8e7      	bhi.n	8009fd6 <__multiply+0xfe>
 800a006:	9a01      	ldr	r2, [sp, #4]
 800a008:	50b4      	str	r4, [r6, r2]
 800a00a:	3604      	adds	r6, #4
 800a00c:	e7a3      	b.n	8009f56 <__multiply+0x7e>
 800a00e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1a5      	bne.n	8009f62 <__multiply+0x8a>
 800a016:	3f01      	subs	r7, #1
 800a018:	e7a1      	b.n	8009f5e <__multiply+0x86>
 800a01a:	bf00      	nop
 800a01c:	0800c8cc 	.word	0x0800c8cc
 800a020:	0800c95c 	.word	0x0800c95c

0800a024 <__pow5mult>:
 800a024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a028:	4615      	mov	r5, r2
 800a02a:	f012 0203 	ands.w	r2, r2, #3
 800a02e:	4606      	mov	r6, r0
 800a030:	460f      	mov	r7, r1
 800a032:	d007      	beq.n	800a044 <__pow5mult+0x20>
 800a034:	4c25      	ldr	r4, [pc, #148]	; (800a0cc <__pow5mult+0xa8>)
 800a036:	3a01      	subs	r2, #1
 800a038:	2300      	movs	r3, #0
 800a03a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a03e:	f7ff fe51 	bl	8009ce4 <__multadd>
 800a042:	4607      	mov	r7, r0
 800a044:	10ad      	asrs	r5, r5, #2
 800a046:	d03d      	beq.n	800a0c4 <__pow5mult+0xa0>
 800a048:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a04a:	b97c      	cbnz	r4, 800a06c <__pow5mult+0x48>
 800a04c:	2010      	movs	r0, #16
 800a04e:	f7ff fdbf 	bl	8009bd0 <malloc>
 800a052:	4602      	mov	r2, r0
 800a054:	6270      	str	r0, [r6, #36]	; 0x24
 800a056:	b928      	cbnz	r0, 800a064 <__pow5mult+0x40>
 800a058:	4b1d      	ldr	r3, [pc, #116]	; (800a0d0 <__pow5mult+0xac>)
 800a05a:	481e      	ldr	r0, [pc, #120]	; (800a0d4 <__pow5mult+0xb0>)
 800a05c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a060:	f000 fce6 	bl	800aa30 <__assert_func>
 800a064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a068:	6004      	str	r4, [r0, #0]
 800a06a:	60c4      	str	r4, [r0, #12]
 800a06c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a074:	b94c      	cbnz	r4, 800a08a <__pow5mult+0x66>
 800a076:	f240 2171 	movw	r1, #625	; 0x271
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff ff16 	bl	8009eac <__i2b>
 800a080:	2300      	movs	r3, #0
 800a082:	f8c8 0008 	str.w	r0, [r8, #8]
 800a086:	4604      	mov	r4, r0
 800a088:	6003      	str	r3, [r0, #0]
 800a08a:	f04f 0900 	mov.w	r9, #0
 800a08e:	07eb      	lsls	r3, r5, #31
 800a090:	d50a      	bpl.n	800a0a8 <__pow5mult+0x84>
 800a092:	4639      	mov	r1, r7
 800a094:	4622      	mov	r2, r4
 800a096:	4630      	mov	r0, r6
 800a098:	f7ff ff1e 	bl	8009ed8 <__multiply>
 800a09c:	4639      	mov	r1, r7
 800a09e:	4680      	mov	r8, r0
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f7ff fdfd 	bl	8009ca0 <_Bfree>
 800a0a6:	4647      	mov	r7, r8
 800a0a8:	106d      	asrs	r5, r5, #1
 800a0aa:	d00b      	beq.n	800a0c4 <__pow5mult+0xa0>
 800a0ac:	6820      	ldr	r0, [r4, #0]
 800a0ae:	b938      	cbnz	r0, 800a0c0 <__pow5mult+0x9c>
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f7ff ff0f 	bl	8009ed8 <__multiply>
 800a0ba:	6020      	str	r0, [r4, #0]
 800a0bc:	f8c0 9000 	str.w	r9, [r0]
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	e7e4      	b.n	800a08e <__pow5mult+0x6a>
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ca:	bf00      	nop
 800a0cc:	0800cab0 	.word	0x0800cab0
 800a0d0:	0800c856 	.word	0x0800c856
 800a0d4:	0800c95c 	.word	0x0800c95c

0800a0d8 <__lshift>:
 800a0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0dc:	460c      	mov	r4, r1
 800a0de:	6849      	ldr	r1, [r1, #4]
 800a0e0:	6923      	ldr	r3, [r4, #16]
 800a0e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0e6:	68a3      	ldr	r3, [r4, #8]
 800a0e8:	4607      	mov	r7, r0
 800a0ea:	4691      	mov	r9, r2
 800a0ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0f0:	f108 0601 	add.w	r6, r8, #1
 800a0f4:	42b3      	cmp	r3, r6
 800a0f6:	db0b      	blt.n	800a110 <__lshift+0x38>
 800a0f8:	4638      	mov	r0, r7
 800a0fa:	f7ff fd91 	bl	8009c20 <_Balloc>
 800a0fe:	4605      	mov	r5, r0
 800a100:	b948      	cbnz	r0, 800a116 <__lshift+0x3e>
 800a102:	4602      	mov	r2, r0
 800a104:	4b28      	ldr	r3, [pc, #160]	; (800a1a8 <__lshift+0xd0>)
 800a106:	4829      	ldr	r0, [pc, #164]	; (800a1ac <__lshift+0xd4>)
 800a108:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a10c:	f000 fc90 	bl	800aa30 <__assert_func>
 800a110:	3101      	adds	r1, #1
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	e7ee      	b.n	800a0f4 <__lshift+0x1c>
 800a116:	2300      	movs	r3, #0
 800a118:	f100 0114 	add.w	r1, r0, #20
 800a11c:	f100 0210 	add.w	r2, r0, #16
 800a120:	4618      	mov	r0, r3
 800a122:	4553      	cmp	r3, sl
 800a124:	db33      	blt.n	800a18e <__lshift+0xb6>
 800a126:	6920      	ldr	r0, [r4, #16]
 800a128:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a12c:	f104 0314 	add.w	r3, r4, #20
 800a130:	f019 091f 	ands.w	r9, r9, #31
 800a134:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a138:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a13c:	d02b      	beq.n	800a196 <__lshift+0xbe>
 800a13e:	f1c9 0e20 	rsb	lr, r9, #32
 800a142:	468a      	mov	sl, r1
 800a144:	2200      	movs	r2, #0
 800a146:	6818      	ldr	r0, [r3, #0]
 800a148:	fa00 f009 	lsl.w	r0, r0, r9
 800a14c:	4302      	orrs	r2, r0
 800a14e:	f84a 2b04 	str.w	r2, [sl], #4
 800a152:	f853 2b04 	ldr.w	r2, [r3], #4
 800a156:	459c      	cmp	ip, r3
 800a158:	fa22 f20e 	lsr.w	r2, r2, lr
 800a15c:	d8f3      	bhi.n	800a146 <__lshift+0x6e>
 800a15e:	ebac 0304 	sub.w	r3, ip, r4
 800a162:	3b15      	subs	r3, #21
 800a164:	f023 0303 	bic.w	r3, r3, #3
 800a168:	3304      	adds	r3, #4
 800a16a:	f104 0015 	add.w	r0, r4, #21
 800a16e:	4584      	cmp	ip, r0
 800a170:	bf38      	it	cc
 800a172:	2304      	movcc	r3, #4
 800a174:	50ca      	str	r2, [r1, r3]
 800a176:	b10a      	cbz	r2, 800a17c <__lshift+0xa4>
 800a178:	f108 0602 	add.w	r6, r8, #2
 800a17c:	3e01      	subs	r6, #1
 800a17e:	4638      	mov	r0, r7
 800a180:	612e      	str	r6, [r5, #16]
 800a182:	4621      	mov	r1, r4
 800a184:	f7ff fd8c 	bl	8009ca0 <_Bfree>
 800a188:	4628      	mov	r0, r5
 800a18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a192:	3301      	adds	r3, #1
 800a194:	e7c5      	b.n	800a122 <__lshift+0x4a>
 800a196:	3904      	subs	r1, #4
 800a198:	f853 2b04 	ldr.w	r2, [r3], #4
 800a19c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1a0:	459c      	cmp	ip, r3
 800a1a2:	d8f9      	bhi.n	800a198 <__lshift+0xc0>
 800a1a4:	e7ea      	b.n	800a17c <__lshift+0xa4>
 800a1a6:	bf00      	nop
 800a1a8:	0800c8cc 	.word	0x0800c8cc
 800a1ac:	0800c95c 	.word	0x0800c95c

0800a1b0 <__mcmp>:
 800a1b0:	b530      	push	{r4, r5, lr}
 800a1b2:	6902      	ldr	r2, [r0, #16]
 800a1b4:	690c      	ldr	r4, [r1, #16]
 800a1b6:	1b12      	subs	r2, r2, r4
 800a1b8:	d10e      	bne.n	800a1d8 <__mcmp+0x28>
 800a1ba:	f100 0314 	add.w	r3, r0, #20
 800a1be:	3114      	adds	r1, #20
 800a1c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1d0:	42a5      	cmp	r5, r4
 800a1d2:	d003      	beq.n	800a1dc <__mcmp+0x2c>
 800a1d4:	d305      	bcc.n	800a1e2 <__mcmp+0x32>
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	4610      	mov	r0, r2
 800a1da:	bd30      	pop	{r4, r5, pc}
 800a1dc:	4283      	cmp	r3, r0
 800a1de:	d3f3      	bcc.n	800a1c8 <__mcmp+0x18>
 800a1e0:	e7fa      	b.n	800a1d8 <__mcmp+0x28>
 800a1e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e6:	e7f7      	b.n	800a1d8 <__mcmp+0x28>

0800a1e8 <__mdiff>:
 800a1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	4617      	mov	r7, r2
 800a1f6:	f7ff ffdb 	bl	800a1b0 <__mcmp>
 800a1fa:	1e05      	subs	r5, r0, #0
 800a1fc:	d110      	bne.n	800a220 <__mdiff+0x38>
 800a1fe:	4629      	mov	r1, r5
 800a200:	4630      	mov	r0, r6
 800a202:	f7ff fd0d 	bl	8009c20 <_Balloc>
 800a206:	b930      	cbnz	r0, 800a216 <__mdiff+0x2e>
 800a208:	4b39      	ldr	r3, [pc, #228]	; (800a2f0 <__mdiff+0x108>)
 800a20a:	4602      	mov	r2, r0
 800a20c:	f240 2132 	movw	r1, #562	; 0x232
 800a210:	4838      	ldr	r0, [pc, #224]	; (800a2f4 <__mdiff+0x10c>)
 800a212:	f000 fc0d 	bl	800aa30 <__assert_func>
 800a216:	2301      	movs	r3, #1
 800a218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a220:	bfa4      	itt	ge
 800a222:	463b      	movge	r3, r7
 800a224:	4627      	movge	r7, r4
 800a226:	4630      	mov	r0, r6
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	bfa6      	itte	ge
 800a22c:	461c      	movge	r4, r3
 800a22e:	2500      	movge	r5, #0
 800a230:	2501      	movlt	r5, #1
 800a232:	f7ff fcf5 	bl	8009c20 <_Balloc>
 800a236:	b920      	cbnz	r0, 800a242 <__mdiff+0x5a>
 800a238:	4b2d      	ldr	r3, [pc, #180]	; (800a2f0 <__mdiff+0x108>)
 800a23a:	4602      	mov	r2, r0
 800a23c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a240:	e7e6      	b.n	800a210 <__mdiff+0x28>
 800a242:	693e      	ldr	r6, [r7, #16]
 800a244:	60c5      	str	r5, [r0, #12]
 800a246:	6925      	ldr	r5, [r4, #16]
 800a248:	f107 0114 	add.w	r1, r7, #20
 800a24c:	f104 0914 	add.w	r9, r4, #20
 800a250:	f100 0e14 	add.w	lr, r0, #20
 800a254:	f107 0210 	add.w	r2, r7, #16
 800a258:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a25c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a260:	46f2      	mov	sl, lr
 800a262:	2700      	movs	r7, #0
 800a264:	f859 3b04 	ldr.w	r3, [r9], #4
 800a268:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a26c:	fa1f f883 	uxth.w	r8, r3
 800a270:	fa17 f78b 	uxtah	r7, r7, fp
 800a274:	0c1b      	lsrs	r3, r3, #16
 800a276:	eba7 0808 	sub.w	r8, r7, r8
 800a27a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a27e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a282:	fa1f f888 	uxth.w	r8, r8
 800a286:	141f      	asrs	r7, r3, #16
 800a288:	454d      	cmp	r5, r9
 800a28a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a28e:	f84a 3b04 	str.w	r3, [sl], #4
 800a292:	d8e7      	bhi.n	800a264 <__mdiff+0x7c>
 800a294:	1b2b      	subs	r3, r5, r4
 800a296:	3b15      	subs	r3, #21
 800a298:	f023 0303 	bic.w	r3, r3, #3
 800a29c:	3304      	adds	r3, #4
 800a29e:	3415      	adds	r4, #21
 800a2a0:	42a5      	cmp	r5, r4
 800a2a2:	bf38      	it	cc
 800a2a4:	2304      	movcc	r3, #4
 800a2a6:	4419      	add	r1, r3
 800a2a8:	4473      	add	r3, lr
 800a2aa:	469e      	mov	lr, r3
 800a2ac:	460d      	mov	r5, r1
 800a2ae:	4565      	cmp	r5, ip
 800a2b0:	d30e      	bcc.n	800a2d0 <__mdiff+0xe8>
 800a2b2:	f10c 0203 	add.w	r2, ip, #3
 800a2b6:	1a52      	subs	r2, r2, r1
 800a2b8:	f022 0203 	bic.w	r2, r2, #3
 800a2bc:	3903      	subs	r1, #3
 800a2be:	458c      	cmp	ip, r1
 800a2c0:	bf38      	it	cc
 800a2c2:	2200      	movcc	r2, #0
 800a2c4:	441a      	add	r2, r3
 800a2c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a2ca:	b17b      	cbz	r3, 800a2ec <__mdiff+0x104>
 800a2cc:	6106      	str	r6, [r0, #16]
 800a2ce:	e7a5      	b.n	800a21c <__mdiff+0x34>
 800a2d0:	f855 8b04 	ldr.w	r8, [r5], #4
 800a2d4:	fa17 f488 	uxtah	r4, r7, r8
 800a2d8:	1422      	asrs	r2, r4, #16
 800a2da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a2de:	b2a4      	uxth	r4, r4
 800a2e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a2e4:	f84e 4b04 	str.w	r4, [lr], #4
 800a2e8:	1417      	asrs	r7, r2, #16
 800a2ea:	e7e0      	b.n	800a2ae <__mdiff+0xc6>
 800a2ec:	3e01      	subs	r6, #1
 800a2ee:	e7ea      	b.n	800a2c6 <__mdiff+0xde>
 800a2f0:	0800c8cc 	.word	0x0800c8cc
 800a2f4:	0800c95c 	.word	0x0800c95c

0800a2f8 <__ulp>:
 800a2f8:	b082      	sub	sp, #8
 800a2fa:	ed8d 0b00 	vstr	d0, [sp]
 800a2fe:	9b01      	ldr	r3, [sp, #4]
 800a300:	4912      	ldr	r1, [pc, #72]	; (800a34c <__ulp+0x54>)
 800a302:	4019      	ands	r1, r3
 800a304:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a308:	2900      	cmp	r1, #0
 800a30a:	dd05      	ble.n	800a318 <__ulp+0x20>
 800a30c:	2200      	movs	r2, #0
 800a30e:	460b      	mov	r3, r1
 800a310:	ec43 2b10 	vmov	d0, r2, r3
 800a314:	b002      	add	sp, #8
 800a316:	4770      	bx	lr
 800a318:	4249      	negs	r1, r1
 800a31a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a31e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	f04f 0300 	mov.w	r3, #0
 800a32a:	da04      	bge.n	800a336 <__ulp+0x3e>
 800a32c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a330:	fa41 f300 	asr.w	r3, r1, r0
 800a334:	e7ec      	b.n	800a310 <__ulp+0x18>
 800a336:	f1a0 0114 	sub.w	r1, r0, #20
 800a33a:	291e      	cmp	r1, #30
 800a33c:	bfda      	itte	le
 800a33e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a342:	fa20 f101 	lsrle.w	r1, r0, r1
 800a346:	2101      	movgt	r1, #1
 800a348:	460a      	mov	r2, r1
 800a34a:	e7e1      	b.n	800a310 <__ulp+0x18>
 800a34c:	7ff00000 	.word	0x7ff00000

0800a350 <__b2d>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	6905      	ldr	r5, [r0, #16]
 800a354:	f100 0714 	add.w	r7, r0, #20
 800a358:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a35c:	1f2e      	subs	r6, r5, #4
 800a35e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a362:	4620      	mov	r0, r4
 800a364:	f7ff fd52 	bl	8009e0c <__hi0bits>
 800a368:	f1c0 0320 	rsb	r3, r0, #32
 800a36c:	280a      	cmp	r0, #10
 800a36e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a3ec <__b2d+0x9c>
 800a372:	600b      	str	r3, [r1, #0]
 800a374:	dc14      	bgt.n	800a3a0 <__b2d+0x50>
 800a376:	f1c0 0e0b 	rsb	lr, r0, #11
 800a37a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a37e:	42b7      	cmp	r7, r6
 800a380:	ea41 030c 	orr.w	r3, r1, ip
 800a384:	bf34      	ite	cc
 800a386:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a38a:	2100      	movcs	r1, #0
 800a38c:	3015      	adds	r0, #21
 800a38e:	fa04 f000 	lsl.w	r0, r4, r0
 800a392:	fa21 f10e 	lsr.w	r1, r1, lr
 800a396:	ea40 0201 	orr.w	r2, r0, r1
 800a39a:	ec43 2b10 	vmov	d0, r2, r3
 800a39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a0:	42b7      	cmp	r7, r6
 800a3a2:	bf3a      	itte	cc
 800a3a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a3a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800a3ac:	2100      	movcs	r1, #0
 800a3ae:	380b      	subs	r0, #11
 800a3b0:	d017      	beq.n	800a3e2 <__b2d+0x92>
 800a3b2:	f1c0 0c20 	rsb	ip, r0, #32
 800a3b6:	fa04 f500 	lsl.w	r5, r4, r0
 800a3ba:	42be      	cmp	r6, r7
 800a3bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800a3c0:	ea45 0504 	orr.w	r5, r5, r4
 800a3c4:	bf8c      	ite	hi
 800a3c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a3ca:	2400      	movls	r4, #0
 800a3cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a3d0:	fa01 f000 	lsl.w	r0, r1, r0
 800a3d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800a3d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a3dc:	ea40 0204 	orr.w	r2, r0, r4
 800a3e0:	e7db      	b.n	800a39a <__b2d+0x4a>
 800a3e2:	ea44 030c 	orr.w	r3, r4, ip
 800a3e6:	460a      	mov	r2, r1
 800a3e8:	e7d7      	b.n	800a39a <__b2d+0x4a>
 800a3ea:	bf00      	nop
 800a3ec:	3ff00000 	.word	0x3ff00000

0800a3f0 <__d2b>:
 800a3f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3f4:	4689      	mov	r9, r1
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	ec57 6b10 	vmov	r6, r7, d0
 800a3fc:	4690      	mov	r8, r2
 800a3fe:	f7ff fc0f 	bl	8009c20 <_Balloc>
 800a402:	4604      	mov	r4, r0
 800a404:	b930      	cbnz	r0, 800a414 <__d2b+0x24>
 800a406:	4602      	mov	r2, r0
 800a408:	4b25      	ldr	r3, [pc, #148]	; (800a4a0 <__d2b+0xb0>)
 800a40a:	4826      	ldr	r0, [pc, #152]	; (800a4a4 <__d2b+0xb4>)
 800a40c:	f240 310a 	movw	r1, #778	; 0x30a
 800a410:	f000 fb0e 	bl	800aa30 <__assert_func>
 800a414:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a41c:	bb35      	cbnz	r5, 800a46c <__d2b+0x7c>
 800a41e:	2e00      	cmp	r6, #0
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	d028      	beq.n	800a476 <__d2b+0x86>
 800a424:	4668      	mov	r0, sp
 800a426:	9600      	str	r6, [sp, #0]
 800a428:	f7ff fd10 	bl	8009e4c <__lo0bits>
 800a42c:	9900      	ldr	r1, [sp, #0]
 800a42e:	b300      	cbz	r0, 800a472 <__d2b+0x82>
 800a430:	9a01      	ldr	r2, [sp, #4]
 800a432:	f1c0 0320 	rsb	r3, r0, #32
 800a436:	fa02 f303 	lsl.w	r3, r2, r3
 800a43a:	430b      	orrs	r3, r1
 800a43c:	40c2      	lsrs	r2, r0
 800a43e:	6163      	str	r3, [r4, #20]
 800a440:	9201      	str	r2, [sp, #4]
 800a442:	9b01      	ldr	r3, [sp, #4]
 800a444:	61a3      	str	r3, [r4, #24]
 800a446:	2b00      	cmp	r3, #0
 800a448:	bf14      	ite	ne
 800a44a:	2202      	movne	r2, #2
 800a44c:	2201      	moveq	r2, #1
 800a44e:	6122      	str	r2, [r4, #16]
 800a450:	b1d5      	cbz	r5, 800a488 <__d2b+0x98>
 800a452:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a456:	4405      	add	r5, r0
 800a458:	f8c9 5000 	str.w	r5, [r9]
 800a45c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a460:	f8c8 0000 	str.w	r0, [r8]
 800a464:	4620      	mov	r0, r4
 800a466:	b003      	add	sp, #12
 800a468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a46c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a470:	e7d5      	b.n	800a41e <__d2b+0x2e>
 800a472:	6161      	str	r1, [r4, #20]
 800a474:	e7e5      	b.n	800a442 <__d2b+0x52>
 800a476:	a801      	add	r0, sp, #4
 800a478:	f7ff fce8 	bl	8009e4c <__lo0bits>
 800a47c:	9b01      	ldr	r3, [sp, #4]
 800a47e:	6163      	str	r3, [r4, #20]
 800a480:	2201      	movs	r2, #1
 800a482:	6122      	str	r2, [r4, #16]
 800a484:	3020      	adds	r0, #32
 800a486:	e7e3      	b.n	800a450 <__d2b+0x60>
 800a488:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a48c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a490:	f8c9 0000 	str.w	r0, [r9]
 800a494:	6918      	ldr	r0, [r3, #16]
 800a496:	f7ff fcb9 	bl	8009e0c <__hi0bits>
 800a49a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a49e:	e7df      	b.n	800a460 <__d2b+0x70>
 800a4a0:	0800c8cc 	.word	0x0800c8cc
 800a4a4:	0800c95c 	.word	0x0800c95c

0800a4a8 <__ratio>:
 800a4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ac:	4688      	mov	r8, r1
 800a4ae:	4669      	mov	r1, sp
 800a4b0:	4681      	mov	r9, r0
 800a4b2:	f7ff ff4d 	bl	800a350 <__b2d>
 800a4b6:	a901      	add	r1, sp, #4
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	ec55 4b10 	vmov	r4, r5, d0
 800a4be:	f7ff ff47 	bl	800a350 <__b2d>
 800a4c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a4ca:	eba3 0c02 	sub.w	ip, r3, r2
 800a4ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a4d2:	1a9b      	subs	r3, r3, r2
 800a4d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a4d8:	ec51 0b10 	vmov	r0, r1, d0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	bfd6      	itet	le
 800a4e0:	460a      	movle	r2, r1
 800a4e2:	462a      	movgt	r2, r5
 800a4e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a4e8:	468b      	mov	fp, r1
 800a4ea:	462f      	mov	r7, r5
 800a4ec:	bfd4      	ite	le
 800a4ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a4f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	ee10 2a10 	vmov	r2, s0
 800a4fc:	465b      	mov	r3, fp
 800a4fe:	4639      	mov	r1, r7
 800a500:	f7f6 f9a4 	bl	800084c <__aeabi_ddiv>
 800a504:	ec41 0b10 	vmov	d0, r0, r1
 800a508:	b003      	add	sp, #12
 800a50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a50e <__copybits>:
 800a50e:	3901      	subs	r1, #1
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	1149      	asrs	r1, r1, #5
 800a514:	6914      	ldr	r4, [r2, #16]
 800a516:	3101      	adds	r1, #1
 800a518:	f102 0314 	add.w	r3, r2, #20
 800a51c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a520:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a524:	1f05      	subs	r5, r0, #4
 800a526:	42a3      	cmp	r3, r4
 800a528:	d30c      	bcc.n	800a544 <__copybits+0x36>
 800a52a:	1aa3      	subs	r3, r4, r2
 800a52c:	3b11      	subs	r3, #17
 800a52e:	f023 0303 	bic.w	r3, r3, #3
 800a532:	3211      	adds	r2, #17
 800a534:	42a2      	cmp	r2, r4
 800a536:	bf88      	it	hi
 800a538:	2300      	movhi	r3, #0
 800a53a:	4418      	add	r0, r3
 800a53c:	2300      	movs	r3, #0
 800a53e:	4288      	cmp	r0, r1
 800a540:	d305      	bcc.n	800a54e <__copybits+0x40>
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	f853 6b04 	ldr.w	r6, [r3], #4
 800a548:	f845 6f04 	str.w	r6, [r5, #4]!
 800a54c:	e7eb      	b.n	800a526 <__copybits+0x18>
 800a54e:	f840 3b04 	str.w	r3, [r0], #4
 800a552:	e7f4      	b.n	800a53e <__copybits+0x30>

0800a554 <__any_on>:
 800a554:	f100 0214 	add.w	r2, r0, #20
 800a558:	6900      	ldr	r0, [r0, #16]
 800a55a:	114b      	asrs	r3, r1, #5
 800a55c:	4298      	cmp	r0, r3
 800a55e:	b510      	push	{r4, lr}
 800a560:	db11      	blt.n	800a586 <__any_on+0x32>
 800a562:	dd0a      	ble.n	800a57a <__any_on+0x26>
 800a564:	f011 011f 	ands.w	r1, r1, #31
 800a568:	d007      	beq.n	800a57a <__any_on+0x26>
 800a56a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a56e:	fa24 f001 	lsr.w	r0, r4, r1
 800a572:	fa00 f101 	lsl.w	r1, r0, r1
 800a576:	428c      	cmp	r4, r1
 800a578:	d10b      	bne.n	800a592 <__any_on+0x3e>
 800a57a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a57e:	4293      	cmp	r3, r2
 800a580:	d803      	bhi.n	800a58a <__any_on+0x36>
 800a582:	2000      	movs	r0, #0
 800a584:	bd10      	pop	{r4, pc}
 800a586:	4603      	mov	r3, r0
 800a588:	e7f7      	b.n	800a57a <__any_on+0x26>
 800a58a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a58e:	2900      	cmp	r1, #0
 800a590:	d0f5      	beq.n	800a57e <__any_on+0x2a>
 800a592:	2001      	movs	r0, #1
 800a594:	e7f6      	b.n	800a584 <__any_on+0x30>

0800a596 <_calloc_r>:
 800a596:	b513      	push	{r0, r1, r4, lr}
 800a598:	434a      	muls	r2, r1
 800a59a:	4611      	mov	r1, r2
 800a59c:	9201      	str	r2, [sp, #4]
 800a59e:	f000 f859 	bl	800a654 <_malloc_r>
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	b118      	cbz	r0, 800a5ae <_calloc_r+0x18>
 800a5a6:	9a01      	ldr	r2, [sp, #4]
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	f7fc fb6d 	bl	8006c88 <memset>
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	b002      	add	sp, #8
 800a5b2:	bd10      	pop	{r4, pc}

0800a5b4 <_free_r>:
 800a5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5b6:	2900      	cmp	r1, #0
 800a5b8:	d048      	beq.n	800a64c <_free_r+0x98>
 800a5ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5be:	9001      	str	r0, [sp, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a5c6:	bfb8      	it	lt
 800a5c8:	18e4      	addlt	r4, r4, r3
 800a5ca:	f000 fa7b 	bl	800aac4 <__malloc_lock>
 800a5ce:	4a20      	ldr	r2, [pc, #128]	; (800a650 <_free_r+0x9c>)
 800a5d0:	9801      	ldr	r0, [sp, #4]
 800a5d2:	6813      	ldr	r3, [r2, #0]
 800a5d4:	4615      	mov	r5, r2
 800a5d6:	b933      	cbnz	r3, 800a5e6 <_free_r+0x32>
 800a5d8:	6063      	str	r3, [r4, #4]
 800a5da:	6014      	str	r4, [r2, #0]
 800a5dc:	b003      	add	sp, #12
 800a5de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5e2:	f000 ba75 	b.w	800aad0 <__malloc_unlock>
 800a5e6:	42a3      	cmp	r3, r4
 800a5e8:	d90b      	bls.n	800a602 <_free_r+0x4e>
 800a5ea:	6821      	ldr	r1, [r4, #0]
 800a5ec:	1862      	adds	r2, r4, r1
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	bf04      	itt	eq
 800a5f2:	681a      	ldreq	r2, [r3, #0]
 800a5f4:	685b      	ldreq	r3, [r3, #4]
 800a5f6:	6063      	str	r3, [r4, #4]
 800a5f8:	bf04      	itt	eq
 800a5fa:	1852      	addeq	r2, r2, r1
 800a5fc:	6022      	streq	r2, [r4, #0]
 800a5fe:	602c      	str	r4, [r5, #0]
 800a600:	e7ec      	b.n	800a5dc <_free_r+0x28>
 800a602:	461a      	mov	r2, r3
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	b10b      	cbz	r3, 800a60c <_free_r+0x58>
 800a608:	42a3      	cmp	r3, r4
 800a60a:	d9fa      	bls.n	800a602 <_free_r+0x4e>
 800a60c:	6811      	ldr	r1, [r2, #0]
 800a60e:	1855      	adds	r5, r2, r1
 800a610:	42a5      	cmp	r5, r4
 800a612:	d10b      	bne.n	800a62c <_free_r+0x78>
 800a614:	6824      	ldr	r4, [r4, #0]
 800a616:	4421      	add	r1, r4
 800a618:	1854      	adds	r4, r2, r1
 800a61a:	42a3      	cmp	r3, r4
 800a61c:	6011      	str	r1, [r2, #0]
 800a61e:	d1dd      	bne.n	800a5dc <_free_r+0x28>
 800a620:	681c      	ldr	r4, [r3, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	6053      	str	r3, [r2, #4]
 800a626:	4421      	add	r1, r4
 800a628:	6011      	str	r1, [r2, #0]
 800a62a:	e7d7      	b.n	800a5dc <_free_r+0x28>
 800a62c:	d902      	bls.n	800a634 <_free_r+0x80>
 800a62e:	230c      	movs	r3, #12
 800a630:	6003      	str	r3, [r0, #0]
 800a632:	e7d3      	b.n	800a5dc <_free_r+0x28>
 800a634:	6825      	ldr	r5, [r4, #0]
 800a636:	1961      	adds	r1, r4, r5
 800a638:	428b      	cmp	r3, r1
 800a63a:	bf04      	itt	eq
 800a63c:	6819      	ldreq	r1, [r3, #0]
 800a63e:	685b      	ldreq	r3, [r3, #4]
 800a640:	6063      	str	r3, [r4, #4]
 800a642:	bf04      	itt	eq
 800a644:	1949      	addeq	r1, r1, r5
 800a646:	6021      	streq	r1, [r4, #0]
 800a648:	6054      	str	r4, [r2, #4]
 800a64a:	e7c7      	b.n	800a5dc <_free_r+0x28>
 800a64c:	b003      	add	sp, #12
 800a64e:	bd30      	pop	{r4, r5, pc}
 800a650:	2000037c 	.word	0x2000037c

0800a654 <_malloc_r>:
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a656:	1ccd      	adds	r5, r1, #3
 800a658:	f025 0503 	bic.w	r5, r5, #3
 800a65c:	3508      	adds	r5, #8
 800a65e:	2d0c      	cmp	r5, #12
 800a660:	bf38      	it	cc
 800a662:	250c      	movcc	r5, #12
 800a664:	2d00      	cmp	r5, #0
 800a666:	4606      	mov	r6, r0
 800a668:	db01      	blt.n	800a66e <_malloc_r+0x1a>
 800a66a:	42a9      	cmp	r1, r5
 800a66c:	d903      	bls.n	800a676 <_malloc_r+0x22>
 800a66e:	230c      	movs	r3, #12
 800a670:	6033      	str	r3, [r6, #0]
 800a672:	2000      	movs	r0, #0
 800a674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a676:	f000 fa25 	bl	800aac4 <__malloc_lock>
 800a67a:	4921      	ldr	r1, [pc, #132]	; (800a700 <_malloc_r+0xac>)
 800a67c:	680a      	ldr	r2, [r1, #0]
 800a67e:	4614      	mov	r4, r2
 800a680:	b99c      	cbnz	r4, 800a6aa <_malloc_r+0x56>
 800a682:	4f20      	ldr	r7, [pc, #128]	; (800a704 <_malloc_r+0xb0>)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	b923      	cbnz	r3, 800a692 <_malloc_r+0x3e>
 800a688:	4621      	mov	r1, r4
 800a68a:	4630      	mov	r0, r6
 800a68c:	f000 f9a0 	bl	800a9d0 <_sbrk_r>
 800a690:	6038      	str	r0, [r7, #0]
 800a692:	4629      	mov	r1, r5
 800a694:	4630      	mov	r0, r6
 800a696:	f000 f99b 	bl	800a9d0 <_sbrk_r>
 800a69a:	1c43      	adds	r3, r0, #1
 800a69c:	d123      	bne.n	800a6e6 <_malloc_r+0x92>
 800a69e:	230c      	movs	r3, #12
 800a6a0:	6033      	str	r3, [r6, #0]
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f000 fa14 	bl	800aad0 <__malloc_unlock>
 800a6a8:	e7e3      	b.n	800a672 <_malloc_r+0x1e>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	1b5b      	subs	r3, r3, r5
 800a6ae:	d417      	bmi.n	800a6e0 <_malloc_r+0x8c>
 800a6b0:	2b0b      	cmp	r3, #11
 800a6b2:	d903      	bls.n	800a6bc <_malloc_r+0x68>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	441c      	add	r4, r3
 800a6b8:	6025      	str	r5, [r4, #0]
 800a6ba:	e004      	b.n	800a6c6 <_malloc_r+0x72>
 800a6bc:	6863      	ldr	r3, [r4, #4]
 800a6be:	42a2      	cmp	r2, r4
 800a6c0:	bf0c      	ite	eq
 800a6c2:	600b      	streq	r3, [r1, #0]
 800a6c4:	6053      	strne	r3, [r2, #4]
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f000 fa02 	bl	800aad0 <__malloc_unlock>
 800a6cc:	f104 000b 	add.w	r0, r4, #11
 800a6d0:	1d23      	adds	r3, r4, #4
 800a6d2:	f020 0007 	bic.w	r0, r0, #7
 800a6d6:	1ac2      	subs	r2, r0, r3
 800a6d8:	d0cc      	beq.n	800a674 <_malloc_r+0x20>
 800a6da:	1a1b      	subs	r3, r3, r0
 800a6dc:	50a3      	str	r3, [r4, r2]
 800a6de:	e7c9      	b.n	800a674 <_malloc_r+0x20>
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	6864      	ldr	r4, [r4, #4]
 800a6e4:	e7cc      	b.n	800a680 <_malloc_r+0x2c>
 800a6e6:	1cc4      	adds	r4, r0, #3
 800a6e8:	f024 0403 	bic.w	r4, r4, #3
 800a6ec:	42a0      	cmp	r0, r4
 800a6ee:	d0e3      	beq.n	800a6b8 <_malloc_r+0x64>
 800a6f0:	1a21      	subs	r1, r4, r0
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f000 f96c 	bl	800a9d0 <_sbrk_r>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	d1dd      	bne.n	800a6b8 <_malloc_r+0x64>
 800a6fc:	e7cf      	b.n	800a69e <_malloc_r+0x4a>
 800a6fe:	bf00      	nop
 800a700:	2000037c 	.word	0x2000037c
 800a704:	20000380 	.word	0x20000380

0800a708 <__ssputs_r>:
 800a708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a70c:	688e      	ldr	r6, [r1, #8]
 800a70e:	429e      	cmp	r6, r3
 800a710:	4682      	mov	sl, r0
 800a712:	460c      	mov	r4, r1
 800a714:	4690      	mov	r8, r2
 800a716:	461f      	mov	r7, r3
 800a718:	d838      	bhi.n	800a78c <__ssputs_r+0x84>
 800a71a:	898a      	ldrh	r2, [r1, #12]
 800a71c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a720:	d032      	beq.n	800a788 <__ssputs_r+0x80>
 800a722:	6825      	ldr	r5, [r4, #0]
 800a724:	6909      	ldr	r1, [r1, #16]
 800a726:	eba5 0901 	sub.w	r9, r5, r1
 800a72a:	6965      	ldr	r5, [r4, #20]
 800a72c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a734:	3301      	adds	r3, #1
 800a736:	444b      	add	r3, r9
 800a738:	106d      	asrs	r5, r5, #1
 800a73a:	429d      	cmp	r5, r3
 800a73c:	bf38      	it	cc
 800a73e:	461d      	movcc	r5, r3
 800a740:	0553      	lsls	r3, r2, #21
 800a742:	d531      	bpl.n	800a7a8 <__ssputs_r+0xa0>
 800a744:	4629      	mov	r1, r5
 800a746:	f7ff ff85 	bl	800a654 <_malloc_r>
 800a74a:	4606      	mov	r6, r0
 800a74c:	b950      	cbnz	r0, 800a764 <__ssputs_r+0x5c>
 800a74e:	230c      	movs	r3, #12
 800a750:	f8ca 3000 	str.w	r3, [sl]
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a764:	6921      	ldr	r1, [r4, #16]
 800a766:	464a      	mov	r2, r9
 800a768:	f7ff fa4c 	bl	8009c04 <memcpy>
 800a76c:	89a3      	ldrh	r3, [r4, #12]
 800a76e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a776:	81a3      	strh	r3, [r4, #12]
 800a778:	6126      	str	r6, [r4, #16]
 800a77a:	6165      	str	r5, [r4, #20]
 800a77c:	444e      	add	r6, r9
 800a77e:	eba5 0509 	sub.w	r5, r5, r9
 800a782:	6026      	str	r6, [r4, #0]
 800a784:	60a5      	str	r5, [r4, #8]
 800a786:	463e      	mov	r6, r7
 800a788:	42be      	cmp	r6, r7
 800a78a:	d900      	bls.n	800a78e <__ssputs_r+0x86>
 800a78c:	463e      	mov	r6, r7
 800a78e:	4632      	mov	r2, r6
 800a790:	6820      	ldr	r0, [r4, #0]
 800a792:	4641      	mov	r1, r8
 800a794:	f000 f97c 	bl	800aa90 <memmove>
 800a798:	68a3      	ldr	r3, [r4, #8]
 800a79a:	6822      	ldr	r2, [r4, #0]
 800a79c:	1b9b      	subs	r3, r3, r6
 800a79e:	4432      	add	r2, r6
 800a7a0:	60a3      	str	r3, [r4, #8]
 800a7a2:	6022      	str	r2, [r4, #0]
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	e7db      	b.n	800a760 <__ssputs_r+0x58>
 800a7a8:	462a      	mov	r2, r5
 800a7aa:	f000 f997 	bl	800aadc <_realloc_r>
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d1e1      	bne.n	800a778 <__ssputs_r+0x70>
 800a7b4:	6921      	ldr	r1, [r4, #16]
 800a7b6:	4650      	mov	r0, sl
 800a7b8:	f7ff fefc 	bl	800a5b4 <_free_r>
 800a7bc:	e7c7      	b.n	800a74e <__ssputs_r+0x46>
	...

0800a7c0 <_svfiprintf_r>:
 800a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	4698      	mov	r8, r3
 800a7c6:	898b      	ldrh	r3, [r1, #12]
 800a7c8:	061b      	lsls	r3, r3, #24
 800a7ca:	b09d      	sub	sp, #116	; 0x74
 800a7cc:	4607      	mov	r7, r0
 800a7ce:	460d      	mov	r5, r1
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	d50e      	bpl.n	800a7f2 <_svfiprintf_r+0x32>
 800a7d4:	690b      	ldr	r3, [r1, #16]
 800a7d6:	b963      	cbnz	r3, 800a7f2 <_svfiprintf_r+0x32>
 800a7d8:	2140      	movs	r1, #64	; 0x40
 800a7da:	f7ff ff3b 	bl	800a654 <_malloc_r>
 800a7de:	6028      	str	r0, [r5, #0]
 800a7e0:	6128      	str	r0, [r5, #16]
 800a7e2:	b920      	cbnz	r0, 800a7ee <_svfiprintf_r+0x2e>
 800a7e4:	230c      	movs	r3, #12
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ec:	e0d1      	b.n	800a992 <_svfiprintf_r+0x1d2>
 800a7ee:	2340      	movs	r3, #64	; 0x40
 800a7f0:	616b      	str	r3, [r5, #20]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f6:	2320      	movs	r3, #32
 800a7f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a800:	2330      	movs	r3, #48	; 0x30
 800a802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a9ac <_svfiprintf_r+0x1ec>
 800a806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a80a:	f04f 0901 	mov.w	r9, #1
 800a80e:	4623      	mov	r3, r4
 800a810:	469a      	mov	sl, r3
 800a812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a816:	b10a      	cbz	r2, 800a81c <_svfiprintf_r+0x5c>
 800a818:	2a25      	cmp	r2, #37	; 0x25
 800a81a:	d1f9      	bne.n	800a810 <_svfiprintf_r+0x50>
 800a81c:	ebba 0b04 	subs.w	fp, sl, r4
 800a820:	d00b      	beq.n	800a83a <_svfiprintf_r+0x7a>
 800a822:	465b      	mov	r3, fp
 800a824:	4622      	mov	r2, r4
 800a826:	4629      	mov	r1, r5
 800a828:	4638      	mov	r0, r7
 800a82a:	f7ff ff6d 	bl	800a708 <__ssputs_r>
 800a82e:	3001      	adds	r0, #1
 800a830:	f000 80aa 	beq.w	800a988 <_svfiprintf_r+0x1c8>
 800a834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a836:	445a      	add	r2, fp
 800a838:	9209      	str	r2, [sp, #36]	; 0x24
 800a83a:	f89a 3000 	ldrb.w	r3, [sl]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f000 80a2 	beq.w	800a988 <_svfiprintf_r+0x1c8>
 800a844:	2300      	movs	r3, #0
 800a846:	f04f 32ff 	mov.w	r2, #4294967295
 800a84a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a84e:	f10a 0a01 	add.w	sl, sl, #1
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	9307      	str	r3, [sp, #28]
 800a856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a85a:	931a      	str	r3, [sp, #104]	; 0x68
 800a85c:	4654      	mov	r4, sl
 800a85e:	2205      	movs	r2, #5
 800a860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a864:	4851      	ldr	r0, [pc, #324]	; (800a9ac <_svfiprintf_r+0x1ec>)
 800a866:	f7f5 fcbb 	bl	80001e0 <memchr>
 800a86a:	9a04      	ldr	r2, [sp, #16]
 800a86c:	b9d8      	cbnz	r0, 800a8a6 <_svfiprintf_r+0xe6>
 800a86e:	06d0      	lsls	r0, r2, #27
 800a870:	bf44      	itt	mi
 800a872:	2320      	movmi	r3, #32
 800a874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a878:	0711      	lsls	r1, r2, #28
 800a87a:	bf44      	itt	mi
 800a87c:	232b      	movmi	r3, #43	; 0x2b
 800a87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a882:	f89a 3000 	ldrb.w	r3, [sl]
 800a886:	2b2a      	cmp	r3, #42	; 0x2a
 800a888:	d015      	beq.n	800a8b6 <_svfiprintf_r+0xf6>
 800a88a:	9a07      	ldr	r2, [sp, #28]
 800a88c:	4654      	mov	r4, sl
 800a88e:	2000      	movs	r0, #0
 800a890:	f04f 0c0a 	mov.w	ip, #10
 800a894:	4621      	mov	r1, r4
 800a896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a89a:	3b30      	subs	r3, #48	; 0x30
 800a89c:	2b09      	cmp	r3, #9
 800a89e:	d94e      	bls.n	800a93e <_svfiprintf_r+0x17e>
 800a8a0:	b1b0      	cbz	r0, 800a8d0 <_svfiprintf_r+0x110>
 800a8a2:	9207      	str	r2, [sp, #28]
 800a8a4:	e014      	b.n	800a8d0 <_svfiprintf_r+0x110>
 800a8a6:	eba0 0308 	sub.w	r3, r0, r8
 800a8aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	9304      	str	r3, [sp, #16]
 800a8b2:	46a2      	mov	sl, r4
 800a8b4:	e7d2      	b.n	800a85c <_svfiprintf_r+0x9c>
 800a8b6:	9b03      	ldr	r3, [sp, #12]
 800a8b8:	1d19      	adds	r1, r3, #4
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	9103      	str	r1, [sp, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	bfbb      	ittet	lt
 800a8c2:	425b      	neglt	r3, r3
 800a8c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a8c8:	9307      	strge	r3, [sp, #28]
 800a8ca:	9307      	strlt	r3, [sp, #28]
 800a8cc:	bfb8      	it	lt
 800a8ce:	9204      	strlt	r2, [sp, #16]
 800a8d0:	7823      	ldrb	r3, [r4, #0]
 800a8d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a8d4:	d10c      	bne.n	800a8f0 <_svfiprintf_r+0x130>
 800a8d6:	7863      	ldrb	r3, [r4, #1]
 800a8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a8da:	d135      	bne.n	800a948 <_svfiprintf_r+0x188>
 800a8dc:	9b03      	ldr	r3, [sp, #12]
 800a8de:	1d1a      	adds	r2, r3, #4
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	9203      	str	r2, [sp, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	bfb8      	it	lt
 800a8e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8ec:	3402      	adds	r4, #2
 800a8ee:	9305      	str	r3, [sp, #20]
 800a8f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a9bc <_svfiprintf_r+0x1fc>
 800a8f4:	7821      	ldrb	r1, [r4, #0]
 800a8f6:	2203      	movs	r2, #3
 800a8f8:	4650      	mov	r0, sl
 800a8fa:	f7f5 fc71 	bl	80001e0 <memchr>
 800a8fe:	b140      	cbz	r0, 800a912 <_svfiprintf_r+0x152>
 800a900:	2340      	movs	r3, #64	; 0x40
 800a902:	eba0 000a 	sub.w	r0, r0, sl
 800a906:	fa03 f000 	lsl.w	r0, r3, r0
 800a90a:	9b04      	ldr	r3, [sp, #16]
 800a90c:	4303      	orrs	r3, r0
 800a90e:	3401      	adds	r4, #1
 800a910:	9304      	str	r3, [sp, #16]
 800a912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a916:	4826      	ldr	r0, [pc, #152]	; (800a9b0 <_svfiprintf_r+0x1f0>)
 800a918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a91c:	2206      	movs	r2, #6
 800a91e:	f7f5 fc5f 	bl	80001e0 <memchr>
 800a922:	2800      	cmp	r0, #0
 800a924:	d038      	beq.n	800a998 <_svfiprintf_r+0x1d8>
 800a926:	4b23      	ldr	r3, [pc, #140]	; (800a9b4 <_svfiprintf_r+0x1f4>)
 800a928:	bb1b      	cbnz	r3, 800a972 <_svfiprintf_r+0x1b2>
 800a92a:	9b03      	ldr	r3, [sp, #12]
 800a92c:	3307      	adds	r3, #7
 800a92e:	f023 0307 	bic.w	r3, r3, #7
 800a932:	3308      	adds	r3, #8
 800a934:	9303      	str	r3, [sp, #12]
 800a936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a938:	4433      	add	r3, r6
 800a93a:	9309      	str	r3, [sp, #36]	; 0x24
 800a93c:	e767      	b.n	800a80e <_svfiprintf_r+0x4e>
 800a93e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a942:	460c      	mov	r4, r1
 800a944:	2001      	movs	r0, #1
 800a946:	e7a5      	b.n	800a894 <_svfiprintf_r+0xd4>
 800a948:	2300      	movs	r3, #0
 800a94a:	3401      	adds	r4, #1
 800a94c:	9305      	str	r3, [sp, #20]
 800a94e:	4619      	mov	r1, r3
 800a950:	f04f 0c0a 	mov.w	ip, #10
 800a954:	4620      	mov	r0, r4
 800a956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a95a:	3a30      	subs	r2, #48	; 0x30
 800a95c:	2a09      	cmp	r2, #9
 800a95e:	d903      	bls.n	800a968 <_svfiprintf_r+0x1a8>
 800a960:	2b00      	cmp	r3, #0
 800a962:	d0c5      	beq.n	800a8f0 <_svfiprintf_r+0x130>
 800a964:	9105      	str	r1, [sp, #20]
 800a966:	e7c3      	b.n	800a8f0 <_svfiprintf_r+0x130>
 800a968:	fb0c 2101 	mla	r1, ip, r1, r2
 800a96c:	4604      	mov	r4, r0
 800a96e:	2301      	movs	r3, #1
 800a970:	e7f0      	b.n	800a954 <_svfiprintf_r+0x194>
 800a972:	ab03      	add	r3, sp, #12
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	462a      	mov	r2, r5
 800a978:	4b0f      	ldr	r3, [pc, #60]	; (800a9b8 <_svfiprintf_r+0x1f8>)
 800a97a:	a904      	add	r1, sp, #16
 800a97c:	4638      	mov	r0, r7
 800a97e:	f7fc fa2b 	bl	8006dd8 <_printf_float>
 800a982:	1c42      	adds	r2, r0, #1
 800a984:	4606      	mov	r6, r0
 800a986:	d1d6      	bne.n	800a936 <_svfiprintf_r+0x176>
 800a988:	89ab      	ldrh	r3, [r5, #12]
 800a98a:	065b      	lsls	r3, r3, #25
 800a98c:	f53f af2c 	bmi.w	800a7e8 <_svfiprintf_r+0x28>
 800a990:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a992:	b01d      	add	sp, #116	; 0x74
 800a994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a998:	ab03      	add	r3, sp, #12
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	462a      	mov	r2, r5
 800a99e:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <_svfiprintf_r+0x1f8>)
 800a9a0:	a904      	add	r1, sp, #16
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	f7fc fcbc 	bl	8007320 <_printf_i>
 800a9a8:	e7eb      	b.n	800a982 <_svfiprintf_r+0x1c2>
 800a9aa:	bf00      	nop
 800a9ac:	0800cabc 	.word	0x0800cabc
 800a9b0:	0800cac6 	.word	0x0800cac6
 800a9b4:	08006dd9 	.word	0x08006dd9
 800a9b8:	0800a709 	.word	0x0800a709
 800a9bc:	0800cac2 	.word	0x0800cac2

0800a9c0 <nan>:
 800a9c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9c8 <nan+0x8>
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	00000000 	.word	0x00000000
 800a9cc:	7ff80000 	.word	0x7ff80000

0800a9d0 <_sbrk_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4d06      	ldr	r5, [pc, #24]	; (800a9ec <_sbrk_r+0x1c>)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	4608      	mov	r0, r1
 800a9da:	602b      	str	r3, [r5, #0]
 800a9dc:	f7f9 f808 	bl	80039f0 <_sbrk>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	d102      	bne.n	800a9ea <_sbrk_r+0x1a>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	b103      	cbz	r3, 800a9ea <_sbrk_r+0x1a>
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	200005c0 	.word	0x200005c0

0800a9f0 <strncmp>:
 800a9f0:	b510      	push	{r4, lr}
 800a9f2:	b16a      	cbz	r2, 800aa10 <strncmp+0x20>
 800a9f4:	3901      	subs	r1, #1
 800a9f6:	1884      	adds	r4, r0, r2
 800a9f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a9fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d103      	bne.n	800aa0c <strncmp+0x1c>
 800aa04:	42a0      	cmp	r0, r4
 800aa06:	d001      	beq.n	800aa0c <strncmp+0x1c>
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1f5      	bne.n	800a9f8 <strncmp+0x8>
 800aa0c:	1a98      	subs	r0, r3, r2
 800aa0e:	bd10      	pop	{r4, pc}
 800aa10:	4610      	mov	r0, r2
 800aa12:	e7fc      	b.n	800aa0e <strncmp+0x1e>

0800aa14 <__ascii_wctomb>:
 800aa14:	b149      	cbz	r1, 800aa2a <__ascii_wctomb+0x16>
 800aa16:	2aff      	cmp	r2, #255	; 0xff
 800aa18:	bf85      	ittet	hi
 800aa1a:	238a      	movhi	r3, #138	; 0x8a
 800aa1c:	6003      	strhi	r3, [r0, #0]
 800aa1e:	700a      	strbls	r2, [r1, #0]
 800aa20:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa24:	bf98      	it	ls
 800aa26:	2001      	movls	r0, #1
 800aa28:	4770      	bx	lr
 800aa2a:	4608      	mov	r0, r1
 800aa2c:	4770      	bx	lr
	...

0800aa30 <__assert_func>:
 800aa30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa32:	4614      	mov	r4, r2
 800aa34:	461a      	mov	r2, r3
 800aa36:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <__assert_func+0x2c>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	68d8      	ldr	r0, [r3, #12]
 800aa3e:	b14c      	cbz	r4, 800aa54 <__assert_func+0x24>
 800aa40:	4b07      	ldr	r3, [pc, #28]	; (800aa60 <__assert_func+0x30>)
 800aa42:	9100      	str	r1, [sp, #0]
 800aa44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa48:	4906      	ldr	r1, [pc, #24]	; (800aa64 <__assert_func+0x34>)
 800aa4a:	462b      	mov	r3, r5
 800aa4c:	f000 f80e 	bl	800aa6c <fiprintf>
 800aa50:	f000 fa84 	bl	800af5c <abort>
 800aa54:	4b04      	ldr	r3, [pc, #16]	; (800aa68 <__assert_func+0x38>)
 800aa56:	461c      	mov	r4, r3
 800aa58:	e7f3      	b.n	800aa42 <__assert_func+0x12>
 800aa5a:	bf00      	nop
 800aa5c:	2000016c 	.word	0x2000016c
 800aa60:	0800cacd 	.word	0x0800cacd
 800aa64:	0800cada 	.word	0x0800cada
 800aa68:	0800cb08 	.word	0x0800cb08

0800aa6c <fiprintf>:
 800aa6c:	b40e      	push	{r1, r2, r3}
 800aa6e:	b503      	push	{r0, r1, lr}
 800aa70:	4601      	mov	r1, r0
 800aa72:	ab03      	add	r3, sp, #12
 800aa74:	4805      	ldr	r0, [pc, #20]	; (800aa8c <fiprintf+0x20>)
 800aa76:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa7a:	6800      	ldr	r0, [r0, #0]
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	f000 f87d 	bl	800ab7c <_vfiprintf_r>
 800aa82:	b002      	add	sp, #8
 800aa84:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa88:	b003      	add	sp, #12
 800aa8a:	4770      	bx	lr
 800aa8c:	2000016c 	.word	0x2000016c

0800aa90 <memmove>:
 800aa90:	4288      	cmp	r0, r1
 800aa92:	b510      	push	{r4, lr}
 800aa94:	eb01 0402 	add.w	r4, r1, r2
 800aa98:	d902      	bls.n	800aaa0 <memmove+0x10>
 800aa9a:	4284      	cmp	r4, r0
 800aa9c:	4623      	mov	r3, r4
 800aa9e:	d807      	bhi.n	800aab0 <memmove+0x20>
 800aaa0:	1e43      	subs	r3, r0, #1
 800aaa2:	42a1      	cmp	r1, r4
 800aaa4:	d008      	beq.n	800aab8 <memmove+0x28>
 800aaa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaae:	e7f8      	b.n	800aaa2 <memmove+0x12>
 800aab0:	4402      	add	r2, r0
 800aab2:	4601      	mov	r1, r0
 800aab4:	428a      	cmp	r2, r1
 800aab6:	d100      	bne.n	800aaba <memmove+0x2a>
 800aab8:	bd10      	pop	{r4, pc}
 800aaba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aabe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aac2:	e7f7      	b.n	800aab4 <memmove+0x24>

0800aac4 <__malloc_lock>:
 800aac4:	4801      	ldr	r0, [pc, #4]	; (800aacc <__malloc_lock+0x8>)
 800aac6:	f000 bc09 	b.w	800b2dc <__retarget_lock_acquire_recursive>
 800aaca:	bf00      	nop
 800aacc:	200005c8 	.word	0x200005c8

0800aad0 <__malloc_unlock>:
 800aad0:	4801      	ldr	r0, [pc, #4]	; (800aad8 <__malloc_unlock+0x8>)
 800aad2:	f000 bc04 	b.w	800b2de <__retarget_lock_release_recursive>
 800aad6:	bf00      	nop
 800aad8:	200005c8 	.word	0x200005c8

0800aadc <_realloc_r>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	4607      	mov	r7, r0
 800aae0:	4614      	mov	r4, r2
 800aae2:	460e      	mov	r6, r1
 800aae4:	b921      	cbnz	r1, 800aaf0 <_realloc_r+0x14>
 800aae6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aaea:	4611      	mov	r1, r2
 800aaec:	f7ff bdb2 	b.w	800a654 <_malloc_r>
 800aaf0:	b922      	cbnz	r2, 800aafc <_realloc_r+0x20>
 800aaf2:	f7ff fd5f 	bl	800a5b4 <_free_r>
 800aaf6:	4625      	mov	r5, r4
 800aaf8:	4628      	mov	r0, r5
 800aafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aafc:	f000 fc54 	bl	800b3a8 <_malloc_usable_size_r>
 800ab00:	42a0      	cmp	r0, r4
 800ab02:	d20f      	bcs.n	800ab24 <_realloc_r+0x48>
 800ab04:	4621      	mov	r1, r4
 800ab06:	4638      	mov	r0, r7
 800ab08:	f7ff fda4 	bl	800a654 <_malloc_r>
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d0f2      	beq.n	800aaf8 <_realloc_r+0x1c>
 800ab12:	4631      	mov	r1, r6
 800ab14:	4622      	mov	r2, r4
 800ab16:	f7ff f875 	bl	8009c04 <memcpy>
 800ab1a:	4631      	mov	r1, r6
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f7ff fd49 	bl	800a5b4 <_free_r>
 800ab22:	e7e9      	b.n	800aaf8 <_realloc_r+0x1c>
 800ab24:	4635      	mov	r5, r6
 800ab26:	e7e7      	b.n	800aaf8 <_realloc_r+0x1c>

0800ab28 <__sfputc_r>:
 800ab28:	6893      	ldr	r3, [r2, #8]
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	b410      	push	{r4}
 800ab30:	6093      	str	r3, [r2, #8]
 800ab32:	da08      	bge.n	800ab46 <__sfputc_r+0x1e>
 800ab34:	6994      	ldr	r4, [r2, #24]
 800ab36:	42a3      	cmp	r3, r4
 800ab38:	db01      	blt.n	800ab3e <__sfputc_r+0x16>
 800ab3a:	290a      	cmp	r1, #10
 800ab3c:	d103      	bne.n	800ab46 <__sfputc_r+0x1e>
 800ab3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab42:	f000 b94b 	b.w	800addc <__swbuf_r>
 800ab46:	6813      	ldr	r3, [r2, #0]
 800ab48:	1c58      	adds	r0, r3, #1
 800ab4a:	6010      	str	r0, [r2, #0]
 800ab4c:	7019      	strb	r1, [r3, #0]
 800ab4e:	4608      	mov	r0, r1
 800ab50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <__sfputs_r>:
 800ab56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab58:	4606      	mov	r6, r0
 800ab5a:	460f      	mov	r7, r1
 800ab5c:	4614      	mov	r4, r2
 800ab5e:	18d5      	adds	r5, r2, r3
 800ab60:	42ac      	cmp	r4, r5
 800ab62:	d101      	bne.n	800ab68 <__sfputs_r+0x12>
 800ab64:	2000      	movs	r0, #0
 800ab66:	e007      	b.n	800ab78 <__sfputs_r+0x22>
 800ab68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab6c:	463a      	mov	r2, r7
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f7ff ffda 	bl	800ab28 <__sfputc_r>
 800ab74:	1c43      	adds	r3, r0, #1
 800ab76:	d1f3      	bne.n	800ab60 <__sfputs_r+0xa>
 800ab78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab7c <_vfiprintf_r>:
 800ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab80:	460d      	mov	r5, r1
 800ab82:	b09d      	sub	sp, #116	; 0x74
 800ab84:	4614      	mov	r4, r2
 800ab86:	4698      	mov	r8, r3
 800ab88:	4606      	mov	r6, r0
 800ab8a:	b118      	cbz	r0, 800ab94 <_vfiprintf_r+0x18>
 800ab8c:	6983      	ldr	r3, [r0, #24]
 800ab8e:	b90b      	cbnz	r3, 800ab94 <_vfiprintf_r+0x18>
 800ab90:	f000 fb06 	bl	800b1a0 <__sinit>
 800ab94:	4b89      	ldr	r3, [pc, #548]	; (800adbc <_vfiprintf_r+0x240>)
 800ab96:	429d      	cmp	r5, r3
 800ab98:	d11b      	bne.n	800abd2 <_vfiprintf_r+0x56>
 800ab9a:	6875      	ldr	r5, [r6, #4]
 800ab9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab9e:	07d9      	lsls	r1, r3, #31
 800aba0:	d405      	bmi.n	800abae <_vfiprintf_r+0x32>
 800aba2:	89ab      	ldrh	r3, [r5, #12]
 800aba4:	059a      	lsls	r2, r3, #22
 800aba6:	d402      	bmi.n	800abae <_vfiprintf_r+0x32>
 800aba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abaa:	f000 fb97 	bl	800b2dc <__retarget_lock_acquire_recursive>
 800abae:	89ab      	ldrh	r3, [r5, #12]
 800abb0:	071b      	lsls	r3, r3, #28
 800abb2:	d501      	bpl.n	800abb8 <_vfiprintf_r+0x3c>
 800abb4:	692b      	ldr	r3, [r5, #16]
 800abb6:	b9eb      	cbnz	r3, 800abf4 <_vfiprintf_r+0x78>
 800abb8:	4629      	mov	r1, r5
 800abba:	4630      	mov	r0, r6
 800abbc:	f000 f960 	bl	800ae80 <__swsetup_r>
 800abc0:	b1c0      	cbz	r0, 800abf4 <_vfiprintf_r+0x78>
 800abc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abc4:	07dc      	lsls	r4, r3, #31
 800abc6:	d50e      	bpl.n	800abe6 <_vfiprintf_r+0x6a>
 800abc8:	f04f 30ff 	mov.w	r0, #4294967295
 800abcc:	b01d      	add	sp, #116	; 0x74
 800abce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd2:	4b7b      	ldr	r3, [pc, #492]	; (800adc0 <_vfiprintf_r+0x244>)
 800abd4:	429d      	cmp	r5, r3
 800abd6:	d101      	bne.n	800abdc <_vfiprintf_r+0x60>
 800abd8:	68b5      	ldr	r5, [r6, #8]
 800abda:	e7df      	b.n	800ab9c <_vfiprintf_r+0x20>
 800abdc:	4b79      	ldr	r3, [pc, #484]	; (800adc4 <_vfiprintf_r+0x248>)
 800abde:	429d      	cmp	r5, r3
 800abe0:	bf08      	it	eq
 800abe2:	68f5      	ldreq	r5, [r6, #12]
 800abe4:	e7da      	b.n	800ab9c <_vfiprintf_r+0x20>
 800abe6:	89ab      	ldrh	r3, [r5, #12]
 800abe8:	0598      	lsls	r0, r3, #22
 800abea:	d4ed      	bmi.n	800abc8 <_vfiprintf_r+0x4c>
 800abec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abee:	f000 fb76 	bl	800b2de <__retarget_lock_release_recursive>
 800abf2:	e7e9      	b.n	800abc8 <_vfiprintf_r+0x4c>
 800abf4:	2300      	movs	r3, #0
 800abf6:	9309      	str	r3, [sp, #36]	; 0x24
 800abf8:	2320      	movs	r3, #32
 800abfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac02:	2330      	movs	r3, #48	; 0x30
 800ac04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800adc8 <_vfiprintf_r+0x24c>
 800ac08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac0c:	f04f 0901 	mov.w	r9, #1
 800ac10:	4623      	mov	r3, r4
 800ac12:	469a      	mov	sl, r3
 800ac14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac18:	b10a      	cbz	r2, 800ac1e <_vfiprintf_r+0xa2>
 800ac1a:	2a25      	cmp	r2, #37	; 0x25
 800ac1c:	d1f9      	bne.n	800ac12 <_vfiprintf_r+0x96>
 800ac1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac22:	d00b      	beq.n	800ac3c <_vfiprintf_r+0xc0>
 800ac24:	465b      	mov	r3, fp
 800ac26:	4622      	mov	r2, r4
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f7ff ff93 	bl	800ab56 <__sfputs_r>
 800ac30:	3001      	adds	r0, #1
 800ac32:	f000 80aa 	beq.w	800ad8a <_vfiprintf_r+0x20e>
 800ac36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac38:	445a      	add	r2, fp
 800ac3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 80a2 	beq.w	800ad8a <_vfiprintf_r+0x20e>
 800ac46:	2300      	movs	r3, #0
 800ac48:	f04f 32ff 	mov.w	r2, #4294967295
 800ac4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac50:	f10a 0a01 	add.w	sl, sl, #1
 800ac54:	9304      	str	r3, [sp, #16]
 800ac56:	9307      	str	r3, [sp, #28]
 800ac58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac5c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac5e:	4654      	mov	r4, sl
 800ac60:	2205      	movs	r2, #5
 800ac62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac66:	4858      	ldr	r0, [pc, #352]	; (800adc8 <_vfiprintf_r+0x24c>)
 800ac68:	f7f5 faba 	bl	80001e0 <memchr>
 800ac6c:	9a04      	ldr	r2, [sp, #16]
 800ac6e:	b9d8      	cbnz	r0, 800aca8 <_vfiprintf_r+0x12c>
 800ac70:	06d1      	lsls	r1, r2, #27
 800ac72:	bf44      	itt	mi
 800ac74:	2320      	movmi	r3, #32
 800ac76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac7a:	0713      	lsls	r3, r2, #28
 800ac7c:	bf44      	itt	mi
 800ac7e:	232b      	movmi	r3, #43	; 0x2b
 800ac80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac84:	f89a 3000 	ldrb.w	r3, [sl]
 800ac88:	2b2a      	cmp	r3, #42	; 0x2a
 800ac8a:	d015      	beq.n	800acb8 <_vfiprintf_r+0x13c>
 800ac8c:	9a07      	ldr	r2, [sp, #28]
 800ac8e:	4654      	mov	r4, sl
 800ac90:	2000      	movs	r0, #0
 800ac92:	f04f 0c0a 	mov.w	ip, #10
 800ac96:	4621      	mov	r1, r4
 800ac98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac9c:	3b30      	subs	r3, #48	; 0x30
 800ac9e:	2b09      	cmp	r3, #9
 800aca0:	d94e      	bls.n	800ad40 <_vfiprintf_r+0x1c4>
 800aca2:	b1b0      	cbz	r0, 800acd2 <_vfiprintf_r+0x156>
 800aca4:	9207      	str	r2, [sp, #28]
 800aca6:	e014      	b.n	800acd2 <_vfiprintf_r+0x156>
 800aca8:	eba0 0308 	sub.w	r3, r0, r8
 800acac:	fa09 f303 	lsl.w	r3, r9, r3
 800acb0:	4313      	orrs	r3, r2
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	46a2      	mov	sl, r4
 800acb6:	e7d2      	b.n	800ac5e <_vfiprintf_r+0xe2>
 800acb8:	9b03      	ldr	r3, [sp, #12]
 800acba:	1d19      	adds	r1, r3, #4
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	9103      	str	r1, [sp, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bfbb      	ittet	lt
 800acc4:	425b      	neglt	r3, r3
 800acc6:	f042 0202 	orrlt.w	r2, r2, #2
 800acca:	9307      	strge	r3, [sp, #28]
 800accc:	9307      	strlt	r3, [sp, #28]
 800acce:	bfb8      	it	lt
 800acd0:	9204      	strlt	r2, [sp, #16]
 800acd2:	7823      	ldrb	r3, [r4, #0]
 800acd4:	2b2e      	cmp	r3, #46	; 0x2e
 800acd6:	d10c      	bne.n	800acf2 <_vfiprintf_r+0x176>
 800acd8:	7863      	ldrb	r3, [r4, #1]
 800acda:	2b2a      	cmp	r3, #42	; 0x2a
 800acdc:	d135      	bne.n	800ad4a <_vfiprintf_r+0x1ce>
 800acde:	9b03      	ldr	r3, [sp, #12]
 800ace0:	1d1a      	adds	r2, r3, #4
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	9203      	str	r2, [sp, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	bfb8      	it	lt
 800acea:	f04f 33ff 	movlt.w	r3, #4294967295
 800acee:	3402      	adds	r4, #2
 800acf0:	9305      	str	r3, [sp, #20]
 800acf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800add8 <_vfiprintf_r+0x25c>
 800acf6:	7821      	ldrb	r1, [r4, #0]
 800acf8:	2203      	movs	r2, #3
 800acfa:	4650      	mov	r0, sl
 800acfc:	f7f5 fa70 	bl	80001e0 <memchr>
 800ad00:	b140      	cbz	r0, 800ad14 <_vfiprintf_r+0x198>
 800ad02:	2340      	movs	r3, #64	; 0x40
 800ad04:	eba0 000a 	sub.w	r0, r0, sl
 800ad08:	fa03 f000 	lsl.w	r0, r3, r0
 800ad0c:	9b04      	ldr	r3, [sp, #16]
 800ad0e:	4303      	orrs	r3, r0
 800ad10:	3401      	adds	r4, #1
 800ad12:	9304      	str	r3, [sp, #16]
 800ad14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad18:	482c      	ldr	r0, [pc, #176]	; (800adcc <_vfiprintf_r+0x250>)
 800ad1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad1e:	2206      	movs	r2, #6
 800ad20:	f7f5 fa5e 	bl	80001e0 <memchr>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d03f      	beq.n	800ada8 <_vfiprintf_r+0x22c>
 800ad28:	4b29      	ldr	r3, [pc, #164]	; (800add0 <_vfiprintf_r+0x254>)
 800ad2a:	bb1b      	cbnz	r3, 800ad74 <_vfiprintf_r+0x1f8>
 800ad2c:	9b03      	ldr	r3, [sp, #12]
 800ad2e:	3307      	adds	r3, #7
 800ad30:	f023 0307 	bic.w	r3, r3, #7
 800ad34:	3308      	adds	r3, #8
 800ad36:	9303      	str	r3, [sp, #12]
 800ad38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad3a:	443b      	add	r3, r7
 800ad3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3e:	e767      	b.n	800ac10 <_vfiprintf_r+0x94>
 800ad40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad44:	460c      	mov	r4, r1
 800ad46:	2001      	movs	r0, #1
 800ad48:	e7a5      	b.n	800ac96 <_vfiprintf_r+0x11a>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	3401      	adds	r4, #1
 800ad4e:	9305      	str	r3, [sp, #20]
 800ad50:	4619      	mov	r1, r3
 800ad52:	f04f 0c0a 	mov.w	ip, #10
 800ad56:	4620      	mov	r0, r4
 800ad58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad5c:	3a30      	subs	r2, #48	; 0x30
 800ad5e:	2a09      	cmp	r2, #9
 800ad60:	d903      	bls.n	800ad6a <_vfiprintf_r+0x1ee>
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0c5      	beq.n	800acf2 <_vfiprintf_r+0x176>
 800ad66:	9105      	str	r1, [sp, #20]
 800ad68:	e7c3      	b.n	800acf2 <_vfiprintf_r+0x176>
 800ad6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad6e:	4604      	mov	r4, r0
 800ad70:	2301      	movs	r3, #1
 800ad72:	e7f0      	b.n	800ad56 <_vfiprintf_r+0x1da>
 800ad74:	ab03      	add	r3, sp, #12
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	462a      	mov	r2, r5
 800ad7a:	4b16      	ldr	r3, [pc, #88]	; (800add4 <_vfiprintf_r+0x258>)
 800ad7c:	a904      	add	r1, sp, #16
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7fc f82a 	bl	8006dd8 <_printf_float>
 800ad84:	4607      	mov	r7, r0
 800ad86:	1c78      	adds	r0, r7, #1
 800ad88:	d1d6      	bne.n	800ad38 <_vfiprintf_r+0x1bc>
 800ad8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad8c:	07d9      	lsls	r1, r3, #31
 800ad8e:	d405      	bmi.n	800ad9c <_vfiprintf_r+0x220>
 800ad90:	89ab      	ldrh	r3, [r5, #12]
 800ad92:	059a      	lsls	r2, r3, #22
 800ad94:	d402      	bmi.n	800ad9c <_vfiprintf_r+0x220>
 800ad96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad98:	f000 faa1 	bl	800b2de <__retarget_lock_release_recursive>
 800ad9c:	89ab      	ldrh	r3, [r5, #12]
 800ad9e:	065b      	lsls	r3, r3, #25
 800ada0:	f53f af12 	bmi.w	800abc8 <_vfiprintf_r+0x4c>
 800ada4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ada6:	e711      	b.n	800abcc <_vfiprintf_r+0x50>
 800ada8:	ab03      	add	r3, sp, #12
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	462a      	mov	r2, r5
 800adae:	4b09      	ldr	r3, [pc, #36]	; (800add4 <_vfiprintf_r+0x258>)
 800adb0:	a904      	add	r1, sp, #16
 800adb2:	4630      	mov	r0, r6
 800adb4:	f7fc fab4 	bl	8007320 <_printf_i>
 800adb8:	e7e4      	b.n	800ad84 <_vfiprintf_r+0x208>
 800adba:	bf00      	nop
 800adbc:	0800cb2c 	.word	0x0800cb2c
 800adc0:	0800cb4c 	.word	0x0800cb4c
 800adc4:	0800cb0c 	.word	0x0800cb0c
 800adc8:	0800cabc 	.word	0x0800cabc
 800adcc:	0800cac6 	.word	0x0800cac6
 800add0:	08006dd9 	.word	0x08006dd9
 800add4:	0800ab57 	.word	0x0800ab57
 800add8:	0800cac2 	.word	0x0800cac2

0800addc <__swbuf_r>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	460e      	mov	r6, r1
 800ade0:	4614      	mov	r4, r2
 800ade2:	4605      	mov	r5, r0
 800ade4:	b118      	cbz	r0, 800adee <__swbuf_r+0x12>
 800ade6:	6983      	ldr	r3, [r0, #24]
 800ade8:	b90b      	cbnz	r3, 800adee <__swbuf_r+0x12>
 800adea:	f000 f9d9 	bl	800b1a0 <__sinit>
 800adee:	4b21      	ldr	r3, [pc, #132]	; (800ae74 <__swbuf_r+0x98>)
 800adf0:	429c      	cmp	r4, r3
 800adf2:	d12b      	bne.n	800ae4c <__swbuf_r+0x70>
 800adf4:	686c      	ldr	r4, [r5, #4]
 800adf6:	69a3      	ldr	r3, [r4, #24]
 800adf8:	60a3      	str	r3, [r4, #8]
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	071a      	lsls	r2, r3, #28
 800adfe:	d52f      	bpl.n	800ae60 <__swbuf_r+0x84>
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	b36b      	cbz	r3, 800ae60 <__swbuf_r+0x84>
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	6820      	ldr	r0, [r4, #0]
 800ae08:	1ac0      	subs	r0, r0, r3
 800ae0a:	6963      	ldr	r3, [r4, #20]
 800ae0c:	b2f6      	uxtb	r6, r6
 800ae0e:	4283      	cmp	r3, r0
 800ae10:	4637      	mov	r7, r6
 800ae12:	dc04      	bgt.n	800ae1e <__swbuf_r+0x42>
 800ae14:	4621      	mov	r1, r4
 800ae16:	4628      	mov	r0, r5
 800ae18:	f000 f92e 	bl	800b078 <_fflush_r>
 800ae1c:	bb30      	cbnz	r0, 800ae6c <__swbuf_r+0x90>
 800ae1e:	68a3      	ldr	r3, [r4, #8]
 800ae20:	3b01      	subs	r3, #1
 800ae22:	60a3      	str	r3, [r4, #8]
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	6022      	str	r2, [r4, #0]
 800ae2a:	701e      	strb	r6, [r3, #0]
 800ae2c:	6963      	ldr	r3, [r4, #20]
 800ae2e:	3001      	adds	r0, #1
 800ae30:	4283      	cmp	r3, r0
 800ae32:	d004      	beq.n	800ae3e <__swbuf_r+0x62>
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	07db      	lsls	r3, r3, #31
 800ae38:	d506      	bpl.n	800ae48 <__swbuf_r+0x6c>
 800ae3a:	2e0a      	cmp	r6, #10
 800ae3c:	d104      	bne.n	800ae48 <__swbuf_r+0x6c>
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4628      	mov	r0, r5
 800ae42:	f000 f919 	bl	800b078 <_fflush_r>
 800ae46:	b988      	cbnz	r0, 800ae6c <__swbuf_r+0x90>
 800ae48:	4638      	mov	r0, r7
 800ae4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae4c:	4b0a      	ldr	r3, [pc, #40]	; (800ae78 <__swbuf_r+0x9c>)
 800ae4e:	429c      	cmp	r4, r3
 800ae50:	d101      	bne.n	800ae56 <__swbuf_r+0x7a>
 800ae52:	68ac      	ldr	r4, [r5, #8]
 800ae54:	e7cf      	b.n	800adf6 <__swbuf_r+0x1a>
 800ae56:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <__swbuf_r+0xa0>)
 800ae58:	429c      	cmp	r4, r3
 800ae5a:	bf08      	it	eq
 800ae5c:	68ec      	ldreq	r4, [r5, #12]
 800ae5e:	e7ca      	b.n	800adf6 <__swbuf_r+0x1a>
 800ae60:	4621      	mov	r1, r4
 800ae62:	4628      	mov	r0, r5
 800ae64:	f000 f80c 	bl	800ae80 <__swsetup_r>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d0cb      	beq.n	800ae04 <__swbuf_r+0x28>
 800ae6c:	f04f 37ff 	mov.w	r7, #4294967295
 800ae70:	e7ea      	b.n	800ae48 <__swbuf_r+0x6c>
 800ae72:	bf00      	nop
 800ae74:	0800cb2c 	.word	0x0800cb2c
 800ae78:	0800cb4c 	.word	0x0800cb4c
 800ae7c:	0800cb0c 	.word	0x0800cb0c

0800ae80 <__swsetup_r>:
 800ae80:	4b32      	ldr	r3, [pc, #200]	; (800af4c <__swsetup_r+0xcc>)
 800ae82:	b570      	push	{r4, r5, r6, lr}
 800ae84:	681d      	ldr	r5, [r3, #0]
 800ae86:	4606      	mov	r6, r0
 800ae88:	460c      	mov	r4, r1
 800ae8a:	b125      	cbz	r5, 800ae96 <__swsetup_r+0x16>
 800ae8c:	69ab      	ldr	r3, [r5, #24]
 800ae8e:	b913      	cbnz	r3, 800ae96 <__swsetup_r+0x16>
 800ae90:	4628      	mov	r0, r5
 800ae92:	f000 f985 	bl	800b1a0 <__sinit>
 800ae96:	4b2e      	ldr	r3, [pc, #184]	; (800af50 <__swsetup_r+0xd0>)
 800ae98:	429c      	cmp	r4, r3
 800ae9a:	d10f      	bne.n	800aebc <__swsetup_r+0x3c>
 800ae9c:	686c      	ldr	r4, [r5, #4]
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aea4:	0719      	lsls	r1, r3, #28
 800aea6:	d42c      	bmi.n	800af02 <__swsetup_r+0x82>
 800aea8:	06dd      	lsls	r5, r3, #27
 800aeaa:	d411      	bmi.n	800aed0 <__swsetup_r+0x50>
 800aeac:	2309      	movs	r3, #9
 800aeae:	6033      	str	r3, [r6, #0]
 800aeb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aeb4:	81a3      	strh	r3, [r4, #12]
 800aeb6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeba:	e03e      	b.n	800af3a <__swsetup_r+0xba>
 800aebc:	4b25      	ldr	r3, [pc, #148]	; (800af54 <__swsetup_r+0xd4>)
 800aebe:	429c      	cmp	r4, r3
 800aec0:	d101      	bne.n	800aec6 <__swsetup_r+0x46>
 800aec2:	68ac      	ldr	r4, [r5, #8]
 800aec4:	e7eb      	b.n	800ae9e <__swsetup_r+0x1e>
 800aec6:	4b24      	ldr	r3, [pc, #144]	; (800af58 <__swsetup_r+0xd8>)
 800aec8:	429c      	cmp	r4, r3
 800aeca:	bf08      	it	eq
 800aecc:	68ec      	ldreq	r4, [r5, #12]
 800aece:	e7e6      	b.n	800ae9e <__swsetup_r+0x1e>
 800aed0:	0758      	lsls	r0, r3, #29
 800aed2:	d512      	bpl.n	800aefa <__swsetup_r+0x7a>
 800aed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aed6:	b141      	cbz	r1, 800aeea <__swsetup_r+0x6a>
 800aed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aedc:	4299      	cmp	r1, r3
 800aede:	d002      	beq.n	800aee6 <__swsetup_r+0x66>
 800aee0:	4630      	mov	r0, r6
 800aee2:	f7ff fb67 	bl	800a5b4 <_free_r>
 800aee6:	2300      	movs	r3, #0
 800aee8:	6363      	str	r3, [r4, #52]	; 0x34
 800aeea:	89a3      	ldrh	r3, [r4, #12]
 800aeec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aef0:	81a3      	strh	r3, [r4, #12]
 800aef2:	2300      	movs	r3, #0
 800aef4:	6063      	str	r3, [r4, #4]
 800aef6:	6923      	ldr	r3, [r4, #16]
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	f043 0308 	orr.w	r3, r3, #8
 800af00:	81a3      	strh	r3, [r4, #12]
 800af02:	6923      	ldr	r3, [r4, #16]
 800af04:	b94b      	cbnz	r3, 800af1a <__swsetup_r+0x9a>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af10:	d003      	beq.n	800af1a <__swsetup_r+0x9a>
 800af12:	4621      	mov	r1, r4
 800af14:	4630      	mov	r0, r6
 800af16:	f000 fa07 	bl	800b328 <__smakebuf_r>
 800af1a:	89a0      	ldrh	r0, [r4, #12]
 800af1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af20:	f010 0301 	ands.w	r3, r0, #1
 800af24:	d00a      	beq.n	800af3c <__swsetup_r+0xbc>
 800af26:	2300      	movs	r3, #0
 800af28:	60a3      	str	r3, [r4, #8]
 800af2a:	6963      	ldr	r3, [r4, #20]
 800af2c:	425b      	negs	r3, r3
 800af2e:	61a3      	str	r3, [r4, #24]
 800af30:	6923      	ldr	r3, [r4, #16]
 800af32:	b943      	cbnz	r3, 800af46 <__swsetup_r+0xc6>
 800af34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af38:	d1ba      	bne.n	800aeb0 <__swsetup_r+0x30>
 800af3a:	bd70      	pop	{r4, r5, r6, pc}
 800af3c:	0781      	lsls	r1, r0, #30
 800af3e:	bf58      	it	pl
 800af40:	6963      	ldrpl	r3, [r4, #20]
 800af42:	60a3      	str	r3, [r4, #8]
 800af44:	e7f4      	b.n	800af30 <__swsetup_r+0xb0>
 800af46:	2000      	movs	r0, #0
 800af48:	e7f7      	b.n	800af3a <__swsetup_r+0xba>
 800af4a:	bf00      	nop
 800af4c:	2000016c 	.word	0x2000016c
 800af50:	0800cb2c 	.word	0x0800cb2c
 800af54:	0800cb4c 	.word	0x0800cb4c
 800af58:	0800cb0c 	.word	0x0800cb0c

0800af5c <abort>:
 800af5c:	b508      	push	{r3, lr}
 800af5e:	2006      	movs	r0, #6
 800af60:	f000 fa52 	bl	800b408 <raise>
 800af64:	2001      	movs	r0, #1
 800af66:	f7f8 fccb 	bl	8003900 <_exit>
	...

0800af6c <__sflush_r>:
 800af6c:	898a      	ldrh	r2, [r1, #12]
 800af6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af72:	4605      	mov	r5, r0
 800af74:	0710      	lsls	r0, r2, #28
 800af76:	460c      	mov	r4, r1
 800af78:	d458      	bmi.n	800b02c <__sflush_r+0xc0>
 800af7a:	684b      	ldr	r3, [r1, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dc05      	bgt.n	800af8c <__sflush_r+0x20>
 800af80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af82:	2b00      	cmp	r3, #0
 800af84:	dc02      	bgt.n	800af8c <__sflush_r+0x20>
 800af86:	2000      	movs	r0, #0
 800af88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af8e:	2e00      	cmp	r6, #0
 800af90:	d0f9      	beq.n	800af86 <__sflush_r+0x1a>
 800af92:	2300      	movs	r3, #0
 800af94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af98:	682f      	ldr	r7, [r5, #0]
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	d032      	beq.n	800b004 <__sflush_r+0x98>
 800af9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	075a      	lsls	r2, r3, #29
 800afa4:	d505      	bpl.n	800afb2 <__sflush_r+0x46>
 800afa6:	6863      	ldr	r3, [r4, #4]
 800afa8:	1ac0      	subs	r0, r0, r3
 800afaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afac:	b10b      	cbz	r3, 800afb2 <__sflush_r+0x46>
 800afae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afb0:	1ac0      	subs	r0, r0, r3
 800afb2:	2300      	movs	r3, #0
 800afb4:	4602      	mov	r2, r0
 800afb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afb8:	6a21      	ldr	r1, [r4, #32]
 800afba:	4628      	mov	r0, r5
 800afbc:	47b0      	blx	r6
 800afbe:	1c43      	adds	r3, r0, #1
 800afc0:	89a3      	ldrh	r3, [r4, #12]
 800afc2:	d106      	bne.n	800afd2 <__sflush_r+0x66>
 800afc4:	6829      	ldr	r1, [r5, #0]
 800afc6:	291d      	cmp	r1, #29
 800afc8:	d82c      	bhi.n	800b024 <__sflush_r+0xb8>
 800afca:	4a2a      	ldr	r2, [pc, #168]	; (800b074 <__sflush_r+0x108>)
 800afcc:	40ca      	lsrs	r2, r1
 800afce:	07d6      	lsls	r6, r2, #31
 800afd0:	d528      	bpl.n	800b024 <__sflush_r+0xb8>
 800afd2:	2200      	movs	r2, #0
 800afd4:	6062      	str	r2, [r4, #4]
 800afd6:	04d9      	lsls	r1, r3, #19
 800afd8:	6922      	ldr	r2, [r4, #16]
 800afda:	6022      	str	r2, [r4, #0]
 800afdc:	d504      	bpl.n	800afe8 <__sflush_r+0x7c>
 800afde:	1c42      	adds	r2, r0, #1
 800afe0:	d101      	bne.n	800afe6 <__sflush_r+0x7a>
 800afe2:	682b      	ldr	r3, [r5, #0]
 800afe4:	b903      	cbnz	r3, 800afe8 <__sflush_r+0x7c>
 800afe6:	6560      	str	r0, [r4, #84]	; 0x54
 800afe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afea:	602f      	str	r7, [r5, #0]
 800afec:	2900      	cmp	r1, #0
 800afee:	d0ca      	beq.n	800af86 <__sflush_r+0x1a>
 800aff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aff4:	4299      	cmp	r1, r3
 800aff6:	d002      	beq.n	800affe <__sflush_r+0x92>
 800aff8:	4628      	mov	r0, r5
 800affa:	f7ff fadb 	bl	800a5b4 <_free_r>
 800affe:	2000      	movs	r0, #0
 800b000:	6360      	str	r0, [r4, #52]	; 0x34
 800b002:	e7c1      	b.n	800af88 <__sflush_r+0x1c>
 800b004:	6a21      	ldr	r1, [r4, #32]
 800b006:	2301      	movs	r3, #1
 800b008:	4628      	mov	r0, r5
 800b00a:	47b0      	blx	r6
 800b00c:	1c41      	adds	r1, r0, #1
 800b00e:	d1c7      	bne.n	800afa0 <__sflush_r+0x34>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0c4      	beq.n	800afa0 <__sflush_r+0x34>
 800b016:	2b1d      	cmp	r3, #29
 800b018:	d001      	beq.n	800b01e <__sflush_r+0xb2>
 800b01a:	2b16      	cmp	r3, #22
 800b01c:	d101      	bne.n	800b022 <__sflush_r+0xb6>
 800b01e:	602f      	str	r7, [r5, #0]
 800b020:	e7b1      	b.n	800af86 <__sflush_r+0x1a>
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b028:	81a3      	strh	r3, [r4, #12]
 800b02a:	e7ad      	b.n	800af88 <__sflush_r+0x1c>
 800b02c:	690f      	ldr	r7, [r1, #16]
 800b02e:	2f00      	cmp	r7, #0
 800b030:	d0a9      	beq.n	800af86 <__sflush_r+0x1a>
 800b032:	0793      	lsls	r3, r2, #30
 800b034:	680e      	ldr	r6, [r1, #0]
 800b036:	bf08      	it	eq
 800b038:	694b      	ldreq	r3, [r1, #20]
 800b03a:	600f      	str	r7, [r1, #0]
 800b03c:	bf18      	it	ne
 800b03e:	2300      	movne	r3, #0
 800b040:	eba6 0807 	sub.w	r8, r6, r7
 800b044:	608b      	str	r3, [r1, #8]
 800b046:	f1b8 0f00 	cmp.w	r8, #0
 800b04a:	dd9c      	ble.n	800af86 <__sflush_r+0x1a>
 800b04c:	6a21      	ldr	r1, [r4, #32]
 800b04e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b050:	4643      	mov	r3, r8
 800b052:	463a      	mov	r2, r7
 800b054:	4628      	mov	r0, r5
 800b056:	47b0      	blx	r6
 800b058:	2800      	cmp	r0, #0
 800b05a:	dc06      	bgt.n	800b06a <__sflush_r+0xfe>
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
 800b068:	e78e      	b.n	800af88 <__sflush_r+0x1c>
 800b06a:	4407      	add	r7, r0
 800b06c:	eba8 0800 	sub.w	r8, r8, r0
 800b070:	e7e9      	b.n	800b046 <__sflush_r+0xda>
 800b072:	bf00      	nop
 800b074:	20400001 	.word	0x20400001

0800b078 <_fflush_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	690b      	ldr	r3, [r1, #16]
 800b07c:	4605      	mov	r5, r0
 800b07e:	460c      	mov	r4, r1
 800b080:	b913      	cbnz	r3, 800b088 <_fflush_r+0x10>
 800b082:	2500      	movs	r5, #0
 800b084:	4628      	mov	r0, r5
 800b086:	bd38      	pop	{r3, r4, r5, pc}
 800b088:	b118      	cbz	r0, 800b092 <_fflush_r+0x1a>
 800b08a:	6983      	ldr	r3, [r0, #24]
 800b08c:	b90b      	cbnz	r3, 800b092 <_fflush_r+0x1a>
 800b08e:	f000 f887 	bl	800b1a0 <__sinit>
 800b092:	4b14      	ldr	r3, [pc, #80]	; (800b0e4 <_fflush_r+0x6c>)
 800b094:	429c      	cmp	r4, r3
 800b096:	d11b      	bne.n	800b0d0 <_fflush_r+0x58>
 800b098:	686c      	ldr	r4, [r5, #4]
 800b09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0ef      	beq.n	800b082 <_fflush_r+0xa>
 800b0a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0a4:	07d0      	lsls	r0, r2, #31
 800b0a6:	d404      	bmi.n	800b0b2 <_fflush_r+0x3a>
 800b0a8:	0599      	lsls	r1, r3, #22
 800b0aa:	d402      	bmi.n	800b0b2 <_fflush_r+0x3a>
 800b0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ae:	f000 f915 	bl	800b2dc <__retarget_lock_acquire_recursive>
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	f7ff ff59 	bl	800af6c <__sflush_r>
 800b0ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0bc:	07da      	lsls	r2, r3, #31
 800b0be:	4605      	mov	r5, r0
 800b0c0:	d4e0      	bmi.n	800b084 <_fflush_r+0xc>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	059b      	lsls	r3, r3, #22
 800b0c6:	d4dd      	bmi.n	800b084 <_fflush_r+0xc>
 800b0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ca:	f000 f908 	bl	800b2de <__retarget_lock_release_recursive>
 800b0ce:	e7d9      	b.n	800b084 <_fflush_r+0xc>
 800b0d0:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <_fflush_r+0x70>)
 800b0d2:	429c      	cmp	r4, r3
 800b0d4:	d101      	bne.n	800b0da <_fflush_r+0x62>
 800b0d6:	68ac      	ldr	r4, [r5, #8]
 800b0d8:	e7df      	b.n	800b09a <_fflush_r+0x22>
 800b0da:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <_fflush_r+0x74>)
 800b0dc:	429c      	cmp	r4, r3
 800b0de:	bf08      	it	eq
 800b0e0:	68ec      	ldreq	r4, [r5, #12]
 800b0e2:	e7da      	b.n	800b09a <_fflush_r+0x22>
 800b0e4:	0800cb2c 	.word	0x0800cb2c
 800b0e8:	0800cb4c 	.word	0x0800cb4c
 800b0ec:	0800cb0c 	.word	0x0800cb0c

0800b0f0 <std>:
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	b510      	push	{r4, lr}
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	e9c0 3300 	strd	r3, r3, [r0]
 800b0fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0fe:	6083      	str	r3, [r0, #8]
 800b100:	8181      	strh	r1, [r0, #12]
 800b102:	6643      	str	r3, [r0, #100]	; 0x64
 800b104:	81c2      	strh	r2, [r0, #14]
 800b106:	6183      	str	r3, [r0, #24]
 800b108:	4619      	mov	r1, r3
 800b10a:	2208      	movs	r2, #8
 800b10c:	305c      	adds	r0, #92	; 0x5c
 800b10e:	f7fb fdbb 	bl	8006c88 <memset>
 800b112:	4b05      	ldr	r3, [pc, #20]	; (800b128 <std+0x38>)
 800b114:	6263      	str	r3, [r4, #36]	; 0x24
 800b116:	4b05      	ldr	r3, [pc, #20]	; (800b12c <std+0x3c>)
 800b118:	62a3      	str	r3, [r4, #40]	; 0x28
 800b11a:	4b05      	ldr	r3, [pc, #20]	; (800b130 <std+0x40>)
 800b11c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b11e:	4b05      	ldr	r3, [pc, #20]	; (800b134 <std+0x44>)
 800b120:	6224      	str	r4, [r4, #32]
 800b122:	6323      	str	r3, [r4, #48]	; 0x30
 800b124:	bd10      	pop	{r4, pc}
 800b126:	bf00      	nop
 800b128:	0800b441 	.word	0x0800b441
 800b12c:	0800b463 	.word	0x0800b463
 800b130:	0800b49b 	.word	0x0800b49b
 800b134:	0800b4bf 	.word	0x0800b4bf

0800b138 <_cleanup_r>:
 800b138:	4901      	ldr	r1, [pc, #4]	; (800b140 <_cleanup_r+0x8>)
 800b13a:	f000 b8af 	b.w	800b29c <_fwalk_reent>
 800b13e:	bf00      	nop
 800b140:	0800b079 	.word	0x0800b079

0800b144 <__sfmoreglue>:
 800b144:	b570      	push	{r4, r5, r6, lr}
 800b146:	1e4a      	subs	r2, r1, #1
 800b148:	2568      	movs	r5, #104	; 0x68
 800b14a:	4355      	muls	r5, r2
 800b14c:	460e      	mov	r6, r1
 800b14e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b152:	f7ff fa7f 	bl	800a654 <_malloc_r>
 800b156:	4604      	mov	r4, r0
 800b158:	b140      	cbz	r0, 800b16c <__sfmoreglue+0x28>
 800b15a:	2100      	movs	r1, #0
 800b15c:	e9c0 1600 	strd	r1, r6, [r0]
 800b160:	300c      	adds	r0, #12
 800b162:	60a0      	str	r0, [r4, #8]
 800b164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b168:	f7fb fd8e 	bl	8006c88 <memset>
 800b16c:	4620      	mov	r0, r4
 800b16e:	bd70      	pop	{r4, r5, r6, pc}

0800b170 <__sfp_lock_acquire>:
 800b170:	4801      	ldr	r0, [pc, #4]	; (800b178 <__sfp_lock_acquire+0x8>)
 800b172:	f000 b8b3 	b.w	800b2dc <__retarget_lock_acquire_recursive>
 800b176:	bf00      	nop
 800b178:	200005cc 	.word	0x200005cc

0800b17c <__sfp_lock_release>:
 800b17c:	4801      	ldr	r0, [pc, #4]	; (800b184 <__sfp_lock_release+0x8>)
 800b17e:	f000 b8ae 	b.w	800b2de <__retarget_lock_release_recursive>
 800b182:	bf00      	nop
 800b184:	200005cc 	.word	0x200005cc

0800b188 <__sinit_lock_acquire>:
 800b188:	4801      	ldr	r0, [pc, #4]	; (800b190 <__sinit_lock_acquire+0x8>)
 800b18a:	f000 b8a7 	b.w	800b2dc <__retarget_lock_acquire_recursive>
 800b18e:	bf00      	nop
 800b190:	200005c7 	.word	0x200005c7

0800b194 <__sinit_lock_release>:
 800b194:	4801      	ldr	r0, [pc, #4]	; (800b19c <__sinit_lock_release+0x8>)
 800b196:	f000 b8a2 	b.w	800b2de <__retarget_lock_release_recursive>
 800b19a:	bf00      	nop
 800b19c:	200005c7 	.word	0x200005c7

0800b1a0 <__sinit>:
 800b1a0:	b510      	push	{r4, lr}
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	f7ff fff0 	bl	800b188 <__sinit_lock_acquire>
 800b1a8:	69a3      	ldr	r3, [r4, #24]
 800b1aa:	b11b      	cbz	r3, 800b1b4 <__sinit+0x14>
 800b1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b0:	f7ff bff0 	b.w	800b194 <__sinit_lock_release>
 800b1b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1b8:	6523      	str	r3, [r4, #80]	; 0x50
 800b1ba:	4b13      	ldr	r3, [pc, #76]	; (800b208 <__sinit+0x68>)
 800b1bc:	4a13      	ldr	r2, [pc, #76]	; (800b20c <__sinit+0x6c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1c2:	42a3      	cmp	r3, r4
 800b1c4:	bf04      	itt	eq
 800b1c6:	2301      	moveq	r3, #1
 800b1c8:	61a3      	streq	r3, [r4, #24]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 f820 	bl	800b210 <__sfp>
 800b1d0:	6060      	str	r0, [r4, #4]
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 f81c 	bl	800b210 <__sfp>
 800b1d8:	60a0      	str	r0, [r4, #8]
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 f818 	bl	800b210 <__sfp>
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	60e0      	str	r0, [r4, #12]
 800b1e4:	2104      	movs	r1, #4
 800b1e6:	6860      	ldr	r0, [r4, #4]
 800b1e8:	f7ff ff82 	bl	800b0f0 <std>
 800b1ec:	68a0      	ldr	r0, [r4, #8]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	2109      	movs	r1, #9
 800b1f2:	f7ff ff7d 	bl	800b0f0 <std>
 800b1f6:	68e0      	ldr	r0, [r4, #12]
 800b1f8:	2202      	movs	r2, #2
 800b1fa:	2112      	movs	r1, #18
 800b1fc:	f7ff ff78 	bl	800b0f0 <std>
 800b200:	2301      	movs	r3, #1
 800b202:	61a3      	str	r3, [r4, #24]
 800b204:	e7d2      	b.n	800b1ac <__sinit+0xc>
 800b206:	bf00      	nop
 800b208:	0800c6b8 	.word	0x0800c6b8
 800b20c:	0800b139 	.word	0x0800b139

0800b210 <__sfp>:
 800b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b212:	4607      	mov	r7, r0
 800b214:	f7ff ffac 	bl	800b170 <__sfp_lock_acquire>
 800b218:	4b1e      	ldr	r3, [pc, #120]	; (800b294 <__sfp+0x84>)
 800b21a:	681e      	ldr	r6, [r3, #0]
 800b21c:	69b3      	ldr	r3, [r6, #24]
 800b21e:	b913      	cbnz	r3, 800b226 <__sfp+0x16>
 800b220:	4630      	mov	r0, r6
 800b222:	f7ff ffbd 	bl	800b1a0 <__sinit>
 800b226:	3648      	adds	r6, #72	; 0x48
 800b228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	d503      	bpl.n	800b238 <__sfp+0x28>
 800b230:	6833      	ldr	r3, [r6, #0]
 800b232:	b30b      	cbz	r3, 800b278 <__sfp+0x68>
 800b234:	6836      	ldr	r6, [r6, #0]
 800b236:	e7f7      	b.n	800b228 <__sfp+0x18>
 800b238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b23c:	b9d5      	cbnz	r5, 800b274 <__sfp+0x64>
 800b23e:	4b16      	ldr	r3, [pc, #88]	; (800b298 <__sfp+0x88>)
 800b240:	60e3      	str	r3, [r4, #12]
 800b242:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b246:	6665      	str	r5, [r4, #100]	; 0x64
 800b248:	f000 f847 	bl	800b2da <__retarget_lock_init_recursive>
 800b24c:	f7ff ff96 	bl	800b17c <__sfp_lock_release>
 800b250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b258:	6025      	str	r5, [r4, #0]
 800b25a:	61a5      	str	r5, [r4, #24]
 800b25c:	2208      	movs	r2, #8
 800b25e:	4629      	mov	r1, r5
 800b260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b264:	f7fb fd10 	bl	8006c88 <memset>
 800b268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b26c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b270:	4620      	mov	r0, r4
 800b272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b274:	3468      	adds	r4, #104	; 0x68
 800b276:	e7d9      	b.n	800b22c <__sfp+0x1c>
 800b278:	2104      	movs	r1, #4
 800b27a:	4638      	mov	r0, r7
 800b27c:	f7ff ff62 	bl	800b144 <__sfmoreglue>
 800b280:	4604      	mov	r4, r0
 800b282:	6030      	str	r0, [r6, #0]
 800b284:	2800      	cmp	r0, #0
 800b286:	d1d5      	bne.n	800b234 <__sfp+0x24>
 800b288:	f7ff ff78 	bl	800b17c <__sfp_lock_release>
 800b28c:	230c      	movs	r3, #12
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	e7ee      	b.n	800b270 <__sfp+0x60>
 800b292:	bf00      	nop
 800b294:	0800c6b8 	.word	0x0800c6b8
 800b298:	ffff0001 	.word	0xffff0001

0800b29c <_fwalk_reent>:
 800b29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a0:	4606      	mov	r6, r0
 800b2a2:	4688      	mov	r8, r1
 800b2a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2a8:	2700      	movs	r7, #0
 800b2aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2ae:	f1b9 0901 	subs.w	r9, r9, #1
 800b2b2:	d505      	bpl.n	800b2c0 <_fwalk_reent+0x24>
 800b2b4:	6824      	ldr	r4, [r4, #0]
 800b2b6:	2c00      	cmp	r4, #0
 800b2b8:	d1f7      	bne.n	800b2aa <_fwalk_reent+0xe>
 800b2ba:	4638      	mov	r0, r7
 800b2bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2c0:	89ab      	ldrh	r3, [r5, #12]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d907      	bls.n	800b2d6 <_fwalk_reent+0x3a>
 800b2c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	d003      	beq.n	800b2d6 <_fwalk_reent+0x3a>
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	47c0      	blx	r8
 800b2d4:	4307      	orrs	r7, r0
 800b2d6:	3568      	adds	r5, #104	; 0x68
 800b2d8:	e7e9      	b.n	800b2ae <_fwalk_reent+0x12>

0800b2da <__retarget_lock_init_recursive>:
 800b2da:	4770      	bx	lr

0800b2dc <__retarget_lock_acquire_recursive>:
 800b2dc:	4770      	bx	lr

0800b2de <__retarget_lock_release_recursive>:
 800b2de:	4770      	bx	lr

0800b2e0 <__swhatbuf_r>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	460e      	mov	r6, r1
 800b2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e8:	2900      	cmp	r1, #0
 800b2ea:	b096      	sub	sp, #88	; 0x58
 800b2ec:	4614      	mov	r4, r2
 800b2ee:	461d      	mov	r5, r3
 800b2f0:	da07      	bge.n	800b302 <__swhatbuf_r+0x22>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	602b      	str	r3, [r5, #0]
 800b2f6:	89b3      	ldrh	r3, [r6, #12]
 800b2f8:	061a      	lsls	r2, r3, #24
 800b2fa:	d410      	bmi.n	800b31e <__swhatbuf_r+0x3e>
 800b2fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b300:	e00e      	b.n	800b320 <__swhatbuf_r+0x40>
 800b302:	466a      	mov	r2, sp
 800b304:	f000 f902 	bl	800b50c <_fstat_r>
 800b308:	2800      	cmp	r0, #0
 800b30a:	dbf2      	blt.n	800b2f2 <__swhatbuf_r+0x12>
 800b30c:	9a01      	ldr	r2, [sp, #4]
 800b30e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b316:	425a      	negs	r2, r3
 800b318:	415a      	adcs	r2, r3
 800b31a:	602a      	str	r2, [r5, #0]
 800b31c:	e7ee      	b.n	800b2fc <__swhatbuf_r+0x1c>
 800b31e:	2340      	movs	r3, #64	; 0x40
 800b320:	2000      	movs	r0, #0
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	b016      	add	sp, #88	; 0x58
 800b326:	bd70      	pop	{r4, r5, r6, pc}

0800b328 <__smakebuf_r>:
 800b328:	898b      	ldrh	r3, [r1, #12]
 800b32a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b32c:	079d      	lsls	r5, r3, #30
 800b32e:	4606      	mov	r6, r0
 800b330:	460c      	mov	r4, r1
 800b332:	d507      	bpl.n	800b344 <__smakebuf_r+0x1c>
 800b334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	6123      	str	r3, [r4, #16]
 800b33c:	2301      	movs	r3, #1
 800b33e:	6163      	str	r3, [r4, #20]
 800b340:	b002      	add	sp, #8
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	ab01      	add	r3, sp, #4
 800b346:	466a      	mov	r2, sp
 800b348:	f7ff ffca 	bl	800b2e0 <__swhatbuf_r>
 800b34c:	9900      	ldr	r1, [sp, #0]
 800b34e:	4605      	mov	r5, r0
 800b350:	4630      	mov	r0, r6
 800b352:	f7ff f97f 	bl	800a654 <_malloc_r>
 800b356:	b948      	cbnz	r0, 800b36c <__smakebuf_r+0x44>
 800b358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b35c:	059a      	lsls	r2, r3, #22
 800b35e:	d4ef      	bmi.n	800b340 <__smakebuf_r+0x18>
 800b360:	f023 0303 	bic.w	r3, r3, #3
 800b364:	f043 0302 	orr.w	r3, r3, #2
 800b368:	81a3      	strh	r3, [r4, #12]
 800b36a:	e7e3      	b.n	800b334 <__smakebuf_r+0xc>
 800b36c:	4b0d      	ldr	r3, [pc, #52]	; (800b3a4 <__smakebuf_r+0x7c>)
 800b36e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	6020      	str	r0, [r4, #0]
 800b374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b378:	81a3      	strh	r3, [r4, #12]
 800b37a:	9b00      	ldr	r3, [sp, #0]
 800b37c:	6163      	str	r3, [r4, #20]
 800b37e:	9b01      	ldr	r3, [sp, #4]
 800b380:	6120      	str	r0, [r4, #16]
 800b382:	b15b      	cbz	r3, 800b39c <__smakebuf_r+0x74>
 800b384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b388:	4630      	mov	r0, r6
 800b38a:	f000 f8d1 	bl	800b530 <_isatty_r>
 800b38e:	b128      	cbz	r0, 800b39c <__smakebuf_r+0x74>
 800b390:	89a3      	ldrh	r3, [r4, #12]
 800b392:	f023 0303 	bic.w	r3, r3, #3
 800b396:	f043 0301 	orr.w	r3, r3, #1
 800b39a:	81a3      	strh	r3, [r4, #12]
 800b39c:	89a0      	ldrh	r0, [r4, #12]
 800b39e:	4305      	orrs	r5, r0
 800b3a0:	81a5      	strh	r5, [r4, #12]
 800b3a2:	e7cd      	b.n	800b340 <__smakebuf_r+0x18>
 800b3a4:	0800b139 	.word	0x0800b139

0800b3a8 <_malloc_usable_size_r>:
 800b3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ac:	1f18      	subs	r0, r3, #4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bfbc      	itt	lt
 800b3b2:	580b      	ldrlt	r3, [r1, r0]
 800b3b4:	18c0      	addlt	r0, r0, r3
 800b3b6:	4770      	bx	lr

0800b3b8 <_raise_r>:
 800b3b8:	291f      	cmp	r1, #31
 800b3ba:	b538      	push	{r3, r4, r5, lr}
 800b3bc:	4604      	mov	r4, r0
 800b3be:	460d      	mov	r5, r1
 800b3c0:	d904      	bls.n	800b3cc <_raise_r+0x14>
 800b3c2:	2316      	movs	r3, #22
 800b3c4:	6003      	str	r3, [r0, #0]
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3ce:	b112      	cbz	r2, 800b3d6 <_raise_r+0x1e>
 800b3d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3d4:	b94b      	cbnz	r3, 800b3ea <_raise_r+0x32>
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 f830 	bl	800b43c <_getpid_r>
 800b3dc:	462a      	mov	r2, r5
 800b3de:	4601      	mov	r1, r0
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3e6:	f000 b817 	b.w	800b418 <_kill_r>
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d00a      	beq.n	800b404 <_raise_r+0x4c>
 800b3ee:	1c59      	adds	r1, r3, #1
 800b3f0:	d103      	bne.n	800b3fa <_raise_r+0x42>
 800b3f2:	2316      	movs	r3, #22
 800b3f4:	6003      	str	r3, [r0, #0]
 800b3f6:	2001      	movs	r0, #1
 800b3f8:	e7e7      	b.n	800b3ca <_raise_r+0x12>
 800b3fa:	2400      	movs	r4, #0
 800b3fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b400:	4628      	mov	r0, r5
 800b402:	4798      	blx	r3
 800b404:	2000      	movs	r0, #0
 800b406:	e7e0      	b.n	800b3ca <_raise_r+0x12>

0800b408 <raise>:
 800b408:	4b02      	ldr	r3, [pc, #8]	; (800b414 <raise+0xc>)
 800b40a:	4601      	mov	r1, r0
 800b40c:	6818      	ldr	r0, [r3, #0]
 800b40e:	f7ff bfd3 	b.w	800b3b8 <_raise_r>
 800b412:	bf00      	nop
 800b414:	2000016c 	.word	0x2000016c

0800b418 <_kill_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d07      	ldr	r5, [pc, #28]	; (800b438 <_kill_r+0x20>)
 800b41c:	2300      	movs	r3, #0
 800b41e:	4604      	mov	r4, r0
 800b420:	4608      	mov	r0, r1
 800b422:	4611      	mov	r1, r2
 800b424:	602b      	str	r3, [r5, #0]
 800b426:	f7f8 fa5b 	bl	80038e0 <_kill>
 800b42a:	1c43      	adds	r3, r0, #1
 800b42c:	d102      	bne.n	800b434 <_kill_r+0x1c>
 800b42e:	682b      	ldr	r3, [r5, #0]
 800b430:	b103      	cbz	r3, 800b434 <_kill_r+0x1c>
 800b432:	6023      	str	r3, [r4, #0]
 800b434:	bd38      	pop	{r3, r4, r5, pc}
 800b436:	bf00      	nop
 800b438:	200005c0 	.word	0x200005c0

0800b43c <_getpid_r>:
 800b43c:	f7f8 ba48 	b.w	80038d0 <_getpid>

0800b440 <__sread>:
 800b440:	b510      	push	{r4, lr}
 800b442:	460c      	mov	r4, r1
 800b444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b448:	f000 f894 	bl	800b574 <_read_r>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	bfab      	itete	ge
 800b450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b452:	89a3      	ldrhlt	r3, [r4, #12]
 800b454:	181b      	addge	r3, r3, r0
 800b456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b45a:	bfac      	ite	ge
 800b45c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b45e:	81a3      	strhlt	r3, [r4, #12]
 800b460:	bd10      	pop	{r4, pc}

0800b462 <__swrite>:
 800b462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b466:	461f      	mov	r7, r3
 800b468:	898b      	ldrh	r3, [r1, #12]
 800b46a:	05db      	lsls	r3, r3, #23
 800b46c:	4605      	mov	r5, r0
 800b46e:	460c      	mov	r4, r1
 800b470:	4616      	mov	r6, r2
 800b472:	d505      	bpl.n	800b480 <__swrite+0x1e>
 800b474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b478:	2302      	movs	r3, #2
 800b47a:	2200      	movs	r2, #0
 800b47c:	f000 f868 	bl	800b550 <_lseek_r>
 800b480:	89a3      	ldrh	r3, [r4, #12]
 800b482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b48a:	81a3      	strh	r3, [r4, #12]
 800b48c:	4632      	mov	r2, r6
 800b48e:	463b      	mov	r3, r7
 800b490:	4628      	mov	r0, r5
 800b492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b496:	f000 b817 	b.w	800b4c8 <_write_r>

0800b49a <__sseek>:
 800b49a:	b510      	push	{r4, lr}
 800b49c:	460c      	mov	r4, r1
 800b49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a2:	f000 f855 	bl	800b550 <_lseek_r>
 800b4a6:	1c43      	adds	r3, r0, #1
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	bf15      	itete	ne
 800b4ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4b6:	81a3      	strheq	r3, [r4, #12]
 800b4b8:	bf18      	it	ne
 800b4ba:	81a3      	strhne	r3, [r4, #12]
 800b4bc:	bd10      	pop	{r4, pc}

0800b4be <__sclose>:
 800b4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c2:	f000 b813 	b.w	800b4ec <_close_r>
	...

0800b4c8 <_write_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	4d07      	ldr	r5, [pc, #28]	; (800b4e8 <_write_r+0x20>)
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	4608      	mov	r0, r1
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	602a      	str	r2, [r5, #0]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f7f8 fa39 	bl	800394e <_write>
 800b4dc:	1c43      	adds	r3, r0, #1
 800b4de:	d102      	bne.n	800b4e6 <_write_r+0x1e>
 800b4e0:	682b      	ldr	r3, [r5, #0]
 800b4e2:	b103      	cbz	r3, 800b4e6 <_write_r+0x1e>
 800b4e4:	6023      	str	r3, [r4, #0]
 800b4e6:	bd38      	pop	{r3, r4, r5, pc}
 800b4e8:	200005c0 	.word	0x200005c0

0800b4ec <_close_r>:
 800b4ec:	b538      	push	{r3, r4, r5, lr}
 800b4ee:	4d06      	ldr	r5, [pc, #24]	; (800b508 <_close_r+0x1c>)
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	4608      	mov	r0, r1
 800b4f6:	602b      	str	r3, [r5, #0]
 800b4f8:	f7f8 fa45 	bl	8003986 <_close>
 800b4fc:	1c43      	adds	r3, r0, #1
 800b4fe:	d102      	bne.n	800b506 <_close_r+0x1a>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	b103      	cbz	r3, 800b506 <_close_r+0x1a>
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	200005c0 	.word	0x200005c0

0800b50c <_fstat_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	4d07      	ldr	r5, [pc, #28]	; (800b52c <_fstat_r+0x20>)
 800b510:	2300      	movs	r3, #0
 800b512:	4604      	mov	r4, r0
 800b514:	4608      	mov	r0, r1
 800b516:	4611      	mov	r1, r2
 800b518:	602b      	str	r3, [r5, #0]
 800b51a:	f7f8 fa40 	bl	800399e <_fstat>
 800b51e:	1c43      	adds	r3, r0, #1
 800b520:	d102      	bne.n	800b528 <_fstat_r+0x1c>
 800b522:	682b      	ldr	r3, [r5, #0]
 800b524:	b103      	cbz	r3, 800b528 <_fstat_r+0x1c>
 800b526:	6023      	str	r3, [r4, #0]
 800b528:	bd38      	pop	{r3, r4, r5, pc}
 800b52a:	bf00      	nop
 800b52c:	200005c0 	.word	0x200005c0

0800b530 <_isatty_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4d06      	ldr	r5, [pc, #24]	; (800b54c <_isatty_r+0x1c>)
 800b534:	2300      	movs	r3, #0
 800b536:	4604      	mov	r4, r0
 800b538:	4608      	mov	r0, r1
 800b53a:	602b      	str	r3, [r5, #0]
 800b53c:	f7f8 fa3f 	bl	80039be <_isatty>
 800b540:	1c43      	adds	r3, r0, #1
 800b542:	d102      	bne.n	800b54a <_isatty_r+0x1a>
 800b544:	682b      	ldr	r3, [r5, #0]
 800b546:	b103      	cbz	r3, 800b54a <_isatty_r+0x1a>
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	bd38      	pop	{r3, r4, r5, pc}
 800b54c:	200005c0 	.word	0x200005c0

0800b550 <_lseek_r>:
 800b550:	b538      	push	{r3, r4, r5, lr}
 800b552:	4d07      	ldr	r5, [pc, #28]	; (800b570 <_lseek_r+0x20>)
 800b554:	4604      	mov	r4, r0
 800b556:	4608      	mov	r0, r1
 800b558:	4611      	mov	r1, r2
 800b55a:	2200      	movs	r2, #0
 800b55c:	602a      	str	r2, [r5, #0]
 800b55e:	461a      	mov	r2, r3
 800b560:	f7f8 fa38 	bl	80039d4 <_lseek>
 800b564:	1c43      	adds	r3, r0, #1
 800b566:	d102      	bne.n	800b56e <_lseek_r+0x1e>
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	b103      	cbz	r3, 800b56e <_lseek_r+0x1e>
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	200005c0 	.word	0x200005c0

0800b574 <_read_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4d07      	ldr	r5, [pc, #28]	; (800b594 <_read_r+0x20>)
 800b578:	4604      	mov	r4, r0
 800b57a:	4608      	mov	r0, r1
 800b57c:	4611      	mov	r1, r2
 800b57e:	2200      	movs	r2, #0
 800b580:	602a      	str	r2, [r5, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	f7f8 f9c6 	bl	8003914 <_read>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_read_r+0x1e>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_read_r+0x1e>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	200005c0 	.word	0x200005c0

0800b598 <pow>:
 800b598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b59c:	ec59 8b10 	vmov	r8, r9, d0
 800b5a0:	ec57 6b11 	vmov	r6, r7, d1
 800b5a4:	f000 f8a8 	bl	800b6f8 <__ieee754_pow>
 800b5a8:	4b4e      	ldr	r3, [pc, #312]	; (800b6e4 <pow+0x14c>)
 800b5aa:	f993 3000 	ldrsb.w	r3, [r3]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	ec55 4b10 	vmov	r4, r5, d0
 800b5b4:	d015      	beq.n	800b5e2 <pow+0x4a>
 800b5b6:	4632      	mov	r2, r6
 800b5b8:	463b      	mov	r3, r7
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	4639      	mov	r1, r7
 800b5be:	f7f5 fab5 	bl	8000b2c <__aeabi_dcmpun>
 800b5c2:	b970      	cbnz	r0, 800b5e2 <pow+0x4a>
 800b5c4:	4642      	mov	r2, r8
 800b5c6:	464b      	mov	r3, r9
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	4649      	mov	r1, r9
 800b5cc:	f7f5 faae 	bl	8000b2c <__aeabi_dcmpun>
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	b148      	cbz	r0, 800b5ea <pow+0x52>
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	4639      	mov	r1, r7
 800b5da:	f7f5 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5de:	2800      	cmp	r0, #0
 800b5e0:	d17d      	bne.n	800b6de <pow+0x146>
 800b5e2:	ec45 4b10 	vmov	d0, r4, r5
 800b5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ea:	4640      	mov	r0, r8
 800b5ec:	4649      	mov	r1, r9
 800b5ee:	f7f5 fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5f2:	b1e0      	cbz	r0, 800b62e <pow+0x96>
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	f7f5 fa64 	bl	8000ac8 <__aeabi_dcmpeq>
 800b600:	2800      	cmp	r0, #0
 800b602:	d16c      	bne.n	800b6de <pow+0x146>
 800b604:	ec47 6b10 	vmov	d0, r6, r7
 800b608:	f000 fe55 	bl	800c2b6 <finite>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d0e8      	beq.n	800b5e2 <pow+0x4a>
 800b610:	2200      	movs	r2, #0
 800b612:	2300      	movs	r3, #0
 800b614:	4630      	mov	r0, r6
 800b616:	4639      	mov	r1, r7
 800b618:	f7f5 fa60 	bl	8000adc <__aeabi_dcmplt>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d0e0      	beq.n	800b5e2 <pow+0x4a>
 800b620:	f7fb fb08 	bl	8006c34 <__errno>
 800b624:	2321      	movs	r3, #33	; 0x21
 800b626:	6003      	str	r3, [r0, #0]
 800b628:	2400      	movs	r4, #0
 800b62a:	4d2f      	ldr	r5, [pc, #188]	; (800b6e8 <pow+0x150>)
 800b62c:	e7d9      	b.n	800b5e2 <pow+0x4a>
 800b62e:	ec45 4b10 	vmov	d0, r4, r5
 800b632:	f000 fe40 	bl	800c2b6 <finite>
 800b636:	bbb8      	cbnz	r0, 800b6a8 <pow+0x110>
 800b638:	ec49 8b10 	vmov	d0, r8, r9
 800b63c:	f000 fe3b 	bl	800c2b6 <finite>
 800b640:	b390      	cbz	r0, 800b6a8 <pow+0x110>
 800b642:	ec47 6b10 	vmov	d0, r6, r7
 800b646:	f000 fe36 	bl	800c2b6 <finite>
 800b64a:	b368      	cbz	r0, 800b6a8 <pow+0x110>
 800b64c:	4622      	mov	r2, r4
 800b64e:	462b      	mov	r3, r5
 800b650:	4620      	mov	r0, r4
 800b652:	4629      	mov	r1, r5
 800b654:	f7f5 fa6a 	bl	8000b2c <__aeabi_dcmpun>
 800b658:	b160      	cbz	r0, 800b674 <pow+0xdc>
 800b65a:	f7fb faeb 	bl	8006c34 <__errno>
 800b65e:	2321      	movs	r3, #33	; 0x21
 800b660:	6003      	str	r3, [r0, #0]
 800b662:	2200      	movs	r2, #0
 800b664:	2300      	movs	r3, #0
 800b666:	4610      	mov	r0, r2
 800b668:	4619      	mov	r1, r3
 800b66a:	f7f5 f8ef 	bl	800084c <__aeabi_ddiv>
 800b66e:	4604      	mov	r4, r0
 800b670:	460d      	mov	r5, r1
 800b672:	e7b6      	b.n	800b5e2 <pow+0x4a>
 800b674:	f7fb fade 	bl	8006c34 <__errno>
 800b678:	2322      	movs	r3, #34	; 0x22
 800b67a:	6003      	str	r3, [r0, #0]
 800b67c:	2200      	movs	r2, #0
 800b67e:	2300      	movs	r3, #0
 800b680:	4640      	mov	r0, r8
 800b682:	4649      	mov	r1, r9
 800b684:	f7f5 fa2a 	bl	8000adc <__aeabi_dcmplt>
 800b688:	2400      	movs	r4, #0
 800b68a:	b158      	cbz	r0, 800b6a4 <pow+0x10c>
 800b68c:	ec47 6b10 	vmov	d0, r6, r7
 800b690:	f000 fe1c 	bl	800c2cc <rint>
 800b694:	4632      	mov	r2, r6
 800b696:	ec51 0b10 	vmov	r0, r1, d0
 800b69a:	463b      	mov	r3, r7
 800b69c:	f7f5 fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d0c2      	beq.n	800b62a <pow+0x92>
 800b6a4:	4d11      	ldr	r5, [pc, #68]	; (800b6ec <pow+0x154>)
 800b6a6:	e79c      	b.n	800b5e2 <pow+0x4a>
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	f7f5 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d094      	beq.n	800b5e2 <pow+0x4a>
 800b6b8:	ec49 8b10 	vmov	d0, r8, r9
 800b6bc:	f000 fdfb 	bl	800c2b6 <finite>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d08e      	beq.n	800b5e2 <pow+0x4a>
 800b6c4:	ec47 6b10 	vmov	d0, r6, r7
 800b6c8:	f000 fdf5 	bl	800c2b6 <finite>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d088      	beq.n	800b5e2 <pow+0x4a>
 800b6d0:	f7fb fab0 	bl	8006c34 <__errno>
 800b6d4:	2322      	movs	r3, #34	; 0x22
 800b6d6:	6003      	str	r3, [r0, #0]
 800b6d8:	2400      	movs	r4, #0
 800b6da:	2500      	movs	r5, #0
 800b6dc:	e781      	b.n	800b5e2 <pow+0x4a>
 800b6de:	4d04      	ldr	r5, [pc, #16]	; (800b6f0 <pow+0x158>)
 800b6e0:	2400      	movs	r4, #0
 800b6e2:	e77e      	b.n	800b5e2 <pow+0x4a>
 800b6e4:	20000340 	.word	0x20000340
 800b6e8:	fff00000 	.word	0xfff00000
 800b6ec:	7ff00000 	.word	0x7ff00000
 800b6f0:	3ff00000 	.word	0x3ff00000
 800b6f4:	00000000 	.word	0x00000000

0800b6f8 <__ieee754_pow>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	ed2d 8b06 	vpush	{d8-d10}
 800b700:	b08d      	sub	sp, #52	; 0x34
 800b702:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b706:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b70a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b70e:	ea56 0100 	orrs.w	r1, r6, r0
 800b712:	ec53 2b10 	vmov	r2, r3, d0
 800b716:	f000 84d1 	beq.w	800c0bc <__ieee754_pow+0x9c4>
 800b71a:	497f      	ldr	r1, [pc, #508]	; (800b918 <__ieee754_pow+0x220>)
 800b71c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b720:	428c      	cmp	r4, r1
 800b722:	ee10 8a10 	vmov	r8, s0
 800b726:	4699      	mov	r9, r3
 800b728:	dc09      	bgt.n	800b73e <__ieee754_pow+0x46>
 800b72a:	d103      	bne.n	800b734 <__ieee754_pow+0x3c>
 800b72c:	b97a      	cbnz	r2, 800b74e <__ieee754_pow+0x56>
 800b72e:	42a6      	cmp	r6, r4
 800b730:	dd02      	ble.n	800b738 <__ieee754_pow+0x40>
 800b732:	e00c      	b.n	800b74e <__ieee754_pow+0x56>
 800b734:	428e      	cmp	r6, r1
 800b736:	dc02      	bgt.n	800b73e <__ieee754_pow+0x46>
 800b738:	428e      	cmp	r6, r1
 800b73a:	d110      	bne.n	800b75e <__ieee754_pow+0x66>
 800b73c:	b178      	cbz	r0, 800b75e <__ieee754_pow+0x66>
 800b73e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b742:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b746:	ea54 0308 	orrs.w	r3, r4, r8
 800b74a:	f000 84b7 	beq.w	800c0bc <__ieee754_pow+0x9c4>
 800b74e:	4873      	ldr	r0, [pc, #460]	; (800b91c <__ieee754_pow+0x224>)
 800b750:	b00d      	add	sp, #52	; 0x34
 800b752:	ecbd 8b06 	vpop	{d8-d10}
 800b756:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75a:	f7ff b931 	b.w	800a9c0 <nan>
 800b75e:	f1b9 0f00 	cmp.w	r9, #0
 800b762:	da36      	bge.n	800b7d2 <__ieee754_pow+0xda>
 800b764:	496e      	ldr	r1, [pc, #440]	; (800b920 <__ieee754_pow+0x228>)
 800b766:	428e      	cmp	r6, r1
 800b768:	dc51      	bgt.n	800b80e <__ieee754_pow+0x116>
 800b76a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b76e:	428e      	cmp	r6, r1
 800b770:	f340 84af 	ble.w	800c0d2 <__ieee754_pow+0x9da>
 800b774:	1531      	asrs	r1, r6, #20
 800b776:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b77a:	2914      	cmp	r1, #20
 800b77c:	dd0f      	ble.n	800b79e <__ieee754_pow+0xa6>
 800b77e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b782:	fa20 fc01 	lsr.w	ip, r0, r1
 800b786:	fa0c f101 	lsl.w	r1, ip, r1
 800b78a:	4281      	cmp	r1, r0
 800b78c:	f040 84a1 	bne.w	800c0d2 <__ieee754_pow+0x9da>
 800b790:	f00c 0c01 	and.w	ip, ip, #1
 800b794:	f1cc 0102 	rsb	r1, ip, #2
 800b798:	9100      	str	r1, [sp, #0]
 800b79a:	b180      	cbz	r0, 800b7be <__ieee754_pow+0xc6>
 800b79c:	e059      	b.n	800b852 <__ieee754_pow+0x15a>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d155      	bne.n	800b84e <__ieee754_pow+0x156>
 800b7a2:	f1c1 0114 	rsb	r1, r1, #20
 800b7a6:	fa46 fc01 	asr.w	ip, r6, r1
 800b7aa:	fa0c f101 	lsl.w	r1, ip, r1
 800b7ae:	42b1      	cmp	r1, r6
 800b7b0:	f040 848c 	bne.w	800c0cc <__ieee754_pow+0x9d4>
 800b7b4:	f00c 0c01 	and.w	ip, ip, #1
 800b7b8:	f1cc 0102 	rsb	r1, ip, #2
 800b7bc:	9100      	str	r1, [sp, #0]
 800b7be:	4959      	ldr	r1, [pc, #356]	; (800b924 <__ieee754_pow+0x22c>)
 800b7c0:	428e      	cmp	r6, r1
 800b7c2:	d12d      	bne.n	800b820 <__ieee754_pow+0x128>
 800b7c4:	2f00      	cmp	r7, #0
 800b7c6:	da79      	bge.n	800b8bc <__ieee754_pow+0x1c4>
 800b7c8:	4956      	ldr	r1, [pc, #344]	; (800b924 <__ieee754_pow+0x22c>)
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	f7f5 f83e 	bl	800084c <__aeabi_ddiv>
 800b7d0:	e016      	b.n	800b800 <__ieee754_pow+0x108>
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	9100      	str	r1, [sp, #0]
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d13b      	bne.n	800b852 <__ieee754_pow+0x15a>
 800b7da:	494f      	ldr	r1, [pc, #316]	; (800b918 <__ieee754_pow+0x220>)
 800b7dc:	428e      	cmp	r6, r1
 800b7de:	d1ee      	bne.n	800b7be <__ieee754_pow+0xc6>
 800b7e0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b7e4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b7e8:	ea53 0308 	orrs.w	r3, r3, r8
 800b7ec:	f000 8466 	beq.w	800c0bc <__ieee754_pow+0x9c4>
 800b7f0:	4b4d      	ldr	r3, [pc, #308]	; (800b928 <__ieee754_pow+0x230>)
 800b7f2:	429c      	cmp	r4, r3
 800b7f4:	dd0d      	ble.n	800b812 <__ieee754_pow+0x11a>
 800b7f6:	2f00      	cmp	r7, #0
 800b7f8:	f280 8464 	bge.w	800c0c4 <__ieee754_pow+0x9cc>
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	2100      	movs	r1, #0
 800b800:	ec41 0b10 	vmov	d0, r0, r1
 800b804:	b00d      	add	sp, #52	; 0x34
 800b806:	ecbd 8b06 	vpop	{d8-d10}
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	2102      	movs	r1, #2
 800b810:	e7e0      	b.n	800b7d4 <__ieee754_pow+0xdc>
 800b812:	2f00      	cmp	r7, #0
 800b814:	daf2      	bge.n	800b7fc <__ieee754_pow+0x104>
 800b816:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b81a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b81e:	e7ef      	b.n	800b800 <__ieee754_pow+0x108>
 800b820:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b824:	d104      	bne.n	800b830 <__ieee754_pow+0x138>
 800b826:	4610      	mov	r0, r2
 800b828:	4619      	mov	r1, r3
 800b82a:	f7f4 fee5 	bl	80005f8 <__aeabi_dmul>
 800b82e:	e7e7      	b.n	800b800 <__ieee754_pow+0x108>
 800b830:	493e      	ldr	r1, [pc, #248]	; (800b92c <__ieee754_pow+0x234>)
 800b832:	428f      	cmp	r7, r1
 800b834:	d10d      	bne.n	800b852 <__ieee754_pow+0x15a>
 800b836:	f1b9 0f00 	cmp.w	r9, #0
 800b83a:	db0a      	blt.n	800b852 <__ieee754_pow+0x15a>
 800b83c:	ec43 2b10 	vmov	d0, r2, r3
 800b840:	b00d      	add	sp, #52	; 0x34
 800b842:	ecbd 8b06 	vpop	{d8-d10}
 800b846:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84a:	f000 bc77 	b.w	800c13c <__ieee754_sqrt>
 800b84e:	2100      	movs	r1, #0
 800b850:	9100      	str	r1, [sp, #0]
 800b852:	ec43 2b10 	vmov	d0, r2, r3
 800b856:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b85a:	f000 fd23 	bl	800c2a4 <fabs>
 800b85e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b862:	ec51 0b10 	vmov	r0, r1, d0
 800b866:	f1b8 0f00 	cmp.w	r8, #0
 800b86a:	d12a      	bne.n	800b8c2 <__ieee754_pow+0x1ca>
 800b86c:	b12c      	cbz	r4, 800b87a <__ieee754_pow+0x182>
 800b86e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b924 <__ieee754_pow+0x22c>
 800b872:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b876:	45e6      	cmp	lr, ip
 800b878:	d123      	bne.n	800b8c2 <__ieee754_pow+0x1ca>
 800b87a:	2f00      	cmp	r7, #0
 800b87c:	da05      	bge.n	800b88a <__ieee754_pow+0x192>
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	2000      	movs	r0, #0
 800b884:	4927      	ldr	r1, [pc, #156]	; (800b924 <__ieee754_pow+0x22c>)
 800b886:	f7f4 ffe1 	bl	800084c <__aeabi_ddiv>
 800b88a:	f1b9 0f00 	cmp.w	r9, #0
 800b88e:	dab7      	bge.n	800b800 <__ieee754_pow+0x108>
 800b890:	9b00      	ldr	r3, [sp, #0]
 800b892:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b896:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b89a:	4323      	orrs	r3, r4
 800b89c:	d108      	bne.n	800b8b0 <__ieee754_pow+0x1b8>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f7f4 fcef 	bl	8000288 <__aeabi_dsub>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	e78d      	b.n	800b7cc <__ieee754_pow+0xd4>
 800b8b0:	9b00      	ldr	r3, [sp, #0]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d1a4      	bne.n	800b800 <__ieee754_pow+0x108>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8bc:	4610      	mov	r0, r2
 800b8be:	4619      	mov	r1, r3
 800b8c0:	e79e      	b.n	800b800 <__ieee754_pow+0x108>
 800b8c2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b8c6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800b8ca:	950a      	str	r5, [sp, #40]	; 0x28
 800b8cc:	9d00      	ldr	r5, [sp, #0]
 800b8ce:	46ac      	mov	ip, r5
 800b8d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b8d2:	ea5c 0505 	orrs.w	r5, ip, r5
 800b8d6:	d0e4      	beq.n	800b8a2 <__ieee754_pow+0x1aa>
 800b8d8:	4b15      	ldr	r3, [pc, #84]	; (800b930 <__ieee754_pow+0x238>)
 800b8da:	429e      	cmp	r6, r3
 800b8dc:	f340 80fc 	ble.w	800bad8 <__ieee754_pow+0x3e0>
 800b8e0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b8e4:	429e      	cmp	r6, r3
 800b8e6:	4b10      	ldr	r3, [pc, #64]	; (800b928 <__ieee754_pow+0x230>)
 800b8e8:	dd07      	ble.n	800b8fa <__ieee754_pow+0x202>
 800b8ea:	429c      	cmp	r4, r3
 800b8ec:	dc0a      	bgt.n	800b904 <__ieee754_pow+0x20c>
 800b8ee:	2f00      	cmp	r7, #0
 800b8f0:	da84      	bge.n	800b7fc <__ieee754_pow+0x104>
 800b8f2:	a307      	add	r3, pc, #28	; (adr r3, 800b910 <__ieee754_pow+0x218>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	e795      	b.n	800b826 <__ieee754_pow+0x12e>
 800b8fa:	429c      	cmp	r4, r3
 800b8fc:	dbf7      	blt.n	800b8ee <__ieee754_pow+0x1f6>
 800b8fe:	4b09      	ldr	r3, [pc, #36]	; (800b924 <__ieee754_pow+0x22c>)
 800b900:	429c      	cmp	r4, r3
 800b902:	dd17      	ble.n	800b934 <__ieee754_pow+0x23c>
 800b904:	2f00      	cmp	r7, #0
 800b906:	dcf4      	bgt.n	800b8f2 <__ieee754_pow+0x1fa>
 800b908:	e778      	b.n	800b7fc <__ieee754_pow+0x104>
 800b90a:	bf00      	nop
 800b90c:	f3af 8000 	nop.w
 800b910:	8800759c 	.word	0x8800759c
 800b914:	7e37e43c 	.word	0x7e37e43c
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	0800cb08 	.word	0x0800cb08
 800b920:	433fffff 	.word	0x433fffff
 800b924:	3ff00000 	.word	0x3ff00000
 800b928:	3fefffff 	.word	0x3fefffff
 800b92c:	3fe00000 	.word	0x3fe00000
 800b930:	41e00000 	.word	0x41e00000
 800b934:	4b64      	ldr	r3, [pc, #400]	; (800bac8 <__ieee754_pow+0x3d0>)
 800b936:	2200      	movs	r2, #0
 800b938:	f7f4 fca6 	bl	8000288 <__aeabi_dsub>
 800b93c:	a356      	add	r3, pc, #344	; (adr r3, 800ba98 <__ieee754_pow+0x3a0>)
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	4604      	mov	r4, r0
 800b944:	460d      	mov	r5, r1
 800b946:	f7f4 fe57 	bl	80005f8 <__aeabi_dmul>
 800b94a:	a355      	add	r3, pc, #340	; (adr r3, 800baa0 <__ieee754_pow+0x3a8>)
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	4606      	mov	r6, r0
 800b952:	460f      	mov	r7, r1
 800b954:	4620      	mov	r0, r4
 800b956:	4629      	mov	r1, r5
 800b958:	f7f4 fe4e 	bl	80005f8 <__aeabi_dmul>
 800b95c:	4b5b      	ldr	r3, [pc, #364]	; (800bacc <__ieee754_pow+0x3d4>)
 800b95e:	4682      	mov	sl, r0
 800b960:	468b      	mov	fp, r1
 800b962:	2200      	movs	r2, #0
 800b964:	4620      	mov	r0, r4
 800b966:	4629      	mov	r1, r5
 800b968:	f7f4 fe46 	bl	80005f8 <__aeabi_dmul>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	a14d      	add	r1, pc, #308	; (adr r1, 800baa8 <__ieee754_pow+0x3b0>)
 800b972:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b976:	f7f4 fc87 	bl	8000288 <__aeabi_dsub>
 800b97a:	4622      	mov	r2, r4
 800b97c:	462b      	mov	r3, r5
 800b97e:	f7f4 fe3b 	bl	80005f8 <__aeabi_dmul>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	2000      	movs	r0, #0
 800b988:	4951      	ldr	r1, [pc, #324]	; (800bad0 <__ieee754_pow+0x3d8>)
 800b98a:	f7f4 fc7d 	bl	8000288 <__aeabi_dsub>
 800b98e:	4622      	mov	r2, r4
 800b990:	4680      	mov	r8, r0
 800b992:	4689      	mov	r9, r1
 800b994:	462b      	mov	r3, r5
 800b996:	4620      	mov	r0, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	f7f4 fe2d 	bl	80005f8 <__aeabi_dmul>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	f7f4 fe27 	bl	80005f8 <__aeabi_dmul>
 800b9aa:	a341      	add	r3, pc, #260	; (adr r3, 800bab0 <__ieee754_pow+0x3b8>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	f7f4 fe22 	bl	80005f8 <__aeabi_dmul>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	4650      	mov	r0, sl
 800b9ba:	4659      	mov	r1, fp
 800b9bc:	f7f4 fc64 	bl	8000288 <__aeabi_dsub>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4680      	mov	r8, r0
 800b9c6:	4689      	mov	r9, r1
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	f7f4 fc5e 	bl	800028c <__adddf3>
 800b9d0:	2400      	movs	r4, #0
 800b9d2:	4632      	mov	r2, r6
 800b9d4:	463b      	mov	r3, r7
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	460d      	mov	r5, r1
 800b9da:	f7f4 fc55 	bl	8000288 <__aeabi_dsub>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	f7f4 fc4f 	bl	8000288 <__aeabi_dsub>
 800b9ea:	9b00      	ldr	r3, [sp, #0]
 800b9ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	4682      	mov	sl, r0
 800b9f4:	468b      	mov	fp, r1
 800b9f6:	f040 81f1 	bne.w	800bddc <__ieee754_pow+0x6e4>
 800b9fa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bab8 <__ieee754_pow+0x3c0>
 800b9fe:	eeb0 8a47 	vmov.f32	s16, s14
 800ba02:	eef0 8a67 	vmov.f32	s17, s15
 800ba06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba0a:	2600      	movs	r6, #0
 800ba0c:	4632      	mov	r2, r6
 800ba0e:	463b      	mov	r3, r7
 800ba10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba14:	f7f4 fc38 	bl	8000288 <__aeabi_dsub>
 800ba18:	4622      	mov	r2, r4
 800ba1a:	462b      	mov	r3, r5
 800ba1c:	f7f4 fdec 	bl	80005f8 <__aeabi_dmul>
 800ba20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba24:	4680      	mov	r8, r0
 800ba26:	4689      	mov	r9, r1
 800ba28:	4650      	mov	r0, sl
 800ba2a:	4659      	mov	r1, fp
 800ba2c:	f7f4 fde4 	bl	80005f8 <__aeabi_dmul>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	4640      	mov	r0, r8
 800ba36:	4649      	mov	r1, r9
 800ba38:	f7f4 fc28 	bl	800028c <__adddf3>
 800ba3c:	4632      	mov	r2, r6
 800ba3e:	463b      	mov	r3, r7
 800ba40:	4680      	mov	r8, r0
 800ba42:	4689      	mov	r9, r1
 800ba44:	4620      	mov	r0, r4
 800ba46:	4629      	mov	r1, r5
 800ba48:	f7f4 fdd6 	bl	80005f8 <__aeabi_dmul>
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4604      	mov	r4, r0
 800ba50:	460d      	mov	r5, r1
 800ba52:	4602      	mov	r2, r0
 800ba54:	4649      	mov	r1, r9
 800ba56:	4640      	mov	r0, r8
 800ba58:	f7f4 fc18 	bl	800028c <__adddf3>
 800ba5c:	4b1d      	ldr	r3, [pc, #116]	; (800bad4 <__ieee754_pow+0x3dc>)
 800ba5e:	4299      	cmp	r1, r3
 800ba60:	ec45 4b19 	vmov	d9, r4, r5
 800ba64:	4606      	mov	r6, r0
 800ba66:	460f      	mov	r7, r1
 800ba68:	468b      	mov	fp, r1
 800ba6a:	f340 82fe 	ble.w	800c06a <__ieee754_pow+0x972>
 800ba6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ba72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ba76:	4303      	orrs	r3, r0
 800ba78:	f000 81f0 	beq.w	800be5c <__ieee754_pow+0x764>
 800ba7c:	a310      	add	r3, pc, #64	; (adr r3, 800bac0 <__ieee754_pow+0x3c8>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	ec51 0b18 	vmov	r0, r1, d8
 800ba86:	f7f4 fdb7 	bl	80005f8 <__aeabi_dmul>
 800ba8a:	a30d      	add	r3, pc, #52	; (adr r3, 800bac0 <__ieee754_pow+0x3c8>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	e6cb      	b.n	800b82a <__ieee754_pow+0x132>
 800ba92:	bf00      	nop
 800ba94:	f3af 8000 	nop.w
 800ba98:	60000000 	.word	0x60000000
 800ba9c:	3ff71547 	.word	0x3ff71547
 800baa0:	f85ddf44 	.word	0xf85ddf44
 800baa4:	3e54ae0b 	.word	0x3e54ae0b
 800baa8:	55555555 	.word	0x55555555
 800baac:	3fd55555 	.word	0x3fd55555
 800bab0:	652b82fe 	.word	0x652b82fe
 800bab4:	3ff71547 	.word	0x3ff71547
 800bab8:	00000000 	.word	0x00000000
 800babc:	bff00000 	.word	0xbff00000
 800bac0:	8800759c 	.word	0x8800759c
 800bac4:	7e37e43c 	.word	0x7e37e43c
 800bac8:	3ff00000 	.word	0x3ff00000
 800bacc:	3fd00000 	.word	0x3fd00000
 800bad0:	3fe00000 	.word	0x3fe00000
 800bad4:	408fffff 	.word	0x408fffff
 800bad8:	4bd7      	ldr	r3, [pc, #860]	; (800be38 <__ieee754_pow+0x740>)
 800bada:	ea03 0309 	and.w	r3, r3, r9
 800bade:	2200      	movs	r2, #0
 800bae0:	b92b      	cbnz	r3, 800baee <__ieee754_pow+0x3f6>
 800bae2:	4bd6      	ldr	r3, [pc, #856]	; (800be3c <__ieee754_pow+0x744>)
 800bae4:	f7f4 fd88 	bl	80005f8 <__aeabi_dmul>
 800bae8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800baec:	460c      	mov	r4, r1
 800baee:	1523      	asrs	r3, r4, #20
 800baf0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800baf4:	4413      	add	r3, r2
 800baf6:	9309      	str	r3, [sp, #36]	; 0x24
 800baf8:	4bd1      	ldr	r3, [pc, #836]	; (800be40 <__ieee754_pow+0x748>)
 800bafa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bafe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bb02:	429c      	cmp	r4, r3
 800bb04:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bb08:	dd08      	ble.n	800bb1c <__ieee754_pow+0x424>
 800bb0a:	4bce      	ldr	r3, [pc, #824]	; (800be44 <__ieee754_pow+0x74c>)
 800bb0c:	429c      	cmp	r4, r3
 800bb0e:	f340 8163 	ble.w	800bdd8 <__ieee754_pow+0x6e0>
 800bb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb14:	3301      	adds	r3, #1
 800bb16:	9309      	str	r3, [sp, #36]	; 0x24
 800bb18:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bb1c:	2400      	movs	r4, #0
 800bb1e:	00e3      	lsls	r3, r4, #3
 800bb20:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb22:	4bc9      	ldr	r3, [pc, #804]	; (800be48 <__ieee754_pow+0x750>)
 800bb24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb28:	ed93 7b00 	vldr	d7, [r3]
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	ec53 2b17 	vmov	r2, r3, d7
 800bb32:	eeb0 8a47 	vmov.f32	s16, s14
 800bb36:	eef0 8a67 	vmov.f32	s17, s15
 800bb3a:	4682      	mov	sl, r0
 800bb3c:	f7f4 fba4 	bl	8000288 <__aeabi_dsub>
 800bb40:	4652      	mov	r2, sl
 800bb42:	4606      	mov	r6, r0
 800bb44:	460f      	mov	r7, r1
 800bb46:	462b      	mov	r3, r5
 800bb48:	ec51 0b18 	vmov	r0, r1, d8
 800bb4c:	f7f4 fb9e 	bl	800028c <__adddf3>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	2000      	movs	r0, #0
 800bb56:	49bd      	ldr	r1, [pc, #756]	; (800be4c <__ieee754_pow+0x754>)
 800bb58:	f7f4 fe78 	bl	800084c <__aeabi_ddiv>
 800bb5c:	ec41 0b19 	vmov	d9, r0, r1
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4630      	mov	r0, r6
 800bb66:	4639      	mov	r1, r7
 800bb68:	f7f4 fd46 	bl	80005f8 <__aeabi_dmul>
 800bb6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bb70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	9304      	str	r3, [sp, #16]
 800bb7c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bb80:	46ab      	mov	fp, r5
 800bb82:	106d      	asrs	r5, r5, #1
 800bb84:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bb88:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bb8c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bb90:	2200      	movs	r2, #0
 800bb92:	4640      	mov	r0, r8
 800bb94:	4649      	mov	r1, r9
 800bb96:	4614      	mov	r4, r2
 800bb98:	461d      	mov	r5, r3
 800bb9a:	f7f4 fd2d 	bl	80005f8 <__aeabi_dmul>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	460b      	mov	r3, r1
 800bba2:	4630      	mov	r0, r6
 800bba4:	4639      	mov	r1, r7
 800bba6:	f7f4 fb6f 	bl	8000288 <__aeabi_dsub>
 800bbaa:	ec53 2b18 	vmov	r2, r3, d8
 800bbae:	4606      	mov	r6, r0
 800bbb0:	460f      	mov	r7, r1
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	f7f4 fb67 	bl	8000288 <__aeabi_dsub>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4650      	mov	r0, sl
 800bbc0:	4659      	mov	r1, fp
 800bbc2:	f7f4 fb61 	bl	8000288 <__aeabi_dsub>
 800bbc6:	4642      	mov	r2, r8
 800bbc8:	464b      	mov	r3, r9
 800bbca:	f7f4 fd15 	bl	80005f8 <__aeabi_dmul>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	f7f4 fb57 	bl	8000288 <__aeabi_dsub>
 800bbda:	ec53 2b19 	vmov	r2, r3, d9
 800bbde:	f7f4 fd0b 	bl	80005f8 <__aeabi_dmul>
 800bbe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbe6:	ec41 0b18 	vmov	d8, r0, r1
 800bbea:	4610      	mov	r0, r2
 800bbec:	4619      	mov	r1, r3
 800bbee:	f7f4 fd03 	bl	80005f8 <__aeabi_dmul>
 800bbf2:	a37d      	add	r3, pc, #500	; (adr r3, 800bde8 <__ieee754_pow+0x6f0>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	460d      	mov	r5, r1
 800bbfc:	f7f4 fcfc 	bl	80005f8 <__aeabi_dmul>
 800bc00:	a37b      	add	r3, pc, #492	; (adr r3, 800bdf0 <__ieee754_pow+0x6f8>)
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	f7f4 fb41 	bl	800028c <__adddf3>
 800bc0a:	4622      	mov	r2, r4
 800bc0c:	462b      	mov	r3, r5
 800bc0e:	f7f4 fcf3 	bl	80005f8 <__aeabi_dmul>
 800bc12:	a379      	add	r3, pc, #484	; (adr r3, 800bdf8 <__ieee754_pow+0x700>)
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	f7f4 fb38 	bl	800028c <__adddf3>
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	462b      	mov	r3, r5
 800bc20:	f7f4 fcea 	bl	80005f8 <__aeabi_dmul>
 800bc24:	a376      	add	r3, pc, #472	; (adr r3, 800be00 <__ieee754_pow+0x708>)
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	f7f4 fb2f 	bl	800028c <__adddf3>
 800bc2e:	4622      	mov	r2, r4
 800bc30:	462b      	mov	r3, r5
 800bc32:	f7f4 fce1 	bl	80005f8 <__aeabi_dmul>
 800bc36:	a374      	add	r3, pc, #464	; (adr r3, 800be08 <__ieee754_pow+0x710>)
 800bc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3c:	f7f4 fb26 	bl	800028c <__adddf3>
 800bc40:	4622      	mov	r2, r4
 800bc42:	462b      	mov	r3, r5
 800bc44:	f7f4 fcd8 	bl	80005f8 <__aeabi_dmul>
 800bc48:	a371      	add	r3, pc, #452	; (adr r3, 800be10 <__ieee754_pow+0x718>)
 800bc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4e:	f7f4 fb1d 	bl	800028c <__adddf3>
 800bc52:	4622      	mov	r2, r4
 800bc54:	4606      	mov	r6, r0
 800bc56:	460f      	mov	r7, r1
 800bc58:	462b      	mov	r3, r5
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	f7f4 fccb 	bl	80005f8 <__aeabi_dmul>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	4630      	mov	r0, r6
 800bc68:	4639      	mov	r1, r7
 800bc6a:	f7f4 fcc5 	bl	80005f8 <__aeabi_dmul>
 800bc6e:	4642      	mov	r2, r8
 800bc70:	4604      	mov	r4, r0
 800bc72:	460d      	mov	r5, r1
 800bc74:	464b      	mov	r3, r9
 800bc76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc7a:	f7f4 fb07 	bl	800028c <__adddf3>
 800bc7e:	ec53 2b18 	vmov	r2, r3, d8
 800bc82:	f7f4 fcb9 	bl	80005f8 <__aeabi_dmul>
 800bc86:	4622      	mov	r2, r4
 800bc88:	462b      	mov	r3, r5
 800bc8a:	f7f4 faff 	bl	800028c <__adddf3>
 800bc8e:	4642      	mov	r2, r8
 800bc90:	4682      	mov	sl, r0
 800bc92:	468b      	mov	fp, r1
 800bc94:	464b      	mov	r3, r9
 800bc96:	4640      	mov	r0, r8
 800bc98:	4649      	mov	r1, r9
 800bc9a:	f7f4 fcad 	bl	80005f8 <__aeabi_dmul>
 800bc9e:	4b6c      	ldr	r3, [pc, #432]	; (800be50 <__ieee754_pow+0x758>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	4606      	mov	r6, r0
 800bca4:	460f      	mov	r7, r1
 800bca6:	f7f4 faf1 	bl	800028c <__adddf3>
 800bcaa:	4652      	mov	r2, sl
 800bcac:	465b      	mov	r3, fp
 800bcae:	f7f4 faed 	bl	800028c <__adddf3>
 800bcb2:	9c04      	ldr	r4, [sp, #16]
 800bcb4:	460d      	mov	r5, r1
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4640      	mov	r0, r8
 800bcbc:	4649      	mov	r1, r9
 800bcbe:	f7f4 fc9b 	bl	80005f8 <__aeabi_dmul>
 800bcc2:	4b63      	ldr	r3, [pc, #396]	; (800be50 <__ieee754_pow+0x758>)
 800bcc4:	4680      	mov	r8, r0
 800bcc6:	4689      	mov	r9, r1
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	f7f4 fadb 	bl	8000288 <__aeabi_dsub>
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	463b      	mov	r3, r7
 800bcd6:	f7f4 fad7 	bl	8000288 <__aeabi_dsub>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4650      	mov	r0, sl
 800bce0:	4659      	mov	r1, fp
 800bce2:	f7f4 fad1 	bl	8000288 <__aeabi_dsub>
 800bce6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcea:	f7f4 fc85 	bl	80005f8 <__aeabi_dmul>
 800bcee:	4622      	mov	r2, r4
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	460f      	mov	r7, r1
 800bcf4:	462b      	mov	r3, r5
 800bcf6:	ec51 0b18 	vmov	r0, r1, d8
 800bcfa:	f7f4 fc7d 	bl	80005f8 <__aeabi_dmul>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	460b      	mov	r3, r1
 800bd02:	4630      	mov	r0, r6
 800bd04:	4639      	mov	r1, r7
 800bd06:	f7f4 fac1 	bl	800028c <__adddf3>
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	460f      	mov	r7, r1
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 fab9 	bl	800028c <__adddf3>
 800bd1a:	9c04      	ldr	r4, [sp, #16]
 800bd1c:	a33e      	add	r3, pc, #248	; (adr r3, 800be18 <__ieee754_pow+0x720>)
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	4620      	mov	r0, r4
 800bd24:	460d      	mov	r5, r1
 800bd26:	f7f4 fc67 	bl	80005f8 <__aeabi_dmul>
 800bd2a:	4642      	mov	r2, r8
 800bd2c:	ec41 0b18 	vmov	d8, r0, r1
 800bd30:	464b      	mov	r3, r9
 800bd32:	4620      	mov	r0, r4
 800bd34:	4629      	mov	r1, r5
 800bd36:	f7f4 faa7 	bl	8000288 <__aeabi_dsub>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	4630      	mov	r0, r6
 800bd40:	4639      	mov	r1, r7
 800bd42:	f7f4 faa1 	bl	8000288 <__aeabi_dsub>
 800bd46:	a336      	add	r3, pc, #216	; (adr r3, 800be20 <__ieee754_pow+0x728>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	f7f4 fc54 	bl	80005f8 <__aeabi_dmul>
 800bd50:	a335      	add	r3, pc, #212	; (adr r3, 800be28 <__ieee754_pow+0x730>)
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	4606      	mov	r6, r0
 800bd58:	460f      	mov	r7, r1
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	f7f4 fc4b 	bl	80005f8 <__aeabi_dmul>
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	4630      	mov	r0, r6
 800bd68:	4639      	mov	r1, r7
 800bd6a:	f7f4 fa8f 	bl	800028c <__adddf3>
 800bd6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd70:	4b38      	ldr	r3, [pc, #224]	; (800be54 <__ieee754_pow+0x75c>)
 800bd72:	4413      	add	r3, r2
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f7f4 fa88 	bl	800028c <__adddf3>
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd80:	468b      	mov	fp, r1
 800bd82:	f7f4 fbcf 	bl	8000524 <__aeabi_i2d>
 800bd86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd88:	4b33      	ldr	r3, [pc, #204]	; (800be58 <__ieee754_pow+0x760>)
 800bd8a:	4413      	add	r3, r2
 800bd8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd90:	4606      	mov	r6, r0
 800bd92:	460f      	mov	r7, r1
 800bd94:	4652      	mov	r2, sl
 800bd96:	465b      	mov	r3, fp
 800bd98:	ec51 0b18 	vmov	r0, r1, d8
 800bd9c:	f7f4 fa76 	bl	800028c <__adddf3>
 800bda0:	4642      	mov	r2, r8
 800bda2:	464b      	mov	r3, r9
 800bda4:	f7f4 fa72 	bl	800028c <__adddf3>
 800bda8:	4632      	mov	r2, r6
 800bdaa:	463b      	mov	r3, r7
 800bdac:	f7f4 fa6e 	bl	800028c <__adddf3>
 800bdb0:	9c04      	ldr	r4, [sp, #16]
 800bdb2:	4632      	mov	r2, r6
 800bdb4:	463b      	mov	r3, r7
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	460d      	mov	r5, r1
 800bdba:	f7f4 fa65 	bl	8000288 <__aeabi_dsub>
 800bdbe:	4642      	mov	r2, r8
 800bdc0:	464b      	mov	r3, r9
 800bdc2:	f7f4 fa61 	bl	8000288 <__aeabi_dsub>
 800bdc6:	ec53 2b18 	vmov	r2, r3, d8
 800bdca:	f7f4 fa5d 	bl	8000288 <__aeabi_dsub>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4650      	mov	r0, sl
 800bdd4:	4659      	mov	r1, fp
 800bdd6:	e606      	b.n	800b9e6 <__ieee754_pow+0x2ee>
 800bdd8:	2401      	movs	r4, #1
 800bdda:	e6a0      	b.n	800bb1e <__ieee754_pow+0x426>
 800bddc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800be30 <__ieee754_pow+0x738>
 800bde0:	e60d      	b.n	800b9fe <__ieee754_pow+0x306>
 800bde2:	bf00      	nop
 800bde4:	f3af 8000 	nop.w
 800bde8:	4a454eef 	.word	0x4a454eef
 800bdec:	3fca7e28 	.word	0x3fca7e28
 800bdf0:	93c9db65 	.word	0x93c9db65
 800bdf4:	3fcd864a 	.word	0x3fcd864a
 800bdf8:	a91d4101 	.word	0xa91d4101
 800bdfc:	3fd17460 	.word	0x3fd17460
 800be00:	518f264d 	.word	0x518f264d
 800be04:	3fd55555 	.word	0x3fd55555
 800be08:	db6fabff 	.word	0xdb6fabff
 800be0c:	3fdb6db6 	.word	0x3fdb6db6
 800be10:	33333303 	.word	0x33333303
 800be14:	3fe33333 	.word	0x3fe33333
 800be18:	e0000000 	.word	0xe0000000
 800be1c:	3feec709 	.word	0x3feec709
 800be20:	dc3a03fd 	.word	0xdc3a03fd
 800be24:	3feec709 	.word	0x3feec709
 800be28:	145b01f5 	.word	0x145b01f5
 800be2c:	be3e2fe0 	.word	0xbe3e2fe0
 800be30:	00000000 	.word	0x00000000
 800be34:	3ff00000 	.word	0x3ff00000
 800be38:	7ff00000 	.word	0x7ff00000
 800be3c:	43400000 	.word	0x43400000
 800be40:	0003988e 	.word	0x0003988e
 800be44:	000bb679 	.word	0x000bb679
 800be48:	0800cb70 	.word	0x0800cb70
 800be4c:	3ff00000 	.word	0x3ff00000
 800be50:	40080000 	.word	0x40080000
 800be54:	0800cb90 	.word	0x0800cb90
 800be58:	0800cb80 	.word	0x0800cb80
 800be5c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c134 <__ieee754_pow+0xa3c>)
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	4640      	mov	r0, r8
 800be64:	4649      	mov	r1, r9
 800be66:	f7f4 fa11 	bl	800028c <__adddf3>
 800be6a:	4622      	mov	r2, r4
 800be6c:	ec41 0b1a 	vmov	d10, r0, r1
 800be70:	462b      	mov	r3, r5
 800be72:	4630      	mov	r0, r6
 800be74:	4639      	mov	r1, r7
 800be76:	f7f4 fa07 	bl	8000288 <__aeabi_dsub>
 800be7a:	4602      	mov	r2, r0
 800be7c:	460b      	mov	r3, r1
 800be7e:	ec51 0b1a 	vmov	r0, r1, d10
 800be82:	f7f4 fe49 	bl	8000b18 <__aeabi_dcmpgt>
 800be86:	2800      	cmp	r0, #0
 800be88:	f47f adf8 	bne.w	800ba7c <__ieee754_pow+0x384>
 800be8c:	4aa4      	ldr	r2, [pc, #656]	; (800c120 <__ieee754_pow+0xa28>)
 800be8e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be92:	4293      	cmp	r3, r2
 800be94:	f340 810b 	ble.w	800c0ae <__ieee754_pow+0x9b6>
 800be98:	151b      	asrs	r3, r3, #20
 800be9a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800be9e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bea2:	fa4a f303 	asr.w	r3, sl, r3
 800bea6:	445b      	add	r3, fp
 800bea8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800beac:	4e9d      	ldr	r6, [pc, #628]	; (800c124 <__ieee754_pow+0xa2c>)
 800beae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800beb2:	4116      	asrs	r6, r2
 800beb4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800beb8:	2000      	movs	r0, #0
 800beba:	ea23 0106 	bic.w	r1, r3, r6
 800bebe:	f1c2 0214 	rsb	r2, r2, #20
 800bec2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bec6:	fa4a fa02 	asr.w	sl, sl, r2
 800beca:	f1bb 0f00 	cmp.w	fp, #0
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	4620      	mov	r0, r4
 800bed4:	4629      	mov	r1, r5
 800bed6:	bfb8      	it	lt
 800bed8:	f1ca 0a00 	rsblt	sl, sl, #0
 800bedc:	f7f4 f9d4 	bl	8000288 <__aeabi_dsub>
 800bee0:	ec41 0b19 	vmov	d9, r0, r1
 800bee4:	4642      	mov	r2, r8
 800bee6:	464b      	mov	r3, r9
 800bee8:	ec51 0b19 	vmov	r0, r1, d9
 800beec:	f7f4 f9ce 	bl	800028c <__adddf3>
 800bef0:	2400      	movs	r4, #0
 800bef2:	a379      	add	r3, pc, #484	; (adr r3, 800c0d8 <__ieee754_pow+0x9e0>)
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	4620      	mov	r0, r4
 800befa:	460d      	mov	r5, r1
 800befc:	f7f4 fb7c 	bl	80005f8 <__aeabi_dmul>
 800bf00:	ec53 2b19 	vmov	r2, r3, d9
 800bf04:	4606      	mov	r6, r0
 800bf06:	460f      	mov	r7, r1
 800bf08:	4620      	mov	r0, r4
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	f7f4 f9bc 	bl	8000288 <__aeabi_dsub>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4640      	mov	r0, r8
 800bf16:	4649      	mov	r1, r9
 800bf18:	f7f4 f9b6 	bl	8000288 <__aeabi_dsub>
 800bf1c:	a370      	add	r3, pc, #448	; (adr r3, 800c0e0 <__ieee754_pow+0x9e8>)
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	f7f4 fb69 	bl	80005f8 <__aeabi_dmul>
 800bf26:	a370      	add	r3, pc, #448	; (adr r3, 800c0e8 <__ieee754_pow+0x9f0>)
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	4680      	mov	r8, r0
 800bf2e:	4689      	mov	r9, r1
 800bf30:	4620      	mov	r0, r4
 800bf32:	4629      	mov	r1, r5
 800bf34:	f7f4 fb60 	bl	80005f8 <__aeabi_dmul>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	4649      	mov	r1, r9
 800bf40:	f7f4 f9a4 	bl	800028c <__adddf3>
 800bf44:	4604      	mov	r4, r0
 800bf46:	460d      	mov	r5, r1
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	4639      	mov	r1, r7
 800bf50:	f7f4 f99c 	bl	800028c <__adddf3>
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	4680      	mov	r8, r0
 800bf5a:	4689      	mov	r9, r1
 800bf5c:	f7f4 f994 	bl	8000288 <__aeabi_dsub>
 800bf60:	4602      	mov	r2, r0
 800bf62:	460b      	mov	r3, r1
 800bf64:	4620      	mov	r0, r4
 800bf66:	4629      	mov	r1, r5
 800bf68:	f7f4 f98e 	bl	8000288 <__aeabi_dsub>
 800bf6c:	4642      	mov	r2, r8
 800bf6e:	4606      	mov	r6, r0
 800bf70:	460f      	mov	r7, r1
 800bf72:	464b      	mov	r3, r9
 800bf74:	4640      	mov	r0, r8
 800bf76:	4649      	mov	r1, r9
 800bf78:	f7f4 fb3e 	bl	80005f8 <__aeabi_dmul>
 800bf7c:	a35c      	add	r3, pc, #368	; (adr r3, 800c0f0 <__ieee754_pow+0x9f8>)
 800bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf82:	4604      	mov	r4, r0
 800bf84:	460d      	mov	r5, r1
 800bf86:	f7f4 fb37 	bl	80005f8 <__aeabi_dmul>
 800bf8a:	a35b      	add	r3, pc, #364	; (adr r3, 800c0f8 <__ieee754_pow+0xa00>)
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f7f4 f97a 	bl	8000288 <__aeabi_dsub>
 800bf94:	4622      	mov	r2, r4
 800bf96:	462b      	mov	r3, r5
 800bf98:	f7f4 fb2e 	bl	80005f8 <__aeabi_dmul>
 800bf9c:	a358      	add	r3, pc, #352	; (adr r3, 800c100 <__ieee754_pow+0xa08>)
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f7f4 f973 	bl	800028c <__adddf3>
 800bfa6:	4622      	mov	r2, r4
 800bfa8:	462b      	mov	r3, r5
 800bfaa:	f7f4 fb25 	bl	80005f8 <__aeabi_dmul>
 800bfae:	a356      	add	r3, pc, #344	; (adr r3, 800c108 <__ieee754_pow+0xa10>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 f968 	bl	8000288 <__aeabi_dsub>
 800bfb8:	4622      	mov	r2, r4
 800bfba:	462b      	mov	r3, r5
 800bfbc:	f7f4 fb1c 	bl	80005f8 <__aeabi_dmul>
 800bfc0:	a353      	add	r3, pc, #332	; (adr r3, 800c110 <__ieee754_pow+0xa18>)
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	f7f4 f961 	bl	800028c <__adddf3>
 800bfca:	4622      	mov	r2, r4
 800bfcc:	462b      	mov	r3, r5
 800bfce:	f7f4 fb13 	bl	80005f8 <__aeabi_dmul>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	4649      	mov	r1, r9
 800bfda:	f7f4 f955 	bl	8000288 <__aeabi_dsub>
 800bfde:	4604      	mov	r4, r0
 800bfe0:	460d      	mov	r5, r1
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 fb05 	bl	80005f8 <__aeabi_dmul>
 800bfee:	2200      	movs	r2, #0
 800bff0:	ec41 0b19 	vmov	d9, r0, r1
 800bff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bff8:	4620      	mov	r0, r4
 800bffa:	4629      	mov	r1, r5
 800bffc:	f7f4 f944 	bl	8000288 <__aeabi_dsub>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	ec51 0b19 	vmov	r0, r1, d9
 800c008:	f7f4 fc20 	bl	800084c <__aeabi_ddiv>
 800c00c:	4632      	mov	r2, r6
 800c00e:	4604      	mov	r4, r0
 800c010:	460d      	mov	r5, r1
 800c012:	463b      	mov	r3, r7
 800c014:	4640      	mov	r0, r8
 800c016:	4649      	mov	r1, r9
 800c018:	f7f4 faee 	bl	80005f8 <__aeabi_dmul>
 800c01c:	4632      	mov	r2, r6
 800c01e:	463b      	mov	r3, r7
 800c020:	f7f4 f934 	bl	800028c <__adddf3>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	4620      	mov	r0, r4
 800c02a:	4629      	mov	r1, r5
 800c02c:	f7f4 f92c 	bl	8000288 <__aeabi_dsub>
 800c030:	4642      	mov	r2, r8
 800c032:	464b      	mov	r3, r9
 800c034:	f7f4 f928 	bl	8000288 <__aeabi_dsub>
 800c038:	460b      	mov	r3, r1
 800c03a:	4602      	mov	r2, r0
 800c03c:	493a      	ldr	r1, [pc, #232]	; (800c128 <__ieee754_pow+0xa30>)
 800c03e:	2000      	movs	r0, #0
 800c040:	f7f4 f922 	bl	8000288 <__aeabi_dsub>
 800c044:	e9cd 0100 	strd	r0, r1, [sp]
 800c048:	9b01      	ldr	r3, [sp, #4]
 800c04a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c04e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c052:	da2f      	bge.n	800c0b4 <__ieee754_pow+0x9bc>
 800c054:	4650      	mov	r0, sl
 800c056:	ed9d 0b00 	vldr	d0, [sp]
 800c05a:	f000 f9c1 	bl	800c3e0 <scalbn>
 800c05e:	ec51 0b10 	vmov	r0, r1, d0
 800c062:	ec53 2b18 	vmov	r2, r3, d8
 800c066:	f7ff bbe0 	b.w	800b82a <__ieee754_pow+0x132>
 800c06a:	4b30      	ldr	r3, [pc, #192]	; (800c12c <__ieee754_pow+0xa34>)
 800c06c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c070:	429e      	cmp	r6, r3
 800c072:	f77f af0b 	ble.w	800be8c <__ieee754_pow+0x794>
 800c076:	4b2e      	ldr	r3, [pc, #184]	; (800c130 <__ieee754_pow+0xa38>)
 800c078:	440b      	add	r3, r1
 800c07a:	4303      	orrs	r3, r0
 800c07c:	d00b      	beq.n	800c096 <__ieee754_pow+0x99e>
 800c07e:	a326      	add	r3, pc, #152	; (adr r3, 800c118 <__ieee754_pow+0xa20>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	ec51 0b18 	vmov	r0, r1, d8
 800c088:	f7f4 fab6 	bl	80005f8 <__aeabi_dmul>
 800c08c:	a322      	add	r3, pc, #136	; (adr r3, 800c118 <__ieee754_pow+0xa20>)
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f7ff bbca 	b.w	800b82a <__ieee754_pow+0x132>
 800c096:	4622      	mov	r2, r4
 800c098:	462b      	mov	r3, r5
 800c09a:	f7f4 f8f5 	bl	8000288 <__aeabi_dsub>
 800c09e:	4642      	mov	r2, r8
 800c0a0:	464b      	mov	r3, r9
 800c0a2:	f7f4 fd2f 	bl	8000b04 <__aeabi_dcmpge>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	f43f aef0 	beq.w	800be8c <__ieee754_pow+0x794>
 800c0ac:	e7e7      	b.n	800c07e <__ieee754_pow+0x986>
 800c0ae:	f04f 0a00 	mov.w	sl, #0
 800c0b2:	e717      	b.n	800bee4 <__ieee754_pow+0x7ec>
 800c0b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	e7d2      	b.n	800c062 <__ieee754_pow+0x96a>
 800c0bc:	491a      	ldr	r1, [pc, #104]	; (800c128 <__ieee754_pow+0xa30>)
 800c0be:	2000      	movs	r0, #0
 800c0c0:	f7ff bb9e 	b.w	800b800 <__ieee754_pow+0x108>
 800c0c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0c8:	f7ff bb9a 	b.w	800b800 <__ieee754_pow+0x108>
 800c0cc:	9000      	str	r0, [sp, #0]
 800c0ce:	f7ff bb76 	b.w	800b7be <__ieee754_pow+0xc6>
 800c0d2:	2100      	movs	r1, #0
 800c0d4:	f7ff bb60 	b.w	800b798 <__ieee754_pow+0xa0>
 800c0d8:	00000000 	.word	0x00000000
 800c0dc:	3fe62e43 	.word	0x3fe62e43
 800c0e0:	fefa39ef 	.word	0xfefa39ef
 800c0e4:	3fe62e42 	.word	0x3fe62e42
 800c0e8:	0ca86c39 	.word	0x0ca86c39
 800c0ec:	be205c61 	.word	0xbe205c61
 800c0f0:	72bea4d0 	.word	0x72bea4d0
 800c0f4:	3e663769 	.word	0x3e663769
 800c0f8:	c5d26bf1 	.word	0xc5d26bf1
 800c0fc:	3ebbbd41 	.word	0x3ebbbd41
 800c100:	af25de2c 	.word	0xaf25de2c
 800c104:	3f11566a 	.word	0x3f11566a
 800c108:	16bebd93 	.word	0x16bebd93
 800c10c:	3f66c16c 	.word	0x3f66c16c
 800c110:	5555553e 	.word	0x5555553e
 800c114:	3fc55555 	.word	0x3fc55555
 800c118:	c2f8f359 	.word	0xc2f8f359
 800c11c:	01a56e1f 	.word	0x01a56e1f
 800c120:	3fe00000 	.word	0x3fe00000
 800c124:	000fffff 	.word	0x000fffff
 800c128:	3ff00000 	.word	0x3ff00000
 800c12c:	4090cbff 	.word	0x4090cbff
 800c130:	3f6f3400 	.word	0x3f6f3400
 800c134:	652b82fe 	.word	0x652b82fe
 800c138:	3c971547 	.word	0x3c971547

0800c13c <__ieee754_sqrt>:
 800c13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c140:	ec55 4b10 	vmov	r4, r5, d0
 800c144:	4e56      	ldr	r6, [pc, #344]	; (800c2a0 <__ieee754_sqrt+0x164>)
 800c146:	43ae      	bics	r6, r5
 800c148:	ee10 0a10 	vmov	r0, s0
 800c14c:	ee10 3a10 	vmov	r3, s0
 800c150:	4629      	mov	r1, r5
 800c152:	462a      	mov	r2, r5
 800c154:	d110      	bne.n	800c178 <__ieee754_sqrt+0x3c>
 800c156:	ee10 2a10 	vmov	r2, s0
 800c15a:	462b      	mov	r3, r5
 800c15c:	f7f4 fa4c 	bl	80005f8 <__aeabi_dmul>
 800c160:	4602      	mov	r2, r0
 800c162:	460b      	mov	r3, r1
 800c164:	4620      	mov	r0, r4
 800c166:	4629      	mov	r1, r5
 800c168:	f7f4 f890 	bl	800028c <__adddf3>
 800c16c:	4604      	mov	r4, r0
 800c16e:	460d      	mov	r5, r1
 800c170:	ec45 4b10 	vmov	d0, r4, r5
 800c174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c178:	2d00      	cmp	r5, #0
 800c17a:	dc10      	bgt.n	800c19e <__ieee754_sqrt+0x62>
 800c17c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c180:	4330      	orrs	r0, r6
 800c182:	d0f5      	beq.n	800c170 <__ieee754_sqrt+0x34>
 800c184:	b15d      	cbz	r5, 800c19e <__ieee754_sqrt+0x62>
 800c186:	ee10 2a10 	vmov	r2, s0
 800c18a:	462b      	mov	r3, r5
 800c18c:	ee10 0a10 	vmov	r0, s0
 800c190:	f7f4 f87a 	bl	8000288 <__aeabi_dsub>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	f7f4 fb58 	bl	800084c <__aeabi_ddiv>
 800c19c:	e7e6      	b.n	800c16c <__ieee754_sqrt+0x30>
 800c19e:	1509      	asrs	r1, r1, #20
 800c1a0:	d076      	beq.n	800c290 <__ieee754_sqrt+0x154>
 800c1a2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c1a6:	07ce      	lsls	r6, r1, #31
 800c1a8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c1ac:	bf5e      	ittt	pl
 800c1ae:	0fda      	lsrpl	r2, r3, #31
 800c1b0:	005b      	lslpl	r3, r3, #1
 800c1b2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c1b6:	0fda      	lsrs	r2, r3, #31
 800c1b8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c1bc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c1c0:	2000      	movs	r0, #0
 800c1c2:	106d      	asrs	r5, r5, #1
 800c1c4:	005b      	lsls	r3, r3, #1
 800c1c6:	f04f 0e16 	mov.w	lr, #22
 800c1ca:	4684      	mov	ip, r0
 800c1cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c1d0:	eb0c 0401 	add.w	r4, ip, r1
 800c1d4:	4294      	cmp	r4, r2
 800c1d6:	bfde      	ittt	le
 800c1d8:	1b12      	suble	r2, r2, r4
 800c1da:	eb04 0c01 	addle.w	ip, r4, r1
 800c1de:	1840      	addle	r0, r0, r1
 800c1e0:	0052      	lsls	r2, r2, #1
 800c1e2:	f1be 0e01 	subs.w	lr, lr, #1
 800c1e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c1ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c1ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c1f2:	d1ed      	bne.n	800c1d0 <__ieee754_sqrt+0x94>
 800c1f4:	4671      	mov	r1, lr
 800c1f6:	2720      	movs	r7, #32
 800c1f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c1fc:	4562      	cmp	r2, ip
 800c1fe:	eb04 060e 	add.w	r6, r4, lr
 800c202:	dc02      	bgt.n	800c20a <__ieee754_sqrt+0xce>
 800c204:	d113      	bne.n	800c22e <__ieee754_sqrt+0xf2>
 800c206:	429e      	cmp	r6, r3
 800c208:	d811      	bhi.n	800c22e <__ieee754_sqrt+0xf2>
 800c20a:	2e00      	cmp	r6, #0
 800c20c:	eb06 0e04 	add.w	lr, r6, r4
 800c210:	da43      	bge.n	800c29a <__ieee754_sqrt+0x15e>
 800c212:	f1be 0f00 	cmp.w	lr, #0
 800c216:	db40      	blt.n	800c29a <__ieee754_sqrt+0x15e>
 800c218:	f10c 0801 	add.w	r8, ip, #1
 800c21c:	eba2 020c 	sub.w	r2, r2, ip
 800c220:	429e      	cmp	r6, r3
 800c222:	bf88      	it	hi
 800c224:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c228:	1b9b      	subs	r3, r3, r6
 800c22a:	4421      	add	r1, r4
 800c22c:	46c4      	mov	ip, r8
 800c22e:	0052      	lsls	r2, r2, #1
 800c230:	3f01      	subs	r7, #1
 800c232:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c236:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c23a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c23e:	d1dd      	bne.n	800c1fc <__ieee754_sqrt+0xc0>
 800c240:	4313      	orrs	r3, r2
 800c242:	d006      	beq.n	800c252 <__ieee754_sqrt+0x116>
 800c244:	1c4c      	adds	r4, r1, #1
 800c246:	bf13      	iteet	ne
 800c248:	3101      	addne	r1, #1
 800c24a:	3001      	addeq	r0, #1
 800c24c:	4639      	moveq	r1, r7
 800c24e:	f021 0101 	bicne.w	r1, r1, #1
 800c252:	1043      	asrs	r3, r0, #1
 800c254:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c258:	0849      	lsrs	r1, r1, #1
 800c25a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c25e:	07c2      	lsls	r2, r0, #31
 800c260:	bf48      	it	mi
 800c262:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c266:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c26a:	460c      	mov	r4, r1
 800c26c:	463d      	mov	r5, r7
 800c26e:	e77f      	b.n	800c170 <__ieee754_sqrt+0x34>
 800c270:	0ada      	lsrs	r2, r3, #11
 800c272:	3815      	subs	r0, #21
 800c274:	055b      	lsls	r3, r3, #21
 800c276:	2a00      	cmp	r2, #0
 800c278:	d0fa      	beq.n	800c270 <__ieee754_sqrt+0x134>
 800c27a:	02d7      	lsls	r7, r2, #11
 800c27c:	d50a      	bpl.n	800c294 <__ieee754_sqrt+0x158>
 800c27e:	f1c1 0420 	rsb	r4, r1, #32
 800c282:	fa23 f404 	lsr.w	r4, r3, r4
 800c286:	1e4d      	subs	r5, r1, #1
 800c288:	408b      	lsls	r3, r1
 800c28a:	4322      	orrs	r2, r4
 800c28c:	1b41      	subs	r1, r0, r5
 800c28e:	e788      	b.n	800c1a2 <__ieee754_sqrt+0x66>
 800c290:	4608      	mov	r0, r1
 800c292:	e7f0      	b.n	800c276 <__ieee754_sqrt+0x13a>
 800c294:	0052      	lsls	r2, r2, #1
 800c296:	3101      	adds	r1, #1
 800c298:	e7ef      	b.n	800c27a <__ieee754_sqrt+0x13e>
 800c29a:	46e0      	mov	r8, ip
 800c29c:	e7be      	b.n	800c21c <__ieee754_sqrt+0xe0>
 800c29e:	bf00      	nop
 800c2a0:	7ff00000 	.word	0x7ff00000

0800c2a4 <fabs>:
 800c2a4:	ec51 0b10 	vmov	r0, r1, d0
 800c2a8:	ee10 2a10 	vmov	r2, s0
 800c2ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2b0:	ec43 2b10 	vmov	d0, r2, r3
 800c2b4:	4770      	bx	lr

0800c2b6 <finite>:
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	ed8d 0b00 	vstr	d0, [sp]
 800c2bc:	9801      	ldr	r0, [sp, #4]
 800c2be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c2c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c2c6:	0fc0      	lsrs	r0, r0, #31
 800c2c8:	b002      	add	sp, #8
 800c2ca:	4770      	bx	lr

0800c2cc <rint>:
 800c2cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2ce:	ec51 0b10 	vmov	r0, r1, d0
 800c2d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c2d6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c2da:	2e13      	cmp	r6, #19
 800c2dc:	ee10 4a10 	vmov	r4, s0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c2e6:	dc58      	bgt.n	800c39a <rint+0xce>
 800c2e8:	2e00      	cmp	r6, #0
 800c2ea:	da2b      	bge.n	800c344 <rint+0x78>
 800c2ec:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c2f0:	4302      	orrs	r2, r0
 800c2f2:	d023      	beq.n	800c33c <rint+0x70>
 800c2f4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c2f8:	4302      	orrs	r2, r0
 800c2fa:	4254      	negs	r4, r2
 800c2fc:	4314      	orrs	r4, r2
 800c2fe:	0c4b      	lsrs	r3, r1, #17
 800c300:	0b24      	lsrs	r4, r4, #12
 800c302:	045b      	lsls	r3, r3, #17
 800c304:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c308:	ea44 0103 	orr.w	r1, r4, r3
 800c30c:	4b32      	ldr	r3, [pc, #200]	; (800c3d8 <rint+0x10c>)
 800c30e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c312:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c316:	4602      	mov	r2, r0
 800c318:	460b      	mov	r3, r1
 800c31a:	4630      	mov	r0, r6
 800c31c:	4639      	mov	r1, r7
 800c31e:	f7f3 ffb5 	bl	800028c <__adddf3>
 800c322:	e9cd 0100 	strd	r0, r1, [sp]
 800c326:	463b      	mov	r3, r7
 800c328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c32c:	4632      	mov	r2, r6
 800c32e:	f7f3 ffab 	bl	8000288 <__aeabi_dsub>
 800c332:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c336:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c33a:	4639      	mov	r1, r7
 800c33c:	ec41 0b10 	vmov	d0, r0, r1
 800c340:	b003      	add	sp, #12
 800c342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c344:	4a25      	ldr	r2, [pc, #148]	; (800c3dc <rint+0x110>)
 800c346:	4132      	asrs	r2, r6
 800c348:	ea01 0702 	and.w	r7, r1, r2
 800c34c:	4307      	orrs	r7, r0
 800c34e:	d0f5      	beq.n	800c33c <rint+0x70>
 800c350:	0851      	lsrs	r1, r2, #1
 800c352:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c356:	4314      	orrs	r4, r2
 800c358:	d00c      	beq.n	800c374 <rint+0xa8>
 800c35a:	ea23 0201 	bic.w	r2, r3, r1
 800c35e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c362:	2e13      	cmp	r6, #19
 800c364:	fa43 f606 	asr.w	r6, r3, r6
 800c368:	bf0c      	ite	eq
 800c36a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c36e:	2400      	movne	r4, #0
 800c370:	ea42 0306 	orr.w	r3, r2, r6
 800c374:	4918      	ldr	r1, [pc, #96]	; (800c3d8 <rint+0x10c>)
 800c376:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c37a:	4622      	mov	r2, r4
 800c37c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c380:	4620      	mov	r0, r4
 800c382:	4629      	mov	r1, r5
 800c384:	f7f3 ff82 	bl	800028c <__adddf3>
 800c388:	e9cd 0100 	strd	r0, r1, [sp]
 800c38c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c390:	4622      	mov	r2, r4
 800c392:	462b      	mov	r3, r5
 800c394:	f7f3 ff78 	bl	8000288 <__aeabi_dsub>
 800c398:	e7d0      	b.n	800c33c <rint+0x70>
 800c39a:	2e33      	cmp	r6, #51	; 0x33
 800c39c:	dd07      	ble.n	800c3ae <rint+0xe2>
 800c39e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c3a2:	d1cb      	bne.n	800c33c <rint+0x70>
 800c3a4:	ee10 2a10 	vmov	r2, s0
 800c3a8:	f7f3 ff70 	bl	800028c <__adddf3>
 800c3ac:	e7c6      	b.n	800c33c <rint+0x70>
 800c3ae:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c3b2:	f04f 36ff 	mov.w	r6, #4294967295
 800c3b6:	40d6      	lsrs	r6, r2
 800c3b8:	4230      	tst	r0, r6
 800c3ba:	d0bf      	beq.n	800c33c <rint+0x70>
 800c3bc:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800c3c0:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800c3c4:	bf1f      	itttt	ne
 800c3c6:	ea24 0101 	bicne.w	r1, r4, r1
 800c3ca:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c3ce:	fa44 f202 	asrne.w	r2, r4, r2
 800c3d2:	ea41 0402 	orrne.w	r4, r1, r2
 800c3d6:	e7cd      	b.n	800c374 <rint+0xa8>
 800c3d8:	0800cba0 	.word	0x0800cba0
 800c3dc:	000fffff 	.word	0x000fffff

0800c3e0 <scalbn>:
 800c3e0:	b570      	push	{r4, r5, r6, lr}
 800c3e2:	ec55 4b10 	vmov	r4, r5, d0
 800c3e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	462b      	mov	r3, r5
 800c3ee:	b99a      	cbnz	r2, 800c418 <scalbn+0x38>
 800c3f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c3f4:	4323      	orrs	r3, r4
 800c3f6:	d036      	beq.n	800c466 <scalbn+0x86>
 800c3f8:	4b39      	ldr	r3, [pc, #228]	; (800c4e0 <scalbn+0x100>)
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	ee10 0a10 	vmov	r0, s0
 800c400:	2200      	movs	r2, #0
 800c402:	f7f4 f8f9 	bl	80005f8 <__aeabi_dmul>
 800c406:	4b37      	ldr	r3, [pc, #220]	; (800c4e4 <scalbn+0x104>)
 800c408:	429e      	cmp	r6, r3
 800c40a:	4604      	mov	r4, r0
 800c40c:	460d      	mov	r5, r1
 800c40e:	da10      	bge.n	800c432 <scalbn+0x52>
 800c410:	a32b      	add	r3, pc, #172	; (adr r3, 800c4c0 <scalbn+0xe0>)
 800c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c416:	e03a      	b.n	800c48e <scalbn+0xae>
 800c418:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c41c:	428a      	cmp	r2, r1
 800c41e:	d10c      	bne.n	800c43a <scalbn+0x5a>
 800c420:	ee10 2a10 	vmov	r2, s0
 800c424:	4620      	mov	r0, r4
 800c426:	4629      	mov	r1, r5
 800c428:	f7f3 ff30 	bl	800028c <__adddf3>
 800c42c:	4604      	mov	r4, r0
 800c42e:	460d      	mov	r5, r1
 800c430:	e019      	b.n	800c466 <scalbn+0x86>
 800c432:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c436:	460b      	mov	r3, r1
 800c438:	3a36      	subs	r2, #54	; 0x36
 800c43a:	4432      	add	r2, r6
 800c43c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c440:	428a      	cmp	r2, r1
 800c442:	dd08      	ble.n	800c456 <scalbn+0x76>
 800c444:	2d00      	cmp	r5, #0
 800c446:	a120      	add	r1, pc, #128	; (adr r1, 800c4c8 <scalbn+0xe8>)
 800c448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c44c:	da1c      	bge.n	800c488 <scalbn+0xa8>
 800c44e:	a120      	add	r1, pc, #128	; (adr r1, 800c4d0 <scalbn+0xf0>)
 800c450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c454:	e018      	b.n	800c488 <scalbn+0xa8>
 800c456:	2a00      	cmp	r2, #0
 800c458:	dd08      	ble.n	800c46c <scalbn+0x8c>
 800c45a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c45e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c462:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c466:	ec45 4b10 	vmov	d0, r4, r5
 800c46a:	bd70      	pop	{r4, r5, r6, pc}
 800c46c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c470:	da19      	bge.n	800c4a6 <scalbn+0xc6>
 800c472:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c476:	429e      	cmp	r6, r3
 800c478:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c47c:	dd0a      	ble.n	800c494 <scalbn+0xb4>
 800c47e:	a112      	add	r1, pc, #72	; (adr r1, 800c4c8 <scalbn+0xe8>)
 800c480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e2      	bne.n	800c44e <scalbn+0x6e>
 800c488:	a30f      	add	r3, pc, #60	; (adr r3, 800c4c8 <scalbn+0xe8>)
 800c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48e:	f7f4 f8b3 	bl	80005f8 <__aeabi_dmul>
 800c492:	e7cb      	b.n	800c42c <scalbn+0x4c>
 800c494:	a10a      	add	r1, pc, #40	; (adr r1, 800c4c0 <scalbn+0xe0>)
 800c496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d0b8      	beq.n	800c410 <scalbn+0x30>
 800c49e:	a10e      	add	r1, pc, #56	; (adr r1, 800c4d8 <scalbn+0xf8>)
 800c4a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a4:	e7b4      	b.n	800c410 <scalbn+0x30>
 800c4a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c4aa:	3236      	adds	r2, #54	; 0x36
 800c4ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c4b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	4b0c      	ldr	r3, [pc, #48]	; (800c4e8 <scalbn+0x108>)
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	e7e8      	b.n	800c48e <scalbn+0xae>
 800c4bc:	f3af 8000 	nop.w
 800c4c0:	c2f8f359 	.word	0xc2f8f359
 800c4c4:	01a56e1f 	.word	0x01a56e1f
 800c4c8:	8800759c 	.word	0x8800759c
 800c4cc:	7e37e43c 	.word	0x7e37e43c
 800c4d0:	8800759c 	.word	0x8800759c
 800c4d4:	fe37e43c 	.word	0xfe37e43c
 800c4d8:	c2f8f359 	.word	0xc2f8f359
 800c4dc:	81a56e1f 	.word	0x81a56e1f
 800c4e0:	43500000 	.word	0x43500000
 800c4e4:	ffff3cb0 	.word	0xffff3cb0
 800c4e8:	3c900000 	.word	0x3c900000

0800c4ec <_init>:
 800c4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ee:	bf00      	nop
 800c4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4f2:	bc08      	pop	{r3}
 800c4f4:	469e      	mov	lr, r3
 800c4f6:	4770      	bx	lr

0800c4f8 <_fini>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	bf00      	nop
 800c4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4fe:	bc08      	pop	{r3}
 800c500:	469e      	mov	lr, r3
 800c502:	4770      	bx	lr
