
Production.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08009b98  08009b98  00019b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009df8  08009df8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009df8  08009df8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009df8  08009df8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009df8  08009df8  00019df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dfc  08009dfc  00019dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006300  200001e0  08009fdc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200064e0  08009fdc  000264e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001139a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e1  00000000  00000000  000315a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00033d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00034d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c67f  00000000  00000000  00035b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ee2  00000000  00000000  000521ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a779a  00000000  00000000  000640e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b87b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  0010b8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b7c 	.word	0x08009b7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009b7c 	.word	0x08009b7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <delay>:
#define timer htim2


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <delay+0x30>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000baa:	bf00      	nop
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <delay+0x30>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3f9      	bcc.n	8000bac <delay+0x14>
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200063fc 	.word	0x200063fc

08000bcc <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2108      	movs	r1, #8
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f004 fdb4 	bl	8005750 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	08db      	lsrs	r3, r3, #3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <send_to_lcd+0xa0>)
 8000bfa:	f004 fda9 	bl	8005750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <send_to_lcd+0xa0>)
 8000c10:	f004 fd9e 	bl	8005750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	085b      	lsrs	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	2101      	movs	r1, #1
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <send_to_lcd+0xa0>)
 8000c26:	f004 fd93 	bl	8005750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f004 fd89 	bl	8005750 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2120      	movs	r1, #32
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f004 fd83 	bl	8005750 <HAL_GPIO_WritePin>
	delay (20);
 8000c4a:	2014      	movs	r0, #20
 8000c4c:	f7ff ffa4 	bl	8000b98 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2120      	movs	r1, #32
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f004 fd7a 	bl	8005750 <HAL_GPIO_WritePin>
	delay (20);
 8000c5c:	2014      	movs	r0, #20
 8000c5e:	f7ff ff9b 	bl	8000b98 <delay>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	48000400 	.word	0x48000400

08000c70 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ffa1 	bl	8000bcc <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff98 	bl	8000bcc <send_to_lcd>
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff87 	bl	8000bcc <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff7e 	bl	8000bcc <send_to_lcd>
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <lcd_clear>:

void lcd_clear (void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff ffc7 	bl	8000c70 <lcd_send_cmd>
	delay(2000);
 8000ce2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ce6:	f7ff ff57 	bl	8000b98 <delay>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}

08000cee <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
    switch (row)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <lcd_put_cur+0x18>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d005      	beq.n	8000d10 <lcd_put_cur+0x22>
 8000d04:	e009      	b.n	8000d1a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0c:	603b      	str	r3, [r7, #0]
            break;
 8000d0e:	e004      	b.n	8000d1a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d16:	603b      	str	r3, [r7, #0]
            break;
 8000d18:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ffa6 	bl	8000c70 <lcd_send_cmd>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <lcd_init>:


void lcd_init (void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay(5000);  // wait for >40ms
 8000d30:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d34:	f7ff ff30 	bl	8000b98 <delay>
	lcd_send_cmd (0x30);
 8000d38:	2030      	movs	r0, #48	; 0x30
 8000d3a:	f7ff ff99 	bl	8000c70 <lcd_send_cmd>
	delay(5000);  // wait for >4.1ms
 8000d3e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d42:	f7ff ff29 	bl	8000b98 <delay>
	lcd_send_cmd (0x30);
 8000d46:	2030      	movs	r0, #48	; 0x30
 8000d48:	f7ff ff92 	bl	8000c70 <lcd_send_cmd>
	delay(100);  // wait for >100us
 8000d4c:	2064      	movs	r0, #100	; 0x64
 8000d4e:	f7ff ff23 	bl	8000b98 <delay>
	lcd_send_cmd (0x30);
 8000d52:	2030      	movs	r0, #48	; 0x30
 8000d54:	f7ff ff8c 	bl	8000c70 <lcd_send_cmd>
	delay(10000);
 8000d58:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d5c:	f7ff ff1c 	bl	8000b98 <delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d60:	2020      	movs	r0, #32
 8000d62:	f7ff ff85 	bl	8000c70 <lcd_send_cmd>
	delay(10000);
 8000d66:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d6a:	f7ff ff15 	bl	8000b98 <delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d6e:	2028      	movs	r0, #40	; 0x28
 8000d70:	f7ff ff7e 	bl	8000c70 <lcd_send_cmd>
	delay(1000);
 8000d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d78:	f7ff ff0e 	bl	8000b98 <delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d7c:	2008      	movs	r0, #8
 8000d7e:	f7ff ff77 	bl	8000c70 <lcd_send_cmd>
	delay(1000);
 8000d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d86:	f7ff ff07 	bl	8000b98 <delay>
	lcd_send_cmd (0x01);  // clear display
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff ff70 	bl	8000c70 <lcd_send_cmd>
	delay(1000);
 8000d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d94:	f7ff ff00 	bl	8000b98 <delay>
	delay(1000);
 8000d98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9c:	f7ff fefc 	bl	8000b98 <delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000da0:	2006      	movs	r0, #6
 8000da2:	f7ff ff65 	bl	8000c70 <lcd_send_cmd>
	delay(1000);
 8000da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000daa:	f7ff fef5 	bl	8000b98 <delay>
	lcd_send_cmd (0x0F); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000dae:	200f      	movs	r0, #15
 8000db0:	f7ff ff5e 	bl	8000c70 <lcd_send_cmd>
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000dc0:	e006      	b.n	8000dd0 <lcd_send_string+0x18>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	1c5a      	adds	r2, r3, #1
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff6a 	bl	8000ca4 <lcd_send_data>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f4      	bne.n	8000dc2 <lcd_send_string+0xa>
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	0000      	movs	r0, r0
 8000de4:	0000      	movs	r0, r0
	...

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Get variables from Flash Memory

	CAN_IDs=(*(__IO uint32_t *) 0x0800F800);
 8000dee:	4bb4      	ldr	r3, [pc, #720]	; (80010c0 <main+0x2d8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4bb3      	ldr	r3, [pc, #716]	; (80010c4 <main+0x2dc>)
 8000df6:	601a      	str	r2, [r3, #0]
	memcpy(id_arr, wordToBytes(CAN_IDs), 4);
 8000df8:	4bb2      	ldr	r3, [pc, #712]	; (80010c4 <main+0x2dc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 f913 	bl	8004028 <wordToBytes>
 8000e02:	4603      	mov	r3, r0
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4baf      	ldr	r3, [pc, #700]	; (80010c8 <main+0x2e0>)
 8000e0a:	601a      	str	r2, [r3, #0]
	can_id_1=id_arr[0];
 8000e0c:	4bae      	ldr	r3, [pc, #696]	; (80010c8 <main+0x2e0>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	4bae      	ldr	r3, [pc, #696]	; (80010cc <main+0x2e4>)
 8000e12:	701a      	strb	r2, [r3, #0]
	can_id_2=id_arr[1];
 8000e14:	4bac      	ldr	r3, [pc, #688]	; (80010c8 <main+0x2e0>)
 8000e16:	785a      	ldrb	r2, [r3, #1]
 8000e18:	4bad      	ldr	r3, [pc, #692]	; (80010d0 <main+0x2e8>)
 8000e1a:	701a      	strb	r2, [r3, #0]
	can_id_3=id_arr[2];
 8000e1c:	4baa      	ldr	r3, [pc, #680]	; (80010c8 <main+0x2e0>)
 8000e1e:	789a      	ldrb	r2, [r3, #2]
 8000e20:	4bac      	ldr	r3, [pc, #688]	; (80010d4 <main+0x2ec>)
 8000e22:	701a      	strb	r2, [r3, #0]
	//if duplicate IDs set IDs to 1, 2, and 3 respectively
	if(can_id_1==can_id_2 || can_id_1==can_id_3||can_id_2==can_id_3){
 8000e24:	4ba9      	ldr	r3, [pc, #676]	; (80010cc <main+0x2e4>)
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4ba9      	ldr	r3, [pc, #676]	; (80010d0 <main+0x2e8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d00b      	beq.n	8000e48 <main+0x60>
 8000e30:	4ba6      	ldr	r3, [pc, #664]	; (80010cc <main+0x2e4>)
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	4ba7      	ldr	r3, [pc, #668]	; (80010d4 <main+0x2ec>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d005      	beq.n	8000e48 <main+0x60>
 8000e3c:	4ba4      	ldr	r3, [pc, #656]	; (80010d0 <main+0x2e8>)
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	4ba4      	ldr	r3, [pc, #656]	; (80010d4 <main+0x2ec>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d108      	bne.n	8000e5a <main+0x72>
		can_id_1=1;
 8000e48:	4ba0      	ldr	r3, [pc, #640]	; (80010cc <main+0x2e4>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
		can_id_2=2;
 8000e4e:	4ba0      	ldr	r3, [pc, #640]	; (80010d0 <main+0x2e8>)
 8000e50:	2202      	movs	r2, #2
 8000e52:	701a      	strb	r2, [r3, #0]
		can_id_3=3;
 8000e54:	4b9f      	ldr	r3, [pc, #636]	; (80010d4 <main+0x2ec>)
 8000e56:	2203      	movs	r2, #3
 8000e58:	701a      	strb	r2, [r3, #0]
	}

	//get the baud rate
	baud_pos=(uint8_t)(*(__IO uint32_t *) 0x0800F804);
 8000e5a:	4b9f      	ldr	r3, [pc, #636]	; (80010d8 <main+0x2f0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	4b9e      	ldr	r3, [pc, #632]	; (80010dc <main+0x2f4>)
 8000e62:	701a      	strb	r2, [r3, #0]
	//if invalid baud rate then set to 1M
	if(baud_pos<0||baud_pos>3)
 8000e64:	4b9d      	ldr	r3, [pc, #628]	; (80010dc <main+0x2f4>)
 8000e66:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db04      	blt.n	8000e78 <main+0x90>
 8000e6e:	4b9b      	ldr	r3, [pc, #620]	; (80010dc <main+0x2f4>)
 8000e70:	f993 3000 	ldrsb.w	r3, [r3]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	dd02      	ble.n	8000e7e <main+0x96>
		baud_pos=3;
 8000e78:	4b98      	ldr	r3, [pc, #608]	; (80010dc <main+0x2f4>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	701a      	strb	r2, [r3, #0]
	PSC=pow(2,4-baud_pos);//set prescaler
 8000e7e:	4b97      	ldr	r3, [pc, #604]	; (80010dc <main+0x2f4>)
 8000e80:	f993 3000 	ldrsb.w	r3, [r3]
 8000e84:	f1c3 0304 	rsb	r3, r3, #4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fb4b 	bl	8000524 <__aeabi_i2d>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	ec43 2b11 	vmov	d1, r2, r3
 8000e96:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8001098 <main+0x2b0>
 8000e9a:	f007 fcfd 	bl	8008898 <pow>
 8000e9e:	ec53 2b10 	vmov	r2, r3, d0
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f7ff fe57 	bl	8000b58 <__aeabi_d2uiz>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b8c      	ldr	r3, [pc, #560]	; (80010e0 <main+0x2f8>)
 8000eb0:	701a      	strb	r2, [r3, #0]

	//get the number of delays between samples
	sample_rate=(uint16_t)(*(__IO uint32_t *) 0x0800F808);
 8000eb2:	4b8c      	ldr	r3, [pc, #560]	; (80010e4 <main+0x2fc>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <main+0x300>)
 8000eba:	801a      	strh	r2, [r3, #0]
	if(sample_rate<(uint16_t)10 || sample_rate>(uint16_t)10000)
 8000ebc:	4b8a      	ldr	r3, [pc, #552]	; (80010e8 <main+0x300>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	2b09      	cmp	r3, #9
 8000ec2:	d905      	bls.n	8000ed0 <main+0xe8>
 8000ec4:	4b88      	ldr	r3, [pc, #544]	; (80010e8 <main+0x300>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d903      	bls.n	8000ed8 <main+0xf0>
		sample_rate=3000;
 8000ed0:	4b85      	ldr	r3, [pc, #532]	; (80010e8 <main+0x300>)
 8000ed2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ed6:	801a      	strh	r2, [r3, #0]

	// retrieve the analog enabled booleans
	enable_word=(*(__IO uint32_t *) 0x0800F80C);
 8000ed8:	4b84      	ldr	r3, [pc, #528]	; (80010ec <main+0x304>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b84      	ldr	r3, [pc, #528]	; (80010f0 <main+0x308>)
 8000ee0:	601a      	str	r2, [r3, #0]
	memcpy(analog_enable_arr, wordToBytes(enable_word), 4);
 8000ee2:	4b83      	ldr	r3, [pc, #524]	; (80010f0 <main+0x308>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 f89e 	bl	8004028 <wordToBytes>
 8000eec:	4603      	mov	r3, r0
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <main+0x30c>)
 8000ef4:	601a      	str	r2, [r3, #0]
	//invert values so the default is on after erasing the memory
	analog_1_enabled=!analog_enable_arr[0];
 8000ef6:	4b7f      	ldr	r3, [pc, #508]	; (80010f4 <main+0x30c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf0c      	ite	eq
 8000efe:	2301      	moveq	r3, #1
 8000f00:	2300      	movne	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b7c      	ldr	r3, [pc, #496]	; (80010f8 <main+0x310>)
 8000f08:	701a      	strb	r2, [r3, #0]
	analog_2_enabled=!analog_enable_arr[1];
 8000f0a:	4b7a      	ldr	r3, [pc, #488]	; (80010f4 <main+0x30c>)
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf0c      	ite	eq
 8000f12:	2301      	moveq	r3, #1
 8000f14:	2300      	movne	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b78      	ldr	r3, [pc, #480]	; (80010fc <main+0x314>)
 8000f1c:	701a      	strb	r2, [r3, #0]
	analog_3_enabled=!analog_enable_arr[2];
 8000f1e:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <main+0x30c>)
 8000f20:	789b      	ldrb	r3, [r3, #2]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	bf0c      	ite	eq
 8000f26:	2301      	moveq	r3, #1
 8000f28:	2300      	movne	r3, #0
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b74      	ldr	r3, [pc, #464]	; (8001100 <main+0x318>)
 8000f30:	701a      	strb	r2, [r3, #0]

	//sample rate cap
	if(sample_rate<30||(analog_1_enabled && analog_2_enabled && analog_3_enabled && sample_rate > 3000/(log(PSC)/log(2)))||(((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))&& sample_rate>5000/(log(PSC)/log(2)))||(sample_rate>10000/(log(PSC)/log(2)))){
 8000f32:	4b6d      	ldr	r3, [pc, #436]	; (80010e8 <main+0x300>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	2b1d      	cmp	r3, #29
 8000f38:	f240 80a0 	bls.w	800107c <main+0x294>
 8000f3c:	4b6e      	ldr	r3, [pc, #440]	; (80010f8 <main+0x310>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d030      	beq.n	8000fa6 <main+0x1be>
 8000f44:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <main+0x314>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d02c      	beq.n	8000fa6 <main+0x1be>
 8000f4c:	4b6c      	ldr	r3, [pc, #432]	; (8001100 <main+0x318>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d028      	beq.n	8000fa6 <main+0x1be>
 8000f54:	4b64      	ldr	r3, [pc, #400]	; (80010e8 <main+0x300>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fae3 	bl	8000524 <__aeabi_i2d>
 8000f5e:	4604      	mov	r4, r0
 8000f60:	460d      	mov	r5, r1
 8000f62:	4b5f      	ldr	r3, [pc, #380]	; (80010e0 <main+0x2f8>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff facc 	bl	8000504 <__aeabi_ui2d>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	ec43 2b10 	vmov	d0, r2, r3
 8000f74:	f007 fc48 	bl	8008808 <log>
 8000f78:	ec51 0b10 	vmov	r0, r1, d0
 8000f7c:	a348      	add	r3, pc, #288	; (adr r3, 80010a0 <main+0x2b8>)
 8000f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f82:	f7ff fc63 	bl	800084c <__aeabi_ddiv>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	a147      	add	r1, pc, #284	; (adr r1, 80010a8 <main+0x2c0>)
 8000f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f90:	f7ff fc5c 	bl	800084c <__aeabi_ddiv>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4620      	mov	r0, r4
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	f7ff fdbc 	bl	8000b18 <__aeabi_dcmpgt>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d16a      	bne.n	800107c <main+0x294>
 8000fa6:	4b54      	ldr	r3, [pc, #336]	; (80010f8 <main+0x310>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <main+0x1ce>
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <main+0x314>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10f      	bne.n	8000fd6 <main+0x1ee>
 8000fb6:	4b50      	ldr	r3, [pc, #320]	; (80010f8 <main+0x310>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <main+0x1de>
 8000fbe:	4b50      	ldr	r3, [pc, #320]	; (8001100 <main+0x318>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d107      	bne.n	8000fd6 <main+0x1ee>
 8000fc6:	4b4d      	ldr	r3, [pc, #308]	; (80010fc <main+0x314>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d02c      	beq.n	8001028 <main+0x240>
 8000fce:	4b4c      	ldr	r3, [pc, #304]	; (8001100 <main+0x318>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d028      	beq.n	8001028 <main+0x240>
 8000fd6:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <main+0x300>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff faa2 	bl	8000524 <__aeabi_i2d>
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	460d      	mov	r5, r1
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <main+0x2f8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa8b 	bl	8000504 <__aeabi_ui2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	ec43 2b10 	vmov	d0, r2, r3
 8000ff6:	f007 fc07 	bl	8008808 <log>
 8000ffa:	ec51 0b10 	vmov	r0, r1, d0
 8000ffe:	a328      	add	r3, pc, #160	; (adr r3, 80010a0 <main+0x2b8>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff fc22 	bl	800084c <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	a128      	add	r1, pc, #160	; (adr r1, 80010b0 <main+0x2c8>)
 800100e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001012:	f7ff fc1b 	bl	800084c <__aeabi_ddiv>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4620      	mov	r0, r4
 800101c:	4629      	mov	r1, r5
 800101e:	f7ff fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d129      	bne.n	800107c <main+0x294>
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <main+0x300>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa79 	bl	8000524 <__aeabi_i2d>
 8001032:	4604      	mov	r4, r0
 8001034:	460d      	mov	r5, r1
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <main+0x2f8>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa62 	bl	8000504 <__aeabi_ui2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	ec43 2b10 	vmov	d0, r2, r3
 8001048:	f007 fbde 	bl	8008808 <log>
 800104c:	ec51 0b10 	vmov	r0, r1, d0
 8001050:	a313      	add	r3, pc, #76	; (adr r3, 80010a0 <main+0x2b8>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff fbf9 	bl	800084c <__aeabi_ddiv>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	a116      	add	r1, pc, #88	; (adr r1, 80010b8 <main+0x2d0>)
 8001060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001064:	f7ff fbf2 	bl	800084c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4620      	mov	r0, r4
 800106e:	4629      	mov	r1, r5
 8001070:	f7ff fd52 	bl	8000b18 <__aeabi_dcmpgt>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8095 	beq.w	80011a6 <main+0x3be>
		sample_rate=(analog_1_enabled && analog_2_enabled && analog_3_enabled)?3000:((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))?5000:10000;
 800107c:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <main+0x310>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d03f      	beq.n	8001104 <main+0x31c>
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <main+0x314>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d03b      	beq.n	8001104 <main+0x31c>
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <main+0x318>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d15b      	bne.n	800114c <main+0x364>
 8001094:	e036      	b.n	8001104 <main+0x31c>
 8001096:	bf00      	nop
 8001098:	00000000 	.word	0x00000000
 800109c:	40000000 	.word	0x40000000
 80010a0:	fefa39ef 	.word	0xfefa39ef
 80010a4:	3fe62e42 	.word	0x3fe62e42
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40a77000 	.word	0x40a77000
 80010b0:	00000000 	.word	0x00000000
 80010b4:	40b38800 	.word	0x40b38800
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40c38800 	.word	0x40c38800
 80010c0:	0800f800 	.word	0x0800f800
 80010c4:	20006388 	.word	0x20006388
 80010c8:	20000240 	.word	0x20000240
 80010cc:	200063e0 	.word	0x200063e0
 80010d0:	20002310 	.word	0x20002310
 80010d4:	20000234 	.word	0x20000234
 80010d8:	0800f804 	.word	0x0800f804
 80010dc:	2000015f 	.word	0x2000015f
 80010e0:	20000000 	.word	0x20000000
 80010e4:	0800f808 	.word	0x0800f808
 80010e8:	20000162 	.word	0x20000162
 80010ec:	0800f80c 	.word	0x0800f80c
 80010f0:	20002314 	.word	0x20002314
 80010f4:	20006398 	.word	0x20006398
 80010f8:	20000002 	.word	0x20000002
 80010fc:	20000003 	.word	0x20000003
 8001100:	20000004 	.word	0x20000004
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <main+0x358>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <main+0x32c>
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <main+0x35c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10f      	bne.n	8001134 <main+0x34c>
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <main+0x358>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <main+0x33c>
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <main+0x360>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d107      	bne.n	8001134 <main+0x34c>
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <main+0x35c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <main+0x352>
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <main+0x360>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <main+0x352>
 8001134:	f241 3388 	movw	r3, #5000	; 0x1388
 8001138:	e00a      	b.n	8001150 <main+0x368>
 800113a:	f242 7310 	movw	r3, #10000	; 0x2710
 800113e:	e007      	b.n	8001150 <main+0x368>
 8001140:	20000002 	.word	0x20000002
 8001144:	20000003 	.word	0x20000003
 8001148:	20000004 	.word	0x20000004
 800114c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001150:	4ab9      	ldr	r2, [pc, #740]	; (8001438 <main+0x650>)
 8001152:	8013      	strh	r3, [r2, #0]
		sample_rate/=(log(PSC)/log(2));
 8001154:	4bb9      	ldr	r3, [pc, #740]	; (800143c <main+0x654>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9d3 	bl	8000504 <__aeabi_ui2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	ec43 2b10 	vmov	d0, r2, r3
 8001166:	f007 fb4f 	bl	8008808 <log>
 800116a:	ec51 0b10 	vmov	r0, r1, d0
 800116e:	a3b0      	add	r3, pc, #704	; (adr r3, 8001430 <main+0x648>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fb6a 	bl	800084c <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4614      	mov	r4, r2
 800117e:	461d      	mov	r5, r3
 8001180:	4bad      	ldr	r3, [pc, #692]	; (8001438 <main+0x650>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9cd 	bl	8000524 <__aeabi_i2d>
 800118a:	4622      	mov	r2, r4
 800118c:	462b      	mov	r3, r5
 800118e:	f7ff fb5d 	bl	800084c <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fcdd 	bl	8000b58 <__aeabi_d2uiz>
 800119e:	4603      	mov	r3, r0
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4ba5      	ldr	r3, [pc, #660]	; (8001438 <main+0x650>)
 80011a4:	801a      	strh	r2, [r3, #0]
	}



	//get the offsets
	analog_1_offset=(*(__IO uint32_t *) 0x0800F810);
 80011a6:	4ba6      	ldr	r3, [pc, #664]	; (8001440 <main+0x658>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4aa6      	ldr	r2, [pc, #664]	; (8001444 <main+0x65c>)
 80011ac:	6013      	str	r3, [r2, #0]
	analog_2_offset=(*(__IO uint32_t *) 0x0800F814);
 80011ae:	4ba6      	ldr	r3, [pc, #664]	; (8001448 <main+0x660>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4aa6      	ldr	r2, [pc, #664]	; (800144c <main+0x664>)
 80011b4:	6013      	str	r3, [r2, #0]
	analog_3_offset=(*(__IO uint32_t *) 0x0800F818);
 80011b6:	4ba6      	ldr	r3, [pc, #664]	; (8001450 <main+0x668>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4aa6      	ldr	r2, [pc, #664]	; (8001454 <main+0x66c>)
 80011bc:	6013      	str	r3, [r2, #0]


	// Set the headers for the first analog device
	headers_1.StdId = (uint32_t)can_id_1; // set the CAN ID
 80011be:	4ba6      	ldr	r3, [pc, #664]	; (8001458 <main+0x670>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4ba5      	ldr	r3, [pc, #660]	; (800145c <main+0x674>)
 80011c6:	601a      	str	r2, [r3, #0]
	headers_1.IDE = CAN_ID_STD;
 80011c8:	4ba4      	ldr	r3, [pc, #656]	; (800145c <main+0x674>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
	headers_1.RTR = CAN_RTR_DATA;
 80011ce:	4ba3      	ldr	r3, [pc, #652]	; (800145c <main+0x674>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
	headers_1.DLC = (uint32_t)sizeof(a_data_1); // set the size of the data
 80011d4:	4ba1      	ldr	r3, [pc, #644]	; (800145c <main+0x674>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	611a      	str	r2, [r3, #16]
	headers_1.TransmitGlobalTime = DISABLE; // disable transmission of time
 80011da:	4ba0      	ldr	r3, [pc, #640]	; (800145c <main+0x674>)
 80011dc:	2200      	movs	r2, #0
 80011de:	751a      	strb	r2, [r3, #20]

	// Set the headers for the second analog device
	headers_2.StdId = can_id_2; // set the CAN ID
 80011e0:	4b9f      	ldr	r3, [pc, #636]	; (8001460 <main+0x678>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b9f      	ldr	r3, [pc, #636]	; (8001464 <main+0x67c>)
 80011e8:	601a      	str	r2, [r3, #0]
	headers_2.IDE = CAN_ID_STD;
 80011ea:	4b9e      	ldr	r3, [pc, #632]	; (8001464 <main+0x67c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
	headers_2.RTR = CAN_RTR_DATA;
 80011f0:	4b9c      	ldr	r3, [pc, #624]	; (8001464 <main+0x67c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
	headers_2.DLC = sizeof(a_data_2); // set the size of the data
 80011f6:	4b9b      	ldr	r3, [pc, #620]	; (8001464 <main+0x67c>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	611a      	str	r2, [r3, #16]
	headers_2.TransmitGlobalTime = DISABLE; // disable transmission of time
 80011fc:	4b99      	ldr	r3, [pc, #612]	; (8001464 <main+0x67c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	751a      	strb	r2, [r3, #20]

	// Set the headers for the third analog device
	headers_3.StdId = can_id_3; // set the CAN ID
 8001202:	4b99      	ldr	r3, [pc, #612]	; (8001468 <main+0x680>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	4b98      	ldr	r3, [pc, #608]	; (800146c <main+0x684>)
 800120a:	601a      	str	r2, [r3, #0]
	headers_3.IDE = CAN_ID_STD;
 800120c:	4b97      	ldr	r3, [pc, #604]	; (800146c <main+0x684>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
	headers_3.RTR = CAN_RTR_DATA;
 8001212:	4b96      	ldr	r3, [pc, #600]	; (800146c <main+0x684>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
	headers_3.DLC = sizeof(a_data_3); // set the size of the data
 8001218:	4b94      	ldr	r3, [pc, #592]	; (800146c <main+0x684>)
 800121a:	2202      	movs	r2, #2
 800121c:	611a      	str	r2, [r3, #16]
	headers_3.TransmitGlobalTime = DISABLE; // disable transmission of time
 800121e:	4b93      	ldr	r3, [pc, #588]	; (800146c <main+0x684>)
 8001220:	2200      	movs	r2, #0
 8001222:	751a      	strb	r2, [r3, #20]


	//Save the stored values to the menus
	//set the baud rate
	memset(temp,0,17); // erase the temp array
 8001224:	2211      	movs	r2, #17
 8001226:	2100      	movs	r1, #0
 8001228:	4891      	ldr	r0, [pc, #580]	; (8001470 <main+0x688>)
 800122a:	f006 fe5d 	bl	8007ee8 <memset>
	strncpy(temp, "Baud rate:  ",16); // copy the string to the temp array (limiting the length to 16 characters)
 800122e:	2210      	movs	r2, #16
 8001230:	4990      	ldr	r1, [pc, #576]	; (8001474 <main+0x68c>)
 8001232:	488f      	ldr	r0, [pc, #572]	; (8001470 <main+0x688>)
 8001234:	f006 fec7 	bl	8007fc6 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 8001238:	4b8f      	ldr	r3, [pc, #572]	; (8001478 <main+0x690>)
 800123a:	f993 3000 	ldrsb.w	r3, [r3]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4a8e      	ldr	r2, [pc, #568]	; (800147c <main+0x694>)
 8001242:	4413      	add	r3, r2
 8001244:	2211      	movs	r2, #17
 8001246:	4619      	mov	r1, r3
 8001248:	4889      	ldr	r0, [pc, #548]	; (8001470 <main+0x688>)
 800124a:	f006 fe84 	bl	8007f56 <strlcat>
	strlcpy(can_menu[1],temp,17);
 800124e:	2211      	movs	r2, #17
 8001250:	4987      	ldr	r1, [pc, #540]	; (8001470 <main+0x688>)
 8001252:	488b      	ldr	r0, [pc, #556]	; (8001480 <main+0x698>)
 8001254:	f006 fea2 	bl	8007f9c <strlcpy>

	//set can IDs
	memset(temp,0,17); // erase the temp array
 8001258:	2211      	movs	r2, #17
 800125a:	2100      	movs	r1, #0
 800125c:	4884      	ldr	r0, [pc, #528]	; (8001470 <main+0x688>)
 800125e:	f006 fe43 	bl	8007ee8 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8001262:	2210      	movs	r2, #16
 8001264:	4987      	ldr	r1, [pc, #540]	; (8001484 <main+0x69c>)
 8001266:	4882      	ldr	r0, [pc, #520]	; (8001470 <main+0x688>)
 8001268:	f006 fead 	bl	8007fc6 <strncpy>
	strcat(temp, "1:    ");
 800126c:	4880      	ldr	r0, [pc, #512]	; (8001470 <main+0x688>)
 800126e:	f7fe ffaf 	bl	80001d0 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <main+0x688>)
 8001278:	4413      	add	r3, r2
 800127a:	4a83      	ldr	r2, [pc, #524]	; (8001488 <main+0x6a0>)
 800127c:	6810      	ldr	r0, [r2, #0]
 800127e:	6018      	str	r0, [r3, #0]
 8001280:	8891      	ldrh	r1, [r2, #4]
 8001282:	7992      	ldrb	r2, [r2, #6]
 8001284:	8099      	strh	r1, [r3, #4]
 8001286:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8001288:	2210      	movs	r2, #16
 800128a:	2100      	movs	r1, #0
 800128c:	487f      	ldr	r0, [pc, #508]	; (800148c <main+0x6a4>)
 800128e:	f006 fe2b 	bl	8007ee8 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8001292:	4b71      	ldr	r3, [pc, #452]	; (8001458 <main+0x670>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	497d      	ldr	r1, [pc, #500]	; (8001490 <main+0x6a8>)
 800129a:	487c      	ldr	r0, [pc, #496]	; (800148c <main+0x6a4>)
 800129c:	f006 fe2c 	bl	8007ef8 <siprintf>
	strlcat(temp, char_arr,17);
 80012a0:	2211      	movs	r2, #17
 80012a2:	497a      	ldr	r1, [pc, #488]	; (800148c <main+0x6a4>)
 80012a4:	4872      	ldr	r0, [pc, #456]	; (8001470 <main+0x688>)
 80012a6:	f006 fe56 	bl	8007f56 <strlcat>
	memcpy(can_menu[2],temp,17);
 80012aa:	4b7a      	ldr	r3, [pc, #488]	; (8001494 <main+0x6ac>)
 80012ac:	4a70      	ldr	r2, [pc, #448]	; (8001470 <main+0x688>)
 80012ae:	3322      	adds	r3, #34	; 0x22
 80012b0:	6815      	ldr	r5, [r2, #0]
 80012b2:	6854      	ldr	r4, [r2, #4]
 80012b4:	6890      	ldr	r0, [r2, #8]
 80012b6:	68d1      	ldr	r1, [r2, #12]
 80012b8:	601d      	str	r5, [r3, #0]
 80012ba:	605c      	str	r4, [r3, #4]
 80012bc:	6098      	str	r0, [r3, #8]
 80012be:	60d9      	str	r1, [r3, #12]
 80012c0:	7c12      	ldrb	r2, [r2, #16]
 80012c2:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 80012c4:	2211      	movs	r2, #17
 80012c6:	2100      	movs	r1, #0
 80012c8:	4869      	ldr	r0, [pc, #420]	; (8001470 <main+0x688>)
 80012ca:	f006 fe0d 	bl	8007ee8 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 80012ce:	2210      	movs	r2, #16
 80012d0:	496c      	ldr	r1, [pc, #432]	; (8001484 <main+0x69c>)
 80012d2:	4867      	ldr	r0, [pc, #412]	; (8001470 <main+0x688>)
 80012d4:	f006 fe77 	bl	8007fc6 <strncpy>
	strcat(temp, "2:    ");
 80012d8:	4865      	ldr	r0, [pc, #404]	; (8001470 <main+0x688>)
 80012da:	f7fe ff79 	bl	80001d0 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b63      	ldr	r3, [pc, #396]	; (8001470 <main+0x688>)
 80012e4:	4413      	add	r3, r2
 80012e6:	4a6c      	ldr	r2, [pc, #432]	; (8001498 <main+0x6b0>)
 80012e8:	6810      	ldr	r0, [r2, #0]
 80012ea:	6018      	str	r0, [r3, #0]
 80012ec:	8891      	ldrh	r1, [r2, #4]
 80012ee:	7992      	ldrb	r2, [r2, #6]
 80012f0:	8099      	strh	r1, [r3, #4]
 80012f2:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 80012f4:	2210      	movs	r2, #16
 80012f6:	2100      	movs	r1, #0
 80012f8:	4864      	ldr	r0, [pc, #400]	; (800148c <main+0x6a4>)
 80012fa:	f006 fdf5 	bl	8007ee8 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 80012fe:	4b58      	ldr	r3, [pc, #352]	; (8001460 <main+0x678>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4962      	ldr	r1, [pc, #392]	; (8001490 <main+0x6a8>)
 8001306:	4861      	ldr	r0, [pc, #388]	; (800148c <main+0x6a4>)
 8001308:	f006 fdf6 	bl	8007ef8 <siprintf>
	strlcat(temp, char_arr,17);
 800130c:	2211      	movs	r2, #17
 800130e:	495f      	ldr	r1, [pc, #380]	; (800148c <main+0x6a4>)
 8001310:	4857      	ldr	r0, [pc, #348]	; (8001470 <main+0x688>)
 8001312:	f006 fe20 	bl	8007f56 <strlcat>
	memcpy(can_menu[3],temp,17);
 8001316:	4b5f      	ldr	r3, [pc, #380]	; (8001494 <main+0x6ac>)
 8001318:	4a55      	ldr	r2, [pc, #340]	; (8001470 <main+0x688>)
 800131a:	3333      	adds	r3, #51	; 0x33
 800131c:	6815      	ldr	r5, [r2, #0]
 800131e:	6854      	ldr	r4, [r2, #4]
 8001320:	6890      	ldr	r0, [r2, #8]
 8001322:	68d1      	ldr	r1, [r2, #12]
 8001324:	601d      	str	r5, [r3, #0]
 8001326:	605c      	str	r4, [r3, #4]
 8001328:	6098      	str	r0, [r3, #8]
 800132a:	60d9      	str	r1, [r3, #12]
 800132c:	7c12      	ldrb	r2, [r2, #16]
 800132e:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 8001330:	2211      	movs	r2, #17
 8001332:	2100      	movs	r1, #0
 8001334:	484e      	ldr	r0, [pc, #312]	; (8001470 <main+0x688>)
 8001336:	f006 fdd7 	bl	8007ee8 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 800133a:	2210      	movs	r2, #16
 800133c:	4951      	ldr	r1, [pc, #324]	; (8001484 <main+0x69c>)
 800133e:	484c      	ldr	r0, [pc, #304]	; (8001470 <main+0x688>)
 8001340:	f006 fe41 	bl	8007fc6 <strncpy>
	strcat(temp, "3:    ");
 8001344:	484a      	ldr	r0, [pc, #296]	; (8001470 <main+0x688>)
 8001346:	f7fe ff43 	bl	80001d0 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b48      	ldr	r3, [pc, #288]	; (8001470 <main+0x688>)
 8001350:	4413      	add	r3, r2
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <main+0x6b4>)
 8001354:	6810      	ldr	r0, [r2, #0]
 8001356:	6018      	str	r0, [r3, #0]
 8001358:	8891      	ldrh	r1, [r2, #4]
 800135a:	7992      	ldrb	r2, [r2, #6]
 800135c:	8099      	strh	r1, [r3, #4]
 800135e:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8001360:	2210      	movs	r2, #16
 8001362:	2100      	movs	r1, #0
 8001364:	4849      	ldr	r0, [pc, #292]	; (800148c <main+0x6a4>)
 8001366:	f006 fdbf 	bl	8007ee8 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 800136a:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <main+0x680>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	4947      	ldr	r1, [pc, #284]	; (8001490 <main+0x6a8>)
 8001372:	4846      	ldr	r0, [pc, #280]	; (800148c <main+0x6a4>)
 8001374:	f006 fdc0 	bl	8007ef8 <siprintf>
	strlcat(temp, char_arr,17);
 8001378:	2211      	movs	r2, #17
 800137a:	4944      	ldr	r1, [pc, #272]	; (800148c <main+0x6a4>)
 800137c:	483c      	ldr	r0, [pc, #240]	; (8001470 <main+0x688>)
 800137e:	f006 fdea 	bl	8007f56 <strlcat>
	memcpy(can_menu[4],temp,17);
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <main+0x6ac>)
 8001384:	4a3a      	ldr	r2, [pc, #232]	; (8001470 <main+0x688>)
 8001386:	f103 0444 	add.w	r4, r3, #68	; 0x44
 800138a:	4615      	mov	r5, r2
 800138c:	6828      	ldr	r0, [r5, #0]
 800138e:	6869      	ldr	r1, [r5, #4]
 8001390:	68aa      	ldr	r2, [r5, #8]
 8001392:	68eb      	ldr	r3, [r5, #12]
 8001394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001396:	7c2b      	ldrb	r3, [r5, #16]
 8001398:	7023      	strb	r3, [r4, #0]

	//Sample rate
	memset(temp,0,17); // erase the temp array
 800139a:	2211      	movs	r2, #17
 800139c:	2100      	movs	r1, #0
 800139e:	4834      	ldr	r0, [pc, #208]	; (8001470 <main+0x688>)
 80013a0:	f006 fda2 	bl	8007ee8 <memset>
	strncpy(temp, "Rate:   ",16); // copy the string to the temp array (limiting the length to 16 characters)
 80013a4:	2210      	movs	r2, #16
 80013a6:	493e      	ldr	r1, [pc, #248]	; (80014a0 <main+0x6b8>)
 80013a8:	4831      	ldr	r0, [pc, #196]	; (8001470 <main+0x688>)
 80013aa:	f006 fe0c 	bl	8007fc6 <strncpy>
	memset(char_arr, 0, 16);
 80013ae:	2210      	movs	r2, #16
 80013b0:	2100      	movs	r1, #0
 80013b2:	4836      	ldr	r0, [pc, #216]	; (800148c <main+0x6a4>)
 80013b4:	f006 fd98 	bl	8007ee8 <memset>
	sprintf(char_arr, "%05d", sample_rate);
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <main+0x650>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4939      	ldr	r1, [pc, #228]	; (80014a4 <main+0x6bc>)
 80013c0:	4832      	ldr	r0, [pc, #200]	; (800148c <main+0x6a4>)
 80013c2:	f006 fd99 	bl	8007ef8 <siprintf>
	strcat(temp, char_arr);
 80013c6:	4931      	ldr	r1, [pc, #196]	; (800148c <main+0x6a4>)
 80013c8:	4829      	ldr	r0, [pc, #164]	; (8001470 <main+0x688>)
 80013ca:	f006 fdb5 	bl	8007f38 <strcat>
	strlcat(temp,"sps",17);
 80013ce:	2211      	movs	r2, #17
 80013d0:	4935      	ldr	r1, [pc, #212]	; (80014a8 <main+0x6c0>)
 80013d2:	4827      	ldr	r0, [pc, #156]	; (8001470 <main+0x688>)
 80013d4:	f006 fdbf 	bl	8007f56 <strlcat>
	memcpy(main_menu[3],temp,17);
 80013d8:	4b34      	ldr	r3, [pc, #208]	; (80014ac <main+0x6c4>)
 80013da:	4a25      	ldr	r2, [pc, #148]	; (8001470 <main+0x688>)
 80013dc:	3333      	adds	r3, #51	; 0x33
 80013de:	6815      	ldr	r5, [r2, #0]
 80013e0:	6854      	ldr	r4, [r2, #4]
 80013e2:	6890      	ldr	r0, [r2, #8]
 80013e4:	68d1      	ldr	r1, [r2, #12]
 80013e6:	601d      	str	r5, [r3, #0]
 80013e8:	605c      	str	r4, [r3, #4]
 80013ea:	6098      	str	r0, [r3, #8]
 80013ec:	60d9      	str	r1, [r3, #12]
 80013ee:	7c12      	ldrb	r2, [r2, #16]
 80013f0:	741a      	strb	r2, [r3, #16]

	//Analog enabled bools
	if(!analog_1_enabled)
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <main+0x6c8>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10b      	bne.n	8001412 <main+0x62a>
		memcpy(analog_menu[5],"Analog 1:    OFF",17);
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <main+0x6cc>)
 80013fc:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <main+0x6d0>)
 80013fe:	f103 0555 	add.w	r5, r3, #85	; 0x55
 8001402:	4614      	mov	r4, r2
 8001404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001406:	6028      	str	r0, [r5, #0]
 8001408:	6069      	str	r1, [r5, #4]
 800140a:	60aa      	str	r2, [r5, #8]
 800140c:	60eb      	str	r3, [r5, #12]
 800140e:	7823      	ldrb	r3, [r4, #0]
 8001410:	742b      	strb	r3, [r5, #16]
	if(!analog_2_enabled)
 8001412:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <main+0x6d4>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d159      	bne.n	80014ce <main+0x6e6>
		memcpy(analog_menu[6],"Analog 2:    OFF",17);
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <main+0x6cc>)
 800141c:	4a28      	ldr	r2, [pc, #160]	; (80014c0 <main+0x6d8>)
 800141e:	f103 0566 	add.w	r5, r3, #102	; 0x66
 8001422:	4614      	mov	r4, r2
 8001424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001426:	6028      	str	r0, [r5, #0]
 8001428:	e04c      	b.n	80014c4 <main+0x6dc>
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w
 8001430:	fefa39ef 	.word	0xfefa39ef
 8001434:	3fe62e42 	.word	0x3fe62e42
 8001438:	20000162 	.word	0x20000162
 800143c:	20000000 	.word	0x20000000
 8001440:	0800f810 	.word	0x0800f810
 8001444:	200001fc 	.word	0x200001fc
 8001448:	0800f814 	.word	0x0800f814
 800144c:	20000200 	.word	0x20000200
 8001450:	0800f818 	.word	0x0800f818
 8001454:	20000204 	.word	0x20000204
 8001458:	200063e0 	.word	0x200063e0
 800145c:	20002260 	.word	0x20002260
 8001460:	20002310 	.word	0x20002310
 8001464:	200063e4 	.word	0x200063e4
 8001468:	20000234 	.word	0x20000234
 800146c:	20002248 	.word	0x20002248
 8001470:	200022a4 	.word	0x200022a4
 8001474:	08009b98 	.word	0x08009b98
 8001478:	2000015f 	.word	0x2000015f
 800147c:	08009d44 	.word	0x08009d44
 8001480:	2000005d 	.word	0x2000005d
 8001484:	08009ba8 	.word	0x08009ba8
 8001488:	08009bb0 	.word	0x08009bb0
 800148c:	20006450 	.word	0x20006450
 8001490:	08009bb8 	.word	0x08009bb8
 8001494:	2000004c 	.word	0x2000004c
 8001498:	08009bc0 	.word	0x08009bc0
 800149c:	08009bc8 	.word	0x08009bc8
 80014a0:	08009bd0 	.word	0x08009bd0
 80014a4:	08009bdc 	.word	0x08009bdc
 80014a8:	08009be4 	.word	0x08009be4
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000002 	.word	0x20000002
 80014b4:	200000b4 	.word	0x200000b4
 80014b8:	08009be8 	.word	0x08009be8
 80014bc:	20000003 	.word	0x20000003
 80014c0:	08009bfc 	.word	0x08009bfc
 80014c4:	6069      	str	r1, [r5, #4]
 80014c6:	60aa      	str	r2, [r5, #8]
 80014c8:	60eb      	str	r3, [r5, #12]
 80014ca:	7823      	ldrb	r3, [r4, #0]
 80014cc:	742b      	strb	r3, [r5, #16]
	if(!analog_3_enabled)
 80014ce:	4ba7      	ldr	r3, [pc, #668]	; (800176c <main+0x984>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10b      	bne.n	80014ee <main+0x706>
		memcpy(analog_menu[7],"Analog 3:    OFF",17);
 80014d6:	4ba6      	ldr	r3, [pc, #664]	; (8001770 <main+0x988>)
 80014d8:	4aa6      	ldr	r2, [pc, #664]	; (8001774 <main+0x98c>)
 80014da:	f103 0577 	add.w	r5, r3, #119	; 0x77
 80014de:	4614      	mov	r4, r2
 80014e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e2:	6028      	str	r0, [r5, #0]
 80014e4:	6069      	str	r1, [r5, #4]
 80014e6:	60aa      	str	r2, [r5, #8]
 80014e8:	60eb      	str	r3, [r5, #12]
 80014ea:	7823      	ldrb	r3, [r4, #0]
 80014ec:	742b      	strb	r3, [r5, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ee:	f003 f8fb 	bl	80046e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f2:	f000 f977 	bl	80017e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f6:	f000 fb99 	bl	8001c2c <MX_GPIO_Init>
  MX_CAN_Init();
 80014fa:	f000 f9d7 	bl	80018ac <MX_CAN_Init>
  MX_SDADC1_Init();
 80014fe:	f000 fa1b 	bl	8001938 <MX_SDADC1_Init>
  MX_SDADC2_Init();
 8001502:	f000 fa55 	bl	80019b0 <MX_SDADC2_Init>
  MX_SDADC3_Init();
 8001506:	f000 fa8f 	bl	8001a28 <MX_SDADC3_Init>
  MX_TIM2_Init();
 800150a:	f000 faf5 	bl	8001af8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800150e:	f000 fb3f 	bl	8001b90 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//start timer
 8001512:	4899      	ldr	r0, [pc, #612]	; (8001778 <main+0x990>)
 8001514:	f006 f846 	bl	80075a4 <HAL_TIM_Base_Start>

	//initialize LCD
	lcd_init();
 8001518:	f7ff fc08 	bl	8000d2c <lcd_init>
	lcd_clear();
 800151c:	f7ff fbdc 	bl	8000cd8 <lcd_clear>
	lcd_put_cur(0,0);
 8001520:	2100      	movs	r1, #0
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fbe3 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Starting Up...");
 8001528:	4894      	ldr	r0, [pc, #592]	; (800177c <main+0x994>)
 800152a:	f7ff fc45 	bl	8000db8 <lcd_send_string>
	HAL_Delay(1000);
 800152e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001532:	f003 f93f 	bl	80047b4 <HAL_Delay>
	lcd_put_cur(0,0);
 8001536:	2100      	movs	r1, #0
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fbd8 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Initializing CAN");
 800153e:	4890      	ldr	r0, [pc, #576]	; (8001780 <main+0x998>)
 8001540:	f7ff fc3a 	bl	8000db8 <lcd_send_string>
	HAL_Delay(1000);
 8001544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001548:	f003 f934 	bl	80047b4 <HAL_Delay>

	//setup CAN filter
	can_filter.FilterMaskIdHigh = 0x0000;
 800154c:	4b8d      	ldr	r3, [pc, #564]	; (8001784 <main+0x99c>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8001552:	4b8c      	ldr	r3, [pc, #560]	; (8001784 <main+0x99c>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001558:	4b8a      	ldr	r3, [pc, #552]	; (8001784 <main+0x99c>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
	can_filter.FilterBank = 0;
 800155e:	4b89      	ldr	r3, [pc, #548]	; (8001784 <main+0x99c>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001564:	4b87      	ldr	r3, [pc, #540]	; (8001784 <main+0x99c>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800156a:	4b86      	ldr	r3, [pc, #536]	; (8001784 <main+0x99c>)
 800156c:	2201      	movs	r2, #1
 800156e:	61da      	str	r2, [r3, #28]
	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001570:	4b84      	ldr	r3, [pc, #528]	; (8001784 <main+0x99c>)
 8001572:	2201      	movs	r2, #1
 8001574:	621a      	str	r2, [r3, #32]
	//check that CAN Filter was setup correctly
	if (HAL_CAN_ConfigFilter(&hcan, &can_filter) != HAL_OK) {
 8001576:	4983      	ldr	r1, [pc, #524]	; (8001784 <main+0x99c>)
 8001578:	4883      	ldr	r0, [pc, #524]	; (8001788 <main+0x9a0>)
 800157a:	f003 fa3a 	bl	80049f2 <HAL_CAN_ConfigFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <main+0x7a0>
		Error_Handler();
 8001584:	f002 fe7c 	bl	8004280 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001588:	487f      	ldr	r0, [pc, #508]	; (8001788 <main+0x9a0>)
 800158a:	f003 fafc 	bl	8004b86 <HAL_CAN_Start>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <main+0x7b0>
		Error_Handler();
 8001594:	f002 fe74 	bl	8004280 <Error_Handler>
	}

	//display main menu
	lcd_put_cur(0,0);
 8001598:	2100      	movs	r1, #0
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fba7 	bl	8000cee <lcd_put_cur>
	//the string is copied to temp to remove the null character at the end of the string in the menu
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80015a0:	4b7a      	ldr	r3, [pc, #488]	; (800178c <main+0x9a4>)
 80015a2:	f993 3000 	ldrsb.w	r3, [r3]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4613      	mov	r3, r2
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4413      	add	r3, r2
 80015ae:	4a78      	ldr	r2, [pc, #480]	; (8001790 <main+0x9a8>)
 80015b0:	4413      	add	r3, r2
 80015b2:	2210      	movs	r2, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	4877      	ldr	r0, [pc, #476]	; (8001794 <main+0x9ac>)
 80015b8:	f006 fd05 	bl	8007fc6 <strncpy>
 80015bc:	4603      	mov	r3, r0
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fbfa 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(1,0);
 80015c4:	2100      	movs	r1, #0
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff fb91 	bl	8000cee <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 80015cc:	4b6f      	ldr	r3, [pc, #444]	; (800178c <main+0x9a4>)
 80015ce:	f993 3000 	ldrsb.w	r3, [r3]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	4613      	mov	r3, r2
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	4413      	add	r3, r2
 80015da:	4a6d      	ldr	r2, [pc, #436]	; (8001790 <main+0x9a8>)
 80015dc:	4413      	add	r3, r2
 80015de:	2210      	movs	r2, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	486c      	ldr	r0, [pc, #432]	; (8001794 <main+0x9ac>)
 80015e4:	f006 fcef 	bl	8007fc6 <strncpy>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fbe4 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,0);
 80015f0:	2100      	movs	r1, #0
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fb7b 	bl	8000cee <lcd_put_cur>

	int display_counter=0;//counter used in updating the display
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]

	//calibrate the SDADCs
	calibrateSDADC(&hsdadc1, SDADC_CHANNEL_8);
 80015fc:	4966      	ldr	r1, [pc, #408]	; (8001798 <main+0x9b0>)
 80015fe:	4867      	ldr	r0, [pc, #412]	; (800179c <main+0x9b4>)
 8001600:	f002 fd32 	bl	8004068 <calibrateSDADC>
	calibrateSDADC(&hsdadc2, SDADC_CHANNEL_7);
 8001604:	4966      	ldr	r1, [pc, #408]	; (80017a0 <main+0x9b8>)
 8001606:	4867      	ldr	r0, [pc, #412]	; (80017a4 <main+0x9bc>)
 8001608:	f002 fd2e 	bl	8004068 <calibrateSDADC>
	calibrateSDADC(&hsdadc3, SDADC_CHANNEL_8);
 800160c:	4962      	ldr	r1, [pc, #392]	; (8001798 <main+0x9b0>)
 800160e:	4866      	ldr	r0, [pc, #408]	; (80017a8 <main+0x9c0>)
 8001610:	f002 fd2a 	bl	8004068 <calibrateSDADC>
	HAL_Delay(300);
 8001614:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001618:	f003 f8cc 	bl	80047b4 <HAL_Delay>

	//start ADC conversion interrupts
	if(analog_1_enabled)
 800161c:	4b63      	ldr	r3, [pc, #396]	; (80017ac <main+0x9c4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <main+0x842>
		HAL_SDADC_Start_IT(&hsdadc1);
 8001624:	485d      	ldr	r0, [pc, #372]	; (800179c <main+0x9b4>)
 8001626:	f005 fdb4 	bl	8007192 <HAL_SDADC_Start_IT>
	if(analog_2_enabled)
 800162a:	4b61      	ldr	r3, [pc, #388]	; (80017b0 <main+0x9c8>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <main+0x850>
		HAL_SDADC_Start_IT(&hsdadc2);
 8001632:	485c      	ldr	r0, [pc, #368]	; (80017a4 <main+0x9bc>)
 8001634:	f005 fdad 	bl	8007192 <HAL_SDADC_Start_IT>
	if(analog_3_enabled)
 8001638:	4b4c      	ldr	r3, [pc, #304]	; (800176c <main+0x984>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <main+0x85e>
		HAL_SDADC_Start_IT(&hsdadc3);
 8001640:	4859      	ldr	r0, [pc, #356]	; (80017a8 <main+0x9c0>)
 8001642:	f005 fda6 	bl	8007192 <HAL_SDADC_Start_IT>


	// start can timer
	TIM3->ARR = (uint32_t)(((float)1/sample_rate)*1000000) - 1;
 8001646:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <main+0x9cc>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80017b8 <main+0x9d0>
 800165e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001666:	ee17 3a90 	vmov	r3, s15
 800166a:	4a54      	ldr	r2, [pc, #336]	; (80017bc <main+0x9d4>)
 800166c:	3b01      	subs	r3, #1
 800166e:	62d3      	str	r3, [r2, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim3);
 8001670:	4853      	ldr	r0, [pc, #332]	; (80017c0 <main+0x9d8>)
 8001672:	f005 fff7 	bl	8007664 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//start ADC conversion interrupts
		if(analog_1_enabled)
 8001676:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <main+0x9c4>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <main+0x89c>
			HAL_SDADC_Start_IT(&hsdadc1);
 800167e:	4847      	ldr	r0, [pc, #284]	; (800179c <main+0x9b4>)
 8001680:	f005 fd87 	bl	8007192 <HAL_SDADC_Start_IT>
		if(analog_2_enabled)
 8001684:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <main+0x9c8>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <main+0x8aa>
			HAL_SDADC_Start_IT(&hsdadc2);
 800168c:	4845      	ldr	r0, [pc, #276]	; (80017a4 <main+0x9bc>)
 800168e:	f005 fd80 	bl	8007192 <HAL_SDADC_Start_IT>
		if(analog_3_enabled)
 8001692:	4b36      	ldr	r3, [pc, #216]	; (800176c <main+0x984>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <main+0x8b8>
			HAL_SDADC_Start_IT(&hsdadc3);
 800169a:	4843      	ldr	r0, [pc, #268]	; (80017a8 <main+0x9c0>)
 800169c:	f005 fd79 	bl	8007192 <HAL_SDADC_Start_IT>



		//Delay between counter increments
		if ((int16_t)__HAL_TIM_GET_COUNTER(&htim2) >= us){
 80016a0:	4b35      	ldr	r3, [pc, #212]	; (8001778 <main+0x990>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <main+0x9dc>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbe1      	blt.n	8001676 <main+0x88e>
			__HAL_TIM_SET_COUNTER(&htim2,0); // reset timer
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <main+0x990>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
			//reset display counter (waits 200 delays between updates to the display in the display values menu)
			if(display_counter>1000)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016c0:	dd01      	ble.n	80016c6 <main+0x8de>
				display_counter=0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]


			//Display analog values on display
			if(in_main_menu && menu_pos==2 && change_value_bool && display_counter==0)
 80016c6:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <main+0x9e0>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00d      	beq.n	80016ea <main+0x902>
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <main+0x9a4>)
 80016d0:	f993 3000 	ldrsb.w	r3, [r3]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d108      	bne.n	80016ea <main+0x902>
 80016d8:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <main+0x9e4>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <main+0x902>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <main+0x902>
				displayValues();
 80016e6:	f002 fadd 	bl	8003ca4 <displayValues>

			//unpress buttons
			if(btn_counter>debounce_delay){
 80016ea:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <main+0x9e8>)
 80016ec:	881a      	ldrh	r2, [r3, #0]
 80016ee:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <main+0x9ec>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d92f      	bls.n	8001756 <main+0x96e>
				if(up_btn_pressed && !HAL_GPIO_ReadPin(UP_BTN_GPIO_Port, UP_BTN_Pin))
 80016f6:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <main+0x9f0>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00a      	beq.n	8001714 <main+0x92c>
 80016fe:	2104      	movs	r1, #4
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f004 f80c 	bl	8005720 <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <main+0x92c>
					up_btn_pressed=0;
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <main+0x9f0>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
				if(down_btn_pressed && !HAL_GPIO_ReadPin(DOWN_BTN_GPIO_Port, DOWN_BTN_Pin))
 8001714:	4b31      	ldr	r3, [pc, #196]	; (80017dc <main+0x9f4>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <main+0x94a>
 800171c:	2101      	movs	r1, #1
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f003 fffd 	bl	8005720 <HAL_GPIO_ReadPin>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <main+0x94a>
					down_btn_pressed=0;
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <main+0x9f4>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
				if(sel_btn_pressed && !HAL_GPIO_ReadPin(SEL_BTN_GPIO_Port, SEL_BTN_Pin))
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <main+0x9f8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00a      	beq.n	8001750 <main+0x968>
 800173a:	2102      	movs	r1, #2
 800173c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001740:	f003 ffee 	bl	8005720 <HAL_GPIO_ReadPin>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <main+0x968>
					sel_btn_pressed=0;
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <main+0x9f8>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
				btn_counter=0;
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <main+0x9e8>)
 8001752:	2200      	movs	r2, #0
 8001754:	801a      	strh	r2, [r3, #0]
			}

			//increment counters
			display_counter++;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3301      	adds	r3, #1
 800175a:	607b      	str	r3, [r7, #4]
			btn_counter++;
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <main+0x9e8>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <main+0x9e8>)
 8001766:	801a      	strh	r2, [r3, #0]
		if(analog_1_enabled)
 8001768:	e785      	b.n	8001676 <main+0x88e>
 800176a:	bf00      	nop
 800176c:	20000004 	.word	0x20000004
 8001770:	200000b4 	.word	0x200000b4
 8001774:	08009c10 	.word	0x08009c10
 8001778:	200063fc 	.word	0x200063fc
 800177c:	08009c24 	.word	0x08009c24
 8001780:	08009c34 	.word	0x08009c34
 8001784:	20004318 	.word	0x20004318
 8001788:	20002278 	.word	0x20002278
 800178c:	2000021b 	.word	0x2000021b
 8001790:	20000008 	.word	0x20000008
 8001794:	200022a4 	.word	0x200022a4
 8001798:	00080100 	.word	0x00080100
 800179c:	20004340 	.word	0x20004340
 80017a0:	00070080 	.word	0x00070080
 80017a4:	2000639c 	.word	0x2000639c
 80017a8:	20006464 	.word	0x20006464
 80017ac:	20000002 	.word	0x20000002
 80017b0:	20000003 	.word	0x20000003
 80017b4:	20000162 	.word	0x20000162
 80017b8:	49742400 	.word	0x49742400
 80017bc:	40000400 	.word	0x40000400
 80017c0:	200022c0 	.word	0x200022c0
 80017c4:	20000160 	.word	0x20000160
 80017c8:	2000015e 	.word	0x2000015e
 80017cc:	2000021f 	.word	0x2000021f
 80017d0:	20000224 	.word	0x20000224
 80017d4:	20000164 	.word	0x20000164
 80017d8:	20000220 	.word	0x20000220
 80017dc:	20000221 	.word	0x20000221
 80017e0:	20000222 	.word	0x20000222

080017e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b09a      	sub	sp, #104	; 0x68
 80017e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ee:	2228      	movs	r2, #40	; 0x28
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f006 fb78 	bl	8007ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001808:	463b      	mov	r3, r7
 800180a:	222c      	movs	r2, #44	; 0x2c
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f006 fb6a 	bl	8007ee8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001814:	2302      	movs	r3, #2
 8001816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001818:	2301      	movs	r3, #1
 800181a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800181c:	2310      	movs	r3, #16
 800181e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001820:	2302      	movs	r3, #2
 8001822:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001824:	2300      	movs	r3, #0
 8001826:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001828:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800182c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001832:	4618      	mov	r0, r3
 8001834:	f003 ffdc 	bl	80057f0 <HAL_RCC_OscConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800183e:	f002 fd1f 	bl	8004280 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001842:	230f      	movs	r3, #15
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001846:	2302      	movs	r3, #2
 8001848:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800184e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185c:	2102      	movs	r1, #2
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fece 	bl	8006600 <HAL_RCC_ClockConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800186a:	f002 fd09 	bl	8004280 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDADC;
 800186e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001872:	603b      	str	r3, [r7, #0]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV12;
 8001874:	f04f 4328 	mov.w	r3, #2818572288	; 0xa8000000
 8001878:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187a:	463b      	mov	r3, r7
 800187c:	4618      	mov	r0, r3
 800187e:	f005 f8a7 	bl	80069d0 <HAL_RCCEx_PeriphCLKConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001888:	f002 fcfa 	bl	8004280 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 800188c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001890:	f003 ff8e 	bl	80057b0 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG2);
 8001894:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001898:	f003 ff8a 	bl	80057b0 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 800189c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018a0:	f003 ff86 	bl	80057b0 <HAL_PWREx_EnableSDADC>
}
 80018a4:	bf00      	nop
 80018a6:	3768      	adds	r7, #104	; 0x68
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <MX_CAN_Init+0x80>)
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <MX_CAN_Init+0x84>)
 80018b4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <MX_CAN_Init+0x80>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_CAN_Init+0x80>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_CAN_Init+0x80>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_CAN_Init+0x80>)
 80018ca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80018ce:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_CAN_Init+0x80>)
 80018d2:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80018d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_CAN_Init+0x80>)
 80018da:	2200      	movs	r2, #0
 80018dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_CAN_Init+0x80>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_CAN_Init+0x80>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_CAN_Init+0x80>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_CAN_Init+0x80>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <MX_CAN_Init+0x80>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <MX_CAN_Init+0x80>)
 80018fe:	f002 ff7d 	bl	80047fc <HAL_CAN_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001908:	f002 fcba 	bl	8004280 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	//set the prescaler to the right value for the stored baud rate
	hcan.Init.Prescaler = PSC;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_CAN_Init+0x88>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_CAN_Init+0x80>)
 8001914:	605a      	str	r2, [r3, #4]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_CAN_Init+0x80>)
 8001918:	f002 ff70 	bl	80047fc <HAL_CAN_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_CAN_Init+0x7a>
	{
		Error_Handler();
 8001922:	f002 fcad 	bl	8004280 <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20002278 	.word	0x20002278
 8001930:	40006400 	.word	0x40006400
 8001934:	20000000 	.word	0x20000000

08001938 <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 800193e:	463b      	mov	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC1_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_SDADC1_Init+0x70>)
 800194c:	4a17      	ldr	r2, [pc, #92]	; (80019ac <MX_SDADC1_Init+0x74>)
 800194e:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_SDADC1_Init+0x70>)
 8001952:	2200      	movs	r2, #0
 8001954:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_SDADC1_Init+0x70>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_SDADC1_Init+0x70>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_SDADC1_Init+0x70>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8001968:	480f      	ldr	r0, [pc, #60]	; (80019a8 <MX_SDADC1_Init+0x70>)
 800196a:	f005 f9a5 	bl	8006cb8 <HAL_SDADC_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_SDADC1_Init+0x40>
  {
    Error_Handler();
 8001974:	f002 fc84 	bl	8004280 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001978:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800197c:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 800198a:	463b      	mov	r3, r7
 800198c:	461a      	mov	r2, r3
 800198e:	2100      	movs	r1, #0
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_SDADC1_Init+0x70>)
 8001992:	f005 fa15 	bl	8006dc0 <HAL_SDADC_PrepareChannelConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_SDADC1_Init+0x68>
  {
    Error_Handler();
 800199c:	f002 fc70 	bl	8004280 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20004340 	.word	0x20004340
 80019ac:	40016000 	.word	0x40016000

080019b0 <MX_SDADC2_Init>:
  * @brief SDADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC2_Init 0 */

  /* USER CODE END SDADC2_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 80019b6:	463b      	mov	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC2_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc2.Instance = SDADC2;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_SDADC2_Init+0x70>)
 80019c4:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <MX_SDADC2_Init+0x74>)
 80019c6:	601a      	str	r2, [r3, #0]
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_SDADC2_Init+0x70>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	605a      	str	r2, [r3, #4]
  hsdadc2.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_SDADC2_Init+0x70>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hsdadc2.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_SDADC2_Init+0x70>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  hsdadc2.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_SDADC2_Init+0x70>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 80019e0:	480f      	ldr	r0, [pc, #60]	; (8001a20 <MX_SDADC2_Init+0x70>)
 80019e2:	f005 f969 	bl	8006cb8 <HAL_SDADC_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_SDADC2_Init+0x40>
  {
    Error_Handler();
 80019ec:	f002 fc48 	bl	8004280 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 80019f0:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80019f4:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001a02:	463b      	mov	r3, r7
 8001a04:	461a      	mov	r2, r3
 8001a06:	2100      	movs	r1, #0
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_SDADC2_Init+0x70>)
 8001a0a:	f005 f9d9 	bl	8006dc0 <HAL_SDADC_PrepareChannelConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_SDADC2_Init+0x68>
  {
    Error_Handler();
 8001a14:	f002 fc34 	bl	8004280 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC2_Init 2 */

  /* USER CODE END SDADC2_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000639c 	.word	0x2000639c
 8001a24:	40016400 	.word	0x40016400

08001a28 <MX_SDADC3_Init>:
  * @brief SDADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC3_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC3_Init 0 */

  /* USER CODE END SDADC3_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC3_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc3.Instance = SDADC3;
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001a3c:	4a2c      	ldr	r2, [pc, #176]	; (8001af0 <MX_SDADC3_Init+0xc8>)
 8001a3e:	601a      	str	r2, [r3, #0]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	605a      	str	r2, [r3, #4]
  hsdadc3.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  hsdadc3.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8001a5e:	4823      	ldr	r0, [pc, #140]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001a60:	f005 f92a 	bl	8006cb8 <HAL_SDADC_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_SDADC3_Init+0x46>
  {
    Error_Handler();
 8001a6a:	f002 fc09 	bl	8004280 <Error_Handler>
  }
  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc3, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8001a6e:	2100      	movs	r1, #0
 8001a70:	481e      	ldr	r0, [pc, #120]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001a72:	f005 fae1 	bl	8007038 <HAL_SDADC_SelectInjectedDelay>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_SDADC3_Init+0x58>
  {
    Error_Handler();
 8001a7c:	f002 fc00 	bl	8004280 <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc3, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8001a80:	2100      	movs	r1, #0
 8001a82:	481a      	ldr	r0, [pc, #104]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001a84:	f005 faa8 	bl	8006fd8 <HAL_SDADC_SelectInjectedTrigger>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_SDADC3_Init+0x6a>
  {
    Error_Handler();
 8001a8e:	f002 fbf7 	bl	8004280 <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc3, SDADC_CHANNEL_8, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8001a92:	2201      	movs	r2, #1
 8001a94:	4917      	ldr	r1, [pc, #92]	; (8001af4 <MX_SDADC3_Init+0xcc>)
 8001a96:	4815      	ldr	r0, [pc, #84]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001a98:	f005 fa62 	bl	8006f60 <HAL_SDADC_InjectedConfigChannel>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_SDADC3_Init+0x7e>
  {
    Error_Handler();
 8001aa2:	f002 fbed 	bl	8004280 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001aa6:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001aaa:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001ab8:	463b      	mov	r3, r7
 8001aba:	461a      	mov	r2, r3
 8001abc:	2100      	movs	r1, #0
 8001abe:	480b      	ldr	r0, [pc, #44]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001ac0:	f005 f97e 	bl	8006dc0 <HAL_SDADC_PrepareChannelConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_SDADC3_Init+0xa6>
  {
    Error_Handler();
 8001aca:	f002 fbd9 	bl	8004280 <Error_Handler>
  }
  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc3, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4908      	ldr	r1, [pc, #32]	; (8001af4 <MX_SDADC3_Init+0xcc>)
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <MX_SDADC3_Init+0xc4>)
 8001ad4:	f005 f9b0 	bl	8006e38 <HAL_SDADC_AssociateChannelConfig>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_SDADC3_Init+0xba>
  {
    Error_Handler();
 8001ade:	f002 fbcf 	bl	8004280 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC3_Init 2 */

  /* USER CODE END SDADC3_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20006464 	.word	0x20006464
 8001af0:	40016800 	.word	0x40016800
 8001af4:	00080100 	.word	0x00080100

08001af8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0308 	add.w	r3, r7, #8
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b1e:	223f      	movs	r2, #63	; 0x3f
 8001b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b3c:	4813      	ldr	r0, [pc, #76]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b3e:	f005 fce2 	bl	8007506 <HAL_TIM_Base_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b48:	f002 fb9a 	bl	8004280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b5a:	f005 fef3 	bl	8007944 <HAL_TIM_ConfigClockSource>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b64:	f002 fb8c 	bl	8004280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b70:	463b      	mov	r3, r7
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_TIM2_Init+0x94>)
 8001b76:	f006 f905 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b80:	f002 fb7e 	bl	8004280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200063fc 	.word	0x200063fc

08001b90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <MX_TIM3_Init+0x98>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bb4:	223f      	movs	r2, #63	; 0x3f
 8001bb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bd2:	4814      	ldr	r0, [pc, #80]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bd4:	f005 fc97 	bl	8007506 <HAL_TIM_Base_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001bde:	f002 fb4f 	bl	8004280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	4619      	mov	r1, r3
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001bf0:	f005 fea8 	bl	8007944 <HAL_TIM_ConfigClockSource>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001bfa:	f002 fb41 	bl	8004280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c06:	463b      	mov	r3, r7
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4806      	ldr	r0, [pc, #24]	; (8001c24 <MX_TIM3_Init+0x94>)
 8001c0c:	f006 f8ba 	bl	8007d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c16:	f002 fb33 	bl	8004280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200022c0 	.word	0x200022c0
 8001c28:	40000400 	.word	0x40000400

08001c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <MX_GPIO_Init+0x100>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4a39      	ldr	r2, [pc, #228]	; (8001d2c <MX_GPIO_Init+0x100>)
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	6153      	str	r3, [r2, #20]
 8001c4e:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <MX_GPIO_Init+0x100>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <MX_GPIO_Init+0x100>)
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	4a33      	ldr	r2, [pc, #204]	; (8001d2c <MX_GPIO_Init+0x100>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c64:	6153      	str	r3, [r2, #20]
 8001c66:	4b31      	ldr	r3, [pc, #196]	; (8001d2c <MX_GPIO_Init+0x100>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <MX_GPIO_Init+0x100>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <MX_GPIO_Init+0x100>)
 8001c78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c7c:	6153      	str	r3, [r2, #20]
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <MX_GPIO_Init+0x100>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RW_Pin|DISP_EN_Pin|DISP_D4_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2178      	movs	r1, #120	; 0x78
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c92:	f003 fd5d 	bl	8005750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_D5_Pin|DISP_D6_Pin|DISP_D7_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2107      	movs	r1, #7
 8001c9a:	4825      	ldr	r0, [pc, #148]	; (8001d30 <MX_GPIO_Init+0x104>)
 8001c9c:	f003 fd58 	bl	8005750 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DOWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin;
 8001ca0:	2307      	movs	r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <MX_GPIO_Init+0x108>)
 8001ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb6:	f003 fbb9 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_RS_Pin DISP_RW_Pin DISP_EN_Pin DISP_D4_Pin */
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RW_Pin|DISP_EN_Pin|DISP_D4_Pin;
 8001cba:	2378      	movs	r3, #120	; 0x78
 8001cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd4:	f003 fbaa 	bl	800542c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_D5_Pin DISP_D6_Pin DISP_D7_Pin */
  GPIO_InitStruct.Pin = DISP_D5_Pin|DISP_D6_Pin|DISP_D7_Pin;
 8001cd8:	2307      	movs	r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4619      	mov	r1, r3
 8001cee:	4810      	ldr	r0, [pc, #64]	; (8001d30 <MX_GPIO_Init+0x104>)
 8001cf0:	f003 fb9c 	bl	800542c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2103      	movs	r1, #3
 8001cf8:	2006      	movs	r0, #6
 8001cfa:	f003 f988 	bl	800500e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cfe:	2006      	movs	r0, #6
 8001d00:	f003 f9a1 	bl	8005046 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2103      	movs	r1, #3
 8001d08:	2007      	movs	r0, #7
 8001d0a:	f003 f980 	bl	800500e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d0e:	2007      	movs	r0, #7
 8001d10:	f003 f999 	bl	8005046 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 3, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2103      	movs	r1, #3
 8001d18:	2008      	movs	r0, #8
 8001d1a:	f003 f978 	bl	800500e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001d1e:	2008      	movs	r0, #8
 8001d20:	f003 f991 	bl	8005046 <HAL_NVIC_EnableIRQ>

}
 8001d24:	bf00      	nop
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	48000400 	.word	0x48000400
 8001d34:	10110000 	.word	0x10110000

08001d38 <HAL_SDADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//read adc values
void HAL_SDADC_ConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	//get analog 1 data
	if(hsdadc==&hsdadc1){
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a79      	ldr	r2, [pc, #484]	; (8001f28 <HAL_SDADC_ConvCpltCallback+0x1f0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d14b      	bne.n	8001de0 <HAL_SDADC_ConvCpltCallback+0xa8>
		//get raw data for analog 1
		raw_1 = (int16_t)HAL_SDADC_GetValue(&hsdadc1);
 8001d48:	4877      	ldr	r0, [pc, #476]	; (8001f28 <HAL_SDADC_ConvCpltCallback+0x1f0>)
 8001d4a:	f005 fa45 	bl	80071d8 <HAL_SDADC_GetValue>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b75      	ldr	r3, [pc, #468]	; (8001f2c <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001d56:	601a      	str	r2, [r3, #0]
		raw_1+=32768;
 8001d58:	4b74      	ldr	r3, [pc, #464]	; (8001f2c <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d60:	4a72      	ldr	r2, [pc, #456]	; (8001f2c <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001d62:	6013      	str	r3, [r2, #0]
		//convert and scale raw data
		a_in_1=(raw_1-analog_1_offset);
 8001d64:	4b71      	ldr	r3, [pc, #452]	; (8001f2c <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b71      	ldr	r3, [pc, #452]	; (8001f30 <HAL_SDADC_ConvCpltCallback+0x1f8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b70      	ldr	r3, [pc, #448]	; (8001f34 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001d74:	601a      	str	r2, [r3, #0]
		if(a_in_1<0)
 8001d76:	4b6f      	ldr	r3, [pc, #444]	; (8001f34 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da02      	bge.n	8001d84 <HAL_SDADC_ConvCpltCallback+0x4c>
			a_in_1=0;
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
		a_data_arr_1[a_1_index%data_arr_length]=(uint16_t)(a_in_1*((65535)/(float)(65535-analog_1_offset)));//scale value
 8001d84:	4b6b      	ldr	r3, [pc, #428]	; (8001f34 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	ee07 3a90 	vmov	s15, r3
 8001d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d90:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_SDADC_ConvCpltCallback+0x1f8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001d98:	33ff      	adds	r3, #255	; 0xff
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001da2:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8001f38 <HAL_SDADC_ConvCpltCallback+0x200>
 8001da6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_SDADC_ConvCpltCallback+0x204>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	4a63      	ldr	r2, [pc, #396]	; (8001f40 <HAL_SDADC_ConvCpltCallback+0x208>)
 8001db4:	8812      	ldrh	r2, [r2, #0]
 8001db6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dba:	fb02 f201 	mul.w	r2, r2, r1
 8001dbe:	1a9b      	subs	r3, r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc8:	ee17 3a90 	vmov	r3, s15
 8001dcc:	b299      	uxth	r1, r3
 8001dce:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_SDADC_ConvCpltCallback+0x20c>)
 8001dd0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_1_index++;
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_SDADC_ConvCpltCallback+0x204>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_SDADC_ConvCpltCallback+0x204>)
 8001dde:	801a      	strh	r2, [r3, #0]
	}


	//get analog 2 data
	if(hsdadc==&hsdadc2){
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a59      	ldr	r2, [pc, #356]	; (8001f48 <HAL_SDADC_ConvCpltCallback+0x210>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d14b      	bne.n	8001e80 <HAL_SDADC_ConvCpltCallback+0x148>
		//get raw data for analog 2
		raw_2 = (int16_t)HAL_SDADC_GetValue(&hsdadc2);
 8001de8:	4857      	ldr	r0, [pc, #348]	; (8001f48 <HAL_SDADC_ConvCpltCallback+0x210>)
 8001dea:	f005 f9f5 	bl	80071d8 <HAL_SDADC_GetValue>
 8001dee:	4603      	mov	r3, r0
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b55      	ldr	r3, [pc, #340]	; (8001f4c <HAL_SDADC_ConvCpltCallback+0x214>)
 8001df6:	601a      	str	r2, [r3, #0]
		raw_2+=32768;
 8001df8:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <HAL_SDADC_ConvCpltCallback+0x214>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e00:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <HAL_SDADC_ConvCpltCallback+0x214>)
 8001e02:	6013      	str	r3, [r2, #0]
		//convert and scale raw data
		a_in_2=(raw_2-analog_2_offset);
 8001e04:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <HAL_SDADC_ConvCpltCallback+0x214>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_SDADC_ConvCpltCallback+0x218>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001e14:	601a      	str	r2, [r3, #0]
		if(a_in_2<0)
 8001e16:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	da02      	bge.n	8001e24 <HAL_SDADC_ConvCpltCallback+0xec>
			a_in_2=0;
 8001e1e:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
		a_data_arr_2[a_2_index%data_arr_length]=(uint16_t)(a_in_2*((65535)/(float)(65535-analog_2_offset)));//scale value
 8001e24:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_SDADC_ConvCpltCallback+0x218>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e38:	33ff      	adds	r3, #255	; 0xff
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e42:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8001f38 <HAL_SDADC_ConvCpltCallback+0x200>
 8001e46:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4e:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <HAL_SDADC_ConvCpltCallback+0x220>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	4a3b      	ldr	r2, [pc, #236]	; (8001f40 <HAL_SDADC_ConvCpltCallback+0x208>)
 8001e54:	8812      	ldrh	r2, [r2, #0]
 8001e56:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e5a:	fb02 f201 	mul.w	r2, r2, r1
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e68:	ee17 3a90 	vmov	r3, s15
 8001e6c:	b299      	uxth	r1, r3
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_SDADC_ConvCpltCallback+0x224>)
 8001e70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_2_index++;
 8001e74:	4b38      	ldr	r3, [pc, #224]	; (8001f58 <HAL_SDADC_ConvCpltCallback+0x220>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_SDADC_ConvCpltCallback+0x220>)
 8001e7e:	801a      	strh	r2, [r3, #0]
	}

	//get analog 3 data
	if(hsdadc==&hsdadc3){
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a37      	ldr	r2, [pc, #220]	; (8001f60 <HAL_SDADC_ConvCpltCallback+0x228>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d14b      	bne.n	8001f20 <HAL_SDADC_ConvCpltCallback+0x1e8>
		//get raw data for analog 3
		raw_3 = (int16_t)HAL_SDADC_GetValue(&hsdadc3);
 8001e88:	4835      	ldr	r0, [pc, #212]	; (8001f60 <HAL_SDADC_ConvCpltCallback+0x228>)
 8001e8a:	f005 f9a5 	bl	80071d8 <HAL_SDADC_GetValue>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001e96:	601a      	str	r2, [r3, #0]
		raw_3+=32768;
 8001e98:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ea0:	4a30      	ldr	r2, [pc, #192]	; (8001f64 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001ea2:	6013      	str	r3, [r2, #0]
		//convert and scale raw data
		a_in_3=(raw_3-analog_3_offset);
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <HAL_SDADC_ConvCpltCallback+0x230>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_SDADC_ConvCpltCallback+0x234>)
 8001eb4:	601a      	str	r2, [r3, #0]
		if(a_in_3<0)
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_SDADC_ConvCpltCallback+0x234>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da02      	bge.n	8001ec4 <HAL_SDADC_ConvCpltCallback+0x18c>
			a_in_3=0;
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_SDADC_ConvCpltCallback+0x234>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
		a_data_arr_3[a_3_index%data_arr_length]=(uint16_t)(a_in_3*((65535)/(float)(65535-analog_3_offset)));//scale value
 8001ec4:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_SDADC_ConvCpltCallback+0x234>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_SDADC_ConvCpltCallback+0x230>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001ed8:	33ff      	adds	r3, #255	; 0xff
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee2:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8001f38 <HAL_SDADC_ConvCpltCallback+0x200>
 8001ee6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_SDADC_ConvCpltCallback+0x238>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	4a13      	ldr	r2, [pc, #76]	; (8001f40 <HAL_SDADC_ConvCpltCallback+0x208>)
 8001ef4:	8812      	ldrh	r2, [r2, #0]
 8001ef6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001efa:	fb02 f201 	mul.w	r2, r2, r1
 8001efe:	1a9b      	subs	r3, r3, r2
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f08:	ee17 3a90 	vmov	r3, s15
 8001f0c:	b299      	uxth	r1, r3
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_SDADC_ConvCpltCallback+0x23c>)
 8001f10:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_3_index++;
 8001f14:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_SDADC_ConvCpltCallback+0x238>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_SDADC_ConvCpltCallback+0x238>)
 8001f1e:	801a      	strh	r2, [r3, #0]
	}
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20004340 	.word	0x20004340
 8001f2c:	20002244 	.word	0x20002244
 8001f30:	200001fc 	.word	0x200001fc
 8001f34:	20006394 	.word	0x20006394
 8001f38:	477fff00 	.word	0x477fff00
 8001f3c:	2000020a 	.word	0x2000020a
 8001f40:	20000006 	.word	0x20000006
 8001f44:	20000244 	.word	0x20000244
 8001f48:	2000639c 	.word	0x2000639c
 8001f4c:	20006390 	.word	0x20006390
 8001f50:	20000200 	.word	0x20000200
 8001f54:	20000238 	.word	0x20000238
 8001f58:	2000020c 	.word	0x2000020c
 8001f5c:	20002318 	.word	0x20002318
 8001f60:	20006464 	.word	0x20006464
 8001f64:	2000023c 	.word	0x2000023c
 8001f68:	20000204 	.word	0x20000204
 8001f6c:	200022a0 	.word	0x200022a0
 8001f70:	2000020e 	.word	0x2000020e
 8001f74:	20004388 	.word	0x20004388

08001f78 <HAL_TIM_PeriodElapsedCallback>:
//sends data over can when timer 3 interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3 && can_enabled)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a86      	ldr	r2, [pc, #536]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	f040 8104 	bne.w	8002192 <HAL_TIM_PeriodElapsedCallback+0x21a>
 8001f8a:	4b85      	ldr	r3, [pc, #532]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80ff 	beq.w	8002192 <HAL_TIM_PeriodElapsedCallback+0x21a>
  {
    if(analog_1_enabled){
 8001f94:	4b83      	ldr	r3, [pc, #524]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d050      	beq.n	800203e <HAL_TIM_PeriodElapsedCallback+0xc6>
    	//average stored values
    	a_in_1=0;
 8001f9c:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
    	max = (a_1_index<data_arr_length?a_1_index:data_arr_length);
 8001fa2:	4b82      	ldr	r3, [pc, #520]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001fa4:	881a      	ldrh	r2, [r3, #0]
 8001fa6:	4b82      	ldr	r3, [pc, #520]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	4293      	cmp	r3, r2
 8001fac:	bf28      	it	cs
 8001fae:	4613      	movcs	r3, r2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001fb6:	601a      	str	r2, [r3, #0]
    	if(max>0){
 8001fb8:	4b7e      	ldr	r3, [pc, #504]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d029      	beq.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x9c>
			for(for_index=0; for_index<max; for_index++)
 8001fc0:	4b7d      	ldr	r3, [pc, #500]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	e011      	b.n	8001fec <HAL_TIM_PeriodElapsedCallback+0x74>
				a_in_1+=a_data_arr_1[for_index];
 8001fc8:	4b7b      	ldr	r3, [pc, #492]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b7b      	ldr	r3, [pc, #492]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001fd0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b74      	ldr	r3, [pc, #464]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a72      	ldr	r2, [pc, #456]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001fde:	6013      	str	r3, [r2, #0]
			for(for_index=0; for_index<max; for_index++)
 8001fe0:	4b75      	ldr	r3, [pc, #468]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fea:	801a      	strh	r2, [r3, #0]
 8001fec:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d3e6      	bcc.n	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x50>
			a_in_1/=max;
 8001ffa:	4b6b      	ldr	r3, [pc, #428]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b6c      	ldr	r3, [pc, #432]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	461a      	mov	r2, r3
 800200a:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800200c:	601a      	str	r2, [r3, #0]
			a_1_index=0;
 800200e:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002010:	2200      	movs	r2, #0
 8002012:	801a      	strh	r2, [r3, #0]
    	}

    	a_in_1_avg=a_in_1;
 8002014:	4b64      	ldr	r3, [pc, #400]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a69      	ldr	r2, [pc, #420]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800201a:	6013      	str	r3, [r2, #0]

    	//put raw data into byte arrays
    	a_data_1[0]=a_in_1 & 0xff;
 800201c:	4b62      	ldr	r3, [pc, #392]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002024:	701a      	strb	r2, [r3, #0]
    	a_data_1[1]=(a_in_1 >> 8);
 8002026:	4b60      	ldr	r3, [pc, #384]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	121b      	asrs	r3, r3, #8
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002030:	705a      	strb	r2, [r3, #1]
    	//transmit CAN data for analog 1
    	HAL_CAN_AddTxMessage(&hcan, &headers_1, a_data_1, &tx_mailbox);
 8002032:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002034:	4a63      	ldr	r2, [pc, #396]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002036:	4965      	ldr	r1, [pc, #404]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002038:	4865      	ldr	r0, [pc, #404]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800203a:	f002 fe31 	bl	8004ca0 <HAL_CAN_AddTxMessage>
    	//while (HAL_CAN_IsTxMessagePending(&hcan, tx_mailbox));//wait until data is sent for analog 1
    }
    if(analog_2_enabled){
 800203e:	4b65      	ldr	r3, [pc, #404]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d050      	beq.n	80020e8 <HAL_TIM_PeriodElapsedCallback+0x170>
    	a_in_2=0;
 8002046:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
		max = (a_2_index<data_arr_length?a_2_index:data_arr_length);
 800204c:	4b57      	ldr	r3, [pc, #348]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x234>)
 800204e:	881a      	ldrh	r2, [r3, #0]
 8002050:	4b62      	ldr	r3, [pc, #392]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	4293      	cmp	r3, r2
 8002056:	bf28      	it	cs
 8002058:	4613      	movcs	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	4b55      	ldr	r3, [pc, #340]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002060:	601a      	str	r2, [r3, #0]
		if(max>0){
 8002062:	4b54      	ldr	r3, [pc, #336]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d029      	beq.n	80020be <HAL_TIM_PeriodElapsedCallback+0x146>
			for(for_index=0; for_index<max; for_index++)
 800206a:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800206c:	2200      	movs	r2, #0
 800206e:	801a      	strh	r2, [r3, #0]
 8002070:	e011      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x11e>
				a_in_2+=a_data_arr_2[for_index];
 8002072:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800207a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800207e:	461a      	mov	r2, r3
 8002080:	4b55      	ldr	r3, [pc, #340]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4413      	add	r3, r2
 8002086:	4a54      	ldr	r2, [pc, #336]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002088:	6013      	str	r3, [r2, #0]
			for(for_index=0; for_index<max; for_index++)
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b49      	ldr	r3, [pc, #292]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d3e6      	bcc.n	8002072 <HAL_TIM_PeriodElapsedCallback+0xfa>
			a_in_2/=max;
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80020b6:	601a      	str	r2, [r3, #0]
			a_2_index=0;
 80020b8:	4b48      	ldr	r3, [pc, #288]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x264>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	801a      	strh	r2, [r3, #0]
		}

		a_in_2_avg=a_in_2;
 80020be:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80020c4:	6013      	str	r3, [r2, #0]

    	//put raw data into byte arrays
    	a_data_2[0]=a_in_2 & 0xff;
 80020c6:	4b44      	ldr	r3, [pc, #272]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b46      	ldr	r3, [pc, #280]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020ce:	701a      	strb	r2, [r3, #0]
    	a_data_2[1]=(a_in_2 >> 8);
 80020d0:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	121b      	asrs	r3, r3, #8
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020da:	705a      	strb	r2, [r3, #1]
    	//transmit CAN data for analog 2
    	HAL_CAN_AddTxMessage(&hcan, &headers_2, a_data_2, &tx_mailbox);
 80020dc:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80020de:	4a42      	ldr	r2, [pc, #264]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020e0:	4942      	ldr	r1, [pc, #264]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x274>)
 80020e2:	483b      	ldr	r0, [pc, #236]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80020e4:	f002 fddc 	bl	8004ca0 <HAL_CAN_AddTxMessage>
    	//while (HAL_CAN_IsTxMessagePending(&hcan, tx_mailbox));//wait until data is sent for analog 2
    }
    if(analog_3_enabled){
 80020e8:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d050      	beq.n	8002192 <HAL_TIM_PeriodElapsedCallback+0x21a>
    	a_in_3=0;
 80020f0:	4b40      	ldr	r3, [pc, #256]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
		max = (a_3_index<data_arr_length?a_3_index:data_arr_length);
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x234>)
 80020f8:	881a      	ldrh	r2, [r3, #0]
 80020fa:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	4293      	cmp	r3, r2
 8002100:	bf28      	it	cs
 8002102:	4613      	movcs	r3, r2
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800210a:	601a      	str	r2, [r3, #0]
		if(max>0){
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d029      	beq.n	8002168 <HAL_TIM_PeriodElapsedCallback+0x1f0>
			for(for_index=0; for_index<max; for_index++)
 8002114:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002116:	2200      	movs	r2, #0
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	e011      	b.n	8002140 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				a_in_3+=a_data_arr_3[for_index];
 800211c:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002124:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002128:	461a      	mov	r2, r3
 800212a:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a30      	ldr	r2, [pc, #192]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002132:	6013      	str	r3, [r2, #0]
			for(for_index=0; for_index<max; for_index++)
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800213e:	801a      	strh	r2, [r3, #0]
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d3e6      	bcc.n	800211c <HAL_TIM_PeriodElapsedCallback+0x1a4>
			a_in_3/=max;
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002160:	601a      	str	r2, [r3, #0]
			a_3_index=0;
 8002162:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002164:	2200      	movs	r2, #0
 8002166:	801a      	strh	r2, [r3, #0]
		}

		a_in_3_avg=a_in_3;
 8002168:	4b22      	ldr	r3, [pc, #136]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a24      	ldr	r2, [pc, #144]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800216e:	6013      	str	r3, [r2, #0]

		//put raw data into byte arrays
		a_data_3[0]=a_in_3 & 0xff;
 8002170:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002178:	701a      	strb	r2, [r3, #0]
		a_data_3[1]=(a_in_3 >> 8);
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	121b      	asrs	r3, r3, #8
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002184:	705a      	strb	r2, [r3, #1]
		//transmit CAN data for analog 3
		HAL_CAN_AddTxMessage(&hcan, &headers_3, a_data_3, &tx_mailbox);
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002188:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800218a:	491f      	ldr	r1, [pc, #124]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800218c:	4810      	ldr	r0, [pc, #64]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800218e:	f002 fd87 	bl	8004ca0 <HAL_CAN_AddTxMessage>
		//while (HAL_CAN_IsTxMessagePending(&hcan, tx_mailbox));//wait until data is sent for analog 3
    }
  }
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200022c0 	.word	0x200022c0
 80021a0:	20000001 	.word	0x20000001
 80021a4:	20000002 	.word	0x20000002
 80021a8:	20006394 	.word	0x20006394
 80021ac:	20000006 	.word	0x20000006
 80021b0:	2000020a 	.word	0x2000020a
 80021b4:	20000214 	.word	0x20000214
 80021b8:	20000210 	.word	0x20000210
 80021bc:	20000244 	.word	0x20000244
 80021c0:	20006460 	.word	0x20006460
 80021c4:	20004384 	.word	0x20004384
 80021c8:	2000230c 	.word	0x2000230c
 80021cc:	20002260 	.word	0x20002260
 80021d0:	20002278 	.word	0x20002278
 80021d4:	20000003 	.word	0x20000003
 80021d8:	20000238 	.word	0x20000238
 80021dc:	2000020c 	.word	0x2000020c
 80021e0:	20002318 	.word	0x20002318
 80021e4:	200022b8 	.word	0x200022b8
 80021e8:	2000638c 	.word	0x2000638c
 80021ec:	200063e4 	.word	0x200063e4
 80021f0:	20000004 	.word	0x20000004
 80021f4:	200022a0 	.word	0x200022a0
 80021f8:	2000020e 	.word	0x2000020e
 80021fc:	20004388 	.word	0x20004388
 8002200:	20006448 	.word	0x20006448
 8002204:	200022bc 	.word	0x200022bc
 8002208:	20002248 	.word	0x20002248

0800220c <HAL_GPIO_EXTI_Callback>:
//handles the button interupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	80fb      	strh	r3, [r7, #6]
	if(!updating_display){
 8002216:	4bbe      	ldr	r3, [pc, #760]	; (8002510 <HAL_GPIO_EXTI_Callback+0x304>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f040 84dd 	bne.w	8002bda <HAL_GPIO_EXTI_Callback+0x9ce>
	//if the up button is pressed
			if(GPIO_Pin==UP_BTN_Pin && !up_btn_pressed){
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	2b04      	cmp	r3, #4
 8002224:	f040 8137 	bne.w	8002496 <HAL_GPIO_EXTI_Callback+0x28a>
 8002228:	4bba      	ldr	r3, [pc, #744]	; (8002514 <HAL_GPIO_EXTI_Callback+0x308>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 8132 	bne.w	8002496 <HAL_GPIO_EXTI_Callback+0x28a>
				if(change_value_bool){//if changing a value
 8002232:	4bb9      	ldr	r3, [pc, #740]	; (8002518 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03a      	beq.n	80022b0 <HAL_GPIO_EXTI_Callback+0xa4>
					//change the value of the selected item
					//main menu changes
					if(in_main_menu){
 800223a:	4bb8      	ldr	r3, [pc, #736]	; (800251c <HAL_GPIO_EXTI_Callback+0x310>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d018      	beq.n	8002274 <HAL_GPIO_EXTI_Callback+0x68>
						if(menu_pos==2)
 8002242:	4bb7      	ldr	r3, [pc, #732]	; (8002520 <HAL_GPIO_EXTI_Callback+0x314>)
 8002244:	f993 3000 	ldrsb.w	r3, [r3]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d10b      	bne.n	8002264 <HAL_GPIO_EXTI_Callback+0x58>
							display_scroll=(display_scroll==0)?2:(display_scroll-1);//scroll through devices in display values menu
 800224c:	4bb5      	ldr	r3, [pc, #724]	; (8002524 <HAL_GPIO_EXTI_Callback+0x318>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d004      	beq.n	800225e <HAL_GPIO_EXTI_Callback+0x52>
 8002254:	4bb3      	ldr	r3, [pc, #716]	; (8002524 <HAL_GPIO_EXTI_Callback+0x318>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	3b01      	subs	r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	e000      	b.n	8002260 <HAL_GPIO_EXTI_Callback+0x54>
 800225e:	2302      	movs	r3, #2
 8002260:	4ab0      	ldr	r2, [pc, #704]	; (8002524 <HAL_GPIO_EXTI_Callback+0x318>)
 8002262:	7013      	strb	r3, [r2, #0]
						if(menu_pos == 3)
 8002264:	4bae      	ldr	r3, [pc, #696]	; (8002520 <HAL_GPIO_EXTI_Callback+0x314>)
 8002266:	f993 3000 	ldrsb.w	r3, [r3]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d102      	bne.n	8002274 <HAL_GPIO_EXTI_Callback+0x68>
							changeDelay(1);//increment Delay
 800226e:	2001      	movs	r0, #1
 8002270:	f001 f84e 	bl	8003310 <changeDelay>
					}
					//can menu changes
					if(in_can_menu){
 8002274:	4bac      	ldr	r3, [pc, #688]	; (8002528 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8105 	beq.w	8002488 <HAL_GPIO_EXTI_Callback+0x27c>
						if(can_pos==1)
 800227e:	4bab      	ldr	r3, [pc, #684]	; (800252c <HAL_GPIO_EXTI_Callback+0x320>)
 8002280:	f993 3000 	ldrsb.w	r3, [r3]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d103      	bne.n	8002290 <HAL_GPIO_EXTI_Callback+0x84>
							changeBaudRate(1);//increment baud rate
 8002288:	2001      	movs	r0, #1
 800228a:	f000 fcb3 	bl	8002bf4 <changeBaudRate>
 800228e:	e0fb      	b.n	8002488 <HAL_GPIO_EXTI_Callback+0x27c>
						else if(can_pos>=2&&can_pos<=4)
 8002290:	4ba6      	ldr	r3, [pc, #664]	; (800252c <HAL_GPIO_EXTI_Callback+0x320>)
 8002292:	f993 3000 	ldrsb.w	r3, [r3]
 8002296:	2b01      	cmp	r3, #1
 8002298:	f340 80f6 	ble.w	8002488 <HAL_GPIO_EXTI_Callback+0x27c>
 800229c:	4ba3      	ldr	r3, [pc, #652]	; (800252c <HAL_GPIO_EXTI_Callback+0x320>)
 800229e:	f993 3000 	ldrsb.w	r3, [r3]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	f300 80f0 	bgt.w	8002488 <HAL_GPIO_EXTI_Callback+0x27c>
							changeCANID(1);//increment CAN ID
 80022a8:	2001      	movs	r0, #1
 80022aa:	f000 fe69 	bl	8002f80 <changeCANID>
 80022ae:	e0eb      	b.n	8002488 <HAL_GPIO_EXTI_Callback+0x27c>
					}

				} else {
					//scroll menu up
					if(in_main_menu){
 80022b0:	4b9a      	ldr	r3, [pc, #616]	; (800251c <HAL_GPIO_EXTI_Callback+0x310>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d04a      	beq.n	800234e <HAL_GPIO_EXTI_Callback+0x142>
						menu_pos=(menu_pos==0)?main_menu_length-1:(menu_pos-1);//decrement menu position
 80022b8:	4b99      	ldr	r3, [pc, #612]	; (8002520 <HAL_GPIO_EXTI_Callback+0x314>)
 80022ba:	f993 3000 	ldrsb.w	r3, [r3]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_GPIO_EXTI_Callback+0xc2>
 80022c2:	2304      	movs	r3, #4
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	b25b      	sxtb	r3, r3
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_EXTI_Callback+0xd0>
 80022ce:	4b94      	ldr	r3, [pc, #592]	; (8002520 <HAL_GPIO_EXTI_Callback+0x314>)
 80022d0:	f993 3000 	ldrsb.w	r3, [r3]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	b25b      	sxtb	r3, r3
 80022dc:	4a90      	ldr	r2, [pc, #576]	; (8002520 <HAL_GPIO_EXTI_Callback+0x314>)
 80022de:	7013      	strb	r3, [r2, #0]
						lcd_put_cur(0,0);
 80022e0:	2100      	movs	r1, #0
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7fe fd03 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80022e8:	4b8d      	ldr	r3, [pc, #564]	; (8002520 <HAL_GPIO_EXTI_Callback+0x314>)
 80022ea:	f993 3000 	ldrsb.w	r3, [r3]
 80022ee:	461a      	mov	r2, r3
 80022f0:	4613      	mov	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4413      	add	r3, r2
 80022f6:	4a8e      	ldr	r2, [pc, #568]	; (8002530 <HAL_GPIO_EXTI_Callback+0x324>)
 80022f8:	4413      	add	r3, r2
 80022fa:	2210      	movs	r2, #16
 80022fc:	4619      	mov	r1, r3
 80022fe:	488d      	ldr	r0, [pc, #564]	; (8002534 <HAL_GPIO_EXTI_Callback+0x328>)
 8002300:	f005 fe61 	bl	8007fc6 <strncpy>
 8002304:	4603      	mov	r3, r0
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fd56 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(1,0);
 800230c:	2100      	movs	r1, #0
 800230e:	2001      	movs	r0, #1
 8002310:	f7fe fced 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8002314:	4b82      	ldr	r3, [pc, #520]	; (8002520 <HAL_GPIO_EXTI_Callback+0x314>)
 8002316:	f993 3000 	ldrsb.w	r3, [r3]
 800231a:	3301      	adds	r3, #1
 800231c:	2204      	movs	r2, #4
 800231e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002322:	fb02 f201 	mul.w	r2, r2, r1
 8002326:	1a9a      	subs	r2, r3, r2
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	4413      	add	r3, r2
 800232e:	4a80      	ldr	r2, [pc, #512]	; (8002530 <HAL_GPIO_EXTI_Callback+0x324>)
 8002330:	4413      	add	r3, r2
 8002332:	2210      	movs	r2, #16
 8002334:	4619      	mov	r1, r3
 8002336:	487f      	ldr	r0, [pc, #508]	; (8002534 <HAL_GPIO_EXTI_Callback+0x328>)
 8002338:	f005 fe45 	bl	8007fc6 <strncpy>
 800233c:	4603      	mov	r3, r0
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fd3a 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,0);
 8002344:	2100      	movs	r1, #0
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe fcd1 	bl	8000cee <lcd_put_cur>
 800234c:	e09c      	b.n	8002488 <HAL_GPIO_EXTI_Callback+0x27c>
					} else if(in_can_menu){
 800234e:	4b76      	ldr	r3, [pc, #472]	; (8002528 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d04a      	beq.n	80023ec <HAL_GPIO_EXTI_Callback+0x1e0>
						can_pos=(can_pos==0)?can_menu_length-1:(can_pos-1);//decrement menu position
 8002356:	4b75      	ldr	r3, [pc, #468]	; (800252c <HAL_GPIO_EXTI_Callback+0x320>)
 8002358:	f993 3000 	ldrsb.w	r3, [r3]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_GPIO_EXTI_Callback+0x160>
 8002360:	2306      	movs	r3, #6
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	b25b      	sxtb	r3, r3
 800236a:	e006      	b.n	800237a <HAL_GPIO_EXTI_Callback+0x16e>
 800236c:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_GPIO_EXTI_Callback+0x320>)
 800236e:	f993 3000 	ldrsb.w	r3, [r3]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	b25b      	sxtb	r3, r3
 800237a:	4a6c      	ldr	r2, [pc, #432]	; (800252c <HAL_GPIO_EXTI_Callback+0x320>)
 800237c:	7013      	strb	r3, [r2, #0]
						lcd_put_cur(0,0);
 800237e:	2100      	movs	r1, #0
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fcb4 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 8002386:	4b69      	ldr	r3, [pc, #420]	; (800252c <HAL_GPIO_EXTI_Callback+0x320>)
 8002388:	f993 3000 	ldrsb.w	r3, [r3]
 800238c:	461a      	mov	r2, r3
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4413      	add	r3, r2
 8002394:	4a68      	ldr	r2, [pc, #416]	; (8002538 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002396:	4413      	add	r3, r2
 8002398:	2210      	movs	r2, #16
 800239a:	4619      	mov	r1, r3
 800239c:	4865      	ldr	r0, [pc, #404]	; (8002534 <HAL_GPIO_EXTI_Callback+0x328>)
 800239e:	f005 fe12 	bl	8007fc6 <strncpy>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fd07 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(1,0);
 80023aa:	2100      	movs	r1, #0
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7fe fc9e 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 80023b2:	4b5e      	ldr	r3, [pc, #376]	; (800252c <HAL_GPIO_EXTI_Callback+0x320>)
 80023b4:	f993 3000 	ldrsb.w	r3, [r3]
 80023b8:	3301      	adds	r3, #1
 80023ba:	2206      	movs	r2, #6
 80023bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80023c0:	fb02 f201 	mul.w	r2, r2, r1
 80023c4:	1a9a      	subs	r2, r3, r2
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	4413      	add	r3, r2
 80023cc:	4a5a      	ldr	r2, [pc, #360]	; (8002538 <HAL_GPIO_EXTI_Callback+0x32c>)
 80023ce:	4413      	add	r3, r2
 80023d0:	2210      	movs	r2, #16
 80023d2:	4619      	mov	r1, r3
 80023d4:	4857      	ldr	r0, [pc, #348]	; (8002534 <HAL_GPIO_EXTI_Callback+0x328>)
 80023d6:	f005 fdf6 	bl	8007fc6 <strncpy>
 80023da:	4603      	mov	r3, r0
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fceb 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,0);
 80023e2:	2100      	movs	r1, #0
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe fc82 	bl	8000cee <lcd_put_cur>
 80023ea:	e04d      	b.n	8002488 <HAL_GPIO_EXTI_Callback+0x27c>
					} else if(in_analog_menu){
 80023ec:	4b53      	ldr	r3, [pc, #332]	; (800253c <HAL_GPIO_EXTI_Callback+0x330>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d049      	beq.n	8002488 <HAL_GPIO_EXTI_Callback+0x27c>
						analog_pos=(analog_pos==0)?analog_menu_length-1:(analog_pos-1);//decrement menu position
 80023f4:	4b52      	ldr	r3, [pc, #328]	; (8002540 <HAL_GPIO_EXTI_Callback+0x334>)
 80023f6:	f993 3000 	ldrsb.w	r3, [r3]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_GPIO_EXTI_Callback+0x1fe>
 80023fe:	230a      	movs	r3, #10
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	b25b      	sxtb	r3, r3
 8002408:	e006      	b.n	8002418 <HAL_GPIO_EXTI_Callback+0x20c>
 800240a:	4b4d      	ldr	r3, [pc, #308]	; (8002540 <HAL_GPIO_EXTI_Callback+0x334>)
 800240c:	f993 3000 	ldrsb.w	r3, [r3]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	b25b      	sxtb	r3, r3
 8002418:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_GPIO_EXTI_Callback+0x334>)
 800241a:	7013      	strb	r3, [r2, #0]
						lcd_put_cur(0,0);
 800241c:	2100      	movs	r1, #0
 800241e:	2000      	movs	r0, #0
 8002420:	f7fe fc65 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 8002424:	4b46      	ldr	r3, [pc, #280]	; (8002540 <HAL_GPIO_EXTI_Callback+0x334>)
 8002426:	f993 3000 	ldrsb.w	r3, [r3]
 800242a:	461a      	mov	r2, r3
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	4a44      	ldr	r2, [pc, #272]	; (8002544 <HAL_GPIO_EXTI_Callback+0x338>)
 8002434:	4413      	add	r3, r2
 8002436:	2210      	movs	r2, #16
 8002438:	4619      	mov	r1, r3
 800243a:	483e      	ldr	r0, [pc, #248]	; (8002534 <HAL_GPIO_EXTI_Callback+0x328>)
 800243c:	f005 fdc3 	bl	8007fc6 <strncpy>
 8002440:	4603      	mov	r3, r0
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fcb8 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(1,0);
 8002448:	2100      	movs	r1, #0
 800244a:	2001      	movs	r0, #1
 800244c:	f7fe fc4f 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 8002450:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <HAL_GPIO_EXTI_Callback+0x334>)
 8002452:	f993 3000 	ldrsb.w	r3, [r3]
 8002456:	3301      	adds	r3, #1
 8002458:	220a      	movs	r2, #10
 800245a:	fb93 f1f2 	sdiv	r1, r3, r2
 800245e:	fb02 f201 	mul.w	r2, r2, r1
 8002462:	1a9a      	subs	r2, r3, r2
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4413      	add	r3, r2
 800246a:	4a36      	ldr	r2, [pc, #216]	; (8002544 <HAL_GPIO_EXTI_Callback+0x338>)
 800246c:	4413      	add	r3, r2
 800246e:	2210      	movs	r2, #16
 8002470:	4619      	mov	r1, r3
 8002472:	4830      	ldr	r0, [pc, #192]	; (8002534 <HAL_GPIO_EXTI_Callback+0x328>)
 8002474:	f005 fda7 	bl	8007fc6 <strncpy>
 8002478:	4603      	mov	r3, r0
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fc9c 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,0);
 8002480:	2100      	movs	r1, #0
 8002482:	2000      	movs	r0, #0
 8002484:	f7fe fc33 	bl	8000cee <lcd_put_cur>
					}
				}
				btn_counter=0; // reset btn counter
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_GPIO_EXTI_Callback+0x33c>)
 800248a:	2200      	movs	r2, #0
 800248c:	801a      	strh	r2, [r3, #0]
				up_btn_pressed=1; // set up button to pressed
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_GPIO_EXTI_Callback+0x308>)
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e3a1      	b.n	8002bda <HAL_GPIO_EXTI_Callback+0x9ce>
			}

			//if the down button is pressed
			else if(GPIO_Pin==DOWN_BTN_Pin && !down_btn_pressed){
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	2b01      	cmp	r3, #1
 800249a:	f040 8149 	bne.w	8002730 <HAL_GPIO_EXTI_Callback+0x524>
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_GPIO_EXTI_Callback+0x340>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 8144 	bne.w	8002730 <HAL_GPIO_EXTI_Callback+0x524>
				if(change_value_bool){//if changing a value
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_GPIO_EXTI_Callback+0x30c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d061      	beq.n	8002574 <HAL_GPIO_EXTI_Callback+0x368>
					//change the value of the selected item
					//main menu changes
					if(in_main_menu){
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_GPIO_EXTI_Callback+0x310>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01c      	beq.n	80024f2 <HAL_GPIO_EXTI_Callback+0x2e6>
						if(menu_pos==2)
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_GPIO_EXTI_Callback+0x314>)
 80024ba:	f993 3000 	ldrsb.w	r3, [r3]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d10e      	bne.n	80024e0 <HAL_GPIO_EXTI_Callback+0x2d4>
							display_scroll=(display_scroll+1)%3;//scroll through devices in display values menu
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_GPIO_EXTI_Callback+0x318>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_GPIO_EXTI_Callback+0x344>)
 80024ca:	fb83 3102 	smull	r3, r1, r3, r2
 80024ce:	17d3      	asrs	r3, r2, #31
 80024d0:	1ac9      	subs	r1, r1, r3
 80024d2:	460b      	mov	r3, r1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	440b      	add	r3, r1
 80024d8:	1ad1      	subs	r1, r2, r3
 80024da:	b2ca      	uxtb	r2, r1
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_GPIO_EXTI_Callback+0x318>)
 80024de:	701a      	strb	r2, [r3, #0]
						if(menu_pos == 3)
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_GPIO_EXTI_Callback+0x314>)
 80024e2:	f993 3000 	ldrsb.w	r3, [r3]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d103      	bne.n	80024f2 <HAL_GPIO_EXTI_Callback+0x2e6>
							changeDelay(-1);//decrement Delay
 80024ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024ee:	f000 ff0f 	bl	8003310 <changeDelay>
					}
					//can menu changes
					if(in_can_menu){
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_GPIO_EXTI_Callback+0x31c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8113 	beq.w	8002722 <HAL_GPIO_EXTI_Callback+0x516>
						if(can_pos==1)
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_GPIO_EXTI_Callback+0x320>)
 80024fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d126      	bne.n	8002554 <HAL_GPIO_EXTI_Callback+0x348>
							changeBaudRate(-1);//decrement baud rate
 8002506:	20ff      	movs	r0, #255	; 0xff
 8002508:	f000 fb74 	bl	8002bf4 <changeBaudRate>
 800250c:	e109      	b.n	8002722 <HAL_GPIO_EXTI_Callback+0x516>
 800250e:	bf00      	nop
 8002510:	20000226 	.word	0x20000226
 8002514:	20000220 	.word	0x20000220
 8002518:	2000021f 	.word	0x2000021f
 800251c:	2000015e 	.word	0x2000015e
 8002520:	2000021b 	.word	0x2000021b
 8002524:	2000021a 	.word	0x2000021a
 8002528:	20000218 	.word	0x20000218
 800252c:	2000021c 	.word	0x2000021c
 8002530:	20000008 	.word	0x20000008
 8002534:	200022a4 	.word	0x200022a4
 8002538:	2000004c 	.word	0x2000004c
 800253c:	20000219 	.word	0x20000219
 8002540:	2000021d 	.word	0x2000021d
 8002544:	200000b4 	.word	0x200000b4
 8002548:	20000224 	.word	0x20000224
 800254c:	20000221 	.word	0x20000221
 8002550:	55555556 	.word	0x55555556
						else if(can_pos>=2&&can_pos<=4)
 8002554:	4bcc      	ldr	r3, [pc, #816]	; (8002888 <HAL_GPIO_EXTI_Callback+0x67c>)
 8002556:	f993 3000 	ldrsb.w	r3, [r3]
 800255a:	2b01      	cmp	r3, #1
 800255c:	f340 80e1 	ble.w	8002722 <HAL_GPIO_EXTI_Callback+0x516>
 8002560:	4bc9      	ldr	r3, [pc, #804]	; (8002888 <HAL_GPIO_EXTI_Callback+0x67c>)
 8002562:	f993 3000 	ldrsb.w	r3, [r3]
 8002566:	2b04      	cmp	r3, #4
 8002568:	f300 80db 	bgt.w	8002722 <HAL_GPIO_EXTI_Callback+0x516>
							changeCANID(-1);//decrement CAN ID
 800256c:	20ff      	movs	r0, #255	; 0xff
 800256e:	f000 fd07 	bl	8002f80 <changeCANID>
 8002572:	e0d6      	b.n	8002722 <HAL_GPIO_EXTI_Callback+0x516>
					}
				} else {
					//scroll menu down
					if(in_main_menu){
 8002574:	4bc5      	ldr	r3, [pc, #788]	; (800288c <HAL_GPIO_EXTI_Callback+0x680>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d043      	beq.n	8002604 <HAL_GPIO_EXTI_Callback+0x3f8>
						menu_pos = (menu_pos+1)%main_menu_length;//increment menu position
 800257c:	4bc4      	ldr	r3, [pc, #784]	; (8002890 <HAL_GPIO_EXTI_Callback+0x684>)
 800257e:	f993 3000 	ldrsb.w	r3, [r3]
 8002582:	3301      	adds	r3, #1
 8002584:	2204      	movs	r2, #4
 8002586:	fb93 f1f2 	sdiv	r1, r3, r2
 800258a:	fb02 f201 	mul.w	r2, r2, r1
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	b25a      	sxtb	r2, r3
 8002592:	4bbf      	ldr	r3, [pc, #764]	; (8002890 <HAL_GPIO_EXTI_Callback+0x684>)
 8002594:	701a      	strb	r2, [r3, #0]
						lcd_put_cur(0,0);
 8002596:	2100      	movs	r1, #0
 8002598:	2000      	movs	r0, #0
 800259a:	f7fe fba8 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 800259e:	4bbc      	ldr	r3, [pc, #752]	; (8002890 <HAL_GPIO_EXTI_Callback+0x684>)
 80025a0:	f993 3000 	ldrsb.w	r3, [r3]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	4ab9      	ldr	r2, [pc, #740]	; (8002894 <HAL_GPIO_EXTI_Callback+0x688>)
 80025ae:	4413      	add	r3, r2
 80025b0:	2210      	movs	r2, #16
 80025b2:	4619      	mov	r1, r3
 80025b4:	48b8      	ldr	r0, [pc, #736]	; (8002898 <HAL_GPIO_EXTI_Callback+0x68c>)
 80025b6:	f005 fd06 	bl	8007fc6 <strncpy>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fbfb 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(1,0);
 80025c2:	2100      	movs	r1, #0
 80025c4:	2001      	movs	r0, #1
 80025c6:	f7fe fb92 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 80025ca:	4bb1      	ldr	r3, [pc, #708]	; (8002890 <HAL_GPIO_EXTI_Callback+0x684>)
 80025cc:	f993 3000 	ldrsb.w	r3, [r3]
 80025d0:	3301      	adds	r3, #1
 80025d2:	2204      	movs	r2, #4
 80025d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80025d8:	fb02 f201 	mul.w	r2, r2, r1
 80025dc:	1a9a      	subs	r2, r3, r2
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	4413      	add	r3, r2
 80025e4:	4aab      	ldr	r2, [pc, #684]	; (8002894 <HAL_GPIO_EXTI_Callback+0x688>)
 80025e6:	4413      	add	r3, r2
 80025e8:	2210      	movs	r2, #16
 80025ea:	4619      	mov	r1, r3
 80025ec:	48aa      	ldr	r0, [pc, #680]	; (8002898 <HAL_GPIO_EXTI_Callback+0x68c>)
 80025ee:	f005 fcea 	bl	8007fc6 <strncpy>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fbdf 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,0);
 80025fa:	2100      	movs	r1, #0
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7fe fb76 	bl	8000cee <lcd_put_cur>
 8002602:	e08e      	b.n	8002722 <HAL_GPIO_EXTI_Callback+0x516>
					} else if(in_can_menu){
 8002604:	4ba5      	ldr	r3, [pc, #660]	; (800289c <HAL_GPIO_EXTI_Callback+0x690>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d043      	beq.n	8002694 <HAL_GPIO_EXTI_Callback+0x488>
						can_pos=(can_pos+1)%can_menu_length;//increment menu position
 800260c:	4b9e      	ldr	r3, [pc, #632]	; (8002888 <HAL_GPIO_EXTI_Callback+0x67c>)
 800260e:	f993 3000 	ldrsb.w	r3, [r3]
 8002612:	3301      	adds	r3, #1
 8002614:	2206      	movs	r2, #6
 8002616:	fb93 f1f2 	sdiv	r1, r3, r2
 800261a:	fb02 f201 	mul.w	r2, r2, r1
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	b25a      	sxtb	r2, r3
 8002622:	4b99      	ldr	r3, [pc, #612]	; (8002888 <HAL_GPIO_EXTI_Callback+0x67c>)
 8002624:	701a      	strb	r2, [r3, #0]
						lcd_put_cur(0,0);
 8002626:	2100      	movs	r1, #0
 8002628:	2000      	movs	r0, #0
 800262a:	f7fe fb60 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 800262e:	4b96      	ldr	r3, [pc, #600]	; (8002888 <HAL_GPIO_EXTI_Callback+0x67c>)
 8002630:	f993 3000 	ldrsb.w	r3, [r3]
 8002634:	461a      	mov	r2, r3
 8002636:	4613      	mov	r3, r2
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	4413      	add	r3, r2
 800263c:	4a98      	ldr	r2, [pc, #608]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x694>)
 800263e:	4413      	add	r3, r2
 8002640:	2210      	movs	r2, #16
 8002642:	4619      	mov	r1, r3
 8002644:	4894      	ldr	r0, [pc, #592]	; (8002898 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002646:	f005 fcbe 	bl	8007fc6 <strncpy>
 800264a:	4603      	mov	r3, r0
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fbb3 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(1,0);
 8002652:	2100      	movs	r1, #0
 8002654:	2001      	movs	r0, #1
 8002656:	f7fe fb4a 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 800265a:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_GPIO_EXTI_Callback+0x67c>)
 800265c:	f993 3000 	ldrsb.w	r3, [r3]
 8002660:	3301      	adds	r3, #1
 8002662:	2206      	movs	r2, #6
 8002664:	fb93 f1f2 	sdiv	r1, r3, r2
 8002668:	fb02 f201 	mul.w	r2, r2, r1
 800266c:	1a9a      	subs	r2, r3, r2
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	4a8a      	ldr	r2, [pc, #552]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x694>)
 8002676:	4413      	add	r3, r2
 8002678:	2210      	movs	r2, #16
 800267a:	4619      	mov	r1, r3
 800267c:	4886      	ldr	r0, [pc, #536]	; (8002898 <HAL_GPIO_EXTI_Callback+0x68c>)
 800267e:	f005 fca2 	bl	8007fc6 <strncpy>
 8002682:	4603      	mov	r3, r0
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fb97 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,0);
 800268a:	2100      	movs	r1, #0
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe fb2e 	bl	8000cee <lcd_put_cur>
 8002692:	e046      	b.n	8002722 <HAL_GPIO_EXTI_Callback+0x516>
					} else if(in_analog_menu){
 8002694:	4b83      	ldr	r3, [pc, #524]	; (80028a4 <HAL_GPIO_EXTI_Callback+0x698>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d042      	beq.n	8002722 <HAL_GPIO_EXTI_Callback+0x516>
						analog_pos=(analog_pos+1)%analog_menu_length;//increment menu position
 800269c:	4b82      	ldr	r3, [pc, #520]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x69c>)
 800269e:	f993 3000 	ldrsb.w	r3, [r3]
 80026a2:	3301      	adds	r3, #1
 80026a4:	220a      	movs	r2, #10
 80026a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80026aa:	fb02 f201 	mul.w	r2, r2, r1
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	b25a      	sxtb	r2, r3
 80026b2:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x69c>)
 80026b4:	701a      	strb	r2, [r3, #0]
						lcd_put_cur(0,0);
 80026b6:	2100      	movs	r1, #0
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe fb18 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 80026be:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x69c>)
 80026c0:	f993 3000 	ldrsb.w	r3, [r3]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	4413      	add	r3, r2
 80026cc:	4a77      	ldr	r2, [pc, #476]	; (80028ac <HAL_GPIO_EXTI_Callback+0x6a0>)
 80026ce:	4413      	add	r3, r2
 80026d0:	2210      	movs	r2, #16
 80026d2:	4619      	mov	r1, r3
 80026d4:	4870      	ldr	r0, [pc, #448]	; (8002898 <HAL_GPIO_EXTI_Callback+0x68c>)
 80026d6:	f005 fc76 	bl	8007fc6 <strncpy>
 80026da:	4603      	mov	r3, r0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fb6b 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(1,0);
 80026e2:	2100      	movs	r1, #0
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7fe fb02 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 80026ea:	4b6f      	ldr	r3, [pc, #444]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x69c>)
 80026ec:	f993 3000 	ldrsb.w	r3, [r3]
 80026f0:	3301      	adds	r3, #1
 80026f2:	220a      	movs	r2, #10
 80026f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80026f8:	fb02 f201 	mul.w	r2, r2, r1
 80026fc:	1a9a      	subs	r2, r3, r2
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	4a69      	ldr	r2, [pc, #420]	; (80028ac <HAL_GPIO_EXTI_Callback+0x6a0>)
 8002706:	4413      	add	r3, r2
 8002708:	2210      	movs	r2, #16
 800270a:	4619      	mov	r1, r3
 800270c:	4862      	ldr	r0, [pc, #392]	; (8002898 <HAL_GPIO_EXTI_Callback+0x68c>)
 800270e:	f005 fc5a 	bl	8007fc6 <strncpy>
 8002712:	4603      	mov	r3, r0
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fb4f 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,0);
 800271a:	2100      	movs	r1, #0
 800271c:	2000      	movs	r0, #0
 800271e:	f7fe fae6 	bl	8000cee <lcd_put_cur>
					}

				}
				btn_counter=0; // reset btn counter
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002724:	2200      	movs	r2, #0
 8002726:	801a      	strh	r2, [r3, #0]
				down_btn_pressed=1; // set down button to pressed
 8002728:	4b62      	ldr	r3, [pc, #392]	; (80028b4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e254      	b.n	8002bda <HAL_GPIO_EXTI_Callback+0x9ce>
			}

			//if the select button is pressed
			else if(GPIO_Pin==SEL_BTN_Pin && !sel_btn_pressed){
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	2b02      	cmp	r3, #2
 8002734:	f040 8251 	bne.w	8002bda <HAL_GPIO_EXTI_Callback+0x9ce>
 8002738:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <HAL_GPIO_EXTI_Callback+0x6ac>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 824c 	bne.w	8002bda <HAL_GPIO_EXTI_Callback+0x9ce>
				//set changes and reinitialize can bus
				if(!change_value_bool){
 8002742:	4b5e      	ldr	r3, [pc, #376]	; (80028bc <HAL_GPIO_EXTI_Callback+0x6b0>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 81bd 	bne.w	8002ac6 <HAL_GPIO_EXTI_Callback+0x8ba>
					if(in_main_menu){
 800274c:	4b4f      	ldr	r3, [pc, #316]	; (800288c <HAL_GPIO_EXTI_Callback+0x680>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80c9 	beq.w	80028e8 <HAL_GPIO_EXTI_Callback+0x6dc>
						if(menu_pos==0){
 8002756:	4b4e      	ldr	r3, [pc, #312]	; (8002890 <HAL_GPIO_EXTI_Callback+0x684>)
 8002758:	f993 3000 	ldrsb.w	r3, [r3]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d146      	bne.n	80027ee <HAL_GPIO_EXTI_Callback+0x5e2>
							//display can menu
							lcd_put_cur(0,0);
 8002760:	2100      	movs	r1, #0
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fac3 	bl	8000cee <lcd_put_cur>
							lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 8002768:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_GPIO_EXTI_Callback+0x67c>)
 800276a:	f993 3000 	ldrsb.w	r3, [r3]
 800276e:	461a      	mov	r2, r3
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	4413      	add	r3, r2
 8002776:	4a4a      	ldr	r2, [pc, #296]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x694>)
 8002778:	4413      	add	r3, r2
 800277a:	2210      	movs	r2, #16
 800277c:	4619      	mov	r1, r3
 800277e:	4846      	ldr	r0, [pc, #280]	; (8002898 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002780:	f005 fc21 	bl	8007fc6 <strncpy>
 8002784:	4603      	mov	r3, r0
 8002786:	4618      	mov	r0, r3
 8002788:	f7fe fb16 	bl	8000db8 <lcd_send_string>
							lcd_put_cur(1,0);
 800278c:	2100      	movs	r1, #0
 800278e:	2001      	movs	r0, #1
 8002790:	f7fe faad 	bl	8000cee <lcd_put_cur>
							lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 8002794:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <HAL_GPIO_EXTI_Callback+0x67c>)
 8002796:	f993 3000 	ldrsb.w	r3, [r3]
 800279a:	3301      	adds	r3, #1
 800279c:	2206      	movs	r2, #6
 800279e:	fb93 f1f2 	sdiv	r1, r3, r2
 80027a2:	fb02 f201 	mul.w	r2, r2, r1
 80027a6:	1a9a      	subs	r2, r3, r2
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4413      	add	r3, r2
 80027ae:	4a3c      	ldr	r2, [pc, #240]	; (80028a0 <HAL_GPIO_EXTI_Callback+0x694>)
 80027b0:	4413      	add	r3, r2
 80027b2:	2210      	movs	r2, #16
 80027b4:	4619      	mov	r1, r3
 80027b6:	4838      	ldr	r0, [pc, #224]	; (8002898 <HAL_GPIO_EXTI_Callback+0x68c>)
 80027b8:	f005 fc05 	bl	8007fc6 <strncpy>
 80027bc:	4603      	mov	r3, r0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fafa 	bl	8000db8 <lcd_send_string>
							lcd_put_cur(0,0);
 80027c4:	2100      	movs	r1, #0
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe fa91 	bl	8000cee <lcd_put_cur>
							//update menu booleans
							in_can_menu=1;
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <HAL_GPIO_EXTI_Callback+0x690>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]
							in_main_menu=0;
 80027d2:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_GPIO_EXTI_Callback+0x680>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
							change_value_bool=!change_value_bool;//invert change value bool
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_GPIO_EXTI_Callback+0x6b0>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b34      	ldr	r3, [pc, #208]	; (80028bc <HAL_GPIO_EXTI_Callback+0x6b0>)
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	e1e4      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						} else if(menu_pos==1){
 80027ee:	4b28      	ldr	r3, [pc, #160]	; (8002890 <HAL_GPIO_EXTI_Callback+0x684>)
 80027f0:	f993 3000 	ldrsb.w	r3, [r3]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d163      	bne.n	80028c0 <HAL_GPIO_EXTI_Callback+0x6b4>
							//display can menu
							lcd_put_cur(0,0);
 80027f8:	2100      	movs	r1, #0
 80027fa:	2000      	movs	r0, #0
 80027fc:	f7fe fa77 	bl	8000cee <lcd_put_cur>
							lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x69c>)
 8002802:	f993 3000 	ldrsb.w	r3, [r3]
 8002806:	461a      	mov	r2, r3
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	4413      	add	r3, r2
 800280e:	4a27      	ldr	r2, [pc, #156]	; (80028ac <HAL_GPIO_EXTI_Callback+0x6a0>)
 8002810:	4413      	add	r3, r2
 8002812:	2210      	movs	r2, #16
 8002814:	4619      	mov	r1, r3
 8002816:	4820      	ldr	r0, [pc, #128]	; (8002898 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002818:	f005 fbd5 	bl	8007fc6 <strncpy>
 800281c:	4603      	mov	r3, r0
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe faca 	bl	8000db8 <lcd_send_string>
							lcd_put_cur(1,0);
 8002824:	2100      	movs	r1, #0
 8002826:	2001      	movs	r0, #1
 8002828:	f7fe fa61 	bl	8000cee <lcd_put_cur>
							lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 800282c:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <HAL_GPIO_EXTI_Callback+0x69c>)
 800282e:	f993 3000 	ldrsb.w	r3, [r3]
 8002832:	3301      	adds	r3, #1
 8002834:	220a      	movs	r2, #10
 8002836:	fb93 f1f2 	sdiv	r1, r3, r2
 800283a:	fb02 f201 	mul.w	r2, r2, r1
 800283e:	1a9a      	subs	r2, r3, r2
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	4413      	add	r3, r2
 8002846:	4a19      	ldr	r2, [pc, #100]	; (80028ac <HAL_GPIO_EXTI_Callback+0x6a0>)
 8002848:	4413      	add	r3, r2
 800284a:	2210      	movs	r2, #16
 800284c:	4619      	mov	r1, r3
 800284e:	4812      	ldr	r0, [pc, #72]	; (8002898 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002850:	f005 fbb9 	bl	8007fc6 <strncpy>
 8002854:	4603      	mov	r3, r0
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe faae 	bl	8000db8 <lcd_send_string>
							lcd_put_cur(0,0);
 800285c:	2100      	movs	r1, #0
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe fa45 	bl	8000cee <lcd_put_cur>
							//update menu booleans
							in_analog_menu=1;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_GPIO_EXTI_Callback+0x698>)
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
							in_main_menu=0;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_GPIO_EXTI_Callback+0x680>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
							change_value_bool=!change_value_bool;//invert change value bool
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_GPIO_EXTI_Callback+0x6b0>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_GPIO_EXTI_Callback+0x6b0>)
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	e198      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
 8002886:	bf00      	nop
 8002888:	2000021c 	.word	0x2000021c
 800288c:	2000015e 	.word	0x2000015e
 8002890:	2000021b 	.word	0x2000021b
 8002894:	20000008 	.word	0x20000008
 8002898:	200022a4 	.word	0x200022a4
 800289c:	20000218 	.word	0x20000218
 80028a0:	2000004c 	.word	0x2000004c
 80028a4:	20000219 	.word	0x20000219
 80028a8:	2000021d 	.word	0x2000021d
 80028ac:	200000b4 	.word	0x200000b4
 80028b0:	20000224 	.word	0x20000224
 80028b4:	20000221 	.word	0x20000221
 80028b8:	20000222 	.word	0x20000222
 80028bc:	2000021f 	.word	0x2000021f
						} else if (menu_pos==2){
 80028c0:	4bab      	ldr	r3, [pc, #684]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x964>)
 80028c2:	f993 3000 	ldrsb.w	r3, [r3]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d103      	bne.n	80028d2 <HAL_GPIO_EXTI_Callback+0x6c6>
							display_scroll=0;// reset display value menu position
 80028ca:	4baa      	ldr	r3, [pc, #680]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x968>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e172      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						} else if (menu_pos==3){
 80028d2:	4ba7      	ldr	r3, [pc, #668]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x964>)
 80028d4:	f993 3000 	ldrsb.w	r3, [r3]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	f040 816d 	bne.w	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
							//move cursor for delay change
							lcd_put_cur(0,13);
 80028de:	210d      	movs	r1, #13
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe fa04 	bl	8000cee <lcd_put_cur>
 80028e6:	e167      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						}
					} else if((in_can_menu&&can_pos==0)||(in_analog_menu&&analog_pos==0)){// back buttons
 80028e8:	4ba3      	ldr	r3, [pc, #652]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x96c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <HAL_GPIO_EXTI_Callback+0x6ee>
 80028f0:	4ba2      	ldr	r3, [pc, #648]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x970>)
 80028f2:	f993 3000 	ldrsb.w	r3, [r3]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_GPIO_EXTI_Callback+0x700>
 80028fa:	4ba1      	ldr	r3, [pc, #644]	; (8002b80 <HAL_GPIO_EXTI_Callback+0x974>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d04e      	beq.n	80029a0 <HAL_GPIO_EXTI_Callback+0x794>
 8002902:	4ba0      	ldr	r3, [pc, #640]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x978>)
 8002904:	f993 3000 	ldrsb.w	r3, [r3]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d149      	bne.n	80029a0 <HAL_GPIO_EXTI_Callback+0x794>
						//display main menu
						lcd_put_cur(0,0);
 800290c:	2100      	movs	r1, #0
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe f9ed 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8002914:	4b96      	ldr	r3, [pc, #600]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x964>)
 8002916:	f993 3000 	ldrsb.w	r3, [r3]
 800291a:	461a      	mov	r2, r3
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	4413      	add	r3, r2
 8002922:	4a99      	ldr	r2, [pc, #612]	; (8002b88 <HAL_GPIO_EXTI_Callback+0x97c>)
 8002924:	4413      	add	r3, r2
 8002926:	2210      	movs	r2, #16
 8002928:	4619      	mov	r1, r3
 800292a:	4898      	ldr	r0, [pc, #608]	; (8002b8c <HAL_GPIO_EXTI_Callback+0x980>)
 800292c:	f005 fb4b 	bl	8007fc6 <strncpy>
 8002930:	4603      	mov	r3, r0
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fa40 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(1,0);
 8002938:	2100      	movs	r1, #0
 800293a:	2001      	movs	r0, #1
 800293c:	f7fe f9d7 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8002940:	4b8b      	ldr	r3, [pc, #556]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x964>)
 8002942:	f993 3000 	ldrsb.w	r3, [r3]
 8002946:	3301      	adds	r3, #1
 8002948:	2204      	movs	r2, #4
 800294a:	fb93 f1f2 	sdiv	r1, r3, r2
 800294e:	fb02 f201 	mul.w	r2, r2, r1
 8002952:	1a9a      	subs	r2, r3, r2
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	4413      	add	r3, r2
 800295a:	4a8b      	ldr	r2, [pc, #556]	; (8002b88 <HAL_GPIO_EXTI_Callback+0x97c>)
 800295c:	4413      	add	r3, r2
 800295e:	2210      	movs	r2, #16
 8002960:	4619      	mov	r1, r3
 8002962:	488a      	ldr	r0, [pc, #552]	; (8002b8c <HAL_GPIO_EXTI_Callback+0x980>)
 8002964:	f005 fb2f 	bl	8007fc6 <strncpy>
 8002968:	4603      	mov	r3, r0
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fa24 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,0);
 8002970:	2100      	movs	r1, #0
 8002972:	2000      	movs	r0, #0
 8002974:	f7fe f9bb 	bl	8000cee <lcd_put_cur>
						//update menu booleans
						in_can_menu=0;
 8002978:	4b7f      	ldr	r3, [pc, #508]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x96c>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
						in_analog_menu=0;
 800297e:	4b80      	ldr	r3, [pc, #512]	; (8002b80 <HAL_GPIO_EXTI_Callback+0x974>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
						in_main_menu=1;
 8002984:	4b82      	ldr	r3, [pc, #520]	; (8002b90 <HAL_GPIO_EXTI_Callback+0x984>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
						change_value_bool=!change_value_bool;//invert change value bool
 800298a:	4b82      	ldr	r3, [pc, #520]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	4b7e      	ldr	r3, [pc, #504]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	e10b      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
					} else if (in_analog_menu){
 80029a0:	4b77      	ldr	r3, [pc, #476]	; (8002b80 <HAL_GPIO_EXTI_Callback+0x974>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d06e      	beq.n	8002a86 <HAL_GPIO_EXTI_Callback+0x87a>
						if(analog_pos>=1 && analog_pos<=4){
 80029a8:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x978>)
 80029aa:	f993 3000 	ldrsb.w	r3, [r3]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	dd18      	ble.n	80029e4 <HAL_GPIO_EXTI_Callback+0x7d8>
 80029b2:	4b74      	ldr	r3, [pc, #464]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x978>)
 80029b4:	f993 3000 	ldrsb.w	r3, [r3]
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	dc13      	bgt.n	80029e4 <HAL_GPIO_EXTI_Callback+0x7d8>
							zeroAnalog(analog_pos-1);// set the analog offsets to the current value
 80029bc:	4b71      	ldr	r3, [pc, #452]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x978>)
 80029be:	f993 3000 	ldrsb.w	r3, [r3]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 feaf 	bl	800372c <zeroAnalog>
							change_value_bool=!change_value_bool;//invert change value bool
 80029ce:	4b71      	ldr	r3, [pc, #452]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bf0c      	ite	eq
 80029d6:	2301      	moveq	r3, #1
 80029d8:	2300      	movne	r3, #0
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	4b6d      	ldr	r3, [pc, #436]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e0e9      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						}else if(analog_pos>=5 && analog_pos<=7){
 80029e4:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x978>)
 80029e6:	f993 3000 	ldrsb.w	r3, [r3]
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	dd18      	ble.n	8002a20 <HAL_GPIO_EXTI_Callback+0x814>
 80029ee:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x978>)
 80029f0:	f993 3000 	ldrsb.w	r3, [r3]
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	dc13      	bgt.n	8002a20 <HAL_GPIO_EXTI_Callback+0x814>
							toggleAnalog(analog_pos-4);
 80029f8:	4b62      	ldr	r3, [pc, #392]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x978>)
 80029fa:	f993 3000 	ldrsb.w	r3, [r3]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3b04      	subs	r3, #4
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 ff0b 	bl	8003820 <toggleAnalog>
							change_value_bool=!change_value_bool;//invert change value bool
 8002a0a:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	bf0c      	ite	eq
 8002a12:	2301      	moveq	r3, #1
 8002a14:	2300      	movne	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b5e      	ldr	r3, [pc, #376]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e0cb      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						}else if(analog_pos==8){
 8002a20:	4b58      	ldr	r3, [pc, #352]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x978>)
 8002a22:	f993 3000 	ldrsb.w	r3, [r3]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d10c      	bne.n	8002a44 <HAL_GPIO_EXTI_Callback+0x838>
							resetOffsets();// reset the analog offsets
 8002a2a:	f000 fecf 	bl	80037cc <resetOffsets>
							change_value_bool =!change_value_bool;//invert change value bool
 8002a2e:	4b59      	ldr	r3, [pc, #356]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b55      	ldr	r3, [pc, #340]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e0b9      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						}else if(analog_pos==9){
 8002a44:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x978>)
 8002a46:	f993 3000 	ldrsb.w	r3, [r3]
 8002a4a:	2b09      	cmp	r3, #9
 8002a4c:	f040 80b4 	bne.w	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
							store_offsets=1;
 8002a50:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <HAL_GPIO_EXTI_Callback+0x98c>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
							storeInFlash();// store the analog offsets
 8002a56:	f001 fb71 	bl	800413c <storeInFlash>
							lcd_put_cur(0,0);
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe f946 	bl	8000cee <lcd_put_cur>
								lcd_send_string("Store Successful");
 8002a62:	484e      	ldr	r0, [pc, #312]	; (8002b9c <HAL_GPIO_EXTI_Callback+0x990>)
 8002a64:	f7fe f9a8 	bl	8000db8 <lcd_send_string>
								lcd_put_cur(0,15);
 8002a68:	210f      	movs	r1, #15
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fe f93f 	bl	8000cee <lcd_put_cur>
							change_value_bool=!change_value_bool;//invert change value bool
 8002a70:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	e098      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						}

					} else if (in_can_menu){
 8002a86:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x96c>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d016      	beq.n	8002abc <HAL_GPIO_EXTI_Callback+0x8b0>
						if(can_pos==5){
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x970>)
 8002a90:	f993 3000 	ldrsb.w	r3, [r3]
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d10c      	bne.n	8002ab2 <HAL_GPIO_EXTI_Callback+0x8a6>
							resetCAN();// reset the CAN options to default
 8002a98:	f000 fc0e 	bl	80032b8 <resetCAN>
							change_value_bool=!change_value_bool;//invert change value bool
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x988>)
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e082      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						} else {
							//move cursor to end
							lcd_put_cur(0,15);
 8002ab2:	210f      	movs	r1, #15
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fe f91a 	bl	8000cee <lcd_put_cur>
 8002aba:	e07d      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						}
					} else{
						//move cursor to end
						lcd_put_cur(0,15);
 8002abc:	210f      	movs	r1, #15
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe f915 	bl	8000cee <lcd_put_cur>
 8002ac4:	e078      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
					}

				}else{
					if(in_main_menu){
 8002ac6:	4b32      	ldr	r3, [pc, #200]	; (8002b90 <HAL_GPIO_EXTI_Callback+0x984>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d043      	beq.n	8002b56 <HAL_GPIO_EXTI_Callback+0x94a>
						if(menu_pos==2){ //display menu
 8002ace:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x964>)
 8002ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d136      	bne.n	8002b46 <HAL_GPIO_EXTI_Callback+0x93a>
							lcd_put_cur(0,0);
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe f907 	bl	8000cee <lcd_put_cur>
							lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x964>)
 8002ae2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <HAL_GPIO_EXTI_Callback+0x97c>)
 8002af0:	4413      	add	r3, r2
 8002af2:	2210      	movs	r2, #16
 8002af4:	4619      	mov	r1, r3
 8002af6:	4825      	ldr	r0, [pc, #148]	; (8002b8c <HAL_GPIO_EXTI_Callback+0x980>)
 8002af8:	f005 fa65 	bl	8007fc6 <strncpy>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe f95a 	bl	8000db8 <lcd_send_string>
							lcd_put_cur(1,0);
 8002b04:	2100      	movs	r1, #0
 8002b06:	2001      	movs	r0, #1
 8002b08:	f7fe f8f1 	bl	8000cee <lcd_put_cur>
							lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8002b0c:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x964>)
 8002b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8002b12:	3301      	adds	r3, #1
 8002b14:	2204      	movs	r2, #4
 8002b16:	fb93 f1f2 	sdiv	r1, r3, r2
 8002b1a:	fb02 f201 	mul.w	r2, r2, r1
 8002b1e:	1a9a      	subs	r2, r3, r2
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	4413      	add	r3, r2
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_GPIO_EXTI_Callback+0x97c>)
 8002b28:	4413      	add	r3, r2
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4817      	ldr	r0, [pc, #92]	; (8002b8c <HAL_GPIO_EXTI_Callback+0x980>)
 8002b30:	f005 fa49 	bl	8007fc6 <strncpy>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f93e 	bl	8000db8 <lcd_send_string>
							lcd_put_cur(0,0);
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fe f8d5 	bl	8000cee <lcd_put_cur>
 8002b44:	e038      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						}
						else if(menu_pos==3)
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_GPIO_EXTI_Callback+0x964>)
 8002b48:	f993 3000 	ldrsb.w	r3, [r3]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d133      	bne.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
							setDelay();//set Delay
 8002b50:	f000 fd7e 	bl	8003650 <setDelay>
 8002b54:	e030      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
					}
					else if(in_can_menu){
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x96c>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d02c      	beq.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
						if(can_pos==1)
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x970>)
 8002b60:	f993 3000 	ldrsb.w	r3, [r3]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d11b      	bne.n	8002ba0 <HAL_GPIO_EXTI_Callback+0x994>
							setBaudRate(); // set and store the selected baud rate
 8002b68:	f000 f882 	bl	8002c70 <setBaudRate>
 8002b6c:	e024      	b.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
 8002b6e:	bf00      	nop
 8002b70:	2000021b 	.word	0x2000021b
 8002b74:	2000021a 	.word	0x2000021a
 8002b78:	20000218 	.word	0x20000218
 8002b7c:	2000021c 	.word	0x2000021c
 8002b80:	20000219 	.word	0x20000219
 8002b84:	2000021d 	.word	0x2000021d
 8002b88:	20000008 	.word	0x20000008
 8002b8c:	200022a4 	.word	0x200022a4
 8002b90:	2000015e 	.word	0x2000015e
 8002b94:	2000021f 	.word	0x2000021f
 8002b98:	20000208 	.word	0x20000208
 8002b9c:	08009c48 	.word	0x08009c48
						else if(can_pos>=2 && can_pos<=4)
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_GPIO_EXTI_Callback+0x9d8>)
 8002ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	dd06      	ble.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_GPIO_EXTI_Callback+0x9d8>)
 8002bac:	f993 3000 	ldrsb.w	r3, [r3]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	dc01      	bgt.n	8002bb8 <HAL_GPIO_EXTI_Callback+0x9ac>
							setCANID(); // set and store the selected can id
 8002bb4:	f000 fa98 	bl	80030e8 <setCANID>
					}

				}
				change_value_bool=!change_value_bool;//invert change value bool
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x9dc>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x9dc>)
 8002bca:	701a      	strb	r2, [r3, #0]
				btn_counter=0; // reset btn counter
 8002bcc:	4b07      	ldr	r3, [pc, #28]	; (8002bec <HAL_GPIO_EXTI_Callback+0x9e0>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	801a      	strh	r2, [r3, #0]
				sel_btn_pressed=1; // set select button to pressed
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x9e4>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
			}
	}
}
 8002bd8:	e7ff      	b.n	8002bda <HAL_GPIO_EXTI_Callback+0x9ce>
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000021c 	.word	0x2000021c
 8002be8:	2000021f 	.word	0x2000021f
 8002bec:	20000224 	.word	0x20000224
 8002bf0:	20000222 	.word	0x20000222

08002bf4 <changeBaudRate>:


//changes the baud rate of the CAN connection
void changeBaudRate(uint8_t direction){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
	baud_pos = ((baud_pos+direction)<0)?baud_rates_length-1:(baud_pos+direction)%baud_rates_length;//move baud rate position in given direction
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <changeBaudRate+0x70>)
 8002c00:	f993 3000 	ldrsb.w	r3, [r3]
 8002c04:	461a      	mov	r2, r3
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	4413      	add	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da05      	bge.n	8002c1a <changeBaudRate+0x26>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	e00c      	b.n	8002c34 <changeBaudRate+0x40>
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <changeBaudRate+0x70>)
 8002c1c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c20:	461a      	mov	r2, r3
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	4413      	add	r3, r2
 8002c26:	2204      	movs	r2, #4
 8002c28:	fb93 f1f2 	sdiv	r1, r3, r2
 8002c2c:	fb02 f201 	mul.w	r2, r2, r1
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	b25b      	sxtb	r3, r3
 8002c34:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <changeBaudRate+0x70>)
 8002c36:	7013      	strb	r3, [r2, #0]

	//display the selected baud rate
	lcd_put_cur(0,12);
 8002c38:	210c      	movs	r1, #12
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7fe f857 	bl	8000cee <lcd_put_cur>
	lcd_send_string(baud_rates[baud_pos]);
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <changeBaudRate+0x70>)
 8002c42:	f993 3000 	ldrsb.w	r3, [r3]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <changeBaudRate+0x74>)
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f8b3 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,15);
 8002c52:	210f      	movs	r1, #15
 8002c54:	2000      	movs	r0, #0
 8002c56:	f7fe f84a 	bl	8000cee <lcd_put_cur>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2000015f 	.word	0x2000015f
 8002c68:	08009d44 	.word	0x08009d44
 8002c6c:	00000000 	.word	0x00000000

08002c70 <setBaudRate>:

//set the baud rate and store it
void setBaudRate(void){
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	can_enabled=0;
 8002c74:	4bb6      	ldr	r3, [pc, #728]	; (8002f50 <setBaudRate+0x2e0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
	//stop can bus
	HAL_CAN_Stop(&hcan);
 8002c7a:	48b6      	ldr	r0, [pc, #728]	; (8002f54 <setBaudRate+0x2e4>)
 8002c7c:	f001 ffc7 	bl	8004c0e <HAL_CAN_Stop>

	//set prescaler
	PSC=pow(2,4-baud_pos);
 8002c80:	4bb5      	ldr	r3, [pc, #724]	; (8002f58 <setBaudRate+0x2e8>)
 8002c82:	f993 3000 	ldrsb.w	r3, [r3]
 8002c86:	f1c3 0304 	rsb	r3, r3, #4
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fc4a 	bl	8000524 <__aeabi_i2d>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	ec43 2b11 	vmov	d1, r2, r3
 8002c98:	ed9f 0ba3 	vldr	d0, [pc, #652]	; 8002f28 <setBaudRate+0x2b8>
 8002c9c:	f005 fdfc 	bl	8008898 <pow>
 8002ca0:	ec53 2b10 	vmov	r2, r3, d0
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f7fd ff56 	bl	8000b58 <__aeabi_d2uiz>
 8002cac:	4603      	mov	r3, r0
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4baa      	ldr	r3, [pc, #680]	; (8002f5c <setBaudRate+0x2ec>)
 8002cb2:	701a      	strb	r2, [r3, #0]

	//sample rate cap
	if(sample_rate<30||(analog_1_enabled && analog_2_enabled && analog_3_enabled && sample_rate > 3000/(log(PSC)/log(2)))||(((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))&& sample_rate>5000/(log(PSC)/log(2)))||(sample_rate>10000/(log(PSC)/log(2)))){
 8002cb4:	4baa      	ldr	r3, [pc, #680]	; (8002f60 <setBaudRate+0x2f0>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	2b1d      	cmp	r3, #29
 8002cba:	f240 809f 	bls.w	8002dfc <setBaudRate+0x18c>
 8002cbe:	4ba9      	ldr	r3, [pc, #676]	; (8002f64 <setBaudRate+0x2f4>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d030      	beq.n	8002d28 <setBaudRate+0xb8>
 8002cc6:	4ba8      	ldr	r3, [pc, #672]	; (8002f68 <setBaudRate+0x2f8>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d02c      	beq.n	8002d28 <setBaudRate+0xb8>
 8002cce:	4ba7      	ldr	r3, [pc, #668]	; (8002f6c <setBaudRate+0x2fc>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d028      	beq.n	8002d28 <setBaudRate+0xb8>
 8002cd6:	4ba2      	ldr	r3, [pc, #648]	; (8002f60 <setBaudRate+0x2f0>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fc22 	bl	8000524 <__aeabi_i2d>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	460d      	mov	r5, r1
 8002ce4:	4b9d      	ldr	r3, [pc, #628]	; (8002f5c <setBaudRate+0x2ec>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fc0b 	bl	8000504 <__aeabi_ui2d>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	ec43 2b10 	vmov	d0, r2, r3
 8002cf6:	f005 fd87 	bl	8008808 <log>
 8002cfa:	ec51 0b10 	vmov	r0, r1, d0
 8002cfe:	a38c      	add	r3, pc, #560	; (adr r3, 8002f30 <setBaudRate+0x2c0>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fda2 	bl	800084c <__aeabi_ddiv>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	a18a      	add	r1, pc, #552	; (adr r1, 8002f38 <setBaudRate+0x2c8>)
 8002d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d12:	f7fd fd9b 	bl	800084c <__aeabi_ddiv>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f7fd fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d169      	bne.n	8002dfc <setBaudRate+0x18c>
 8002d28:	4b8e      	ldr	r3, [pc, #568]	; (8002f64 <setBaudRate+0x2f4>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <setBaudRate+0xc8>
 8002d30:	4b8d      	ldr	r3, [pc, #564]	; (8002f68 <setBaudRate+0x2f8>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10f      	bne.n	8002d58 <setBaudRate+0xe8>
 8002d38:	4b8a      	ldr	r3, [pc, #552]	; (8002f64 <setBaudRate+0x2f4>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <setBaudRate+0xd8>
 8002d40:	4b8a      	ldr	r3, [pc, #552]	; (8002f6c <setBaudRate+0x2fc>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <setBaudRate+0xe8>
 8002d48:	4b87      	ldr	r3, [pc, #540]	; (8002f68 <setBaudRate+0x2f8>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d02c      	beq.n	8002daa <setBaudRate+0x13a>
 8002d50:	4b86      	ldr	r3, [pc, #536]	; (8002f6c <setBaudRate+0x2fc>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d028      	beq.n	8002daa <setBaudRate+0x13a>
 8002d58:	4b81      	ldr	r3, [pc, #516]	; (8002f60 <setBaudRate+0x2f0>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fbe1 	bl	8000524 <__aeabi_i2d>
 8002d62:	4604      	mov	r4, r0
 8002d64:	460d      	mov	r5, r1
 8002d66:	4b7d      	ldr	r3, [pc, #500]	; (8002f5c <setBaudRate+0x2ec>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fbca 	bl	8000504 <__aeabi_ui2d>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	ec43 2b10 	vmov	d0, r2, r3
 8002d78:	f005 fd46 	bl	8008808 <log>
 8002d7c:	ec51 0b10 	vmov	r0, r1, d0
 8002d80:	a36b      	add	r3, pc, #428	; (adr r3, 8002f30 <setBaudRate+0x2c0>)
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	f7fd fd61 	bl	800084c <__aeabi_ddiv>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	a16c      	add	r1, pc, #432	; (adr r1, 8002f40 <setBaudRate+0x2d0>)
 8002d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d94:	f7fd fd5a 	bl	800084c <__aeabi_ddiv>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd feba 	bl	8000b18 <__aeabi_dcmpgt>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d128      	bne.n	8002dfc <setBaudRate+0x18c>
 8002daa:	4b6d      	ldr	r3, [pc, #436]	; (8002f60 <setBaudRate+0x2f0>)
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fbb8 	bl	8000524 <__aeabi_i2d>
 8002db4:	4604      	mov	r4, r0
 8002db6:	460d      	mov	r5, r1
 8002db8:	4b68      	ldr	r3, [pc, #416]	; (8002f5c <setBaudRate+0x2ec>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd fba1 	bl	8000504 <__aeabi_ui2d>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	ec43 2b10 	vmov	d0, r2, r3
 8002dca:	f005 fd1d 	bl	8008808 <log>
 8002dce:	ec51 0b10 	vmov	r0, r1, d0
 8002dd2:	a357      	add	r3, pc, #348	; (adr r3, 8002f30 <setBaudRate+0x2c0>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fd38 	bl	800084c <__aeabi_ddiv>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	a159      	add	r1, pc, #356	; (adr r1, 8002f48 <setBaudRate+0x2d8>)
 8002de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002de6:	f7fd fd31 	bl	800084c <__aeabi_ddiv>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4620      	mov	r0, r4
 8002df0:	4629      	mov	r1, r5
 8002df2:	f7fd fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d058      	beq.n	8002eae <setBaudRate+0x23e>
		sample_rate=(analog_1_enabled && analog_2_enabled && analog_3_enabled)?3000:((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))?5000:10000;
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <setBaudRate+0x2f4>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <setBaudRate+0x1a4>
 8002e04:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <setBaudRate+0x2f8>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <setBaudRate+0x1a4>
 8002e0c:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <setBaudRate+0x2fc>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d11d      	bne.n	8002e50 <setBaudRate+0x1e0>
 8002e14:	4b53      	ldr	r3, [pc, #332]	; (8002f64 <setBaudRate+0x2f4>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <setBaudRate+0x1b4>
 8002e1c:	4b52      	ldr	r3, [pc, #328]	; (8002f68 <setBaudRate+0x2f8>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10f      	bne.n	8002e44 <setBaudRate+0x1d4>
 8002e24:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <setBaudRate+0x2f4>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <setBaudRate+0x1c4>
 8002e2c:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <setBaudRate+0x2fc>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <setBaudRate+0x1d4>
 8002e34:	4b4c      	ldr	r3, [pc, #304]	; (8002f68 <setBaudRate+0x2f8>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <setBaudRate+0x1da>
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <setBaudRate+0x2fc>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <setBaudRate+0x1da>
 8002e44:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e48:	e004      	b.n	8002e54 <setBaudRate+0x1e4>
 8002e4a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e4e:	e001      	b.n	8002e54 <setBaudRate+0x1e4>
 8002e50:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002e54:	4a42      	ldr	r2, [pc, #264]	; (8002f60 <setBaudRate+0x2f0>)
 8002e56:	8013      	strh	r3, [r2, #0]
		sample_rate/=(log(PSC)/log(2));
 8002e58:	4b40      	ldr	r3, [pc, #256]	; (8002f5c <setBaudRate+0x2ec>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fb51 	bl	8000504 <__aeabi_ui2d>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	ec43 2b10 	vmov	d0, r2, r3
 8002e6a:	f005 fccd 	bl	8008808 <log>
 8002e6e:	ec51 0b10 	vmov	r0, r1, d0
 8002e72:	a32f      	add	r3, pc, #188	; (adr r3, 8002f30 <setBaudRate+0x2c0>)
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd fce8 	bl	800084c <__aeabi_ddiv>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4614      	mov	r4, r2
 8002e82:	461d      	mov	r5, r3
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <setBaudRate+0x2f0>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb4b 	bl	8000524 <__aeabi_i2d>
 8002e8e:	4622      	mov	r2, r4
 8002e90:	462b      	mov	r3, r5
 8002e92:	f7fd fcdb 	bl	800084c <__aeabi_ddiv>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7fd fe5b 	bl	8000b58 <__aeabi_d2uiz>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <setBaudRate+0x2f0>)
 8002ea8:	801a      	strh	r2, [r3, #0]
		setDelay();
 8002eaa:	f000 fbd1 	bl	8003650 <setDelay>
	}

	hcan.Init.Prescaler = PSC;
 8002eae:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <setBaudRate+0x2ec>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <setBaudRate+0x2e4>)
 8002eb6:	605a      	str	r2, [r3, #4]

	//reinitialize can
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002eb8:	4826      	ldr	r0, [pc, #152]	; (8002f54 <setBaudRate+0x2e4>)
 8002eba:	f001 fc9f 	bl	80047fc <HAL_CAN_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <setBaudRate+0x258>
	{
		Error_Handler();
 8002ec4:	f001 f9dc 	bl	8004280 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002ec8:	4822      	ldr	r0, [pc, #136]	; (8002f54 <setBaudRate+0x2e4>)
 8002eca:	f001 fe5c 	bl	8004b86 <HAL_CAN_Start>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <setBaudRate+0x268>
		Error_Handler();
 8002ed4:	f001 f9d4 	bl	8004280 <Error_Handler>
	}


	//store new baud in flash
	storeInFlash();
 8002ed8:	f001 f930 	bl	800413c <storeInFlash>

	//save the baud rate in menu
	memset(temp,0,17); // erase the temp array
 8002edc:	2211      	movs	r2, #17
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4823      	ldr	r0, [pc, #140]	; (8002f70 <setBaudRate+0x300>)
 8002ee2:	f005 f801 	bl	8007ee8 <memset>
	strncpy(temp, "Baud rate:  ",16);
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	4922      	ldr	r1, [pc, #136]	; (8002f74 <setBaudRate+0x304>)
 8002eea:	4821      	ldr	r0, [pc, #132]	; (8002f70 <setBaudRate+0x300>)
 8002eec:	f005 f86b 	bl	8007fc6 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <setBaudRate+0x2e8>)
 8002ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <setBaudRate+0x308>)
 8002efa:	4413      	add	r3, r2
 8002efc:	2211      	movs	r2, #17
 8002efe:	4619      	mov	r1, r3
 8002f00:	481b      	ldr	r0, [pc, #108]	; (8002f70 <setBaudRate+0x300>)
 8002f02:	f005 f828 	bl	8007f56 <strlcat>
	strlcpy(can_menu[1],temp,17);
 8002f06:	2211      	movs	r2, #17
 8002f08:	4919      	ldr	r1, [pc, #100]	; (8002f70 <setBaudRate+0x300>)
 8002f0a:	481c      	ldr	r0, [pc, #112]	; (8002f7c <setBaudRate+0x30c>)
 8002f0c:	f005 f846 	bl	8007f9c <strlcpy>
	lcd_put_cur(0,0);
 8002f10:	2100      	movs	r1, #0
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7fd feeb 	bl	8000cee <lcd_put_cur>

	can_enabled=1;
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <setBaudRate+0x2e0>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	bdb0      	pop	{r4, r5, r7, pc}
 8002f22:	bf00      	nop
 8002f24:	f3af 8000 	nop.w
 8002f28:	00000000 	.word	0x00000000
 8002f2c:	40000000 	.word	0x40000000
 8002f30:	fefa39ef 	.word	0xfefa39ef
 8002f34:	3fe62e42 	.word	0x3fe62e42
 8002f38:	00000000 	.word	0x00000000
 8002f3c:	40a77000 	.word	0x40a77000
 8002f40:	00000000 	.word	0x00000000
 8002f44:	40b38800 	.word	0x40b38800
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	40c38800 	.word	0x40c38800
 8002f50:	20000001 	.word	0x20000001
 8002f54:	20002278 	.word	0x20002278
 8002f58:	2000015f 	.word	0x2000015f
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000162 	.word	0x20000162
 8002f64:	20000002 	.word	0x20000002
 8002f68:	20000003 	.word	0x20000003
 8002f6c:	20000004 	.word	0x20000004
 8002f70:	200022a4 	.word	0x200022a4
 8002f74:	08009b98 	.word	0x08009b98
 8002f78:	08009d44 	.word	0x08009d44
 8002f7c:	2000005d 	.word	0x2000005d

08002f80 <changeCANID>:

//changes the ID of the selected can device
void changeCANID(uint8_t direction){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
	if(can_pos==2){//change can id 1
 8002f8a:	4b4f      	ldr	r3, [pc, #316]	; (80030c8 <changeCANID+0x148>)
 8002f8c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d128      	bne.n	8002fe6 <changeCANID+0x66>
		can_id_1+=direction;
 8002f94:	4b4d      	ldr	r3, [pc, #308]	; (80030cc <changeCANID+0x14c>)
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4b4b      	ldr	r3, [pc, #300]	; (80030cc <changeCANID+0x14c>)
 8002fa0:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 8002fa2:	e006      	b.n	8002fb2 <changeCANID+0x32>
			can_id_1+=direction;
 8002fa4:	4b49      	ldr	r3, [pc, #292]	; (80030cc <changeCANID+0x14c>)
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	4413      	add	r3, r2
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <changeCANID+0x14c>)
 8002fb0:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 8002fb2:	4b46      	ldr	r3, [pc, #280]	; (80030cc <changeCANID+0x14c>)
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <changeCANID+0x150>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d0f2      	beq.n	8002fa4 <changeCANID+0x24>
 8002fbe:	4b43      	ldr	r3, [pc, #268]	; (80030cc <changeCANID+0x14c>)
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	4b44      	ldr	r3, [pc, #272]	; (80030d4 <changeCANID+0x154>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d0ec      	beq.n	8002fa4 <changeCANID+0x24>
		sprintf(char_arr, "%03d", can_id_1);
 8002fca:	4b40      	ldr	r3, [pc, #256]	; (80030cc <changeCANID+0x14c>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4941      	ldr	r1, [pc, #260]	; (80030d8 <changeCANID+0x158>)
 8002fd2:	4842      	ldr	r0, [pc, #264]	; (80030dc <changeCANID+0x15c>)
 8002fd4:	f004 ff90 	bl	8007ef8 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002fd8:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <changeCANID+0x160>)
 8002fda:	4a40      	ldr	r2, [pc, #256]	; (80030dc <changeCANID+0x15c>)
 8002fdc:	8811      	ldrh	r1, [r2, #0]
 8002fde:	7892      	ldrb	r2, [r2, #2]
 8002fe0:	8019      	strh	r1, [r3, #0]
 8002fe2:	709a      	strb	r2, [r3, #2]
 8002fe4:	e05a      	b.n	800309c <changeCANID+0x11c>
	} else if(can_pos==3){//change can id 2
 8002fe6:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <changeCANID+0x148>)
 8002fe8:	f993 3000 	ldrsb.w	r3, [r3]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d128      	bne.n	8003042 <changeCANID+0xc2>
		can_id_2+=direction;
 8002ff0:	4b37      	ldr	r3, [pc, #220]	; (80030d0 <changeCANID+0x150>)
 8002ff2:	781a      	ldrb	r2, [r3, #0]
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4b35      	ldr	r3, [pc, #212]	; (80030d0 <changeCANID+0x150>)
 8002ffc:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 8002ffe:	e006      	b.n	800300e <changeCANID+0x8e>
			can_id_2+=direction;
 8003000:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <changeCANID+0x150>)
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	4413      	add	r3, r2
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <changeCANID+0x150>)
 800300c:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 800300e:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <changeCANID+0x150>)
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <changeCANID+0x14c>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d0f2      	beq.n	8003000 <changeCANID+0x80>
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <changeCANID+0x150>)
 800301c:	781a      	ldrb	r2, [r3, #0]
 800301e:	4b2d      	ldr	r3, [pc, #180]	; (80030d4 <changeCANID+0x154>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d0ec      	beq.n	8003000 <changeCANID+0x80>
		sprintf(char_arr, "%03d", can_id_2);
 8003026:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <changeCANID+0x150>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	492a      	ldr	r1, [pc, #168]	; (80030d8 <changeCANID+0x158>)
 800302e:	482b      	ldr	r0, [pc, #172]	; (80030dc <changeCANID+0x15c>)
 8003030:	f004 ff62 	bl	8007ef8 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8003034:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <changeCANID+0x160>)
 8003036:	4a29      	ldr	r2, [pc, #164]	; (80030dc <changeCANID+0x15c>)
 8003038:	8811      	ldrh	r1, [r2, #0]
 800303a:	7892      	ldrb	r2, [r2, #2]
 800303c:	8019      	strh	r1, [r3, #0]
 800303e:	709a      	strb	r2, [r3, #2]
 8003040:	e02c      	b.n	800309c <changeCANID+0x11c>
	} else if(can_pos==4){// change can id 3
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <changeCANID+0x148>)
 8003044:	f993 3000 	ldrsb.w	r3, [r3]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d127      	bne.n	800309c <changeCANID+0x11c>
		can_id_3+=direction;
 800304c:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <changeCANID+0x154>)
 800304e:	781a      	ldrb	r2, [r3, #0]
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	4413      	add	r3, r2
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <changeCANID+0x154>)
 8003058:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 800305a:	e006      	b.n	800306a <changeCANID+0xea>
			can_id_3+=direction;
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <changeCANID+0x154>)
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	4413      	add	r3, r2
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <changeCANID+0x154>)
 8003068:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 800306a:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <changeCANID+0x154>)
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	4b17      	ldr	r3, [pc, #92]	; (80030cc <changeCANID+0x14c>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d0f2      	beq.n	800305c <changeCANID+0xdc>
 8003076:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <changeCANID+0x154>)
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <changeCANID+0x150>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d0ec      	beq.n	800305c <changeCANID+0xdc>
		sprintf(char_arr, "%03d", can_id_3);
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <changeCANID+0x154>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	4913      	ldr	r1, [pc, #76]	; (80030d8 <changeCANID+0x158>)
 800308a:	4814      	ldr	r0, [pc, #80]	; (80030dc <changeCANID+0x15c>)
 800308c:	f004 ff34 	bl	8007ef8 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <changeCANID+0x160>)
 8003092:	4a12      	ldr	r2, [pc, #72]	; (80030dc <changeCANID+0x15c>)
 8003094:	8811      	ldrh	r1, [r2, #0]
 8003096:	7892      	ldrb	r2, [r2, #2]
 8003098:	8019      	strh	r1, [r3, #0]
 800309a:	709a      	strb	r2, [r3, #2]
	}
	//display the selected CAN ID
	lcd_put_cur(0,13);
 800309c:	210d      	movs	r1, #13
 800309e:	2000      	movs	r0, #0
 80030a0:	f7fd fe25 	bl	8000cee <lcd_put_cur>
	lcd_send_string("    ");
 80030a4:	480f      	ldr	r0, [pc, #60]	; (80030e4 <changeCANID+0x164>)
 80030a6:	f7fd fe87 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,13);
 80030aa:	210d      	movs	r1, #13
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7fd fe1e 	bl	8000cee <lcd_put_cur>
	lcd_send_string(modified_can_id);
 80030b2:	480b      	ldr	r0, [pc, #44]	; (80030e0 <changeCANID+0x160>)
 80030b4:	f7fd fe80 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,15);
 80030b8:	210f      	movs	r1, #15
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fd fe17 	bl	8000cee <lcd_put_cur>
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	2000021c 	.word	0x2000021c
 80030cc:	200063e0 	.word	0x200063e0
 80030d0:	20002310 	.word	0x20002310
 80030d4:	20000234 	.word	0x20000234
 80030d8:	08009bb8 	.word	0x08009bb8
 80030dc:	20006450 	.word	0x20006450
 80030e0:	2000644c 	.word	0x2000644c
 80030e4:	08009c5c 	.word	0x08009c5c

080030e8 <setCANID>:

//set the can IDs
void setCANID(void){
 80030e8:	b5b0      	push	{r4, r5, r7, lr}
 80030ea:	af00      	add	r7, sp, #0
	headers_1.StdId = can_id_1; // set CAN ID 1
 80030ec:	4b63      	ldr	r3, [pc, #396]	; (800327c <setCANID+0x194>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b63      	ldr	r3, [pc, #396]	; (8003280 <setCANID+0x198>)
 80030f4:	601a      	str	r2, [r3, #0]
	headers_2.StdId = can_id_2; // set CAN ID 2
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <setCANID+0x19c>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b62      	ldr	r3, [pc, #392]	; (8003288 <setCANID+0x1a0>)
 80030fe:	601a      	str	r2, [r3, #0]
	headers_3.StdId = can_id_3; // set CAN ID 3
 8003100:	4b62      	ldr	r3, [pc, #392]	; (800328c <setCANID+0x1a4>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b62      	ldr	r3, [pc, #392]	; (8003290 <setCANID+0x1a8>)
 8003108:	601a      	str	r2, [r3, #0]

	//Store the CAN IDs
	id_arr[0]=can_id_1;
 800310a:	4b5c      	ldr	r3, [pc, #368]	; (800327c <setCANID+0x194>)
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	4b61      	ldr	r3, [pc, #388]	; (8003294 <setCANID+0x1ac>)
 8003110:	701a      	strb	r2, [r3, #0]
	id_arr[1]=can_id_2;
 8003112:	4b5c      	ldr	r3, [pc, #368]	; (8003284 <setCANID+0x19c>)
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <setCANID+0x1ac>)
 8003118:	705a      	strb	r2, [r3, #1]
	id_arr[2]=can_id_3;
 800311a:	4b5c      	ldr	r3, [pc, #368]	; (800328c <setCANID+0x1a4>)
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	4b5d      	ldr	r3, [pc, #372]	; (8003294 <setCANID+0x1ac>)
 8003120:	709a      	strb	r2, [r3, #2]
	id_arr[3]=0;
 8003122:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <setCANID+0x1ac>)
 8003124:	2200      	movs	r2, #0
 8003126:	70da      	strb	r2, [r3, #3]

	storeInFlash();
 8003128:	f001 f808 	bl	800413c <storeInFlash>


	//save can IDs in menu
	//can id 1
	memset(temp,0,17); // erase the temp array
 800312c:	2211      	movs	r2, #17
 800312e:	2100      	movs	r1, #0
 8003130:	4859      	ldr	r0, [pc, #356]	; (8003298 <setCANID+0x1b0>)
 8003132:	f004 fed9 	bl	8007ee8 <memset>
	strncpy(temp, "CAN ID ",16);
 8003136:	2210      	movs	r2, #16
 8003138:	4958      	ldr	r1, [pc, #352]	; (800329c <setCANID+0x1b4>)
 800313a:	4857      	ldr	r0, [pc, #348]	; (8003298 <setCANID+0x1b0>)
 800313c:	f004 ff43 	bl	8007fc6 <strncpy>
	strcat(temp, "1:    ");
 8003140:	4855      	ldr	r0, [pc, #340]	; (8003298 <setCANID+0x1b0>)
 8003142:	f7fd f845 	bl	80001d0 <strlen>
 8003146:	4603      	mov	r3, r0
 8003148:	461a      	mov	r2, r3
 800314a:	4b53      	ldr	r3, [pc, #332]	; (8003298 <setCANID+0x1b0>)
 800314c:	4413      	add	r3, r2
 800314e:	4a54      	ldr	r2, [pc, #336]	; (80032a0 <setCANID+0x1b8>)
 8003150:	6810      	ldr	r0, [r2, #0]
 8003152:	6018      	str	r0, [r3, #0]
 8003154:	8891      	ldrh	r1, [r2, #4]
 8003156:	7992      	ldrb	r2, [r2, #6]
 8003158:	8099      	strh	r1, [r3, #4]
 800315a:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 800315c:	2210      	movs	r2, #16
 800315e:	2100      	movs	r1, #0
 8003160:	4850      	ldr	r0, [pc, #320]	; (80032a4 <setCANID+0x1bc>)
 8003162:	f004 fec1 	bl	8007ee8 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8003166:	4b45      	ldr	r3, [pc, #276]	; (800327c <setCANID+0x194>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	494e      	ldr	r1, [pc, #312]	; (80032a8 <setCANID+0x1c0>)
 800316e:	484d      	ldr	r0, [pc, #308]	; (80032a4 <setCANID+0x1bc>)
 8003170:	f004 fec2 	bl	8007ef8 <siprintf>
	strlcat(temp, char_arr,17);
 8003174:	2211      	movs	r2, #17
 8003176:	494b      	ldr	r1, [pc, #300]	; (80032a4 <setCANID+0x1bc>)
 8003178:	4847      	ldr	r0, [pc, #284]	; (8003298 <setCANID+0x1b0>)
 800317a:	f004 feec 	bl	8007f56 <strlcat>
	memcpy(can_menu[2],temp,17);
 800317e:	4b4b      	ldr	r3, [pc, #300]	; (80032ac <setCANID+0x1c4>)
 8003180:	4a45      	ldr	r2, [pc, #276]	; (8003298 <setCANID+0x1b0>)
 8003182:	3322      	adds	r3, #34	; 0x22
 8003184:	6815      	ldr	r5, [r2, #0]
 8003186:	6854      	ldr	r4, [r2, #4]
 8003188:	6890      	ldr	r0, [r2, #8]
 800318a:	68d1      	ldr	r1, [r2, #12]
 800318c:	601d      	str	r5, [r3, #0]
 800318e:	605c      	str	r4, [r3, #4]
 8003190:	6098      	str	r0, [r3, #8]
 8003192:	60d9      	str	r1, [r3, #12]
 8003194:	7c12      	ldrb	r2, [r2, #16]
 8003196:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 8003198:	2211      	movs	r2, #17
 800319a:	2100      	movs	r1, #0
 800319c:	483e      	ldr	r0, [pc, #248]	; (8003298 <setCANID+0x1b0>)
 800319e:	f004 fea3 	bl	8007ee8 <memset>
	strncpy(temp, "CAN ID ",16);
 80031a2:	2210      	movs	r2, #16
 80031a4:	493d      	ldr	r1, [pc, #244]	; (800329c <setCANID+0x1b4>)
 80031a6:	483c      	ldr	r0, [pc, #240]	; (8003298 <setCANID+0x1b0>)
 80031a8:	f004 ff0d 	bl	8007fc6 <strncpy>
	strcat(temp, "2:    ");
 80031ac:	483a      	ldr	r0, [pc, #232]	; (8003298 <setCANID+0x1b0>)
 80031ae:	f7fd f80f 	bl	80001d0 <strlen>
 80031b2:	4603      	mov	r3, r0
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b38      	ldr	r3, [pc, #224]	; (8003298 <setCANID+0x1b0>)
 80031b8:	4413      	add	r3, r2
 80031ba:	4a3d      	ldr	r2, [pc, #244]	; (80032b0 <setCANID+0x1c8>)
 80031bc:	6810      	ldr	r0, [r2, #0]
 80031be:	6018      	str	r0, [r3, #0]
 80031c0:	8891      	ldrh	r1, [r2, #4]
 80031c2:	7992      	ldrb	r2, [r2, #6]
 80031c4:	8099      	strh	r1, [r3, #4]
 80031c6:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 80031c8:	2210      	movs	r2, #16
 80031ca:	2100      	movs	r1, #0
 80031cc:	4835      	ldr	r0, [pc, #212]	; (80032a4 <setCANID+0x1bc>)
 80031ce:	f004 fe8b 	bl	8007ee8 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 80031d2:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <setCANID+0x19c>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	4933      	ldr	r1, [pc, #204]	; (80032a8 <setCANID+0x1c0>)
 80031da:	4832      	ldr	r0, [pc, #200]	; (80032a4 <setCANID+0x1bc>)
 80031dc:	f004 fe8c 	bl	8007ef8 <siprintf>
	strlcat(temp, char_arr,17);
 80031e0:	2211      	movs	r2, #17
 80031e2:	4930      	ldr	r1, [pc, #192]	; (80032a4 <setCANID+0x1bc>)
 80031e4:	482c      	ldr	r0, [pc, #176]	; (8003298 <setCANID+0x1b0>)
 80031e6:	f004 feb6 	bl	8007f56 <strlcat>
	memcpy(can_menu[3],temp,17);
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <setCANID+0x1c4>)
 80031ec:	4a2a      	ldr	r2, [pc, #168]	; (8003298 <setCANID+0x1b0>)
 80031ee:	3333      	adds	r3, #51	; 0x33
 80031f0:	6815      	ldr	r5, [r2, #0]
 80031f2:	6854      	ldr	r4, [r2, #4]
 80031f4:	6890      	ldr	r0, [r2, #8]
 80031f6:	68d1      	ldr	r1, [r2, #12]
 80031f8:	601d      	str	r5, [r3, #0]
 80031fa:	605c      	str	r4, [r3, #4]
 80031fc:	6098      	str	r0, [r3, #8]
 80031fe:	60d9      	str	r1, [r3, #12]
 8003200:	7c12      	ldrb	r2, [r2, #16]
 8003202:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 8003204:	2211      	movs	r2, #17
 8003206:	2100      	movs	r1, #0
 8003208:	4823      	ldr	r0, [pc, #140]	; (8003298 <setCANID+0x1b0>)
 800320a:	f004 fe6d 	bl	8007ee8 <memset>
	strncpy(temp, "CAN ID ",16);
 800320e:	2210      	movs	r2, #16
 8003210:	4922      	ldr	r1, [pc, #136]	; (800329c <setCANID+0x1b4>)
 8003212:	4821      	ldr	r0, [pc, #132]	; (8003298 <setCANID+0x1b0>)
 8003214:	f004 fed7 	bl	8007fc6 <strncpy>
	strcat(temp, "3:    ");
 8003218:	481f      	ldr	r0, [pc, #124]	; (8003298 <setCANID+0x1b0>)
 800321a:	f7fc ffd9 	bl	80001d0 <strlen>
 800321e:	4603      	mov	r3, r0
 8003220:	461a      	mov	r2, r3
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <setCANID+0x1b0>)
 8003224:	4413      	add	r3, r2
 8003226:	4a23      	ldr	r2, [pc, #140]	; (80032b4 <setCANID+0x1cc>)
 8003228:	6810      	ldr	r0, [r2, #0]
 800322a:	6018      	str	r0, [r3, #0]
 800322c:	8891      	ldrh	r1, [r2, #4]
 800322e:	7992      	ldrb	r2, [r2, #6]
 8003230:	8099      	strh	r1, [r3, #4]
 8003232:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8003234:	2210      	movs	r2, #16
 8003236:	2100      	movs	r1, #0
 8003238:	481a      	ldr	r0, [pc, #104]	; (80032a4 <setCANID+0x1bc>)
 800323a:	f004 fe55 	bl	8007ee8 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <setCANID+0x1a4>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	4918      	ldr	r1, [pc, #96]	; (80032a8 <setCANID+0x1c0>)
 8003246:	4817      	ldr	r0, [pc, #92]	; (80032a4 <setCANID+0x1bc>)
 8003248:	f004 fe56 	bl	8007ef8 <siprintf>
	strlcat(temp, char_arr,17);
 800324c:	2211      	movs	r2, #17
 800324e:	4915      	ldr	r1, [pc, #84]	; (80032a4 <setCANID+0x1bc>)
 8003250:	4811      	ldr	r0, [pc, #68]	; (8003298 <setCANID+0x1b0>)
 8003252:	f004 fe80 	bl	8007f56 <strlcat>
	memcpy(can_menu[4],temp,17);
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <setCANID+0x1c4>)
 8003258:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <setCANID+0x1b0>)
 800325a:	f103 0444 	add.w	r4, r3, #68	; 0x44
 800325e:	4615      	mov	r5, r2
 8003260:	6828      	ldr	r0, [r5, #0]
 8003262:	6869      	ldr	r1, [r5, #4]
 8003264:	68aa      	ldr	r2, [r5, #8]
 8003266:	68eb      	ldr	r3, [r5, #12]
 8003268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800326a:	7c2b      	ldrb	r3, [r5, #16]
 800326c:	7023      	strb	r3, [r4, #0]

	lcd_put_cur(0,0);
 800326e:	2100      	movs	r1, #0
 8003270:	2000      	movs	r0, #0
 8003272:	f7fd fd3c 	bl	8000cee <lcd_put_cur>
}
 8003276:	bf00      	nop
 8003278:	bdb0      	pop	{r4, r5, r7, pc}
 800327a:	bf00      	nop
 800327c:	200063e0 	.word	0x200063e0
 8003280:	20002260 	.word	0x20002260
 8003284:	20002310 	.word	0x20002310
 8003288:	200063e4 	.word	0x200063e4
 800328c:	20000234 	.word	0x20000234
 8003290:	20002248 	.word	0x20002248
 8003294:	20000240 	.word	0x20000240
 8003298:	200022a4 	.word	0x200022a4
 800329c:	08009ba8 	.word	0x08009ba8
 80032a0:	08009bb0 	.word	0x08009bb0
 80032a4:	20006450 	.word	0x20006450
 80032a8:	08009bb8 	.word	0x08009bb8
 80032ac:	2000004c 	.word	0x2000004c
 80032b0:	08009bc0 	.word	0x08009bc0
 80032b4:	08009bc8 	.word	0x08009bc8

080032b8 <resetCAN>:

//reset CAN Variables
void resetCAN(void){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	//reset IDs
	can_id_1=1;
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <resetCAN+0x40>)
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
	can_id_2=2;
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <resetCAN+0x44>)
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
	can_id_3=3;
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <resetCAN+0x48>)
 80032ca:	2203      	movs	r2, #3
 80032cc:	701a      	strb	r2, [r3, #0]
	setCANID();
 80032ce:	f7ff ff0b 	bl	80030e8 <setCANID>

	//reset baud rate to 1M
	baud_pos=3;
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <resetCAN+0x4c>)
 80032d4:	2203      	movs	r2, #3
 80032d6:	701a      	strb	r2, [r3, #0]
	setBaudRate();
 80032d8:	f7ff fcca 	bl	8002c70 <setBaudRate>

	lcd_put_cur(0,0);
 80032dc:	2100      	movs	r1, #0
 80032de:	2000      	movs	r0, #0
 80032e0:	f7fd fd05 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Reset Successful");
 80032e4:	4808      	ldr	r0, [pc, #32]	; (8003308 <resetCAN+0x50>)
 80032e6:	f7fd fd67 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,15);
 80032ea:	210f      	movs	r1, #15
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fd fcfe 	bl	8000cee <lcd_put_cur>
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200063e0 	.word	0x200063e0
 80032fc:	20002310 	.word	0x20002310
 8003300:	20000234 	.word	0x20000234
 8003304:	2000015f 	.word	0x2000015f
 8003308:	08009c64 	.word	0x08009c64
 800330c:	00000000 	.word	0x00000000

08003310 <changeDelay>:

//change the number of delays between samples
void changeDelay(uint16_t direction){
 8003310:	b5b0      	push	{r4, r5, r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]

	if(direction==1)
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d12a      	bne.n	8003376 <changeDelay+0x66>
		sample_rate+=(sample_rate>=1000)?direction*1000:(sample_rate>=100)?direction*100:direction*10;//move sample rate in positive direction
 8003320:	4b9b      	ldr	r3, [pc, #620]	; (8003590 <changeDelay+0x280>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003328:	d308      	bcc.n	800333c <changeDelay+0x2c>
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	461a      	mov	r2, r3
 800332e:	0152      	lsls	r2, r2, #5
 8003330:	1ad2      	subs	r2, r2, r3
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	b29b      	uxth	r3, r3
 800333a:	e015      	b.n	8003368 <changeDelay+0x58>
 800333c:	4b94      	ldr	r3, [pc, #592]	; (8003590 <changeDelay+0x280>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	2b63      	cmp	r3, #99	; 0x63
 8003342:	d90b      	bls.n	800335c <changeDelay+0x4c>
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	461a      	mov	r2, r3
 8003348:	0092      	lsls	r2, r2, #2
 800334a:	4413      	add	r3, r2
 800334c:	461a      	mov	r2, r3
 800334e:	0091      	lsls	r1, r2, #2
 8003350:	461a      	mov	r2, r3
 8003352:	460b      	mov	r3, r1
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	b29b      	uxth	r3, r3
 800335a:	e005      	b.n	8003368 <changeDelay+0x58>
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	461a      	mov	r2, r3
 8003360:	0092      	lsls	r2, r2, #2
 8003362:	4413      	add	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	4a89      	ldr	r2, [pc, #548]	; (8003590 <changeDelay+0x280>)
 800336a:	8812      	ldrh	r2, [r2, #0]
 800336c:	4413      	add	r3, r2
 800336e:	b29a      	uxth	r2, r3
 8003370:	4b87      	ldr	r3, [pc, #540]	; (8003590 <changeDelay+0x280>)
 8003372:	801a      	strh	r2, [r3, #0]
 8003374:	e029      	b.n	80033ca <changeDelay+0xba>
	else
		sample_rate+=(sample_rate>1000)?direction*1000:(sample_rate>100)?direction*100:direction*10;//move sample rate in negative direction
 8003376:	4b86      	ldr	r3, [pc, #536]	; (8003590 <changeDelay+0x280>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800337e:	d908      	bls.n	8003392 <changeDelay+0x82>
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	461a      	mov	r2, r3
 8003384:	0152      	lsls	r2, r2, #5
 8003386:	1ad2      	subs	r2, r2, r3
 8003388:	0092      	lsls	r2, r2, #2
 800338a:	4413      	add	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	b29b      	uxth	r3, r3
 8003390:	e015      	b.n	80033be <changeDelay+0xae>
 8003392:	4b7f      	ldr	r3, [pc, #508]	; (8003590 <changeDelay+0x280>)
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d90b      	bls.n	80033b2 <changeDelay+0xa2>
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	461a      	mov	r2, r3
 800339e:	0092      	lsls	r2, r2, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	461a      	mov	r2, r3
 80033a4:	0091      	lsls	r1, r2, #2
 80033a6:	461a      	mov	r2, r3
 80033a8:	460b      	mov	r3, r1
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	e005      	b.n	80033be <changeDelay+0xae>
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	461a      	mov	r2, r3
 80033b6:	0092      	lsls	r2, r2, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	b29b      	uxth	r3, r3
 80033be:	4a74      	ldr	r2, [pc, #464]	; (8003590 <changeDelay+0x280>)
 80033c0:	8812      	ldrh	r2, [r2, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	4b72      	ldr	r3, [pc, #456]	; (8003590 <changeDelay+0x280>)
 80033c8:	801a      	strh	r2, [r3, #0]
	//sample rate cap
	if((analog_1_enabled && analog_2_enabled && analog_3_enabled && sample_rate > 3000/(log(PSC)/log(2)))||(((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))&& sample_rate>5000/(log(PSC)/log(2)))||(sample_rate>10000/(log(PSC)/log(2)))){
 80033ca:	4b72      	ldr	r3, [pc, #456]	; (8003594 <changeDelay+0x284>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d030      	beq.n	8003434 <changeDelay+0x124>
 80033d2:	4b71      	ldr	r3, [pc, #452]	; (8003598 <changeDelay+0x288>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d02c      	beq.n	8003434 <changeDelay+0x124>
 80033da:	4b70      	ldr	r3, [pc, #448]	; (800359c <changeDelay+0x28c>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d028      	beq.n	8003434 <changeDelay+0x124>
 80033e2:	4b6b      	ldr	r3, [pc, #428]	; (8003590 <changeDelay+0x280>)
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f89c 	bl	8000524 <__aeabi_i2d>
 80033ec:	4604      	mov	r4, r0
 80033ee:	460d      	mov	r5, r1
 80033f0:	4b6b      	ldr	r3, [pc, #428]	; (80035a0 <changeDelay+0x290>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd f885 	bl	8000504 <__aeabi_ui2d>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	ec43 2b10 	vmov	d0, r2, r3
 8003402:	f005 fa01 	bl	8008808 <log>
 8003406:	ec51 0b10 	vmov	r0, r1, d0
 800340a:	a359      	add	r3, pc, #356	; (adr r3, 8003570 <changeDelay+0x260>)
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	f7fd fa1c 	bl	800084c <__aeabi_ddiv>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	a157      	add	r1, pc, #348	; (adr r1, 8003578 <changeDelay+0x268>)
 800341a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800341e:	f7fd fa15 	bl	800084c <__aeabi_ddiv>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4620      	mov	r0, r4
 8003428:	4629      	mov	r1, r5
 800342a:	f7fd fb75 	bl	8000b18 <__aeabi_dcmpgt>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d169      	bne.n	8003508 <changeDelay+0x1f8>
 8003434:	4b57      	ldr	r3, [pc, #348]	; (8003594 <changeDelay+0x284>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <changeDelay+0x134>
 800343c:	4b56      	ldr	r3, [pc, #344]	; (8003598 <changeDelay+0x288>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10f      	bne.n	8003464 <changeDelay+0x154>
 8003444:	4b53      	ldr	r3, [pc, #332]	; (8003594 <changeDelay+0x284>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <changeDelay+0x144>
 800344c:	4b53      	ldr	r3, [pc, #332]	; (800359c <changeDelay+0x28c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <changeDelay+0x154>
 8003454:	4b50      	ldr	r3, [pc, #320]	; (8003598 <changeDelay+0x288>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02c      	beq.n	80034b6 <changeDelay+0x1a6>
 800345c:	4b4f      	ldr	r3, [pc, #316]	; (800359c <changeDelay+0x28c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d028      	beq.n	80034b6 <changeDelay+0x1a6>
 8003464:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <changeDelay+0x280>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f85b 	bl	8000524 <__aeabi_i2d>
 800346e:	4604      	mov	r4, r0
 8003470:	460d      	mov	r5, r1
 8003472:	4b4b      	ldr	r3, [pc, #300]	; (80035a0 <changeDelay+0x290>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd f844 	bl	8000504 <__aeabi_ui2d>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	ec43 2b10 	vmov	d0, r2, r3
 8003484:	f005 f9c0 	bl	8008808 <log>
 8003488:	ec51 0b10 	vmov	r0, r1, d0
 800348c:	a338      	add	r3, pc, #224	; (adr r3, 8003570 <changeDelay+0x260>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f7fd f9db 	bl	800084c <__aeabi_ddiv>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	a139      	add	r1, pc, #228	; (adr r1, 8003580 <changeDelay+0x270>)
 800349c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034a0:	f7fd f9d4 	bl	800084c <__aeabi_ddiv>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4620      	mov	r0, r4
 80034aa:	4629      	mov	r1, r5
 80034ac:	f7fd fb34 	bl	8000b18 <__aeabi_dcmpgt>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d128      	bne.n	8003508 <changeDelay+0x1f8>
 80034b6:	4b36      	ldr	r3, [pc, #216]	; (8003590 <changeDelay+0x280>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fd f832 	bl	8000524 <__aeabi_i2d>
 80034c0:	4604      	mov	r4, r0
 80034c2:	460d      	mov	r5, r1
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <changeDelay+0x290>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd f81b 	bl	8000504 <__aeabi_ui2d>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	ec43 2b10 	vmov	d0, r2, r3
 80034d6:	f005 f997 	bl	8008808 <log>
 80034da:	ec51 0b10 	vmov	r0, r1, d0
 80034de:	a324      	add	r3, pc, #144	; (adr r3, 8003570 <changeDelay+0x260>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fd f9b2 	bl	800084c <__aeabi_ddiv>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	a126      	add	r1, pc, #152	; (adr r1, 8003588 <changeDelay+0x278>)
 80034ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034f2:	f7fd f9ab 	bl	800084c <__aeabi_ddiv>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4620      	mov	r0, r4
 80034fc:	4629      	mov	r1, r5
 80034fe:	f7fd fb0b 	bl	8000b18 <__aeabi_dcmpgt>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <changeDelay+0x200>
		sample_rate=30;
 8003508:	4b21      	ldr	r3, [pc, #132]	; (8003590 <changeDelay+0x280>)
 800350a:	221e      	movs	r2, #30
 800350c:	801a      	strh	r2, [r3, #0]
 800350e:	e076      	b.n	80035fe <changeDelay+0x2ee>
	} else if(sample_rate<30){
 8003510:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <changeDelay+0x280>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	2b1d      	cmp	r3, #29
 8003516:	d872      	bhi.n	80035fe <changeDelay+0x2ee>
		sample_rate=(analog_1_enabled && analog_2_enabled && analog_3_enabled)?3000:((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))?5000:10000;
 8003518:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <changeDelay+0x284>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <changeDelay+0x220>
 8003520:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <changeDelay+0x288>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <changeDelay+0x220>
 8003528:	4b1c      	ldr	r3, [pc, #112]	; (800359c <changeDelay+0x28c>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d139      	bne.n	80035a4 <changeDelay+0x294>
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <changeDelay+0x284>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <changeDelay+0x230>
 8003538:	4b17      	ldr	r3, [pc, #92]	; (8003598 <changeDelay+0x288>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10f      	bne.n	8003560 <changeDelay+0x250>
 8003540:	4b14      	ldr	r3, [pc, #80]	; (8003594 <changeDelay+0x284>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <changeDelay+0x240>
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <changeDelay+0x28c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <changeDelay+0x250>
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <changeDelay+0x288>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d006      	beq.n	8003566 <changeDelay+0x256>
 8003558:	4b10      	ldr	r3, [pc, #64]	; (800359c <changeDelay+0x28c>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <changeDelay+0x256>
 8003560:	f241 3388 	movw	r3, #5000	; 0x1388
 8003564:	e020      	b.n	80035a8 <changeDelay+0x298>
 8003566:	f242 7310 	movw	r3, #10000	; 0x2710
 800356a:	e01d      	b.n	80035a8 <changeDelay+0x298>
 800356c:	f3af 8000 	nop.w
 8003570:	fefa39ef 	.word	0xfefa39ef
 8003574:	3fe62e42 	.word	0x3fe62e42
 8003578:	00000000 	.word	0x00000000
 800357c:	40a77000 	.word	0x40a77000
 8003580:	00000000 	.word	0x00000000
 8003584:	40b38800 	.word	0x40b38800
 8003588:	00000000 	.word	0x00000000
 800358c:	40c38800 	.word	0x40c38800
 8003590:	20000162 	.word	0x20000162
 8003594:	20000002 	.word	0x20000002
 8003598:	20000003 	.word	0x20000003
 800359c:	20000004 	.word	0x20000004
 80035a0:	20000000 	.word	0x20000000
 80035a4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80035a8:	4a25      	ldr	r2, [pc, #148]	; (8003640 <changeDelay+0x330>)
 80035aa:	8013      	strh	r3, [r2, #0]
		sample_rate/=(log(PSC)/log(2));
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <changeDelay+0x334>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc ffa7 	bl	8000504 <__aeabi_ui2d>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	ec43 2b10 	vmov	d0, r2, r3
 80035be:	f005 f923 	bl	8008808 <log>
 80035c2:	ec51 0b10 	vmov	r0, r1, d0
 80035c6:	a31c      	add	r3, pc, #112	; (adr r3, 8003638 <changeDelay+0x328>)
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f7fd f93e 	bl	800084c <__aeabi_ddiv>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4614      	mov	r4, r2
 80035d6:	461d      	mov	r5, r3
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <changeDelay+0x330>)
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffa1 	bl	8000524 <__aeabi_i2d>
 80035e2:	4622      	mov	r2, r4
 80035e4:	462b      	mov	r3, r5
 80035e6:	f7fd f931 	bl	800084c <__aeabi_ddiv>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
 80035f2:	f7fd fab1 	bl	8000b58 <__aeabi_d2uiz>
 80035f6:	4603      	mov	r3, r0
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	4b11      	ldr	r3, [pc, #68]	; (8003640 <changeDelay+0x330>)
 80035fc:	801a      	strh	r2, [r3, #0]
	}

	//display new delay in microseconds
	lcd_put_cur(0,8);
 80035fe:	2108      	movs	r1, #8
 8003600:	2000      	movs	r0, #0
 8003602:	f7fd fb74 	bl	8000cee <lcd_put_cur>
	char temp_arr[5];
	sprintf(temp_arr, "%05d", sample_rate);
 8003606:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <changeDelay+0x330>)
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	f107 0308 	add.w	r3, r7, #8
 8003610:	490d      	ldr	r1, [pc, #52]	; (8003648 <changeDelay+0x338>)
 8003612:	4618      	mov	r0, r3
 8003614:	f004 fc70 	bl	8007ef8 <siprintf>
	lcd_send_string(temp_arr);
 8003618:	f107 0308 	add.w	r3, r7, #8
 800361c:	4618      	mov	r0, r3
 800361e:	f7fd fbcb 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,13);
 8003622:	210d      	movs	r1, #13
 8003624:	2000      	movs	r0, #0
 8003626:	f7fd fb62 	bl	8000cee <lcd_put_cur>
}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bdb0      	pop	{r4, r5, r7, pc}
 8003632:	bf00      	nop
 8003634:	f3af 8000 	nop.w
 8003638:	fefa39ef 	.word	0xfefa39ef
 800363c:	3fe62e42 	.word	0x3fe62e42
 8003640:	20000162 	.word	0x20000162
 8003644:	20000000 	.word	0x20000000
 8003648:	08009bdc 	.word	0x08009bdc
 800364c:	00000000 	.word	0x00000000

08003650 <setDelay>:

//change the prescaler to achieve the desired baud rate and reinitialize the can bus
void setDelay(void){
 8003650:	b5b0      	push	{r4, r5, r7, lr}
 8003652:	af00      	add	r7, sp, #0
	//sore the nmber of delays in flash
	storeInFlash();
 8003654:	f000 fd72 	bl	800413c <storeInFlash>
	TIM3->ARR = (uint32_t)(((double)1/sample_rate)*1000000) - 1;//change CAN interrupt timer period
 8003658:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <setDelay+0xb8>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fc ff61 	bl	8000524 <__aeabi_i2d>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	f04f 0000 	mov.w	r0, #0
 800366a:	4928      	ldr	r1, [pc, #160]	; (800370c <setDelay+0xbc>)
 800366c:	f7fd f8ee 	bl	800084c <__aeabi_ddiv>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	a321      	add	r3, pc, #132	; (adr r3, 8003700 <setDelay+0xb0>)
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f7fc ffbb 	bl	80005f8 <__aeabi_dmul>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	f7fd fa65 	bl	8000b58 <__aeabi_d2uiz>
 800368e:	4603      	mov	r3, r0
 8003690:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <setDelay+0xc0>)
 8003692:	3b01      	subs	r3, #1
 8003694:	62d3      	str	r3, [r2, #44]	; 0x2c

	//save the delay in microseconds in menu
	memset(temp,0,17); // erase the temp array
 8003696:	2211      	movs	r2, #17
 8003698:	2100      	movs	r1, #0
 800369a:	481e      	ldr	r0, [pc, #120]	; (8003714 <setDelay+0xc4>)
 800369c:	f004 fc24 	bl	8007ee8 <memset>
	strncpy(temp, "Rate:   ",16);
 80036a0:	2210      	movs	r2, #16
 80036a2:	491d      	ldr	r1, [pc, #116]	; (8003718 <setDelay+0xc8>)
 80036a4:	481b      	ldr	r0, [pc, #108]	; (8003714 <setDelay+0xc4>)
 80036a6:	f004 fc8e 	bl	8007fc6 <strncpy>
	memset(char_arr, 0, 16);
 80036aa:	2210      	movs	r2, #16
 80036ac:	2100      	movs	r1, #0
 80036ae:	481b      	ldr	r0, [pc, #108]	; (800371c <setDelay+0xcc>)
 80036b0:	f004 fc1a 	bl	8007ee8 <memset>
	sprintf(char_arr, "%05d", sample_rate);
 80036b4:	4b14      	ldr	r3, [pc, #80]	; (8003708 <setDelay+0xb8>)
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	4919      	ldr	r1, [pc, #100]	; (8003720 <setDelay+0xd0>)
 80036bc:	4817      	ldr	r0, [pc, #92]	; (800371c <setDelay+0xcc>)
 80036be:	f004 fc1b 	bl	8007ef8 <siprintf>
	strcat(temp, char_arr);
 80036c2:	4916      	ldr	r1, [pc, #88]	; (800371c <setDelay+0xcc>)
 80036c4:	4813      	ldr	r0, [pc, #76]	; (8003714 <setDelay+0xc4>)
 80036c6:	f004 fc37 	bl	8007f38 <strcat>
	strlcat(temp,"sps",17);
 80036ca:	2211      	movs	r2, #17
 80036cc:	4915      	ldr	r1, [pc, #84]	; (8003724 <setDelay+0xd4>)
 80036ce:	4811      	ldr	r0, [pc, #68]	; (8003714 <setDelay+0xc4>)
 80036d0:	f004 fc41 	bl	8007f56 <strlcat>
	memcpy(main_menu[3],temp,17);
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <setDelay+0xd8>)
 80036d6:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <setDelay+0xc4>)
 80036d8:	3333      	adds	r3, #51	; 0x33
 80036da:	6815      	ldr	r5, [r2, #0]
 80036dc:	6854      	ldr	r4, [r2, #4]
 80036de:	6890      	ldr	r0, [r2, #8]
 80036e0:	68d1      	ldr	r1, [r2, #12]
 80036e2:	601d      	str	r5, [r3, #0]
 80036e4:	605c      	str	r4, [r3, #4]
 80036e6:	6098      	str	r0, [r3, #8]
 80036e8:	60d9      	str	r1, [r3, #12]
 80036ea:	7c12      	ldrb	r2, [r2, #16]
 80036ec:	741a      	strb	r2, [r3, #16]
	lcd_put_cur(0,0);
 80036ee:	2100      	movs	r1, #0
 80036f0:	2000      	movs	r0, #0
 80036f2:	f7fd fafc 	bl	8000cee <lcd_put_cur>
}
 80036f6:	bf00      	nop
 80036f8:	bdb0      	pop	{r4, r5, r7, pc}
 80036fa:	bf00      	nop
 80036fc:	f3af 8000 	nop.w
 8003700:	00000000 	.word	0x00000000
 8003704:	412e8480 	.word	0x412e8480
 8003708:	20000162 	.word	0x20000162
 800370c:	3ff00000 	.word	0x3ff00000
 8003710:	40000400 	.word	0x40000400
 8003714:	200022a4 	.word	0x200022a4
 8003718:	08009bd0 	.word	0x08009bd0
 800371c:	20006450 	.word	0x20006450
 8003720:	08009bdc 	.word	0x08009bdc
 8003724:	08009be4 	.word	0x08009be4
 8003728:	20000008 	.word	0x20000008

0800372c <zeroAnalog>:

//sets an offset for the specified analog value
void zeroAnalog(uint8_t analog_id){
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
	if(analog_id==0){//zero all
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10f      	bne.n	800375c <zeroAnalog+0x30>
		analog_1_offset = raw_1;
 800373c:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <zeroAnalog+0x84>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <zeroAnalog+0x88>)
 8003744:	601a      	str	r2, [r3, #0]
		analog_2_offset = raw_2;
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <zeroAnalog+0x8c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <zeroAnalog+0x90>)
 800374e:	601a      	str	r2, [r3, #0]
		analog_3_offset = raw_3;
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <zeroAnalog+0x94>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <zeroAnalog+0x98>)
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e019      	b.n	8003790 <zeroAnalog+0x64>
	}else if(analog_id==1)//zero 1
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d105      	bne.n	800376e <zeroAnalog+0x42>
		analog_1_offset = raw_1;
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <zeroAnalog+0x84>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <zeroAnalog+0x88>)
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e010      	b.n	8003790 <zeroAnalog+0x64>
	else if(analog_id==2)//zero 2
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d105      	bne.n	8003780 <zeroAnalog+0x54>
		analog_2_offset = raw_2;
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <zeroAnalog+0x8c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <zeroAnalog+0x90>)
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e007      	b.n	8003790 <zeroAnalog+0x64>
	else if(analog_id==3)//zero 3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	2b03      	cmp	r3, #3
 8003784:	d104      	bne.n	8003790 <zeroAnalog+0x64>
		analog_3_offset = raw_3;
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <zeroAnalog+0x94>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <zeroAnalog+0x98>)
 800378e:	601a      	str	r2, [r3, #0]

	lcd_put_cur(0,0);
 8003790:	2100      	movs	r1, #0
 8003792:	2000      	movs	r0, #0
 8003794:	f7fd faab 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Zero Successful ");
 8003798:	480b      	ldr	r0, [pc, #44]	; (80037c8 <zeroAnalog+0x9c>)
 800379a:	f7fd fb0d 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,15);
 800379e:	210f      	movs	r1, #15
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7fd faa4 	bl	8000cee <lcd_put_cur>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20002244 	.word	0x20002244
 80037b4:	200001fc 	.word	0x200001fc
 80037b8:	20006390 	.word	0x20006390
 80037bc:	20000200 	.word	0x20000200
 80037c0:	2000023c 	.word	0x2000023c
 80037c4:	20000204 	.word	0x20000204
 80037c8:	08009c78 	.word	0x08009c78

080037cc <resetOffsets>:

//resets all analog offsets to 0 and stores it in flash
void resetOffsets(void){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
	analog_1_offset=0;
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <resetOffsets+0x3c>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
	analog_2_offset=0;
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <resetOffsets+0x40>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
	analog_3_offset=0;
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <resetOffsets+0x44>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

	store_offsets=1;
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <resetOffsets+0x48>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]

	storeInFlash();
 80037e8:	f000 fca8 	bl	800413c <storeInFlash>

	lcd_put_cur(0,0);
 80037ec:	2100      	movs	r1, #0
 80037ee:	2000      	movs	r0, #0
 80037f0:	f7fd fa7d 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Reset Successful");
 80037f4:	4808      	ldr	r0, [pc, #32]	; (8003818 <resetOffsets+0x4c>)
 80037f6:	f7fd fadf 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,15);
 80037fa:	210f      	movs	r1, #15
 80037fc:	2000      	movs	r0, #0
 80037fe:	f7fd fa76 	bl	8000cee <lcd_put_cur>
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200001fc 	.word	0x200001fc
 800380c:	20000200 	.word	0x20000200
 8003810:	20000204 	.word	0x20000204
 8003814:	20000208 	.word	0x20000208
 8003818:	08009c64 	.word	0x08009c64
 800381c:	00000000 	.word	0x00000000

08003820 <toggleAnalog>:

//turns the analog device on or off
void toggleAnalog(uint8_t analog_id){
 8003820:	b5b0      	push	{r4, r5, r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
	uint8_t enabled=0;//bool to indicate if the change enabled the device
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
	//update state and display it
	lcd_put_cur(0,13);
 800382e:	210d      	movs	r1, #13
 8003830:	2000      	movs	r0, #0
 8003832:	f7fd fa5c 	bl	8000cee <lcd_put_cur>
	if(analog_id==1){
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d117      	bne.n	800386c <toggleAnalog+0x4c>
		if(analog_1_enabled)
 800383c:	4b96      	ldr	r3, [pc, #600]	; (8003a98 <toggleAnalog+0x278>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <toggleAnalog+0x2c>
			lcd_send_string("OFF");
 8003844:	4895      	ldr	r0, [pc, #596]	; (8003a9c <toggleAnalog+0x27c>)
 8003846:	f7fd fab7 	bl	8000db8 <lcd_send_string>
 800384a:	e004      	b.n	8003856 <toggleAnalog+0x36>
		else{
			lcd_send_string(" ON");
 800384c:	4894      	ldr	r0, [pc, #592]	; (8003aa0 <toggleAnalog+0x280>)
 800384e:	f7fd fab3 	bl	8000db8 <lcd_send_string>
			enabled=1;}
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
		analog_1_enabled=!analog_1_enabled;
 8003856:	4b90      	ldr	r3, [pc, #576]	; (8003a98 <toggleAnalog+0x278>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	4b8c      	ldr	r3, [pc, #560]	; (8003a98 <toggleAnalog+0x278>)
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e034      	b.n	80038d6 <toggleAnalog+0xb6>
	}else if(analog_id==2){
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d117      	bne.n	80038a2 <toggleAnalog+0x82>
		if(analog_2_enabled)
 8003872:	4b8c      	ldr	r3, [pc, #560]	; (8003aa4 <toggleAnalog+0x284>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <toggleAnalog+0x62>
			lcd_send_string("OFF");
 800387a:	4888      	ldr	r0, [pc, #544]	; (8003a9c <toggleAnalog+0x27c>)
 800387c:	f7fd fa9c 	bl	8000db8 <lcd_send_string>
 8003880:	e004      	b.n	800388c <toggleAnalog+0x6c>
		else{
			lcd_send_string(" ON");
 8003882:	4887      	ldr	r0, [pc, #540]	; (8003aa0 <toggleAnalog+0x280>)
 8003884:	f7fd fa98 	bl	8000db8 <lcd_send_string>
			enabled=1;}
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
		analog_2_enabled=!analog_2_enabled;
 800388c:	4b85      	ldr	r3, [pc, #532]	; (8003aa4 <toggleAnalog+0x284>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	4b81      	ldr	r3, [pc, #516]	; (8003aa4 <toggleAnalog+0x284>)
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e019      	b.n	80038d6 <toggleAnalog+0xb6>
	}else if(analog_id==3){
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d116      	bne.n	80038d6 <toggleAnalog+0xb6>
		if(analog_3_enabled)
 80038a8:	4b7f      	ldr	r3, [pc, #508]	; (8003aa8 <toggleAnalog+0x288>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <toggleAnalog+0x98>
			lcd_send_string("OFF");
 80038b0:	487a      	ldr	r0, [pc, #488]	; (8003a9c <toggleAnalog+0x27c>)
 80038b2:	f7fd fa81 	bl	8000db8 <lcd_send_string>
 80038b6:	e004      	b.n	80038c2 <toggleAnalog+0xa2>
		else{
			lcd_send_string(" ON");enabled=1;}
 80038b8:	4879      	ldr	r0, [pc, #484]	; (8003aa0 <toggleAnalog+0x280>)
 80038ba:	f7fd fa7d 	bl	8000db8 <lcd_send_string>
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
		analog_3_enabled=!analog_3_enabled;
 80038c2:	4b79      	ldr	r3, [pc, #484]	; (8003aa8 <toggleAnalog+0x288>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	4b75      	ldr	r3, [pc, #468]	; (8003aa8 <toggleAnalog+0x288>)
 80038d4:	701a      	strb	r2, [r3, #0]
	}

	//sample rate cap
	if(sample_rate<30||(analog_1_enabled && analog_2_enabled && analog_3_enabled && sample_rate > 3000/(log(PSC)/log(2)))||(((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))&& sample_rate>5000/(log(PSC)/log(2)))||(sample_rate>10000/(log(PSC)/log(2)))){
 80038d6:	4b75      	ldr	r3, [pc, #468]	; (8003aac <toggleAnalog+0x28c>)
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	2b1d      	cmp	r3, #29
 80038dc:	f240 809f 	bls.w	8003a1e <toggleAnalog+0x1fe>
 80038e0:	4b6d      	ldr	r3, [pc, #436]	; (8003a98 <toggleAnalog+0x278>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d030      	beq.n	800394a <toggleAnalog+0x12a>
 80038e8:	4b6e      	ldr	r3, [pc, #440]	; (8003aa4 <toggleAnalog+0x284>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02c      	beq.n	800394a <toggleAnalog+0x12a>
 80038f0:	4b6d      	ldr	r3, [pc, #436]	; (8003aa8 <toggleAnalog+0x288>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d028      	beq.n	800394a <toggleAnalog+0x12a>
 80038f8:	4b6c      	ldr	r3, [pc, #432]	; (8003aac <toggleAnalog+0x28c>)
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fc fe11 	bl	8000524 <__aeabi_i2d>
 8003902:	4604      	mov	r4, r0
 8003904:	460d      	mov	r5, r1
 8003906:	4b6a      	ldr	r3, [pc, #424]	; (8003ab0 <toggleAnalog+0x290>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f7fc fdfa 	bl	8000504 <__aeabi_ui2d>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	ec43 2b10 	vmov	d0, r2, r3
 8003918:	f004 ff76 	bl	8008808 <log>
 800391c:	ec51 0b10 	vmov	r0, r1, d0
 8003920:	a355      	add	r3, pc, #340	; (adr r3, 8003a78 <toggleAnalog+0x258>)
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f7fc ff91 	bl	800084c <__aeabi_ddiv>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	a154      	add	r1, pc, #336	; (adr r1, 8003a80 <toggleAnalog+0x260>)
 8003930:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003934:	f7fc ff8a 	bl	800084c <__aeabi_ddiv>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4620      	mov	r0, r4
 800393e:	4629      	mov	r1, r5
 8003940:	f7fd f8ea 	bl	8000b18 <__aeabi_dcmpgt>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d169      	bne.n	8003a1e <toggleAnalog+0x1fe>
 800394a:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <toggleAnalog+0x278>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <toggleAnalog+0x13a>
 8003952:	4b54      	ldr	r3, [pc, #336]	; (8003aa4 <toggleAnalog+0x284>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <toggleAnalog+0x15a>
 800395a:	4b4f      	ldr	r3, [pc, #316]	; (8003a98 <toggleAnalog+0x278>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <toggleAnalog+0x14a>
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <toggleAnalog+0x288>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d107      	bne.n	800397a <toggleAnalog+0x15a>
 800396a:	4b4e      	ldr	r3, [pc, #312]	; (8003aa4 <toggleAnalog+0x284>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d02c      	beq.n	80039cc <toggleAnalog+0x1ac>
 8003972:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <toggleAnalog+0x288>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d028      	beq.n	80039cc <toggleAnalog+0x1ac>
 800397a:	4b4c      	ldr	r3, [pc, #304]	; (8003aac <toggleAnalog+0x28c>)
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fc fdd0 	bl	8000524 <__aeabi_i2d>
 8003984:	4604      	mov	r4, r0
 8003986:	460d      	mov	r5, r1
 8003988:	4b49      	ldr	r3, [pc, #292]	; (8003ab0 <toggleAnalog+0x290>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fc fdb9 	bl	8000504 <__aeabi_ui2d>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	ec43 2b10 	vmov	d0, r2, r3
 800399a:	f004 ff35 	bl	8008808 <log>
 800399e:	ec51 0b10 	vmov	r0, r1, d0
 80039a2:	a335      	add	r3, pc, #212	; (adr r3, 8003a78 <toggleAnalog+0x258>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f7fc ff50 	bl	800084c <__aeabi_ddiv>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	a135      	add	r1, pc, #212	; (adr r1, 8003a88 <toggleAnalog+0x268>)
 80039b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039b6:	f7fc ff49 	bl	800084c <__aeabi_ddiv>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4620      	mov	r0, r4
 80039c0:	4629      	mov	r1, r5
 80039c2:	f7fd f8a9 	bl	8000b18 <__aeabi_dcmpgt>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d128      	bne.n	8003a1e <toggleAnalog+0x1fe>
 80039cc:	4b37      	ldr	r3, [pc, #220]	; (8003aac <toggleAnalog+0x28c>)
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fc fda7 	bl	8000524 <__aeabi_i2d>
 80039d6:	4604      	mov	r4, r0
 80039d8:	460d      	mov	r5, r1
 80039da:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <toggleAnalog+0x290>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fc fd90 	bl	8000504 <__aeabi_ui2d>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	ec43 2b10 	vmov	d0, r2, r3
 80039ec:	f004 ff0c 	bl	8008808 <log>
 80039f0:	ec51 0b10 	vmov	r0, r1, d0
 80039f4:	a320      	add	r3, pc, #128	; (adr r3, 8003a78 <toggleAnalog+0x258>)
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f7fc ff27 	bl	800084c <__aeabi_ddiv>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	a123      	add	r1, pc, #140	; (adr r1, 8003a90 <toggleAnalog+0x270>)
 8003a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a08:	f7fc ff20 	bl	800084c <__aeabi_ddiv>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4620      	mov	r0, r4
 8003a12:	4629      	mov	r1, r5
 8003a14:	f7fd f880 	bl	8000b18 <__aeabi_dcmpgt>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d079      	beq.n	8003b12 <toggleAnalog+0x2f2>
		sample_rate=(analog_1_enabled && analog_2_enabled && analog_3_enabled)?3000:((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))?5000:10000;
 8003a1e:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <toggleAnalog+0x278>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <toggleAnalog+0x216>
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <toggleAnalog+0x284>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <toggleAnalog+0x216>
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <toggleAnalog+0x288>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d13e      	bne.n	8003ab4 <toggleAnalog+0x294>
 8003a36:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <toggleAnalog+0x278>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <toggleAnalog+0x226>
 8003a3e:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <toggleAnalog+0x284>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10f      	bne.n	8003a66 <toggleAnalog+0x246>
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <toggleAnalog+0x278>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <toggleAnalog+0x236>
 8003a4e:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <toggleAnalog+0x288>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <toggleAnalog+0x246>
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <toggleAnalog+0x284>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d006      	beq.n	8003a6c <toggleAnalog+0x24c>
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <toggleAnalog+0x288>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <toggleAnalog+0x24c>
 8003a66:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a6a:	e025      	b.n	8003ab8 <toggleAnalog+0x298>
 8003a6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a70:	e022      	b.n	8003ab8 <toggleAnalog+0x298>
 8003a72:	bf00      	nop
 8003a74:	f3af 8000 	nop.w
 8003a78:	fefa39ef 	.word	0xfefa39ef
 8003a7c:	3fe62e42 	.word	0x3fe62e42
 8003a80:	00000000 	.word	0x00000000
 8003a84:	40a77000 	.word	0x40a77000
 8003a88:	00000000 	.word	0x00000000
 8003a8c:	40b38800 	.word	0x40b38800
 8003a90:	00000000 	.word	0x00000000
 8003a94:	40c38800 	.word	0x40c38800
 8003a98:	20000002 	.word	0x20000002
 8003a9c:	08009c8c 	.word	0x08009c8c
 8003aa0:	08009c90 	.word	0x08009c90
 8003aa4:	20000003 	.word	0x20000003
 8003aa8:	20000004 	.word	0x20000004
 8003aac:	20000162 	.word	0x20000162
 8003ab0:	20000000 	.word	0x20000000
 8003ab4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003ab8:	4a6b      	ldr	r2, [pc, #428]	; (8003c68 <toggleAnalog+0x448>)
 8003aba:	8013      	strh	r3, [r2, #0]
		sample_rate/=(log(PSC)/log(2));
 8003abc:	4b6b      	ldr	r3, [pc, #428]	; (8003c6c <toggleAnalog+0x44c>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fc fd1f 	bl	8000504 <__aeabi_ui2d>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	ec43 2b10 	vmov	d0, r2, r3
 8003ace:	f004 fe9b 	bl	8008808 <log>
 8003ad2:	ec51 0b10 	vmov	r0, r1, d0
 8003ad6:	a362      	add	r3, pc, #392	; (adr r3, 8003c60 <toggleAnalog+0x440>)
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f7fc feb6 	bl	800084c <__aeabi_ddiv>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4614      	mov	r4, r2
 8003ae6:	461d      	mov	r5, r3
 8003ae8:	4b5f      	ldr	r3, [pc, #380]	; (8003c68 <toggleAnalog+0x448>)
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fc fd19 	bl	8000524 <__aeabi_i2d>
 8003af2:	4622      	mov	r2, r4
 8003af4:	462b      	mov	r3, r5
 8003af6:	f7fc fea9 	bl	800084c <__aeabi_ddiv>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	f7fd f829 	bl	8000b58 <__aeabi_d2uiz>
 8003b06:	4603      	mov	r3, r0
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	4b57      	ldr	r3, [pc, #348]	; (8003c68 <toggleAnalog+0x448>)
 8003b0c:	801a      	strh	r2, [r3, #0]
		setDelay();
 8003b0e:	f7ff fd9f 	bl	8003650 <setDelay>
	}


	//store the state in the menu
	if(enabled){
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d03e      	beq.n	8003b96 <toggleAnalog+0x376>
		memset(temp,0,17); // erase the temp array
 8003b18:	2211      	movs	r2, #17
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4854      	ldr	r0, [pc, #336]	; (8003c70 <toggleAnalog+0x450>)
 8003b1e:	f004 f9e3 	bl	8007ee8 <memset>
		strncpy(temp, "Analog ",16);
 8003b22:	2210      	movs	r2, #16
 8003b24:	4953      	ldr	r1, [pc, #332]	; (8003c74 <toggleAnalog+0x454>)
 8003b26:	4852      	ldr	r0, [pc, #328]	; (8003c70 <toggleAnalog+0x450>)
 8003b28:	f004 fa4d 	bl	8007fc6 <strncpy>
		memset(char_arr, 0, 16);
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4851      	ldr	r0, [pc, #324]	; (8003c78 <toggleAnalog+0x458>)
 8003b32:	f004 f9d9 	bl	8007ee8 <memset>
		sprintf(char_arr, "%01d", analog_id);
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4950      	ldr	r1, [pc, #320]	; (8003c7c <toggleAnalog+0x45c>)
 8003b3c:	484e      	ldr	r0, [pc, #312]	; (8003c78 <toggleAnalog+0x458>)
 8003b3e:	f004 f9db 	bl	8007ef8 <siprintf>
		strcat(temp, char_arr);
 8003b42:	494d      	ldr	r1, [pc, #308]	; (8003c78 <toggleAnalog+0x458>)
 8003b44:	484a      	ldr	r0, [pc, #296]	; (8003c70 <toggleAnalog+0x450>)
 8003b46:	f004 f9f7 	bl	8007f38 <strcat>
		strcat(temp,":     ");
 8003b4a:	4849      	ldr	r0, [pc, #292]	; (8003c70 <toggleAnalog+0x450>)
 8003b4c:	f7fc fb40 	bl	80001d0 <strlen>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b46      	ldr	r3, [pc, #280]	; (8003c70 <toggleAnalog+0x450>)
 8003b56:	4413      	add	r3, r2
 8003b58:	4a49      	ldr	r2, [pc, #292]	; (8003c80 <toggleAnalog+0x460>)
 8003b5a:	6810      	ldr	r0, [r2, #0]
 8003b5c:	6018      	str	r0, [r3, #0]
 8003b5e:	8891      	ldrh	r1, [r2, #4]
 8003b60:	7992      	ldrb	r2, [r2, #6]
 8003b62:	8099      	strh	r1, [r3, #4]
 8003b64:	719a      	strb	r2, [r3, #6]
		strlcat(temp, "ON",17);
 8003b66:	2211      	movs	r2, #17
 8003b68:	4946      	ldr	r1, [pc, #280]	; (8003c84 <toggleAnalog+0x464>)
 8003b6a:	4841      	ldr	r0, [pc, #260]	; (8003c70 <toggleAnalog+0x450>)
 8003b6c:	f004 f9f3 	bl	8007f56 <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	1d1a      	adds	r2, r3, #4
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	4413      	add	r3, r2
 8003b7a:	4a43      	ldr	r2, [pc, #268]	; (8003c88 <toggleAnalog+0x468>)
 8003b7c:	4413      	add	r3, r2
 8003b7e:	4a3c      	ldr	r2, [pc, #240]	; (8003c70 <toggleAnalog+0x450>)
 8003b80:	6815      	ldr	r5, [r2, #0]
 8003b82:	6854      	ldr	r4, [r2, #4]
 8003b84:	6890      	ldr	r0, [r2, #8]
 8003b86:	68d1      	ldr	r1, [r2, #12]
 8003b88:	601d      	str	r5, [r3, #0]
 8003b8a:	605c      	str	r4, [r3, #4]
 8003b8c:	6098      	str	r0, [r3, #8]
 8003b8e:	60d9      	str	r1, [r3, #12]
 8003b90:	7c12      	ldrb	r2, [r2, #16]
 8003b92:	741a      	strb	r2, [r3, #16]
 8003b94:	e03b      	b.n	8003c0e <toggleAnalog+0x3ee>
	}else{
		memset(temp,0,17); // erase the temp array
 8003b96:	2211      	movs	r2, #17
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4835      	ldr	r0, [pc, #212]	; (8003c70 <toggleAnalog+0x450>)
 8003b9c:	f004 f9a4 	bl	8007ee8 <memset>
		strncpy(temp, "Analog ",16);
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	4934      	ldr	r1, [pc, #208]	; (8003c74 <toggleAnalog+0x454>)
 8003ba4:	4832      	ldr	r0, [pc, #200]	; (8003c70 <toggleAnalog+0x450>)
 8003ba6:	f004 fa0e 	bl	8007fc6 <strncpy>
		memset(char_arr, 0, 16);
 8003baa:	2210      	movs	r2, #16
 8003bac:	2100      	movs	r1, #0
 8003bae:	4832      	ldr	r0, [pc, #200]	; (8003c78 <toggleAnalog+0x458>)
 8003bb0:	f004 f99a 	bl	8007ee8 <memset>
		sprintf(char_arr, "%01d", analog_id);
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4930      	ldr	r1, [pc, #192]	; (8003c7c <toggleAnalog+0x45c>)
 8003bba:	482f      	ldr	r0, [pc, #188]	; (8003c78 <toggleAnalog+0x458>)
 8003bbc:	f004 f99c 	bl	8007ef8 <siprintf>
		strcat(temp, char_arr);
 8003bc0:	492d      	ldr	r1, [pc, #180]	; (8003c78 <toggleAnalog+0x458>)
 8003bc2:	482b      	ldr	r0, [pc, #172]	; (8003c70 <toggleAnalog+0x450>)
 8003bc4:	f004 f9b8 	bl	8007f38 <strcat>
		strcat(temp,":    ");
 8003bc8:	4829      	ldr	r0, [pc, #164]	; (8003c70 <toggleAnalog+0x450>)
 8003bca:	f7fc fb01 	bl	80001d0 <strlen>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <toggleAnalog+0x450>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4a2d      	ldr	r2, [pc, #180]	; (8003c8c <toggleAnalog+0x46c>)
 8003bd8:	6810      	ldr	r0, [r2, #0]
 8003bda:	6018      	str	r0, [r3, #0]
 8003bdc:	8892      	ldrh	r2, [r2, #4]
 8003bde:	809a      	strh	r2, [r3, #4]
		strlcat(temp, "OFF",17);
 8003be0:	2211      	movs	r2, #17
 8003be2:	492b      	ldr	r1, [pc, #172]	; (8003c90 <toggleAnalog+0x470>)
 8003be4:	4822      	ldr	r0, [pc, #136]	; (8003c70 <toggleAnalog+0x450>)
 8003be6:	f004 f9b6 	bl	8007f56 <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);}
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	1d1a      	adds	r2, r3, #4
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	4a24      	ldr	r2, [pc, #144]	; (8003c88 <toggleAnalog+0x468>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <toggleAnalog+0x450>)
 8003bfa:	6815      	ldr	r5, [r2, #0]
 8003bfc:	6854      	ldr	r4, [r2, #4]
 8003bfe:	6890      	ldr	r0, [r2, #8]
 8003c00:	68d1      	ldr	r1, [r2, #12]
 8003c02:	601d      	str	r5, [r3, #0]
 8003c04:	605c      	str	r4, [r3, #4]
 8003c06:	6098      	str	r0, [r3, #8]
 8003c08:	60d9      	str	r1, [r3, #12]
 8003c0a:	7c12      	ldrb	r2, [r2, #16]
 8003c0c:	741a      	strb	r2, [r3, #16]

	//invert values so the default is on after erasing memory
	analog_enable_arr[0]=!analog_1_enabled;
 8003c0e:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <toggleAnalog+0x474>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <toggleAnalog+0x478>)
 8003c20:	701a      	strb	r2, [r3, #0]
	analog_enable_arr[1]=!analog_2_enabled;
 8003c22:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <toggleAnalog+0x47c>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <toggleAnalog+0x478>)
 8003c34:	705a      	strb	r2, [r3, #1]
	analog_enable_arr[2]=!analog_3_enabled;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <toggleAnalog+0x480>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2301      	moveq	r3, #1
 8003c40:	2300      	movne	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <toggleAnalog+0x478>)
 8003c48:	709a      	strb	r2, [r3, #2]

	storeInFlash();
 8003c4a:	f000 fa77 	bl	800413c <storeInFlash>

	//reset cursor on display
	lcd_put_cur(0,0);
 8003c4e:	2100      	movs	r1, #0
 8003c50:	2000      	movs	r0, #0
 8003c52:	f7fd f84c 	bl	8000cee <lcd_put_cur>

}
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	fefa39ef 	.word	0xfefa39ef
 8003c64:	3fe62e42 	.word	0x3fe62e42
 8003c68:	20000162 	.word	0x20000162
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	200022a4 	.word	0x200022a4
 8003c74:	08009c94 	.word	0x08009c94
 8003c78:	20006450 	.word	0x20006450
 8003c7c:	08009c9c 	.word	0x08009c9c
 8003c80:	08009ca4 	.word	0x08009ca4
 8003c84:	08009cac 	.word	0x08009cac
 8003c88:	200000b4 	.word	0x200000b4
 8003c8c:	08009cb0 	.word	0x08009cb0
 8003c90:	08009c8c 	.word	0x08009c8c
 8003c94:	20000002 	.word	0x20000002
 8003c98:	20006398 	.word	0x20006398
 8003c9c:	20000003 	.word	0x20000003
 8003ca0:	20000004 	.word	0x20000004

08003ca4 <displayValues>:

//display the analog values on the display
void displayValues(void){
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
	updating_display=1;
 8003ca8:	4bbb      	ldr	r3, [pc, #748]	; (8003f98 <displayValues+0x2f4>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
	lcd_put_cur(0,0);
 8003cae:	2100      	movs	r1, #0
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f7fd f81c 	bl	8000cee <lcd_put_cur>
	if(analog_1_enabled&&analog_2_enabled&&analog_3_enabled){//all 3 devices are enabled
 8003cb6:	4bb9      	ldr	r3, [pc, #740]	; (8003f9c <displayValues+0x2f8>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80a5 	beq.w	8003e0a <displayValues+0x166>
 8003cc0:	4bb7      	ldr	r3, [pc, #732]	; (8003fa0 <displayValues+0x2fc>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80a0 	beq.w	8003e0a <displayValues+0x166>
 8003cca:	4bb6      	ldr	r3, [pc, #728]	; (8003fa4 <displayValues+0x300>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 809b 	beq.w	8003e0a <displayValues+0x166>
		if(display_scroll==0){//position 1
 8003cd4:	4bb4      	ldr	r3, [pc, #720]	; (8003fa8 <displayValues+0x304>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d130      	bne.n	8003d3e <displayValues+0x9a>
			lcd_send_string("Analog 1:       ");
 8003cdc:	48b3      	ldr	r0, [pc, #716]	; (8003fac <displayValues+0x308>)
 8003cde:	f7fd f86b 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003ce2:	210b      	movs	r1, #11
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f7fd f802 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003cea:	2210      	movs	r2, #16
 8003cec:	2100      	movs	r1, #0
 8003cee:	48b0      	ldr	r0, [pc, #704]	; (8003fb0 <displayValues+0x30c>)
 8003cf0:	f004 f8fa 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_1_avg);
 8003cf4:	4baf      	ldr	r3, [pc, #700]	; (8003fb4 <displayValues+0x310>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	49af      	ldr	r1, [pc, #700]	; (8003fb8 <displayValues+0x314>)
 8003cfc:	48ac      	ldr	r0, [pc, #688]	; (8003fb0 <displayValues+0x30c>)
 8003cfe:	f004 f8fb 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003d02:	48ab      	ldr	r0, [pc, #684]	; (8003fb0 <displayValues+0x30c>)
 8003d04:	f7fd f858 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003d08:	2100      	movs	r1, #0
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	f7fc ffef 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 8003d10:	48aa      	ldr	r0, [pc, #680]	; (8003fbc <displayValues+0x318>)
 8003d12:	f7fd f851 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,11);
 8003d16:	210b      	movs	r1, #11
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f7fc ffe8 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003d1e:	2210      	movs	r2, #16
 8003d20:	2100      	movs	r1, #0
 8003d22:	48a3      	ldr	r0, [pc, #652]	; (8003fb0 <displayValues+0x30c>)
 8003d24:	f004 f8e0 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_2_avg);
 8003d28:	4ba5      	ldr	r3, [pc, #660]	; (8003fc0 <displayValues+0x31c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	49a2      	ldr	r1, [pc, #648]	; (8003fb8 <displayValues+0x314>)
 8003d30:	489f      	ldr	r0, [pc, #636]	; (8003fb0 <displayValues+0x30c>)
 8003d32:	f004 f8e1 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003d36:	489e      	ldr	r0, [pc, #632]	; (8003fb0 <displayValues+0x30c>)
 8003d38:	f7fd f83e 	bl	8000db8 <lcd_send_string>
		if(display_scroll==0){//position 1
 8003d3c:	e126      	b.n	8003f8c <displayValues+0x2e8>
		}else if(display_scroll==1){//position 2
 8003d3e:	4b9a      	ldr	r3, [pc, #616]	; (8003fa8 <displayValues+0x304>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d130      	bne.n	8003da8 <displayValues+0x104>
			lcd_send_string("Analog 2:       ");
 8003d46:	489d      	ldr	r0, [pc, #628]	; (8003fbc <displayValues+0x318>)
 8003d48:	f7fd f836 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003d4c:	210b      	movs	r1, #11
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f7fc ffcd 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003d54:	2210      	movs	r2, #16
 8003d56:	2100      	movs	r1, #0
 8003d58:	4895      	ldr	r0, [pc, #596]	; (8003fb0 <displayValues+0x30c>)
 8003d5a:	f004 f8c5 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_2_avg);
 8003d5e:	4b98      	ldr	r3, [pc, #608]	; (8003fc0 <displayValues+0x31c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	4994      	ldr	r1, [pc, #592]	; (8003fb8 <displayValues+0x314>)
 8003d66:	4892      	ldr	r0, [pc, #584]	; (8003fb0 <displayValues+0x30c>)
 8003d68:	f004 f8c6 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003d6c:	4890      	ldr	r0, [pc, #576]	; (8003fb0 <displayValues+0x30c>)
 8003d6e:	f7fd f823 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003d72:	2100      	movs	r1, #0
 8003d74:	2001      	movs	r0, #1
 8003d76:	f7fc ffba 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 8003d7a:	4892      	ldr	r0, [pc, #584]	; (8003fc4 <displayValues+0x320>)
 8003d7c:	f7fd f81c 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,11);
 8003d80:	210b      	movs	r1, #11
 8003d82:	2001      	movs	r0, #1
 8003d84:	f7fc ffb3 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003d88:	2210      	movs	r2, #16
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4888      	ldr	r0, [pc, #544]	; (8003fb0 <displayValues+0x30c>)
 8003d8e:	f004 f8ab 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_3_avg);
 8003d92:	4b8d      	ldr	r3, [pc, #564]	; (8003fc8 <displayValues+0x324>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4987      	ldr	r1, [pc, #540]	; (8003fb8 <displayValues+0x314>)
 8003d9a:	4885      	ldr	r0, [pc, #532]	; (8003fb0 <displayValues+0x30c>)
 8003d9c:	f004 f8ac 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003da0:	4883      	ldr	r0, [pc, #524]	; (8003fb0 <displayValues+0x30c>)
 8003da2:	f7fd f809 	bl	8000db8 <lcd_send_string>
		if(display_scroll==0){//position 1
 8003da6:	e0f1      	b.n	8003f8c <displayValues+0x2e8>
		}else {//position 3
			lcd_send_string("Analog 3:       ");
 8003da8:	4886      	ldr	r0, [pc, #536]	; (8003fc4 <displayValues+0x320>)
 8003daa:	f7fd f805 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003dae:	210b      	movs	r1, #11
 8003db0:	2000      	movs	r0, #0
 8003db2:	f7fc ff9c 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003db6:	2210      	movs	r2, #16
 8003db8:	2100      	movs	r1, #0
 8003dba:	487d      	ldr	r0, [pc, #500]	; (8003fb0 <displayValues+0x30c>)
 8003dbc:	f004 f894 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_3_avg);
 8003dc0:	4b81      	ldr	r3, [pc, #516]	; (8003fc8 <displayValues+0x324>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	497c      	ldr	r1, [pc, #496]	; (8003fb8 <displayValues+0x314>)
 8003dc8:	4879      	ldr	r0, [pc, #484]	; (8003fb0 <displayValues+0x30c>)
 8003dca:	f004 f895 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003dce:	4878      	ldr	r0, [pc, #480]	; (8003fb0 <displayValues+0x30c>)
 8003dd0:	f7fc fff2 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	f7fc ff89 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Analog 1:       ");
 8003ddc:	4873      	ldr	r0, [pc, #460]	; (8003fac <displayValues+0x308>)
 8003dde:	f7fc ffeb 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,11);
 8003de2:	210b      	movs	r1, #11
 8003de4:	2001      	movs	r0, #1
 8003de6:	f7fc ff82 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003dea:	2210      	movs	r2, #16
 8003dec:	2100      	movs	r1, #0
 8003dee:	4870      	ldr	r0, [pc, #448]	; (8003fb0 <displayValues+0x30c>)
 8003df0:	f004 f87a 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_1_avg);
 8003df4:	4b6f      	ldr	r3, [pc, #444]	; (8003fb4 <displayValues+0x310>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	496f      	ldr	r1, [pc, #444]	; (8003fb8 <displayValues+0x314>)
 8003dfc:	486c      	ldr	r0, [pc, #432]	; (8003fb0 <displayValues+0x30c>)
 8003dfe:	f004 f87b 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003e02:	486b      	ldr	r0, [pc, #428]	; (8003fb0 <displayValues+0x30c>)
 8003e04:	f7fc ffd8 	bl	8000db8 <lcd_send_string>
		if(display_scroll==0){//position 1
 8003e08:	e0c0      	b.n	8003f8c <displayValues+0x2e8>
		}

	}else{//less than 3 are enabled
		if(analog_1_enabled){//display device 1 on first line
 8003e0a:	4b64      	ldr	r3, [pc, #400]	; (8003f9c <displayValues+0x2f8>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01d      	beq.n	8003e4e <displayValues+0x1aa>
			lcd_send_string("Analog 1:       ");
 8003e12:	4866      	ldr	r0, [pc, #408]	; (8003fac <displayValues+0x308>)
 8003e14:	f7fc ffd0 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003e18:	210b      	movs	r1, #11
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f7fc ff67 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003e20:	2210      	movs	r2, #16
 8003e22:	2100      	movs	r1, #0
 8003e24:	4862      	ldr	r0, [pc, #392]	; (8003fb0 <displayValues+0x30c>)
 8003e26:	f004 f85f 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_1_avg);
 8003e2a:	4b62      	ldr	r3, [pc, #392]	; (8003fb4 <displayValues+0x310>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4961      	ldr	r1, [pc, #388]	; (8003fb8 <displayValues+0x314>)
 8003e32:	485f      	ldr	r0, [pc, #380]	; (8003fb0 <displayValues+0x30c>)
 8003e34:	f004 f860 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003e38:	485d      	ldr	r0, [pc, #372]	; (8003fb0 <displayValues+0x30c>)
 8003e3a:	f7fc ffbd 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	2001      	movs	r0, #1
 8003e42:	f7fc ff54 	bl	8000cee <lcd_put_cur>
			lcd_send_string("                ");
 8003e46:	4861      	ldr	r0, [pc, #388]	; (8003fcc <displayValues+0x328>)
 8003e48:	f7fc ffb6 	bl	8000db8 <lcd_send_string>
 8003e4c:	e051      	b.n	8003ef2 <displayValues+0x24e>
		} else if(analog_2_enabled){//display device 2 on first line
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <displayValues+0x2fc>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d01d      	beq.n	8003e92 <displayValues+0x1ee>
			lcd_send_string("Analog 2:       ");
 8003e56:	4859      	ldr	r0, [pc, #356]	; (8003fbc <displayValues+0x318>)
 8003e58:	f7fc ffae 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003e5c:	210b      	movs	r1, #11
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f7fc ff45 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003e64:	2210      	movs	r2, #16
 8003e66:	2100      	movs	r1, #0
 8003e68:	4851      	ldr	r0, [pc, #324]	; (8003fb0 <displayValues+0x30c>)
 8003e6a:	f004 f83d 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_2_avg);
 8003e6e:	4b54      	ldr	r3, [pc, #336]	; (8003fc0 <displayValues+0x31c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	4950      	ldr	r1, [pc, #320]	; (8003fb8 <displayValues+0x314>)
 8003e76:	484e      	ldr	r0, [pc, #312]	; (8003fb0 <displayValues+0x30c>)
 8003e78:	f004 f83e 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003e7c:	484c      	ldr	r0, [pc, #304]	; (8003fb0 <displayValues+0x30c>)
 8003e7e:	f7fc ff9b 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003e82:	2100      	movs	r1, #0
 8003e84:	2001      	movs	r0, #1
 8003e86:	f7fc ff32 	bl	8000cee <lcd_put_cur>
			lcd_send_string("                ");
 8003e8a:	4850      	ldr	r0, [pc, #320]	; (8003fcc <displayValues+0x328>)
 8003e8c:	f7fc ff94 	bl	8000db8 <lcd_send_string>
 8003e90:	e02f      	b.n	8003ef2 <displayValues+0x24e>
		} else if(analog_3_enabled){//display device 3 on first line
 8003e92:	4b44      	ldr	r3, [pc, #272]	; (8003fa4 <displayValues+0x300>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01d      	beq.n	8003ed6 <displayValues+0x232>
			lcd_send_string("Analog 3:       ");
 8003e9a:	484a      	ldr	r0, [pc, #296]	; (8003fc4 <displayValues+0x320>)
 8003e9c:	f7fc ff8c 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003ea0:	210b      	movs	r1, #11
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f7fc ff23 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4840      	ldr	r0, [pc, #256]	; (8003fb0 <displayValues+0x30c>)
 8003eae:	f004 f81b 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_3_avg);
 8003eb2:	4b45      	ldr	r3, [pc, #276]	; (8003fc8 <displayValues+0x324>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	493f      	ldr	r1, [pc, #252]	; (8003fb8 <displayValues+0x314>)
 8003eba:	483d      	ldr	r0, [pc, #244]	; (8003fb0 <displayValues+0x30c>)
 8003ebc:	f004 f81c 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003ec0:	483b      	ldr	r0, [pc, #236]	; (8003fb0 <displayValues+0x30c>)
 8003ec2:	f7fc ff79 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	2001      	movs	r0, #1
 8003eca:	f7fc ff10 	bl	8000cee <lcd_put_cur>
			lcd_send_string("                ");
 8003ece:	483f      	ldr	r0, [pc, #252]	; (8003fcc <displayValues+0x328>)
 8003ed0:	f7fc ff72 	bl	8000db8 <lcd_send_string>
 8003ed4:	e00d      	b.n	8003ef2 <displayValues+0x24e>
		} else{//display no devices enabled
			lcd_send_string("No Devices      ");
 8003ed6:	483e      	ldr	r0, [pc, #248]	; (8003fd0 <displayValues+0x32c>)
 8003ed8:	f7fc ff6e 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003edc:	2100      	movs	r1, #0
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f7fc ff05 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Enabled         ");
 8003ee4:	483b      	ldr	r0, [pc, #236]	; (8003fd4 <displayValues+0x330>)
 8003ee6:	f7fc ff67 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,15);
 8003eea:	210f      	movs	r1, #15
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7fc fefe 	bl	8000cee <lcd_put_cur>
		}

		if(analog_1_enabled&&analog_2_enabled){//display device 2 on second line
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <displayValues+0x2f8>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01e      	beq.n	8003f38 <displayValues+0x294>
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <displayValues+0x2fc>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01a      	beq.n	8003f38 <displayValues+0x294>
			lcd_put_cur(1,0);
 8003f02:	2100      	movs	r1, #0
 8003f04:	2001      	movs	r0, #1
 8003f06:	f7fc fef2 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 8003f0a:	482c      	ldr	r0, [pc, #176]	; (8003fbc <displayValues+0x318>)
 8003f0c:	f7fc ff54 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,11);
 8003f10:	210b      	movs	r1, #11
 8003f12:	2001      	movs	r0, #1
 8003f14:	f7fc feeb 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003f18:	2210      	movs	r2, #16
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4824      	ldr	r0, [pc, #144]	; (8003fb0 <displayValues+0x30c>)
 8003f1e:	f003 ffe3 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_2_avg);
 8003f22:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <displayValues+0x31c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	4923      	ldr	r1, [pc, #140]	; (8003fb8 <displayValues+0x314>)
 8003f2a:	4821      	ldr	r0, [pc, #132]	; (8003fb0 <displayValues+0x30c>)
 8003f2c:	f003 ffe4 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003f30:	481f      	ldr	r0, [pc, #124]	; (8003fb0 <displayValues+0x30c>)
 8003f32:	f7fc ff41 	bl	8000db8 <lcd_send_string>
 8003f36:	e029      	b.n	8003f8c <displayValues+0x2e8>
		} else if((analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled)){//display device 3 on second line
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <displayValues+0x2f8>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <displayValues+0x2a4>
 8003f40:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <displayValues+0x300>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d107      	bne.n	8003f58 <displayValues+0x2b4>
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <displayValues+0x2fc>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01d      	beq.n	8003f8c <displayValues+0x2e8>
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <displayValues+0x300>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d019      	beq.n	8003f8c <displayValues+0x2e8>
			lcd_put_cur(1,0);
 8003f58:	2100      	movs	r1, #0
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f7fc fec7 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 8003f60:	4818      	ldr	r0, [pc, #96]	; (8003fc4 <displayValues+0x320>)
 8003f62:	f7fc ff29 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,11);
 8003f66:	210b      	movs	r1, #11
 8003f68:	2001      	movs	r0, #1
 8003f6a:	f7fc fec0 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003f6e:	2210      	movs	r2, #16
 8003f70:	2100      	movs	r1, #0
 8003f72:	480f      	ldr	r0, [pc, #60]	; (8003fb0 <displayValues+0x30c>)
 8003f74:	f003 ffb8 	bl	8007ee8 <memset>
			sprintf(char_arr, "%05d", a_in_3_avg);
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <displayValues+0x324>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <displayValues+0x314>)
 8003f80:	480b      	ldr	r0, [pc, #44]	; (8003fb0 <displayValues+0x30c>)
 8003f82:	f003 ffb9 	bl	8007ef8 <siprintf>
			lcd_send_string(char_arr);
 8003f86:	480a      	ldr	r0, [pc, #40]	; (8003fb0 <displayValues+0x30c>)
 8003f88:	f7fc ff16 	bl	8000db8 <lcd_send_string>
		}
	}
	updating_display=0;
 8003f8c:	4b02      	ldr	r3, [pc, #8]	; (8003f98 <displayValues+0x2f4>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000226 	.word	0x20000226
 8003f9c:	20000002 	.word	0x20000002
 8003fa0:	20000003 	.word	0x20000003
 8003fa4:	20000004 	.word	0x20000004
 8003fa8:	2000021a 	.word	0x2000021a
 8003fac:	08009cb8 	.word	0x08009cb8
 8003fb0:	20006450 	.word	0x20006450
 8003fb4:	20006460 	.word	0x20006460
 8003fb8:	08009bdc 	.word	0x08009bdc
 8003fbc:	08009ccc 	.word	0x08009ccc
 8003fc0:	200022b8 	.word	0x200022b8
 8003fc4:	08009ce0 	.word	0x08009ce0
 8003fc8:	20006448 	.word	0x20006448
 8003fcc:	08009cf4 	.word	0x08009cf4
 8003fd0:	08009d08 	.word	0x08009d08
 8003fd4:	08009d1c 	.word	0x08009d1c

08003fd8 <bytesToWord>:


//convert a 4 byte array to a word (unsigned long int)
uint32_t bytesToWord(uint8_t* arr) {
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	uint32_t value = arr[0] & 0xFF;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]
	value |= (arr[1] << 8) & 0xFFFF;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
	value |= (arr[2] << 16) & 0xFFFFFF;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
	value |= (arr[3] << 24) & 0xFFFFFFFF;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3303      	adds	r3, #3
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	461a      	mov	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
	return value;
 8004018:	68fb      	ldr	r3, [r7, #12]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <wordToBytes>:

//convert a word (unsigned long int) to a 4 byte array
uint8_t* wordToBytes(uint32_t value){
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	byte_arr[3] = (value >> 24) & 0xFF;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0e1b      	lsrs	r3, r3, #24
 8004034:	b2da      	uxtb	r2, r3
 8004036:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <wordToBytes+0x3c>)
 8004038:	70da      	strb	r2, [r3, #3]
	byte_arr[2] = (value >> 16) & 0xFF;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	b2da      	uxtb	r2, r3
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <wordToBytes+0x3c>)
 8004042:	709a      	strb	r2, [r3, #2]
	byte_arr[1] = (value >> 8) & 0xFF;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	b2da      	uxtb	r2, r3
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <wordToBytes+0x3c>)
 800404c:	705a      	strb	r2, [r3, #1]
	byte_arr[0] = value & 0xFF;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <wordToBytes+0x3c>)
 8004054:	701a      	strb	r2, [r3, #0]
	return byte_arr;
 8004056:	4b03      	ldr	r3, [pc, #12]	; (8004064 <wordToBytes+0x3c>)
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	200064a8 	.word	0x200064a8

08004068 <calibrateSDADC>:

//calibrate the given sdadc for the given channel
void calibrateSDADC(SDADC_HandleTypeDef* adc, uint32_t channel){
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
	//Display Calibrating
	lcd_put_cur(0,0);
 8004072:	2100      	movs	r1, #0
 8004074:	2000      	movs	r0, #0
 8004076:	f7fc fe3a 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Calibrating ADC ");
 800407a:	482b      	ldr	r0, [pc, #172]	; (8004128 <calibrateSDADC+0xc0>)
 800407c:	f7fc fe9c 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(1,0);
 8004080:	2100      	movs	r1, #0
 8004082:	2001      	movs	r0, #1
 8004084:	f7fc fe33 	bl	8000cee <lcd_put_cur>
	lcd_send_string("                ");
 8004088:	4828      	ldr	r0, [pc, #160]	; (800412c <calibrateSDADC+0xc4>)
 800408a:	f7fc fe95 	bl	8000db8 <lcd_send_string>

	//Run Calibration Sequence
	HAL_SDADC_AssociateChannelConfig(adc, channel, SDADC_CONF_INDEX_0);
 800408e:	2200      	movs	r2, #0
 8004090:	6839      	ldr	r1, [r7, #0]
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f002 fed0 	bl	8006e38 <HAL_SDADC_AssociateChannelConfig>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_OFF);
 8004098:	2200      	movs	r2, #0
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f002 ff1b 	bl	8006ed8 <HAL_SDADC_ConfigChannel>
	HAL_SDADC_CalibrationStart(adc, SDADC_CALIBRATION_SEQ_1);
 80040a2:	2100      	movs	r1, #0
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f002 fffb 	bl	80070a0 <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(adc, HAL_MAX_DELAY);
 80040aa:	f04f 31ff 	mov.w	r1, #4294967295
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f003 f836 	bl	8007120 <HAL_SDADC_PollForCalibEvent>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_ON);
 80040b4:	2201      	movs	r2, #1
 80040b6:	6839      	ldr	r1, [r7, #0]
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f002 ff0d 	bl	8006ed8 <HAL_SDADC_ConfigChannel>

	//Display Menu
	lcd_put_cur(0,0);
 80040be:	2100      	movs	r1, #0
 80040c0:	2000      	movs	r0, #0
 80040c2:	f7fc fe14 	bl	8000cee <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80040c6:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <calibrateSDADC+0xc8>)
 80040c8:	f993 3000 	ldrsb.w	r3, [r3]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	4413      	add	r3, r2
 80040d4:	4a17      	ldr	r2, [pc, #92]	; (8004134 <calibrateSDADC+0xcc>)
 80040d6:	4413      	add	r3, r2
 80040d8:	2210      	movs	r2, #16
 80040da:	4619      	mov	r1, r3
 80040dc:	4816      	ldr	r0, [pc, #88]	; (8004138 <calibrateSDADC+0xd0>)
 80040de:	f003 ff72 	bl	8007fc6 <strncpy>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fc fe67 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(1,0);
 80040ea:	2100      	movs	r1, #0
 80040ec:	2001      	movs	r0, #1
 80040ee:	f7fc fdfe 	bl	8000cee <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <calibrateSDADC+0xc8>)
 80040f4:	f993 3000 	ldrsb.w	r3, [r3]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	4413      	add	r3, r2
 8004100:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <calibrateSDADC+0xcc>)
 8004102:	4413      	add	r3, r2
 8004104:	2210      	movs	r2, #16
 8004106:	4619      	mov	r1, r3
 8004108:	480b      	ldr	r0, [pc, #44]	; (8004138 <calibrateSDADC+0xd0>)
 800410a:	f003 ff5c 	bl	8007fc6 <strncpy>
 800410e:	4603      	mov	r3, r0
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc fe51 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,0);
 8004116:	2100      	movs	r1, #0
 8004118:	2000      	movs	r0, #0
 800411a:	f7fc fde8 	bl	8000cee <lcd_put_cur>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	08009d30 	.word	0x08009d30
 800412c:	08009cf4 	.word	0x08009cf4
 8004130:	2000021b 	.word	0x2000021b
 8004134:	20000008 	.word	0x20000008
 8004138:	200022a4 	.word	0x200022a4

0800413c <storeInFlash>:

//store all saved values in flash memory
void storeInFlash(void){
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
	//Unlock the Flash Program Erase controller
	HAL_FLASH_Unlock();
 8004142:	f001 f80b 	bl	800515c <HAL_FLASH_Unlock>

	//Erase page
	FLASH_EraseInitTypeDef eraseParams;
	eraseParams.TypeErase = FLASH_TYPEERASE_PAGES;
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
	eraseParams.PageAddress = 0x0800F800;
 800414a:	4b3e      	ldr	r3, [pc, #248]	; (8004244 <storeInFlash+0x108>)
 800414c:	60bb      	str	r3, [r7, #8]
	eraseParams.NbPages=1;
 800414e:	2301      	movs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
	uint32_t eraseError=0;
 8004152:	2300      	movs	r3, #0
 8004154:	603b      	str	r3, [r7, #0]
	HAL_FLASHEx_Erase(&eraseParams, &eraseError);
 8004156:	463a      	mov	r2, r7
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f001 f8c1 	bl	80052e4 <HAL_FLASHEx_Erase>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8004162:	f04f 30ff 	mov.w	r0, #4294967295
 8004166:	f001 f84b 	bl	8005200 <FLASH_WaitForLastOperation>


	//Store the CAN IDs
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F800, bytesToWord(id_arr));//store can ids
 800416a:	4837      	ldr	r0, [pc, #220]	; (8004248 <storeInFlash+0x10c>)
 800416c:	f7ff ff34 	bl	8003fd8 <bytesToWord>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	4932      	ldr	r1, [pc, #200]	; (8004244 <storeInFlash+0x108>)
 800417a:	2002      	movs	r0, #2
 800417c:	f000 ff7e 	bl	800507c <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	f001 f83c 	bl	8005200 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F804, (uint32_t)baud_pos); //store baud rate
 8004188:	4b30      	ldr	r3, [pc, #192]	; (800424c <storeInFlash+0x110>)
 800418a:	f993 3000 	ldrsb.w	r3, [r3]
 800418e:	461a      	mov	r2, r3
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	492e      	ldr	r1, [pc, #184]	; (8004250 <storeInFlash+0x114>)
 8004196:	2002      	movs	r0, #2
 8004198:	f000 ff70 	bl	800507c <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	f001 f82e 	bl	8005200 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F808, (uint32_t)num_delays); // store number of delays
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <storeInFlash+0x118>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	492a      	ldr	r1, [pc, #168]	; (8004258 <storeInFlash+0x11c>)
 80041b0:	2002      	movs	r0, #2
 80041b2:	f000 ff63 	bl	800507c <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80041b6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ba:	f001 f821 	bl	8005200 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F80C, bytesToWord(analog_enable_arr)); // store device enable bools
 80041be:	4827      	ldr	r0, [pc, #156]	; (800425c <storeInFlash+0x120>)
 80041c0:	f7ff ff0a 	bl	8003fd8 <bytesToWord>
 80041c4:	4603      	mov	r3, r0
 80041c6:	461a      	mov	r2, r3
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	4924      	ldr	r1, [pc, #144]	; (8004260 <storeInFlash+0x124>)
 80041ce:	2002      	movs	r0, #2
 80041d0:	f000 ff54 	bl	800507c <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80041d4:	f04f 30ff 	mov.w	r0, #4294967295
 80041d8:	f001 f812 	bl	8005200 <FLASH_WaitForLastOperation>
	if(store_offsets){
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <storeInFlash+0x128>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d029      	beq.n	8004238 <storeInFlash+0xfc>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F810, analog_1_offset); // store analog 1 offset
 80041e4:	4b20      	ldr	r3, [pc, #128]	; (8004268 <storeInFlash+0x12c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	491f      	ldr	r1, [pc, #124]	; (800426c <storeInFlash+0x130>)
 80041f0:	2002      	movs	r0, #2
 80041f2:	f000 ff43 	bl	800507c <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80041f6:	f04f 30ff 	mov.w	r0, #4294967295
 80041fa:	f001 f801 	bl	8005200 <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F814, analog_2_offset); // store analog 2 offset
 80041fe:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <storeInFlash+0x134>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	491a      	ldr	r1, [pc, #104]	; (8004274 <storeInFlash+0x138>)
 800420a:	2002      	movs	r0, #2
 800420c:	f000 ff36 	bl	800507c <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	f000 fff4 	bl	8005200 <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F818, analog_3_offset); // store analog 3 offset
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <storeInFlash+0x13c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	4916      	ldr	r1, [pc, #88]	; (800427c <storeInFlash+0x140>)
 8004224:	2002      	movs	r0, #2
 8004226:	f000 ff29 	bl	800507c <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800422a:	f04f 30ff 	mov.w	r0, #4294967295
 800422e:	f000 ffe7 	bl	8005200 <FLASH_WaitForLastOperation>
		store_offsets=0;
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <storeInFlash+0x128>)
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
	}


	//Lock the Flash Program Erase controller
	HAL_FLASH_Lock();
 8004238:	f000 ffb6 	bl	80051a8 <HAL_FLASH_Lock>
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	0800f800 	.word	0x0800f800
 8004248:	20000240 	.word	0x20000240
 800424c:	2000015f 	.word	0x2000015f
 8004250:	0800f804 	.word	0x0800f804
 8004254:	2000021e 	.word	0x2000021e
 8004258:	0800f808 	.word	0x0800f808
 800425c:	20006398 	.word	0x20006398
 8004260:	0800f80c 	.word	0x0800f80c
 8004264:	20000208 	.word	0x20000208
 8004268:	200001fc 	.word	0x200001fc
 800426c:	0800f810 	.word	0x0800f810
 8004270:	20000200 	.word	0x20000200
 8004274:	0800f814 	.word	0x0800f814
 8004278:	20000204 	.word	0x20000204
 800427c:	0800f818 	.word	0x0800f818

08004280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004284:	b672      	cpsid	i
}
 8004286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004288:	e7fe      	b.n	8004288 <Error_Handler+0x8>
	...

0800428c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_MspInit+0x44>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <HAL_MspInit+0x44>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6193      	str	r3, [r2, #24]
 800429e:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <HAL_MspInit+0x44>)
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_MspInit+0x44>)
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <HAL_MspInit+0x44>)
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b4:	61d3      	str	r3, [r2, #28]
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_MspInit+0x44>)
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000

080042d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a18      	ldr	r2, [pc, #96]	; (8004354 <HAL_CAN_MspInit+0x80>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d129      	bne.n	800434a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <HAL_CAN_MspInit+0x84>)
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <HAL_CAN_MspInit+0x84>)
 80042fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004300:	61d3      	str	r3, [r2, #28]
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <HAL_CAN_MspInit+0x84>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800430e:	4b12      	ldr	r3, [pc, #72]	; (8004358 <HAL_CAN_MspInit+0x84>)
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4a11      	ldr	r2, [pc, #68]	; (8004358 <HAL_CAN_MspInit+0x84>)
 8004314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004318:	6153      	str	r3, [r2, #20]
 800431a:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <HAL_CAN_MspInit+0x84>)
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004326:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800432a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432c:	2302      	movs	r3, #2
 800432e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004334:	2303      	movs	r3, #3
 8004336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8004338:	2309      	movs	r3, #9
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	4619      	mov	r1, r3
 8004342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004346:	f001 f871 	bl	800542c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800434a:	bf00      	nop
 800434c:	3728      	adds	r7, #40	; 0x28
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40006400 	.word	0x40006400
 8004358:	40021000 	.word	0x40021000

0800435c <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a4c      	ldr	r2, [pc, #304]	; (80044ac <HAL_SDADC_MspInit+0x150>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d12d      	bne.n	80043da <HAL_SDADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 800437e:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	4a4b      	ldr	r2, [pc, #300]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 8004384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004388:	6193      	str	r3, [r2, #24]
 800438a:	4b49      	ldr	r3, [pc, #292]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004392:	623b      	str	r3, [r7, #32]
 8004394:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004396:	4b46      	ldr	r3, [pc, #280]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4a45      	ldr	r2, [pc, #276]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 800439c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043a0:	6153      	str	r3, [r2, #20]
 80043a2:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	69fb      	ldr	r3, [r7, #28]
    /**SDADC1 GPIO Configuration
    PE8     ------> SDADC1_AIN8P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043b4:	2303      	movs	r3, #3
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c0:	4619      	mov	r1, r3
 80043c2:	483c      	ldr	r0, [pc, #240]	; (80044b4 <HAL_SDADC_MspInit+0x158>)
 80043c4:	f001 f832 	bl	800542c <HAL_GPIO_Init>

    /* SDADC1 interrupt Init */
    HAL_NVIC_SetPriority(SDADC1_IRQn, 2, 0);
 80043c8:	2200      	movs	r2, #0
 80043ca:	2102      	movs	r1, #2
 80043cc:	203d      	movs	r0, #61	; 0x3d
 80043ce:	f000 fe1e 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 80043d2:	203d      	movs	r0, #61	; 0x3d
 80043d4:	f000 fe37 	bl	8005046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 80043d8:	e064      	b.n	80044a4 <HAL_SDADC_MspInit+0x148>
  else if(hsdadc->Instance==SDADC2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a36      	ldr	r2, [pc, #216]	; (80044b8 <HAL_SDADC_MspInit+0x15c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d12d      	bne.n	8004440 <HAL_SDADC_MspInit+0xe4>
    __HAL_RCC_SDADC2_CLK_ENABLE();
 80043e4:	4b32      	ldr	r3, [pc, #200]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	4a31      	ldr	r2, [pc, #196]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 80043ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043ee:	6193      	str	r3, [r2, #24]
 80043f0:	4b2f      	ldr	r3, [pc, #188]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043fc:	4b2c      	ldr	r3, [pc, #176]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	4a2b      	ldr	r2, [pc, #172]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 8004402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004406:	6153      	str	r3, [r2, #20]
 8004408:	4b29      	ldr	r3, [pc, #164]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800441a:	2303      	movs	r3, #3
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441e:	2300      	movs	r3, #0
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004426:	4619      	mov	r1, r3
 8004428:	4822      	ldr	r0, [pc, #136]	; (80044b4 <HAL_SDADC_MspInit+0x158>)
 800442a:	f000 ffff 	bl	800542c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC2_IRQn, 2, 0);
 800442e:	2200      	movs	r2, #0
 8004430:	2102      	movs	r1, #2
 8004432:	203e      	movs	r0, #62	; 0x3e
 8004434:	f000 fdeb 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC2_IRQn);
 8004438:	203e      	movs	r0, #62	; 0x3e
 800443a:	f000 fe04 	bl	8005046 <HAL_NVIC_EnableIRQ>
}
 800443e:	e031      	b.n	80044a4 <HAL_SDADC_MspInit+0x148>
  else if(hsdadc->Instance==SDADC3)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <HAL_SDADC_MspInit+0x160>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d12c      	bne.n	80044a4 <HAL_SDADC_MspInit+0x148>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 800444a:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 8004450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004454:	6193      	str	r3, [r2, #24]
 8004456:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004462:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 8004468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800446c:	6153      	str	r3, [r2, #20]
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_SDADC_MspInit+0x154>)
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800447a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004480:	2303      	movs	r3, #3
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004484:	2300      	movs	r3, #0
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800448c:	4619      	mov	r1, r3
 800448e:	480c      	ldr	r0, [pc, #48]	; (80044c0 <HAL_SDADC_MspInit+0x164>)
 8004490:	f000 ffcc 	bl	800542c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC3_IRQn, 2, 0);
 8004494:	2200      	movs	r2, #0
 8004496:	2102      	movs	r1, #2
 8004498:	203f      	movs	r0, #63	; 0x3f
 800449a:	f000 fdb8 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC3_IRQn);
 800449e:	203f      	movs	r0, #63	; 0x3f
 80044a0:	f000 fdd1 	bl	8005046 <HAL_NVIC_EnableIRQ>
}
 80044a4:	bf00      	nop
 80044a6:	3738      	adds	r7, #56	; 0x38
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40016000 	.word	0x40016000
 80044b0:	40021000 	.word	0x40021000
 80044b4:	48001000 	.word	0x48001000
 80044b8:	40016400 	.word	0x40016400
 80044bc:	40016800 	.word	0x40016800
 80044c0:	48000400 	.word	0x48000400

080044c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d4:	d10c      	bne.n	80044f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <HAL_TIM_Base_MspInit+0x68>)
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4a14      	ldr	r2, [pc, #80]	; (800452c <HAL_TIM_Base_MspInit+0x68>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	61d3      	str	r3, [r2, #28]
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_TIM_Base_MspInit+0x68>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80044ee:	e018      	b.n	8004522 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <HAL_TIM_Base_MspInit+0x6c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d113      	bne.n	8004522 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80044fa:	4b0c      	ldr	r3, [pc, #48]	; (800452c <HAL_TIM_Base_MspInit+0x68>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	4a0b      	ldr	r2, [pc, #44]	; (800452c <HAL_TIM_Base_MspInit+0x68>)
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	61d3      	str	r3, [r2, #28]
 8004506:	4b09      	ldr	r3, [pc, #36]	; (800452c <HAL_TIM_Base_MspInit+0x68>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004512:	2200      	movs	r2, #0
 8004514:	2100      	movs	r1, #0
 8004516:	201d      	movs	r0, #29
 8004518:	f000 fd79 	bl	800500e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800451c:	201d      	movs	r0, #29
 800451e:	f000 fd92 	bl	8005046 <HAL_NVIC_EnableIRQ>
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40021000 	.word	0x40021000
 8004530:	40000400 	.word	0x40000400

08004534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004538:	e7fe      	b.n	8004538 <NMI_Handler+0x4>

0800453a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800453a:	b480      	push	{r7}
 800453c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800453e:	e7fe      	b.n	800453e <HardFault_Handler+0x4>

08004540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004544:	e7fe      	b.n	8004544 <MemManage_Handler+0x4>

08004546 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004546:	b480      	push	{r7}
 8004548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800454a:	e7fe      	b.n	800454a <BusFault_Handler+0x4>

0800454c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004550:	e7fe      	b.n	8004550 <UsageFault_Handler+0x4>

08004552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004552:	b480      	push	{r7}
 8004554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800456e:	b480      	push	{r7}
 8004570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004580:	f000 f8f8 	bl	8004774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004584:	bf00      	nop
 8004586:	bd80      	pop	{r7, pc}

08004588 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800458c:	2001      	movs	r0, #1
 800458e:	f001 f8f7 	bl	8005780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}

08004596 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800459a:	2002      	movs	r0, #2
 800459c:	f001 f8f0 	bl	8005780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80045a0:	bf00      	nop
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt and touch sense controller interrupt.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80045a8:	2004      	movs	r0, #4
 80045aa:	f001 f8e9 	bl	8005780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045b8:	4802      	ldr	r0, [pc, #8]	; (80045c4 <TIM3_IRQHandler+0x10>)
 80045ba:	f003 f8bb 	bl	8007734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200022c0 	.word	0x200022c0

080045c8 <SDADC1_IRQHandler>:

/**
  * @brief This function handles SDADC1 global interrupt.
  */
void SDADC1_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC1_IRQn 0 */

  /* USER CODE END SDADC1_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc1);
 80045cc:	4802      	ldr	r0, [pc, #8]	; (80045d8 <SDADC1_IRQHandler+0x10>)
 80045ce:	f002 fe10 	bl	80071f2 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC1_IRQn 1 */

  /* USER CODE END SDADC1_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20004340 	.word	0x20004340

080045dc <SDADC2_IRQHandler>:

/**
  * @brief This function handles SDADC2 global interrupt.
  */
void SDADC2_IRQHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC2_IRQn 0 */

  /* USER CODE END SDADC2_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc2);
 80045e0:	4802      	ldr	r0, [pc, #8]	; (80045ec <SDADC2_IRQHandler+0x10>)
 80045e2:	f002 fe06 	bl	80071f2 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC2_IRQn 1 */

  /* USER CODE END SDADC2_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2000639c 	.word	0x2000639c

080045f0 <SDADC3_IRQHandler>:

/**
  * @brief This function handles SDADC3 global interrupt.
  */
void SDADC3_IRQHandler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC3_IRQn 0 */

  /* USER CODE END SDADC3_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc3);
 80045f4:	4802      	ldr	r0, [pc, #8]	; (8004600 <SDADC3_IRQHandler+0x10>)
 80045f6:	f002 fdfc 	bl	80071f2 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC3_IRQn 1 */

  /* USER CODE END SDADC3_IRQn 1 */
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20006464 	.word	0x20006464

08004604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800460c:	4a14      	ldr	r2, [pc, #80]	; (8004660 <_sbrk+0x5c>)
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <_sbrk+0x60>)
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <_sbrk+0x64>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004620:	4b11      	ldr	r3, [pc, #68]	; (8004668 <_sbrk+0x64>)
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <_sbrk+0x68>)
 8004624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <_sbrk+0x64>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	429a      	cmp	r2, r3
 8004632:	d207      	bcs.n	8004644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004634:	f003 fc2e 	bl	8007e94 <__errno>
 8004638:	4603      	mov	r3, r0
 800463a:	220c      	movs	r2, #12
 800463c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	e009      	b.n	8004658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004644:	4b08      	ldr	r3, [pc, #32]	; (8004668 <_sbrk+0x64>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800464a:	4b07      	ldr	r3, [pc, #28]	; (8004668 <_sbrk+0x64>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	4a05      	ldr	r2, [pc, #20]	; (8004668 <_sbrk+0x64>)
 8004654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004656:	68fb      	ldr	r3, [r7, #12]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20008000 	.word	0x20008000
 8004664:	00000400 	.word	0x00000400
 8004668:	20000228 	.word	0x20000228
 800466c:	200064e0 	.word	0x200064e0

08004670 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <SystemInit+0x20>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	4a05      	ldr	r2, [pc, #20]	; (8004690 <SystemInit+0x20>)
 800467c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004684:	bf00      	nop
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004698:	480d      	ldr	r0, [pc, #52]	; (80046d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800469a:	490e      	ldr	r1, [pc, #56]	; (80046d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800469c:	4a0e      	ldr	r2, [pc, #56]	; (80046d8 <LoopForever+0xe>)
  movs r3, #0
 800469e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046a0:	e002      	b.n	80046a8 <LoopCopyDataInit>

080046a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046a6:	3304      	adds	r3, #4

080046a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046ac:	d3f9      	bcc.n	80046a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046ae:	4a0b      	ldr	r2, [pc, #44]	; (80046dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80046b0:	4c0b      	ldr	r4, [pc, #44]	; (80046e0 <LoopForever+0x16>)
  movs r3, #0
 80046b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046b4:	e001      	b.n	80046ba <LoopFillZerobss>

080046b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046b8:	3204      	adds	r2, #4

080046ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046bc:	d3fb      	bcc.n	80046b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046be:	f7ff ffd7 	bl	8004670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046c2:	f003 fbed 	bl	8007ea0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046c6:	f7fc fb8f 	bl	8000de8 <main>

080046ca <LoopForever>:

LoopForever:
    b LoopForever
 80046ca:	e7fe      	b.n	80046ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80046d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046d4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80046d8:	08009e00 	.word	0x08009e00
  ldr r2, =_sbss
 80046dc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80046e0:	200064e0 	.word	0x200064e0

080046e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046e4:	e7fe      	b.n	80046e4 <ADC1_IRQHandler>
	...

080046e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046ec:	4b08      	ldr	r3, [pc, #32]	; (8004710 <HAL_Init+0x28>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a07      	ldr	r2, [pc, #28]	; (8004710 <HAL_Init+0x28>)
 80046f2:	f043 0310 	orr.w	r3, r3, #16
 80046f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046f8:	2003      	movs	r0, #3
 80046fa:	f000 fc7d 	bl	8004ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046fe:	2000      	movs	r0, #0
 8004700:	f000 f808 	bl	8004714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004704:	f7ff fdc2 	bl	800428c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40022000 	.word	0x40022000

08004714 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <HAL_InitTick+0x54>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_InitTick+0x58>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	4619      	mov	r1, r3
 8004726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800472a:	fbb3 f3f1 	udiv	r3, r3, r1
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fc95 	bl	8005062 <HAL_SYSTICK_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e00e      	b.n	8004760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b0f      	cmp	r3, #15
 8004746:	d80a      	bhi.n	800475e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004748:	2200      	movs	r2, #0
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	f04f 30ff 	mov.w	r0, #4294967295
 8004750:	f000 fc5d 	bl	800500e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004754:	4a06      	ldr	r2, [pc, #24]	; (8004770 <HAL_InitTick+0x5c>)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e000      	b.n	8004760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000168 	.word	0x20000168
 800476c:	20000170 	.word	0x20000170
 8004770:	2000016c 	.word	0x2000016c

08004774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_IncTick+0x20>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_IncTick+0x24>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4413      	add	r3, r2
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_IncTick+0x24>)
 8004786:	6013      	str	r3, [r2, #0]
}
 8004788:	bf00      	nop
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000170 	.word	0x20000170
 8004798:	200064ac 	.word	0x200064ac

0800479c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return uwTick;  
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_GetTick+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	200064ac 	.word	0x200064ac

080047b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047bc:	f7ff ffee 	bl	800479c <HAL_GetTick>
 80047c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d005      	beq.n	80047da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_Delay+0x44>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80047da:	bf00      	nop
 80047dc:	f7ff ffde 	bl	800479c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d8f7      	bhi.n	80047dc <HAL_Delay+0x28>
  {
  }
}
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000170 	.word	0x20000170

080047fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e0ed      	b.n	80049ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fd5a 	bl	80042d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0202 	bic.w	r2, r2, #2
 800482e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004830:	f7ff ffb4 	bl	800479c <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004836:	e012      	b.n	800485e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004838:	f7ff ffb0 	bl	800479c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b0a      	cmp	r3, #10
 8004844:	d90b      	bls.n	800485e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2205      	movs	r2, #5
 8004856:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e0c5      	b.n	80049ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e5      	bne.n	8004838 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800487c:	f7ff ff8e 	bl	800479c <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004882:	e012      	b.n	80048aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004884:	f7ff ff8a 	bl	800479c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b0a      	cmp	r3, #10
 8004890:	d90b      	bls.n	80048aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2205      	movs	r2, #5
 80048a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e09f      	b.n	80049ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0e5      	beq.n	8004884 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	7e1b      	ldrb	r3, [r3, #24]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d108      	bne.n	80048d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e007      	b.n	80048e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7e5b      	ldrb	r3, [r3, #25]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d108      	bne.n	80048fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	e007      	b.n	800490c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	7e9b      	ldrb	r3, [r3, #26]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d108      	bne.n	8004926 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0220 	orr.w	r2, r2, #32
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	e007      	b.n	8004936 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0220 	bic.w	r2, r2, #32
 8004934:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	7edb      	ldrb	r3, [r3, #27]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d108      	bne.n	8004950 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0210 	bic.w	r2, r2, #16
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e007      	b.n	8004960 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0210 	orr.w	r2, r2, #16
 800495e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	7f1b      	ldrb	r3, [r3, #28]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d108      	bne.n	800497a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0208 	orr.w	r2, r2, #8
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	e007      	b.n	800498a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0208 	bic.w	r2, r2, #8
 8004988:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7f5b      	ldrb	r3, [r3, #29]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d108      	bne.n	80049a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0204 	orr.w	r2, r2, #4
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e007      	b.n	80049b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0204 	bic.w	r2, r2, #4
 80049b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	ea42 0103 	orr.w	r1, r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b087      	sub	sp, #28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a08:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d003      	beq.n	8004a18 <HAL_CAN_ConfigFilter+0x26>
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	f040 80aa 	bne.w	8004b6c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a1e:	f043 0201 	orr.w	r2, r3, #1
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	2201      	movs	r2, #1
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	401a      	ands	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d123      	bne.n	8004a9a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	401a      	ands	r2, r3
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	3248      	adds	r2, #72	; 0x48
 8004a7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a90:	6979      	ldr	r1, [r7, #20]
 8004a92:	3348      	adds	r3, #72	; 0x48
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	440b      	add	r3, r1
 8004a98:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d122      	bne.n	8004ae8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ac2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	3248      	adds	r2, #72	; 0x48
 8004ac8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004adc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ade:	6979      	ldr	r1, [r7, #20]
 8004ae0:	3348      	adds	r3, #72	; 0x48
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	440b      	add	r3, r1
 8004ae6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	401a      	ands	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004b02:	e007      	b.n	8004b14 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004b2e:	e007      	b.n	8004b40 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d107      	bne.n	8004b58 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	431a      	orrs	r2, r3
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e006      	b.n	8004b7a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
  }
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b084      	sub	sp, #16
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d12e      	bne.n	8004bf8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb2:	f7ff fdf3 	bl	800479c <HAL_GetTick>
 8004bb6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004bb8:	e012      	b.n	8004be0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bba:	f7ff fdef 	bl	800479c <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b0a      	cmp	r3, #10
 8004bc6:	d90b      	bls.n	8004be0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2205      	movs	r2, #5
 8004bd8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e012      	b.n	8004c06 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e5      	bne.n	8004bba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e006      	b.n	8004c06 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d133      	bne.n	8004c8a <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c32:	f7ff fdb3 	bl	800479c <HAL_GetTick>
 8004c36:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c38:	e012      	b.n	8004c60 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c3a:	f7ff fdaf 	bl	800479c <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b0a      	cmp	r3, #10
 8004c46:	d90b      	bls.n	8004c60 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2205      	movs	r2, #5
 8004c58:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e01b      	b.n	8004c98 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0e5      	beq.n	8004c3a <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0202 	bic.w	r2, r2, #2
 8004c7c:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e006      	b.n	8004c98 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004cbe:	7ffb      	ldrb	r3, [r7, #31]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d003      	beq.n	8004ccc <HAL_CAN_AddTxMessage+0x2c>
 8004cc4:	7ffb      	ldrb	r3, [r7, #31]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	f040 80b8 	bne.w	8004e3c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80a0 	beq.w	8004e2c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	0e1b      	lsrs	r3, r3, #24
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d907      	bls.n	8004d0c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e09e      	b.n	8004e4a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	409a      	lsls	r2, r3
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10d      	bne.n	8004d3a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004d28:	68f9      	ldr	r1, [r7, #12]
 8004d2a:	6809      	ldr	r1, [r1, #0]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3318      	adds	r3, #24
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	440b      	add	r3, r1
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	e00f      	b.n	8004d5a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d44:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004d4e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3318      	adds	r3, #24
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	440b      	add	r3, r1
 8004d58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6819      	ldr	r1, [r3, #0]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	3318      	adds	r3, #24
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	440b      	add	r3, r1
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	7d1b      	ldrb	r3, [r3, #20]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d111      	bne.n	8004d9a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3318      	adds	r3, #24
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	4413      	add	r3, r2
 8004d82:	3304      	adds	r3, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	6811      	ldr	r1, [r2, #0]
 8004d8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	3318      	adds	r3, #24
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	440b      	add	r3, r1
 8004d96:	3304      	adds	r3, #4
 8004d98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3307      	adds	r3, #7
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	061a      	lsls	r2, r3, #24
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3306      	adds	r3, #6
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3305      	adds	r3, #5
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	4313      	orrs	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	3204      	adds	r2, #4
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	6811      	ldr	r1, [r2, #0]
 8004dc2:	ea43 0200 	orr.w	r2, r3, r0
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	440b      	add	r3, r1
 8004dcc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004dd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3303      	adds	r3, #3
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	061a      	lsls	r2, r3, #24
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3302      	adds	r3, #2
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3301      	adds	r3, #1
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	4313      	orrs	r3, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	4610      	mov	r0, r2
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	6811      	ldr	r1, [r2, #0]
 8004df8:	ea43 0200 	orr.w	r2, r3, r0
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	011b      	lsls	r3, r3, #4
 8004e00:	440b      	add	r3, r1
 8004e02:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004e06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	3318      	adds	r3, #24
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	4413      	add	r3, r2
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	6811      	ldr	r1, [r2, #0]
 8004e1a:	f043 0201 	orr.w	r2, r3, #1
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	3318      	adds	r3, #24
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	440b      	add	r3, r1
 8004e26:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e00e      	b.n	8004e4a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e006      	b.n	8004e4a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3724      	adds	r7, #36	; 0x24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
	...

08004e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <__NVIC_SetPriorityGrouping+0x44>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e74:	4013      	ands	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e8a:	4a04      	ldr	r2, [pc, #16]	; (8004e9c <__NVIC_SetPriorityGrouping+0x44>)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	60d3      	str	r3, [r2, #12]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	e000ed00 	.word	0xe000ed00

08004ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ea4:	4b04      	ldr	r3, [pc, #16]	; (8004eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f003 0307 	and.w	r3, r3, #7
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	e000ed00 	.word	0xe000ed00

08004ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	db0b      	blt.n	8004ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ece:	79fb      	ldrb	r3, [r7, #7]
 8004ed0:	f003 021f 	and.w	r2, r3, #31
 8004ed4:	4907      	ldr	r1, [pc, #28]	; (8004ef4 <__NVIC_EnableIRQ+0x38>)
 8004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	2001      	movs	r0, #1
 8004ede:	fa00 f202 	lsl.w	r2, r0, r2
 8004ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	e000e100 	.word	0xe000e100

08004ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	6039      	str	r1, [r7, #0]
 8004f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	db0a      	blt.n	8004f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	490c      	ldr	r1, [pc, #48]	; (8004f44 <__NVIC_SetPriority+0x4c>)
 8004f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f16:	0112      	lsls	r2, r2, #4
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f20:	e00a      	b.n	8004f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	4908      	ldr	r1, [pc, #32]	; (8004f48 <__NVIC_SetPriority+0x50>)
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	0112      	lsls	r2, r2, #4
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	440b      	add	r3, r1
 8004f36:	761a      	strb	r2, [r3, #24]
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	e000e100 	.word	0xe000e100
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b089      	sub	sp, #36	; 0x24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f1c3 0307 	rsb	r3, r3, #7
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	bf28      	it	cs
 8004f6a:	2304      	movcs	r3, #4
 8004f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	3304      	adds	r3, #4
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d902      	bls.n	8004f7c <NVIC_EncodePriority+0x30>
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	3b03      	subs	r3, #3
 8004f7a:	e000      	b.n	8004f7e <NVIC_EncodePriority+0x32>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	401a      	ands	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f94:	f04f 31ff 	mov.w	r1, #4294967295
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	43d9      	mvns	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa4:	4313      	orrs	r3, r2
         );
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3724      	adds	r7, #36	; 0x24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fc4:	d301      	bcc.n	8004fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e00f      	b.n	8004fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fca:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <SysTick_Config+0x40>)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fd2:	210f      	movs	r1, #15
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd8:	f7ff ff8e 	bl	8004ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <SysTick_Config+0x40>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fe2:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <SysTick_Config+0x40>)
 8004fe4:	2207      	movs	r2, #7
 8004fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	e000e010 	.word	0xe000e010

08004ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff29 	bl	8004e58 <__NVIC_SetPriorityGrouping>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	4603      	mov	r3, r0
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005020:	f7ff ff3e 	bl	8004ea0 <__NVIC_GetPriorityGrouping>
 8005024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	6978      	ldr	r0, [r7, #20]
 800502c:	f7ff ff8e 	bl	8004f4c <NVIC_EncodePriority>
 8005030:	4602      	mov	r2, r0
 8005032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005036:	4611      	mov	r1, r2
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ff5d 	bl	8004ef8 <__NVIC_SetPriority>
}
 800503e:	bf00      	nop
 8005040:	3718      	adds	r7, #24
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	4603      	mov	r3, r0
 800504e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff31 	bl	8004ebc <__NVIC_EnableIRQ>
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff ffa2 	bl	8004fb4 <SysTick_Config>
 8005070:	4603      	mov	r3, r0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800507c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005096:	4b2f      	ldr	r3, [pc, #188]	; (8005154 <HAL_FLASH_Program+0xd8>)
 8005098:	7e1b      	ldrb	r3, [r3, #24]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_FLASH_Program+0x26>
 800509e:	2302      	movs	r3, #2
 80050a0:	e054      	b.n	800514c <HAL_FLASH_Program+0xd0>
 80050a2:	4b2c      	ldr	r3, [pc, #176]	; (8005154 <HAL_FLASH_Program+0xd8>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050ac:	f000 f8a8 	bl	8005200 <FLASH_WaitForLastOperation>
 80050b0:	4603      	mov	r3, r0
 80050b2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d144      	bne.n	8005144 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d102      	bne.n	80050c6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80050c0:	2301      	movs	r3, #1
 80050c2:	757b      	strb	r3, [r7, #21]
 80050c4:	e007      	b.n	80050d6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d102      	bne.n	80050d2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80050cc:	2302      	movs	r3, #2
 80050ce:	757b      	strb	r3, [r7, #21]
 80050d0:	e001      	b.n	80050d6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80050d2:	2304      	movs	r3, #4
 80050d4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80050d6:	2300      	movs	r3, #0
 80050d8:	75bb      	strb	r3, [r7, #22]
 80050da:	e02d      	b.n	8005138 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80050dc:	7dbb      	ldrb	r3, [r7, #22]
 80050de:	005a      	lsls	r2, r3, #1
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	eb02 0c03 	add.w	ip, r2, r3
 80050e6:	7dbb      	ldrb	r3, [r7, #22]
 80050e8:	0119      	lsls	r1, r3, #4
 80050ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ee:	f1c1 0620 	rsb	r6, r1, #32
 80050f2:	f1a1 0020 	sub.w	r0, r1, #32
 80050f6:	fa22 f401 	lsr.w	r4, r2, r1
 80050fa:	fa03 f606 	lsl.w	r6, r3, r6
 80050fe:	4334      	orrs	r4, r6
 8005100:	fa23 f000 	lsr.w	r0, r3, r0
 8005104:	4304      	orrs	r4, r0
 8005106:	fa23 f501 	lsr.w	r5, r3, r1
 800510a:	b2a3      	uxth	r3, r4
 800510c:	4619      	mov	r1, r3
 800510e:	4660      	mov	r0, ip
 8005110:	f000 f85a 	bl	80051c8 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005114:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005118:	f000 f872 	bl	8005200 <FLASH_WaitForLastOperation>
 800511c:	4603      	mov	r3, r0
 800511e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005120:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <HAL_FLASH_Program+0xdc>)
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	4a0c      	ldr	r2, [pc, #48]	; (8005158 <HAL_FLASH_Program+0xdc>)
 8005126:	f023 0301 	bic.w	r3, r3, #1
 800512a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005132:	7dbb      	ldrb	r3, [r7, #22]
 8005134:	3301      	adds	r3, #1
 8005136:	75bb      	strb	r3, [r7, #22]
 8005138:	7dba      	ldrb	r2, [r7, #22]
 800513a:	7d7b      	ldrb	r3, [r7, #21]
 800513c:	429a      	cmp	r2, r3
 800513e:	d3cd      	bcc.n	80050dc <HAL_FLASH_Program+0x60>
 8005140:	e000      	b.n	8005144 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005142:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <HAL_FLASH_Program+0xd8>)
 8005146:	2200      	movs	r2, #0
 8005148:	761a      	strb	r2, [r3, #24]

  return status;
 800514a:	7dfb      	ldrb	r3, [r7, #23]
}
 800514c:	4618      	mov	r0, r3
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005154:	200064b0 	.word	0x200064b0
 8005158:	40022000 	.word	0x40022000

0800515c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <HAL_FLASH_Unlock+0x40>)
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_FLASH_Unlock+0x40>)
 8005174:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <HAL_FLASH_Unlock+0x44>)
 8005176:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005178:	4b08      	ldr	r3, [pc, #32]	; (800519c <HAL_FLASH_Unlock+0x40>)
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <HAL_FLASH_Unlock+0x48>)
 800517c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800517e:	4b07      	ldr	r3, [pc, #28]	; (800519c <HAL_FLASH_Unlock+0x40>)
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800518e:	79fb      	ldrb	r3, [r7, #7]
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40022000 	.word	0x40022000
 80051a0:	45670123 	.word	0x45670123
 80051a4:	cdef89ab 	.word	0xcdef89ab

080051a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_FLASH_Lock+0x1c>)
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	4a04      	ldr	r2, [pc, #16]	; (80051c4 <HAL_FLASH_Lock+0x1c>)
 80051b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40022000 	.word	0x40022000

080051c8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80051d4:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <FLASH_Program_HalfWord+0x30>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80051da:	4b08      	ldr	r3, [pc, #32]	; (80051fc <FLASH_Program_HalfWord+0x34>)
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	4a07      	ldr	r2, [pc, #28]	; (80051fc <FLASH_Program_HalfWord+0x34>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	887a      	ldrh	r2, [r7, #2]
 80051ea:	801a      	strh	r2, [r3, #0]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	200064b0 	.word	0x200064b0
 80051fc:	40022000 	.word	0x40022000

08005200 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005208:	f7ff fac8 	bl	800479c <HAL_GetTick>
 800520c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800520e:	e010      	b.n	8005232 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d00c      	beq.n	8005232 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <FLASH_WaitForLastOperation+0x2e>
 800521e:	f7ff fabd 	bl	800479c <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	429a      	cmp	r2, r3
 800522c:	d201      	bcs.n	8005232 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e01f      	b.n	8005272 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005232:	4b12      	ldr	r3, [pc, #72]	; (800527c <FLASH_WaitForLastOperation+0x7c>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b01      	cmp	r3, #1
 800523c:	d0e8      	beq.n	8005210 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <FLASH_WaitForLastOperation+0x7c>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b20      	cmp	r3, #32
 8005248:	d102      	bne.n	8005250 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800524a:	4b0c      	ldr	r3, [pc, #48]	; (800527c <FLASH_WaitForLastOperation+0x7c>)
 800524c:	2220      	movs	r2, #32
 800524e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <FLASH_WaitForLastOperation+0x7c>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d005      	beq.n	8005268 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800525c:	4b07      	ldr	r3, [pc, #28]	; (800527c <FLASH_WaitForLastOperation+0x7c>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005264:	2b04      	cmp	r3, #4
 8005266:	d103      	bne.n	8005270 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005268:	f000 f80a 	bl	8005280 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40022000 	.word	0x40022000

08005280 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800528a:	4b14      	ldr	r3, [pc, #80]	; (80052dc <FLASH_SetErrorCode+0x5c>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b10      	cmp	r3, #16
 8005294:	d109      	bne.n	80052aa <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005296:	4b12      	ldr	r3, [pc, #72]	; (80052e0 <FLASH_SetErrorCode+0x60>)
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	f043 0302 	orr.w	r3, r3, #2
 800529e:	4a10      	ldr	r2, [pc, #64]	; (80052e0 <FLASH_SetErrorCode+0x60>)
 80052a0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f043 0310 	orr.w	r3, r3, #16
 80052a8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <FLASH_SetErrorCode+0x5c>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d109      	bne.n	80052ca <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <FLASH_SetErrorCode+0x60>)
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	4a08      	ldr	r2, [pc, #32]	; (80052e0 <FLASH_SetErrorCode+0x60>)
 80052c0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f043 0304 	orr.w	r3, r3, #4
 80052c8:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80052ca:	4a04      	ldr	r2, [pc, #16]	; (80052dc <FLASH_SetErrorCode+0x5c>)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	60d3      	str	r3, [r2, #12]
}  
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40022000 	.word	0x40022000
 80052e0:	200064b0 	.word	0x200064b0

080052e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80052f6:	4b2e      	ldr	r3, [pc, #184]	; (80053b0 <HAL_FLASHEx_Erase+0xcc>)
 80052f8:	7e1b      	ldrb	r3, [r3, #24]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_FLASHEx_Erase+0x1e>
 80052fe:	2302      	movs	r3, #2
 8005300:	e052      	b.n	80053a8 <HAL_FLASHEx_Erase+0xc4>
 8005302:	4b2b      	ldr	r3, [pc, #172]	; (80053b0 <HAL_FLASHEx_Erase+0xcc>)
 8005304:	2201      	movs	r2, #1
 8005306:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d115      	bne.n	800533c <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005310:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005314:	f7ff ff74 	bl	8005200 <FLASH_WaitForLastOperation>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d140      	bne.n	80053a0 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800531e:	f000 f84b 	bl	80053b8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005322:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005326:	f7ff ff6b 	bl	8005200 <FLASH_WaitForLastOperation>
 800532a:	4603      	mov	r3, r0
 800532c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800532e:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <HAL_FLASHEx_Erase+0xd0>)
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	4a20      	ldr	r2, [pc, #128]	; (80053b4 <HAL_FLASHEx_Erase+0xd0>)
 8005334:	f023 0304 	bic.w	r3, r3, #4
 8005338:	6113      	str	r3, [r2, #16]
 800533a:	e031      	b.n	80053a0 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800533c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005340:	f7ff ff5e 	bl	8005200 <FLASH_WaitForLastOperation>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d12a      	bne.n	80053a0 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	e019      	b.n	800538e <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800535a:	68b8      	ldr	r0, [r7, #8]
 800535c:	f000 f846 	bl	80053ec <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005360:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005364:	f7ff ff4c 	bl	8005200 <FLASH_WaitForLastOperation>
 8005368:	4603      	mov	r3, r0
 800536a:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800536c:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <HAL_FLASHEx_Erase+0xd0>)
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	4a10      	ldr	r2, [pc, #64]	; (80053b4 <HAL_FLASHEx_Erase+0xd0>)
 8005372:	f023 0302 	bic.w	r3, r3, #2
 8005376:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	601a      	str	r2, [r3, #0]
            break;
 8005384:	e00c      	b.n	80053a0 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	02da      	lsls	r2, r3, #11
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	429a      	cmp	r2, r3
 800539e:	d3dc      	bcc.n	800535a <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80053a0:	4b03      	ldr	r3, [pc, #12]	; (80053b0 <HAL_FLASHEx_Erase+0xcc>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	761a      	strb	r2, [r3, #24]

  return status;
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	200064b0 	.word	0x200064b0
 80053b4:	40022000 	.word	0x40022000

080053b8 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <FLASH_MassErase+0x2c>)
 80053be:	2200      	movs	r2, #0
 80053c0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80053c2:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <FLASH_MassErase+0x30>)
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	4a08      	ldr	r2, [pc, #32]	; (80053e8 <FLASH_MassErase+0x30>)
 80053c8:	f043 0304 	orr.w	r3, r3, #4
 80053cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <FLASH_MassErase+0x30>)
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <FLASH_MassErase+0x30>)
 80053d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053d8:	6113      	str	r3, [r2, #16]
}
 80053da:	bf00      	nop
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	200064b0 	.word	0x200064b0
 80053e8:	40022000 	.word	0x40022000

080053ec <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <FLASH_PageErase+0x38>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <FLASH_PageErase+0x3c>)
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <FLASH_PageErase+0x3c>)
 8005400:	f043 0302 	orr.w	r3, r3, #2
 8005404:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005406:	4a08      	ldr	r2, [pc, #32]	; (8005428 <FLASH_PageErase+0x3c>)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <FLASH_PageErase+0x3c>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	4a05      	ldr	r2, [pc, #20]	; (8005428 <FLASH_PageErase+0x3c>)
 8005412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005416:	6113      	str	r3, [r2, #16]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	200064b0 	.word	0x200064b0
 8005428:	40022000 	.word	0x40022000

0800542c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800543a:	e154      	b.n	80056e6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	2101      	movs	r1, #1
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	4013      	ands	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 8146 	beq.w	80056e0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d00b      	beq.n	8005474 <HAL_GPIO_Init+0x48>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d007      	beq.n	8005474 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005468:	2b11      	cmp	r3, #17
 800546a:	d003      	beq.n	8005474 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b12      	cmp	r3, #18
 8005472:	d130      	bne.n	80054d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	2203      	movs	r2, #3
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4013      	ands	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054aa:	2201      	movs	r2, #1
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	43db      	mvns	r3, r3
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4013      	ands	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	091b      	lsrs	r3, r3, #4
 80054c0:	f003 0201 	and.w	r2, r3, #1
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	2203      	movs	r2, #3
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b02      	cmp	r3, #2
 800550c:	d003      	beq.n	8005516 <HAL_GPIO_Init+0xea>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b12      	cmp	r3, #18
 8005514:	d123      	bne.n	800555e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	08da      	lsrs	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3208      	adds	r2, #8
 800551e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005522:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	220f      	movs	r2, #15
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	08da      	lsrs	r2, r3, #3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3208      	adds	r2, #8
 8005558:	6939      	ldr	r1, [r7, #16]
 800555a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	2203      	movs	r2, #3
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43db      	mvns	r3, r3
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4013      	ands	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 0203 	and.w	r2, r3, #3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80a0 	beq.w	80056e0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055a0:	4b58      	ldr	r3, [pc, #352]	; (8005704 <HAL_GPIO_Init+0x2d8>)
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	4a57      	ldr	r2, [pc, #348]	; (8005704 <HAL_GPIO_Init+0x2d8>)
 80055a6:	f043 0301 	orr.w	r3, r3, #1
 80055aa:	6193      	str	r3, [r2, #24]
 80055ac:	4b55      	ldr	r3, [pc, #340]	; (8005704 <HAL_GPIO_Init+0x2d8>)
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80055b8:	4a53      	ldr	r2, [pc, #332]	; (8005708 <HAL_GPIO_Init+0x2dc>)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	089b      	lsrs	r3, r3, #2
 80055be:	3302      	adds	r3, #2
 80055c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	220f      	movs	r2, #15
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43db      	mvns	r3, r3
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4013      	ands	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055e2:	d019      	beq.n	8005618 <HAL_GPIO_Init+0x1ec>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a49      	ldr	r2, [pc, #292]	; (800570c <HAL_GPIO_Init+0x2e0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <HAL_GPIO_Init+0x1e8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a48      	ldr	r2, [pc, #288]	; (8005710 <HAL_GPIO_Init+0x2e4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00d      	beq.n	8005610 <HAL_GPIO_Init+0x1e4>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a47      	ldr	r2, [pc, #284]	; (8005714 <HAL_GPIO_Init+0x2e8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <HAL_GPIO_Init+0x1e0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a46      	ldr	r2, [pc, #280]	; (8005718 <HAL_GPIO_Init+0x2ec>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d101      	bne.n	8005608 <HAL_GPIO_Init+0x1dc>
 8005604:	2304      	movs	r3, #4
 8005606:	e008      	b.n	800561a <HAL_GPIO_Init+0x1ee>
 8005608:	2305      	movs	r3, #5
 800560a:	e006      	b.n	800561a <HAL_GPIO_Init+0x1ee>
 800560c:	2303      	movs	r3, #3
 800560e:	e004      	b.n	800561a <HAL_GPIO_Init+0x1ee>
 8005610:	2302      	movs	r3, #2
 8005612:	e002      	b.n	800561a <HAL_GPIO_Init+0x1ee>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <HAL_GPIO_Init+0x1ee>
 8005618:	2300      	movs	r3, #0
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	f002 0203 	and.w	r2, r2, #3
 8005620:	0092      	lsls	r2, r2, #2
 8005622:	4093      	lsls	r3, r2
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800562a:	4937      	ldr	r1, [pc, #220]	; (8005708 <HAL_GPIO_Init+0x2dc>)
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	089b      	lsrs	r3, r3, #2
 8005630:	3302      	adds	r3, #2
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005638:	4b38      	ldr	r3, [pc, #224]	; (800571c <HAL_GPIO_Init+0x2f0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	43db      	mvns	r3, r3
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4013      	ands	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800565c:	4a2f      	ldr	r2, [pc, #188]	; (800571c <HAL_GPIO_Init+0x2f0>)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005662:	4b2e      	ldr	r3, [pc, #184]	; (800571c <HAL_GPIO_Init+0x2f0>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	43db      	mvns	r3, r3
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4013      	ands	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005686:	4a25      	ldr	r2, [pc, #148]	; (800571c <HAL_GPIO_Init+0x2f0>)
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800568c:	4b23      	ldr	r3, [pc, #140]	; (800571c <HAL_GPIO_Init+0x2f0>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	43db      	mvns	r3, r3
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4013      	ands	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80056b0:	4a1a      	ldr	r2, [pc, #104]	; (800571c <HAL_GPIO_Init+0x2f0>)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056b6:	4b19      	ldr	r3, [pc, #100]	; (800571c <HAL_GPIO_Init+0x2f0>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	43db      	mvns	r3, r3
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4013      	ands	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80056da:	4a10      	ldr	r2, [pc, #64]	; (800571c <HAL_GPIO_Init+0x2f0>)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	3301      	adds	r3, #1
 80056e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f47f aea3 	bne.w	800543c <HAL_GPIO_Init+0x10>
  }
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40021000 	.word	0x40021000
 8005708:	40010000 	.word	0x40010000
 800570c:	48000400 	.word	0x48000400
 8005710:	48000800 	.word	0x48000800
 8005714:	48000c00 	.word	0x48000c00
 8005718:	48001000 	.word	0x48001000
 800571c:	40010400 	.word	0x40010400

08005720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	4013      	ands	r3, r2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
 800573c:	e001      	b.n	8005742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	807b      	strh	r3, [r7, #2]
 800575c:	4613      	mov	r3, r2
 800575e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005760:	787b      	ldrb	r3, [r7, #1]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005766:	887a      	ldrh	r2, [r7, #2]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800576c:	e002      	b.n	8005774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800576e:	887a      	ldrh	r2, [r7, #2]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800578a:	4b08      	ldr	r3, [pc, #32]	; (80057ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800578c:	695a      	ldr	r2, [r3, #20]
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d006      	beq.n	80057a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005796:	4a05      	ldr	r2, [pc, #20]	; (80057ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800579c:	88fb      	ldrh	r3, [r7, #6]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fc fd34 	bl	800220c <HAL_GPIO_EXTI_Callback>
  }
}
 80057a4:	bf00      	nop
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40010400 	.word	0x40010400

080057b0 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 80057b8:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HAL_PWREx_EnableSDADC+0x38>)
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <HAL_PWREx_EnableSDADC+0x38>)
 80057be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c2:	61d3      	str	r3, [r2, #28]
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <HAL_PWREx_EnableSDADC+0x38>)
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <HAL_PWREx_EnableSDADC+0x3c>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4905      	ldr	r1, [pc, #20]	; (80057ec <HAL_PWREx_EnableSDADC+0x3c>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4313      	orrs	r3, r2
 80057da:	600b      	str	r3, [r1, #0]
}
 80057dc:	bf00      	nop
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	40021000 	.word	0x40021000
 80057ec:	40007000 	.word	0x40007000

080057f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	1d3b      	adds	r3, r7, #4
 80057fa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057fc:	1d3b      	adds	r3, r7, #4
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	f000 bef4 	b.w	80065f2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800580a:	1d3b      	adds	r3, r7, #4
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 816a 	beq.w	8005aee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800581a:	4bb3      	ldr	r3, [pc, #716]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f003 030c 	and.w	r3, r3, #12
 8005822:	2b04      	cmp	r3, #4
 8005824:	d00c      	beq.n	8005840 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005826:	4bb0      	ldr	r3, [pc, #704]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f003 030c 	and.w	r3, r3, #12
 800582e:	2b08      	cmp	r3, #8
 8005830:	d159      	bne.n	80058e6 <HAL_RCC_OscConfig+0xf6>
 8005832:	4bad      	ldr	r3, [pc, #692]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583e:	d152      	bne.n	80058e6 <HAL_RCC_OscConfig+0xf6>
 8005840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005844:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005848:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800584c:	fa93 f3a3 	rbit	r3, r3
 8005850:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005854:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005858:	fab3 f383 	clz	r3, r3
 800585c:	b2db      	uxtb	r3, r3
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d102      	bne.n	8005872 <HAL_RCC_OscConfig+0x82>
 800586c:	4b9e      	ldr	r3, [pc, #632]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	e015      	b.n	800589e <HAL_RCC_OscConfig+0xae>
 8005872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005876:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800587e:	fa93 f3a3 	rbit	r3, r3
 8005882:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800588a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800588e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005892:	fa93 f3a3 	rbit	r3, r3
 8005896:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800589a:	4b93      	ldr	r3, [pc, #588]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058a2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80058a6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80058aa:	fa92 f2a2 	rbit	r2, r2
 80058ae:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80058b2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80058b6:	fab2 f282 	clz	r2, r2
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	f042 0220 	orr.w	r2, r2, #32
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	f002 021f 	and.w	r2, r2, #31
 80058c6:	2101      	movs	r1, #1
 80058c8:	fa01 f202 	lsl.w	r2, r1, r2
 80058cc:	4013      	ands	r3, r2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 810c 	beq.w	8005aec <HAL_RCC_OscConfig+0x2fc>
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f040 8106 	bne.w	8005aec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f000 be86 	b.w	80065f2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f0:	d106      	bne.n	8005900 <HAL_RCC_OscConfig+0x110>
 80058f2:	4b7d      	ldr	r3, [pc, #500]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a7c      	ldr	r2, [pc, #496]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 80058f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	e030      	b.n	8005962 <HAL_RCC_OscConfig+0x172>
 8005900:	1d3b      	adds	r3, r7, #4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10c      	bne.n	8005924 <HAL_RCC_OscConfig+0x134>
 800590a:	4b77      	ldr	r3, [pc, #476]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a76      	ldr	r2, [pc, #472]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	4b74      	ldr	r3, [pc, #464]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a73      	ldr	r2, [pc, #460]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 800591c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	e01e      	b.n	8005962 <HAL_RCC_OscConfig+0x172>
 8005924:	1d3b      	adds	r3, r7, #4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800592e:	d10c      	bne.n	800594a <HAL_RCC_OscConfig+0x15a>
 8005930:	4b6d      	ldr	r3, [pc, #436]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a6c      	ldr	r2, [pc, #432]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	4b6a      	ldr	r3, [pc, #424]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a69      	ldr	r2, [pc, #420]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	e00b      	b.n	8005962 <HAL_RCC_OscConfig+0x172>
 800594a:	4b67      	ldr	r3, [pc, #412]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a66      	ldr	r2, [pc, #408]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	4b64      	ldr	r3, [pc, #400]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a63      	ldr	r2, [pc, #396]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 800595c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005960:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005962:	4b61      	ldr	r3, [pc, #388]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	f023 020f 	bic.w	r2, r3, #15
 800596a:	1d3b      	adds	r3, r7, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	495d      	ldr	r1, [pc, #372]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005972:	4313      	orrs	r3, r2
 8005974:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005976:	1d3b      	adds	r3, r7, #4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d059      	beq.n	8005a34 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fe ff0c 	bl	800479c <HAL_GetTick>
 8005984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005988:	e00a      	b.n	80059a0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800598a:	f7fe ff07 	bl	800479c <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b64      	cmp	r3, #100	; 0x64
 8005998:	d902      	bls.n	80059a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	f000 be29 	b.w	80065f2 <HAL_RCC_OscConfig+0xe02>
 80059a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80059ac:	fa93 f3a3 	rbit	r3, r3
 80059b0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80059b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059b8:	fab3 f383 	clz	r3, r3
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d102      	bne.n	80059d2 <HAL_RCC_OscConfig+0x1e2>
 80059cc:	4b46      	ldr	r3, [pc, #280]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	e015      	b.n	80059fe <HAL_RCC_OscConfig+0x20e>
 80059d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059da:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80059de:	fa93 f3a3 	rbit	r3, r3
 80059e2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80059e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80059ee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80059f2:	fa93 f3a3 	rbit	r3, r3
 80059f6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80059fa:	4b3b      	ldr	r3, [pc, #236]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a02:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005a06:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005a0a:	fa92 f2a2 	rbit	r2, r2
 8005a0e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005a12:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005a16:	fab2 f282 	clz	r2, r2
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	f042 0220 	orr.w	r2, r2, #32
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	f002 021f 	and.w	r2, r2, #31
 8005a26:	2101      	movs	r1, #1
 8005a28:	fa01 f202 	lsl.w	r2, r1, r2
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0ab      	beq.n	800598a <HAL_RCC_OscConfig+0x19a>
 8005a32:	e05c      	b.n	8005aee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a34:	f7fe feb2 	bl	800479c <HAL_GetTick>
 8005a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a3c:	e00a      	b.n	8005a54 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a3e:	f7fe fead 	bl	800479c <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b64      	cmp	r3, #100	; 0x64
 8005a4c:	d902      	bls.n	8005a54 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	f000 bdcf 	b.w	80065f2 <HAL_RCC_OscConfig+0xe02>
 8005a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a58:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005a60:	fa93 f3a3 	rbit	r3, r3
 8005a64:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005a68:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a6c:	fab3 f383 	clz	r3, r3
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d102      	bne.n	8005a86 <HAL_RCC_OscConfig+0x296>
 8005a80:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	e015      	b.n	8005ab2 <HAL_RCC_OscConfig+0x2c2>
 8005a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a8a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005a92:	fa93 f3a3 	rbit	r3, r3
 8005a96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a9e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005aa2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005aa6:	fa93 f3a3 	rbit	r3, r3
 8005aaa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005aae:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <HAL_RCC_OscConfig+0x2f8>)
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ab6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005aba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005abe:	fa92 f2a2 	rbit	r2, r2
 8005ac2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005ac6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005aca:	fab2 f282 	clz	r2, r2
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	f042 0220 	orr.w	r2, r2, #32
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	f002 021f 	and.w	r2, r2, #31
 8005ada:	2101      	movs	r1, #1
 8005adc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1ab      	bne.n	8005a3e <HAL_RCC_OscConfig+0x24e>
 8005ae6:	e002      	b.n	8005aee <HAL_RCC_OscConfig+0x2fe>
 8005ae8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 816f 	beq.w	8005ddc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005afe:	4bd0      	ldr	r3, [pc, #832]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f003 030c 	and.w	r3, r3, #12
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00b      	beq.n	8005b22 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005b0a:	4bcd      	ldr	r3, [pc, #820]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f003 030c 	and.w	r3, r3, #12
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d16c      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x400>
 8005b16:	4bca      	ldr	r3, [pc, #808]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d166      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x400>
 8005b22:	2302      	movs	r3, #2
 8005b24:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b28:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005b2c:	fa93 f3a3 	rbit	r3, r3
 8005b30:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005b34:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b38:	fab3 f383 	clz	r3, r3
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	f043 0301 	orr.w	r3, r3, #1
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d102      	bne.n	8005b52 <HAL_RCC_OscConfig+0x362>
 8005b4c:	4bbc      	ldr	r3, [pc, #752]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	e013      	b.n	8005b7a <HAL_RCC_OscConfig+0x38a>
 8005b52:	2302      	movs	r3, #2
 8005b54:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b58:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005b5c:	fa93 f3a3 	rbit	r3, r3
 8005b60:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005b64:	2302      	movs	r3, #2
 8005b66:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005b6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005b6e:	fa93 f3a3 	rbit	r3, r3
 8005b72:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005b76:	4bb2      	ldr	r3, [pc, #712]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005b80:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005b84:	fa92 f2a2 	rbit	r2, r2
 8005b88:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005b8c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005b90:	fab2 f282 	clz	r2, r2
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	f042 0220 	orr.w	r2, r2, #32
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	f002 021f 	and.w	r2, r2, #31
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <HAL_RCC_OscConfig+0x3cc>
 8005bac:	1d3b      	adds	r3, r7, #4
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d002      	beq.n	8005bbc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f000 bd1b 	b.w	80065f2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bbc:	4ba0      	ldr	r3, [pc, #640]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bc4:	1d3b      	adds	r3, r7, #4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	21f8      	movs	r1, #248	; 0xf8
 8005bcc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005bd4:	fa91 f1a1 	rbit	r1, r1
 8005bd8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005bdc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005be0:	fab1 f181 	clz	r1, r1
 8005be4:	b2c9      	uxtb	r1, r1
 8005be6:	408b      	lsls	r3, r1
 8005be8:	4995      	ldr	r1, [pc, #596]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bee:	e0f5      	b.n	8005ddc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bf0:	1d3b      	adds	r3, r7, #4
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8085 	beq.w	8005d06 <HAL_RCC_OscConfig+0x516>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c06:	fa93 f3a3 	rbit	r3, r3
 8005c0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005c0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c12:	fab3 f383 	clz	r3, r3
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	461a      	mov	r2, r3
 8005c24:	2301      	movs	r3, #1
 8005c26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c28:	f7fe fdb8 	bl	800479c <HAL_GetTick>
 8005c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c30:	e00a      	b.n	8005c48 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c32:	f7fe fdb3 	bl	800479c <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d902      	bls.n	8005c48 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	f000 bcd5 	b.w	80065f2 <HAL_RCC_OscConfig+0xe02>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005c52:	fa93 f3a3 	rbit	r3, r3
 8005c56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005c5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5e:	fab3 f383 	clz	r3, r3
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d102      	bne.n	8005c78 <HAL_RCC_OscConfig+0x488>
 8005c72:	4b73      	ldr	r3, [pc, #460]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	e013      	b.n	8005ca0 <HAL_RCC_OscConfig+0x4b0>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005c82:	fa93 f3a3 	rbit	r3, r3
 8005c86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005c90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005c94:	fa93 f3a3 	rbit	r3, r3
 8005c98:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005c9c:	4b68      	ldr	r3, [pc, #416]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005ca6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005caa:	fa92 f2a2 	rbit	r2, r2
 8005cae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005cb2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005cb6:	fab2 f282 	clz	r2, r2
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	f042 0220 	orr.w	r2, r2, #32
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	f002 021f 	and.w	r2, r2, #31
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0af      	beq.n	8005c32 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd2:	4b5b      	ldr	r3, [pc, #364]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cda:	1d3b      	adds	r3, r7, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	21f8      	movs	r1, #248	; 0xf8
 8005ce2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005cea:	fa91 f1a1 	rbit	r1, r1
 8005cee:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005cf2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005cf6:	fab1 f181 	clz	r1, r1
 8005cfa:	b2c9      	uxtb	r1, r1
 8005cfc:	408b      	lsls	r3, r1
 8005cfe:	4950      	ldr	r1, [pc, #320]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	600b      	str	r3, [r1, #0]
 8005d04:	e06a      	b.n	8005ddc <HAL_RCC_OscConfig+0x5ec>
 8005d06:	2301      	movs	r3, #1
 8005d08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d10:	fa93 f3a3 	rbit	r3, r3
 8005d14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005d18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d1c:	fab3 f383 	clz	r3, r3
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d32:	f7fe fd33 	bl	800479c <HAL_GetTick>
 8005d36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d3a:	e00a      	b.n	8005d52 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d3c:	f7fe fd2e 	bl	800479c <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d902      	bls.n	8005d52 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	f000 bc50 	b.w	80065f2 <HAL_RCC_OscConfig+0xe02>
 8005d52:	2302      	movs	r3, #2
 8005d54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d5c:	fa93 f3a3 	rbit	r3, r3
 8005d60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d68:	fab3 f383 	clz	r3, r3
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d102      	bne.n	8005d82 <HAL_RCC_OscConfig+0x592>
 8005d7c:	4b30      	ldr	r3, [pc, #192]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	e013      	b.n	8005daa <HAL_RCC_OscConfig+0x5ba>
 8005d82:	2302      	movs	r3, #2
 8005d84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d8c:	fa93 f3a3 	rbit	r3, r3
 8005d90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d94:	2302      	movs	r3, #2
 8005d96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d9e:	fa93 f3a3 	rbit	r3, r3
 8005da2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005da6:	4b26      	ldr	r3, [pc, #152]	; (8005e40 <HAL_RCC_OscConfig+0x650>)
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	2202      	movs	r2, #2
 8005dac:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005db0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005db4:	fa92 f2a2 	rbit	r2, r2
 8005db8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005dbc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005dc0:	fab2 f282 	clz	r2, r2
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	f042 0220 	orr.w	r2, r2, #32
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	f002 021f 	and.w	r2, r2, #31
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1af      	bne.n	8005d3c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ddc:	1d3b      	adds	r3, r7, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80da 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dec:	1d3b      	adds	r3, r7, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d069      	beq.n	8005eca <HAL_RCC_OscConfig+0x6da>
 8005df6:	2301      	movs	r3, #1
 8005df8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e00:	fa93 f3a3 	rbit	r3, r3
 8005e04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e0c:	fab3 f383 	clz	r3, r3
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	461a      	mov	r2, r3
 8005e14:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <HAL_RCC_OscConfig+0x654>)
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e20:	f7fe fcbc 	bl	800479c <HAL_GetTick>
 8005e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e28:	e00e      	b.n	8005e48 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e2a:	f7fe fcb7 	bl	800479c <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d906      	bls.n	8005e48 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e3d9      	b.n	80065f2 <HAL_RCC_OscConfig+0xe02>
 8005e3e:	bf00      	nop
 8005e40:	40021000 	.word	0x40021000
 8005e44:	10908120 	.word	0x10908120
 8005e48:	2302      	movs	r3, #2
 8005e4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e52:	fa93 f3a3 	rbit	r3, r3
 8005e56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005e5e:	2202      	movs	r2, #2
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	fa93 f2a3 	rbit	r2, r3
 8005e6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005e76:	2202      	movs	r2, #2
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	fa93 f2a3 	rbit	r2, r3
 8005e84:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005e88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8a:	4ba5      	ldr	r3, [pc, #660]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8005e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e8e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005e92:	2102      	movs	r1, #2
 8005e94:	6019      	str	r1, [r3, #0]
 8005e96:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	fa93 f1a3 	rbit	r1, r3
 8005ea0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005ea4:	6019      	str	r1, [r3, #0]
  return result;
 8005ea6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	fab3 f383 	clz	r3, r3
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0b0      	beq.n	8005e2a <HAL_RCC_OscConfig+0x63a>
 8005ec8:	e06a      	b.n	8005fa0 <HAL_RCC_OscConfig+0x7b0>
 8005eca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005ece:	2201      	movs	r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	fa93 f2a3 	rbit	r2, r3
 8005edc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005ee0:	601a      	str	r2, [r3, #0]
  return result;
 8005ee2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005ee6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee8:	fab3 f383 	clz	r3, r3
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4b8c      	ldr	r3, [pc, #560]	; (8006124 <HAL_RCC_OscConfig+0x934>)
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005efc:	f7fe fc4e 	bl	800479c <HAL_GetTick>
 8005f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f04:	e009      	b.n	8005f1a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f06:	f7fe fc49 	bl	800479c <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e36b      	b.n	80065f2 <HAL_RCC_OscConfig+0xe02>
 8005f1a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005f1e:	2202      	movs	r2, #2
 8005f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	fa93 f2a3 	rbit	r2, r3
 8005f2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005f36:	2202      	movs	r2, #2
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	fa93 f2a3 	rbit	r2, r3
 8005f44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005f4e:	2202      	movs	r2, #2
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	fa93 f2a3 	rbit	r2, r3
 8005f5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005f60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f62:	4b6f      	ldr	r3, [pc, #444]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8005f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f66:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	6019      	str	r1, [r3, #0]
 8005f6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	fa93 f1a3 	rbit	r1, r3
 8005f78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005f7c:	6019      	str	r1, [r3, #0]
  return result;
 8005f7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	fab3 f383 	clz	r3, r3
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	2101      	movs	r1, #1
 8005f96:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1b2      	bne.n	8005f06 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fa0:	1d3b      	adds	r3, r7, #4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8158 	beq.w	8006260 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fb6:	4b5a      	ldr	r3, [pc, #360]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d112      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc2:	4b57      	ldr	r3, [pc, #348]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	4a56      	ldr	r2, [pc, #344]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8005fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	61d3      	str	r3, [r2, #28]
 8005fce:	4b54      	ldr	r3, [pc, #336]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005fd6:	f107 0308 	add.w	r3, r7, #8
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	f107 0308 	add.w	r3, r7, #8
 8005fe0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe8:	4b4f      	ldr	r3, [pc, #316]	; (8006128 <HAL_RCC_OscConfig+0x938>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d11a      	bne.n	800602a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ff4:	4b4c      	ldr	r3, [pc, #304]	; (8006128 <HAL_RCC_OscConfig+0x938>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a4b      	ldr	r2, [pc, #300]	; (8006128 <HAL_RCC_OscConfig+0x938>)
 8005ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006000:	f7fe fbcc 	bl	800479c <HAL_GetTick>
 8006004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006008:	e009      	b.n	800601e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800600a:	f7fe fbc7 	bl	800479c <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b64      	cmp	r3, #100	; 0x64
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e2e9      	b.n	80065f2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601e:	4b42      	ldr	r3, [pc, #264]	; (8006128 <HAL_RCC_OscConfig+0x938>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0ef      	beq.n	800600a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800602a:	1d3b      	adds	r3, r7, #4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d106      	bne.n	8006042 <HAL_RCC_OscConfig+0x852>
 8006034:	4b3a      	ldr	r3, [pc, #232]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	4a39      	ldr	r2, [pc, #228]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 800603a:	f043 0301 	orr.w	r3, r3, #1
 800603e:	6213      	str	r3, [r2, #32]
 8006040:	e02f      	b.n	80060a2 <HAL_RCC_OscConfig+0x8b2>
 8006042:	1d3b      	adds	r3, r7, #4
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10c      	bne.n	8006066 <HAL_RCC_OscConfig+0x876>
 800604c:	4b34      	ldr	r3, [pc, #208]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	4a33      	ldr	r2, [pc, #204]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	6213      	str	r3, [r2, #32]
 8006058:	4b31      	ldr	r3, [pc, #196]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	4a30      	ldr	r2, [pc, #192]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 800605e:	f023 0304 	bic.w	r3, r3, #4
 8006062:	6213      	str	r3, [r2, #32]
 8006064:	e01d      	b.n	80060a2 <HAL_RCC_OscConfig+0x8b2>
 8006066:	1d3b      	adds	r3, r7, #4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b05      	cmp	r3, #5
 800606e:	d10c      	bne.n	800608a <HAL_RCC_OscConfig+0x89a>
 8006070:	4b2b      	ldr	r3, [pc, #172]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8006076:	f043 0304 	orr.w	r3, r3, #4
 800607a:	6213      	str	r3, [r2, #32]
 800607c:	4b28      	ldr	r3, [pc, #160]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	4a27      	ldr	r2, [pc, #156]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6213      	str	r3, [r2, #32]
 8006088:	e00b      	b.n	80060a2 <HAL_RCC_OscConfig+0x8b2>
 800608a:	4b25      	ldr	r3, [pc, #148]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	4a24      	ldr	r2, [pc, #144]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	6213      	str	r3, [r2, #32]
 8006096:	4b22      	ldr	r3, [pc, #136]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	4a21      	ldr	r2, [pc, #132]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 800609c:	f023 0304 	bic.w	r3, r3, #4
 80060a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060a2:	1d3b      	adds	r3, r7, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d06b      	beq.n	8006184 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ac:	f7fe fb76 	bl	800479c <HAL_GetTick>
 80060b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b4:	e00b      	b.n	80060ce <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b6:	f7fe fb71 	bl	800479c <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e291      	b.n	80065f2 <HAL_RCC_OscConfig+0xe02>
 80060ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80060d2:	2202      	movs	r2, #2
 80060d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	fa93 f2a3 	rbit	r2, r3
 80060e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80060ea:	2202      	movs	r2, #2
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	fa93 f2a3 	rbit	r2, r3
 80060f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80060fc:	601a      	str	r2, [r3, #0]
  return result;
 80060fe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006102:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006104:	fab3 f383 	clz	r3, r3
 8006108:	b2db      	uxtb	r3, r3
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f043 0302 	orr.w	r3, r3, #2
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d109      	bne.n	800612c <HAL_RCC_OscConfig+0x93c>
 8006118:	4b01      	ldr	r3, [pc, #4]	; (8006120 <HAL_RCC_OscConfig+0x930>)
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	e014      	b.n	8006148 <HAL_RCC_OscConfig+0x958>
 800611e:	bf00      	nop
 8006120:	40021000 	.word	0x40021000
 8006124:	10908120 	.word	0x10908120
 8006128:	40007000 	.word	0x40007000
 800612c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006130:	2202      	movs	r2, #2
 8006132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006134:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	fa93 f2a3 	rbit	r2, r3
 800613e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	4bbb      	ldr	r3, [pc, #748]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800614c:	2102      	movs	r1, #2
 800614e:	6011      	str	r1, [r2, #0]
 8006150:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	fa92 f1a2 	rbit	r1, r2
 800615a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800615e:	6011      	str	r1, [r2, #0]
  return result;
 8006160:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	fab2 f282 	clz	r2, r2
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	f002 021f 	and.w	r2, r2, #31
 8006176:	2101      	movs	r1, #1
 8006178:	fa01 f202 	lsl.w	r2, r1, r2
 800617c:	4013      	ands	r3, r2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d099      	beq.n	80060b6 <HAL_RCC_OscConfig+0x8c6>
 8006182:	e063      	b.n	800624c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006184:	f7fe fb0a 	bl	800479c <HAL_GetTick>
 8006188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618c:	e00b      	b.n	80061a6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800618e:	f7fe fb05 	bl	800479c <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f241 3288 	movw	r2, #5000	; 0x1388
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e225      	b.n	80065f2 <HAL_RCC_OscConfig+0xe02>
 80061a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80061aa:	2202      	movs	r2, #2
 80061ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	fa93 f2a3 	rbit	r2, r3
 80061b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80061c2:	2202      	movs	r2, #2
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	fa93 f2a3 	rbit	r2, r3
 80061d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80061d4:	601a      	str	r2, [r3, #0]
  return result;
 80061d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80061da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061dc:	fab3 f383 	clz	r3, r3
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f043 0302 	orr.w	r3, r3, #2
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d102      	bne.n	80061f6 <HAL_RCC_OscConfig+0xa06>
 80061f0:	4b90      	ldr	r3, [pc, #576]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	e00d      	b.n	8006212 <HAL_RCC_OscConfig+0xa22>
 80061f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80061fa:	2202      	movs	r2, #2
 80061fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	fa93 f2a3 	rbit	r2, r3
 8006208:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	4b89      	ldr	r3, [pc, #548]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 8006210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006212:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006216:	2102      	movs	r1, #2
 8006218:	6011      	str	r1, [r2, #0]
 800621a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	fa92 f1a2 	rbit	r1, r2
 8006224:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006228:	6011      	str	r1, [r2, #0]
  return result;
 800622a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	fab2 f282 	clz	r2, r2
 8006234:	b2d2      	uxtb	r2, r2
 8006236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	f002 021f 	and.w	r2, r2, #31
 8006240:	2101      	movs	r1, #1
 8006242:	fa01 f202 	lsl.w	r2, r1, r2
 8006246:	4013      	ands	r3, r2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1a0      	bne.n	800618e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800624c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006250:	2b01      	cmp	r3, #1
 8006252:	d105      	bne.n	8006260 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006254:	4b77      	ldr	r3, [pc, #476]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	4a76      	ldr	r2, [pc, #472]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 800625a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800625e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006260:	1d3b      	adds	r3, r7, #4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 81c2 	beq.w	80065f0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800626c:	4b71      	ldr	r3, [pc, #452]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f003 030c 	and.w	r3, r3, #12
 8006274:	2b08      	cmp	r3, #8
 8006276:	f000 819c 	beq.w	80065b2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800627a:	1d3b      	adds	r3, r7, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	2b02      	cmp	r3, #2
 8006282:	f040 8114 	bne.w	80064ae <HAL_RCC_OscConfig+0xcbe>
 8006286:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800628a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800628e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006290:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	fa93 f2a3 	rbit	r2, r3
 800629a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800629e:	601a      	str	r2, [r3, #0]
  return result;
 80062a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80062a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a6:	fab3 f383 	clz	r3, r3
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	461a      	mov	r2, r3
 80062b8:	2300      	movs	r3, #0
 80062ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062bc:	f7fe fa6e 	bl	800479c <HAL_GetTick>
 80062c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062c4:	e009      	b.n	80062da <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c6:	f7fe fa69 	bl	800479c <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e18b      	b.n	80065f2 <HAL_RCC_OscConfig+0xe02>
 80062da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80062de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	fa93 f2a3 	rbit	r2, r3
 80062ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80062f2:	601a      	str	r2, [r3, #0]
  return result;
 80062f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80062f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062fa:	fab3 f383 	clz	r3, r3
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f043 0301 	orr.w	r3, r3, #1
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b01      	cmp	r3, #1
 800630c:	d102      	bne.n	8006314 <HAL_RCC_OscConfig+0xb24>
 800630e:	4b49      	ldr	r3, [pc, #292]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	e01b      	b.n	800634c <HAL_RCC_OscConfig+0xb5c>
 8006314:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800631c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800631e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	fa93 f2a3 	rbit	r2, r3
 8006328:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	fa93 f2a3 	rbit	r2, r3
 8006342:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	4b3a      	ldr	r3, [pc, #232]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006350:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006354:	6011      	str	r1, [r2, #0]
 8006356:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	fa92 f1a2 	rbit	r1, r2
 8006360:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8006364:	6011      	str	r1, [r2, #0]
  return result;
 8006366:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	fab2 f282 	clz	r2, r2
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	f042 0220 	orr.w	r2, r2, #32
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	f002 021f 	and.w	r2, r2, #31
 800637c:	2101      	movs	r1, #1
 800637e:	fa01 f202 	lsl.w	r2, r1, r2
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d19e      	bne.n	80062c6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006388:	4b2a      	ldr	r3, [pc, #168]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006390:	1d3b      	adds	r3, r7, #4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006396:	1d3b      	adds	r3, r7, #4
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	430b      	orrs	r3, r1
 800639e:	4925      	ldr	r1, [pc, #148]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	604b      	str	r3, [r1, #4]
 80063a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	fa93 f2a3 	rbit	r2, r3
 80063b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80063bc:	601a      	str	r2, [r3, #0]
  return result;
 80063be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80063c2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063c4:	fab3 f383 	clz	r3, r3
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	461a      	mov	r2, r3
 80063d6:	2301      	movs	r3, #1
 80063d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063da:	f7fe f9df 	bl	800479c <HAL_GetTick>
 80063de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063e2:	e009      	b.n	80063f8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e4:	f7fe f9da 	bl	800479c <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e0fc      	b.n	80065f2 <HAL_RCC_OscConfig+0xe02>
 80063f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80063fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006402:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	fa93 f2a3 	rbit	r2, r3
 800640c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006410:	601a      	str	r2, [r3, #0]
  return result;
 8006412:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006416:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006418:	fab3 f383 	clz	r3, r3
 800641c:	b2db      	uxtb	r3, r3
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f043 0301 	orr.w	r3, r3, #1
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d105      	bne.n	8006438 <HAL_RCC_OscConfig+0xc48>
 800642c:	4b01      	ldr	r3, [pc, #4]	; (8006434 <HAL_RCC_OscConfig+0xc44>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	e01e      	b.n	8006470 <HAL_RCC_OscConfig+0xc80>
 8006432:	bf00      	nop
 8006434:	40021000 	.word	0x40021000
 8006438:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800643c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006442:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	fa93 f2a3 	rbit	r2, r3
 800644c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006456:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	fa93 f2a3 	rbit	r2, r3
 8006466:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	4b63      	ldr	r3, [pc, #396]	; (80065fc <HAL_RCC_OscConfig+0xe0c>)
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006474:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800647e:	6812      	ldr	r2, [r2, #0]
 8006480:	fa92 f1a2 	rbit	r1, r2
 8006484:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006488:	6011      	str	r1, [r2, #0]
  return result;
 800648a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	fab2 f282 	clz	r2, r2
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	f042 0220 	orr.w	r2, r2, #32
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	f002 021f 	and.w	r2, r2, #31
 80064a0:	2101      	movs	r1, #1
 80064a2:	fa01 f202 	lsl.w	r2, r1, r2
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d09b      	beq.n	80063e4 <HAL_RCC_OscConfig+0xbf4>
 80064ac:	e0a0      	b.n	80065f0 <HAL_RCC_OscConfig+0xe00>
 80064ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	fa93 f2a3 	rbit	r2, r3
 80064c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064c6:	601a      	str	r2, [r3, #0]
  return result;
 80064c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ce:	fab3 f383 	clz	r3, r3
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80064d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	461a      	mov	r2, r3
 80064e0:	2300      	movs	r3, #0
 80064e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e4:	f7fe f95a 	bl	800479c <HAL_GetTick>
 80064e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064ec:	e009      	b.n	8006502 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ee:	f7fe f955 	bl	800479c <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e077      	b.n	80065f2 <HAL_RCC_OscConfig+0xe02>
 8006502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800650a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	fa93 f2a3 	rbit	r2, r3
 8006516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800651a:	601a      	str	r2, [r3, #0]
  return result;
 800651c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006520:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006522:	fab3 f383 	clz	r3, r3
 8006526:	b2db      	uxtb	r3, r3
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b01      	cmp	r3, #1
 8006534:	d102      	bne.n	800653c <HAL_RCC_OscConfig+0xd4c>
 8006536:	4b31      	ldr	r3, [pc, #196]	; (80065fc <HAL_RCC_OscConfig+0xe0c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	e01b      	b.n	8006574 <HAL_RCC_OscConfig+0xd84>
 800653c:	f107 0320 	add.w	r3, r7, #32
 8006540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006546:	f107 0320 	add.w	r3, r7, #32
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	fa93 f2a3 	rbit	r2, r3
 8006550:	f107 031c 	add.w	r3, r7, #28
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	f107 0318 	add.w	r3, r7, #24
 800655a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f107 0318 	add.w	r3, r7, #24
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	fa93 f2a3 	rbit	r2, r3
 800656a:	f107 0314 	add.w	r3, r7, #20
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	4b22      	ldr	r3, [pc, #136]	; (80065fc <HAL_RCC_OscConfig+0xe0c>)
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	f107 0210 	add.w	r2, r7, #16
 8006578:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800657c:	6011      	str	r1, [r2, #0]
 800657e:	f107 0210 	add.w	r2, r7, #16
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	fa92 f1a2 	rbit	r1, r2
 8006588:	f107 020c 	add.w	r2, r7, #12
 800658c:	6011      	str	r1, [r2, #0]
  return result;
 800658e:	f107 020c 	add.w	r2, r7, #12
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	fab2 f282 	clz	r2, r2
 8006598:	b2d2      	uxtb	r2, r2
 800659a:	f042 0220 	orr.w	r2, r2, #32
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	f002 021f 	and.w	r2, r2, #31
 80065a4:	2101      	movs	r1, #1
 80065a6:	fa01 f202 	lsl.w	r2, r1, r2
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d19e      	bne.n	80064ee <HAL_RCC_OscConfig+0xcfe>
 80065b0:	e01e      	b.n	80065f0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065b2:	1d3b      	adds	r3, r7, #4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e018      	b.n	80065f2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80065c0:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <HAL_RCC_OscConfig+0xe0c>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80065c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80065cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80065d0:	1d3b      	adds	r3, r7, #4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d108      	bne.n	80065ec <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80065da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80065de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d001      	beq.n	80065f0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40021000 	.word	0x40021000

08006600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b09e      	sub	sp, #120	; 0x78
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e162      	b.n	80068de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006618:	4b90      	ldr	r3, [pc, #576]	; (800685c <HAL_RCC_ClockConfig+0x25c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d910      	bls.n	8006648 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006626:	4b8d      	ldr	r3, [pc, #564]	; (800685c <HAL_RCC_ClockConfig+0x25c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f023 0207 	bic.w	r2, r3, #7
 800662e:	498b      	ldr	r1, [pc, #556]	; (800685c <HAL_RCC_ClockConfig+0x25c>)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	4313      	orrs	r3, r2
 8006634:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006636:	4b89      	ldr	r3, [pc, #548]	; (800685c <HAL_RCC_ClockConfig+0x25c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d001      	beq.n	8006648 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e14a      	b.n	80068de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006654:	4b82      	ldr	r3, [pc, #520]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	497f      	ldr	r1, [pc, #508]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 8006662:	4313      	orrs	r3, r2
 8006664:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80dc 	beq.w	800682c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d13c      	bne.n	80066f6 <HAL_RCC_ClockConfig+0xf6>
 800667c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006680:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006684:	fa93 f3a3 	rbit	r3, r3
 8006688:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800668c:	fab3 f383 	clz	r3, r3
 8006690:	b2db      	uxtb	r3, r3
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b01      	cmp	r3, #1
 800669e:	d102      	bne.n	80066a6 <HAL_RCC_ClockConfig+0xa6>
 80066a0:	4b6f      	ldr	r3, [pc, #444]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	e00f      	b.n	80066c6 <HAL_RCC_ClockConfig+0xc6>
 80066a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066ae:	fa93 f3a3 	rbit	r3, r3
 80066b2:	667b      	str	r3, [r7, #100]	; 0x64
 80066b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066b8:	663b      	str	r3, [r7, #96]	; 0x60
 80066ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066bc:	fa93 f3a3 	rbit	r3, r3
 80066c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066c2:	4b67      	ldr	r3, [pc, #412]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80066cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066ce:	fa92 f2a2 	rbit	r2, r2
 80066d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80066d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066d6:	fab2 f282 	clz	r2, r2
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	f042 0220 	orr.w	r2, r2, #32
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	f002 021f 	and.w	r2, r2, #31
 80066e6:	2101      	movs	r1, #1
 80066e8:	fa01 f202 	lsl.w	r2, r1, r2
 80066ec:	4013      	ands	r3, r2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d17b      	bne.n	80067ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e0f3      	b.n	80068de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d13c      	bne.n	8006778 <HAL_RCC_ClockConfig+0x178>
 80066fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006702:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006706:	fa93 f3a3 	rbit	r3, r3
 800670a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800670c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800670e:	fab3 f383 	clz	r3, r3
 8006712:	b2db      	uxtb	r3, r3
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	b2db      	uxtb	r3, r3
 8006718:	f043 0301 	orr.w	r3, r3, #1
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b01      	cmp	r3, #1
 8006720:	d102      	bne.n	8006728 <HAL_RCC_ClockConfig+0x128>
 8006722:	4b4f      	ldr	r3, [pc, #316]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	e00f      	b.n	8006748 <HAL_RCC_ClockConfig+0x148>
 8006728:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800672c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800672e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006730:	fa93 f3a3 	rbit	r3, r3
 8006734:	647b      	str	r3, [r7, #68]	; 0x44
 8006736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800673a:	643b      	str	r3, [r7, #64]	; 0x40
 800673c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673e:	fa93 f3a3 	rbit	r3, r3
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006744:	4b46      	ldr	r3, [pc, #280]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800674c:	63ba      	str	r2, [r7, #56]	; 0x38
 800674e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006750:	fa92 f2a2 	rbit	r2, r2
 8006754:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006758:	fab2 f282 	clz	r2, r2
 800675c:	b2d2      	uxtb	r2, r2
 800675e:	f042 0220 	orr.w	r2, r2, #32
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	f002 021f 	and.w	r2, r2, #31
 8006768:	2101      	movs	r1, #1
 800676a:	fa01 f202 	lsl.w	r2, r1, r2
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d13a      	bne.n	80067ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e0b2      	b.n	80068de <HAL_RCC_ClockConfig+0x2de>
 8006778:	2302      	movs	r3, #2
 800677a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	fa93 f3a3 	rbit	r3, r3
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006786:	fab3 f383 	clz	r3, r3
 800678a:	b2db      	uxtb	r3, r3
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b01      	cmp	r3, #1
 8006798:	d102      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x1a0>
 800679a:	4b31      	ldr	r3, [pc, #196]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	e00d      	b.n	80067bc <HAL_RCC_ClockConfig+0x1bc>
 80067a0:	2302      	movs	r3, #2
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	fa93 f3a3 	rbit	r3, r3
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
 80067ac:	2302      	movs	r3, #2
 80067ae:	623b      	str	r3, [r7, #32]
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	fa93 f3a3 	rbit	r3, r3
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	4b29      	ldr	r3, [pc, #164]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	2202      	movs	r2, #2
 80067be:	61ba      	str	r2, [r7, #24]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	fa92 f2a2 	rbit	r2, r2
 80067c6:	617a      	str	r2, [r7, #20]
  return result;
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	fab2 f282 	clz	r2, r2
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	f042 0220 	orr.w	r2, r2, #32
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	f002 021f 	and.w	r2, r2, #31
 80067da:	2101      	movs	r1, #1
 80067dc:	fa01 f202 	lsl.w	r2, r1, r2
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e079      	b.n	80068de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ea:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f023 0203 	bic.w	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	491a      	ldr	r1, [pc, #104]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067fc:	f7fd ffce 	bl	800479c <HAL_GetTick>
 8006800:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006802:	e00a      	b.n	800681a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006804:	f7fd ffca 	bl	800479c <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e061      	b.n	80068de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681a:	4b11      	ldr	r3, [pc, #68]	; (8006860 <HAL_RCC_ClockConfig+0x260>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f003 020c 	and.w	r2, r3, #12
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	429a      	cmp	r2, r3
 800682a:	d1eb      	bne.n	8006804 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800682c:	4b0b      	ldr	r3, [pc, #44]	; (800685c <HAL_RCC_ClockConfig+0x25c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d214      	bcs.n	8006864 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683a:	4b08      	ldr	r3, [pc, #32]	; (800685c <HAL_RCC_ClockConfig+0x25c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f023 0207 	bic.w	r2, r3, #7
 8006842:	4906      	ldr	r1, [pc, #24]	; (800685c <HAL_RCC_ClockConfig+0x25c>)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	4313      	orrs	r3, r2
 8006848:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800684a:	4b04      	ldr	r3, [pc, #16]	; (800685c <HAL_RCC_ClockConfig+0x25c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d005      	beq.n	8006864 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e040      	b.n	80068de <HAL_RCC_ClockConfig+0x2de>
 800685c:	40022000 	.word	0x40022000
 8006860:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d008      	beq.n	8006882 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006870:	4b1d      	ldr	r3, [pc, #116]	; (80068e8 <HAL_RCC_ClockConfig+0x2e8>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	491a      	ldr	r1, [pc, #104]	; (80068e8 <HAL_RCC_ClockConfig+0x2e8>)
 800687e:	4313      	orrs	r3, r2
 8006880:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800688e:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <HAL_RCC_ClockConfig+0x2e8>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	4912      	ldr	r1, [pc, #72]	; (80068e8 <HAL_RCC_ClockConfig+0x2e8>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80068a2:	f000 f829 	bl	80068f8 <HAL_RCC_GetSysClockFreq>
 80068a6:	4601      	mov	r1, r0
 80068a8:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <HAL_RCC_ClockConfig+0x2e8>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068b0:	22f0      	movs	r2, #240	; 0xf0
 80068b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	fa92 f2a2 	rbit	r2, r2
 80068ba:	60fa      	str	r2, [r7, #12]
  return result;
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	fab2 f282 	clz	r2, r2
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	40d3      	lsrs	r3, r2
 80068c6:	4a09      	ldr	r2, [pc, #36]	; (80068ec <HAL_RCC_ClockConfig+0x2ec>)
 80068c8:	5cd3      	ldrb	r3, [r2, r3]
 80068ca:	fa21 f303 	lsr.w	r3, r1, r3
 80068ce:	4a08      	ldr	r2, [pc, #32]	; (80068f0 <HAL_RCC_ClockConfig+0x2f0>)
 80068d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80068d2:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <HAL_RCC_ClockConfig+0x2f4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fd ff1c 	bl	8004714 <HAL_InitTick>
  
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3778      	adds	r7, #120	; 0x78
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40021000 	.word	0x40021000
 80068ec:	08009d54 	.word	0x08009d54
 80068f0:	20000168 	.word	0x20000168
 80068f4:	2000016c 	.word	0x2000016c

080068f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b08b      	sub	sp, #44	; 0x2c
 80068fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	2300      	movs	r3, #0
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	2300      	movs	r3, #0
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006912:	4b29      	ldr	r3, [pc, #164]	; (80069b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f003 030c 	and.w	r3, r3, #12
 800691e:	2b04      	cmp	r3, #4
 8006920:	d002      	beq.n	8006928 <HAL_RCC_GetSysClockFreq+0x30>
 8006922:	2b08      	cmp	r3, #8
 8006924:	d003      	beq.n	800692e <HAL_RCC_GetSysClockFreq+0x36>
 8006926:	e03c      	b.n	80069a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006928:	4b24      	ldr	r3, [pc, #144]	; (80069bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800692a:	623b      	str	r3, [r7, #32]
      break;
 800692c:	e03c      	b.n	80069a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006934:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006938:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	fa92 f2a2 	rbit	r2, r2
 8006940:	607a      	str	r2, [r7, #4]
  return result;
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	fab2 f282 	clz	r2, r2
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	40d3      	lsrs	r3, r2
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800694e:	5cd3      	ldrb	r3, [r2, r3]
 8006950:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006952:	4b19      	ldr	r3, [pc, #100]	; (80069b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	220f      	movs	r2, #15
 800695c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	fa92 f2a2 	rbit	r2, r2
 8006964:	60fa      	str	r2, [r7, #12]
  return result;
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	fab2 f282 	clz	r2, r2
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	40d3      	lsrs	r3, r2
 8006970:	4a14      	ldr	r2, [pc, #80]	; (80069c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006972:	5cd3      	ldrb	r3, [r2, r3]
 8006974:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d008      	beq.n	8006992 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006980:	4a0e      	ldr	r2, [pc, #56]	; (80069bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	fbb2 f2f3 	udiv	r2, r2, r3
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	fb02 f303 	mul.w	r3, r2, r3
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
 8006990:	e004      	b.n	800699c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4a0c      	ldr	r2, [pc, #48]	; (80069c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	623b      	str	r3, [r7, #32]
      break;
 80069a0:	e002      	b.n	80069a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80069a2:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <HAL_RCC_GetSysClockFreq+0xd4>)
 80069a4:	623b      	str	r3, [r7, #32]
      break;
 80069a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069a8:	6a3b      	ldr	r3, [r7, #32]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	372c      	adds	r7, #44	; 0x2c
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40021000 	.word	0x40021000
 80069bc:	00f42400 	.word	0x00f42400
 80069c0:	08009d64 	.word	0x08009d64
 80069c4:	08009d74 	.word	0x08009d74
 80069c8:	003d0900 	.word	0x003d0900
 80069cc:	007a1200 	.word	0x007a1200

080069d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b092      	sub	sp, #72	; 0x48
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 80d4 	beq.w	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069f4:	4b4e      	ldr	r3, [pc, #312]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d10e      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a00:	4b4b      	ldr	r3, [pc, #300]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	4a4a      	ldr	r2, [pc, #296]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0a:	61d3      	str	r3, [r2, #28]
 8006a0c:	4b48      	ldr	r3, [pc, #288]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a1e:	4b45      	ldr	r3, [pc, #276]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d118      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a2a:	4b42      	ldr	r3, [pc, #264]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a41      	ldr	r2, [pc, #260]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a36:	f7fd feb1 	bl	800479c <HAL_GetTick>
 8006a3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3c:	e008      	b.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a3e:	f7fd fead 	bl	800479c <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b64      	cmp	r3, #100	; 0x64
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e12d      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a50:	4b38      	ldr	r3, [pc, #224]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0f0      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a5c:	4b34      	ldr	r3, [pc, #208]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 8084 	beq.w	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d07c      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a7c:	4b2c      	ldr	r3, [pc, #176]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	fa93 f3a3 	rbit	r3, r3
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a96:	fab3 f383 	clz	r3, r3
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	4b26      	ldr	r3, [pc, #152]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006aae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	fa93 f3a3 	rbit	r3, r3
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006aba:	fab3 f383 	clz	r3, r3
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	461a      	mov	r2, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ace:	4a18      	ldr	r2, [pc, #96]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d04b      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ade:	f7fd fe5d 	bl	800479c <HAL_GetTick>
 8006ae2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae4:	e00a      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae6:	f7fd fe59 	bl	800479c <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d901      	bls.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e0d7      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006afc:	2302      	movs	r3, #2
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	fa93 f3a3 	rbit	r3, r3
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
 8006b08:	2302      	movs	r3, #2
 8006b0a:	623b      	str	r3, [r7, #32]
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	fa93 f3a3 	rbit	r3, r3
 8006b12:	61fb      	str	r3, [r7, #28]
  return result;
 8006b14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b16:	fab3 f383 	clz	r3, r3
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f043 0302 	orr.w	r3, r3, #2
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d108      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006b2a:	4b01      	ldr	r3, [pc, #4]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	e00d      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006b30:	40021000 	.word	0x40021000
 8006b34:	40007000 	.word	0x40007000
 8006b38:	10908100 	.word	0x10908100
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	fa93 f3a3 	rbit	r3, r3
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	4b5a      	ldr	r3, [pc, #360]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	613a      	str	r2, [r7, #16]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	fa92 f2a2 	rbit	r2, r2
 8006b56:	60fa      	str	r2, [r7, #12]
  return result;
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	fab2 f282 	clz	r2, r2
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	f002 021f 	and.w	r2, r2, #31
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b70:	4013      	ands	r3, r2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0b7      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006b76:	4b4f      	ldr	r3, [pc, #316]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	494c      	ldr	r1, [pc, #304]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d105      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b90:	4b48      	ldr	r3, [pc, #288]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	4a47      	ldr	r2, [pc, #284]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d008      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ba8:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	f023 0203 	bic.w	r2, r3, #3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	493f      	ldr	r1, [pc, #252]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d008      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bc6:	4b3b      	ldr	r3, [pc, #236]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	4938      	ldr	r1, [pc, #224]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006be4:	4b33      	ldr	r3, [pc, #204]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	4930      	ldr	r1, [pc, #192]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d008      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c02:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	f023 0210 	bic.w	r2, r3, #16
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	4929      	ldr	r1, [pc, #164]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006c20:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	4921      	ldr	r1, [pc, #132]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c3e:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	f023 0220 	bic.w	r2, r3, #32
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	491a      	ldr	r1, [pc, #104]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d008      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006c5c:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	4912      	ldr	r1, [pc, #72]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d008      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8006c7a:	4b0e      	ldr	r3, [pc, #56]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	490b      	ldr	r1, [pc, #44]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	4903      	ldr	r1, [pc, #12]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3748      	adds	r7, #72	; 0x48
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40021000 	.word	0x40021000

08006cb8 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e073      	b.n	8006db2 <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7fd fb27 	bl	800435c <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8006d1c:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006d44:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6859      	ldr	r1, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8006d58:	4b18      	ldr	r3, [pc, #96]	; (8006dbc <HAL_SDADC_Init+0x104>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d00f      	beq.n	8006d88 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8006d68:	4b14      	ldr	r3, [pc, #80]	; (8006dbc <HAL_SDADC_Init+0x104>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a13      	ldr	r2, [pc, #76]	; (8006dbc <HAL_SDADC_Init+0x104>)
 8006d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d72:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8006d74:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <HAL_SDADC_Init+0x104>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	490f      	ldr	r1, [pc, #60]	; (8006dbc <HAL_SDADC_Init+0x104>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8006d82:	2002      	movs	r0, #2
 8006d84:	f7fd fd16 	bl	80047b4 <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8006d98:	bf00      	nop
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f8      	bne.n	8006d9a <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	40016000 	.word	0x40016000

08006dc0 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d002      	beq.n	8006de0 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	75fb      	strb	r3, [r7, #23]
 8006dde:	e025      	b.n	8006e2c <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 faf9 	bl	80073d8 <SDADC_EnterInitMode>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d006      	beq.n	8006dfa <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	22ff      	movs	r2, #255	; 0xff
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	75fb      	strb	r3, [r7, #23]
 8006df8:	e018      	b.n	8006e2c <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8006e04:	4413      	add	r3, r2
 8006e06:	3320      	adds	r3, #32
 8006e08:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006e12:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8006e18:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006e20:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8006e22:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006e24:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 faf9 	bl	800741e <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d002      	beq.n	8006e58 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	75fb      	strb	r3, [r7, #23]
 8006e56:	e037      	b.n	8006ec8 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 fabd 	bl	80073d8 <SDADC_EnterInitMode>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d006      	beq.n	8006e72 <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	22ff      	movs	r2, #255	; 0xff
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	75fb      	strb	r3, [r7, #23]
 8006e70:	e02a      	b.n	8006ec8 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d01f      	beq.n	8006eba <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	2203      	movs	r2, #3
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	43da      	mvns	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	400a      	ands	r2, r1
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8006eb8:	e003      	b.n	8006ec2 <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	645a      	str	r2, [r3, #68]	; 0x44
      }      
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 faab 	bl	800741e <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	00080100 	.word	0x00080100

08006ed8 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d02a      	beq.n	8006f48 <HAL_SDADC_ConfigChannel+0x70>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef8:	2bff      	cmp	r3, #255	; 0xff
 8006efa:	d025      	beq.n	8006f48 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 8006f0a:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d10c      	bne.n	8006f2c <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);    
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <HAL_SDADC_ConfigChannel+0x84>)
 8006f1c:	400b      	ands	r3, r1
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006f28:	605a      	str	r2, [r3, #4]
 8006f2a:	e009      	b.n	8006f40 <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));    
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6859      	ldr	r1, [r3, #4]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	0c1b      	lsrs	r3, r3, #16
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	6812      	ldr	r2, [r2, #0]
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	619a      	str	r2, [r3, #24]
 8006f46:	e001      	b.n	8006f4c <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	ffbf0000 	.word	0xffbf0000

08006f60 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d027      	beq.n	8006fca <HAL_SDADC_InjectedConfigChannel+0x6a>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f80:	2bff      	cmp	r3, #255	; 0xff
 8006f82:	d022      	beq.n	8006fca <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	b292      	uxth	r2, r2
 8006f8c:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d108      	bne.n	8006fa6 <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;    
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0220 	orr.w	r2, r2, #32
 8006fa2:	605a      	str	r2, [r3, #4]
 8006fa4:	e007      	b.n	8006fb6 <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0220 	bic.w	r2, r2, #32
 8006fb4:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 8006fbc:	68b8      	ldr	r0, [r7, #8]
 8006fbe:	f000 fa40 	bl	8007442 <SDADC_GetInjChannelsNbr>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	621a      	str	r2, [r3, #32]
 8006fc8:	e001      	b.n	8006fce <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a12      	ldr	r2, [pc, #72]	; (8007034 <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d105      	bne.n	8006ffc <HAL_SDADC_SelectInjectedTrigger+0x24>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d102      	bne.n	8006ffc <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	73fb      	strb	r3, [r7, #15]
 8006ffa:	e014      	b.n	8007026 <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007002:	2b01      	cmp	r3, #1
 8007004:	d009      	beq.n	800701a <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800700c:	2b02      	cmp	r3, #2
 800700e:	d004      	beq.n	800701a <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8007016:	2b03      	cmp	r3, #3
 8007018:	d103      	bne.n	8007022 <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007020:	e001      	b.n	8007026 <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;    
 8007022:	2301      	movs	r3, #1
 8007024:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	40016000 	.word	0x40016000

08007038 <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d120      	bne.n	8007092 <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f9c1 	bl	80073d8 <SDADC_EnterInitMode>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d006      	beq.n	800706a <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	22ff      	movs	r2, #255	; 0xff
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	e015      	b.n	8007096 <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007078:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6859      	ldr	r1, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f9c7 	bl	800741e <SDADC_ExitInitMode>
 8007090:	e001      	b.n	8007096 <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d12c      	bne.n	8007112 <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f98d 	bl	80073d8 <SDADC_EnterInitMode>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d006      	beq.n	80070d2 <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	22ff      	movs	r2, #255	; 0xff
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	73fb      	strb	r3, [r7, #15]
 80070d0:	e021      	b.n	8007116 <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0206 	bic.w	r2, r2, #6
 80070e0:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6859      	ldr	r1, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f993 	bl	800741e <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0210 	orr.w	r2, r2, #16
 8007106:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007110:	e001      	b.n	8007116 <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8007116:	7bfb      	ldrb	r3, [r7, #15]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007130:	2b02      	cmp	r3, #2
 8007132:	d001      	beq.n	8007138 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e028      	b.n	800718a <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 8007138:	f7fd fb30 	bl	800479c <HAL_GetTick>
 800713c:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 800713e:	e010      	b.n	8007162 <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007146:	d00c      	beq.n	8007162 <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8007148:	f7fd fb28 	bl	800479c <HAL_GetTick>
 800714c:	4602      	mov	r2, r0
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d302      	bcc.n	800715e <HAL_SDADC_PollForCalibEvent+0x3e>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e013      	b.n	800718a <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b01      	cmp	r3, #1
 800716e:	d1e7      	bne.n	8007140 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0201 	orr.w	r2, r2, #1
 800717e:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 8007188:	2300      	movs	r3, #0
  }
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_SDADC_Start_IT>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start_IT(SDADC_HandleTypeDef *hsdadc)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d004      	beq.n	80071ae <HAL_SDADC_Start_IT+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d10d      	bne.n	80071ca <HAL_SDADC_Start_IT+0x38>
  {
    /* Set REOCIE and ROVRIE bits in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= (uint32_t) (SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0218 	orr.w	r2, r2, #24
 80071bc:	601a      	str	r2, [r3, #0]

    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f963 	bl	800748a <SDADC_RegConvStart>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
 80071c8:	e001      	b.n	80071ce <HAL_SDADC_Start_IT+0x3c>
  }
  else
  {
    status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <HAL_SDADC_IRQHandler>:
  * @brief  This function handles the SDADC interrupts.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
void HAL_SDADC_IRQHandler(SDADC_HandleTypeDef* hsdadc)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	60fb      	str	r3, [r7, #12]
    
  /* Check if end of regular conversion */
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b08      	cmp	r3, #8
 800720e:	d125      	bne.n	800725c <HAL_SDADC_IRQHandler+0x6a>
     ((tmp_isr & SDADC_ISR_REOCF) == SDADC_ISR_REOCF))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f003 0308 	and.w	r3, r3, #8
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8007216:	2b00      	cmp	r3, #0
 8007218:	d020      	beq.n	800725c <HAL_SDADC_IRQHandler+0x6a>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ConvCpltCallback(hsdadc);
#else
    HAL_SDADC_ConvCpltCallback(hsdadc);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fa fd8c 	bl	8001d38 <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* End of conversion if mode is not continuous and software trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 80b1 	bne.w	800738c <HAL_SDADC_IRQHandler+0x19a>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800722e:	2b00      	cmp	r3, #0
 8007230:	f040 80ac 	bne.w	800738c <HAL_SDADC_IRQHandler+0x19a>
    {
      /* Clear REOCIE and ROVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0218 	bic.w	r2, r2, #24
 8007242:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 800724a:	2b03      	cmp	r3, #3
 800724c:	d101      	bne.n	8007252 <HAL_SDADC_IRQHandler+0x60>
 800724e:	2201      	movs	r2, #1
 8007250:	e000      	b.n	8007254 <HAL_SDADC_IRQHandler+0x62>
 8007252:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800725a:	e097      	b.n	800738c <HAL_SDADC_IRQHandler+0x19a>
    }
  }
  /* Check if end of injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b02      	cmp	r3, #2
 8007268:	d136      	bne.n	80072d8 <HAL_SDADC_IRQHandler+0xe6>
          ((tmp_isr & SDADC_ISR_JEOCF) == SDADC_ISR_JEOCF))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f003 0302 	and.w	r3, r3, #2
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8007270:	2b00      	cmp	r3, #0
 8007272:	d031      	beq.n	80072d8 <HAL_SDADC_IRQHandler+0xe6>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->InjectedConvCpltCallback(hsdadc);
#else
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f89b 	bl	80073b0 <HAL_SDADC_InjectedConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	1e5a      	subs	r2, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	625a      	str	r2, [r3, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d103      	bne.n	8007294 <HAL_SDADC_IRQHandler+0xa2>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1a      	ldr	r2, [r3, #32]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* End of conversion if mode is not continuous, software trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d179      	bne.n	8007390 <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d175      	bne.n	8007390 <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d16f      	bne.n	8007390 <HAL_SDADC_IRQHandler+0x19e>
    {
      /* Clear JEOCIE and JOVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0206 	bic.w	r2, r2, #6
 80072be:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d101      	bne.n	80072ce <HAL_SDADC_IRQHandler+0xdc>
 80072ca:	2201      	movs	r2, #1
 80072cc:	e000      	b.n	80072d0 <HAL_SDADC_IRQHandler+0xde>
 80072ce:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80072d6:	e05b      	b.n	8007390 <HAL_SDADC_IRQHandler+0x19e>
    }
  }
  /* Check if end of calibration */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d11c      	bne.n	8007320 <HAL_SDADC_IRQHandler+0x12e>
          ((tmp_isr & SDADC_ISR_EOCALF) == SDADC_ISR_EOCALF))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f003 0301 	and.w	r3, r3, #1
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d017      	beq.n	8007320 <HAL_SDADC_IRQHandler+0x12e>
  {
    /* Clear EOCALIE bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0201 	bic.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	60da      	str	r2, [r3, #12]

    /* Call calibration callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->CalibrationCpltCallback(hsdadc);
#else
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f843 	bl	800739c <HAL_SDADC_CalibrationCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update SDADC state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800731e:	e038      	b.n	8007392 <HAL_SDADC_IRQHandler+0x1a0>
  }
  /* Check if overrun occurs during regular conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0310 	and.w	r3, r3, #16
 800732a:	2b10      	cmp	r3, #16
 800732c:	d113      	bne.n	8007356 <HAL_SDADC_IRQHandler+0x164>
          ((tmp_isr & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f003 0310 	and.w	r3, r3, #16
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00e      	beq.n	8007356 <HAL_SDADC_IRQHandler+0x164>
  {
    /* Set CLRROVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0210 	orr.w	r2, r2, #16
 8007346:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f838 	bl	80073c4 <HAL_SDADC_ErrorCallback>
 8007354:	e01d      	b.n	8007392 <HAL_SDADC_IRQHandler+0x1a0>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  }
  /* Check if overrun occurs during injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0304 	and.w	r3, r3, #4
 8007360:	2b04      	cmp	r3, #4
 8007362:	d117      	bne.n	8007394 <HAL_SDADC_IRQHandler+0x1a2>
          ((tmp_isr & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f003 0304 	and.w	r3, r3, #4
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 800736a:	2b00      	cmp	r3, #0
 800736c:	d012      	beq.n	8007394 <HAL_SDADC_IRQHandler+0x1a2>
  {
    /* Set CLRJOVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f042 0204 	orr.w	r2, r2, #4
 800737c:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2202      	movs	r2, #2
 8007382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f81d 	bl	80073c4 <HAL_SDADC_ErrorCallback>
  else
  {
    /* No additional IRQ source */
  }
  
  return;
 800738a:	e002      	b.n	8007392 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800738c:	bf00      	nop
 800738e:	e000      	b.n	8007392 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8007390:	bf00      	nop
  return;
 8007392:	bf00      	nop
 8007394:	bf00      	nop
}
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_SDADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_CalibrationCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_CalibrationCpltCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_SDADC_InjectedConvCpltCallback>:
            using HAL_SDADC_InjectedGetValue or HAL_SDADC_InjectedMultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_InjectedConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_InjectedConvCpltCallback could be implemented in the user file.
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80073ee:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 80073f0:	f7fd f9d4 	bl	800479c <HAL_GetTick>
 80073f4:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80073f6:	e008      	b.n	800740a <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 80073f8:	f7fd f9d0 	bl	800479c <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	2bc8      	cmp	r3, #200	; 0xc8
 8007404:	d901      	bls.n	800740a <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e005      	b.n	8007416 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	daf1      	bge.n	80073f8 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007434:	601a      	str	r2, [r3, #0]
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 8007442:	b480      	push	{r7}
 8007444:	b087      	sub	sp, #28
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;
  
  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	b29b      	uxth	r3, r3
 8007452:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	e00d      	b.n	8007476 <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3301      	adds	r3, #1
 8007468:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	085b      	lsrs	r3, r3, #1
 800746e:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b08      	cmp	r3, #8
 800747a:	d9ee      	bls.n	800745a <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 800747c:	697b      	ldr	r3, [r7, #20]
}
 800747e:	4618      	mov	r0, r3
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	2b00      	cmp	r3, #0
 800749c:	d108      	bne.n	80074b0 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80074ac:	605a      	str	r2, [r3, #4]
 80074ae:	e017      	b.n	80074e0 <SDADC_RegConvStart+0x56>
  }
  else /* synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff ff91 	bl	80073d8 <SDADC_EnterInitMode>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d006      	beq.n	80074ca <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	22ff      	movs	r2, #255	; 0xff
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	73fb      	strb	r3, [r7, #15]
 80074c8:	e00a      	b.n	80074e0 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074d8:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff ff9f 	bl	800741e <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <SDADC_RegConvStart+0x6a>
 80074f0:	2203      	movs	r2, #3
 80074f2:	e000      	b.n	80074f6 <SDADC_RegConvStart+0x6c>
 80074f4:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b082      	sub	sp, #8
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e041      	b.n	800759c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d106      	bne.n	8007532 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7fc ffc9 	bl	80044c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2202      	movs	r2, #2
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3304      	adds	r3, #4
 8007542:	4619      	mov	r1, r3
 8007544:	4610      	mov	r0, r2
 8007546:	f000 fae9 	bl	8007b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d001      	beq.n	80075bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e041      	b.n	8007640 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075cc:	d01d      	beq.n	800760a <HAL_TIM_Base_Start+0x66>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1e      	ldr	r2, [pc, #120]	; (800764c <HAL_TIM_Base_Start+0xa8>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d018      	beq.n	800760a <HAL_TIM_Base_Start+0x66>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <HAL_TIM_Base_Start+0xac>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d013      	beq.n	800760a <HAL_TIM_Base_Start+0x66>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a1b      	ldr	r2, [pc, #108]	; (8007654 <HAL_TIM_Base_Start+0xb0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00e      	beq.n	800760a <HAL_TIM_Base_Start+0x66>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a19      	ldr	r2, [pc, #100]	; (8007658 <HAL_TIM_Base_Start+0xb4>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d009      	beq.n	800760a <HAL_TIM_Base_Start+0x66>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a18      	ldr	r2, [pc, #96]	; (800765c <HAL_TIM_Base_Start+0xb8>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d004      	beq.n	800760a <HAL_TIM_Base_Start+0x66>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a16      	ldr	r2, [pc, #88]	; (8007660 <HAL_TIM_Base_Start+0xbc>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d111      	bne.n	800762e <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b06      	cmp	r3, #6
 800761a:	d010      	beq.n	800763e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0201 	orr.w	r2, r2, #1
 800762a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800762c:	e007      	b.n	800763e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0201 	orr.w	r2, r2, #1
 800763c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	40000400 	.word	0x40000400
 8007650:	40000800 	.word	0x40000800
 8007654:	40000c00 	.word	0x40000c00
 8007658:	40001800 	.word	0x40001800
 800765c:	40014000 	.word	0x40014000
 8007660:	40015c00 	.word	0x40015c00

08007664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b01      	cmp	r3, #1
 8007676:	d001      	beq.n	800767c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e049      	b.n	8007710 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769c:	d01d      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x76>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a1e      	ldr	r2, [pc, #120]	; (800771c <HAL_TIM_Base_Start_IT+0xb8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d018      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x76>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1c      	ldr	r2, [pc, #112]	; (8007720 <HAL_TIM_Base_Start_IT+0xbc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x76>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1b      	ldr	r2, [pc, #108]	; (8007724 <HAL_TIM_Base_Start_IT+0xc0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00e      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x76>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a19      	ldr	r2, [pc, #100]	; (8007728 <HAL_TIM_Base_Start_IT+0xc4>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d009      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x76>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a18      	ldr	r2, [pc, #96]	; (800772c <HAL_TIM_Base_Start_IT+0xc8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d004      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x76>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a16      	ldr	r2, [pc, #88]	; (8007730 <HAL_TIM_Base_Start_IT+0xcc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d111      	bne.n	80076fe <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b06      	cmp	r3, #6
 80076ea:	d010      	beq.n	800770e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076fc:	e007      	b.n	800770e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0201 	orr.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	40000400 	.word	0x40000400
 8007720:	40000800 	.word	0x40000800
 8007724:	40000c00 	.word	0x40000c00
 8007728:	40001800 	.word	0x40001800
 800772c:	40014000 	.word	0x40014000
 8007730:	40015c00 	.word	0x40015c00

08007734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b02      	cmp	r3, #2
 8007748:	d122      	bne.n	8007790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b02      	cmp	r3, #2
 8007756:	d11b      	bne.n	8007790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f06f 0202 	mvn.w	r2, #2
 8007760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9b2 	bl	8007ae0 <HAL_TIM_IC_CaptureCallback>
 800777c:	e005      	b.n	800778a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9a4 	bl	8007acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f9b5 	bl	8007af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	2b04      	cmp	r3, #4
 800779c:	d122      	bne.n	80077e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d11b      	bne.n	80077e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0204 	mvn.w	r2, #4
 80077b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2202      	movs	r2, #2
 80077ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f988 	bl	8007ae0 <HAL_TIM_IC_CaptureCallback>
 80077d0:	e005      	b.n	80077de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f97a 	bl	8007acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f98b 	bl	8007af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d122      	bne.n	8007838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d11b      	bne.n	8007838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f06f 0208 	mvn.w	r2, #8
 8007808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2204      	movs	r2, #4
 800780e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f95e 	bl	8007ae0 <HAL_TIM_IC_CaptureCallback>
 8007824:	e005      	b.n	8007832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f950 	bl	8007acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f961 	bl	8007af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f003 0310 	and.w	r3, r3, #16
 8007842:	2b10      	cmp	r3, #16
 8007844:	d122      	bne.n	800788c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f003 0310 	and.w	r3, r3, #16
 8007850:	2b10      	cmp	r3, #16
 8007852:	d11b      	bne.n	800788c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f06f 0210 	mvn.w	r2, #16
 800785c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2208      	movs	r2, #8
 8007862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f934 	bl	8007ae0 <HAL_TIM_IC_CaptureCallback>
 8007878:	e005      	b.n	8007886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f926 	bl	8007acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f937 	bl	8007af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b01      	cmp	r3, #1
 8007898:	d10e      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d107      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0201 	mvn.w	r2, #1
 80078b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fa fb60 	bl	8001f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d10e      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d0:	2b80      	cmp	r3, #128	; 0x80
 80078d2:	d107      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 face 	bl	8007e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ee:	2b40      	cmp	r3, #64	; 0x40
 80078f0:	d10e      	bne.n	8007910 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fc:	2b40      	cmp	r3, #64	; 0x40
 80078fe:	d107      	bne.n	8007910 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f8fc 	bl	8007b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b20      	cmp	r3, #32
 800791c:	d10e      	bne.n	800793c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0320 	and.w	r3, r3, #32
 8007928:	2b20      	cmp	r3, #32
 800792a:	d107      	bne.n	800793c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0220 	mvn.w	r2, #32
 8007934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa98 	bl	8007e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800793c:	bf00      	nop
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_TIM_ConfigClockSource+0x18>
 8007958:	2302      	movs	r3, #2
 800795a:	e0b3      	b.n	8007ac4 <HAL_TIM_ConfigClockSource+0x180>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800797a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007982:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007994:	d03e      	beq.n	8007a14 <HAL_TIM_ConfigClockSource+0xd0>
 8007996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799a:	f200 8087 	bhi.w	8007aac <HAL_TIM_ConfigClockSource+0x168>
 800799e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a2:	f000 8085 	beq.w	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079aa:	d87f      	bhi.n	8007aac <HAL_TIM_ConfigClockSource+0x168>
 80079ac:	2b70      	cmp	r3, #112	; 0x70
 80079ae:	d01a      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0xa2>
 80079b0:	2b70      	cmp	r3, #112	; 0x70
 80079b2:	d87b      	bhi.n	8007aac <HAL_TIM_ConfigClockSource+0x168>
 80079b4:	2b60      	cmp	r3, #96	; 0x60
 80079b6:	d050      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x116>
 80079b8:	2b60      	cmp	r3, #96	; 0x60
 80079ba:	d877      	bhi.n	8007aac <HAL_TIM_ConfigClockSource+0x168>
 80079bc:	2b50      	cmp	r3, #80	; 0x50
 80079be:	d03c      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0xf6>
 80079c0:	2b50      	cmp	r3, #80	; 0x50
 80079c2:	d873      	bhi.n	8007aac <HAL_TIM_ConfigClockSource+0x168>
 80079c4:	2b40      	cmp	r3, #64	; 0x40
 80079c6:	d058      	beq.n	8007a7a <HAL_TIM_ConfigClockSource+0x136>
 80079c8:	2b40      	cmp	r3, #64	; 0x40
 80079ca:	d86f      	bhi.n	8007aac <HAL_TIM_ConfigClockSource+0x168>
 80079cc:	2b30      	cmp	r3, #48	; 0x30
 80079ce:	d064      	beq.n	8007a9a <HAL_TIM_ConfigClockSource+0x156>
 80079d0:	2b30      	cmp	r3, #48	; 0x30
 80079d2:	d86b      	bhi.n	8007aac <HAL_TIM_ConfigClockSource+0x168>
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d060      	beq.n	8007a9a <HAL_TIM_ConfigClockSource+0x156>
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d867      	bhi.n	8007aac <HAL_TIM_ConfigClockSource+0x168>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d05c      	beq.n	8007a9a <HAL_TIM_ConfigClockSource+0x156>
 80079e0:	2b10      	cmp	r3, #16
 80079e2:	d05a      	beq.n	8007a9a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80079e4:	e062      	b.n	8007aac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	6899      	ldr	r1, [r3, #8]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f000 f9a5 	bl	8007d44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a08:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	609a      	str	r2, [r3, #8]
      break;
 8007a12:	e04e      	b.n	8007ab2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	6899      	ldr	r1, [r3, #8]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f000 f98e 	bl	8007d44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a36:	609a      	str	r2, [r3, #8]
      break;
 8007a38:	e03b      	b.n	8007ab2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	6859      	ldr	r1, [r3, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f000 f902 	bl	8007c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2150      	movs	r1, #80	; 0x50
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f95b 	bl	8007d0e <TIM_ITRx_SetConfig>
      break;
 8007a58:	e02b      	b.n	8007ab2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6818      	ldr	r0, [r3, #0]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	6859      	ldr	r1, [r3, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f000 f921 	bl	8007cae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2160      	movs	r1, #96	; 0x60
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 f94b 	bl	8007d0e <TIM_ITRx_SetConfig>
      break;
 8007a78:	e01b      	b.n	8007ab2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6859      	ldr	r1, [r3, #4]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	461a      	mov	r2, r3
 8007a88:	f000 f8e2 	bl	8007c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2140      	movs	r1, #64	; 0x40
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 f93b 	bl	8007d0e <TIM_ITRx_SetConfig>
      break;
 8007a98:	e00b      	b.n	8007ab2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f000 f932 	bl	8007d0e <TIM_ITRx_SetConfig>
        break;
 8007aaa:	e002      	b.n	8007ab2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007aac:	bf00      	nop
 8007aae:	e000      	b.n	8007ab2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ab0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b32:	d00f      	beq.n	8007b54 <TIM_Base_SetConfig+0x38>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a3c      	ldr	r2, [pc, #240]	; (8007c28 <TIM_Base_SetConfig+0x10c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d00b      	beq.n	8007b54 <TIM_Base_SetConfig+0x38>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a3b      	ldr	r2, [pc, #236]	; (8007c2c <TIM_Base_SetConfig+0x110>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d007      	beq.n	8007b54 <TIM_Base_SetConfig+0x38>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a3a      	ldr	r2, [pc, #232]	; (8007c30 <TIM_Base_SetConfig+0x114>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d003      	beq.n	8007b54 <TIM_Base_SetConfig+0x38>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a39      	ldr	r2, [pc, #228]	; (8007c34 <TIM_Base_SetConfig+0x118>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d108      	bne.n	8007b66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6c:	d027      	beq.n	8007bbe <TIM_Base_SetConfig+0xa2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a2d      	ldr	r2, [pc, #180]	; (8007c28 <TIM_Base_SetConfig+0x10c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d023      	beq.n	8007bbe <TIM_Base_SetConfig+0xa2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a2c      	ldr	r2, [pc, #176]	; (8007c2c <TIM_Base_SetConfig+0x110>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d01f      	beq.n	8007bbe <TIM_Base_SetConfig+0xa2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a2b      	ldr	r2, [pc, #172]	; (8007c30 <TIM_Base_SetConfig+0x114>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d01b      	beq.n	8007bbe <TIM_Base_SetConfig+0xa2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a2b      	ldr	r2, [pc, #172]	; (8007c38 <TIM_Base_SetConfig+0x11c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d017      	beq.n	8007bbe <TIM_Base_SetConfig+0xa2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a2a      	ldr	r2, [pc, #168]	; (8007c3c <TIM_Base_SetConfig+0x120>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d013      	beq.n	8007bbe <TIM_Base_SetConfig+0xa2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a29      	ldr	r2, [pc, #164]	; (8007c40 <TIM_Base_SetConfig+0x124>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00f      	beq.n	8007bbe <TIM_Base_SetConfig+0xa2>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a28      	ldr	r2, [pc, #160]	; (8007c44 <TIM_Base_SetConfig+0x128>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00b      	beq.n	8007bbe <TIM_Base_SetConfig+0xa2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a27      	ldr	r2, [pc, #156]	; (8007c48 <TIM_Base_SetConfig+0x12c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d007      	beq.n	8007bbe <TIM_Base_SetConfig+0xa2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a26      	ldr	r2, [pc, #152]	; (8007c4c <TIM_Base_SetConfig+0x130>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d003      	beq.n	8007bbe <TIM_Base_SetConfig+0xa2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a1e      	ldr	r2, [pc, #120]	; (8007c34 <TIM_Base_SetConfig+0x118>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d108      	bne.n	8007bd0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a13      	ldr	r2, [pc, #76]	; (8007c44 <TIM_Base_SetConfig+0x128>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d007      	beq.n	8007c0c <TIM_Base_SetConfig+0xf0>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a12      	ldr	r2, [pc, #72]	; (8007c48 <TIM_Base_SetConfig+0x12c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d003      	beq.n	8007c0c <TIM_Base_SetConfig+0xf0>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <TIM_Base_SetConfig+0x130>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d103      	bne.n	8007c14 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	691a      	ldr	r2, [r3, #16]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	615a      	str	r2, [r3, #20]
}
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40000400 	.word	0x40000400
 8007c2c:	40000800 	.word	0x40000800
 8007c30:	40000c00 	.word	0x40000c00
 8007c34:	40015c00 	.word	0x40015c00
 8007c38:	40001800 	.word	0x40001800
 8007c3c:	40001c00 	.word	0x40001c00
 8007c40:	40002000 	.word	0x40002000
 8007c44:	40014000 	.word	0x40014000
 8007c48:	40014400 	.word	0x40014400
 8007c4c:	40014800 	.word	0x40014800

08007c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	f023 0201 	bic.w	r2, r3, #1
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f023 030a 	bic.w	r3, r3, #10
 8007c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	621a      	str	r2, [r3, #32]
}
 8007ca2:	bf00      	nop
 8007ca4:	371c      	adds	r7, #28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b087      	sub	sp, #28
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f023 0210 	bic.w	r2, r3, #16
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	031b      	lsls	r3, r3, #12
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	621a      	str	r2, [r3, #32]
}
 8007d02:	bf00      	nop
 8007d04:	371c      	adds	r7, #28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f043 0307 	orr.w	r3, r3, #7
 8007d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	609a      	str	r2, [r3, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
 8007d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	021a      	lsls	r2, r3, #8
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	431a      	orrs	r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	609a      	str	r2, [r3, #8]
}
 8007d78:	bf00      	nop
 8007d7a:	371c      	adds	r7, #28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e055      	b.n	8007e48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2202      	movs	r2, #2
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dde:	d01d      	beq.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a1b      	ldr	r2, [pc, #108]	; (8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d018      	beq.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a1a      	ldr	r2, [pc, #104]	; (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d013      	beq.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a18      	ldr	r2, [pc, #96]	; (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00e      	beq.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d009      	beq.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a15      	ldr	r2, [pc, #84]	; (8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d004      	beq.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a14      	ldr	r2, [pc, #80]	; (8007e68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d10c      	bne.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	40000400 	.word	0x40000400
 8007e58:	40000800 	.word	0x40000800
 8007e5c:	40000c00 	.word	0x40000c00
 8007e60:	40001800 	.word	0x40001800
 8007e64:	40014000 	.word	0x40014000
 8007e68:	40015c00 	.word	0x40015c00

08007e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <__errno>:
 8007e94:	4b01      	ldr	r3, [pc, #4]	; (8007e9c <__errno+0x8>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	20000174 	.word	0x20000174

08007ea0 <__libc_init_array>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	4d0d      	ldr	r5, [pc, #52]	; (8007ed8 <__libc_init_array+0x38>)
 8007ea4:	4c0d      	ldr	r4, [pc, #52]	; (8007edc <__libc_init_array+0x3c>)
 8007ea6:	1b64      	subs	r4, r4, r5
 8007ea8:	10a4      	asrs	r4, r4, #2
 8007eaa:	2600      	movs	r6, #0
 8007eac:	42a6      	cmp	r6, r4
 8007eae:	d109      	bne.n	8007ec4 <__libc_init_array+0x24>
 8007eb0:	4d0b      	ldr	r5, [pc, #44]	; (8007ee0 <__libc_init_array+0x40>)
 8007eb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ee4 <__libc_init_array+0x44>)
 8007eb4:	f001 fe62 	bl	8009b7c <_init>
 8007eb8:	1b64      	subs	r4, r4, r5
 8007eba:	10a4      	asrs	r4, r4, #2
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	42a6      	cmp	r6, r4
 8007ec0:	d105      	bne.n	8007ece <__libc_init_array+0x2e>
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec8:	4798      	blx	r3
 8007eca:	3601      	adds	r6, #1
 8007ecc:	e7ee      	b.n	8007eac <__libc_init_array+0xc>
 8007ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed2:	4798      	blx	r3
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	e7f2      	b.n	8007ebe <__libc_init_array+0x1e>
 8007ed8:	08009df8 	.word	0x08009df8
 8007edc:	08009df8 	.word	0x08009df8
 8007ee0:	08009df8 	.word	0x08009df8
 8007ee4:	08009dfc 	.word	0x08009dfc

08007ee8 <memset>:
 8007ee8:	4402      	add	r2, r0
 8007eea:	4603      	mov	r3, r0
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d100      	bne.n	8007ef2 <memset+0xa>
 8007ef0:	4770      	bx	lr
 8007ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef6:	e7f9      	b.n	8007eec <memset+0x4>

08007ef8 <siprintf>:
 8007ef8:	b40e      	push	{r1, r2, r3}
 8007efa:	b500      	push	{lr}
 8007efc:	b09c      	sub	sp, #112	; 0x70
 8007efe:	ab1d      	add	r3, sp, #116	; 0x74
 8007f00:	9002      	str	r0, [sp, #8]
 8007f02:	9006      	str	r0, [sp, #24]
 8007f04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f08:	4809      	ldr	r0, [pc, #36]	; (8007f30 <siprintf+0x38>)
 8007f0a:	9107      	str	r1, [sp, #28]
 8007f0c:	9104      	str	r1, [sp, #16]
 8007f0e:	4909      	ldr	r1, [pc, #36]	; (8007f34 <siprintf+0x3c>)
 8007f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f14:	9105      	str	r1, [sp, #20]
 8007f16:	6800      	ldr	r0, [r0, #0]
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	a902      	add	r1, sp, #8
 8007f1c:	f000 f8c2 	bl	80080a4 <_svfiprintf_r>
 8007f20:	9b02      	ldr	r3, [sp, #8]
 8007f22:	2200      	movs	r2, #0
 8007f24:	701a      	strb	r2, [r3, #0]
 8007f26:	b01c      	add	sp, #112	; 0x70
 8007f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f2c:	b003      	add	sp, #12
 8007f2e:	4770      	bx	lr
 8007f30:	20000174 	.word	0x20000174
 8007f34:	ffff0208 	.word	0xffff0208

08007f38 <strcat>:
 8007f38:	b510      	push	{r4, lr}
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	7814      	ldrb	r4, [r2, #0]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	3201      	adds	r2, #1
 8007f42:	2c00      	cmp	r4, #0
 8007f44:	d1fa      	bne.n	8007f3c <strcat+0x4>
 8007f46:	3b01      	subs	r3, #1
 8007f48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	d1f9      	bne.n	8007f48 <strcat+0x10>
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <strlcat>:
 8007f56:	b570      	push	{r4, r5, r6, lr}
 8007f58:	4604      	mov	r4, r0
 8007f5a:	1916      	adds	r6, r2, r4
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	4621      	mov	r1, r4
 8007f60:	42b1      	cmp	r1, r6
 8007f62:	460b      	mov	r3, r1
 8007f64:	d106      	bne.n	8007f74 <strlcat+0x1e>
 8007f66:	1b1c      	subs	r4, r3, r4
 8007f68:	1b12      	subs	r2, r2, r4
 8007f6a:	d108      	bne.n	8007f7e <strlcat+0x28>
 8007f6c:	f7f8 f930 	bl	80001d0 <strlen>
 8007f70:	4420      	add	r0, r4
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
 8007f74:	781d      	ldrb	r5, [r3, #0]
 8007f76:	3101      	adds	r1, #1
 8007f78:	2d00      	cmp	r5, #0
 8007f7a:	d1f1      	bne.n	8007f60 <strlcat+0xa>
 8007f7c:	e7f3      	b.n	8007f66 <strlcat+0x10>
 8007f7e:	4606      	mov	r6, r0
 8007f80:	4631      	mov	r1, r6
 8007f82:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007f86:	b915      	cbnz	r5, 8007f8e <strlcat+0x38>
 8007f88:	701d      	strb	r5, [r3, #0]
 8007f8a:	1a08      	subs	r0, r1, r0
 8007f8c:	e7f0      	b.n	8007f70 <strlcat+0x1a>
 8007f8e:	2a01      	cmp	r2, #1
 8007f90:	bf1c      	itt	ne
 8007f92:	f803 5b01 	strbne.w	r5, [r3], #1
 8007f96:	f102 32ff 	addne.w	r2, r2, #4294967295
 8007f9a:	e7f1      	b.n	8007f80 <strlcat+0x2a>

08007f9c <strlcpy>:
 8007f9c:	b510      	push	{r4, lr}
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	b162      	cbz	r2, 8007fbc <strlcpy+0x20>
 8007fa2:	3a01      	subs	r2, #1
 8007fa4:	d008      	beq.n	8007fb8 <strlcpy+0x1c>
 8007fa6:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007faa:	f800 4b01 	strb.w	r4, [r0], #1
 8007fae:	2c00      	cmp	r4, #0
 8007fb0:	d1f7      	bne.n	8007fa2 <strlcpy+0x6>
 8007fb2:	1a58      	subs	r0, r3, r1
 8007fb4:	3801      	subs	r0, #1
 8007fb6:	bd10      	pop	{r4, pc}
 8007fb8:	2200      	movs	r2, #0
 8007fba:	7002      	strb	r2, [r0, #0]
 8007fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc0:	2a00      	cmp	r2, #0
 8007fc2:	d1fb      	bne.n	8007fbc <strlcpy+0x20>
 8007fc4:	e7f5      	b.n	8007fb2 <strlcpy+0x16>

08007fc6 <strncpy>:
 8007fc6:	b510      	push	{r4, lr}
 8007fc8:	3901      	subs	r1, #1
 8007fca:	4603      	mov	r3, r0
 8007fcc:	b132      	cbz	r2, 8007fdc <strncpy+0x16>
 8007fce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007fd2:	f803 4b01 	strb.w	r4, [r3], #1
 8007fd6:	3a01      	subs	r2, #1
 8007fd8:	2c00      	cmp	r4, #0
 8007fda:	d1f7      	bne.n	8007fcc <strncpy+0x6>
 8007fdc:	441a      	add	r2, r3
 8007fde:	2100      	movs	r1, #0
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d100      	bne.n	8007fe6 <strncpy+0x20>
 8007fe4:	bd10      	pop	{r4, pc}
 8007fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fea:	e7f9      	b.n	8007fe0 <strncpy+0x1a>

08007fec <__ssputs_r>:
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	688e      	ldr	r6, [r1, #8]
 8007ff2:	429e      	cmp	r6, r3
 8007ff4:	4682      	mov	sl, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	4690      	mov	r8, r2
 8007ffa:	461f      	mov	r7, r3
 8007ffc:	d838      	bhi.n	8008070 <__ssputs_r+0x84>
 8007ffe:	898a      	ldrh	r2, [r1, #12]
 8008000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008004:	d032      	beq.n	800806c <__ssputs_r+0x80>
 8008006:	6825      	ldr	r5, [r4, #0]
 8008008:	6909      	ldr	r1, [r1, #16]
 800800a:	eba5 0901 	sub.w	r9, r5, r1
 800800e:	6965      	ldr	r5, [r4, #20]
 8008010:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008014:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008018:	3301      	adds	r3, #1
 800801a:	444b      	add	r3, r9
 800801c:	106d      	asrs	r5, r5, #1
 800801e:	429d      	cmp	r5, r3
 8008020:	bf38      	it	cc
 8008022:	461d      	movcc	r5, r3
 8008024:	0553      	lsls	r3, r2, #21
 8008026:	d531      	bpl.n	800808c <__ssputs_r+0xa0>
 8008028:	4629      	mov	r1, r5
 800802a:	f000 fb47 	bl	80086bc <_malloc_r>
 800802e:	4606      	mov	r6, r0
 8008030:	b950      	cbnz	r0, 8008048 <__ssputs_r+0x5c>
 8008032:	230c      	movs	r3, #12
 8008034:	f8ca 3000 	str.w	r3, [sl]
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	f04f 30ff 	mov.w	r0, #4294967295
 8008044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008048:	6921      	ldr	r1, [r4, #16]
 800804a:	464a      	mov	r2, r9
 800804c:	f000 fabe 	bl	80085cc <memcpy>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	6126      	str	r6, [r4, #16]
 800805e:	6165      	str	r5, [r4, #20]
 8008060:	444e      	add	r6, r9
 8008062:	eba5 0509 	sub.w	r5, r5, r9
 8008066:	6026      	str	r6, [r4, #0]
 8008068:	60a5      	str	r5, [r4, #8]
 800806a:	463e      	mov	r6, r7
 800806c:	42be      	cmp	r6, r7
 800806e:	d900      	bls.n	8008072 <__ssputs_r+0x86>
 8008070:	463e      	mov	r6, r7
 8008072:	4632      	mov	r2, r6
 8008074:	6820      	ldr	r0, [r4, #0]
 8008076:	4641      	mov	r1, r8
 8008078:	f000 fab6 	bl	80085e8 <memmove>
 800807c:	68a3      	ldr	r3, [r4, #8]
 800807e:	6822      	ldr	r2, [r4, #0]
 8008080:	1b9b      	subs	r3, r3, r6
 8008082:	4432      	add	r2, r6
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6022      	str	r2, [r4, #0]
 8008088:	2000      	movs	r0, #0
 800808a:	e7db      	b.n	8008044 <__ssputs_r+0x58>
 800808c:	462a      	mov	r2, r5
 800808e:	f000 fb6f 	bl	8008770 <_realloc_r>
 8008092:	4606      	mov	r6, r0
 8008094:	2800      	cmp	r0, #0
 8008096:	d1e1      	bne.n	800805c <__ssputs_r+0x70>
 8008098:	6921      	ldr	r1, [r4, #16]
 800809a:	4650      	mov	r0, sl
 800809c:	f000 fabe 	bl	800861c <_free_r>
 80080a0:	e7c7      	b.n	8008032 <__ssputs_r+0x46>
	...

080080a4 <_svfiprintf_r>:
 80080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	4698      	mov	r8, r3
 80080aa:	898b      	ldrh	r3, [r1, #12]
 80080ac:	061b      	lsls	r3, r3, #24
 80080ae:	b09d      	sub	sp, #116	; 0x74
 80080b0:	4607      	mov	r7, r0
 80080b2:	460d      	mov	r5, r1
 80080b4:	4614      	mov	r4, r2
 80080b6:	d50e      	bpl.n	80080d6 <_svfiprintf_r+0x32>
 80080b8:	690b      	ldr	r3, [r1, #16]
 80080ba:	b963      	cbnz	r3, 80080d6 <_svfiprintf_r+0x32>
 80080bc:	2140      	movs	r1, #64	; 0x40
 80080be:	f000 fafd 	bl	80086bc <_malloc_r>
 80080c2:	6028      	str	r0, [r5, #0]
 80080c4:	6128      	str	r0, [r5, #16]
 80080c6:	b920      	cbnz	r0, 80080d2 <_svfiprintf_r+0x2e>
 80080c8:	230c      	movs	r3, #12
 80080ca:	603b      	str	r3, [r7, #0]
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295
 80080d0:	e0d1      	b.n	8008276 <_svfiprintf_r+0x1d2>
 80080d2:	2340      	movs	r3, #64	; 0x40
 80080d4:	616b      	str	r3, [r5, #20]
 80080d6:	2300      	movs	r3, #0
 80080d8:	9309      	str	r3, [sp, #36]	; 0x24
 80080da:	2320      	movs	r3, #32
 80080dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e4:	2330      	movs	r3, #48	; 0x30
 80080e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008290 <_svfiprintf_r+0x1ec>
 80080ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ee:	f04f 0901 	mov.w	r9, #1
 80080f2:	4623      	mov	r3, r4
 80080f4:	469a      	mov	sl, r3
 80080f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080fa:	b10a      	cbz	r2, 8008100 <_svfiprintf_r+0x5c>
 80080fc:	2a25      	cmp	r2, #37	; 0x25
 80080fe:	d1f9      	bne.n	80080f4 <_svfiprintf_r+0x50>
 8008100:	ebba 0b04 	subs.w	fp, sl, r4
 8008104:	d00b      	beq.n	800811e <_svfiprintf_r+0x7a>
 8008106:	465b      	mov	r3, fp
 8008108:	4622      	mov	r2, r4
 800810a:	4629      	mov	r1, r5
 800810c:	4638      	mov	r0, r7
 800810e:	f7ff ff6d 	bl	8007fec <__ssputs_r>
 8008112:	3001      	adds	r0, #1
 8008114:	f000 80aa 	beq.w	800826c <_svfiprintf_r+0x1c8>
 8008118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800811a:	445a      	add	r2, fp
 800811c:	9209      	str	r2, [sp, #36]	; 0x24
 800811e:	f89a 3000 	ldrb.w	r3, [sl]
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 80a2 	beq.w	800826c <_svfiprintf_r+0x1c8>
 8008128:	2300      	movs	r3, #0
 800812a:	f04f 32ff 	mov.w	r2, #4294967295
 800812e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008132:	f10a 0a01 	add.w	sl, sl, #1
 8008136:	9304      	str	r3, [sp, #16]
 8008138:	9307      	str	r3, [sp, #28]
 800813a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800813e:	931a      	str	r3, [sp, #104]	; 0x68
 8008140:	4654      	mov	r4, sl
 8008142:	2205      	movs	r2, #5
 8008144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008148:	4851      	ldr	r0, [pc, #324]	; (8008290 <_svfiprintf_r+0x1ec>)
 800814a:	f7f8 f849 	bl	80001e0 <memchr>
 800814e:	9a04      	ldr	r2, [sp, #16]
 8008150:	b9d8      	cbnz	r0, 800818a <_svfiprintf_r+0xe6>
 8008152:	06d0      	lsls	r0, r2, #27
 8008154:	bf44      	itt	mi
 8008156:	2320      	movmi	r3, #32
 8008158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800815c:	0711      	lsls	r1, r2, #28
 800815e:	bf44      	itt	mi
 8008160:	232b      	movmi	r3, #43	; 0x2b
 8008162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008166:	f89a 3000 	ldrb.w	r3, [sl]
 800816a:	2b2a      	cmp	r3, #42	; 0x2a
 800816c:	d015      	beq.n	800819a <_svfiprintf_r+0xf6>
 800816e:	9a07      	ldr	r2, [sp, #28]
 8008170:	4654      	mov	r4, sl
 8008172:	2000      	movs	r0, #0
 8008174:	f04f 0c0a 	mov.w	ip, #10
 8008178:	4621      	mov	r1, r4
 800817a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800817e:	3b30      	subs	r3, #48	; 0x30
 8008180:	2b09      	cmp	r3, #9
 8008182:	d94e      	bls.n	8008222 <_svfiprintf_r+0x17e>
 8008184:	b1b0      	cbz	r0, 80081b4 <_svfiprintf_r+0x110>
 8008186:	9207      	str	r2, [sp, #28]
 8008188:	e014      	b.n	80081b4 <_svfiprintf_r+0x110>
 800818a:	eba0 0308 	sub.w	r3, r0, r8
 800818e:	fa09 f303 	lsl.w	r3, r9, r3
 8008192:	4313      	orrs	r3, r2
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	46a2      	mov	sl, r4
 8008198:	e7d2      	b.n	8008140 <_svfiprintf_r+0x9c>
 800819a:	9b03      	ldr	r3, [sp, #12]
 800819c:	1d19      	adds	r1, r3, #4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	9103      	str	r1, [sp, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bfbb      	ittet	lt
 80081a6:	425b      	neglt	r3, r3
 80081a8:	f042 0202 	orrlt.w	r2, r2, #2
 80081ac:	9307      	strge	r3, [sp, #28]
 80081ae:	9307      	strlt	r3, [sp, #28]
 80081b0:	bfb8      	it	lt
 80081b2:	9204      	strlt	r2, [sp, #16]
 80081b4:	7823      	ldrb	r3, [r4, #0]
 80081b6:	2b2e      	cmp	r3, #46	; 0x2e
 80081b8:	d10c      	bne.n	80081d4 <_svfiprintf_r+0x130>
 80081ba:	7863      	ldrb	r3, [r4, #1]
 80081bc:	2b2a      	cmp	r3, #42	; 0x2a
 80081be:	d135      	bne.n	800822c <_svfiprintf_r+0x188>
 80081c0:	9b03      	ldr	r3, [sp, #12]
 80081c2:	1d1a      	adds	r2, r3, #4
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	9203      	str	r2, [sp, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	bfb8      	it	lt
 80081cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80081d0:	3402      	adds	r4, #2
 80081d2:	9305      	str	r3, [sp, #20]
 80081d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082a0 <_svfiprintf_r+0x1fc>
 80081d8:	7821      	ldrb	r1, [r4, #0]
 80081da:	2203      	movs	r2, #3
 80081dc:	4650      	mov	r0, sl
 80081de:	f7f7 ffff 	bl	80001e0 <memchr>
 80081e2:	b140      	cbz	r0, 80081f6 <_svfiprintf_r+0x152>
 80081e4:	2340      	movs	r3, #64	; 0x40
 80081e6:	eba0 000a 	sub.w	r0, r0, sl
 80081ea:	fa03 f000 	lsl.w	r0, r3, r0
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	4303      	orrs	r3, r0
 80081f2:	3401      	adds	r4, #1
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fa:	4826      	ldr	r0, [pc, #152]	; (8008294 <_svfiprintf_r+0x1f0>)
 80081fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008200:	2206      	movs	r2, #6
 8008202:	f7f7 ffed 	bl	80001e0 <memchr>
 8008206:	2800      	cmp	r0, #0
 8008208:	d038      	beq.n	800827c <_svfiprintf_r+0x1d8>
 800820a:	4b23      	ldr	r3, [pc, #140]	; (8008298 <_svfiprintf_r+0x1f4>)
 800820c:	bb1b      	cbnz	r3, 8008256 <_svfiprintf_r+0x1b2>
 800820e:	9b03      	ldr	r3, [sp, #12]
 8008210:	3307      	adds	r3, #7
 8008212:	f023 0307 	bic.w	r3, r3, #7
 8008216:	3308      	adds	r3, #8
 8008218:	9303      	str	r3, [sp, #12]
 800821a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821c:	4433      	add	r3, r6
 800821e:	9309      	str	r3, [sp, #36]	; 0x24
 8008220:	e767      	b.n	80080f2 <_svfiprintf_r+0x4e>
 8008222:	fb0c 3202 	mla	r2, ip, r2, r3
 8008226:	460c      	mov	r4, r1
 8008228:	2001      	movs	r0, #1
 800822a:	e7a5      	b.n	8008178 <_svfiprintf_r+0xd4>
 800822c:	2300      	movs	r3, #0
 800822e:	3401      	adds	r4, #1
 8008230:	9305      	str	r3, [sp, #20]
 8008232:	4619      	mov	r1, r3
 8008234:	f04f 0c0a 	mov.w	ip, #10
 8008238:	4620      	mov	r0, r4
 800823a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800823e:	3a30      	subs	r2, #48	; 0x30
 8008240:	2a09      	cmp	r2, #9
 8008242:	d903      	bls.n	800824c <_svfiprintf_r+0x1a8>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0c5      	beq.n	80081d4 <_svfiprintf_r+0x130>
 8008248:	9105      	str	r1, [sp, #20]
 800824a:	e7c3      	b.n	80081d4 <_svfiprintf_r+0x130>
 800824c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008250:	4604      	mov	r4, r0
 8008252:	2301      	movs	r3, #1
 8008254:	e7f0      	b.n	8008238 <_svfiprintf_r+0x194>
 8008256:	ab03      	add	r3, sp, #12
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	462a      	mov	r2, r5
 800825c:	4b0f      	ldr	r3, [pc, #60]	; (800829c <_svfiprintf_r+0x1f8>)
 800825e:	a904      	add	r1, sp, #16
 8008260:	4638      	mov	r0, r7
 8008262:	f3af 8000 	nop.w
 8008266:	1c42      	adds	r2, r0, #1
 8008268:	4606      	mov	r6, r0
 800826a:	d1d6      	bne.n	800821a <_svfiprintf_r+0x176>
 800826c:	89ab      	ldrh	r3, [r5, #12]
 800826e:	065b      	lsls	r3, r3, #25
 8008270:	f53f af2c 	bmi.w	80080cc <_svfiprintf_r+0x28>
 8008274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008276:	b01d      	add	sp, #116	; 0x74
 8008278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827c:	ab03      	add	r3, sp, #12
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	462a      	mov	r2, r5
 8008282:	4b06      	ldr	r3, [pc, #24]	; (800829c <_svfiprintf_r+0x1f8>)
 8008284:	a904      	add	r1, sp, #16
 8008286:	4638      	mov	r0, r7
 8008288:	f000 f87a 	bl	8008380 <_printf_i>
 800828c:	e7eb      	b.n	8008266 <_svfiprintf_r+0x1c2>
 800828e:	bf00      	nop
 8008290:	08009d84 	.word	0x08009d84
 8008294:	08009d8e 	.word	0x08009d8e
 8008298:	00000000 	.word	0x00000000
 800829c:	08007fed 	.word	0x08007fed
 80082a0:	08009d8a 	.word	0x08009d8a

080082a4 <_printf_common>:
 80082a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	4616      	mov	r6, r2
 80082aa:	4699      	mov	r9, r3
 80082ac:	688a      	ldr	r2, [r1, #8]
 80082ae:	690b      	ldr	r3, [r1, #16]
 80082b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082b4:	4293      	cmp	r3, r2
 80082b6:	bfb8      	it	lt
 80082b8:	4613      	movlt	r3, r2
 80082ba:	6033      	str	r3, [r6, #0]
 80082bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082c0:	4607      	mov	r7, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	b10a      	cbz	r2, 80082ca <_printf_common+0x26>
 80082c6:	3301      	adds	r3, #1
 80082c8:	6033      	str	r3, [r6, #0]
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	0699      	lsls	r1, r3, #26
 80082ce:	bf42      	ittt	mi
 80082d0:	6833      	ldrmi	r3, [r6, #0]
 80082d2:	3302      	addmi	r3, #2
 80082d4:	6033      	strmi	r3, [r6, #0]
 80082d6:	6825      	ldr	r5, [r4, #0]
 80082d8:	f015 0506 	ands.w	r5, r5, #6
 80082dc:	d106      	bne.n	80082ec <_printf_common+0x48>
 80082de:	f104 0a19 	add.w	sl, r4, #25
 80082e2:	68e3      	ldr	r3, [r4, #12]
 80082e4:	6832      	ldr	r2, [r6, #0]
 80082e6:	1a9b      	subs	r3, r3, r2
 80082e8:	42ab      	cmp	r3, r5
 80082ea:	dc26      	bgt.n	800833a <_printf_common+0x96>
 80082ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082f0:	1e13      	subs	r3, r2, #0
 80082f2:	6822      	ldr	r2, [r4, #0]
 80082f4:	bf18      	it	ne
 80082f6:	2301      	movne	r3, #1
 80082f8:	0692      	lsls	r2, r2, #26
 80082fa:	d42b      	bmi.n	8008354 <_printf_common+0xb0>
 80082fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008300:	4649      	mov	r1, r9
 8008302:	4638      	mov	r0, r7
 8008304:	47c0      	blx	r8
 8008306:	3001      	adds	r0, #1
 8008308:	d01e      	beq.n	8008348 <_printf_common+0xa4>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	68e5      	ldr	r5, [r4, #12]
 800830e:	6832      	ldr	r2, [r6, #0]
 8008310:	f003 0306 	and.w	r3, r3, #6
 8008314:	2b04      	cmp	r3, #4
 8008316:	bf08      	it	eq
 8008318:	1aad      	subeq	r5, r5, r2
 800831a:	68a3      	ldr	r3, [r4, #8]
 800831c:	6922      	ldr	r2, [r4, #16]
 800831e:	bf0c      	ite	eq
 8008320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008324:	2500      	movne	r5, #0
 8008326:	4293      	cmp	r3, r2
 8008328:	bfc4      	itt	gt
 800832a:	1a9b      	subgt	r3, r3, r2
 800832c:	18ed      	addgt	r5, r5, r3
 800832e:	2600      	movs	r6, #0
 8008330:	341a      	adds	r4, #26
 8008332:	42b5      	cmp	r5, r6
 8008334:	d11a      	bne.n	800836c <_printf_common+0xc8>
 8008336:	2000      	movs	r0, #0
 8008338:	e008      	b.n	800834c <_printf_common+0xa8>
 800833a:	2301      	movs	r3, #1
 800833c:	4652      	mov	r2, sl
 800833e:	4649      	mov	r1, r9
 8008340:	4638      	mov	r0, r7
 8008342:	47c0      	blx	r8
 8008344:	3001      	adds	r0, #1
 8008346:	d103      	bne.n	8008350 <_printf_common+0xac>
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008350:	3501      	adds	r5, #1
 8008352:	e7c6      	b.n	80082e2 <_printf_common+0x3e>
 8008354:	18e1      	adds	r1, r4, r3
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	2030      	movs	r0, #48	; 0x30
 800835a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800835e:	4422      	add	r2, r4
 8008360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008368:	3302      	adds	r3, #2
 800836a:	e7c7      	b.n	80082fc <_printf_common+0x58>
 800836c:	2301      	movs	r3, #1
 800836e:	4622      	mov	r2, r4
 8008370:	4649      	mov	r1, r9
 8008372:	4638      	mov	r0, r7
 8008374:	47c0      	blx	r8
 8008376:	3001      	adds	r0, #1
 8008378:	d0e6      	beq.n	8008348 <_printf_common+0xa4>
 800837a:	3601      	adds	r6, #1
 800837c:	e7d9      	b.n	8008332 <_printf_common+0x8e>
	...

08008380 <_printf_i>:
 8008380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	460c      	mov	r4, r1
 8008386:	4691      	mov	r9, r2
 8008388:	7e27      	ldrb	r7, [r4, #24]
 800838a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800838c:	2f78      	cmp	r7, #120	; 0x78
 800838e:	4680      	mov	r8, r0
 8008390:	469a      	mov	sl, r3
 8008392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008396:	d807      	bhi.n	80083a8 <_printf_i+0x28>
 8008398:	2f62      	cmp	r7, #98	; 0x62
 800839a:	d80a      	bhi.n	80083b2 <_printf_i+0x32>
 800839c:	2f00      	cmp	r7, #0
 800839e:	f000 80d8 	beq.w	8008552 <_printf_i+0x1d2>
 80083a2:	2f58      	cmp	r7, #88	; 0x58
 80083a4:	f000 80a3 	beq.w	80084ee <_printf_i+0x16e>
 80083a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083b0:	e03a      	b.n	8008428 <_printf_i+0xa8>
 80083b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083b6:	2b15      	cmp	r3, #21
 80083b8:	d8f6      	bhi.n	80083a8 <_printf_i+0x28>
 80083ba:	a001      	add	r0, pc, #4	; (adr r0, 80083c0 <_printf_i+0x40>)
 80083bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083c0:	08008419 	.word	0x08008419
 80083c4:	0800842d 	.word	0x0800842d
 80083c8:	080083a9 	.word	0x080083a9
 80083cc:	080083a9 	.word	0x080083a9
 80083d0:	080083a9 	.word	0x080083a9
 80083d4:	080083a9 	.word	0x080083a9
 80083d8:	0800842d 	.word	0x0800842d
 80083dc:	080083a9 	.word	0x080083a9
 80083e0:	080083a9 	.word	0x080083a9
 80083e4:	080083a9 	.word	0x080083a9
 80083e8:	080083a9 	.word	0x080083a9
 80083ec:	08008539 	.word	0x08008539
 80083f0:	0800845d 	.word	0x0800845d
 80083f4:	0800851b 	.word	0x0800851b
 80083f8:	080083a9 	.word	0x080083a9
 80083fc:	080083a9 	.word	0x080083a9
 8008400:	0800855b 	.word	0x0800855b
 8008404:	080083a9 	.word	0x080083a9
 8008408:	0800845d 	.word	0x0800845d
 800840c:	080083a9 	.word	0x080083a9
 8008410:	080083a9 	.word	0x080083a9
 8008414:	08008523 	.word	0x08008523
 8008418:	680b      	ldr	r3, [r1, #0]
 800841a:	1d1a      	adds	r2, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	600a      	str	r2, [r1, #0]
 8008420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008428:	2301      	movs	r3, #1
 800842a:	e0a3      	b.n	8008574 <_printf_i+0x1f4>
 800842c:	6825      	ldr	r5, [r4, #0]
 800842e:	6808      	ldr	r0, [r1, #0]
 8008430:	062e      	lsls	r6, r5, #24
 8008432:	f100 0304 	add.w	r3, r0, #4
 8008436:	d50a      	bpl.n	800844e <_printf_i+0xce>
 8008438:	6805      	ldr	r5, [r0, #0]
 800843a:	600b      	str	r3, [r1, #0]
 800843c:	2d00      	cmp	r5, #0
 800843e:	da03      	bge.n	8008448 <_printf_i+0xc8>
 8008440:	232d      	movs	r3, #45	; 0x2d
 8008442:	426d      	negs	r5, r5
 8008444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008448:	485e      	ldr	r0, [pc, #376]	; (80085c4 <_printf_i+0x244>)
 800844a:	230a      	movs	r3, #10
 800844c:	e019      	b.n	8008482 <_printf_i+0x102>
 800844e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008452:	6805      	ldr	r5, [r0, #0]
 8008454:	600b      	str	r3, [r1, #0]
 8008456:	bf18      	it	ne
 8008458:	b22d      	sxthne	r5, r5
 800845a:	e7ef      	b.n	800843c <_printf_i+0xbc>
 800845c:	680b      	ldr	r3, [r1, #0]
 800845e:	6825      	ldr	r5, [r4, #0]
 8008460:	1d18      	adds	r0, r3, #4
 8008462:	6008      	str	r0, [r1, #0]
 8008464:	0628      	lsls	r0, r5, #24
 8008466:	d501      	bpl.n	800846c <_printf_i+0xec>
 8008468:	681d      	ldr	r5, [r3, #0]
 800846a:	e002      	b.n	8008472 <_printf_i+0xf2>
 800846c:	0669      	lsls	r1, r5, #25
 800846e:	d5fb      	bpl.n	8008468 <_printf_i+0xe8>
 8008470:	881d      	ldrh	r5, [r3, #0]
 8008472:	4854      	ldr	r0, [pc, #336]	; (80085c4 <_printf_i+0x244>)
 8008474:	2f6f      	cmp	r7, #111	; 0x6f
 8008476:	bf0c      	ite	eq
 8008478:	2308      	moveq	r3, #8
 800847a:	230a      	movne	r3, #10
 800847c:	2100      	movs	r1, #0
 800847e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008482:	6866      	ldr	r6, [r4, #4]
 8008484:	60a6      	str	r6, [r4, #8]
 8008486:	2e00      	cmp	r6, #0
 8008488:	bfa2      	ittt	ge
 800848a:	6821      	ldrge	r1, [r4, #0]
 800848c:	f021 0104 	bicge.w	r1, r1, #4
 8008490:	6021      	strge	r1, [r4, #0]
 8008492:	b90d      	cbnz	r5, 8008498 <_printf_i+0x118>
 8008494:	2e00      	cmp	r6, #0
 8008496:	d04d      	beq.n	8008534 <_printf_i+0x1b4>
 8008498:	4616      	mov	r6, r2
 800849a:	fbb5 f1f3 	udiv	r1, r5, r3
 800849e:	fb03 5711 	mls	r7, r3, r1, r5
 80084a2:	5dc7      	ldrb	r7, [r0, r7]
 80084a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084a8:	462f      	mov	r7, r5
 80084aa:	42bb      	cmp	r3, r7
 80084ac:	460d      	mov	r5, r1
 80084ae:	d9f4      	bls.n	800849a <_printf_i+0x11a>
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d10b      	bne.n	80084cc <_printf_i+0x14c>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	07df      	lsls	r7, r3, #31
 80084b8:	d508      	bpl.n	80084cc <_printf_i+0x14c>
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	6861      	ldr	r1, [r4, #4]
 80084be:	4299      	cmp	r1, r3
 80084c0:	bfde      	ittt	le
 80084c2:	2330      	movle	r3, #48	; 0x30
 80084c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084cc:	1b92      	subs	r2, r2, r6
 80084ce:	6122      	str	r2, [r4, #16]
 80084d0:	f8cd a000 	str.w	sl, [sp]
 80084d4:	464b      	mov	r3, r9
 80084d6:	aa03      	add	r2, sp, #12
 80084d8:	4621      	mov	r1, r4
 80084da:	4640      	mov	r0, r8
 80084dc:	f7ff fee2 	bl	80082a4 <_printf_common>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d14c      	bne.n	800857e <_printf_i+0x1fe>
 80084e4:	f04f 30ff 	mov.w	r0, #4294967295
 80084e8:	b004      	add	sp, #16
 80084ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ee:	4835      	ldr	r0, [pc, #212]	; (80085c4 <_printf_i+0x244>)
 80084f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	680e      	ldr	r6, [r1, #0]
 80084f8:	061f      	lsls	r7, r3, #24
 80084fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80084fe:	600e      	str	r6, [r1, #0]
 8008500:	d514      	bpl.n	800852c <_printf_i+0x1ac>
 8008502:	07d9      	lsls	r1, r3, #31
 8008504:	bf44      	itt	mi
 8008506:	f043 0320 	orrmi.w	r3, r3, #32
 800850a:	6023      	strmi	r3, [r4, #0]
 800850c:	b91d      	cbnz	r5, 8008516 <_printf_i+0x196>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	f023 0320 	bic.w	r3, r3, #32
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	2310      	movs	r3, #16
 8008518:	e7b0      	b.n	800847c <_printf_i+0xfc>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	f043 0320 	orr.w	r3, r3, #32
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	2378      	movs	r3, #120	; 0x78
 8008524:	4828      	ldr	r0, [pc, #160]	; (80085c8 <_printf_i+0x248>)
 8008526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800852a:	e7e3      	b.n	80084f4 <_printf_i+0x174>
 800852c:	065e      	lsls	r6, r3, #25
 800852e:	bf48      	it	mi
 8008530:	b2ad      	uxthmi	r5, r5
 8008532:	e7e6      	b.n	8008502 <_printf_i+0x182>
 8008534:	4616      	mov	r6, r2
 8008536:	e7bb      	b.n	80084b0 <_printf_i+0x130>
 8008538:	680b      	ldr	r3, [r1, #0]
 800853a:	6826      	ldr	r6, [r4, #0]
 800853c:	6960      	ldr	r0, [r4, #20]
 800853e:	1d1d      	adds	r5, r3, #4
 8008540:	600d      	str	r5, [r1, #0]
 8008542:	0635      	lsls	r5, r6, #24
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	d501      	bpl.n	800854c <_printf_i+0x1cc>
 8008548:	6018      	str	r0, [r3, #0]
 800854a:	e002      	b.n	8008552 <_printf_i+0x1d2>
 800854c:	0671      	lsls	r1, r6, #25
 800854e:	d5fb      	bpl.n	8008548 <_printf_i+0x1c8>
 8008550:	8018      	strh	r0, [r3, #0]
 8008552:	2300      	movs	r3, #0
 8008554:	6123      	str	r3, [r4, #16]
 8008556:	4616      	mov	r6, r2
 8008558:	e7ba      	b.n	80084d0 <_printf_i+0x150>
 800855a:	680b      	ldr	r3, [r1, #0]
 800855c:	1d1a      	adds	r2, r3, #4
 800855e:	600a      	str	r2, [r1, #0]
 8008560:	681e      	ldr	r6, [r3, #0]
 8008562:	6862      	ldr	r2, [r4, #4]
 8008564:	2100      	movs	r1, #0
 8008566:	4630      	mov	r0, r6
 8008568:	f7f7 fe3a 	bl	80001e0 <memchr>
 800856c:	b108      	cbz	r0, 8008572 <_printf_i+0x1f2>
 800856e:	1b80      	subs	r0, r0, r6
 8008570:	6060      	str	r0, [r4, #4]
 8008572:	6863      	ldr	r3, [r4, #4]
 8008574:	6123      	str	r3, [r4, #16]
 8008576:	2300      	movs	r3, #0
 8008578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800857c:	e7a8      	b.n	80084d0 <_printf_i+0x150>
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	4632      	mov	r2, r6
 8008582:	4649      	mov	r1, r9
 8008584:	4640      	mov	r0, r8
 8008586:	47d0      	blx	sl
 8008588:	3001      	adds	r0, #1
 800858a:	d0ab      	beq.n	80084e4 <_printf_i+0x164>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	079b      	lsls	r3, r3, #30
 8008590:	d413      	bmi.n	80085ba <_printf_i+0x23a>
 8008592:	68e0      	ldr	r0, [r4, #12]
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	4298      	cmp	r0, r3
 8008598:	bfb8      	it	lt
 800859a:	4618      	movlt	r0, r3
 800859c:	e7a4      	b.n	80084e8 <_printf_i+0x168>
 800859e:	2301      	movs	r3, #1
 80085a0:	4632      	mov	r2, r6
 80085a2:	4649      	mov	r1, r9
 80085a4:	4640      	mov	r0, r8
 80085a6:	47d0      	blx	sl
 80085a8:	3001      	adds	r0, #1
 80085aa:	d09b      	beq.n	80084e4 <_printf_i+0x164>
 80085ac:	3501      	adds	r5, #1
 80085ae:	68e3      	ldr	r3, [r4, #12]
 80085b0:	9903      	ldr	r1, [sp, #12]
 80085b2:	1a5b      	subs	r3, r3, r1
 80085b4:	42ab      	cmp	r3, r5
 80085b6:	dcf2      	bgt.n	800859e <_printf_i+0x21e>
 80085b8:	e7eb      	b.n	8008592 <_printf_i+0x212>
 80085ba:	2500      	movs	r5, #0
 80085bc:	f104 0619 	add.w	r6, r4, #25
 80085c0:	e7f5      	b.n	80085ae <_printf_i+0x22e>
 80085c2:	bf00      	nop
 80085c4:	08009d95 	.word	0x08009d95
 80085c8:	08009da6 	.word	0x08009da6

080085cc <memcpy>:
 80085cc:	440a      	add	r2, r1
 80085ce:	4291      	cmp	r1, r2
 80085d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80085d4:	d100      	bne.n	80085d8 <memcpy+0xc>
 80085d6:	4770      	bx	lr
 80085d8:	b510      	push	{r4, lr}
 80085da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085e2:	4291      	cmp	r1, r2
 80085e4:	d1f9      	bne.n	80085da <memcpy+0xe>
 80085e6:	bd10      	pop	{r4, pc}

080085e8 <memmove>:
 80085e8:	4288      	cmp	r0, r1
 80085ea:	b510      	push	{r4, lr}
 80085ec:	eb01 0402 	add.w	r4, r1, r2
 80085f0:	d902      	bls.n	80085f8 <memmove+0x10>
 80085f2:	4284      	cmp	r4, r0
 80085f4:	4623      	mov	r3, r4
 80085f6:	d807      	bhi.n	8008608 <memmove+0x20>
 80085f8:	1e43      	subs	r3, r0, #1
 80085fa:	42a1      	cmp	r1, r4
 80085fc:	d008      	beq.n	8008610 <memmove+0x28>
 80085fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008602:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008606:	e7f8      	b.n	80085fa <memmove+0x12>
 8008608:	4402      	add	r2, r0
 800860a:	4601      	mov	r1, r0
 800860c:	428a      	cmp	r2, r1
 800860e:	d100      	bne.n	8008612 <memmove+0x2a>
 8008610:	bd10      	pop	{r4, pc}
 8008612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008616:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800861a:	e7f7      	b.n	800860c <memmove+0x24>

0800861c <_free_r>:
 800861c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800861e:	2900      	cmp	r1, #0
 8008620:	d048      	beq.n	80086b4 <_free_r+0x98>
 8008622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008626:	9001      	str	r0, [sp, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	f1a1 0404 	sub.w	r4, r1, #4
 800862e:	bfb8      	it	lt
 8008630:	18e4      	addlt	r4, r4, r3
 8008632:	f000 f8d3 	bl	80087dc <__malloc_lock>
 8008636:	4a20      	ldr	r2, [pc, #128]	; (80086b8 <_free_r+0x9c>)
 8008638:	9801      	ldr	r0, [sp, #4]
 800863a:	6813      	ldr	r3, [r2, #0]
 800863c:	4615      	mov	r5, r2
 800863e:	b933      	cbnz	r3, 800864e <_free_r+0x32>
 8008640:	6063      	str	r3, [r4, #4]
 8008642:	6014      	str	r4, [r2, #0]
 8008644:	b003      	add	sp, #12
 8008646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800864a:	f000 b8cd 	b.w	80087e8 <__malloc_unlock>
 800864e:	42a3      	cmp	r3, r4
 8008650:	d90b      	bls.n	800866a <_free_r+0x4e>
 8008652:	6821      	ldr	r1, [r4, #0]
 8008654:	1862      	adds	r2, r4, r1
 8008656:	4293      	cmp	r3, r2
 8008658:	bf04      	itt	eq
 800865a:	681a      	ldreq	r2, [r3, #0]
 800865c:	685b      	ldreq	r3, [r3, #4]
 800865e:	6063      	str	r3, [r4, #4]
 8008660:	bf04      	itt	eq
 8008662:	1852      	addeq	r2, r2, r1
 8008664:	6022      	streq	r2, [r4, #0]
 8008666:	602c      	str	r4, [r5, #0]
 8008668:	e7ec      	b.n	8008644 <_free_r+0x28>
 800866a:	461a      	mov	r2, r3
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	b10b      	cbz	r3, 8008674 <_free_r+0x58>
 8008670:	42a3      	cmp	r3, r4
 8008672:	d9fa      	bls.n	800866a <_free_r+0x4e>
 8008674:	6811      	ldr	r1, [r2, #0]
 8008676:	1855      	adds	r5, r2, r1
 8008678:	42a5      	cmp	r5, r4
 800867a:	d10b      	bne.n	8008694 <_free_r+0x78>
 800867c:	6824      	ldr	r4, [r4, #0]
 800867e:	4421      	add	r1, r4
 8008680:	1854      	adds	r4, r2, r1
 8008682:	42a3      	cmp	r3, r4
 8008684:	6011      	str	r1, [r2, #0]
 8008686:	d1dd      	bne.n	8008644 <_free_r+0x28>
 8008688:	681c      	ldr	r4, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	6053      	str	r3, [r2, #4]
 800868e:	4421      	add	r1, r4
 8008690:	6011      	str	r1, [r2, #0]
 8008692:	e7d7      	b.n	8008644 <_free_r+0x28>
 8008694:	d902      	bls.n	800869c <_free_r+0x80>
 8008696:	230c      	movs	r3, #12
 8008698:	6003      	str	r3, [r0, #0]
 800869a:	e7d3      	b.n	8008644 <_free_r+0x28>
 800869c:	6825      	ldr	r5, [r4, #0]
 800869e:	1961      	adds	r1, r4, r5
 80086a0:	428b      	cmp	r3, r1
 80086a2:	bf04      	itt	eq
 80086a4:	6819      	ldreq	r1, [r3, #0]
 80086a6:	685b      	ldreq	r3, [r3, #4]
 80086a8:	6063      	str	r3, [r4, #4]
 80086aa:	bf04      	itt	eq
 80086ac:	1949      	addeq	r1, r1, r5
 80086ae:	6021      	streq	r1, [r4, #0]
 80086b0:	6054      	str	r4, [r2, #4]
 80086b2:	e7c7      	b.n	8008644 <_free_r+0x28>
 80086b4:	b003      	add	sp, #12
 80086b6:	bd30      	pop	{r4, r5, pc}
 80086b8:	2000022c 	.word	0x2000022c

080086bc <_malloc_r>:
 80086bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086be:	1ccd      	adds	r5, r1, #3
 80086c0:	f025 0503 	bic.w	r5, r5, #3
 80086c4:	3508      	adds	r5, #8
 80086c6:	2d0c      	cmp	r5, #12
 80086c8:	bf38      	it	cc
 80086ca:	250c      	movcc	r5, #12
 80086cc:	2d00      	cmp	r5, #0
 80086ce:	4606      	mov	r6, r0
 80086d0:	db01      	blt.n	80086d6 <_malloc_r+0x1a>
 80086d2:	42a9      	cmp	r1, r5
 80086d4:	d903      	bls.n	80086de <_malloc_r+0x22>
 80086d6:	230c      	movs	r3, #12
 80086d8:	6033      	str	r3, [r6, #0]
 80086da:	2000      	movs	r0, #0
 80086dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086de:	f000 f87d 	bl	80087dc <__malloc_lock>
 80086e2:	4921      	ldr	r1, [pc, #132]	; (8008768 <_malloc_r+0xac>)
 80086e4:	680a      	ldr	r2, [r1, #0]
 80086e6:	4614      	mov	r4, r2
 80086e8:	b99c      	cbnz	r4, 8008712 <_malloc_r+0x56>
 80086ea:	4f20      	ldr	r7, [pc, #128]	; (800876c <_malloc_r+0xb0>)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	b923      	cbnz	r3, 80086fa <_malloc_r+0x3e>
 80086f0:	4621      	mov	r1, r4
 80086f2:	4630      	mov	r0, r6
 80086f4:	f000 f862 	bl	80087bc <_sbrk_r>
 80086f8:	6038      	str	r0, [r7, #0]
 80086fa:	4629      	mov	r1, r5
 80086fc:	4630      	mov	r0, r6
 80086fe:	f000 f85d 	bl	80087bc <_sbrk_r>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	d123      	bne.n	800874e <_malloc_r+0x92>
 8008706:	230c      	movs	r3, #12
 8008708:	6033      	str	r3, [r6, #0]
 800870a:	4630      	mov	r0, r6
 800870c:	f000 f86c 	bl	80087e8 <__malloc_unlock>
 8008710:	e7e3      	b.n	80086da <_malloc_r+0x1e>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	1b5b      	subs	r3, r3, r5
 8008716:	d417      	bmi.n	8008748 <_malloc_r+0x8c>
 8008718:	2b0b      	cmp	r3, #11
 800871a:	d903      	bls.n	8008724 <_malloc_r+0x68>
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	441c      	add	r4, r3
 8008720:	6025      	str	r5, [r4, #0]
 8008722:	e004      	b.n	800872e <_malloc_r+0x72>
 8008724:	6863      	ldr	r3, [r4, #4]
 8008726:	42a2      	cmp	r2, r4
 8008728:	bf0c      	ite	eq
 800872a:	600b      	streq	r3, [r1, #0]
 800872c:	6053      	strne	r3, [r2, #4]
 800872e:	4630      	mov	r0, r6
 8008730:	f000 f85a 	bl	80087e8 <__malloc_unlock>
 8008734:	f104 000b 	add.w	r0, r4, #11
 8008738:	1d23      	adds	r3, r4, #4
 800873a:	f020 0007 	bic.w	r0, r0, #7
 800873e:	1ac2      	subs	r2, r0, r3
 8008740:	d0cc      	beq.n	80086dc <_malloc_r+0x20>
 8008742:	1a1b      	subs	r3, r3, r0
 8008744:	50a3      	str	r3, [r4, r2]
 8008746:	e7c9      	b.n	80086dc <_malloc_r+0x20>
 8008748:	4622      	mov	r2, r4
 800874a:	6864      	ldr	r4, [r4, #4]
 800874c:	e7cc      	b.n	80086e8 <_malloc_r+0x2c>
 800874e:	1cc4      	adds	r4, r0, #3
 8008750:	f024 0403 	bic.w	r4, r4, #3
 8008754:	42a0      	cmp	r0, r4
 8008756:	d0e3      	beq.n	8008720 <_malloc_r+0x64>
 8008758:	1a21      	subs	r1, r4, r0
 800875a:	4630      	mov	r0, r6
 800875c:	f000 f82e 	bl	80087bc <_sbrk_r>
 8008760:	3001      	adds	r0, #1
 8008762:	d1dd      	bne.n	8008720 <_malloc_r+0x64>
 8008764:	e7cf      	b.n	8008706 <_malloc_r+0x4a>
 8008766:	bf00      	nop
 8008768:	2000022c 	.word	0x2000022c
 800876c:	20000230 	.word	0x20000230

08008770 <_realloc_r>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	4607      	mov	r7, r0
 8008774:	4614      	mov	r4, r2
 8008776:	460e      	mov	r6, r1
 8008778:	b921      	cbnz	r1, 8008784 <_realloc_r+0x14>
 800877a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800877e:	4611      	mov	r1, r2
 8008780:	f7ff bf9c 	b.w	80086bc <_malloc_r>
 8008784:	b922      	cbnz	r2, 8008790 <_realloc_r+0x20>
 8008786:	f7ff ff49 	bl	800861c <_free_r>
 800878a:	4625      	mov	r5, r4
 800878c:	4628      	mov	r0, r5
 800878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008790:	f000 f830 	bl	80087f4 <_malloc_usable_size_r>
 8008794:	42a0      	cmp	r0, r4
 8008796:	d20f      	bcs.n	80087b8 <_realloc_r+0x48>
 8008798:	4621      	mov	r1, r4
 800879a:	4638      	mov	r0, r7
 800879c:	f7ff ff8e 	bl	80086bc <_malloc_r>
 80087a0:	4605      	mov	r5, r0
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d0f2      	beq.n	800878c <_realloc_r+0x1c>
 80087a6:	4631      	mov	r1, r6
 80087a8:	4622      	mov	r2, r4
 80087aa:	f7ff ff0f 	bl	80085cc <memcpy>
 80087ae:	4631      	mov	r1, r6
 80087b0:	4638      	mov	r0, r7
 80087b2:	f7ff ff33 	bl	800861c <_free_r>
 80087b6:	e7e9      	b.n	800878c <_realloc_r+0x1c>
 80087b8:	4635      	mov	r5, r6
 80087ba:	e7e7      	b.n	800878c <_realloc_r+0x1c>

080087bc <_sbrk_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4d06      	ldr	r5, [pc, #24]	; (80087d8 <_sbrk_r+0x1c>)
 80087c0:	2300      	movs	r3, #0
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	602b      	str	r3, [r5, #0]
 80087c8:	f7fb ff1c 	bl	8004604 <_sbrk>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_sbrk_r+0x1a>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_sbrk_r+0x1a>
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	200064d0 	.word	0x200064d0

080087dc <__malloc_lock>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__malloc_lock+0x8>)
 80087de:	f000 b811 	b.w	8008804 <__retarget_lock_acquire_recursive>
 80087e2:	bf00      	nop
 80087e4:	200064d8 	.word	0x200064d8

080087e8 <__malloc_unlock>:
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <__malloc_unlock+0x8>)
 80087ea:	f000 b80c 	b.w	8008806 <__retarget_lock_release_recursive>
 80087ee:	bf00      	nop
 80087f0:	200064d8 	.word	0x200064d8

080087f4 <_malloc_usable_size_r>:
 80087f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087f8:	1f18      	subs	r0, r3, #4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	bfbc      	itt	lt
 80087fe:	580b      	ldrlt	r3, [r1, r0]
 8008800:	18c0      	addlt	r0, r0, r3
 8008802:	4770      	bx	lr

08008804 <__retarget_lock_acquire_recursive>:
 8008804:	4770      	bx	lr

08008806 <__retarget_lock_release_recursive>:
 8008806:	4770      	bx	lr

08008808 <log>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	ed2d 8b02 	vpush	{d8}
 800880e:	ec55 4b10 	vmov	r4, r5, d0
 8008812:	f000 f8f1 	bl	80089f8 <__ieee754_log>
 8008816:	4b1e      	ldr	r3, [pc, #120]	; (8008890 <log+0x88>)
 8008818:	eeb0 8a40 	vmov.f32	s16, s0
 800881c:	eef0 8a60 	vmov.f32	s17, s1
 8008820:	f993 3000 	ldrsb.w	r3, [r3]
 8008824:	3301      	adds	r3, #1
 8008826:	d01a      	beq.n	800885e <log+0x56>
 8008828:	4622      	mov	r2, r4
 800882a:	462b      	mov	r3, r5
 800882c:	4620      	mov	r0, r4
 800882e:	4629      	mov	r1, r5
 8008830:	f7f8 f97c 	bl	8000b2c <__aeabi_dcmpun>
 8008834:	b998      	cbnz	r0, 800885e <log+0x56>
 8008836:	2200      	movs	r2, #0
 8008838:	2300      	movs	r3, #0
 800883a:	4620      	mov	r0, r4
 800883c:	4629      	mov	r1, r5
 800883e:	f7f8 f96b 	bl	8000b18 <__aeabi_dcmpgt>
 8008842:	b960      	cbnz	r0, 800885e <log+0x56>
 8008844:	2200      	movs	r2, #0
 8008846:	2300      	movs	r3, #0
 8008848:	4620      	mov	r0, r4
 800884a:	4629      	mov	r1, r5
 800884c:	f7f8 f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008850:	b160      	cbz	r0, 800886c <log+0x64>
 8008852:	f7ff fb1f 	bl	8007e94 <__errno>
 8008856:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8008888 <log+0x80>
 800885a:	2322      	movs	r3, #34	; 0x22
 800885c:	6003      	str	r3, [r0, #0]
 800885e:	eeb0 0a48 	vmov.f32	s0, s16
 8008862:	eef0 0a68 	vmov.f32	s1, s17
 8008866:	ecbd 8b02 	vpop	{d8}
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	f7ff fb12 	bl	8007e94 <__errno>
 8008870:	ecbd 8b02 	vpop	{d8}
 8008874:	2321      	movs	r3, #33	; 0x21
 8008876:	6003      	str	r3, [r0, #0]
 8008878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800887c:	4805      	ldr	r0, [pc, #20]	; (8008894 <log+0x8c>)
 800887e:	f001 b863 	b.w	8009948 <nan>
 8008882:	bf00      	nop
 8008884:	f3af 8000 	nop.w
 8008888:	00000000 	.word	0x00000000
 800888c:	fff00000 	.word	0xfff00000
 8008890:	200001d8 	.word	0x200001d8
 8008894:	08009d89 	.word	0x08009d89

08008898 <pow>:
 8008898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800889c:	ec59 8b10 	vmov	r8, r9, d0
 80088a0:	ec57 6b11 	vmov	r6, r7, d1
 80088a4:	f000 fa64 	bl	8008d70 <__ieee754_pow>
 80088a8:	4b4e      	ldr	r3, [pc, #312]	; (80089e4 <pow+0x14c>)
 80088aa:	f993 3000 	ldrsb.w	r3, [r3]
 80088ae:	3301      	adds	r3, #1
 80088b0:	ec55 4b10 	vmov	r4, r5, d0
 80088b4:	d015      	beq.n	80088e2 <pow+0x4a>
 80088b6:	4632      	mov	r2, r6
 80088b8:	463b      	mov	r3, r7
 80088ba:	4630      	mov	r0, r6
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f8 f935 	bl	8000b2c <__aeabi_dcmpun>
 80088c2:	b970      	cbnz	r0, 80088e2 <pow+0x4a>
 80088c4:	4642      	mov	r2, r8
 80088c6:	464b      	mov	r3, r9
 80088c8:	4640      	mov	r0, r8
 80088ca:	4649      	mov	r1, r9
 80088cc:	f7f8 f92e 	bl	8000b2c <__aeabi_dcmpun>
 80088d0:	2200      	movs	r2, #0
 80088d2:	2300      	movs	r3, #0
 80088d4:	b148      	cbz	r0, 80088ea <pow+0x52>
 80088d6:	4630      	mov	r0, r6
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f8 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d17d      	bne.n	80089de <pow+0x146>
 80088e2:	ec45 4b10 	vmov	d0, r4, r5
 80088e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ea:	4640      	mov	r0, r8
 80088ec:	4649      	mov	r1, r9
 80088ee:	f7f8 f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f2:	b1e0      	cbz	r0, 800892e <pow+0x96>
 80088f4:	2200      	movs	r2, #0
 80088f6:	2300      	movs	r3, #0
 80088f8:	4630      	mov	r0, r6
 80088fa:	4639      	mov	r1, r7
 80088fc:	f7f8 f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008900:	2800      	cmp	r0, #0
 8008902:	d16c      	bne.n	80089de <pow+0x146>
 8008904:	ec47 6b10 	vmov	d0, r6, r7
 8008908:	f001 f811 	bl	800992e <finite>
 800890c:	2800      	cmp	r0, #0
 800890e:	d0e8      	beq.n	80088e2 <pow+0x4a>
 8008910:	2200      	movs	r2, #0
 8008912:	2300      	movs	r3, #0
 8008914:	4630      	mov	r0, r6
 8008916:	4639      	mov	r1, r7
 8008918:	f7f8 f8e0 	bl	8000adc <__aeabi_dcmplt>
 800891c:	2800      	cmp	r0, #0
 800891e:	d0e0      	beq.n	80088e2 <pow+0x4a>
 8008920:	f7ff fab8 	bl	8007e94 <__errno>
 8008924:	2321      	movs	r3, #33	; 0x21
 8008926:	6003      	str	r3, [r0, #0]
 8008928:	2400      	movs	r4, #0
 800892a:	4d2f      	ldr	r5, [pc, #188]	; (80089e8 <pow+0x150>)
 800892c:	e7d9      	b.n	80088e2 <pow+0x4a>
 800892e:	ec45 4b10 	vmov	d0, r4, r5
 8008932:	f000 fffc 	bl	800992e <finite>
 8008936:	bbb8      	cbnz	r0, 80089a8 <pow+0x110>
 8008938:	ec49 8b10 	vmov	d0, r8, r9
 800893c:	f000 fff7 	bl	800992e <finite>
 8008940:	b390      	cbz	r0, 80089a8 <pow+0x110>
 8008942:	ec47 6b10 	vmov	d0, r6, r7
 8008946:	f000 fff2 	bl	800992e <finite>
 800894a:	b368      	cbz	r0, 80089a8 <pow+0x110>
 800894c:	4622      	mov	r2, r4
 800894e:	462b      	mov	r3, r5
 8008950:	4620      	mov	r0, r4
 8008952:	4629      	mov	r1, r5
 8008954:	f7f8 f8ea 	bl	8000b2c <__aeabi_dcmpun>
 8008958:	b160      	cbz	r0, 8008974 <pow+0xdc>
 800895a:	f7ff fa9b 	bl	8007e94 <__errno>
 800895e:	2321      	movs	r3, #33	; 0x21
 8008960:	6003      	str	r3, [r0, #0]
 8008962:	2200      	movs	r2, #0
 8008964:	2300      	movs	r3, #0
 8008966:	4610      	mov	r0, r2
 8008968:	4619      	mov	r1, r3
 800896a:	f7f7 ff6f 	bl	800084c <__aeabi_ddiv>
 800896e:	4604      	mov	r4, r0
 8008970:	460d      	mov	r5, r1
 8008972:	e7b6      	b.n	80088e2 <pow+0x4a>
 8008974:	f7ff fa8e 	bl	8007e94 <__errno>
 8008978:	2322      	movs	r3, #34	; 0x22
 800897a:	6003      	str	r3, [r0, #0]
 800897c:	2200      	movs	r2, #0
 800897e:	2300      	movs	r3, #0
 8008980:	4640      	mov	r0, r8
 8008982:	4649      	mov	r1, r9
 8008984:	f7f8 f8aa 	bl	8000adc <__aeabi_dcmplt>
 8008988:	2400      	movs	r4, #0
 800898a:	b158      	cbz	r0, 80089a4 <pow+0x10c>
 800898c:	ec47 6b10 	vmov	d0, r6, r7
 8008990:	f000 ffe2 	bl	8009958 <rint>
 8008994:	4632      	mov	r2, r6
 8008996:	ec51 0b10 	vmov	r0, r1, d0
 800899a:	463b      	mov	r3, r7
 800899c:	f7f8 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d0c2      	beq.n	800892a <pow+0x92>
 80089a4:	4d11      	ldr	r5, [pc, #68]	; (80089ec <pow+0x154>)
 80089a6:	e79c      	b.n	80088e2 <pow+0x4a>
 80089a8:	2200      	movs	r2, #0
 80089aa:	2300      	movs	r3, #0
 80089ac:	4620      	mov	r0, r4
 80089ae:	4629      	mov	r1, r5
 80089b0:	f7f8 f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d094      	beq.n	80088e2 <pow+0x4a>
 80089b8:	ec49 8b10 	vmov	d0, r8, r9
 80089bc:	f000 ffb7 	bl	800992e <finite>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d08e      	beq.n	80088e2 <pow+0x4a>
 80089c4:	ec47 6b10 	vmov	d0, r6, r7
 80089c8:	f000 ffb1 	bl	800992e <finite>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d088      	beq.n	80088e2 <pow+0x4a>
 80089d0:	f7ff fa60 	bl	8007e94 <__errno>
 80089d4:	2322      	movs	r3, #34	; 0x22
 80089d6:	6003      	str	r3, [r0, #0]
 80089d8:	2400      	movs	r4, #0
 80089da:	2500      	movs	r5, #0
 80089dc:	e781      	b.n	80088e2 <pow+0x4a>
 80089de:	4d04      	ldr	r5, [pc, #16]	; (80089f0 <pow+0x158>)
 80089e0:	2400      	movs	r4, #0
 80089e2:	e77e      	b.n	80088e2 <pow+0x4a>
 80089e4:	200001d8 	.word	0x200001d8
 80089e8:	fff00000 	.word	0xfff00000
 80089ec:	7ff00000 	.word	0x7ff00000
 80089f0:	3ff00000 	.word	0x3ff00000
 80089f4:	00000000 	.word	0x00000000

080089f8 <__ieee754_log>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	ec51 0b10 	vmov	r0, r1, d0
 8008a00:	ed2d 8b04 	vpush	{d8-d9}
 8008a04:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008a08:	b083      	sub	sp, #12
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	da29      	bge.n	8008a62 <__ieee754_log+0x6a>
 8008a0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a12:	4303      	orrs	r3, r0
 8008a14:	ee10 2a10 	vmov	r2, s0
 8008a18:	d10c      	bne.n	8008a34 <__ieee754_log+0x3c>
 8008a1a:	49cf      	ldr	r1, [pc, #828]	; (8008d58 <__ieee754_log+0x360>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2000      	movs	r0, #0
 8008a22:	f7f7 ff13 	bl	800084c <__aeabi_ddiv>
 8008a26:	ec41 0b10 	vmov	d0, r0, r1
 8008a2a:	b003      	add	sp, #12
 8008a2c:	ecbd 8b04 	vpop	{d8-d9}
 8008a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a34:	2900      	cmp	r1, #0
 8008a36:	da05      	bge.n	8008a44 <__ieee754_log+0x4c>
 8008a38:	460b      	mov	r3, r1
 8008a3a:	f7f7 fc25 	bl	8000288 <__aeabi_dsub>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2300      	movs	r3, #0
 8008a42:	e7ee      	b.n	8008a22 <__ieee754_log+0x2a>
 8008a44:	4bc5      	ldr	r3, [pc, #788]	; (8008d5c <__ieee754_log+0x364>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	f7f7 fdd6 	bl	80005f8 <__aeabi_dmul>
 8008a4c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008a50:	460d      	mov	r5, r1
 8008a52:	4ac3      	ldr	r2, [pc, #780]	; (8008d60 <__ieee754_log+0x368>)
 8008a54:	4295      	cmp	r5, r2
 8008a56:	dd06      	ble.n	8008a66 <__ieee754_log+0x6e>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	f7f7 fc16 	bl	800028c <__adddf3>
 8008a60:	e7e1      	b.n	8008a26 <__ieee754_log+0x2e>
 8008a62:	2300      	movs	r3, #0
 8008a64:	e7f5      	b.n	8008a52 <__ieee754_log+0x5a>
 8008a66:	152c      	asrs	r4, r5, #20
 8008a68:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a6c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008a70:	441c      	add	r4, r3
 8008a72:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008a76:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a7e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008a82:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008a86:	ea42 0105 	orr.w	r1, r2, r5
 8008a8a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4bb4      	ldr	r3, [pc, #720]	; (8008d64 <__ieee754_log+0x36c>)
 8008a92:	f7f7 fbf9 	bl	8000288 <__aeabi_dsub>
 8008a96:	1cab      	adds	r3, r5, #2
 8008a98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	4682      	mov	sl, r0
 8008aa0:	468b      	mov	fp, r1
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	dc53      	bgt.n	8008b50 <__ieee754_log+0x158>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f7f8 f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aae:	b1d0      	cbz	r0, 8008ae6 <__ieee754_log+0xee>
 8008ab0:	2c00      	cmp	r4, #0
 8008ab2:	f000 8122 	beq.w	8008cfa <__ieee754_log+0x302>
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f7f7 fd34 	bl	8000524 <__aeabi_i2d>
 8008abc:	a390      	add	r3, pc, #576	; (adr r3, 8008d00 <__ieee754_log+0x308>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	f7f7 fd97 	bl	80005f8 <__aeabi_dmul>
 8008aca:	a38f      	add	r3, pc, #572	; (adr r3, 8008d08 <__ieee754_log+0x310>)
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	460d      	mov	r5, r1
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	f7f7 fd8e 	bl	80005f8 <__aeabi_dmul>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	e7ba      	b.n	8008a5c <__ieee754_log+0x64>
 8008ae6:	a38a      	add	r3, pc, #552	; (adr r3, 8008d10 <__ieee754_log+0x318>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	4650      	mov	r0, sl
 8008aee:	4659      	mov	r1, fp
 8008af0:	f7f7 fd82 	bl	80005f8 <__aeabi_dmul>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	2000      	movs	r0, #0
 8008afa:	499b      	ldr	r1, [pc, #620]	; (8008d68 <__ieee754_log+0x370>)
 8008afc:	f7f7 fbc4 	bl	8000288 <__aeabi_dsub>
 8008b00:	4652      	mov	r2, sl
 8008b02:	4606      	mov	r6, r0
 8008b04:	460f      	mov	r7, r1
 8008b06:	465b      	mov	r3, fp
 8008b08:	4650      	mov	r0, sl
 8008b0a:	4659      	mov	r1, fp
 8008b0c:	f7f7 fd74 	bl	80005f8 <__aeabi_dmul>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f7f7 fd6e 	bl	80005f8 <__aeabi_dmul>
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	460f      	mov	r7, r1
 8008b20:	b914      	cbnz	r4, 8008b28 <__ieee754_log+0x130>
 8008b22:	4632      	mov	r2, r6
 8008b24:	463b      	mov	r3, r7
 8008b26:	e0a2      	b.n	8008c6e <__ieee754_log+0x276>
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f7f7 fcfb 	bl	8000524 <__aeabi_i2d>
 8008b2e:	a374      	add	r3, pc, #464	; (adr r3, 8008d00 <__ieee754_log+0x308>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	4680      	mov	r8, r0
 8008b36:	4689      	mov	r9, r1
 8008b38:	f7f7 fd5e 	bl	80005f8 <__aeabi_dmul>
 8008b3c:	a372      	add	r3, pc, #456	; (adr r3, 8008d08 <__ieee754_log+0x310>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	4604      	mov	r4, r0
 8008b44:	460d      	mov	r5, r1
 8008b46:	4640      	mov	r0, r8
 8008b48:	4649      	mov	r1, r9
 8008b4a:	f7f7 fd55 	bl	80005f8 <__aeabi_dmul>
 8008b4e:	e0a7      	b.n	8008ca0 <__ieee754_log+0x2a8>
 8008b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b54:	f7f7 fb9a 	bl	800028c <__adddf3>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4650      	mov	r0, sl
 8008b5e:	4659      	mov	r1, fp
 8008b60:	f7f7 fe74 	bl	800084c <__aeabi_ddiv>
 8008b64:	ec41 0b18 	vmov	d8, r0, r1
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f7f7 fcdb 	bl	8000524 <__aeabi_i2d>
 8008b6e:	ec53 2b18 	vmov	r2, r3, d8
 8008b72:	ec41 0b19 	vmov	d9, r0, r1
 8008b76:	ec51 0b18 	vmov	r0, r1, d8
 8008b7a:	f7f7 fd3d 	bl	80005f8 <__aeabi_dmul>
 8008b7e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008b82:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4689      	mov	r9, r1
 8008b90:	f7f7 fd32 	bl	80005f8 <__aeabi_dmul>
 8008b94:	a360      	add	r3, pc, #384	; (adr r3, 8008d18 <__ieee754_log+0x320>)
 8008b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	f7f7 fd2b 	bl	80005f8 <__aeabi_dmul>
 8008ba2:	a35f      	add	r3, pc, #380	; (adr r3, 8008d20 <__ieee754_log+0x328>)
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f7f7 fb70 	bl	800028c <__adddf3>
 8008bac:	4632      	mov	r2, r6
 8008bae:	463b      	mov	r3, r7
 8008bb0:	f7f7 fd22 	bl	80005f8 <__aeabi_dmul>
 8008bb4:	a35c      	add	r3, pc, #368	; (adr r3, 8008d28 <__ieee754_log+0x330>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fb67 	bl	800028c <__adddf3>
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	463b      	mov	r3, r7
 8008bc2:	f7f7 fd19 	bl	80005f8 <__aeabi_dmul>
 8008bc6:	a35a      	add	r3, pc, #360	; (adr r3, 8008d30 <__ieee754_log+0x338>)
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f7f7 fb5e 	bl	800028c <__adddf3>
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	f7f7 fd10 	bl	80005f8 <__aeabi_dmul>
 8008bd8:	a357      	add	r3, pc, #348	; (adr r3, 8008d38 <__ieee754_log+0x340>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	4680      	mov	r8, r0
 8008be0:	4689      	mov	r9, r1
 8008be2:	4630      	mov	r0, r6
 8008be4:	4639      	mov	r1, r7
 8008be6:	f7f7 fd07 	bl	80005f8 <__aeabi_dmul>
 8008bea:	a355      	add	r3, pc, #340	; (adr r3, 8008d40 <__ieee754_log+0x348>)
 8008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf0:	f7f7 fb4c 	bl	800028c <__adddf3>
 8008bf4:	4632      	mov	r2, r6
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	f7f7 fcfe 	bl	80005f8 <__aeabi_dmul>
 8008bfc:	a352      	add	r3, pc, #328	; (adr r3, 8008d48 <__ieee754_log+0x350>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fb43 	bl	800028c <__adddf3>
 8008c06:	4632      	mov	r2, r6
 8008c08:	463b      	mov	r3, r7
 8008c0a:	f7f7 fcf5 	bl	80005f8 <__aeabi_dmul>
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4602      	mov	r2, r0
 8008c12:	4649      	mov	r1, r9
 8008c14:	4640      	mov	r0, r8
 8008c16:	f7f7 fb39 	bl	800028c <__adddf3>
 8008c1a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008c1e:	9b01      	ldr	r3, [sp, #4]
 8008c20:	3551      	adds	r5, #81	; 0x51
 8008c22:	431d      	orrs	r5, r3
 8008c24:	2d00      	cmp	r5, #0
 8008c26:	4680      	mov	r8, r0
 8008c28:	4689      	mov	r9, r1
 8008c2a:	dd48      	ble.n	8008cbe <__ieee754_log+0x2c6>
 8008c2c:	4b4e      	ldr	r3, [pc, #312]	; (8008d68 <__ieee754_log+0x370>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	4650      	mov	r0, sl
 8008c32:	4659      	mov	r1, fp
 8008c34:	f7f7 fce0 	bl	80005f8 <__aeabi_dmul>
 8008c38:	4652      	mov	r2, sl
 8008c3a:	465b      	mov	r3, fp
 8008c3c:	f7f7 fcdc 	bl	80005f8 <__aeabi_dmul>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	4640      	mov	r0, r8
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	f7f7 fb1e 	bl	800028c <__adddf3>
 8008c50:	ec53 2b18 	vmov	r2, r3, d8
 8008c54:	f7f7 fcd0 	bl	80005f8 <__aeabi_dmul>
 8008c58:	4680      	mov	r8, r0
 8008c5a:	4689      	mov	r9, r1
 8008c5c:	b964      	cbnz	r4, 8008c78 <__ieee754_log+0x280>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4630      	mov	r0, r6
 8008c64:	4639      	mov	r1, r7
 8008c66:	f7f7 fb0f 	bl	8000288 <__aeabi_dsub>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4650      	mov	r0, sl
 8008c70:	4659      	mov	r1, fp
 8008c72:	f7f7 fb09 	bl	8000288 <__aeabi_dsub>
 8008c76:	e6d6      	b.n	8008a26 <__ieee754_log+0x2e>
 8008c78:	a321      	add	r3, pc, #132	; (adr r3, 8008d00 <__ieee754_log+0x308>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	ec51 0b19 	vmov	r0, r1, d9
 8008c82:	f7f7 fcb9 	bl	80005f8 <__aeabi_dmul>
 8008c86:	a320      	add	r3, pc, #128	; (adr r3, 8008d08 <__ieee754_log+0x310>)
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	460d      	mov	r5, r1
 8008c90:	ec51 0b19 	vmov	r0, r1, d9
 8008c94:	f7f7 fcb0 	bl	80005f8 <__aeabi_dmul>
 8008c98:	4642      	mov	r2, r8
 8008c9a:	464b      	mov	r3, r9
 8008c9c:	f7f7 faf6 	bl	800028c <__adddf3>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	f7f7 faee 	bl	8000288 <__aeabi_dsub>
 8008cac:	4652      	mov	r2, sl
 8008cae:	465b      	mov	r3, fp
 8008cb0:	f7f7 faea 	bl	8000288 <__aeabi_dsub>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4620      	mov	r0, r4
 8008cba:	4629      	mov	r1, r5
 8008cbc:	e7d9      	b.n	8008c72 <__ieee754_log+0x27a>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4650      	mov	r0, sl
 8008cc4:	4659      	mov	r1, fp
 8008cc6:	f7f7 fadf 	bl	8000288 <__aeabi_dsub>
 8008cca:	ec53 2b18 	vmov	r2, r3, d8
 8008cce:	f7f7 fc93 	bl	80005f8 <__aeabi_dmul>
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460f      	mov	r7, r1
 8008cd6:	2c00      	cmp	r4, #0
 8008cd8:	f43f af23 	beq.w	8008b22 <__ieee754_log+0x12a>
 8008cdc:	a308      	add	r3, pc, #32	; (adr r3, 8008d00 <__ieee754_log+0x308>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	ec51 0b19 	vmov	r0, r1, d9
 8008ce6:	f7f7 fc87 	bl	80005f8 <__aeabi_dmul>
 8008cea:	a307      	add	r3, pc, #28	; (adr r3, 8008d08 <__ieee754_log+0x310>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	ec51 0b19 	vmov	r0, r1, d9
 8008cf8:	e727      	b.n	8008b4a <__ieee754_log+0x152>
 8008cfa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8008d50 <__ieee754_log+0x358>
 8008cfe:	e694      	b.n	8008a2a <__ieee754_log+0x32>
 8008d00:	fee00000 	.word	0xfee00000
 8008d04:	3fe62e42 	.word	0x3fe62e42
 8008d08:	35793c76 	.word	0x35793c76
 8008d0c:	3dea39ef 	.word	0x3dea39ef
 8008d10:	55555555 	.word	0x55555555
 8008d14:	3fd55555 	.word	0x3fd55555
 8008d18:	df3e5244 	.word	0xdf3e5244
 8008d1c:	3fc2f112 	.word	0x3fc2f112
 8008d20:	96cb03de 	.word	0x96cb03de
 8008d24:	3fc74664 	.word	0x3fc74664
 8008d28:	94229359 	.word	0x94229359
 8008d2c:	3fd24924 	.word	0x3fd24924
 8008d30:	55555593 	.word	0x55555593
 8008d34:	3fe55555 	.word	0x3fe55555
 8008d38:	d078c69f 	.word	0xd078c69f
 8008d3c:	3fc39a09 	.word	0x3fc39a09
 8008d40:	1d8e78af 	.word	0x1d8e78af
 8008d44:	3fcc71c5 	.word	0x3fcc71c5
 8008d48:	9997fa04 	.word	0x9997fa04
 8008d4c:	3fd99999 	.word	0x3fd99999
	...
 8008d58:	c3500000 	.word	0xc3500000
 8008d5c:	43500000 	.word	0x43500000
 8008d60:	7fefffff 	.word	0x7fefffff
 8008d64:	3ff00000 	.word	0x3ff00000
 8008d68:	3fe00000 	.word	0x3fe00000
 8008d6c:	00000000 	.word	0x00000000

08008d70 <__ieee754_pow>:
 8008d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	ed2d 8b06 	vpush	{d8-d10}
 8008d78:	b08d      	sub	sp, #52	; 0x34
 8008d7a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008d7e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8008d82:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008d86:	ea56 0100 	orrs.w	r1, r6, r0
 8008d8a:	ec53 2b10 	vmov	r2, r3, d0
 8008d8e:	f000 84d1 	beq.w	8009734 <__ieee754_pow+0x9c4>
 8008d92:	497f      	ldr	r1, [pc, #508]	; (8008f90 <__ieee754_pow+0x220>)
 8008d94:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008d98:	428c      	cmp	r4, r1
 8008d9a:	ee10 8a10 	vmov	r8, s0
 8008d9e:	4699      	mov	r9, r3
 8008da0:	dc09      	bgt.n	8008db6 <__ieee754_pow+0x46>
 8008da2:	d103      	bne.n	8008dac <__ieee754_pow+0x3c>
 8008da4:	b97a      	cbnz	r2, 8008dc6 <__ieee754_pow+0x56>
 8008da6:	42a6      	cmp	r6, r4
 8008da8:	dd02      	ble.n	8008db0 <__ieee754_pow+0x40>
 8008daa:	e00c      	b.n	8008dc6 <__ieee754_pow+0x56>
 8008dac:	428e      	cmp	r6, r1
 8008dae:	dc02      	bgt.n	8008db6 <__ieee754_pow+0x46>
 8008db0:	428e      	cmp	r6, r1
 8008db2:	d110      	bne.n	8008dd6 <__ieee754_pow+0x66>
 8008db4:	b178      	cbz	r0, 8008dd6 <__ieee754_pow+0x66>
 8008db6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008dba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008dbe:	ea54 0308 	orrs.w	r3, r4, r8
 8008dc2:	f000 84b7 	beq.w	8009734 <__ieee754_pow+0x9c4>
 8008dc6:	4873      	ldr	r0, [pc, #460]	; (8008f94 <__ieee754_pow+0x224>)
 8008dc8:	b00d      	add	sp, #52	; 0x34
 8008dca:	ecbd 8b06 	vpop	{d8-d10}
 8008dce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd2:	f000 bdb9 	b.w	8009948 <nan>
 8008dd6:	f1b9 0f00 	cmp.w	r9, #0
 8008dda:	da36      	bge.n	8008e4a <__ieee754_pow+0xda>
 8008ddc:	496e      	ldr	r1, [pc, #440]	; (8008f98 <__ieee754_pow+0x228>)
 8008dde:	428e      	cmp	r6, r1
 8008de0:	dc51      	bgt.n	8008e86 <__ieee754_pow+0x116>
 8008de2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8008de6:	428e      	cmp	r6, r1
 8008de8:	f340 84af 	ble.w	800974a <__ieee754_pow+0x9da>
 8008dec:	1531      	asrs	r1, r6, #20
 8008dee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008df2:	2914      	cmp	r1, #20
 8008df4:	dd0f      	ble.n	8008e16 <__ieee754_pow+0xa6>
 8008df6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008dfa:	fa20 fc01 	lsr.w	ip, r0, r1
 8008dfe:	fa0c f101 	lsl.w	r1, ip, r1
 8008e02:	4281      	cmp	r1, r0
 8008e04:	f040 84a1 	bne.w	800974a <__ieee754_pow+0x9da>
 8008e08:	f00c 0c01 	and.w	ip, ip, #1
 8008e0c:	f1cc 0102 	rsb	r1, ip, #2
 8008e10:	9100      	str	r1, [sp, #0]
 8008e12:	b180      	cbz	r0, 8008e36 <__ieee754_pow+0xc6>
 8008e14:	e059      	b.n	8008eca <__ieee754_pow+0x15a>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d155      	bne.n	8008ec6 <__ieee754_pow+0x156>
 8008e1a:	f1c1 0114 	rsb	r1, r1, #20
 8008e1e:	fa46 fc01 	asr.w	ip, r6, r1
 8008e22:	fa0c f101 	lsl.w	r1, ip, r1
 8008e26:	42b1      	cmp	r1, r6
 8008e28:	f040 848c 	bne.w	8009744 <__ieee754_pow+0x9d4>
 8008e2c:	f00c 0c01 	and.w	ip, ip, #1
 8008e30:	f1cc 0102 	rsb	r1, ip, #2
 8008e34:	9100      	str	r1, [sp, #0]
 8008e36:	4959      	ldr	r1, [pc, #356]	; (8008f9c <__ieee754_pow+0x22c>)
 8008e38:	428e      	cmp	r6, r1
 8008e3a:	d12d      	bne.n	8008e98 <__ieee754_pow+0x128>
 8008e3c:	2f00      	cmp	r7, #0
 8008e3e:	da79      	bge.n	8008f34 <__ieee754_pow+0x1c4>
 8008e40:	4956      	ldr	r1, [pc, #344]	; (8008f9c <__ieee754_pow+0x22c>)
 8008e42:	2000      	movs	r0, #0
 8008e44:	f7f7 fd02 	bl	800084c <__aeabi_ddiv>
 8008e48:	e016      	b.n	8008e78 <__ieee754_pow+0x108>
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	9100      	str	r1, [sp, #0]
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d13b      	bne.n	8008eca <__ieee754_pow+0x15a>
 8008e52:	494f      	ldr	r1, [pc, #316]	; (8008f90 <__ieee754_pow+0x220>)
 8008e54:	428e      	cmp	r6, r1
 8008e56:	d1ee      	bne.n	8008e36 <__ieee754_pow+0xc6>
 8008e58:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008e5c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008e60:	ea53 0308 	orrs.w	r3, r3, r8
 8008e64:	f000 8466 	beq.w	8009734 <__ieee754_pow+0x9c4>
 8008e68:	4b4d      	ldr	r3, [pc, #308]	; (8008fa0 <__ieee754_pow+0x230>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	dd0d      	ble.n	8008e8a <__ieee754_pow+0x11a>
 8008e6e:	2f00      	cmp	r7, #0
 8008e70:	f280 8464 	bge.w	800973c <__ieee754_pow+0x9cc>
 8008e74:	2000      	movs	r0, #0
 8008e76:	2100      	movs	r1, #0
 8008e78:	ec41 0b10 	vmov	d0, r0, r1
 8008e7c:	b00d      	add	sp, #52	; 0x34
 8008e7e:	ecbd 8b06 	vpop	{d8-d10}
 8008e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e86:	2102      	movs	r1, #2
 8008e88:	e7e0      	b.n	8008e4c <__ieee754_pow+0xdc>
 8008e8a:	2f00      	cmp	r7, #0
 8008e8c:	daf2      	bge.n	8008e74 <__ieee754_pow+0x104>
 8008e8e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8008e92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008e96:	e7ef      	b.n	8008e78 <__ieee754_pow+0x108>
 8008e98:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008e9c:	d104      	bne.n	8008ea8 <__ieee754_pow+0x138>
 8008e9e:	4610      	mov	r0, r2
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f7f7 fba9 	bl	80005f8 <__aeabi_dmul>
 8008ea6:	e7e7      	b.n	8008e78 <__ieee754_pow+0x108>
 8008ea8:	493e      	ldr	r1, [pc, #248]	; (8008fa4 <__ieee754_pow+0x234>)
 8008eaa:	428f      	cmp	r7, r1
 8008eac:	d10d      	bne.n	8008eca <__ieee754_pow+0x15a>
 8008eae:	f1b9 0f00 	cmp.w	r9, #0
 8008eb2:	db0a      	blt.n	8008eca <__ieee754_pow+0x15a>
 8008eb4:	ec43 2b10 	vmov	d0, r2, r3
 8008eb8:	b00d      	add	sp, #52	; 0x34
 8008eba:	ecbd 8b06 	vpop	{d8-d10}
 8008ebe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec2:	f000 bc77 	b.w	80097b4 <__ieee754_sqrt>
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	9100      	str	r1, [sp, #0]
 8008eca:	ec43 2b10 	vmov	d0, r2, r3
 8008ece:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ed2:	f000 fd23 	bl	800991c <fabs>
 8008ed6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008eda:	ec51 0b10 	vmov	r0, r1, d0
 8008ede:	f1b8 0f00 	cmp.w	r8, #0
 8008ee2:	d12a      	bne.n	8008f3a <__ieee754_pow+0x1ca>
 8008ee4:	b12c      	cbz	r4, 8008ef2 <__ieee754_pow+0x182>
 8008ee6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008f9c <__ieee754_pow+0x22c>
 8008eea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008eee:	45e6      	cmp	lr, ip
 8008ef0:	d123      	bne.n	8008f3a <__ieee754_pow+0x1ca>
 8008ef2:	2f00      	cmp	r7, #0
 8008ef4:	da05      	bge.n	8008f02 <__ieee754_pow+0x192>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	2000      	movs	r0, #0
 8008efc:	4927      	ldr	r1, [pc, #156]	; (8008f9c <__ieee754_pow+0x22c>)
 8008efe:	f7f7 fca5 	bl	800084c <__aeabi_ddiv>
 8008f02:	f1b9 0f00 	cmp.w	r9, #0
 8008f06:	dab7      	bge.n	8008e78 <__ieee754_pow+0x108>
 8008f08:	9b00      	ldr	r3, [sp, #0]
 8008f0a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008f0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008f12:	4323      	orrs	r3, r4
 8008f14:	d108      	bne.n	8008f28 <__ieee754_pow+0x1b8>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	f7f7 f9b3 	bl	8000288 <__aeabi_dsub>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	e78d      	b.n	8008e44 <__ieee754_pow+0xd4>
 8008f28:	9b00      	ldr	r3, [sp, #0]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d1a4      	bne.n	8008e78 <__ieee754_pow+0x108>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f34:	4610      	mov	r0, r2
 8008f36:	4619      	mov	r1, r3
 8008f38:	e79e      	b.n	8008e78 <__ieee754_pow+0x108>
 8008f3a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008f3e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8008f42:	950a      	str	r5, [sp, #40]	; 0x28
 8008f44:	9d00      	ldr	r5, [sp, #0]
 8008f46:	46ac      	mov	ip, r5
 8008f48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008f4a:	ea5c 0505 	orrs.w	r5, ip, r5
 8008f4e:	d0e4      	beq.n	8008f1a <__ieee754_pow+0x1aa>
 8008f50:	4b15      	ldr	r3, [pc, #84]	; (8008fa8 <__ieee754_pow+0x238>)
 8008f52:	429e      	cmp	r6, r3
 8008f54:	f340 80fc 	ble.w	8009150 <__ieee754_pow+0x3e0>
 8008f58:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008f5c:	429e      	cmp	r6, r3
 8008f5e:	4b10      	ldr	r3, [pc, #64]	; (8008fa0 <__ieee754_pow+0x230>)
 8008f60:	dd07      	ble.n	8008f72 <__ieee754_pow+0x202>
 8008f62:	429c      	cmp	r4, r3
 8008f64:	dc0a      	bgt.n	8008f7c <__ieee754_pow+0x20c>
 8008f66:	2f00      	cmp	r7, #0
 8008f68:	da84      	bge.n	8008e74 <__ieee754_pow+0x104>
 8008f6a:	a307      	add	r3, pc, #28	; (adr r3, 8008f88 <__ieee754_pow+0x218>)
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	e795      	b.n	8008e9e <__ieee754_pow+0x12e>
 8008f72:	429c      	cmp	r4, r3
 8008f74:	dbf7      	blt.n	8008f66 <__ieee754_pow+0x1f6>
 8008f76:	4b09      	ldr	r3, [pc, #36]	; (8008f9c <__ieee754_pow+0x22c>)
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	dd17      	ble.n	8008fac <__ieee754_pow+0x23c>
 8008f7c:	2f00      	cmp	r7, #0
 8008f7e:	dcf4      	bgt.n	8008f6a <__ieee754_pow+0x1fa>
 8008f80:	e778      	b.n	8008e74 <__ieee754_pow+0x104>
 8008f82:	bf00      	nop
 8008f84:	f3af 8000 	nop.w
 8008f88:	8800759c 	.word	0x8800759c
 8008f8c:	7e37e43c 	.word	0x7e37e43c
 8008f90:	7ff00000 	.word	0x7ff00000
 8008f94:	08009d89 	.word	0x08009d89
 8008f98:	433fffff 	.word	0x433fffff
 8008f9c:	3ff00000 	.word	0x3ff00000
 8008fa0:	3fefffff 	.word	0x3fefffff
 8008fa4:	3fe00000 	.word	0x3fe00000
 8008fa8:	41e00000 	.word	0x41e00000
 8008fac:	4b64      	ldr	r3, [pc, #400]	; (8009140 <__ieee754_pow+0x3d0>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f7f7 f96a 	bl	8000288 <__aeabi_dsub>
 8008fb4:	a356      	add	r3, pc, #344	; (adr r3, 8009110 <__ieee754_pow+0x3a0>)
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	4604      	mov	r4, r0
 8008fbc:	460d      	mov	r5, r1
 8008fbe:	f7f7 fb1b 	bl	80005f8 <__aeabi_dmul>
 8008fc2:	a355      	add	r3, pc, #340	; (adr r3, 8009118 <__ieee754_pow+0x3a8>)
 8008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc8:	4606      	mov	r6, r0
 8008fca:	460f      	mov	r7, r1
 8008fcc:	4620      	mov	r0, r4
 8008fce:	4629      	mov	r1, r5
 8008fd0:	f7f7 fb12 	bl	80005f8 <__aeabi_dmul>
 8008fd4:	4b5b      	ldr	r3, [pc, #364]	; (8009144 <__ieee754_pow+0x3d4>)
 8008fd6:	4682      	mov	sl, r0
 8008fd8:	468b      	mov	fp, r1
 8008fda:	2200      	movs	r2, #0
 8008fdc:	4620      	mov	r0, r4
 8008fde:	4629      	mov	r1, r5
 8008fe0:	f7f7 fb0a 	bl	80005f8 <__aeabi_dmul>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	a14d      	add	r1, pc, #308	; (adr r1, 8009120 <__ieee754_pow+0x3b0>)
 8008fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fee:	f7f7 f94b 	bl	8000288 <__aeabi_dsub>
 8008ff2:	4622      	mov	r2, r4
 8008ff4:	462b      	mov	r3, r5
 8008ff6:	f7f7 faff 	bl	80005f8 <__aeabi_dmul>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	2000      	movs	r0, #0
 8009000:	4951      	ldr	r1, [pc, #324]	; (8009148 <__ieee754_pow+0x3d8>)
 8009002:	f7f7 f941 	bl	8000288 <__aeabi_dsub>
 8009006:	4622      	mov	r2, r4
 8009008:	4680      	mov	r8, r0
 800900a:	4689      	mov	r9, r1
 800900c:	462b      	mov	r3, r5
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 faf1 	bl	80005f8 <__aeabi_dmul>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4640      	mov	r0, r8
 800901c:	4649      	mov	r1, r9
 800901e:	f7f7 faeb 	bl	80005f8 <__aeabi_dmul>
 8009022:	a341      	add	r3, pc, #260	; (adr r3, 8009128 <__ieee754_pow+0x3b8>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 fae6 	bl	80005f8 <__aeabi_dmul>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4650      	mov	r0, sl
 8009032:	4659      	mov	r1, fp
 8009034:	f7f7 f928 	bl	8000288 <__aeabi_dsub>
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	4680      	mov	r8, r0
 800903e:	4689      	mov	r9, r1
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	f7f7 f922 	bl	800028c <__adddf3>
 8009048:	2400      	movs	r4, #0
 800904a:	4632      	mov	r2, r6
 800904c:	463b      	mov	r3, r7
 800904e:	4620      	mov	r0, r4
 8009050:	460d      	mov	r5, r1
 8009052:	f7f7 f919 	bl	8000288 <__aeabi_dsub>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4640      	mov	r0, r8
 800905c:	4649      	mov	r1, r9
 800905e:	f7f7 f913 	bl	8000288 <__aeabi_dsub>
 8009062:	9b00      	ldr	r3, [sp, #0]
 8009064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009066:	3b01      	subs	r3, #1
 8009068:	4313      	orrs	r3, r2
 800906a:	4682      	mov	sl, r0
 800906c:	468b      	mov	fp, r1
 800906e:	f040 81f1 	bne.w	8009454 <__ieee754_pow+0x6e4>
 8009072:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009130 <__ieee754_pow+0x3c0>
 8009076:	eeb0 8a47 	vmov.f32	s16, s14
 800907a:	eef0 8a67 	vmov.f32	s17, s15
 800907e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009082:	2600      	movs	r6, #0
 8009084:	4632      	mov	r2, r6
 8009086:	463b      	mov	r3, r7
 8009088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800908c:	f7f7 f8fc 	bl	8000288 <__aeabi_dsub>
 8009090:	4622      	mov	r2, r4
 8009092:	462b      	mov	r3, r5
 8009094:	f7f7 fab0 	bl	80005f8 <__aeabi_dmul>
 8009098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800909c:	4680      	mov	r8, r0
 800909e:	4689      	mov	r9, r1
 80090a0:	4650      	mov	r0, sl
 80090a2:	4659      	mov	r1, fp
 80090a4:	f7f7 faa8 	bl	80005f8 <__aeabi_dmul>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4640      	mov	r0, r8
 80090ae:	4649      	mov	r1, r9
 80090b0:	f7f7 f8ec 	bl	800028c <__adddf3>
 80090b4:	4632      	mov	r2, r6
 80090b6:	463b      	mov	r3, r7
 80090b8:	4680      	mov	r8, r0
 80090ba:	4689      	mov	r9, r1
 80090bc:	4620      	mov	r0, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	f7f7 fa9a 	bl	80005f8 <__aeabi_dmul>
 80090c4:	460b      	mov	r3, r1
 80090c6:	4604      	mov	r4, r0
 80090c8:	460d      	mov	r5, r1
 80090ca:	4602      	mov	r2, r0
 80090cc:	4649      	mov	r1, r9
 80090ce:	4640      	mov	r0, r8
 80090d0:	f7f7 f8dc 	bl	800028c <__adddf3>
 80090d4:	4b1d      	ldr	r3, [pc, #116]	; (800914c <__ieee754_pow+0x3dc>)
 80090d6:	4299      	cmp	r1, r3
 80090d8:	ec45 4b19 	vmov	d9, r4, r5
 80090dc:	4606      	mov	r6, r0
 80090de:	460f      	mov	r7, r1
 80090e0:	468b      	mov	fp, r1
 80090e2:	f340 82fe 	ble.w	80096e2 <__ieee754_pow+0x972>
 80090e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80090ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80090ee:	4303      	orrs	r3, r0
 80090f0:	f000 81f0 	beq.w	80094d4 <__ieee754_pow+0x764>
 80090f4:	a310      	add	r3, pc, #64	; (adr r3, 8009138 <__ieee754_pow+0x3c8>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	ec51 0b18 	vmov	r0, r1, d8
 80090fe:	f7f7 fa7b 	bl	80005f8 <__aeabi_dmul>
 8009102:	a30d      	add	r3, pc, #52	; (adr r3, 8009138 <__ieee754_pow+0x3c8>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	e6cb      	b.n	8008ea2 <__ieee754_pow+0x132>
 800910a:	bf00      	nop
 800910c:	f3af 8000 	nop.w
 8009110:	60000000 	.word	0x60000000
 8009114:	3ff71547 	.word	0x3ff71547
 8009118:	f85ddf44 	.word	0xf85ddf44
 800911c:	3e54ae0b 	.word	0x3e54ae0b
 8009120:	55555555 	.word	0x55555555
 8009124:	3fd55555 	.word	0x3fd55555
 8009128:	652b82fe 	.word	0x652b82fe
 800912c:	3ff71547 	.word	0x3ff71547
 8009130:	00000000 	.word	0x00000000
 8009134:	bff00000 	.word	0xbff00000
 8009138:	8800759c 	.word	0x8800759c
 800913c:	7e37e43c 	.word	0x7e37e43c
 8009140:	3ff00000 	.word	0x3ff00000
 8009144:	3fd00000 	.word	0x3fd00000
 8009148:	3fe00000 	.word	0x3fe00000
 800914c:	408fffff 	.word	0x408fffff
 8009150:	4bd7      	ldr	r3, [pc, #860]	; (80094b0 <__ieee754_pow+0x740>)
 8009152:	ea03 0309 	and.w	r3, r3, r9
 8009156:	2200      	movs	r2, #0
 8009158:	b92b      	cbnz	r3, 8009166 <__ieee754_pow+0x3f6>
 800915a:	4bd6      	ldr	r3, [pc, #856]	; (80094b4 <__ieee754_pow+0x744>)
 800915c:	f7f7 fa4c 	bl	80005f8 <__aeabi_dmul>
 8009160:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009164:	460c      	mov	r4, r1
 8009166:	1523      	asrs	r3, r4, #20
 8009168:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800916c:	4413      	add	r3, r2
 800916e:	9309      	str	r3, [sp, #36]	; 0x24
 8009170:	4bd1      	ldr	r3, [pc, #836]	; (80094b8 <__ieee754_pow+0x748>)
 8009172:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009176:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800917a:	429c      	cmp	r4, r3
 800917c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009180:	dd08      	ble.n	8009194 <__ieee754_pow+0x424>
 8009182:	4bce      	ldr	r3, [pc, #824]	; (80094bc <__ieee754_pow+0x74c>)
 8009184:	429c      	cmp	r4, r3
 8009186:	f340 8163 	ble.w	8009450 <__ieee754_pow+0x6e0>
 800918a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918c:	3301      	adds	r3, #1
 800918e:	9309      	str	r3, [sp, #36]	; 0x24
 8009190:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009194:	2400      	movs	r4, #0
 8009196:	00e3      	lsls	r3, r4, #3
 8009198:	930b      	str	r3, [sp, #44]	; 0x2c
 800919a:	4bc9      	ldr	r3, [pc, #804]	; (80094c0 <__ieee754_pow+0x750>)
 800919c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091a0:	ed93 7b00 	vldr	d7, [r3]
 80091a4:	4629      	mov	r1, r5
 80091a6:	ec53 2b17 	vmov	r2, r3, d7
 80091aa:	eeb0 8a47 	vmov.f32	s16, s14
 80091ae:	eef0 8a67 	vmov.f32	s17, s15
 80091b2:	4682      	mov	sl, r0
 80091b4:	f7f7 f868 	bl	8000288 <__aeabi_dsub>
 80091b8:	4652      	mov	r2, sl
 80091ba:	4606      	mov	r6, r0
 80091bc:	460f      	mov	r7, r1
 80091be:	462b      	mov	r3, r5
 80091c0:	ec51 0b18 	vmov	r0, r1, d8
 80091c4:	f7f7 f862 	bl	800028c <__adddf3>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	2000      	movs	r0, #0
 80091ce:	49bd      	ldr	r1, [pc, #756]	; (80094c4 <__ieee754_pow+0x754>)
 80091d0:	f7f7 fb3c 	bl	800084c <__aeabi_ddiv>
 80091d4:	ec41 0b19 	vmov	d9, r0, r1
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4630      	mov	r0, r6
 80091de:	4639      	mov	r1, r7
 80091e0:	f7f7 fa0a 	bl	80005f8 <__aeabi_dmul>
 80091e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091f0:	2300      	movs	r3, #0
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80091f8:	46ab      	mov	fp, r5
 80091fa:	106d      	asrs	r5, r5, #1
 80091fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009200:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009204:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009208:	2200      	movs	r2, #0
 800920a:	4640      	mov	r0, r8
 800920c:	4649      	mov	r1, r9
 800920e:	4614      	mov	r4, r2
 8009210:	461d      	mov	r5, r3
 8009212:	f7f7 f9f1 	bl	80005f8 <__aeabi_dmul>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4630      	mov	r0, r6
 800921c:	4639      	mov	r1, r7
 800921e:	f7f7 f833 	bl	8000288 <__aeabi_dsub>
 8009222:	ec53 2b18 	vmov	r2, r3, d8
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	4620      	mov	r0, r4
 800922c:	4629      	mov	r1, r5
 800922e:	f7f7 f82b 	bl	8000288 <__aeabi_dsub>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	4650      	mov	r0, sl
 8009238:	4659      	mov	r1, fp
 800923a:	f7f7 f825 	bl	8000288 <__aeabi_dsub>
 800923e:	4642      	mov	r2, r8
 8009240:	464b      	mov	r3, r9
 8009242:	f7f7 f9d9 	bl	80005f8 <__aeabi_dmul>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4630      	mov	r0, r6
 800924c:	4639      	mov	r1, r7
 800924e:	f7f7 f81b 	bl	8000288 <__aeabi_dsub>
 8009252:	ec53 2b19 	vmov	r2, r3, d9
 8009256:	f7f7 f9cf 	bl	80005f8 <__aeabi_dmul>
 800925a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800925e:	ec41 0b18 	vmov	d8, r0, r1
 8009262:	4610      	mov	r0, r2
 8009264:	4619      	mov	r1, r3
 8009266:	f7f7 f9c7 	bl	80005f8 <__aeabi_dmul>
 800926a:	a37d      	add	r3, pc, #500	; (adr r3, 8009460 <__ieee754_pow+0x6f0>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	4604      	mov	r4, r0
 8009272:	460d      	mov	r5, r1
 8009274:	f7f7 f9c0 	bl	80005f8 <__aeabi_dmul>
 8009278:	a37b      	add	r3, pc, #492	; (adr r3, 8009468 <__ieee754_pow+0x6f8>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	f7f7 f805 	bl	800028c <__adddf3>
 8009282:	4622      	mov	r2, r4
 8009284:	462b      	mov	r3, r5
 8009286:	f7f7 f9b7 	bl	80005f8 <__aeabi_dmul>
 800928a:	a379      	add	r3, pc, #484	; (adr r3, 8009470 <__ieee754_pow+0x700>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f6 fffc 	bl	800028c <__adddf3>
 8009294:	4622      	mov	r2, r4
 8009296:	462b      	mov	r3, r5
 8009298:	f7f7 f9ae 	bl	80005f8 <__aeabi_dmul>
 800929c:	a376      	add	r3, pc, #472	; (adr r3, 8009478 <__ieee754_pow+0x708>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f7f6 fff3 	bl	800028c <__adddf3>
 80092a6:	4622      	mov	r2, r4
 80092a8:	462b      	mov	r3, r5
 80092aa:	f7f7 f9a5 	bl	80005f8 <__aeabi_dmul>
 80092ae:	a374      	add	r3, pc, #464	; (adr r3, 8009480 <__ieee754_pow+0x710>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f6 ffea 	bl	800028c <__adddf3>
 80092b8:	4622      	mov	r2, r4
 80092ba:	462b      	mov	r3, r5
 80092bc:	f7f7 f99c 	bl	80005f8 <__aeabi_dmul>
 80092c0:	a371      	add	r3, pc, #452	; (adr r3, 8009488 <__ieee754_pow+0x718>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f6 ffe1 	bl	800028c <__adddf3>
 80092ca:	4622      	mov	r2, r4
 80092cc:	4606      	mov	r6, r0
 80092ce:	460f      	mov	r7, r1
 80092d0:	462b      	mov	r3, r5
 80092d2:	4620      	mov	r0, r4
 80092d4:	4629      	mov	r1, r5
 80092d6:	f7f7 f98f 	bl	80005f8 <__aeabi_dmul>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4630      	mov	r0, r6
 80092e0:	4639      	mov	r1, r7
 80092e2:	f7f7 f989 	bl	80005f8 <__aeabi_dmul>
 80092e6:	4642      	mov	r2, r8
 80092e8:	4604      	mov	r4, r0
 80092ea:	460d      	mov	r5, r1
 80092ec:	464b      	mov	r3, r9
 80092ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092f2:	f7f6 ffcb 	bl	800028c <__adddf3>
 80092f6:	ec53 2b18 	vmov	r2, r3, d8
 80092fa:	f7f7 f97d 	bl	80005f8 <__aeabi_dmul>
 80092fe:	4622      	mov	r2, r4
 8009300:	462b      	mov	r3, r5
 8009302:	f7f6 ffc3 	bl	800028c <__adddf3>
 8009306:	4642      	mov	r2, r8
 8009308:	4682      	mov	sl, r0
 800930a:	468b      	mov	fp, r1
 800930c:	464b      	mov	r3, r9
 800930e:	4640      	mov	r0, r8
 8009310:	4649      	mov	r1, r9
 8009312:	f7f7 f971 	bl	80005f8 <__aeabi_dmul>
 8009316:	4b6c      	ldr	r3, [pc, #432]	; (80094c8 <__ieee754_pow+0x758>)
 8009318:	2200      	movs	r2, #0
 800931a:	4606      	mov	r6, r0
 800931c:	460f      	mov	r7, r1
 800931e:	f7f6 ffb5 	bl	800028c <__adddf3>
 8009322:	4652      	mov	r2, sl
 8009324:	465b      	mov	r3, fp
 8009326:	f7f6 ffb1 	bl	800028c <__adddf3>
 800932a:	9c04      	ldr	r4, [sp, #16]
 800932c:	460d      	mov	r5, r1
 800932e:	4622      	mov	r2, r4
 8009330:	460b      	mov	r3, r1
 8009332:	4640      	mov	r0, r8
 8009334:	4649      	mov	r1, r9
 8009336:	f7f7 f95f 	bl	80005f8 <__aeabi_dmul>
 800933a:	4b63      	ldr	r3, [pc, #396]	; (80094c8 <__ieee754_pow+0x758>)
 800933c:	4680      	mov	r8, r0
 800933e:	4689      	mov	r9, r1
 8009340:	2200      	movs	r2, #0
 8009342:	4620      	mov	r0, r4
 8009344:	4629      	mov	r1, r5
 8009346:	f7f6 ff9f 	bl	8000288 <__aeabi_dsub>
 800934a:	4632      	mov	r2, r6
 800934c:	463b      	mov	r3, r7
 800934e:	f7f6 ff9b 	bl	8000288 <__aeabi_dsub>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4650      	mov	r0, sl
 8009358:	4659      	mov	r1, fp
 800935a:	f7f6 ff95 	bl	8000288 <__aeabi_dsub>
 800935e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009362:	f7f7 f949 	bl	80005f8 <__aeabi_dmul>
 8009366:	4622      	mov	r2, r4
 8009368:	4606      	mov	r6, r0
 800936a:	460f      	mov	r7, r1
 800936c:	462b      	mov	r3, r5
 800936e:	ec51 0b18 	vmov	r0, r1, d8
 8009372:	f7f7 f941 	bl	80005f8 <__aeabi_dmul>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4630      	mov	r0, r6
 800937c:	4639      	mov	r1, r7
 800937e:	f7f6 ff85 	bl	800028c <__adddf3>
 8009382:	4606      	mov	r6, r0
 8009384:	460f      	mov	r7, r1
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4640      	mov	r0, r8
 800938c:	4649      	mov	r1, r9
 800938e:	f7f6 ff7d 	bl	800028c <__adddf3>
 8009392:	9c04      	ldr	r4, [sp, #16]
 8009394:	a33e      	add	r3, pc, #248	; (adr r3, 8009490 <__ieee754_pow+0x720>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	4620      	mov	r0, r4
 800939c:	460d      	mov	r5, r1
 800939e:	f7f7 f92b 	bl	80005f8 <__aeabi_dmul>
 80093a2:	4642      	mov	r2, r8
 80093a4:	ec41 0b18 	vmov	d8, r0, r1
 80093a8:	464b      	mov	r3, r9
 80093aa:	4620      	mov	r0, r4
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7f6 ff6b 	bl	8000288 <__aeabi_dsub>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4630      	mov	r0, r6
 80093b8:	4639      	mov	r1, r7
 80093ba:	f7f6 ff65 	bl	8000288 <__aeabi_dsub>
 80093be:	a336      	add	r3, pc, #216	; (adr r3, 8009498 <__ieee754_pow+0x728>)
 80093c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c4:	f7f7 f918 	bl	80005f8 <__aeabi_dmul>
 80093c8:	a335      	add	r3, pc, #212	; (adr r3, 80094a0 <__ieee754_pow+0x730>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	4606      	mov	r6, r0
 80093d0:	460f      	mov	r7, r1
 80093d2:	4620      	mov	r0, r4
 80093d4:	4629      	mov	r1, r5
 80093d6:	f7f7 f90f 	bl	80005f8 <__aeabi_dmul>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4630      	mov	r0, r6
 80093e0:	4639      	mov	r1, r7
 80093e2:	f7f6 ff53 	bl	800028c <__adddf3>
 80093e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093e8:	4b38      	ldr	r3, [pc, #224]	; (80094cc <__ieee754_pow+0x75c>)
 80093ea:	4413      	add	r3, r2
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f7f6 ff4c 	bl	800028c <__adddf3>
 80093f4:	4682      	mov	sl, r0
 80093f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093f8:	468b      	mov	fp, r1
 80093fa:	f7f7 f893 	bl	8000524 <__aeabi_i2d>
 80093fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009400:	4b33      	ldr	r3, [pc, #204]	; (80094d0 <__ieee754_pow+0x760>)
 8009402:	4413      	add	r3, r2
 8009404:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009408:	4606      	mov	r6, r0
 800940a:	460f      	mov	r7, r1
 800940c:	4652      	mov	r2, sl
 800940e:	465b      	mov	r3, fp
 8009410:	ec51 0b18 	vmov	r0, r1, d8
 8009414:	f7f6 ff3a 	bl	800028c <__adddf3>
 8009418:	4642      	mov	r2, r8
 800941a:	464b      	mov	r3, r9
 800941c:	f7f6 ff36 	bl	800028c <__adddf3>
 8009420:	4632      	mov	r2, r6
 8009422:	463b      	mov	r3, r7
 8009424:	f7f6 ff32 	bl	800028c <__adddf3>
 8009428:	9c04      	ldr	r4, [sp, #16]
 800942a:	4632      	mov	r2, r6
 800942c:	463b      	mov	r3, r7
 800942e:	4620      	mov	r0, r4
 8009430:	460d      	mov	r5, r1
 8009432:	f7f6 ff29 	bl	8000288 <__aeabi_dsub>
 8009436:	4642      	mov	r2, r8
 8009438:	464b      	mov	r3, r9
 800943a:	f7f6 ff25 	bl	8000288 <__aeabi_dsub>
 800943e:	ec53 2b18 	vmov	r2, r3, d8
 8009442:	f7f6 ff21 	bl	8000288 <__aeabi_dsub>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4650      	mov	r0, sl
 800944c:	4659      	mov	r1, fp
 800944e:	e606      	b.n	800905e <__ieee754_pow+0x2ee>
 8009450:	2401      	movs	r4, #1
 8009452:	e6a0      	b.n	8009196 <__ieee754_pow+0x426>
 8009454:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80094a8 <__ieee754_pow+0x738>
 8009458:	e60d      	b.n	8009076 <__ieee754_pow+0x306>
 800945a:	bf00      	nop
 800945c:	f3af 8000 	nop.w
 8009460:	4a454eef 	.word	0x4a454eef
 8009464:	3fca7e28 	.word	0x3fca7e28
 8009468:	93c9db65 	.word	0x93c9db65
 800946c:	3fcd864a 	.word	0x3fcd864a
 8009470:	a91d4101 	.word	0xa91d4101
 8009474:	3fd17460 	.word	0x3fd17460
 8009478:	518f264d 	.word	0x518f264d
 800947c:	3fd55555 	.word	0x3fd55555
 8009480:	db6fabff 	.word	0xdb6fabff
 8009484:	3fdb6db6 	.word	0x3fdb6db6
 8009488:	33333303 	.word	0x33333303
 800948c:	3fe33333 	.word	0x3fe33333
 8009490:	e0000000 	.word	0xe0000000
 8009494:	3feec709 	.word	0x3feec709
 8009498:	dc3a03fd 	.word	0xdc3a03fd
 800949c:	3feec709 	.word	0x3feec709
 80094a0:	145b01f5 	.word	0x145b01f5
 80094a4:	be3e2fe0 	.word	0xbe3e2fe0
 80094a8:	00000000 	.word	0x00000000
 80094ac:	3ff00000 	.word	0x3ff00000
 80094b0:	7ff00000 	.word	0x7ff00000
 80094b4:	43400000 	.word	0x43400000
 80094b8:	0003988e 	.word	0x0003988e
 80094bc:	000bb679 	.word	0x000bb679
 80094c0:	08009db8 	.word	0x08009db8
 80094c4:	3ff00000 	.word	0x3ff00000
 80094c8:	40080000 	.word	0x40080000
 80094cc:	08009dd8 	.word	0x08009dd8
 80094d0:	08009dc8 	.word	0x08009dc8
 80094d4:	a3b5      	add	r3, pc, #724	; (adr r3, 80097ac <__ieee754_pow+0xa3c>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f6 fed5 	bl	800028c <__adddf3>
 80094e2:	4622      	mov	r2, r4
 80094e4:	ec41 0b1a 	vmov	d10, r0, r1
 80094e8:	462b      	mov	r3, r5
 80094ea:	4630      	mov	r0, r6
 80094ec:	4639      	mov	r1, r7
 80094ee:	f7f6 fecb 	bl	8000288 <__aeabi_dsub>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	ec51 0b1a 	vmov	r0, r1, d10
 80094fa:	f7f7 fb0d 	bl	8000b18 <__aeabi_dcmpgt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	f47f adf8 	bne.w	80090f4 <__ieee754_pow+0x384>
 8009504:	4aa4      	ldr	r2, [pc, #656]	; (8009798 <__ieee754_pow+0xa28>)
 8009506:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800950a:	4293      	cmp	r3, r2
 800950c:	f340 810b 	ble.w	8009726 <__ieee754_pow+0x9b6>
 8009510:	151b      	asrs	r3, r3, #20
 8009512:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009516:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800951a:	fa4a f303 	asr.w	r3, sl, r3
 800951e:	445b      	add	r3, fp
 8009520:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009524:	4e9d      	ldr	r6, [pc, #628]	; (800979c <__ieee754_pow+0xa2c>)
 8009526:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800952a:	4116      	asrs	r6, r2
 800952c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009530:	2000      	movs	r0, #0
 8009532:	ea23 0106 	bic.w	r1, r3, r6
 8009536:	f1c2 0214 	rsb	r2, r2, #20
 800953a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800953e:	fa4a fa02 	asr.w	sl, sl, r2
 8009542:	f1bb 0f00 	cmp.w	fp, #0
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4620      	mov	r0, r4
 800954c:	4629      	mov	r1, r5
 800954e:	bfb8      	it	lt
 8009550:	f1ca 0a00 	rsblt	sl, sl, #0
 8009554:	f7f6 fe98 	bl	8000288 <__aeabi_dsub>
 8009558:	ec41 0b19 	vmov	d9, r0, r1
 800955c:	4642      	mov	r2, r8
 800955e:	464b      	mov	r3, r9
 8009560:	ec51 0b19 	vmov	r0, r1, d9
 8009564:	f7f6 fe92 	bl	800028c <__adddf3>
 8009568:	2400      	movs	r4, #0
 800956a:	a379      	add	r3, pc, #484	; (adr r3, 8009750 <__ieee754_pow+0x9e0>)
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	4620      	mov	r0, r4
 8009572:	460d      	mov	r5, r1
 8009574:	f7f7 f840 	bl	80005f8 <__aeabi_dmul>
 8009578:	ec53 2b19 	vmov	r2, r3, d9
 800957c:	4606      	mov	r6, r0
 800957e:	460f      	mov	r7, r1
 8009580:	4620      	mov	r0, r4
 8009582:	4629      	mov	r1, r5
 8009584:	f7f6 fe80 	bl	8000288 <__aeabi_dsub>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	4640      	mov	r0, r8
 800958e:	4649      	mov	r1, r9
 8009590:	f7f6 fe7a 	bl	8000288 <__aeabi_dsub>
 8009594:	a370      	add	r3, pc, #448	; (adr r3, 8009758 <__ieee754_pow+0x9e8>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f7f7 f82d 	bl	80005f8 <__aeabi_dmul>
 800959e:	a370      	add	r3, pc, #448	; (adr r3, 8009760 <__ieee754_pow+0x9f0>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	4680      	mov	r8, r0
 80095a6:	4689      	mov	r9, r1
 80095a8:	4620      	mov	r0, r4
 80095aa:	4629      	mov	r1, r5
 80095ac:	f7f7 f824 	bl	80005f8 <__aeabi_dmul>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4640      	mov	r0, r8
 80095b6:	4649      	mov	r1, r9
 80095b8:	f7f6 fe68 	bl	800028c <__adddf3>
 80095bc:	4604      	mov	r4, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4630      	mov	r0, r6
 80095c6:	4639      	mov	r1, r7
 80095c8:	f7f6 fe60 	bl	800028c <__adddf3>
 80095cc:	4632      	mov	r2, r6
 80095ce:	463b      	mov	r3, r7
 80095d0:	4680      	mov	r8, r0
 80095d2:	4689      	mov	r9, r1
 80095d4:	f7f6 fe58 	bl	8000288 <__aeabi_dsub>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	4620      	mov	r0, r4
 80095de:	4629      	mov	r1, r5
 80095e0:	f7f6 fe52 	bl	8000288 <__aeabi_dsub>
 80095e4:	4642      	mov	r2, r8
 80095e6:	4606      	mov	r6, r0
 80095e8:	460f      	mov	r7, r1
 80095ea:	464b      	mov	r3, r9
 80095ec:	4640      	mov	r0, r8
 80095ee:	4649      	mov	r1, r9
 80095f0:	f7f7 f802 	bl	80005f8 <__aeabi_dmul>
 80095f4:	a35c      	add	r3, pc, #368	; (adr r3, 8009768 <__ieee754_pow+0x9f8>)
 80095f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fa:	4604      	mov	r4, r0
 80095fc:	460d      	mov	r5, r1
 80095fe:	f7f6 fffb 	bl	80005f8 <__aeabi_dmul>
 8009602:	a35b      	add	r3, pc, #364	; (adr r3, 8009770 <__ieee754_pow+0xa00>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f6 fe3e 	bl	8000288 <__aeabi_dsub>
 800960c:	4622      	mov	r2, r4
 800960e:	462b      	mov	r3, r5
 8009610:	f7f6 fff2 	bl	80005f8 <__aeabi_dmul>
 8009614:	a358      	add	r3, pc, #352	; (adr r3, 8009778 <__ieee754_pow+0xa08>)
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f7f6 fe37 	bl	800028c <__adddf3>
 800961e:	4622      	mov	r2, r4
 8009620:	462b      	mov	r3, r5
 8009622:	f7f6 ffe9 	bl	80005f8 <__aeabi_dmul>
 8009626:	a356      	add	r3, pc, #344	; (adr r3, 8009780 <__ieee754_pow+0xa10>)
 8009628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962c:	f7f6 fe2c 	bl	8000288 <__aeabi_dsub>
 8009630:	4622      	mov	r2, r4
 8009632:	462b      	mov	r3, r5
 8009634:	f7f6 ffe0 	bl	80005f8 <__aeabi_dmul>
 8009638:	a353      	add	r3, pc, #332	; (adr r3, 8009788 <__ieee754_pow+0xa18>)
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	f7f6 fe25 	bl	800028c <__adddf3>
 8009642:	4622      	mov	r2, r4
 8009644:	462b      	mov	r3, r5
 8009646:	f7f6 ffd7 	bl	80005f8 <__aeabi_dmul>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4640      	mov	r0, r8
 8009650:	4649      	mov	r1, r9
 8009652:	f7f6 fe19 	bl	8000288 <__aeabi_dsub>
 8009656:	4604      	mov	r4, r0
 8009658:	460d      	mov	r5, r1
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4640      	mov	r0, r8
 8009660:	4649      	mov	r1, r9
 8009662:	f7f6 ffc9 	bl	80005f8 <__aeabi_dmul>
 8009666:	2200      	movs	r2, #0
 8009668:	ec41 0b19 	vmov	d9, r0, r1
 800966c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009670:	4620      	mov	r0, r4
 8009672:	4629      	mov	r1, r5
 8009674:	f7f6 fe08 	bl	8000288 <__aeabi_dsub>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	ec51 0b19 	vmov	r0, r1, d9
 8009680:	f7f7 f8e4 	bl	800084c <__aeabi_ddiv>
 8009684:	4632      	mov	r2, r6
 8009686:	4604      	mov	r4, r0
 8009688:	460d      	mov	r5, r1
 800968a:	463b      	mov	r3, r7
 800968c:	4640      	mov	r0, r8
 800968e:	4649      	mov	r1, r9
 8009690:	f7f6 ffb2 	bl	80005f8 <__aeabi_dmul>
 8009694:	4632      	mov	r2, r6
 8009696:	463b      	mov	r3, r7
 8009698:	f7f6 fdf8 	bl	800028c <__adddf3>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4620      	mov	r0, r4
 80096a2:	4629      	mov	r1, r5
 80096a4:	f7f6 fdf0 	bl	8000288 <__aeabi_dsub>
 80096a8:	4642      	mov	r2, r8
 80096aa:	464b      	mov	r3, r9
 80096ac:	f7f6 fdec 	bl	8000288 <__aeabi_dsub>
 80096b0:	460b      	mov	r3, r1
 80096b2:	4602      	mov	r2, r0
 80096b4:	493a      	ldr	r1, [pc, #232]	; (80097a0 <__ieee754_pow+0xa30>)
 80096b6:	2000      	movs	r0, #0
 80096b8:	f7f6 fde6 	bl	8000288 <__aeabi_dsub>
 80096bc:	e9cd 0100 	strd	r0, r1, [sp]
 80096c0:	9b01      	ldr	r3, [sp, #4]
 80096c2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80096c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ca:	da2f      	bge.n	800972c <__ieee754_pow+0x9bc>
 80096cc:	4650      	mov	r0, sl
 80096ce:	ed9d 0b00 	vldr	d0, [sp]
 80096d2:	f000 f9cd 	bl	8009a70 <scalbn>
 80096d6:	ec51 0b10 	vmov	r0, r1, d0
 80096da:	ec53 2b18 	vmov	r2, r3, d8
 80096de:	f7ff bbe0 	b.w	8008ea2 <__ieee754_pow+0x132>
 80096e2:	4b30      	ldr	r3, [pc, #192]	; (80097a4 <__ieee754_pow+0xa34>)
 80096e4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80096e8:	429e      	cmp	r6, r3
 80096ea:	f77f af0b 	ble.w	8009504 <__ieee754_pow+0x794>
 80096ee:	4b2e      	ldr	r3, [pc, #184]	; (80097a8 <__ieee754_pow+0xa38>)
 80096f0:	440b      	add	r3, r1
 80096f2:	4303      	orrs	r3, r0
 80096f4:	d00b      	beq.n	800970e <__ieee754_pow+0x99e>
 80096f6:	a326      	add	r3, pc, #152	; (adr r3, 8009790 <__ieee754_pow+0xa20>)
 80096f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fc:	ec51 0b18 	vmov	r0, r1, d8
 8009700:	f7f6 ff7a 	bl	80005f8 <__aeabi_dmul>
 8009704:	a322      	add	r3, pc, #136	; (adr r3, 8009790 <__ieee754_pow+0xa20>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7ff bbca 	b.w	8008ea2 <__ieee754_pow+0x132>
 800970e:	4622      	mov	r2, r4
 8009710:	462b      	mov	r3, r5
 8009712:	f7f6 fdb9 	bl	8000288 <__aeabi_dsub>
 8009716:	4642      	mov	r2, r8
 8009718:	464b      	mov	r3, r9
 800971a:	f7f7 f9f3 	bl	8000b04 <__aeabi_dcmpge>
 800971e:	2800      	cmp	r0, #0
 8009720:	f43f aef0 	beq.w	8009504 <__ieee754_pow+0x794>
 8009724:	e7e7      	b.n	80096f6 <__ieee754_pow+0x986>
 8009726:	f04f 0a00 	mov.w	sl, #0
 800972a:	e717      	b.n	800955c <__ieee754_pow+0x7ec>
 800972c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009730:	4619      	mov	r1, r3
 8009732:	e7d2      	b.n	80096da <__ieee754_pow+0x96a>
 8009734:	491a      	ldr	r1, [pc, #104]	; (80097a0 <__ieee754_pow+0xa30>)
 8009736:	2000      	movs	r0, #0
 8009738:	f7ff bb9e 	b.w	8008e78 <__ieee754_pow+0x108>
 800973c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009740:	f7ff bb9a 	b.w	8008e78 <__ieee754_pow+0x108>
 8009744:	9000      	str	r0, [sp, #0]
 8009746:	f7ff bb76 	b.w	8008e36 <__ieee754_pow+0xc6>
 800974a:	2100      	movs	r1, #0
 800974c:	f7ff bb60 	b.w	8008e10 <__ieee754_pow+0xa0>
 8009750:	00000000 	.word	0x00000000
 8009754:	3fe62e43 	.word	0x3fe62e43
 8009758:	fefa39ef 	.word	0xfefa39ef
 800975c:	3fe62e42 	.word	0x3fe62e42
 8009760:	0ca86c39 	.word	0x0ca86c39
 8009764:	be205c61 	.word	0xbe205c61
 8009768:	72bea4d0 	.word	0x72bea4d0
 800976c:	3e663769 	.word	0x3e663769
 8009770:	c5d26bf1 	.word	0xc5d26bf1
 8009774:	3ebbbd41 	.word	0x3ebbbd41
 8009778:	af25de2c 	.word	0xaf25de2c
 800977c:	3f11566a 	.word	0x3f11566a
 8009780:	16bebd93 	.word	0x16bebd93
 8009784:	3f66c16c 	.word	0x3f66c16c
 8009788:	5555553e 	.word	0x5555553e
 800978c:	3fc55555 	.word	0x3fc55555
 8009790:	c2f8f359 	.word	0xc2f8f359
 8009794:	01a56e1f 	.word	0x01a56e1f
 8009798:	3fe00000 	.word	0x3fe00000
 800979c:	000fffff 	.word	0x000fffff
 80097a0:	3ff00000 	.word	0x3ff00000
 80097a4:	4090cbff 	.word	0x4090cbff
 80097a8:	3f6f3400 	.word	0x3f6f3400
 80097ac:	652b82fe 	.word	0x652b82fe
 80097b0:	3c971547 	.word	0x3c971547

080097b4 <__ieee754_sqrt>:
 80097b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b8:	ec55 4b10 	vmov	r4, r5, d0
 80097bc:	4e56      	ldr	r6, [pc, #344]	; (8009918 <__ieee754_sqrt+0x164>)
 80097be:	43ae      	bics	r6, r5
 80097c0:	ee10 0a10 	vmov	r0, s0
 80097c4:	ee10 3a10 	vmov	r3, s0
 80097c8:	4629      	mov	r1, r5
 80097ca:	462a      	mov	r2, r5
 80097cc:	d110      	bne.n	80097f0 <__ieee754_sqrt+0x3c>
 80097ce:	ee10 2a10 	vmov	r2, s0
 80097d2:	462b      	mov	r3, r5
 80097d4:	f7f6 ff10 	bl	80005f8 <__aeabi_dmul>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	4620      	mov	r0, r4
 80097de:	4629      	mov	r1, r5
 80097e0:	f7f6 fd54 	bl	800028c <__adddf3>
 80097e4:	4604      	mov	r4, r0
 80097e6:	460d      	mov	r5, r1
 80097e8:	ec45 4b10 	vmov	d0, r4, r5
 80097ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f0:	2d00      	cmp	r5, #0
 80097f2:	dc10      	bgt.n	8009816 <__ieee754_sqrt+0x62>
 80097f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80097f8:	4330      	orrs	r0, r6
 80097fa:	d0f5      	beq.n	80097e8 <__ieee754_sqrt+0x34>
 80097fc:	b15d      	cbz	r5, 8009816 <__ieee754_sqrt+0x62>
 80097fe:	ee10 2a10 	vmov	r2, s0
 8009802:	462b      	mov	r3, r5
 8009804:	ee10 0a10 	vmov	r0, s0
 8009808:	f7f6 fd3e 	bl	8000288 <__aeabi_dsub>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	f7f7 f81c 	bl	800084c <__aeabi_ddiv>
 8009814:	e7e6      	b.n	80097e4 <__ieee754_sqrt+0x30>
 8009816:	1509      	asrs	r1, r1, #20
 8009818:	d076      	beq.n	8009908 <__ieee754_sqrt+0x154>
 800981a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800981e:	07ce      	lsls	r6, r1, #31
 8009820:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009824:	bf5e      	ittt	pl
 8009826:	0fda      	lsrpl	r2, r3, #31
 8009828:	005b      	lslpl	r3, r3, #1
 800982a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800982e:	0fda      	lsrs	r2, r3, #31
 8009830:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009834:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009838:	2000      	movs	r0, #0
 800983a:	106d      	asrs	r5, r5, #1
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	f04f 0e16 	mov.w	lr, #22
 8009842:	4684      	mov	ip, r0
 8009844:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009848:	eb0c 0401 	add.w	r4, ip, r1
 800984c:	4294      	cmp	r4, r2
 800984e:	bfde      	ittt	le
 8009850:	1b12      	suble	r2, r2, r4
 8009852:	eb04 0c01 	addle.w	ip, r4, r1
 8009856:	1840      	addle	r0, r0, r1
 8009858:	0052      	lsls	r2, r2, #1
 800985a:	f1be 0e01 	subs.w	lr, lr, #1
 800985e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009862:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009866:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800986a:	d1ed      	bne.n	8009848 <__ieee754_sqrt+0x94>
 800986c:	4671      	mov	r1, lr
 800986e:	2720      	movs	r7, #32
 8009870:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009874:	4562      	cmp	r2, ip
 8009876:	eb04 060e 	add.w	r6, r4, lr
 800987a:	dc02      	bgt.n	8009882 <__ieee754_sqrt+0xce>
 800987c:	d113      	bne.n	80098a6 <__ieee754_sqrt+0xf2>
 800987e:	429e      	cmp	r6, r3
 8009880:	d811      	bhi.n	80098a6 <__ieee754_sqrt+0xf2>
 8009882:	2e00      	cmp	r6, #0
 8009884:	eb06 0e04 	add.w	lr, r6, r4
 8009888:	da43      	bge.n	8009912 <__ieee754_sqrt+0x15e>
 800988a:	f1be 0f00 	cmp.w	lr, #0
 800988e:	db40      	blt.n	8009912 <__ieee754_sqrt+0x15e>
 8009890:	f10c 0801 	add.w	r8, ip, #1
 8009894:	eba2 020c 	sub.w	r2, r2, ip
 8009898:	429e      	cmp	r6, r3
 800989a:	bf88      	it	hi
 800989c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80098a0:	1b9b      	subs	r3, r3, r6
 80098a2:	4421      	add	r1, r4
 80098a4:	46c4      	mov	ip, r8
 80098a6:	0052      	lsls	r2, r2, #1
 80098a8:	3f01      	subs	r7, #1
 80098aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80098ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80098b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80098b6:	d1dd      	bne.n	8009874 <__ieee754_sqrt+0xc0>
 80098b8:	4313      	orrs	r3, r2
 80098ba:	d006      	beq.n	80098ca <__ieee754_sqrt+0x116>
 80098bc:	1c4c      	adds	r4, r1, #1
 80098be:	bf13      	iteet	ne
 80098c0:	3101      	addne	r1, #1
 80098c2:	3001      	addeq	r0, #1
 80098c4:	4639      	moveq	r1, r7
 80098c6:	f021 0101 	bicne.w	r1, r1, #1
 80098ca:	1043      	asrs	r3, r0, #1
 80098cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80098d0:	0849      	lsrs	r1, r1, #1
 80098d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80098d6:	07c2      	lsls	r2, r0, #31
 80098d8:	bf48      	it	mi
 80098da:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80098de:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80098e2:	460c      	mov	r4, r1
 80098e4:	463d      	mov	r5, r7
 80098e6:	e77f      	b.n	80097e8 <__ieee754_sqrt+0x34>
 80098e8:	0ada      	lsrs	r2, r3, #11
 80098ea:	3815      	subs	r0, #21
 80098ec:	055b      	lsls	r3, r3, #21
 80098ee:	2a00      	cmp	r2, #0
 80098f0:	d0fa      	beq.n	80098e8 <__ieee754_sqrt+0x134>
 80098f2:	02d7      	lsls	r7, r2, #11
 80098f4:	d50a      	bpl.n	800990c <__ieee754_sqrt+0x158>
 80098f6:	f1c1 0420 	rsb	r4, r1, #32
 80098fa:	fa23 f404 	lsr.w	r4, r3, r4
 80098fe:	1e4d      	subs	r5, r1, #1
 8009900:	408b      	lsls	r3, r1
 8009902:	4322      	orrs	r2, r4
 8009904:	1b41      	subs	r1, r0, r5
 8009906:	e788      	b.n	800981a <__ieee754_sqrt+0x66>
 8009908:	4608      	mov	r0, r1
 800990a:	e7f0      	b.n	80098ee <__ieee754_sqrt+0x13a>
 800990c:	0052      	lsls	r2, r2, #1
 800990e:	3101      	adds	r1, #1
 8009910:	e7ef      	b.n	80098f2 <__ieee754_sqrt+0x13e>
 8009912:	46e0      	mov	r8, ip
 8009914:	e7be      	b.n	8009894 <__ieee754_sqrt+0xe0>
 8009916:	bf00      	nop
 8009918:	7ff00000 	.word	0x7ff00000

0800991c <fabs>:
 800991c:	ec51 0b10 	vmov	r0, r1, d0
 8009920:	ee10 2a10 	vmov	r2, s0
 8009924:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009928:	ec43 2b10 	vmov	d0, r2, r3
 800992c:	4770      	bx	lr

0800992e <finite>:
 800992e:	b082      	sub	sp, #8
 8009930:	ed8d 0b00 	vstr	d0, [sp]
 8009934:	9801      	ldr	r0, [sp, #4]
 8009936:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800993a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800993e:	0fc0      	lsrs	r0, r0, #31
 8009940:	b002      	add	sp, #8
 8009942:	4770      	bx	lr
 8009944:	0000      	movs	r0, r0
	...

08009948 <nan>:
 8009948:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009950 <nan+0x8>
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	00000000 	.word	0x00000000
 8009954:	7ff80000 	.word	0x7ff80000

08009958 <rint>:
 8009958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800995a:	ec51 0b10 	vmov	r0, r1, d0
 800995e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009962:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009966:	2e13      	cmp	r6, #19
 8009968:	ee10 4a10 	vmov	r4, s0
 800996c:	460b      	mov	r3, r1
 800996e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009972:	dc58      	bgt.n	8009a26 <rint+0xce>
 8009974:	2e00      	cmp	r6, #0
 8009976:	da2b      	bge.n	80099d0 <rint+0x78>
 8009978:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800997c:	4302      	orrs	r2, r0
 800997e:	d023      	beq.n	80099c8 <rint+0x70>
 8009980:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009984:	4302      	orrs	r2, r0
 8009986:	4254      	negs	r4, r2
 8009988:	4314      	orrs	r4, r2
 800998a:	0c4b      	lsrs	r3, r1, #17
 800998c:	0b24      	lsrs	r4, r4, #12
 800998e:	045b      	lsls	r3, r3, #17
 8009990:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009994:	ea44 0103 	orr.w	r1, r4, r3
 8009998:	4b32      	ldr	r3, [pc, #200]	; (8009a64 <rint+0x10c>)
 800999a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800999e:	e9d3 6700 	ldrd	r6, r7, [r3]
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4630      	mov	r0, r6
 80099a8:	4639      	mov	r1, r7
 80099aa:	f7f6 fc6f 	bl	800028c <__adddf3>
 80099ae:	e9cd 0100 	strd	r0, r1, [sp]
 80099b2:	463b      	mov	r3, r7
 80099b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099b8:	4632      	mov	r2, r6
 80099ba:	f7f6 fc65 	bl	8000288 <__aeabi_dsub>
 80099be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80099c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80099c6:	4639      	mov	r1, r7
 80099c8:	ec41 0b10 	vmov	d0, r0, r1
 80099cc:	b003      	add	sp, #12
 80099ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d0:	4a25      	ldr	r2, [pc, #148]	; (8009a68 <rint+0x110>)
 80099d2:	4132      	asrs	r2, r6
 80099d4:	ea01 0702 	and.w	r7, r1, r2
 80099d8:	4307      	orrs	r7, r0
 80099da:	d0f5      	beq.n	80099c8 <rint+0x70>
 80099dc:	0851      	lsrs	r1, r2, #1
 80099de:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80099e2:	4314      	orrs	r4, r2
 80099e4:	d00c      	beq.n	8009a00 <rint+0xa8>
 80099e6:	ea23 0201 	bic.w	r2, r3, r1
 80099ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80099ee:	2e13      	cmp	r6, #19
 80099f0:	fa43 f606 	asr.w	r6, r3, r6
 80099f4:	bf0c      	ite	eq
 80099f6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80099fa:	2400      	movne	r4, #0
 80099fc:	ea42 0306 	orr.w	r3, r2, r6
 8009a00:	4918      	ldr	r1, [pc, #96]	; (8009a64 <rint+0x10c>)
 8009a02:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009a06:	4622      	mov	r2, r4
 8009a08:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	4629      	mov	r1, r5
 8009a10:	f7f6 fc3c 	bl	800028c <__adddf3>
 8009a14:	e9cd 0100 	strd	r0, r1, [sp]
 8009a18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	462b      	mov	r3, r5
 8009a20:	f7f6 fc32 	bl	8000288 <__aeabi_dsub>
 8009a24:	e7d0      	b.n	80099c8 <rint+0x70>
 8009a26:	2e33      	cmp	r6, #51	; 0x33
 8009a28:	dd07      	ble.n	8009a3a <rint+0xe2>
 8009a2a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009a2e:	d1cb      	bne.n	80099c8 <rint+0x70>
 8009a30:	ee10 2a10 	vmov	r2, s0
 8009a34:	f7f6 fc2a 	bl	800028c <__adddf3>
 8009a38:	e7c6      	b.n	80099c8 <rint+0x70>
 8009a3a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009a3e:	f04f 36ff 	mov.w	r6, #4294967295
 8009a42:	40d6      	lsrs	r6, r2
 8009a44:	4230      	tst	r0, r6
 8009a46:	d0bf      	beq.n	80099c8 <rint+0x70>
 8009a48:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009a4c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009a50:	bf1f      	itttt	ne
 8009a52:	ea24 0101 	bicne.w	r1, r4, r1
 8009a56:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009a5a:	fa44 f202 	asrne.w	r2, r4, r2
 8009a5e:	ea41 0402 	orrne.w	r4, r1, r2
 8009a62:	e7cd      	b.n	8009a00 <rint+0xa8>
 8009a64:	08009de8 	.word	0x08009de8
 8009a68:	000fffff 	.word	0x000fffff
 8009a6c:	00000000 	.word	0x00000000

08009a70 <scalbn>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	ec55 4b10 	vmov	r4, r5, d0
 8009a76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	b99a      	cbnz	r2, 8009aa8 <scalbn+0x38>
 8009a80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009a84:	4323      	orrs	r3, r4
 8009a86:	d036      	beq.n	8009af6 <scalbn+0x86>
 8009a88:	4b39      	ldr	r3, [pc, #228]	; (8009b70 <scalbn+0x100>)
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	ee10 0a10 	vmov	r0, s0
 8009a90:	2200      	movs	r2, #0
 8009a92:	f7f6 fdb1 	bl	80005f8 <__aeabi_dmul>
 8009a96:	4b37      	ldr	r3, [pc, #220]	; (8009b74 <scalbn+0x104>)
 8009a98:	429e      	cmp	r6, r3
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	460d      	mov	r5, r1
 8009a9e:	da10      	bge.n	8009ac2 <scalbn+0x52>
 8009aa0:	a32b      	add	r3, pc, #172	; (adr r3, 8009b50 <scalbn+0xe0>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	e03a      	b.n	8009b1e <scalbn+0xae>
 8009aa8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009aac:	428a      	cmp	r2, r1
 8009aae:	d10c      	bne.n	8009aca <scalbn+0x5a>
 8009ab0:	ee10 2a10 	vmov	r2, s0
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	f7f6 fbe8 	bl	800028c <__adddf3>
 8009abc:	4604      	mov	r4, r0
 8009abe:	460d      	mov	r5, r1
 8009ac0:	e019      	b.n	8009af6 <scalbn+0x86>
 8009ac2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	3a36      	subs	r2, #54	; 0x36
 8009aca:	4432      	add	r2, r6
 8009acc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009ad0:	428a      	cmp	r2, r1
 8009ad2:	dd08      	ble.n	8009ae6 <scalbn+0x76>
 8009ad4:	2d00      	cmp	r5, #0
 8009ad6:	a120      	add	r1, pc, #128	; (adr r1, 8009b58 <scalbn+0xe8>)
 8009ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009adc:	da1c      	bge.n	8009b18 <scalbn+0xa8>
 8009ade:	a120      	add	r1, pc, #128	; (adr r1, 8009b60 <scalbn+0xf0>)
 8009ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ae4:	e018      	b.n	8009b18 <scalbn+0xa8>
 8009ae6:	2a00      	cmp	r2, #0
 8009ae8:	dd08      	ble.n	8009afc <scalbn+0x8c>
 8009aea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009aee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009af2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009af6:	ec45 4b10 	vmov	d0, r4, r5
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009b00:	da19      	bge.n	8009b36 <scalbn+0xc6>
 8009b02:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009b06:	429e      	cmp	r6, r3
 8009b08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009b0c:	dd0a      	ble.n	8009b24 <scalbn+0xb4>
 8009b0e:	a112      	add	r1, pc, #72	; (adr r1, 8009b58 <scalbn+0xe8>)
 8009b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e2      	bne.n	8009ade <scalbn+0x6e>
 8009b18:	a30f      	add	r3, pc, #60	; (adr r3, 8009b58 <scalbn+0xe8>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f7f6 fd6b 	bl	80005f8 <__aeabi_dmul>
 8009b22:	e7cb      	b.n	8009abc <scalbn+0x4c>
 8009b24:	a10a      	add	r1, pc, #40	; (adr r1, 8009b50 <scalbn+0xe0>)
 8009b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0b8      	beq.n	8009aa0 <scalbn+0x30>
 8009b2e:	a10e      	add	r1, pc, #56	; (adr r1, 8009b68 <scalbn+0xf8>)
 8009b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b34:	e7b4      	b.n	8009aa0 <scalbn+0x30>
 8009b36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009b3a:	3236      	adds	r2, #54	; 0x36
 8009b3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009b44:	4620      	mov	r0, r4
 8009b46:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <scalbn+0x108>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	e7e8      	b.n	8009b1e <scalbn+0xae>
 8009b4c:	f3af 8000 	nop.w
 8009b50:	c2f8f359 	.word	0xc2f8f359
 8009b54:	01a56e1f 	.word	0x01a56e1f
 8009b58:	8800759c 	.word	0x8800759c
 8009b5c:	7e37e43c 	.word	0x7e37e43c
 8009b60:	8800759c 	.word	0x8800759c
 8009b64:	fe37e43c 	.word	0xfe37e43c
 8009b68:	c2f8f359 	.word	0xc2f8f359
 8009b6c:	81a56e1f 	.word	0x81a56e1f
 8009b70:	43500000 	.word	0x43500000
 8009b74:	ffff3cb0 	.word	0xffff3cb0
 8009b78:	3c900000 	.word	0x3c900000

08009b7c <_init>:
 8009b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7e:	bf00      	nop
 8009b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b82:	bc08      	pop	{r3}
 8009b84:	469e      	mov	lr, r3
 8009b86:	4770      	bx	lr

08009b88 <_fini>:
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8a:	bf00      	nop
 8009b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8e:	bc08      	pop	{r3}
 8009b90:	469e      	mov	lr, r3
 8009b92:	4770      	bx	lr
