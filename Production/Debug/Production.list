
Production.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008964  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08008af8  08008af8  00018af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d20  08008d20  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008d20  08008d20  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d20  08008d20  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031d0  200001d8  08008f00  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200033a8  08008f00  000233a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011374  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e1  00000000  00000000  0003157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00033d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00034cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c67f  00000000  00000000  00035b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001188f  00000000  00000000  000521d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a77e2  00000000  00000000  00063a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d0  00000000  00000000  0010b29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008adc 	.word	0x08008adc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008adc 	.word	0x08008adc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <delay>:
#define timer htim2


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <delay+0x30>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000baa:	bf00      	nop
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <delay+0x30>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3f9      	bcc.n	8000bac <delay+0x14>
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200032cc 	.word	0x200032cc

08000bcc <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2102      	movs	r1, #2
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f004 f82c 	bl	8004c40 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	08db      	lsrs	r3, r3, #3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfa:	481c      	ldr	r0, [pc, #112]	; (8000c6c <send_to_lcd+0xa0>)
 8000bfc:	f004 f820 	bl	8004c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	4816      	ldr	r0, [pc, #88]	; (8000c6c <send_to_lcd+0xa0>)
 8000c12:	f004 f815 	bl	8004c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	085b      	lsrs	r3, r3, #1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	2102      	movs	r1, #2
 8000c26:	4812      	ldr	r0, [pc, #72]	; (8000c70 <send_to_lcd+0xa4>)
 8000c28:	f004 f80a 	bl	8004c40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	2101      	movs	r1, #1
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <send_to_lcd+0xa4>)
 8000c3a:	f004 f801 	bl	8004c40 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f003 fffb 	bl	8004c40 <HAL_GPIO_WritePin>
	delay (20);
 8000c4a:	2014      	movs	r0, #20
 8000c4c:	f7ff ffa4 	bl	8000b98 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f003 fff2 	bl	8004c40 <HAL_GPIO_WritePin>
	delay (20);
 8000c5c:	2014      	movs	r0, #20
 8000c5e:	f7ff ff9b 	bl	8000b98 <delay>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	48001000 	.word	0x48001000
 8000c70:	48000400 	.word	0x48000400

08000c74 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	091b      	lsrs	r3, r3, #4
 8000c82:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff9f 	bl	8000bcc <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff96 	bl	8000bcc <send_to_lcd>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	091b      	lsrs	r3, r3, #4
 8000cb6:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff85 	bl	8000bcc <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ff7c 	bl	8000bcc <send_to_lcd>
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <lcd_put_cur>:
	lcd_send_cmd(0x01);
	delay(2000);
}

void lcd_put_cur(int row, int col)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <lcd_put_cur+0x18>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d005      	beq.n	8000cfe <lcd_put_cur+0x22>
 8000cf2:	e009      	b.n	8000d08 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfa:	603b      	str	r3, [r7, #0]
            break;
 8000cfc:	e004      	b.n	8000d08 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d04:	603b      	str	r3, [r7, #0]
            break;
 8000d06:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ffb1 	bl	8000c74 <lcd_send_cmd>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <lcd_init>:


void lcd_init (void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay(5000);  // wait for >40ms
 8000d1e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d22:	f7ff ff39 	bl	8000b98 <delay>
	lcd_send_cmd (0x30);
 8000d26:	2030      	movs	r0, #48	; 0x30
 8000d28:	f7ff ffa4 	bl	8000c74 <lcd_send_cmd>
	delay(5000);  // wait for >4.1ms
 8000d2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d30:	f7ff ff32 	bl	8000b98 <delay>
	lcd_send_cmd (0x30);
 8000d34:	2030      	movs	r0, #48	; 0x30
 8000d36:	f7ff ff9d 	bl	8000c74 <lcd_send_cmd>
	delay(100);  // wait for >100us
 8000d3a:	2064      	movs	r0, #100	; 0x64
 8000d3c:	f7ff ff2c 	bl	8000b98 <delay>
	lcd_send_cmd (0x30);
 8000d40:	2030      	movs	r0, #48	; 0x30
 8000d42:	f7ff ff97 	bl	8000c74 <lcd_send_cmd>
	delay(10000);
 8000d46:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d4a:	f7ff ff25 	bl	8000b98 <delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d4e:	2020      	movs	r0, #32
 8000d50:	f7ff ff90 	bl	8000c74 <lcd_send_cmd>
	delay(10000);
 8000d54:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d58:	f7ff ff1e 	bl	8000b98 <delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d5c:	2028      	movs	r0, #40	; 0x28
 8000d5e:	f7ff ff89 	bl	8000c74 <lcd_send_cmd>
	delay(1000);
 8000d62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d66:	f7ff ff17 	bl	8000b98 <delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d6a:	2008      	movs	r0, #8
 8000d6c:	f7ff ff82 	bl	8000c74 <lcd_send_cmd>
	delay(1000);
 8000d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d74:	f7ff ff10 	bl	8000b98 <delay>
	lcd_send_cmd (0x01);  // clear display
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f7ff ff7b 	bl	8000c74 <lcd_send_cmd>
	delay(1000);
 8000d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d82:	f7ff ff09 	bl	8000b98 <delay>
	delay(1000);
 8000d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d8a:	f7ff ff05 	bl	8000b98 <delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d8e:	2006      	movs	r0, #6
 8000d90:	f7ff ff70 	bl	8000c74 <lcd_send_cmd>
	delay(1000);
 8000d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d98:	f7ff fefe 	bl	8000b98 <delay>
	lcd_send_cmd (0x0F); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d9c:	200f      	movs	r0, #15
 8000d9e:	f7ff ff69 	bl	8000c74 <lcd_send_cmd>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000dae:	e006      	b.n	8000dbe <lcd_send_string+0x18>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff75 	bl	8000ca8 <lcd_send_data>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f4      	bne.n	8000db0 <lcd_send_string+0xa>
}
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Get variables from Flash Memory

	CAN_IDs=(*(__IO uint32_t *) 0x0800F800);
 8000dd6:	4bac      	ldr	r3, [pc, #688]	; (8001088 <main+0x2b8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4bab      	ldr	r3, [pc, #684]	; (800108c <main+0x2bc>)
 8000dde:	601a      	str	r2, [r3, #0]
	memcpy(id_arr, wordToBytes(CAN_IDs), 4);
 8000de0:	4baa      	ldr	r3, [pc, #680]	; (800108c <main+0x2bc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fb8b 	bl	8003500 <wordToBytes>
 8000dea:	4603      	mov	r3, r0
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4ba7      	ldr	r3, [pc, #668]	; (8001090 <main+0x2c0>)
 8000df2:	601a      	str	r2, [r3, #0]
	can_id_1=id_arr[0];
 8000df4:	4ba6      	ldr	r3, [pc, #664]	; (8001090 <main+0x2c0>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4ba6      	ldr	r3, [pc, #664]	; (8001094 <main+0x2c4>)
 8000dfa:	701a      	strb	r2, [r3, #0]
	can_id_2=id_arr[1];
 8000dfc:	4ba4      	ldr	r3, [pc, #656]	; (8001090 <main+0x2c0>)
 8000dfe:	785a      	ldrb	r2, [r3, #1]
 8000e00:	4ba5      	ldr	r3, [pc, #660]	; (8001098 <main+0x2c8>)
 8000e02:	701a      	strb	r2, [r3, #0]
	can_id_3=id_arr[2];
 8000e04:	4ba2      	ldr	r3, [pc, #648]	; (8001090 <main+0x2c0>)
 8000e06:	789a      	ldrb	r2, [r3, #2]
 8000e08:	4ba4      	ldr	r3, [pc, #656]	; (800109c <main+0x2cc>)
 8000e0a:	701a      	strb	r2, [r3, #0]
	//if duplicate IDs set IDs to 1, 2, and 3 respectively
	if(can_id_1==can_id_2 || can_id_1==can_id_3||can_id_2==can_id_3){
 8000e0c:	4ba1      	ldr	r3, [pc, #644]	; (8001094 <main+0x2c4>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	4ba1      	ldr	r3, [pc, #644]	; (8001098 <main+0x2c8>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d00b      	beq.n	8000e30 <main+0x60>
 8000e18:	4b9e      	ldr	r3, [pc, #632]	; (8001094 <main+0x2c4>)
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	4b9f      	ldr	r3, [pc, #636]	; (800109c <main+0x2cc>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d005      	beq.n	8000e30 <main+0x60>
 8000e24:	4b9c      	ldr	r3, [pc, #624]	; (8001098 <main+0x2c8>)
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4b9c      	ldr	r3, [pc, #624]	; (800109c <main+0x2cc>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d108      	bne.n	8000e42 <main+0x72>
		can_id_1=1;
 8000e30:	4b98      	ldr	r3, [pc, #608]	; (8001094 <main+0x2c4>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
		can_id_2=2;
 8000e36:	4b98      	ldr	r3, [pc, #608]	; (8001098 <main+0x2c8>)
 8000e38:	2202      	movs	r2, #2
 8000e3a:	701a      	strb	r2, [r3, #0]
		can_id_3=3;
 8000e3c:	4b97      	ldr	r3, [pc, #604]	; (800109c <main+0x2cc>)
 8000e3e:	2203      	movs	r2, #3
 8000e40:	701a      	strb	r2, [r3, #0]
	}

	//get the baud rate
	baud_pos=(uint8_t)(*(__IO uint32_t *) 0x0800F804);
 8000e42:	4b97      	ldr	r3, [pc, #604]	; (80010a0 <main+0x2d0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	b25a      	sxtb	r2, r3
 8000e48:	4b96      	ldr	r3, [pc, #600]	; (80010a4 <main+0x2d4>)
 8000e4a:	701a      	strb	r2, [r3, #0]
	//if invalid baud rate then set to 1M
	if(baud_pos<0||baud_pos>3)
 8000e4c:	4b95      	ldr	r3, [pc, #596]	; (80010a4 <main+0x2d4>)
 8000e4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db04      	blt.n	8000e60 <main+0x90>
 8000e56:	4b93      	ldr	r3, [pc, #588]	; (80010a4 <main+0x2d4>)
 8000e58:	f993 3000 	ldrsb.w	r3, [r3]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	dd02      	ble.n	8000e66 <main+0x96>
		baud_pos=3;
 8000e60:	4b90      	ldr	r3, [pc, #576]	; (80010a4 <main+0x2d4>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	701a      	strb	r2, [r3, #0]
	PSC=pow(2,4-baud_pos);//set prescaler
 8000e66:	4b8f      	ldr	r3, [pc, #572]	; (80010a4 <main+0x2d4>)
 8000e68:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6c:	f1c3 0304 	rsb	r3, r3, #4
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb57 	bl	8000524 <__aeabi_i2d>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	ec43 2b11 	vmov	d1, r2, r3
 8000e7e:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8001080 <main+0x2b0>
 8000e82:	f006 fe75 	bl	8007b70 <pow>
 8000e86:	ec53 2b10 	vmov	r2, r3, d0
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fe63 	bl	8000b58 <__aeabi_d2uiz>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b84      	ldr	r3, [pc, #528]	; (80010a8 <main+0x2d8>)
 8000e98:	701a      	strb	r2, [r3, #0]

	//get the number of delays between samples
	num_delays=(uint8_t)(*(__IO uint32_t *) 0x0800F808);
 8000e9a:	4b84      	ldr	r3, [pc, #528]	; (80010ac <main+0x2dc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b83      	ldr	r3, [pc, #524]	; (80010b0 <main+0x2e0>)
 8000ea2:	701a      	strb	r2, [r3, #0]
	if(num_delays<(uint8_t)0)
		num_delays=0;

	// retrieve the analog enabled booleans
	enable_word=(*(__IO uint32_t *) 0x0800F80C);
 8000ea4:	4b83      	ldr	r3, [pc, #524]	; (80010b4 <main+0x2e4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b83      	ldr	r3, [pc, #524]	; (80010b8 <main+0x2e8>)
 8000eac:	601a      	str	r2, [r3, #0]
	memcpy(analog_enable_arr, wordToBytes(enable_word), 4);
 8000eae:	4b82      	ldr	r3, [pc, #520]	; (80010b8 <main+0x2e8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fb24 	bl	8003500 <wordToBytes>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b7f      	ldr	r3, [pc, #508]	; (80010bc <main+0x2ec>)
 8000ec0:	601a      	str	r2, [r3, #0]
	//invert values so the default is on after erasing the memory
	analog_1_enabled=!analog_enable_arr[0];
 8000ec2:	4b7e      	ldr	r3, [pc, #504]	; (80010bc <main+0x2ec>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf0c      	ite	eq
 8000eca:	2301      	moveq	r3, #1
 8000ecc:	2300      	movne	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b7b      	ldr	r3, [pc, #492]	; (80010c0 <main+0x2f0>)
 8000ed4:	701a      	strb	r2, [r3, #0]
	analog_2_enabled=!analog_enable_arr[1];
 8000ed6:	4b79      	ldr	r3, [pc, #484]	; (80010bc <main+0x2ec>)
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf0c      	ite	eq
 8000ede:	2301      	moveq	r3, #1
 8000ee0:	2300      	movne	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b77      	ldr	r3, [pc, #476]	; (80010c4 <main+0x2f4>)
 8000ee8:	701a      	strb	r2, [r3, #0]
	analog_3_enabled=!analog_enable_arr[2];
 8000eea:	4b74      	ldr	r3, [pc, #464]	; (80010bc <main+0x2ec>)
 8000eec:	789b      	ldrb	r3, [r3, #2]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bf0c      	ite	eq
 8000ef2:	2301      	moveq	r3, #1
 8000ef4:	2300      	movne	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <main+0x2f8>)
 8000efc:	701a      	strb	r2, [r3, #0]

	//get the offsets
	analog_1_offset=(*(__IO uint32_t *) 0x0800F810);
 8000efe:	4b73      	ldr	r3, [pc, #460]	; (80010cc <main+0x2fc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a73      	ldr	r2, [pc, #460]	; (80010d0 <main+0x300>)
 8000f04:	6013      	str	r3, [r2, #0]
	analog_2_offset=(*(__IO uint32_t *) 0x0800F814);
 8000f06:	4b73      	ldr	r3, [pc, #460]	; (80010d4 <main+0x304>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a73      	ldr	r2, [pc, #460]	; (80010d8 <main+0x308>)
 8000f0c:	6013      	str	r3, [r2, #0]
	analog_3_offset=(*(__IO uint32_t *) 0x0800F818);
 8000f0e:	4b73      	ldr	r3, [pc, #460]	; (80010dc <main+0x30c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a73      	ldr	r2, [pc, #460]	; (80010e0 <main+0x310>)
 8000f14:	6013      	str	r3, [r2, #0]


	// Set the headers for the first analog device
	headers_1.StdId = can_id_1; // set the CAN ID
 8000f16:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <main+0x2c4>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b71      	ldr	r3, [pc, #452]	; (80010e4 <main+0x314>)
 8000f1e:	601a      	str	r2, [r3, #0]
	headers_1.IDE = CAN_ID_STD;
 8000f20:	4b70      	ldr	r3, [pc, #448]	; (80010e4 <main+0x314>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
	headers_1.RTR = CAN_RTR_DATA;
 8000f26:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <main+0x314>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
	headers_1.DLC = sizeof(a_data_1); // set the size of the data
 8000f2c:	4b6d      	ldr	r3, [pc, #436]	; (80010e4 <main+0x314>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	611a      	str	r2, [r3, #16]
	headers_1.TransmitGlobalTime = DISABLE; // disable transmission of time
 8000f32:	4b6c      	ldr	r3, [pc, #432]	; (80010e4 <main+0x314>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	751a      	strb	r2, [r3, #20]

	// Set the headers for the second analog device
	headers_2.StdId = can_id_2; // set the CAN ID
 8000f38:	4b57      	ldr	r3, [pc, #348]	; (8001098 <main+0x2c8>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b6a      	ldr	r3, [pc, #424]	; (80010e8 <main+0x318>)
 8000f40:	601a      	str	r2, [r3, #0]
	headers_2.IDE = CAN_ID_STD;
 8000f42:	4b69      	ldr	r3, [pc, #420]	; (80010e8 <main+0x318>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
	headers_2.RTR = CAN_RTR_DATA;
 8000f48:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <main+0x318>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
	headers_2.DLC = sizeof(a_data_2); // set the size of the data
 8000f4e:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <main+0x318>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	611a      	str	r2, [r3, #16]
	headers_2.TransmitGlobalTime = DISABLE; // disable transmission of time
 8000f54:	4b64      	ldr	r3, [pc, #400]	; (80010e8 <main+0x318>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	751a      	strb	r2, [r3, #20]

	// Set the headers for the third analog device
	headers_3.StdId = can_id_3; // set the CAN ID
 8000f5a:	4b50      	ldr	r3, [pc, #320]	; (800109c <main+0x2cc>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b62      	ldr	r3, [pc, #392]	; (80010ec <main+0x31c>)
 8000f62:	601a      	str	r2, [r3, #0]
	headers_3.IDE = CAN_ID_STD;
 8000f64:	4b61      	ldr	r3, [pc, #388]	; (80010ec <main+0x31c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
	headers_3.RTR = CAN_RTR_DATA;
 8000f6a:	4b60      	ldr	r3, [pc, #384]	; (80010ec <main+0x31c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
	headers_3.DLC = sizeof(a_data_3); // set the size of the data
 8000f70:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <main+0x31c>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	611a      	str	r2, [r3, #16]
	headers_3.TransmitGlobalTime = DISABLE; // disable transmission of time
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <main+0x31c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	751a      	strb	r2, [r3, #20]


	//Save the stored values to the menus
	//set the baud rate
	memset(temp,0,17); // erase the temp array
 8000f7c:	2211      	movs	r2, #17
 8000f7e:	2100      	movs	r1, #0
 8000f80:	485b      	ldr	r0, [pc, #364]	; (80010f0 <main+0x320>)
 8000f82:	f006 f965 	bl	8007250 <memset>
	strncpy(temp, "Baud rate:  ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8000f86:	2210      	movs	r2, #16
 8000f88:	495a      	ldr	r1, [pc, #360]	; (80010f4 <main+0x324>)
 8000f8a:	4859      	ldr	r0, [pc, #356]	; (80010f0 <main+0x320>)
 8000f8c:	f006 f9cf 	bl	800732e <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 8000f90:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <main+0x2d4>)
 8000f92:	f993 3000 	ldrsb.w	r3, [r3]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4a57      	ldr	r2, [pc, #348]	; (80010f8 <main+0x328>)
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2211      	movs	r2, #17
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4853      	ldr	r0, [pc, #332]	; (80010f0 <main+0x320>)
 8000fa2:	f006 f98c 	bl	80072be <strlcat>
	strlcpy(can_menu[1],temp,17);
 8000fa6:	2211      	movs	r2, #17
 8000fa8:	4951      	ldr	r1, [pc, #324]	; (80010f0 <main+0x320>)
 8000faa:	4854      	ldr	r0, [pc, #336]	; (80010fc <main+0x32c>)
 8000fac:	f006 f9aa 	bl	8007304 <strlcpy>

	//set can IDs
	memset(temp,0,17); // erase the temp array
 8000fb0:	2211      	movs	r2, #17
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	484e      	ldr	r0, [pc, #312]	; (80010f0 <main+0x320>)
 8000fb6:	f006 f94b 	bl	8007250 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8000fba:	2210      	movs	r2, #16
 8000fbc:	4950      	ldr	r1, [pc, #320]	; (8001100 <main+0x330>)
 8000fbe:	484c      	ldr	r0, [pc, #304]	; (80010f0 <main+0x320>)
 8000fc0:	f006 f9b5 	bl	800732e <strncpy>
	strcat(temp, "1:    ");
 8000fc4:	484a      	ldr	r0, [pc, #296]	; (80010f0 <main+0x320>)
 8000fc6:	f7ff f903 	bl	80001d0 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <main+0x320>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <main+0x334>)
 8000fd4:	6810      	ldr	r0, [r2, #0]
 8000fd6:	6018      	str	r0, [r3, #0]
 8000fd8:	8891      	ldrh	r1, [r2, #4]
 8000fda:	7992      	ldrb	r2, [r2, #6]
 8000fdc:	8099      	strh	r1, [r3, #4]
 8000fde:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4848      	ldr	r0, [pc, #288]	; (8001108 <main+0x338>)
 8000fe6:	f006 f933 	bl	8007250 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <main+0x2c4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4946      	ldr	r1, [pc, #280]	; (800110c <main+0x33c>)
 8000ff2:	4845      	ldr	r0, [pc, #276]	; (8001108 <main+0x338>)
 8000ff4:	f006 f934 	bl	8007260 <siprintf>
	strlcat(temp, char_arr,17);
 8000ff8:	2211      	movs	r2, #17
 8000ffa:	4943      	ldr	r1, [pc, #268]	; (8001108 <main+0x338>)
 8000ffc:	483c      	ldr	r0, [pc, #240]	; (80010f0 <main+0x320>)
 8000ffe:	f006 f95e 	bl	80072be <strlcat>
	memcpy(can_menu[2],temp,17);
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <main+0x340>)
 8001004:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <main+0x320>)
 8001006:	3322      	adds	r3, #34	; 0x22
 8001008:	6815      	ldr	r5, [r2, #0]
 800100a:	6854      	ldr	r4, [r2, #4]
 800100c:	6890      	ldr	r0, [r2, #8]
 800100e:	68d1      	ldr	r1, [r2, #12]
 8001010:	601d      	str	r5, [r3, #0]
 8001012:	605c      	str	r4, [r3, #4]
 8001014:	6098      	str	r0, [r3, #8]
 8001016:	60d9      	str	r1, [r3, #12]
 8001018:	7c12      	ldrb	r2, [r2, #16]
 800101a:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 800101c:	2211      	movs	r2, #17
 800101e:	2100      	movs	r1, #0
 8001020:	4833      	ldr	r0, [pc, #204]	; (80010f0 <main+0x320>)
 8001022:	f006 f915 	bl	8007250 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8001026:	2210      	movs	r2, #16
 8001028:	4935      	ldr	r1, [pc, #212]	; (8001100 <main+0x330>)
 800102a:	4831      	ldr	r0, [pc, #196]	; (80010f0 <main+0x320>)
 800102c:	f006 f97f 	bl	800732e <strncpy>
	strcat(temp, "2:    ");
 8001030:	482f      	ldr	r0, [pc, #188]	; (80010f0 <main+0x320>)
 8001032:	f7ff f8cd 	bl	80001d0 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <main+0x320>)
 800103c:	4413      	add	r3, r2
 800103e:	4a35      	ldr	r2, [pc, #212]	; (8001114 <main+0x344>)
 8001040:	6810      	ldr	r0, [r2, #0]
 8001042:	6018      	str	r0, [r3, #0]
 8001044:	8891      	ldrh	r1, [r2, #4]
 8001046:	7992      	ldrb	r2, [r2, #6]
 8001048:	8099      	strh	r1, [r3, #4]
 800104a:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 800104c:	2210      	movs	r2, #16
 800104e:	2100      	movs	r1, #0
 8001050:	482d      	ldr	r0, [pc, #180]	; (8001108 <main+0x338>)
 8001052:	f006 f8fd 	bl	8007250 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <main+0x2c8>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	492b      	ldr	r1, [pc, #172]	; (800110c <main+0x33c>)
 800105e:	482a      	ldr	r0, [pc, #168]	; (8001108 <main+0x338>)
 8001060:	f006 f8fe 	bl	8007260 <siprintf>
	strlcat(temp, char_arr,17);
 8001064:	2211      	movs	r2, #17
 8001066:	4928      	ldr	r1, [pc, #160]	; (8001108 <main+0x338>)
 8001068:	4821      	ldr	r0, [pc, #132]	; (80010f0 <main+0x320>)
 800106a:	f006 f928 	bl	80072be <strlcat>
	memcpy(can_menu[3],temp,17);
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <main+0x340>)
 8001070:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <main+0x320>)
 8001072:	3333      	adds	r3, #51	; 0x33
 8001074:	6815      	ldr	r5, [r2, #0]
 8001076:	6854      	ldr	r4, [r2, #4]
 8001078:	6890      	ldr	r0, [r2, #8]
 800107a:	68d1      	ldr	r1, [r2, #12]
 800107c:	e04c      	b.n	8001118 <main+0x348>
 800107e:	bf00      	nop
 8001080:	00000000 	.word	0x00000000
 8001084:	40000000 	.word	0x40000000
 8001088:	0800f800 	.word	0x0800f800
 800108c:	20003258 	.word	0x20003258
 8001090:	20000234 	.word	0x20000234
 8001094:	200032b0 	.word	0x200032b0
 8001098:	200012a0 	.word	0x200012a0
 800109c:	20000228 	.word	0x20000228
 80010a0:	0800f804 	.word	0x0800f804
 80010a4:	2000015f 	.word	0x2000015f
 80010a8:	20000000 	.word	0x20000000
 80010ac:	0800f808 	.word	0x0800f808
 80010b0:	20000216 	.word	0x20000216
 80010b4:	0800f80c 	.word	0x0800f80c
 80010b8:	200012a4 	.word	0x200012a4
 80010bc:	20003268 	.word	0x20003268
 80010c0:	20000001 	.word	0x20000001
 80010c4:	20000002 	.word	0x20000002
 80010c8:	20000003 	.word	0x20000003
 80010cc:	0800f810 	.word	0x0800f810
 80010d0:	200001f4 	.word	0x200001f4
 80010d4:	0800f814 	.word	0x0800f814
 80010d8:	200001f8 	.word	0x200001f8
 80010dc:	0800f818 	.word	0x0800f818
 80010e0:	200001fc 	.word	0x200001fc
 80010e4:	200011f4 	.word	0x200011f4
 80010e8:	200032b4 	.word	0x200032b4
 80010ec:	200011dc 	.word	0x200011dc
 80010f0:	20001238 	.word	0x20001238
 80010f4:	08008af8 	.word	0x08008af8
 80010f8:	08008c68 	.word	0x08008c68
 80010fc:	2000005d 	.word	0x2000005d
 8001100:	08008b08 	.word	0x08008b08
 8001104:	08008b10 	.word	0x08008b10
 8001108:	2000331c 	.word	0x2000331c
 800110c:	08008b18 	.word	0x08008b18
 8001110:	2000004c 	.word	0x2000004c
 8001114:	08008b20 	.word	0x08008b20
 8001118:	601d      	str	r5, [r3, #0]
 800111a:	605c      	str	r4, [r3, #4]
 800111c:	6098      	str	r0, [r3, #8]
 800111e:	60d9      	str	r1, [r3, #12]
 8001120:	7c12      	ldrb	r2, [r2, #16]
 8001122:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 8001124:	2211      	movs	r2, #17
 8001126:	2100      	movs	r1, #0
 8001128:	48bc      	ldr	r0, [pc, #752]	; (800141c <main+0x64c>)
 800112a:	f006 f891 	bl	8007250 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 800112e:	2210      	movs	r2, #16
 8001130:	49bb      	ldr	r1, [pc, #748]	; (8001420 <main+0x650>)
 8001132:	48ba      	ldr	r0, [pc, #744]	; (800141c <main+0x64c>)
 8001134:	f006 f8fb 	bl	800732e <strncpy>
	strcat(temp, "3:    ");
 8001138:	48b8      	ldr	r0, [pc, #736]	; (800141c <main+0x64c>)
 800113a:	f7ff f849 	bl	80001d0 <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4bb6      	ldr	r3, [pc, #728]	; (800141c <main+0x64c>)
 8001144:	4413      	add	r3, r2
 8001146:	4ab7      	ldr	r2, [pc, #732]	; (8001424 <main+0x654>)
 8001148:	6810      	ldr	r0, [r2, #0]
 800114a:	6018      	str	r0, [r3, #0]
 800114c:	8891      	ldrh	r1, [r2, #4]
 800114e:	7992      	ldrb	r2, [r2, #6]
 8001150:	8099      	strh	r1, [r3, #4]
 8001152:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8001154:	2210      	movs	r2, #16
 8001156:	2100      	movs	r1, #0
 8001158:	48b3      	ldr	r0, [pc, #716]	; (8001428 <main+0x658>)
 800115a:	f006 f879 	bl	8007250 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 800115e:	4bb3      	ldr	r3, [pc, #716]	; (800142c <main+0x65c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	49b2      	ldr	r1, [pc, #712]	; (8001430 <main+0x660>)
 8001166:	48b0      	ldr	r0, [pc, #704]	; (8001428 <main+0x658>)
 8001168:	f006 f87a 	bl	8007260 <siprintf>
	strlcat(temp, char_arr,17);
 800116c:	2211      	movs	r2, #17
 800116e:	49ae      	ldr	r1, [pc, #696]	; (8001428 <main+0x658>)
 8001170:	48aa      	ldr	r0, [pc, #680]	; (800141c <main+0x64c>)
 8001172:	f006 f8a4 	bl	80072be <strlcat>
	memcpy(can_menu[4],temp,17);
 8001176:	4baf      	ldr	r3, [pc, #700]	; (8001434 <main+0x664>)
 8001178:	4aa8      	ldr	r2, [pc, #672]	; (800141c <main+0x64c>)
 800117a:	f103 0444 	add.w	r4, r3, #68	; 0x44
 800117e:	4615      	mov	r5, r2
 8001180:	6828      	ldr	r0, [r5, #0]
 8001182:	6869      	ldr	r1, [r5, #4]
 8001184:	68aa      	ldr	r2, [r5, #8]
 8001186:	68eb      	ldr	r3, [r5, #12]
 8001188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118a:	7c2b      	ldrb	r3, [r5, #16]
 800118c:	7023      	strb	r3, [r4, #0]

	//Delay
	memset(temp,0,17); // erase the temp array
 800118e:	2211      	movs	r2, #17
 8001190:	2100      	movs	r1, #0
 8001192:	48a2      	ldr	r0, [pc, #648]	; (800141c <main+0x64c>)
 8001194:	f006 f85c 	bl	8007250 <memset>
	strncpy(temp, "Delay:   ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8001198:	2210      	movs	r2, #16
 800119a:	49a7      	ldr	r1, [pc, #668]	; (8001438 <main+0x668>)
 800119c:	489f      	ldr	r0, [pc, #636]	; (800141c <main+0x64c>)
 800119e:	f006 f8c6 	bl	800732e <strncpy>
	memset(char_arr, 0, 16);
 80011a2:	2210      	movs	r2, #16
 80011a4:	2100      	movs	r1, #0
 80011a6:	48a0      	ldr	r0, [pc, #640]	; (8001428 <main+0x658>)
 80011a8:	f006 f852 	bl	8007250 <memset>
	sprintf(char_arr, "%05d", us*(num_delays+1));
 80011ac:	4ba3      	ldr	r3, [pc, #652]	; (800143c <main+0x66c>)
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4ba2      	ldr	r3, [pc, #648]	; (8001440 <main+0x670>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	fb03 f302 	mul.w	r3, r3, r2
 80011be:	461a      	mov	r2, r3
 80011c0:	49a0      	ldr	r1, [pc, #640]	; (8001444 <main+0x674>)
 80011c2:	4899      	ldr	r0, [pc, #612]	; (8001428 <main+0x658>)
 80011c4:	f006 f84c 	bl	8007260 <siprintf>
	strcat(temp, char_arr);
 80011c8:	4997      	ldr	r1, [pc, #604]	; (8001428 <main+0x658>)
 80011ca:	4894      	ldr	r0, [pc, #592]	; (800141c <main+0x64c>)
 80011cc:	f006 f868 	bl	80072a0 <strcat>
	strlcat(temp,"us",17);
 80011d0:	2211      	movs	r2, #17
 80011d2:	499d      	ldr	r1, [pc, #628]	; (8001448 <main+0x678>)
 80011d4:	4891      	ldr	r0, [pc, #580]	; (800141c <main+0x64c>)
 80011d6:	f006 f872 	bl	80072be <strlcat>
	memcpy(main_menu[3],temp,17);
 80011da:	4b9c      	ldr	r3, [pc, #624]	; (800144c <main+0x67c>)
 80011dc:	4a8f      	ldr	r2, [pc, #572]	; (800141c <main+0x64c>)
 80011de:	3333      	adds	r3, #51	; 0x33
 80011e0:	6815      	ldr	r5, [r2, #0]
 80011e2:	6854      	ldr	r4, [r2, #4]
 80011e4:	6890      	ldr	r0, [r2, #8]
 80011e6:	68d1      	ldr	r1, [r2, #12]
 80011e8:	601d      	str	r5, [r3, #0]
 80011ea:	605c      	str	r4, [r3, #4]
 80011ec:	6098      	str	r0, [r3, #8]
 80011ee:	60d9      	str	r1, [r3, #12]
 80011f0:	7c12      	ldrb	r2, [r2, #16]
 80011f2:	741a      	strb	r2, [r3, #16]

	//Analog enabled bools
	if(!analog_1_enabled)
 80011f4:	4b96      	ldr	r3, [pc, #600]	; (8001450 <main+0x680>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10b      	bne.n	8001214 <main+0x444>
		memcpy(analog_menu[5],"Analog 1:    OFF",17);
 80011fc:	4b95      	ldr	r3, [pc, #596]	; (8001454 <main+0x684>)
 80011fe:	4a96      	ldr	r2, [pc, #600]	; (8001458 <main+0x688>)
 8001200:	f103 0555 	add.w	r5, r3, #85	; 0x55
 8001204:	4614      	mov	r4, r2
 8001206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001208:	6028      	str	r0, [r5, #0]
 800120a:	6069      	str	r1, [r5, #4]
 800120c:	60aa      	str	r2, [r5, #8]
 800120e:	60eb      	str	r3, [r5, #12]
 8001210:	7823      	ldrb	r3, [r4, #0]
 8001212:	742b      	strb	r3, [r5, #16]
	if(!analog_2_enabled)
 8001214:	4b91      	ldr	r3, [pc, #580]	; (800145c <main+0x68c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10b      	bne.n	8001234 <main+0x464>
		memcpy(analog_menu[6],"Analog 2:    OFF",17);
 800121c:	4b8d      	ldr	r3, [pc, #564]	; (8001454 <main+0x684>)
 800121e:	4a90      	ldr	r2, [pc, #576]	; (8001460 <main+0x690>)
 8001220:	f103 0566 	add.w	r5, r3, #102	; 0x66
 8001224:	4614      	mov	r4, r2
 8001226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001228:	6028      	str	r0, [r5, #0]
 800122a:	6069      	str	r1, [r5, #4]
 800122c:	60aa      	str	r2, [r5, #8]
 800122e:	60eb      	str	r3, [r5, #12]
 8001230:	7823      	ldrb	r3, [r4, #0]
 8001232:	742b      	strb	r3, [r5, #16]
	if(!analog_3_enabled)
 8001234:	4b8b      	ldr	r3, [pc, #556]	; (8001464 <main+0x694>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10b      	bne.n	8001254 <main+0x484>
		memcpy(analog_menu[7],"Analog 3:    OFF",17);
 800123c:	4b85      	ldr	r3, [pc, #532]	; (8001454 <main+0x684>)
 800123e:	4a8a      	ldr	r2, [pc, #552]	; (8001468 <main+0x698>)
 8001240:	f103 0577 	add.w	r5, r3, #119	; 0x77
 8001244:	4614      	mov	r4, r2
 8001246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001248:	6028      	str	r0, [r5, #0]
 800124a:	6069      	str	r1, [r5, #4]
 800124c:	60aa      	str	r2, [r5, #8]
 800124e:	60eb      	str	r3, [r5, #12]
 8001250:	7823      	ldrb	r3, [r4, #0]
 8001252:	742b      	strb	r3, [r5, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f002 fcb4 	bl	8003bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 f93c 	bl	80014d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f000 fb2c 	bl	80018b8 <MX_GPIO_Init>
  MX_CAN_Init();
 8001260:	f000 f996 	bl	8001590 <MX_CAN_Init>
  MX_SDADC1_Init();
 8001264:	f000 f9d8 	bl	8001618 <MX_SDADC1_Init>
  MX_SDADC2_Init();
 8001268:	f000 fa12 	bl	8001690 <MX_SDADC2_Init>
  MX_SDADC3_Init();
 800126c:	f000 fa4e 	bl	800170c <MX_SDADC3_Init>
  MX_TIM2_Init();
 8001270:	f000 fa88 	bl	8001784 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001274:	f000 fad2 	bl	800181c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//start timer
 8001278:	487c      	ldr	r0, [pc, #496]	; (800146c <main+0x69c>)
 800127a:	f005 fb47 	bl	800690c <HAL_TIM_Base_Start>

	//initialize LCD
	lcd_init();
 800127e:	f7ff fd4c 	bl	8000d1a <lcd_init>
	lcd_put_cur(0,0);
 8001282:	2100      	movs	r1, #0
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff fd29 	bl	8000cdc <lcd_put_cur>
	lcd_send_string("Starting Up...");
 800128a:	4879      	ldr	r0, [pc, #484]	; (8001470 <main+0x6a0>)
 800128c:	f7ff fd8b 	bl	8000da6 <lcd_send_string>
	HAL_Delay(1000);
 8001290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001294:	f002 fcfa 	bl	8003c8c <HAL_Delay>
	lcd_put_cur(0,0);
 8001298:	2100      	movs	r1, #0
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fd1e 	bl	8000cdc <lcd_put_cur>
	lcd_send_string("Initializing CAN");
 80012a0:	4874      	ldr	r0, [pc, #464]	; (8001474 <main+0x6a4>)
 80012a2:	f7ff fd80 	bl	8000da6 <lcd_send_string>
	HAL_Delay(1000);
 80012a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012aa:	f002 fcef 	bl	8003c8c <HAL_Delay>

	//setup CAN filter
	can_filter.FilterMaskIdHigh = 0x0000;
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <main+0x6a8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 80012b4:	4b70      	ldr	r3, [pc, #448]	; (8001478 <main+0x6a8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80012ba:	4b6f      	ldr	r3, [pc, #444]	; (8001478 <main+0x6a8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
	can_filter.FilterBank = 0;
 80012c0:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <main+0x6a8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80012c6:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <main+0x6a8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80012cc:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <main+0x6a8>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	61da      	str	r2, [r3, #28]
	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 80012d2:	4b69      	ldr	r3, [pc, #420]	; (8001478 <main+0x6a8>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	621a      	str	r2, [r3, #32]
	//check that CAN Filter was setup correctly
	if (HAL_CAN_ConfigFilter(&hcan, &can_filter) != HAL_OK) {
 80012d8:	4967      	ldr	r1, [pc, #412]	; (8001478 <main+0x6a8>)
 80012da:	4868      	ldr	r0, [pc, #416]	; (800147c <main+0x6ac>)
 80012dc:	f002 fdf5 	bl	8003eca <HAL_CAN_ConfigFilter>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <main+0x51a>
		Error_Handler();
 80012e6:	f002 fa37 	bl	8003758 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80012ea:	4864      	ldr	r0, [pc, #400]	; (800147c <main+0x6ac>)
 80012ec:	f002 feb7 	bl	800405e <HAL_CAN_Start>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <main+0x52a>
		Error_Handler();
 80012f6:	f002 fa2f 	bl	8003758 <Error_Handler>
	}

	//display main menu
	lcd_put_cur(0,0);
 80012fa:	2100      	movs	r1, #0
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fced 	bl	8000cdc <lcd_put_cur>
	//the string is copied to temp to remove the null character at the end of the string in the menu
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8001302:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <main+0x6b0>)
 8001304:	f993 3000 	ldrsb.w	r3, [r3]
 8001308:	461a      	mov	r2, r3
 800130a:	4613      	mov	r3, r2
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	4a4e      	ldr	r2, [pc, #312]	; (800144c <main+0x67c>)
 8001312:	4413      	add	r3, r2
 8001314:	2210      	movs	r2, #16
 8001316:	4619      	mov	r1, r3
 8001318:	4840      	ldr	r0, [pc, #256]	; (800141c <main+0x64c>)
 800131a:	f006 f808 	bl	800732e <strncpy>
 800131e:	4603      	mov	r3, r0
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fd40 	bl	8000da6 <lcd_send_string>
	lcd_put_cur(1,0);
 8001326:	2100      	movs	r1, #0
 8001328:	2001      	movs	r0, #1
 800132a:	f7ff fcd7 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 800132e:	4b54      	ldr	r3, [pc, #336]	; (8001480 <main+0x6b0>)
 8001330:	f993 3000 	ldrsb.w	r3, [r3]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	4613      	mov	r3, r2
 8001338:	011b      	lsls	r3, r3, #4
 800133a:	4413      	add	r3, r2
 800133c:	4a43      	ldr	r2, [pc, #268]	; (800144c <main+0x67c>)
 800133e:	4413      	add	r3, r2
 8001340:	2210      	movs	r2, #16
 8001342:	4619      	mov	r1, r3
 8001344:	4835      	ldr	r0, [pc, #212]	; (800141c <main+0x64c>)
 8001346:	f005 fff2 	bl	800732e <strncpy>
 800134a:	4603      	mov	r3, r0
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fd2a 	bl	8000da6 <lcd_send_string>
	lcd_put_cur(0,0);
 8001352:	2100      	movs	r1, #0
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff fcc1 	bl	8000cdc <lcd_put_cur>

	int display_counter=0;//counter used in updating the display
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
	int16_t timer_compensation=0;//compensation for when the operations within the loop take too long
 800135e:	2300      	movs	r3, #0
 8001360:	807b      	strh	r3, [r7, #2]

	//calibrate the SDADCs
	calibrateSDADC(&hsdadc1, SDADC_CHANNEL_1);
 8001362:	4948      	ldr	r1, [pc, #288]	; (8001484 <main+0x6b4>)
 8001364:	4848      	ldr	r0, [pc, #288]	; (8001488 <main+0x6b8>)
 8001366:	f002 f8eb 	bl	8003540 <calibrateSDADC>
	calibrateSDADC(&hsdadc2, SDADC_CHANNEL_0);
 800136a:	2101      	movs	r1, #1
 800136c:	4847      	ldr	r0, [pc, #284]	; (800148c <main+0x6bc>)
 800136e:	f002 f8e7 	bl	8003540 <calibrateSDADC>
	calibrateSDADC(&hsdadc3, SDADC_CHANNEL_4);
 8001372:	4947      	ldr	r1, [pc, #284]	; (8001490 <main+0x6c0>)
 8001374:	4847      	ldr	r0, [pc, #284]	; (8001494 <main+0x6c4>)
 8001376:	f002 f8e3 	bl	8003540 <calibrateSDADC>
	HAL_Delay(300);
 800137a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800137e:	f002 fc85 	bl	8003c8c <HAL_Delay>

	//start ADC conversion interrupts
	if(analog_1_enabled)
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <main+0x680>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <main+0x5c0>
		HAL_SDADC_Start_IT(&hsdadc1);
 800138a:	483f      	ldr	r0, [pc, #252]	; (8001488 <main+0x6b8>)
 800138c:	f005 f8d9 	bl	8006542 <HAL_SDADC_Start_IT>
	if(analog_2_enabled)
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <main+0x68c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <main+0x5ce>
		HAL_SDADC_Start_IT(&hsdadc2);
 8001398:	483c      	ldr	r0, [pc, #240]	; (800148c <main+0x6bc>)
 800139a:	f005 f8d2 	bl	8006542 <HAL_SDADC_Start_IT>
	if(analog_3_enabled)
 800139e:	4b31      	ldr	r3, [pc, #196]	; (8001464 <main+0x694>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <main+0x5dc>
		HAL_SDADC_Start_IT(&hsdadc3);
 80013a6:	483b      	ldr	r0, [pc, #236]	; (8001494 <main+0x6c4>)
 80013a8:	f005 f8cb 	bl	8006542 <HAL_SDADC_Start_IT>

	// start can timer
	TIM3->ARR = ((num_delays+1)*us) - 1;
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <main+0x670>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a22      	ldr	r2, [pc, #136]	; (800143c <main+0x66c>)
 80013b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	1e5a      	subs	r2, r3, #1
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <main+0x6c8>)
 80013c0:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim3);
 80013c2:	4836      	ldr	r0, [pc, #216]	; (800149c <main+0x6cc>)
 80013c4:	f005 fb02 	bl	80069cc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//start ADC conversion interrupts
		if(analog_1_enabled)
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <main+0x680>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <main+0x606>
			HAL_SDADC_Start_IT(&hsdadc1);
 80013d0:	482d      	ldr	r0, [pc, #180]	; (8001488 <main+0x6b8>)
 80013d2:	f005 f8b6 	bl	8006542 <HAL_SDADC_Start_IT>
		if(analog_2_enabled)
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <main+0x68c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <main+0x614>
			HAL_SDADC_Start_IT(&hsdadc2);
 80013de:	482b      	ldr	r0, [pc, #172]	; (800148c <main+0x6bc>)
 80013e0:	f005 f8af 	bl	8006542 <HAL_SDADC_Start_IT>
		if(analog_3_enabled)
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <main+0x694>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <main+0x622>
			HAL_SDADC_Start_IT(&hsdadc3);
 80013ec:	4829      	ldr	r0, [pc, #164]	; (8001494 <main+0x6c4>)
 80013ee:	f005 f8a8 	bl	8006542 <HAL_SDADC_Start_IT>


		//Delay between samples
		if ((int16_t)__HAL_TIM_GET_COUNTER(&htim2) >= us);
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <main+0x69c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim2,0); // reset timer
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <main+0x69c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
			//reset display counter (waits 200 delays between updates to the display in the display values menu)
			if(display_counter>200)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2bc8      	cmp	r3, #200	; 0xc8
 8001404:	dd01      	ble.n	800140a <main+0x63a>
				display_counter=0;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]

			//Display analog values on display
			if(in_main_menu && menu_pos==2 && change_value_bool && display_counter==0)
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <main+0x6d0>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d052      	beq.n	80014b8 <main+0x6e8>
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <main+0x6b0>)
 8001414:	f993 3000 	ldrsb.w	r3, [r3]
 8001418:	2b02      	cmp	r3, #2
 800141a:	e043      	b.n	80014a4 <main+0x6d4>
 800141c:	20001238 	.word	0x20001238
 8001420:	08008b08 	.word	0x08008b08
 8001424:	08008b28 	.word	0x08008b28
 8001428:	2000331c 	.word	0x2000331c
 800142c:	20000228 	.word	0x20000228
 8001430:	08008b18 	.word	0x08008b18
 8001434:	2000004c 	.word	0x2000004c
 8001438:	08008b30 	.word	0x08008b30
 800143c:	20000160 	.word	0x20000160
 8001440:	20000216 	.word	0x20000216
 8001444:	08008b3c 	.word	0x08008b3c
 8001448:	08008b44 	.word	0x08008b44
 800144c:	20000008 	.word	0x20000008
 8001450:	20000001 	.word	0x20000001
 8001454:	200000b4 	.word	0x200000b4
 8001458:	08008b48 	.word	0x08008b48
 800145c:	20000002 	.word	0x20000002
 8001460:	08008b5c 	.word	0x08008b5c
 8001464:	20000003 	.word	0x20000003
 8001468:	08008b70 	.word	0x08008b70
 800146c:	200032cc 	.word	0x200032cc
 8001470:	08008b84 	.word	0x08008b84
 8001474:	08008b94 	.word	0x08008b94
 8001478:	20002248 	.word	0x20002248
 800147c:	2000120c 	.word	0x2000120c
 8001480:	20000213 	.word	0x20000213
 8001484:	00010002 	.word	0x00010002
 8001488:	20002270 	.word	0x20002270
 800148c:	2000326c 	.word	0x2000326c
 8001490:	00040010 	.word	0x00040010
 8001494:	2000332c 	.word	0x2000332c
 8001498:	40000400 	.word	0x40000400
 800149c:	20001250 	.word	0x20001250
 80014a0:	2000015e 	.word	0x2000015e
 80014a4:	d108      	bne.n	80014b8 <main+0x6e8>
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <main+0x6fc>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <main+0x6e8>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <main+0x6e8>
				displayValues();
 80014b4:	f001 fe80 	bl	80031b8 <displayValues>

			//increment counters
			display_counter++;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3301      	adds	r3, #1
 80014bc:	607b      	str	r3, [r7, #4]
			btn_counter++;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <main+0x700>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <main+0x700>)
 80014c8:	801a      	strh	r2, [r3, #0]
		if(analog_1_enabled)
 80014ca:	e77d      	b.n	80013c8 <main+0x5f8>
 80014cc:	20000217 	.word	0x20000217
 80014d0:	20000218 	.word	0x20000218

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b09a      	sub	sp, #104	; 0x68
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014de:	2228      	movs	r2, #40	; 0x28
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 feb4 	bl	8007250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	463b      	mov	r3, r7
 80014fa:	222c      	movs	r2, #44	; 0x2c
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fea6 	bl	8007250 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001504:	2301      	movs	r3, #1
 8001506:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800150e:	2300      	movs	r3, #0
 8001510:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001516:	4618      	mov	r0, r3
 8001518:	f003 fbe2 	bl	8004ce0 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8001522:	f002 f919 	bl	8003758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800152a:	2301      	movs	r3, #1
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001536:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800153c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fad4 	bl	8005af0 <HAL_RCC_ClockConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800154e:	f002 f903 	bl	8003758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDADC;
 8001552:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001556:	603b      	str	r3, [r7, #0]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV4;
 8001558:	f04f 4308 	mov.w	r3, #2281701376	; 0x88000000
 800155c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4618      	mov	r0, r3
 8001562:	f004 fcad 	bl	8005ec0 <HAL_RCCEx_PeriphCLKConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800156c:	f002 f8f4 	bl	8003758 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8001570:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001574:	f003 fb94 	bl	8004ca0 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG2);
 8001578:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800157c:	f003 fb90 	bl	8004ca0 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 8001580:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001584:	f003 fb8c 	bl	8004ca0 <HAL_PWREx_EnableSDADC>
}
 8001588:	bf00      	nop
 800158a:	3768      	adds	r7, #104	; 0x68
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_CAN_Init+0x7c>)
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <MX_CAN_Init+0x80>)
 8001598:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_CAN_Init+0x7c>)
 800159c:	2202      	movs	r2, #2
 800159e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_CAN_Init+0x7c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_CAN_Init+0x7c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_CAN_Init+0x7c>)
 80015ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015b2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_CAN_Init+0x7c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_CAN_Init+0x7c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_CAN_Init+0x7c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_CAN_Init+0x7c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_CAN_Init+0x7c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_CAN_Init+0x7c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_CAN_Init+0x7c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <MX_CAN_Init+0x7c>)
 80015e0:	f002 fb78 	bl	8003cd4 <HAL_CAN_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80015ea:	f002 f8b5 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	//set the prescaler to the right value for the stored baud rate
	hcan.Init.Prescaler = PSC;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_CAN_Init+0x84>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <MX_CAN_Init+0x7c>)
 80015f6:	605a      	str	r2, [r3, #4]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_CAN_Init+0x7c>)
 80015fa:	f002 fb6b 	bl	8003cd4 <HAL_CAN_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_CAN_Init+0x78>
	{
		Error_Handler();
 8001604:	f002 f8a8 	bl	8003758 <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000120c 	.word	0x2000120c
 8001610:	40006400 	.word	0x40006400
 8001614:	20000000 	.word	0x20000000

08001618 <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 800161e:	463b      	mov	r3, r7
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC1_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_SDADC1_Init+0x70>)
 800162c:	4a17      	ldr	r2, [pc, #92]	; (800168c <MX_SDADC1_Init+0x74>)
 800162e:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_SDADC1_Init+0x70>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_SDADC1_Init+0x70>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_SDADC1_Init+0x70>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_SDADC1_Init+0x70>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8001648:	480f      	ldr	r0, [pc, #60]	; (8001688 <MX_SDADC1_Init+0x70>)
 800164a:	f004 fdad 	bl	80061a8 <HAL_SDADC_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_SDADC1_Init+0x40>
  {
    Error_Handler();
 8001654:	f002 f880 	bl	8003758 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001658:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800165c:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	461a      	mov	r2, r3
 800166e:	2100      	movs	r1, #0
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_SDADC1_Init+0x70>)
 8001672:	f004 fe1d 	bl	80062b0 <HAL_SDADC_PrepareChannelConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_SDADC1_Init+0x68>
  {
    Error_Handler();
 800167c:	f002 f86c 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20002270 	.word	0x20002270
 800168c:	40016000 	.word	0x40016000

08001690 <MX_SDADC2_Init>:
  * @brief SDADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC2_Init 0 */

  /* USER CODE END SDADC2_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001696:	463b      	mov	r3, r7
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC2_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc2.Instance = SDADC2;
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_SDADC2_Init+0x74>)
 80016a4:	4a18      	ldr	r2, [pc, #96]	; (8001708 <MX_SDADC2_Init+0x78>)
 80016a6:	601a      	str	r2, [r3, #0]
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_SDADC2_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
  hsdadc2.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <MX_SDADC2_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  hsdadc2.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <MX_SDADC2_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hsdadc2.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_SDADC2_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 80016c0:	4810      	ldr	r0, [pc, #64]	; (8001704 <MX_SDADC2_Init+0x74>)
 80016c2:	f004 fd71 	bl	80061a8 <HAL_SDADC_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_SDADC2_Init+0x40>
  {
    Error_Handler();
 80016cc:	f002 f844 	bl	8003758 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 80016d0:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80016d4:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VDDA;
 80016da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016de:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	461a      	mov	r2, r3
 80016e8:	2100      	movs	r1, #0
 80016ea:	4806      	ldr	r0, [pc, #24]	; (8001704 <MX_SDADC2_Init+0x74>)
 80016ec:	f004 fde0 	bl	80062b0 <HAL_SDADC_PrepareChannelConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_SDADC2_Init+0x6a>
  {
    Error_Handler();
 80016f6:	f002 f82f 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC2_Init 2 */

  /* USER CODE END SDADC2_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2000326c 	.word	0x2000326c
 8001708:	40016400 	.word	0x40016400

0800170c <MX_SDADC3_Init>:
  * @brief SDADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC3_Init 0 */

  /* USER CODE END SDADC3_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001712:	463b      	mov	r3, r7
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC3_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc3.Instance = SDADC3;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <MX_SDADC3_Init+0x70>)
 8001720:	4a17      	ldr	r2, [pc, #92]	; (8001780 <MX_SDADC3_Init+0x74>)
 8001722:	601a      	str	r2, [r3, #0]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_SDADC3_Init+0x70>)
 8001726:	2200      	movs	r2, #0
 8001728:	605a      	str	r2, [r3, #4]
  hsdadc3.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_SDADC3_Init+0x70>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <MX_SDADC3_Init+0x70>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_SDADC3_Init+0x70>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 800173c:	480f      	ldr	r0, [pc, #60]	; (800177c <MX_SDADC3_Init+0x70>)
 800173e:	f004 fd33 	bl	80061a8 <HAL_SDADC_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_SDADC3_Init+0x40>
  {
    Error_Handler();
 8001748:	f002 f806 	bl	8003758 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 800174c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001750:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	461a      	mov	r2, r3
 8001762:	2100      	movs	r1, #0
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_SDADC3_Init+0x70>)
 8001766:	f004 fda3 	bl	80062b0 <HAL_SDADC_PrepareChannelConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_SDADC3_Init+0x68>
  {
    Error_Handler();
 8001770:	f001 fff2 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC3_Init 2 */

  /* USER CODE END SDADC3_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000332c 	.word	0x2000332c
 8001780:	40016800 	.word	0x40016800

08001784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <MX_TIM2_Init+0x94>)
 80017a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_TIM2_Init+0x94>)
 80017aa:	220f      	movs	r2, #15
 80017ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_TIM2_Init+0x94>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_TIM2_Init+0x94>)
 80017b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_TIM2_Init+0x94>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_TIM2_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017c8:	4813      	ldr	r0, [pc, #76]	; (8001818 <MX_TIM2_Init+0x94>)
 80017ca:	f005 f850 	bl	800686e <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017d4:	f001 ffc0 	bl	8003758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4619      	mov	r1, r3
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <MX_TIM2_Init+0x94>)
 80017e6:	f005 fa61 	bl	8006cac <HAL_TIM_ConfigClockSource>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017f0:	f001 ffb2 	bl	8003758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_TIM2_Init+0x94>)
 8001802:	f005 fc73 	bl	80070ec <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800180c:	f001 ffa4 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200032cc 	.word	0x200032cc

0800181c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <MX_TIM3_Init+0x94>)
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <MX_TIM3_Init+0x98>)
 800183c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_TIM3_Init+0x94>)
 8001840:	220f      	movs	r2, #15
 8001842:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_TIM3_Init+0x94>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300-1;
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_TIM3_Init+0x94>)
 800184c:	f240 122b 	movw	r2, #299	; 0x12b
 8001850:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_TIM3_Init+0x94>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_TIM3_Init+0x94>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800185e:	4814      	ldr	r0, [pc, #80]	; (80018b0 <MX_TIM3_Init+0x94>)
 8001860:	f005 f805 	bl	800686e <HAL_TIM_Base_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800186a:	f001 ff75 	bl	8003758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001872:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4619      	mov	r1, r3
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <MX_TIM3_Init+0x94>)
 800187c:	f005 fa16 	bl	8006cac <HAL_TIM_ConfigClockSource>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001886:	f001 ff67 	bl	8003758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001892:	463b      	mov	r3, r7
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <MX_TIM3_Init+0x94>)
 8001898:	f005 fc28 	bl	80070ec <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018a2:	f001 ff59 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20001250 	.word	0x20001250
 80018b4:	40000400 	.word	0x40000400

080018b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <MX_GPIO_Init+0x180>)
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	4a59      	ldr	r2, [pc, #356]	; (8001a38 <MX_GPIO_Init+0x180>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6153      	str	r3, [r2, #20]
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <MX_GPIO_Init+0x180>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <MX_GPIO_Init+0x180>)
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	4a53      	ldr	r2, [pc, #332]	; (8001a38 <MX_GPIO_Init+0x180>)
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	6153      	str	r3, [r2, #20]
 80018f2:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <MX_GPIO_Init+0x180>)
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <MX_GPIO_Init+0x180>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <MX_GPIO_Init+0x180>)
 8001904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001908:	6153      	str	r3, [r2, #20]
 800190a:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <MX_GPIO_Init+0x180>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001916:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <MX_GPIO_Init+0x180>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4a47      	ldr	r2, [pc, #284]	; (8001a38 <MX_GPIO_Init+0x180>)
 800191c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001920:	6153      	str	r3, [r2, #20]
 8001922:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <MX_GPIO_Init+0x180>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800192e:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <MX_GPIO_Init+0x180>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4a41      	ldr	r2, [pc, #260]	; (8001a38 <MX_GPIO_Init+0x180>)
 8001934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001938:	6153      	str	r3, [r2, #20]
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <MX_GPIO_Init+0x180>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <MX_GPIO_Init+0x180>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	4a3b      	ldr	r2, [pc, #236]	; (8001a38 <MX_GPIO_Init+0x180>)
 800194c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001950:	6153      	str	r3, [r2, #20]
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <MX_GPIO_Init+0x180>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2192      	movs	r1, #146	; 0x92
 8001962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001966:	f003 f96b 	bl	8004c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2103      	movs	r1, #3
 800196e:	4833      	ldr	r0, [pc, #204]	; (8001a3c <MX_GPIO_Init+0x184>)
 8001970:	f003 f966 	bl	8004c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 7120 	mov.w	r1, #640	; 0x280
 800197a:	4831      	ldr	r0, [pc, #196]	; (8001a40 <MX_GPIO_Init+0x188>)
 800197c:	f003 f960 	bl	8004c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <MX_GPIO_Init+0x18c>)
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f002 ffd8 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 800199c:	f44f 7310 	mov.w	r3, #576	; 0x240
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a2:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <MX_GPIO_Init+0x18c>)
 80019a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4825      	ldr	r0, [pc, #148]	; (8001a48 <MX_GPIO_Init+0x190>)
 80019b2:	f002 ffcb 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 80019b6:	2392      	movs	r3, #146	; 0x92
 80019b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f002 ffbc 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019d4:	2303      	movs	r3, #3
 80019d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <MX_GPIO_Init+0x184>)
 80019ec:	f002 ffae 	bl	800494c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80019f0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_GPIO_Init+0x188>)
 8001a0a:	f002 ff9f 	bl	800494c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2103      	movs	r1, #3
 8001a12:	2017      	movs	r0, #23
 8001a14:	f002 fd8b 	bl	800452e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a18:	2017      	movs	r0, #23
 8001a1a:	f002 fda4 	bl	8004566 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2103      	movs	r1, #3
 8001a22:	2028      	movs	r0, #40	; 0x28
 8001a24:	f002 fd83 	bl	800452e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a28:	2028      	movs	r0, #40	; 0x28
 8001a2a:	f002 fd9c 	bl	8004566 <HAL_NVIC_EnableIRQ>

}
 8001a2e:	bf00      	nop
 8001a30:	3730      	adds	r7, #48	; 0x30
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000400 	.word	0x48000400
 8001a40:	48001000 	.word	0x48001000
 8001a44:	10110000 	.word	0x10110000
 8001a48:	48000800 	.word	0x48000800

08001a4c <HAL_SDADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//read adc values
void HAL_SDADC_ConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	//get analog 1 data
	if(hsdadc==&hsdadc1){
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a79      	ldr	r2, [pc, #484]	; (8001c3c <HAL_SDADC_ConvCpltCallback+0x1f0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d14b      	bne.n	8001af4 <HAL_SDADC_ConvCpltCallback+0xa8>
		//get raw data for analog 1
		raw_1 = (int16_t)HAL_SDADC_GetValue(&hsdadc1);
 8001a5c:	4877      	ldr	r0, [pc, #476]	; (8001c3c <HAL_SDADC_ConvCpltCallback+0x1f0>)
 8001a5e:	f004 fd93 	bl	8006588 <HAL_SDADC_GetValue>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b75      	ldr	r3, [pc, #468]	; (8001c40 <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001a6a:	601a      	str	r2, [r3, #0]
		raw_1+=32768;
 8001a6c:	4b74      	ldr	r3, [pc, #464]	; (8001c40 <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a74:	4a72      	ldr	r2, [pc, #456]	; (8001c40 <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001a76:	6013      	str	r3, [r2, #0]
		//convert and scale raw data
		a_in_1=(raw_1-analog_1_offset);
 8001a78:	4b71      	ldr	r3, [pc, #452]	; (8001c40 <HAL_SDADC_ConvCpltCallback+0x1f4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b71      	ldr	r3, [pc, #452]	; (8001c44 <HAL_SDADC_ConvCpltCallback+0x1f8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001a88:	601a      	str	r2, [r3, #0]
		if(a_in_1<0)
 8001a8a:	4b6f      	ldr	r3, [pc, #444]	; (8001c48 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	da02      	bge.n	8001a98 <HAL_SDADC_ConvCpltCallback+0x4c>
			a_in_1=0;
 8001a92:	4b6d      	ldr	r3, [pc, #436]	; (8001c48 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
		a_data_arr_1[a_1_index%data_arr_length]=(uint16_t)(a_in_1*((65535)/(float)(65535-analog_1_offset)));//scale value
 8001a98:	4b6b      	ldr	r3, [pc, #428]	; (8001c48 <HAL_SDADC_ConvCpltCallback+0x1fc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa4:	4b67      	ldr	r3, [pc, #412]	; (8001c44 <HAL_SDADC_ConvCpltCallback+0x1f8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001aac:	33ff      	adds	r3, #255	; 0xff
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ab6:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8001c4c <HAL_SDADC_ConvCpltCallback+0x200>
 8001aba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_SDADC_ConvCpltCallback+0x204>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	4a63      	ldr	r2, [pc, #396]	; (8001c54 <HAL_SDADC_ConvCpltCallback+0x208>)
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ace:	fb02 f201 	mul.w	r2, r2, r1
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001adc:	ee17 3a90 	vmov	r3, s15
 8001ae0:	b299      	uxth	r1, r3
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <HAL_SDADC_ConvCpltCallback+0x20c>)
 8001ae4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_1_index++;
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_SDADC_ConvCpltCallback+0x204>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <HAL_SDADC_ConvCpltCallback+0x204>)
 8001af2:	801a      	strh	r2, [r3, #0]
	}


	//get analog 2 data
	if(hsdadc==&hsdadc2){
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a59      	ldr	r2, [pc, #356]	; (8001c5c <HAL_SDADC_ConvCpltCallback+0x210>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d14b      	bne.n	8001b94 <HAL_SDADC_ConvCpltCallback+0x148>
		//get raw data for analog 2
		raw_2 = (int16_t)HAL_SDADC_GetValue(&hsdadc2);
 8001afc:	4857      	ldr	r0, [pc, #348]	; (8001c5c <HAL_SDADC_ConvCpltCallback+0x210>)
 8001afe:	f004 fd43 	bl	8006588 <HAL_SDADC_GetValue>
 8001b02:	4603      	mov	r3, r0
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b55      	ldr	r3, [pc, #340]	; (8001c60 <HAL_SDADC_ConvCpltCallback+0x214>)
 8001b0a:	601a      	str	r2, [r3, #0]
		raw_2+=32768;
 8001b0c:	4b54      	ldr	r3, [pc, #336]	; (8001c60 <HAL_SDADC_ConvCpltCallback+0x214>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_SDADC_ConvCpltCallback+0x214>)
 8001b16:	6013      	str	r3, [r2, #0]
		//convert and scale raw data
		a_in_2=(raw_2-analog_2_offset);
 8001b18:	4b51      	ldr	r3, [pc, #324]	; (8001c60 <HAL_SDADC_ConvCpltCallback+0x214>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b51      	ldr	r3, [pc, #324]	; (8001c64 <HAL_SDADC_ConvCpltCallback+0x218>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001b28:	601a      	str	r2, [r3, #0]
		if(a_in_2<0)
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	da02      	bge.n	8001b38 <HAL_SDADC_ConvCpltCallback+0xec>
			a_in_2=0;
 8001b32:	4b4d      	ldr	r3, [pc, #308]	; (8001c68 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
		a_data_arr_2[a_2_index%data_arr_length]=(uint16_t)(a_in_2*((65535)/(float)(65535-analog_2_offset)));//scale value
 8001b38:	4b4b      	ldr	r3, [pc, #300]	; (8001c68 <HAL_SDADC_ConvCpltCallback+0x21c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	ee07 3a90 	vmov	s15, r3
 8001b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b44:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_SDADC_ConvCpltCallback+0x218>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001b4c:	33ff      	adds	r3, #255	; 0xff
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b56:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8001c4c <HAL_SDADC_ConvCpltCallback+0x200>
 8001b5a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b62:	4b42      	ldr	r3, [pc, #264]	; (8001c6c <HAL_SDADC_ConvCpltCallback+0x220>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	4a3b      	ldr	r2, [pc, #236]	; (8001c54 <HAL_SDADC_ConvCpltCallback+0x208>)
 8001b68:	8812      	ldrh	r2, [r2, #0]
 8001b6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b6e:	fb02 f201 	mul.w	r2, r2, r1
 8001b72:	1a9b      	subs	r3, r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7c:	ee17 3a90 	vmov	r3, s15
 8001b80:	b299      	uxth	r1, r3
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_SDADC_ConvCpltCallback+0x224>)
 8001b84:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_2_index++;
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_SDADC_ConvCpltCallback+0x220>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <HAL_SDADC_ConvCpltCallback+0x220>)
 8001b92:	801a      	strh	r2, [r3, #0]
	}

	//get analog 3 data
	if(hsdadc==&hsdadc3){
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a37      	ldr	r2, [pc, #220]	; (8001c74 <HAL_SDADC_ConvCpltCallback+0x228>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d14b      	bne.n	8001c34 <HAL_SDADC_ConvCpltCallback+0x1e8>
		//get raw data for analog 3
		raw_3 = (int16_t)HAL_SDADC_GetValue(&hsdadc3);
 8001b9c:	4835      	ldr	r0, [pc, #212]	; (8001c74 <HAL_SDADC_ConvCpltCallback+0x228>)
 8001b9e:	f004 fcf3 	bl	8006588 <HAL_SDADC_GetValue>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001baa:	601a      	str	r2, [r3, #0]
		raw_3+=32768;
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001bb4:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001bb6:	6013      	str	r3, [r2, #0]
		//convert and scale raw data
		a_in_3=(raw_3-analog_3_offset);
 8001bb8:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_SDADC_ConvCpltCallback+0x22c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_SDADC_ConvCpltCallback+0x230>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_SDADC_ConvCpltCallback+0x234>)
 8001bc8:	601a      	str	r2, [r3, #0]
		if(a_in_3<0)
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_SDADC_ConvCpltCallback+0x234>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da02      	bge.n	8001bd8 <HAL_SDADC_ConvCpltCallback+0x18c>
			a_in_3=0;
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_SDADC_ConvCpltCallback+0x234>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
		a_data_arr_3[a_3_index%data_arr_length]=(uint16_t)(a_in_3*((65535)/(float)(65535-analog_3_offset)));//scale value
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_SDADC_ConvCpltCallback+0x234>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	ee07 3a90 	vmov	s15, r3
 8001be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_SDADC_ConvCpltCallback+0x230>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001bec:	33ff      	adds	r3, #255	; 0xff
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bf6:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8001c4c <HAL_SDADC_ConvCpltCallback+0x200>
 8001bfa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c02:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_SDADC_ConvCpltCallback+0x238>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <HAL_SDADC_ConvCpltCallback+0x208>)
 8001c08:	8812      	ldrh	r2, [r2, #0]
 8001c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c0e:	fb02 f201 	mul.w	r2, r2, r1
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c1c:	ee17 3a90 	vmov	r3, s15
 8001c20:	b299      	uxth	r1, r3
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_SDADC_ConvCpltCallback+0x23c>)
 8001c24:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_3_index++;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_SDADC_ConvCpltCallback+0x238>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_SDADC_ConvCpltCallback+0x238>)
 8001c32:	801a      	strh	r2, [r3, #0]
	}
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20002270 	.word	0x20002270
 8001c40:	200011d8 	.word	0x200011d8
 8001c44:	200001f4 	.word	0x200001f4
 8001c48:	20003264 	.word	0x20003264
 8001c4c:	477fff00 	.word	0x477fff00
 8001c50:	20000202 	.word	0x20000202
 8001c54:	20000004 	.word	0x20000004
 8001c58:	20000238 	.word	0x20000238
 8001c5c:	2000326c 	.word	0x2000326c
 8001c60:	20003260 	.word	0x20003260
 8001c64:	200001f8 	.word	0x200001f8
 8001c68:	2000022c 	.word	0x2000022c
 8001c6c:	20000204 	.word	0x20000204
 8001c70:	200012a8 	.word	0x200012a8
 8001c74:	2000332c 	.word	0x2000332c
 8001c78:	20000230 	.word	0x20000230
 8001c7c:	200001fc 	.word	0x200001fc
 8001c80:	20001234 	.word	0x20001234
 8001c84:	20000206 	.word	0x20000206
 8001c88:	200022b8 	.word	0x200022b8

08001c8c <HAL_TIM_PeriodElapsedCallback>:
//sends data over can when timer 3 interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a91      	ldr	r2, [pc, #580]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	f040 811a 	bne.w	8001ed2 <HAL_TIM_PeriodElapsedCallback+0x246>
  {
    if(analog_1_enabled){
 8001c9e:	4b90      	ldr	r3, [pc, #576]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d059      	beq.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0xce>
    	//average stored values
    	a_in_1=0;
 8001ca6:	4b8f      	ldr	r3, [pc, #572]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
    	max = (a_1_index<data_arr_length?a_1_index:data_arr_length);
 8001cac:	4b8e      	ldr	r3, [pc, #568]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001cae:	881a      	ldrh	r2, [r3, #0]
 8001cb0:	4b8e      	ldr	r3, [pc, #568]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	bf28      	it	cs
 8001cb8:	4613      	movcs	r3, r2
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b8c      	ldr	r3, [pc, #560]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001cc0:	601a      	str	r2, [r3, #0]
    	if(max>0){
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d029      	beq.n	8001d1e <HAL_TIM_PeriodElapsedCallback+0x92>
			for(for_index=0; for_index<max; for_index++)
 8001cca:	4b8a      	ldr	r3, [pc, #552]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	e011      	b.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x6a>
				a_in_1+=a_data_arr_1[for_index];
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b87      	ldr	r3, [pc, #540]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001cda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4b80      	ldr	r3, [pc, #512]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	4a7f      	ldr	r2, [pc, #508]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001ce8:	6013      	str	r3, [r2, #0]
			for(for_index=0; for_index<max; for_index++)
 8001cea:	4b82      	ldr	r3, [pc, #520]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b80      	ldr	r3, [pc, #512]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	4b7f      	ldr	r3, [pc, #508]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b7c      	ldr	r3, [pc, #496]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3e6      	bcc.n	8001cd2 <HAL_TIM_PeriodElapsedCallback+0x46>
			a_in_1/=max;
 8001d04:	4b77      	ldr	r3, [pc, #476]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b79      	ldr	r3, [pc, #484]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b73      	ldr	r3, [pc, #460]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d16:	601a      	str	r2, [r3, #0]
			a_1_index=0;
 8001d18:	4b74      	ldr	r3, [pc, #464]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	801a      	strh	r2, [r3, #0]
    	}

    	//put raw data into byte arrays
    	a_data_1[0]=a_in_1 & 0xff;
 8001d1e:	4b71      	ldr	r3, [pc, #452]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	4b75      	ldr	r3, [pc, #468]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d26:	701a      	strb	r2, [r3, #0]
    	a_data_1[1]=(a_in_1 >> 8);
 8001d28:	4b6e      	ldr	r3, [pc, #440]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	121b      	asrs	r3, r3, #8
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b72      	ldr	r3, [pc, #456]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d32:	705a      	strb	r2, [r3, #1]
    	//transmit CAN data for analog 1
    	HAL_CAN_AddTxMessage(&hcan, &headers_1, a_data_1, *tx_mailbox);
 8001d34:	4b72      	ldr	r3, [pc, #456]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a70      	ldr	r2, [pc, #448]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d3c:	4971      	ldr	r1, [pc, #452]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d3e:	4872      	ldr	r0, [pc, #456]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d40:	f002 fa1a 	bl	8004178 <HAL_CAN_AddTxMessage>
    	while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 1
 8001d44:	bf00      	nop
 8001d46:	4b6e      	ldr	r3, [pc, #440]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	486e      	ldr	r0, [pc, #440]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d50:	f002 faed 	bl	800432e <HAL_CAN_IsTxMessagePending>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f5      	bne.n	8001d46 <HAL_TIM_PeriodElapsedCallback+0xba>
    }
    if(analog_2_enabled){
 8001d5a:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d059      	beq.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x18a>
    	a_in_2=0;
 8001d62:	4b6b      	ldr	r3, [pc, #428]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
		max = (a_2_index<data_arr_length?a_2_index:data_arr_length);
 8001d68:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001d6a:	881a      	ldrh	r2, [r3, #0]
 8001d6c:	4b69      	ldr	r3, [pc, #420]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	4293      	cmp	r3, r2
 8001d72:	bf28      	it	cs
 8001d74:	4613      	movcs	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d7c:	601a      	str	r2, [r3, #0]
		if(max>0){
 8001d7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d029      	beq.n	8001dda <HAL_TIM_PeriodElapsedCallback+0x14e>
			for(for_index=0; for_index<max; for_index++)
 8001d86:	4b5b      	ldr	r3, [pc, #364]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	801a      	strh	r2, [r3, #0]
 8001d8c:	e011      	b.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0x126>
				a_in_2+=a_data_arr_2[for_index];
 8001d8e:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b60      	ldr	r3, [pc, #384]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001d96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	4a5b      	ldr	r2, [pc, #364]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001da4:	6013      	str	r3, [r2, #0]
			for(for_index=0; for_index<max; for_index++)
 8001da6:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001db0:	801a      	strh	r2, [r3, #0]
 8001db2:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b4d      	ldr	r3, [pc, #308]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d3e6      	bcc.n	8001d8e <HAL_TIM_PeriodElapsedCallback+0x102>
			a_in_2/=max;
 8001dc0:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b4f      	ldr	r3, [pc, #316]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001dd2:	601a      	str	r2, [r3, #0]
			a_2_index=0;
 8001dd4:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	801a      	strh	r2, [r3, #0]
		}
    	//put raw data into byte arrays
    	a_data_2[0]=a_in_2 & 0xff;
 8001dda:	4b4d      	ldr	r3, [pc, #308]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b4e      	ldr	r3, [pc, #312]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001de2:	701a      	strb	r2, [r3, #0]
    	a_data_2[1]=(a_in_2 >> 8);
 8001de4:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	121b      	asrs	r3, r3, #8
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001dee:	705a      	strb	r2, [r3, #1]
    	//transmit CAN data for analog 2
    	HAL_CAN_AddTxMessage(&hcan, &headers_2, a_data_2, *tx_mailbox);
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a49      	ldr	r2, [pc, #292]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001df8:	4949      	ldr	r1, [pc, #292]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001dfa:	4843      	ldr	r0, [pc, #268]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001dfc:	f002 f9bc 	bl	8004178 <HAL_CAN_AddTxMessage>
    	while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 2
 8001e00:	bf00      	nop
 8001e02:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	483f      	ldr	r0, [pc, #252]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e0c:	f002 fa8f 	bl	800432e <HAL_CAN_IsTxMessagePending>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f5      	bne.n	8001e02 <HAL_TIM_PeriodElapsedCallback+0x176>
    }
    if(analog_3_enabled){
 8001e16:	4b43      	ldr	r3, [pc, #268]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d059      	beq.n	8001ed2 <HAL_TIM_PeriodElapsedCallback+0x246>
    	a_in_3=0;
 8001e1e:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
		max = (a_3_index<data_arr_length?a_3_index:data_arr_length);
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001e26:	881a      	ldrh	r2, [r3, #0]
 8001e28:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf28      	it	cs
 8001e30:	4613      	movcs	r3, r2
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001e38:	601a      	str	r2, [r3, #0]
		if(max>0){
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d029      	beq.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x20a>
			for(for_index=0; for_index<max; for_index++)
 8001e42:	4b2c      	ldr	r3, [pc, #176]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	801a      	strh	r2, [r3, #0]
 8001e48:	e011      	b.n	8001e6e <HAL_TIM_PeriodElapsedCallback+0x1e2>
				a_in_3+=a_data_arr_3[for_index];
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001e52:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a32      	ldr	r2, [pc, #200]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e60:	6013      	str	r3, [r2, #0]
			for(for_index=0; for_index<max; for_index++)
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e6c:	801a      	strh	r2, [r3, #0]
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d3e6      	bcc.n	8001e4a <HAL_TIM_PeriodElapsedCallback+0x1be>
			a_in_3/=max;
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e8e:	601a      	str	r2, [r3, #0]
			a_3_index=0;
 8001e90:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	801a      	strh	r2, [r3, #0]
		}
		//put raw data into byte arrays
		a_data_3[0]=a_in_3 & 0xff;
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001e9e:	701a      	strb	r2, [r3, #0]
		a_data_3[1]=(a_in_3 >> 8);
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	121b      	asrs	r3, r3, #8
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001eaa:	705a      	strb	r2, [r3, #1]
		//transmit CAN data for analog 3
		HAL_CAN_AddTxMessage(&hcan, &headers_3, a_data_3, *tx_mailbox);
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001eb4:	4920      	ldr	r1, [pc, #128]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001eb6:	4814      	ldr	r0, [pc, #80]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001eb8:	f002 f95e 	bl	8004178 <HAL_CAN_AddTxMessage>
		while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 3
 8001ebc:	bf00      	nop
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4810      	ldr	r0, [pc, #64]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ec8:	f002 fa31 	bl	800432e <HAL_CAN_IsTxMessagePending>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f5      	bne.n	8001ebe <HAL_TIM_PeriodElapsedCallback+0x232>
    }
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20001250 	.word	0x20001250
 8001ee0:	20000001 	.word	0x20000001
 8001ee4:	20003264 	.word	0x20003264
 8001ee8:	20000004 	.word	0x20000004
 8001eec:	20000202 	.word	0x20000202
 8001ef0:	2000020c 	.word	0x2000020c
 8001ef4:	20000208 	.word	0x20000208
 8001ef8:	20000238 	.word	0x20000238
 8001efc:	200022b4 	.word	0x200022b4
 8001f00:	2000129c 	.word	0x2000129c
 8001f04:	200011f4 	.word	0x200011f4
 8001f08:	2000120c 	.word	0x2000120c
 8001f0c:	20000002 	.word	0x20000002
 8001f10:	2000022c 	.word	0x2000022c
 8001f14:	20000204 	.word	0x20000204
 8001f18:	200012a8 	.word	0x200012a8
 8001f1c:	2000325c 	.word	0x2000325c
 8001f20:	200032b4 	.word	0x200032b4
 8001f24:	20000003 	.word	0x20000003
 8001f28:	20001234 	.word	0x20001234
 8001f2c:	20000206 	.word	0x20000206
 8001f30:	200022b8 	.word	0x200022b8
 8001f34:	2000124c 	.word	0x2000124c
 8001f38:	200011dc 	.word	0x200011dc

08001f3c <HAL_GPIO_EXTI_Callback>:
//handles the button interupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	80fb      	strh	r3, [r7, #6]
	debug_val++;
 8001f46:	4bbf      	ldr	r3, [pc, #764]	; (8002244 <HAL_GPIO_EXTI_Callback+0x308>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4bbd      	ldr	r3, [pc, #756]	; (8002244 <HAL_GPIO_EXTI_Callback+0x308>)
 8001f50:	701a      	strb	r2, [r3, #0]
	//if the up button is pressed
			if(GPIO_Pin==UP_BTN_Pin && btn_counter>debounce_delay){
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	f040 8136 	bne.w	80021c6 <HAL_GPIO_EXTI_Callback+0x28a>
 8001f5a:	4bbb      	ldr	r3, [pc, #748]	; (8002248 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001f5c:	881a      	ldrh	r2, [r3, #0]
 8001f5e:	4bbb      	ldr	r3, [pc, #748]	; (800224c <HAL_GPIO_EXTI_Callback+0x310>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	f240 812f 	bls.w	80021c6 <HAL_GPIO_EXTI_Callback+0x28a>
				if(change_value_bool){//if changing a value
 8001f68:	4bb9      	ldr	r3, [pc, #740]	; (8002250 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d03a      	beq.n	8001fe6 <HAL_GPIO_EXTI_Callback+0xaa>
					//change the value of the selected item
					//main menu changes
					if(in_main_menu){
 8001f70:	4bb8      	ldr	r3, [pc, #736]	; (8002254 <HAL_GPIO_EXTI_Callback+0x318>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d018      	beq.n	8001faa <HAL_GPIO_EXTI_Callback+0x6e>
						if(menu_pos==2)
 8001f78:	4bb7      	ldr	r3, [pc, #732]	; (8002258 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001f7a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d10b      	bne.n	8001f9a <HAL_GPIO_EXTI_Callback+0x5e>
							display_scroll=(display_scroll==0)?2:(display_scroll-1);//scroll through devices in display values menu
 8001f82:	4bb6      	ldr	r3, [pc, #728]	; (800225c <HAL_GPIO_EXTI_Callback+0x320>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d004      	beq.n	8001f94 <HAL_GPIO_EXTI_Callback+0x58>
 8001f8a:	4bb4      	ldr	r3, [pc, #720]	; (800225c <HAL_GPIO_EXTI_Callback+0x320>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e000      	b.n	8001f96 <HAL_GPIO_EXTI_Callback+0x5a>
 8001f94:	2302      	movs	r3, #2
 8001f96:	4ab1      	ldr	r2, [pc, #708]	; (800225c <HAL_GPIO_EXTI_Callback+0x320>)
 8001f98:	7013      	strb	r3, [r2, #0]
						if(menu_pos == 3)
 8001f9a:	4baf      	ldr	r3, [pc, #700]	; (8002258 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d102      	bne.n	8001faa <HAL_GPIO_EXTI_Callback+0x6e>
							changeDelay(1);//increment Delay
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f000 fefd 	bl	8002da4 <changeDelay>
					}
					//can menu changes
					if(in_can_menu){
 8001faa:	4bad      	ldr	r3, [pc, #692]	; (8002260 <HAL_GPIO_EXTI_Callback+0x324>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8105 	beq.w	80021be <HAL_GPIO_EXTI_Callback+0x282>
						if(can_pos==1)
 8001fb4:	4bab      	ldr	r3, [pc, #684]	; (8002264 <HAL_GPIO_EXTI_Callback+0x328>)
 8001fb6:	f993 3000 	ldrsb.w	r3, [r3]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d103      	bne.n	8001fc6 <HAL_GPIO_EXTI_Callback+0x8a>
							changeBaudRate(1);//increment baud rate
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f000 fc90 	bl	80028e4 <changeBaudRate>
 8001fc4:	e0fb      	b.n	80021be <HAL_GPIO_EXTI_Callback+0x282>
						else if(can_pos>=2&&can_pos<=4)
 8001fc6:	4ba7      	ldr	r3, [pc, #668]	; (8002264 <HAL_GPIO_EXTI_Callback+0x328>)
 8001fc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	f340 80f6 	ble.w	80021be <HAL_GPIO_EXTI_Callback+0x282>
 8001fd2:	4ba4      	ldr	r3, [pc, #656]	; (8002264 <HAL_GPIO_EXTI_Callback+0x328>)
 8001fd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	f300 80f0 	bgt.w	80021be <HAL_GPIO_EXTI_Callback+0x282>
							changeCANID(1);//increment CAN ID
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f000 fd28 	bl	8002a34 <changeCANID>
 8001fe4:	e0eb      	b.n	80021be <HAL_GPIO_EXTI_Callback+0x282>
					}

				} else {
					//scroll menu up
					if(in_main_menu){
 8001fe6:	4b9b      	ldr	r3, [pc, #620]	; (8002254 <HAL_GPIO_EXTI_Callback+0x318>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d04a      	beq.n	8002084 <HAL_GPIO_EXTI_Callback+0x148>
						menu_pos=(menu_pos==0)?main_menu_length-1:(menu_pos-1);//decrement menu position
 8001fee:	4b9a      	ldr	r3, [pc, #616]	; (8002258 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001ff0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <HAL_GPIO_EXTI_Callback+0xc8>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	b25b      	sxtb	r3, r3
 8002002:	e006      	b.n	8002012 <HAL_GPIO_EXTI_Callback+0xd6>
 8002004:	4b94      	ldr	r3, [pc, #592]	; (8002258 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002006:	f993 3000 	ldrsb.w	r3, [r3]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	b25b      	sxtb	r3, r3
 8002012:	4a91      	ldr	r2, [pc, #580]	; (8002258 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002014:	7013      	strb	r3, [r2, #0]
						lcd_put_cur(0,0);
 8002016:	2100      	movs	r1, #0
 8002018:	2000      	movs	r0, #0
 800201a:	f7fe fe5f 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 800201e:	4b8e      	ldr	r3, [pc, #568]	; (8002258 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002020:	f993 3000 	ldrsb.w	r3, [r3]
 8002024:	461a      	mov	r2, r3
 8002026:	4613      	mov	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	4a8e      	ldr	r2, [pc, #568]	; (8002268 <HAL_GPIO_EXTI_Callback+0x32c>)
 800202e:	4413      	add	r3, r2
 8002030:	2210      	movs	r2, #16
 8002032:	4619      	mov	r1, r3
 8002034:	488d      	ldr	r0, [pc, #564]	; (800226c <HAL_GPIO_EXTI_Callback+0x330>)
 8002036:	f005 f97a 	bl	800732e <strncpy>
 800203a:	4603      	mov	r3, r0
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe feb2 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(1,0);
 8002042:	2100      	movs	r1, #0
 8002044:	2001      	movs	r0, #1
 8002046:	f7fe fe49 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 800204a:	4b83      	ldr	r3, [pc, #524]	; (8002258 <HAL_GPIO_EXTI_Callback+0x31c>)
 800204c:	f993 3000 	ldrsb.w	r3, [r3]
 8002050:	3301      	adds	r3, #1
 8002052:	2204      	movs	r2, #4
 8002054:	fb93 f1f2 	sdiv	r1, r3, r2
 8002058:	fb02 f201 	mul.w	r2, r2, r1
 800205c:	1a9a      	subs	r2, r3, r2
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	4413      	add	r3, r2
 8002064:	4a80      	ldr	r2, [pc, #512]	; (8002268 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002066:	4413      	add	r3, r2
 8002068:	2210      	movs	r2, #16
 800206a:	4619      	mov	r1, r3
 800206c:	487f      	ldr	r0, [pc, #508]	; (800226c <HAL_GPIO_EXTI_Callback+0x330>)
 800206e:	f005 f95e 	bl	800732e <strncpy>
 8002072:	4603      	mov	r3, r0
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fe96 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(0,0);
 800207a:	2100      	movs	r1, #0
 800207c:	2000      	movs	r0, #0
 800207e:	f7fe fe2d 	bl	8000cdc <lcd_put_cur>
 8002082:	e09c      	b.n	80021be <HAL_GPIO_EXTI_Callback+0x282>
					} else if(in_can_menu){
 8002084:	4b76      	ldr	r3, [pc, #472]	; (8002260 <HAL_GPIO_EXTI_Callback+0x324>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d04a      	beq.n	8002122 <HAL_GPIO_EXTI_Callback+0x1e6>
						can_pos=(can_pos==0)?can_menu_length-1:(can_pos-1);//decrement menu position
 800208c:	4b75      	ldr	r3, [pc, #468]	; (8002264 <HAL_GPIO_EXTI_Callback+0x328>)
 800208e:	f993 3000 	ldrsb.w	r3, [r3]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d105      	bne.n	80020a2 <HAL_GPIO_EXTI_Callback+0x166>
 8002096:	2306      	movs	r3, #6
 8002098:	b2db      	uxtb	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_EXTI_Callback+0x174>
 80020a2:	4b70      	ldr	r3, [pc, #448]	; (8002264 <HAL_GPIO_EXTI_Callback+0x328>)
 80020a4:	f993 3000 	ldrsb.w	r3, [r3]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	b25b      	sxtb	r3, r3
 80020b0:	4a6c      	ldr	r2, [pc, #432]	; (8002264 <HAL_GPIO_EXTI_Callback+0x328>)
 80020b2:	7013      	strb	r3, [r2, #0]
						lcd_put_cur(0,0);
 80020b4:	2100      	movs	r1, #0
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7fe fe10 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 80020bc:	4b69      	ldr	r3, [pc, #420]	; (8002264 <HAL_GPIO_EXTI_Callback+0x328>)
 80020be:	f993 3000 	ldrsb.w	r3, [r3]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4413      	add	r3, r2
 80020ca:	4a69      	ldr	r2, [pc, #420]	; (8002270 <HAL_GPIO_EXTI_Callback+0x334>)
 80020cc:	4413      	add	r3, r2
 80020ce:	2210      	movs	r2, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	4866      	ldr	r0, [pc, #408]	; (800226c <HAL_GPIO_EXTI_Callback+0x330>)
 80020d4:	f005 f92b 	bl	800732e <strncpy>
 80020d8:	4603      	mov	r3, r0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fe63 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(1,0);
 80020e0:	2100      	movs	r1, #0
 80020e2:	2001      	movs	r0, #1
 80020e4:	f7fe fdfa 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 80020e8:	4b5e      	ldr	r3, [pc, #376]	; (8002264 <HAL_GPIO_EXTI_Callback+0x328>)
 80020ea:	f993 3000 	ldrsb.w	r3, [r3]
 80020ee:	3301      	adds	r3, #1
 80020f0:	2206      	movs	r2, #6
 80020f2:	fb93 f1f2 	sdiv	r1, r3, r2
 80020f6:	fb02 f201 	mul.w	r2, r2, r1
 80020fa:	1a9a      	subs	r2, r3, r2
 80020fc:	4613      	mov	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	4413      	add	r3, r2
 8002102:	4a5b      	ldr	r2, [pc, #364]	; (8002270 <HAL_GPIO_EXTI_Callback+0x334>)
 8002104:	4413      	add	r3, r2
 8002106:	2210      	movs	r2, #16
 8002108:	4619      	mov	r1, r3
 800210a:	4858      	ldr	r0, [pc, #352]	; (800226c <HAL_GPIO_EXTI_Callback+0x330>)
 800210c:	f005 f90f 	bl	800732e <strncpy>
 8002110:	4603      	mov	r3, r0
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fe47 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(0,0);
 8002118:	2100      	movs	r1, #0
 800211a:	2000      	movs	r0, #0
 800211c:	f7fe fdde 	bl	8000cdc <lcd_put_cur>
 8002120:	e04d      	b.n	80021be <HAL_GPIO_EXTI_Callback+0x282>
					} else if(in_analog_menu){
 8002122:	4b54      	ldr	r3, [pc, #336]	; (8002274 <HAL_GPIO_EXTI_Callback+0x338>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d049      	beq.n	80021be <HAL_GPIO_EXTI_Callback+0x282>
						analog_pos=(analog_pos==0)?analog_menu_length-1:(analog_pos-1);//decrement menu position
 800212a:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_GPIO_EXTI_Callback+0x33c>)
 800212c:	f993 3000 	ldrsb.w	r3, [r3]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_GPIO_EXTI_Callback+0x204>
 8002134:	230a      	movs	r3, #10
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	b25b      	sxtb	r3, r3
 800213e:	e006      	b.n	800214e <HAL_GPIO_EXTI_Callback+0x212>
 8002140:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <HAL_GPIO_EXTI_Callback+0x33c>)
 8002142:	f993 3000 	ldrsb.w	r3, [r3]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	b25b      	sxtb	r3, r3
 800214e:	4a4a      	ldr	r2, [pc, #296]	; (8002278 <HAL_GPIO_EXTI_Callback+0x33c>)
 8002150:	7013      	strb	r3, [r2, #0]
						lcd_put_cur(0,0);
 8002152:	2100      	movs	r1, #0
 8002154:	2000      	movs	r0, #0
 8002156:	f7fe fdc1 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_GPIO_EXTI_Callback+0x33c>)
 800215c:	f993 3000 	ldrsb.w	r3, [r3]
 8002160:	461a      	mov	r2, r3
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	4413      	add	r3, r2
 8002168:	4a44      	ldr	r2, [pc, #272]	; (800227c <HAL_GPIO_EXTI_Callback+0x340>)
 800216a:	4413      	add	r3, r2
 800216c:	2210      	movs	r2, #16
 800216e:	4619      	mov	r1, r3
 8002170:	483e      	ldr	r0, [pc, #248]	; (800226c <HAL_GPIO_EXTI_Callback+0x330>)
 8002172:	f005 f8dc 	bl	800732e <strncpy>
 8002176:	4603      	mov	r3, r0
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fe14 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(1,0);
 800217e:	2100      	movs	r1, #0
 8002180:	2001      	movs	r0, #1
 8002182:	f7fe fdab 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 8002186:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <HAL_GPIO_EXTI_Callback+0x33c>)
 8002188:	f993 3000 	ldrsb.w	r3, [r3]
 800218c:	3301      	adds	r3, #1
 800218e:	220a      	movs	r2, #10
 8002190:	fb93 f1f2 	sdiv	r1, r3, r2
 8002194:	fb02 f201 	mul.w	r2, r2, r1
 8002198:	1a9a      	subs	r2, r3, r2
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	4413      	add	r3, r2
 80021a0:	4a36      	ldr	r2, [pc, #216]	; (800227c <HAL_GPIO_EXTI_Callback+0x340>)
 80021a2:	4413      	add	r3, r2
 80021a4:	2210      	movs	r2, #16
 80021a6:	4619      	mov	r1, r3
 80021a8:	4830      	ldr	r0, [pc, #192]	; (800226c <HAL_GPIO_EXTI_Callback+0x330>)
 80021aa:	f005 f8c0 	bl	800732e <strncpy>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fdf8 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(0,0);
 80021b6:	2100      	movs	r1, #0
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7fe fd8f 	bl	8000cdc <lcd_put_cur>
					}
				}
				btn_counter=0; // reset btn counter
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_GPIO_EXTI_Callback+0x30c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	801a      	strh	r2, [r3, #0]
 80021c4:	e371      	b.n	80028aa <HAL_GPIO_EXTI_Callback+0x96e>
			}

			//if the down button is pressed
			else if(GPIO_Pin==DOWN_BTN_Pin && btn_counter>debounce_delay){
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	f040 8146 	bne.w	800245a <HAL_GPIO_EXTI_Callback+0x51e>
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <HAL_GPIO_EXTI_Callback+0x30c>)
 80021d0:	881a      	ldrh	r2, [r3, #0]
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_GPIO_EXTI_Callback+0x310>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	f240 813f 	bls.w	800245a <HAL_GPIO_EXTI_Callback+0x51e>
				if(change_value_bool){//if changing a value
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_GPIO_EXTI_Callback+0x314>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d05f      	beq.n	80022a4 <HAL_GPIO_EXTI_Callback+0x368>
					//change the value of the selected item
					//main menu changes
					if(in_main_menu){
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_GPIO_EXTI_Callback+0x318>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01c      	beq.n	8002226 <HAL_GPIO_EXTI_Callback+0x2ea>
						if(menu_pos==2)
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_GPIO_EXTI_Callback+0x31c>)
 80021ee:	f993 3000 	ldrsb.w	r3, [r3]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d10e      	bne.n	8002214 <HAL_GPIO_EXTI_Callback+0x2d8>
							display_scroll=(display_scroll+1)%3;//scroll through devices in display values menu
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_GPIO_EXTI_Callback+0x320>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_GPIO_EXTI_Callback+0x344>)
 80021fe:	fb83 3102 	smull	r3, r1, r3, r2
 8002202:	17d3      	asrs	r3, r2, #31
 8002204:	1ac9      	subs	r1, r1, r3
 8002206:	460b      	mov	r3, r1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	440b      	add	r3, r1
 800220c:	1ad1      	subs	r1, r2, r3
 800220e:	b2ca      	uxtb	r2, r1
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_GPIO_EXTI_Callback+0x320>)
 8002212:	701a      	strb	r2, [r3, #0]
						if(menu_pos == 3)
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002216:	f993 3000 	ldrsb.w	r3, [r3]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d103      	bne.n	8002226 <HAL_GPIO_EXTI_Callback+0x2ea>
							changeDelay(-1);//decrement Delay
 800221e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002222:	f000 fdbf 	bl	8002da4 <changeDelay>
					}
					//can menu changes
					if(in_can_menu){
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_GPIO_EXTI_Callback+0x324>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 8111 	beq.w	8002452 <HAL_GPIO_EXTI_Callback+0x516>
						if(can_pos==1)
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_GPIO_EXTI_Callback+0x328>)
 8002232:	f993 3000 	ldrsb.w	r3, [r3]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d124      	bne.n	8002284 <HAL_GPIO_EXTI_Callback+0x348>
							changeBaudRate(-1);//decrement baud rate
 800223a:	20ff      	movs	r0, #255	; 0xff
 800223c:	f000 fb52 	bl	80028e4 <changeBaudRate>
 8002240:	e107      	b.n	8002452 <HAL_GPIO_EXTI_Callback+0x516>
 8002242:	bf00      	nop
 8002244:	2000021a 	.word	0x2000021a
 8002248:	20000218 	.word	0x20000218
 800224c:	20000162 	.word	0x20000162
 8002250:	20000217 	.word	0x20000217
 8002254:	2000015e 	.word	0x2000015e
 8002258:	20000213 	.word	0x20000213
 800225c:	20000212 	.word	0x20000212
 8002260:	20000210 	.word	0x20000210
 8002264:	20000214 	.word	0x20000214
 8002268:	20000008 	.word	0x20000008
 800226c:	20001238 	.word	0x20001238
 8002270:	2000004c 	.word	0x2000004c
 8002274:	20000211 	.word	0x20000211
 8002278:	20000215 	.word	0x20000215
 800227c:	200000b4 	.word	0x200000b4
 8002280:	55555556 	.word	0x55555556
						else if(can_pos>=2&&can_pos<=4)
 8002284:	4bcb      	ldr	r3, [pc, #812]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x678>)
 8002286:	f993 3000 	ldrsb.w	r3, [r3]
 800228a:	2b01      	cmp	r3, #1
 800228c:	f340 80e1 	ble.w	8002452 <HAL_GPIO_EXTI_Callback+0x516>
 8002290:	4bc8      	ldr	r3, [pc, #800]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x678>)
 8002292:	f993 3000 	ldrsb.w	r3, [r3]
 8002296:	2b04      	cmp	r3, #4
 8002298:	f300 80db 	bgt.w	8002452 <HAL_GPIO_EXTI_Callback+0x516>
							changeCANID(-1);//decrement CAN ID
 800229c:	20ff      	movs	r0, #255	; 0xff
 800229e:	f000 fbc9 	bl	8002a34 <changeCANID>
 80022a2:	e0d6      	b.n	8002452 <HAL_GPIO_EXTI_Callback+0x516>
					}
				} else {
					//scroll menu down
					if(in_main_menu){
 80022a4:	4bc4      	ldr	r3, [pc, #784]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x67c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d043      	beq.n	8002334 <HAL_GPIO_EXTI_Callback+0x3f8>
						menu_pos = (menu_pos+1)%main_menu_length;//increment menu position
 80022ac:	4bc3      	ldr	r3, [pc, #780]	; (80025bc <HAL_GPIO_EXTI_Callback+0x680>)
 80022ae:	f993 3000 	ldrsb.w	r3, [r3]
 80022b2:	3301      	adds	r3, #1
 80022b4:	2204      	movs	r2, #4
 80022b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80022ba:	fb02 f201 	mul.w	r2, r2, r1
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	b25a      	sxtb	r2, r3
 80022c2:	4bbe      	ldr	r3, [pc, #760]	; (80025bc <HAL_GPIO_EXTI_Callback+0x680>)
 80022c4:	701a      	strb	r2, [r3, #0]
						lcd_put_cur(0,0);
 80022c6:	2100      	movs	r1, #0
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7fe fd07 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80022ce:	4bbb      	ldr	r3, [pc, #748]	; (80025bc <HAL_GPIO_EXTI_Callback+0x680>)
 80022d0:	f993 3000 	ldrsb.w	r3, [r3]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	4413      	add	r3, r2
 80022dc:	4ab8      	ldr	r2, [pc, #736]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x684>)
 80022de:	4413      	add	r3, r2
 80022e0:	2210      	movs	r2, #16
 80022e2:	4619      	mov	r1, r3
 80022e4:	48b7      	ldr	r0, [pc, #732]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x688>)
 80022e6:	f005 f822 	bl	800732e <strncpy>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fd5a 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(1,0);
 80022f2:	2100      	movs	r1, #0
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe fcf1 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 80022fa:	4bb0      	ldr	r3, [pc, #704]	; (80025bc <HAL_GPIO_EXTI_Callback+0x680>)
 80022fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002300:	3301      	adds	r3, #1
 8002302:	2204      	movs	r2, #4
 8002304:	fb93 f1f2 	sdiv	r1, r3, r2
 8002308:	fb02 f201 	mul.w	r2, r2, r1
 800230c:	1a9a      	subs	r2, r3, r2
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	4413      	add	r3, r2
 8002314:	4aaa      	ldr	r2, [pc, #680]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x684>)
 8002316:	4413      	add	r3, r2
 8002318:	2210      	movs	r2, #16
 800231a:	4619      	mov	r1, r3
 800231c:	48a9      	ldr	r0, [pc, #676]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x688>)
 800231e:	f005 f806 	bl	800732e <strncpy>
 8002322:	4603      	mov	r3, r0
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fd3e 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(0,0);
 800232a:	2100      	movs	r1, #0
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fcd5 	bl	8000cdc <lcd_put_cur>
 8002332:	e08e      	b.n	8002452 <HAL_GPIO_EXTI_Callback+0x516>
					} else if(in_can_menu){
 8002334:	4ba4      	ldr	r3, [pc, #656]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d043      	beq.n	80023c4 <HAL_GPIO_EXTI_Callback+0x488>
						can_pos=(can_pos+1)%can_menu_length;//increment menu position
 800233c:	4b9d      	ldr	r3, [pc, #628]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x678>)
 800233e:	f993 3000 	ldrsb.w	r3, [r3]
 8002342:	3301      	adds	r3, #1
 8002344:	2206      	movs	r2, #6
 8002346:	fb93 f1f2 	sdiv	r1, r3, r2
 800234a:	fb02 f201 	mul.w	r2, r2, r1
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	b25a      	sxtb	r2, r3
 8002352:	4b98      	ldr	r3, [pc, #608]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x678>)
 8002354:	701a      	strb	r2, [r3, #0]
						lcd_put_cur(0,0);
 8002356:	2100      	movs	r1, #0
 8002358:	2000      	movs	r0, #0
 800235a:	f7fe fcbf 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 800235e:	4b95      	ldr	r3, [pc, #596]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x678>)
 8002360:	f993 3000 	ldrsb.w	r3, [r3]
 8002364:	461a      	mov	r2, r3
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	4413      	add	r3, r2
 800236c:	4a97      	ldr	r2, [pc, #604]	; (80025cc <HAL_GPIO_EXTI_Callback+0x690>)
 800236e:	4413      	add	r3, r2
 8002370:	2210      	movs	r2, #16
 8002372:	4619      	mov	r1, r3
 8002374:	4893      	ldr	r0, [pc, #588]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x688>)
 8002376:	f004 ffda 	bl	800732e <strncpy>
 800237a:	4603      	mov	r3, r0
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe fd12 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(1,0);
 8002382:	2100      	movs	r1, #0
 8002384:	2001      	movs	r0, #1
 8002386:	f7fe fca9 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 800238a:	4b8a      	ldr	r3, [pc, #552]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x678>)
 800238c:	f993 3000 	ldrsb.w	r3, [r3]
 8002390:	3301      	adds	r3, #1
 8002392:	2206      	movs	r2, #6
 8002394:	fb93 f1f2 	sdiv	r1, r3, r2
 8002398:	fb02 f201 	mul.w	r2, r2, r1
 800239c:	1a9a      	subs	r2, r3, r2
 800239e:	4613      	mov	r3, r2
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4413      	add	r3, r2
 80023a4:	4a89      	ldr	r2, [pc, #548]	; (80025cc <HAL_GPIO_EXTI_Callback+0x690>)
 80023a6:	4413      	add	r3, r2
 80023a8:	2210      	movs	r2, #16
 80023aa:	4619      	mov	r1, r3
 80023ac:	4885      	ldr	r0, [pc, #532]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x688>)
 80023ae:	f004 ffbe 	bl	800732e <strncpy>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fcf6 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(0,0);
 80023ba:	2100      	movs	r1, #0
 80023bc:	2000      	movs	r0, #0
 80023be:	f7fe fc8d 	bl	8000cdc <lcd_put_cur>
 80023c2:	e046      	b.n	8002452 <HAL_GPIO_EXTI_Callback+0x516>
					} else if(in_analog_menu){
 80023c4:	4b82      	ldr	r3, [pc, #520]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x694>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d042      	beq.n	8002452 <HAL_GPIO_EXTI_Callback+0x516>
						analog_pos=(analog_pos+1)%analog_menu_length;//increment menu position
 80023cc:	4b81      	ldr	r3, [pc, #516]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x698>)
 80023ce:	f993 3000 	ldrsb.w	r3, [r3]
 80023d2:	3301      	adds	r3, #1
 80023d4:	220a      	movs	r2, #10
 80023d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80023da:	fb02 f201 	mul.w	r2, r2, r1
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	b25a      	sxtb	r2, r3
 80023e2:	4b7c      	ldr	r3, [pc, #496]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x698>)
 80023e4:	701a      	strb	r2, [r3, #0]
						lcd_put_cur(0,0);
 80023e6:	2100      	movs	r1, #0
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe fc77 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 80023ee:	4b79      	ldr	r3, [pc, #484]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x698>)
 80023f0:	f993 3000 	ldrsb.w	r3, [r3]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	4a76      	ldr	r2, [pc, #472]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x69c>)
 80023fe:	4413      	add	r3, r2
 8002400:	2210      	movs	r2, #16
 8002402:	4619      	mov	r1, r3
 8002404:	486f      	ldr	r0, [pc, #444]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x688>)
 8002406:	f004 ff92 	bl	800732e <strncpy>
 800240a:	4603      	mov	r3, r0
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fcca 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(1,0);
 8002412:	2100      	movs	r1, #0
 8002414:	2001      	movs	r0, #1
 8002416:	f7fe fc61 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 800241a:	4b6e      	ldr	r3, [pc, #440]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x698>)
 800241c:	f993 3000 	ldrsb.w	r3, [r3]
 8002420:	3301      	adds	r3, #1
 8002422:	220a      	movs	r2, #10
 8002424:	fb93 f1f2 	sdiv	r1, r3, r2
 8002428:	fb02 f201 	mul.w	r2, r2, r1
 800242c:	1a9a      	subs	r2, r3, r2
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	4413      	add	r3, r2
 8002434:	4a68      	ldr	r2, [pc, #416]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x69c>)
 8002436:	4413      	add	r3, r2
 8002438:	2210      	movs	r2, #16
 800243a:	4619      	mov	r1, r3
 800243c:	4861      	ldr	r0, [pc, #388]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x688>)
 800243e:	f004 ff76 	bl	800732e <strncpy>
 8002442:	4603      	mov	r3, r0
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fcae 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(0,0);
 800244a:	2100      	movs	r1, #0
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe fc45 	bl	8000cdc <lcd_put_cur>
					}

				}
				btn_counter=0; // reset btn counter
 8002452:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_GPIO_EXTI_Callback+0x6a0>)
 8002454:	2200      	movs	r2, #0
 8002456:	801a      	strh	r2, [r3, #0]
 8002458:	e227      	b.n	80028aa <HAL_GPIO_EXTI_Callback+0x96e>
			}

			//if the select button is pressed
			else if(GPIO_Pin==SEL_BTN_Pin && btn_counter>debounce_delay){
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	2b02      	cmp	r3, #2
 800245e:	f040 8224 	bne.w	80028aa <HAL_GPIO_EXTI_Callback+0x96e>
 8002462:	4b5e      	ldr	r3, [pc, #376]	; (80025dc <HAL_GPIO_EXTI_Callback+0x6a0>)
 8002464:	881a      	ldrh	r2, [r3, #0]
 8002466:	4b5e      	ldr	r3, [pc, #376]	; (80025e0 <HAL_GPIO_EXTI_Callback+0x6a4>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	f240 821d 	bls.w	80028aa <HAL_GPIO_EXTI_Callback+0x96e>
				//set changes and reinitialize can bus
				if(!change_value_bool){
 8002470:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f040 81aa 	bne.w	80027ce <HAL_GPIO_EXTI_Callback+0x892>
					if(in_main_menu){
 800247a:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x67c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80c6 	beq.w	8002610 <HAL_GPIO_EXTI_Callback+0x6d4>
						if(menu_pos==0){
 8002484:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <HAL_GPIO_EXTI_Callback+0x680>)
 8002486:	f993 3000 	ldrsb.w	r3, [r3]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d146      	bne.n	800251c <HAL_GPIO_EXTI_Callback+0x5e0>
							//display can menu
							lcd_put_cur(0,0);
 800248e:	2100      	movs	r1, #0
 8002490:	2000      	movs	r0, #0
 8002492:	f7fe fc23 	bl	8000cdc <lcd_put_cur>
							lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x678>)
 8002498:	f993 3000 	ldrsb.w	r3, [r3]
 800249c:	461a      	mov	r2, r3
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4413      	add	r3, r2
 80024a4:	4a49      	ldr	r2, [pc, #292]	; (80025cc <HAL_GPIO_EXTI_Callback+0x690>)
 80024a6:	4413      	add	r3, r2
 80024a8:	2210      	movs	r2, #16
 80024aa:	4619      	mov	r1, r3
 80024ac:	4845      	ldr	r0, [pc, #276]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x688>)
 80024ae:	f004 ff3e 	bl	800732e <strncpy>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fc76 	bl	8000da6 <lcd_send_string>
							lcd_put_cur(1,0);
 80024ba:	2100      	movs	r1, #0
 80024bc:	2001      	movs	r0, #1
 80024be:	f7fe fc0d 	bl	8000cdc <lcd_put_cur>
							lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 80024c2:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x678>)
 80024c4:	f993 3000 	ldrsb.w	r3, [r3]
 80024c8:	3301      	adds	r3, #1
 80024ca:	2206      	movs	r2, #6
 80024cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80024d0:	fb02 f201 	mul.w	r2, r2, r1
 80024d4:	1a9a      	subs	r2, r3, r2
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	4413      	add	r3, r2
 80024dc:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <HAL_GPIO_EXTI_Callback+0x690>)
 80024de:	4413      	add	r3, r2
 80024e0:	2210      	movs	r2, #16
 80024e2:	4619      	mov	r1, r3
 80024e4:	4837      	ldr	r0, [pc, #220]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x688>)
 80024e6:	f004 ff22 	bl	800732e <strncpy>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fc5a 	bl	8000da6 <lcd_send_string>
							lcd_put_cur(0,0);
 80024f2:	2100      	movs	r1, #0
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7fe fbf1 	bl	8000cdc <lcd_put_cur>
							//update menu booleans
							in_can_menu=1;
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x68c>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
							in_main_menu=0;
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x67c>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
							change_value_bool=!change_value_bool;//invert change value bool
 8002506:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	4b33      	ldr	r3, [pc, #204]	; (80025e4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e1b8      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						} else if(menu_pos==1){
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_GPIO_EXTI_Callback+0x680>)
 800251e:	f993 3000 	ldrsb.w	r3, [r3]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d160      	bne.n	80025e8 <HAL_GPIO_EXTI_Callback+0x6ac>
							//display can menu
							lcd_put_cur(0,0);
 8002526:	2100      	movs	r1, #0
 8002528:	2000      	movs	r0, #0
 800252a:	f7fe fbd7 	bl	8000cdc <lcd_put_cur>
							lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x698>)
 8002530:	f993 3000 	ldrsb.w	r3, [r3]
 8002534:	461a      	mov	r2, r3
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	4413      	add	r3, r2
 800253c:	4a26      	ldr	r2, [pc, #152]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x69c>)
 800253e:	4413      	add	r3, r2
 8002540:	2210      	movs	r2, #16
 8002542:	4619      	mov	r1, r3
 8002544:	481f      	ldr	r0, [pc, #124]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x688>)
 8002546:	f004 fef2 	bl	800732e <strncpy>
 800254a:	4603      	mov	r3, r0
 800254c:	4618      	mov	r0, r3
 800254e:	f7fe fc2a 	bl	8000da6 <lcd_send_string>
							lcd_put_cur(1,0);
 8002552:	2100      	movs	r1, #0
 8002554:	2001      	movs	r0, #1
 8002556:	f7fe fbc1 	bl	8000cdc <lcd_put_cur>
							lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x698>)
 800255c:	f993 3000 	ldrsb.w	r3, [r3]
 8002560:	3301      	adds	r3, #1
 8002562:	220a      	movs	r2, #10
 8002564:	fb93 f1f2 	sdiv	r1, r3, r2
 8002568:	fb02 f201 	mul.w	r2, r2, r1
 800256c:	1a9a      	subs	r2, r3, r2
 800256e:	4613      	mov	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4413      	add	r3, r2
 8002574:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x69c>)
 8002576:	4413      	add	r3, r2
 8002578:	2210      	movs	r2, #16
 800257a:	4619      	mov	r1, r3
 800257c:	4811      	ldr	r0, [pc, #68]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x688>)
 800257e:	f004 fed6 	bl	800732e <strncpy>
 8002582:	4603      	mov	r3, r0
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fc0e 	bl	8000da6 <lcd_send_string>
							lcd_put_cur(0,0);
 800258a:	2100      	movs	r1, #0
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe fba5 	bl	8000cdc <lcd_put_cur>
							//update menu booleans
							in_analog_menu=1;
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x694>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
							in_main_menu=0;
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x67c>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
							change_value_bool=!change_value_bool;//invert change value bool
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_GPIO_EXTI_Callback+0x6a8>)
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e16c      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
 80025b4:	20000214 	.word	0x20000214
 80025b8:	2000015e 	.word	0x2000015e
 80025bc:	20000213 	.word	0x20000213
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20001238 	.word	0x20001238
 80025c8:	20000210 	.word	0x20000210
 80025cc:	2000004c 	.word	0x2000004c
 80025d0:	20000211 	.word	0x20000211
 80025d4:	20000215 	.word	0x20000215
 80025d8:	200000b4 	.word	0x200000b4
 80025dc:	20000218 	.word	0x20000218
 80025e0:	20000162 	.word	0x20000162
 80025e4:	20000217 	.word	0x20000217
						} else if (menu_pos==2){
 80025e8:	4bb2      	ldr	r3, [pc, #712]	; (80028b4 <HAL_GPIO_EXTI_Callback+0x978>)
 80025ea:	f993 3000 	ldrsb.w	r3, [r3]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d103      	bne.n	80025fa <HAL_GPIO_EXTI_Callback+0x6be>
							display_scroll=0;// reset display value menu position
 80025f2:	4bb1      	ldr	r3, [pc, #708]	; (80028b8 <HAL_GPIO_EXTI_Callback+0x97c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e149      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						} else if (menu_pos==3){
 80025fa:	4bae      	ldr	r3, [pc, #696]	; (80028b4 <HAL_GPIO_EXTI_Callback+0x978>)
 80025fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002600:	2b03      	cmp	r3, #3
 8002602:	f040 8144 	bne.w	800288e <HAL_GPIO_EXTI_Callback+0x952>
							//move cursor for delay change
							lcd_put_cur(0,13);
 8002606:	210d      	movs	r1, #13
 8002608:	2000      	movs	r0, #0
 800260a:	f7fe fb67 	bl	8000cdc <lcd_put_cur>
 800260e:	e13e      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						}
					} else if((in_can_menu&&can_pos==0)||(in_analog_menu&&analog_pos==0)){// back buttons
 8002610:	4baa      	ldr	r3, [pc, #680]	; (80028bc <HAL_GPIO_EXTI_Callback+0x980>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_GPIO_EXTI_Callback+0x6e6>
 8002618:	4ba9      	ldr	r3, [pc, #676]	; (80028c0 <HAL_GPIO_EXTI_Callback+0x984>)
 800261a:	f993 3000 	ldrsb.w	r3, [r3]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_GPIO_EXTI_Callback+0x6f8>
 8002622:	4ba8      	ldr	r3, [pc, #672]	; (80028c4 <HAL_GPIO_EXTI_Callback+0x988>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d04e      	beq.n	80026c8 <HAL_GPIO_EXTI_Callback+0x78c>
 800262a:	4ba7      	ldr	r3, [pc, #668]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x98c>)
 800262c:	f993 3000 	ldrsb.w	r3, [r3]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d149      	bne.n	80026c8 <HAL_GPIO_EXTI_Callback+0x78c>
						//display main menu
						lcd_put_cur(0,0);
 8002634:	2100      	movs	r1, #0
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe fb50 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 800263c:	4b9d      	ldr	r3, [pc, #628]	; (80028b4 <HAL_GPIO_EXTI_Callback+0x978>)
 800263e:	f993 3000 	ldrsb.w	r3, [r3]
 8002642:	461a      	mov	r2, r3
 8002644:	4613      	mov	r3, r2
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4413      	add	r3, r2
 800264a:	4aa0      	ldr	r2, [pc, #640]	; (80028cc <HAL_GPIO_EXTI_Callback+0x990>)
 800264c:	4413      	add	r3, r2
 800264e:	2210      	movs	r2, #16
 8002650:	4619      	mov	r1, r3
 8002652:	489f      	ldr	r0, [pc, #636]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x994>)
 8002654:	f004 fe6b 	bl	800732e <strncpy>
 8002658:	4603      	mov	r3, r0
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fba3 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(1,0);
 8002660:	2100      	movs	r1, #0
 8002662:	2001      	movs	r0, #1
 8002664:	f7fe fb3a 	bl	8000cdc <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8002668:	4b92      	ldr	r3, [pc, #584]	; (80028b4 <HAL_GPIO_EXTI_Callback+0x978>)
 800266a:	f993 3000 	ldrsb.w	r3, [r3]
 800266e:	3301      	adds	r3, #1
 8002670:	2204      	movs	r2, #4
 8002672:	fb93 f1f2 	sdiv	r1, r3, r2
 8002676:	fb02 f201 	mul.w	r2, r2, r1
 800267a:	1a9a      	subs	r2, r3, r2
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	4413      	add	r3, r2
 8002682:	4a92      	ldr	r2, [pc, #584]	; (80028cc <HAL_GPIO_EXTI_Callback+0x990>)
 8002684:	4413      	add	r3, r2
 8002686:	2210      	movs	r2, #16
 8002688:	4619      	mov	r1, r3
 800268a:	4891      	ldr	r0, [pc, #580]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x994>)
 800268c:	f004 fe4f 	bl	800732e <strncpy>
 8002690:	4603      	mov	r3, r0
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fb87 	bl	8000da6 <lcd_send_string>
						lcd_put_cur(0,0);
 8002698:	2100      	movs	r1, #0
 800269a:	2000      	movs	r0, #0
 800269c:	f7fe fb1e 	bl	8000cdc <lcd_put_cur>
						//update menu booleans
						in_can_menu=0;
 80026a0:	4b86      	ldr	r3, [pc, #536]	; (80028bc <HAL_GPIO_EXTI_Callback+0x980>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
						in_analog_menu=0;
 80026a6:	4b87      	ldr	r3, [pc, #540]	; (80028c4 <HAL_GPIO_EXTI_Callback+0x988>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
						in_main_menu=1;
 80026ac:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x998>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
						change_value_bool=!change_value_bool;//invert change value bool
 80026b2:	4b89      	ldr	r3, [pc, #548]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf0c      	ite	eq
 80026ba:	2301      	moveq	r3, #1
 80026bc:	2300      	movne	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b85      	ldr	r3, [pc, #532]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e0e2      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
					} else if (in_analog_menu){
 80026c8:	4b7e      	ldr	r3, [pc, #504]	; (80028c4 <HAL_GPIO_EXTI_Callback+0x988>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d063      	beq.n	8002798 <HAL_GPIO_EXTI_Callback+0x85c>
						if(analog_pos>=1 && analog_pos<=4){
 80026d0:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x98c>)
 80026d2:	f993 3000 	ldrsb.w	r3, [r3]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	dd18      	ble.n	800270c <HAL_GPIO_EXTI_Callback+0x7d0>
 80026da:	4b7b      	ldr	r3, [pc, #492]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x98c>)
 80026dc:	f993 3000 	ldrsb.w	r3, [r3]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	dc13      	bgt.n	800270c <HAL_GPIO_EXTI_Callback+0x7d0>
							zeroAnalog(analog_pos-1);// set the analog offsets to the current value
 80026e4:	4b78      	ldr	r3, [pc, #480]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x98c>)
 80026e6:	f993 3000 	ldrsb.w	r3, [r3]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fbe5 	bl	8002ec0 <zeroAnalog>
							change_value_bool=!change_value_bool;//invert change value bool
 80026f6:	4b78      	ldr	r3, [pc, #480]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	4b74      	ldr	r3, [pc, #464]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	e0c0      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						}else if(analog_pos>=5 && analog_pos<=7){
 800270c:	4b6e      	ldr	r3, [pc, #440]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x98c>)
 800270e:	f993 3000 	ldrsb.w	r3, [r3]
 8002712:	2b04      	cmp	r3, #4
 8002714:	dd18      	ble.n	8002748 <HAL_GPIO_EXTI_Callback+0x80c>
 8002716:	4b6c      	ldr	r3, [pc, #432]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x98c>)
 8002718:	f993 3000 	ldrsb.w	r3, [r3]
 800271c:	2b07      	cmp	r3, #7
 800271e:	dc13      	bgt.n	8002748 <HAL_GPIO_EXTI_Callback+0x80c>
							toggleAnalog(analog_pos-4);
 8002720:	4b69      	ldr	r3, [pc, #420]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x98c>)
 8002722:	f993 3000 	ldrsb.w	r3, [r3]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3b04      	subs	r3, #4
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fc25 	bl	8002f7c <toggleAnalog>
							change_value_bool=!change_value_bool;//invert change value bool
 8002732:	4b69      	ldr	r3, [pc, #420]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e0a2      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						}else if(analog_pos==8){
 8002748:	4b5f      	ldr	r3, [pc, #380]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x98c>)
 800274a:	f993 3000 	ldrsb.w	r3, [r3]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d10c      	bne.n	800276c <HAL_GPIO_EXTI_Callback+0x830>
							resetOffsets();// reset the analog offsets
 8002752:	f000 fbf9 	bl	8002f48 <resetOffsets>
							change_value_bool =!change_value_bool;//invert change value bool
 8002756:	4b60      	ldr	r3, [pc, #384]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4b5c      	ldr	r3, [pc, #368]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e090      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						}else if(analog_pos==9){
 800276c:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <HAL_GPIO_EXTI_Callback+0x98c>)
 800276e:	f993 3000 	ldrsb.w	r3, [r3]
 8002772:	2b09      	cmp	r3, #9
 8002774:	f040 808b 	bne.w	800288e <HAL_GPIO_EXTI_Callback+0x952>
							store_offsets=1;
 8002778:	4b58      	ldr	r3, [pc, #352]	; (80028dc <HAL_GPIO_EXTI_Callback+0x9a0>)
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
							storeInFlash();// store the analog offsets
 800277e:	f000 ff49 	bl	8003614 <storeInFlash>
							change_value_bool=!change_value_bool;//invert change value bool
 8002782:	4b55      	ldr	r3, [pc, #340]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	bf0c      	ite	eq
 800278a:	2301      	moveq	r3, #1
 800278c:	2300      	movne	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	4b51      	ldr	r3, [pc, #324]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e07a      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						}

					} else if (in_can_menu){
 8002798:	4b48      	ldr	r3, [pc, #288]	; (80028bc <HAL_GPIO_EXTI_Callback+0x980>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d011      	beq.n	80027c4 <HAL_GPIO_EXTI_Callback+0x888>
						if(can_pos==5){
 80027a0:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_GPIO_EXTI_Callback+0x984>)
 80027a2:	f993 3000 	ldrsb.w	r3, [r3]
 80027a6:	2b05      	cmp	r3, #5
 80027a8:	d171      	bne.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
							resetCAN();// reset the CAN options to default
 80027aa:	f000 fadf 	bl	8002d6c <resetCAN>
							change_value_bool=!change_value_bool;//invert change value bool
 80027ae:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e064      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						}
					} else{
						//move cursor to end
						lcd_put_cur(0,15);
 80027c4:	210f      	movs	r1, #15
 80027c6:	2000      	movs	r0, #0
 80027c8:	f7fe fa88 	bl	8000cdc <lcd_put_cur>
 80027cc:	e05f      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
					}

				}else{
					if(in_main_menu){
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x998>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d043      	beq.n	800285e <HAL_GPIO_EXTI_Callback+0x922>
						if(menu_pos==2){ //display menu
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <HAL_GPIO_EXTI_Callback+0x978>)
 80027d8:	f993 3000 	ldrsb.w	r3, [r3]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d136      	bne.n	800284e <HAL_GPIO_EXTI_Callback+0x912>
							lcd_put_cur(0,0);
 80027e0:	2100      	movs	r1, #0
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7fe fa7a 	bl	8000cdc <lcd_put_cur>
							lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80027e8:	4b32      	ldr	r3, [pc, #200]	; (80028b4 <HAL_GPIO_EXTI_Callback+0x978>)
 80027ea:	f993 3000 	ldrsb.w	r3, [r3]
 80027ee:	461a      	mov	r2, r3
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4413      	add	r3, r2
 80027f6:	4a35      	ldr	r2, [pc, #212]	; (80028cc <HAL_GPIO_EXTI_Callback+0x990>)
 80027f8:	4413      	add	r3, r2
 80027fa:	2210      	movs	r2, #16
 80027fc:	4619      	mov	r1, r3
 80027fe:	4834      	ldr	r0, [pc, #208]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x994>)
 8002800:	f004 fd95 	bl	800732e <strncpy>
 8002804:	4603      	mov	r3, r0
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe facd 	bl	8000da6 <lcd_send_string>
							lcd_put_cur(1,0);
 800280c:	2100      	movs	r1, #0
 800280e:	2001      	movs	r0, #1
 8002810:	f7fe fa64 	bl	8000cdc <lcd_put_cur>
							lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8002814:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <HAL_GPIO_EXTI_Callback+0x978>)
 8002816:	f993 3000 	ldrsb.w	r3, [r3]
 800281a:	3301      	adds	r3, #1
 800281c:	2204      	movs	r2, #4
 800281e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002822:	fb02 f201 	mul.w	r2, r2, r1
 8002826:	1a9a      	subs	r2, r3, r2
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	4413      	add	r3, r2
 800282e:	4a27      	ldr	r2, [pc, #156]	; (80028cc <HAL_GPIO_EXTI_Callback+0x990>)
 8002830:	4413      	add	r3, r2
 8002832:	2210      	movs	r2, #16
 8002834:	4619      	mov	r1, r3
 8002836:	4826      	ldr	r0, [pc, #152]	; (80028d0 <HAL_GPIO_EXTI_Callback+0x994>)
 8002838:	f004 fd79 	bl	800732e <strncpy>
 800283c:	4603      	mov	r3, r0
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fab1 	bl	8000da6 <lcd_send_string>
							lcd_put_cur(0,0);
 8002844:	2100      	movs	r1, #0
 8002846:	2000      	movs	r0, #0
 8002848:	f7fe fa48 	bl	8000cdc <lcd_put_cur>
 800284c:	e01f      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						}
						else if(menu_pos==3)
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_GPIO_EXTI_Callback+0x978>)
 8002850:	f993 3000 	ldrsb.w	r3, [r3]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d11a      	bne.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
							setDelay();//set Delay
 8002858:	f000 fad8 	bl	8002e0c <setDelay>
 800285c:	e017      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
					}
					else if(in_can_menu){
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_GPIO_EXTI_Callback+0x980>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d013      	beq.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						if(can_pos==1)
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <HAL_GPIO_EXTI_Callback+0x984>)
 8002868:	f993 3000 	ldrsb.w	r3, [r3]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d102      	bne.n	8002876 <HAL_GPIO_EXTI_Callback+0x93a>
							setBaudRate(); // set and store the selected baud rate
 8002870:	f000 f876 	bl	8002960 <setBaudRate>
 8002874:	e00b      	b.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
						else if(can_pos>=2 && can_pos<=4)
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_GPIO_EXTI_Callback+0x984>)
 8002878:	f993 3000 	ldrsb.w	r3, [r3]
 800287c:	2b01      	cmp	r3, #1
 800287e:	dd06      	ble.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_GPIO_EXTI_Callback+0x984>)
 8002882:	f993 3000 	ldrsb.w	r3, [r3]
 8002886:	2b04      	cmp	r3, #4
 8002888:	dc01      	bgt.n	800288e <HAL_GPIO_EXTI_Callback+0x952>
							setCANID(); // set and store the selected can id
 800288a:	f000 f987 	bl	8002b9c <setCANID>
					}

				}
				change_value_bool=!change_value_bool;//invert change value bool
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x99c>)
 80028a0:	701a      	strb	r2, [r3, #0]
				btn_counter=0; // reset btn counter
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_GPIO_EXTI_Callback+0x9a4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	801a      	strh	r2, [r3, #0]
			}
}
 80028a8:	e7ff      	b.n	80028aa <HAL_GPIO_EXTI_Callback+0x96e>
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000213 	.word	0x20000213
 80028b8:	20000212 	.word	0x20000212
 80028bc:	20000210 	.word	0x20000210
 80028c0:	20000214 	.word	0x20000214
 80028c4:	20000211 	.word	0x20000211
 80028c8:	20000215 	.word	0x20000215
 80028cc:	20000008 	.word	0x20000008
 80028d0:	20001238 	.word	0x20001238
 80028d4:	2000015e 	.word	0x2000015e
 80028d8:	20000217 	.word	0x20000217
 80028dc:	20000200 	.word	0x20000200
 80028e0:	20000218 	.word	0x20000218

080028e4 <changeBaudRate>:


//changes the baud rate of the CAN connection
void changeBaudRate(uint8_t direction){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
	baud_pos = ((baud_pos+direction)<0)?baud_rates_length-1:(baud_pos+direction)%baud_rates_length;//move baud rate position in given direction
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <changeBaudRate+0x70>)
 80028f0:	f993 3000 	ldrsb.w	r3, [r3]
 80028f4:	461a      	mov	r2, r3
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	4413      	add	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	da05      	bge.n	800290a <changeBaudRate+0x26>
 80028fe:	2304      	movs	r3, #4
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	b25b      	sxtb	r3, r3
 8002908:	e00c      	b.n	8002924 <changeBaudRate+0x40>
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <changeBaudRate+0x70>)
 800290c:	f993 3000 	ldrsb.w	r3, [r3]
 8002910:	461a      	mov	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	4413      	add	r3, r2
 8002916:	2204      	movs	r2, #4
 8002918:	fb93 f1f2 	sdiv	r1, r3, r2
 800291c:	fb02 f201 	mul.w	r2, r2, r1
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	b25b      	sxtb	r3, r3
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <changeBaudRate+0x70>)
 8002926:	7013      	strb	r3, [r2, #0]

	//display the selected baud rate
	lcd_put_cur(0,12);
 8002928:	210c      	movs	r1, #12
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe f9d6 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(baud_rates[baud_pos]);
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <changeBaudRate+0x70>)
 8002932:	f993 3000 	ldrsb.w	r3, [r3]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4a07      	ldr	r2, [pc, #28]	; (8002958 <changeBaudRate+0x74>)
 800293a:	4413      	add	r3, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fa32 	bl	8000da6 <lcd_send_string>
	lcd_put_cur(0,15);
 8002942:	210f      	movs	r1, #15
 8002944:	2000      	movs	r0, #0
 8002946:	f7fe f9c9 	bl	8000cdc <lcd_put_cur>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000015f 	.word	0x2000015f
 8002958:	08008c68 	.word	0x08008c68
 800295c:	00000000 	.word	0x00000000

08002960 <setBaudRate>:

//set the baud rate and store it
void setBaudRate(void){
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
	//stop can bus
	HAL_CAN_Stop(&hcan);
 8002964:	482c      	ldr	r0, [pc, #176]	; (8002a18 <setBaudRate+0xb8>)
 8002966:	f001 fbbe 	bl	80040e6 <HAL_CAN_Stop>

	//set prescaler
	PSC=pow(2,4-baud_pos);
 800296a:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <setBaudRate+0xbc>)
 800296c:	f993 3000 	ldrsb.w	r3, [r3]
 8002970:	f1c3 0304 	rsb	r3, r3, #4
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fdd5 	bl	8000524 <__aeabi_i2d>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	ec43 2b11 	vmov	d1, r2, r3
 8002982:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002a10 <setBaudRate+0xb0>
 8002986:	f005 f8f3 	bl	8007b70 <pow>
 800298a:	ec53 2b10 	vmov	r2, r3, d0
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	f7fe f8e1 	bl	8000b58 <__aeabi_d2uiz>
 8002996:	4603      	mov	r3, r0
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <setBaudRate+0xc0>)
 800299c:	701a      	strb	r2, [r3, #0]
	hcan.Init.Prescaler = PSC;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <setBaudRate+0xc0>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <setBaudRate+0xb8>)
 80029a6:	605a      	str	r2, [r3, #4]

	//reinitialize can
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80029a8:	481b      	ldr	r0, [pc, #108]	; (8002a18 <setBaudRate+0xb8>)
 80029aa:	f001 f993 	bl	8003cd4 <HAL_CAN_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <setBaudRate+0x58>
	{
		Error_Handler();
 80029b4:	f000 fed0 	bl	8003758 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80029b8:	4817      	ldr	r0, [pc, #92]	; (8002a18 <setBaudRate+0xb8>)
 80029ba:	f001 fb50 	bl	800405e <HAL_CAN_Start>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <setBaudRate+0x68>
		Error_Handler();
 80029c4:	f000 fec8 	bl	8003758 <Error_Handler>
	}

	//store new baud in flash
	storeInFlash();
 80029c8:	f000 fe24 	bl	8003614 <storeInFlash>

	//save the baud rate in menu
	memset(temp,0,17); // erase the temp array
 80029cc:	2211      	movs	r2, #17
 80029ce:	2100      	movs	r1, #0
 80029d0:	4814      	ldr	r0, [pc, #80]	; (8002a24 <setBaudRate+0xc4>)
 80029d2:	f004 fc3d 	bl	8007250 <memset>
	strncpy(temp, "Baud rate:  ",16);
 80029d6:	2210      	movs	r2, #16
 80029d8:	4913      	ldr	r1, [pc, #76]	; (8002a28 <setBaudRate+0xc8>)
 80029da:	4812      	ldr	r0, [pc, #72]	; (8002a24 <setBaudRate+0xc4>)
 80029dc:	f004 fca7 	bl	800732e <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <setBaudRate+0xbc>)
 80029e2:	f993 3000 	ldrsb.w	r3, [r3]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <setBaudRate+0xcc>)
 80029ea:	4413      	add	r3, r2
 80029ec:	2211      	movs	r2, #17
 80029ee:	4619      	mov	r1, r3
 80029f0:	480c      	ldr	r0, [pc, #48]	; (8002a24 <setBaudRate+0xc4>)
 80029f2:	f004 fc64 	bl	80072be <strlcat>
	strlcpy(can_menu[1],temp,17);
 80029f6:	2211      	movs	r2, #17
 80029f8:	490a      	ldr	r1, [pc, #40]	; (8002a24 <setBaudRate+0xc4>)
 80029fa:	480d      	ldr	r0, [pc, #52]	; (8002a30 <setBaudRate+0xd0>)
 80029fc:	f004 fc82 	bl	8007304 <strlcpy>
	lcd_put_cur(0,0);
 8002a00:	2100      	movs	r1, #0
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe f96a 	bl	8000cdc <lcd_put_cur>
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	f3af 8000 	nop.w
 8002a10:	00000000 	.word	0x00000000
 8002a14:	40000000 	.word	0x40000000
 8002a18:	2000120c 	.word	0x2000120c
 8002a1c:	2000015f 	.word	0x2000015f
 8002a20:	20000000 	.word	0x20000000
 8002a24:	20001238 	.word	0x20001238
 8002a28:	08008af8 	.word	0x08008af8
 8002a2c:	08008c68 	.word	0x08008c68
 8002a30:	2000005d 	.word	0x2000005d

08002a34 <changeCANID>:

//changes the ID of the selected can device
void changeCANID(uint8_t direction){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
	if(can_pos==2){//change can id 1
 8002a3e:	4b4f      	ldr	r3, [pc, #316]	; (8002b7c <changeCANID+0x148>)
 8002a40:	f993 3000 	ldrsb.w	r3, [r3]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d128      	bne.n	8002a9a <changeCANID+0x66>
		can_id_1+=direction;
 8002a48:	4b4d      	ldr	r3, [pc, #308]	; (8002b80 <changeCANID+0x14c>)
 8002a4a:	781a      	ldrb	r2, [r3, #0]
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	4413      	add	r3, r2
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <changeCANID+0x14c>)
 8002a54:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 8002a56:	e006      	b.n	8002a66 <changeCANID+0x32>
			can_id_1+=direction;
 8002a58:	4b49      	ldr	r3, [pc, #292]	; (8002b80 <changeCANID+0x14c>)
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	4413      	add	r3, r2
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <changeCANID+0x14c>)
 8002a64:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 8002a66:	4b46      	ldr	r3, [pc, #280]	; (8002b80 <changeCANID+0x14c>)
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	4b46      	ldr	r3, [pc, #280]	; (8002b84 <changeCANID+0x150>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d0f2      	beq.n	8002a58 <changeCANID+0x24>
 8002a72:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <changeCANID+0x14c>)
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	4b44      	ldr	r3, [pc, #272]	; (8002b88 <changeCANID+0x154>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d0ec      	beq.n	8002a58 <changeCANID+0x24>
		sprintf(char_arr, "%03d", can_id_1);
 8002a7e:	4b40      	ldr	r3, [pc, #256]	; (8002b80 <changeCANID+0x14c>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	4941      	ldr	r1, [pc, #260]	; (8002b8c <changeCANID+0x158>)
 8002a86:	4842      	ldr	r0, [pc, #264]	; (8002b90 <changeCANID+0x15c>)
 8002a88:	f004 fbea 	bl	8007260 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002a8c:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <changeCANID+0x160>)
 8002a8e:	4a40      	ldr	r2, [pc, #256]	; (8002b90 <changeCANID+0x15c>)
 8002a90:	8811      	ldrh	r1, [r2, #0]
 8002a92:	7892      	ldrb	r2, [r2, #2]
 8002a94:	8019      	strh	r1, [r3, #0]
 8002a96:	709a      	strb	r2, [r3, #2]
 8002a98:	e05a      	b.n	8002b50 <changeCANID+0x11c>
	} else if(can_pos==3){//change can id 2
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <changeCANID+0x148>)
 8002a9c:	f993 3000 	ldrsb.w	r3, [r3]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d128      	bne.n	8002af6 <changeCANID+0xc2>
		can_id_2+=direction;
 8002aa4:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <changeCANID+0x150>)
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	4413      	add	r3, r2
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4b35      	ldr	r3, [pc, #212]	; (8002b84 <changeCANID+0x150>)
 8002ab0:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 8002ab2:	e006      	b.n	8002ac2 <changeCANID+0x8e>
			can_id_2+=direction;
 8002ab4:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <changeCANID+0x150>)
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	4413      	add	r3, r2
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <changeCANID+0x150>)
 8002ac0:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 8002ac2:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <changeCANID+0x150>)
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	4b2e      	ldr	r3, [pc, #184]	; (8002b80 <changeCANID+0x14c>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d0f2      	beq.n	8002ab4 <changeCANID+0x80>
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <changeCANID+0x150>)
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <changeCANID+0x154>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d0ec      	beq.n	8002ab4 <changeCANID+0x80>
		sprintf(char_arr, "%03d", can_id_2);
 8002ada:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <changeCANID+0x150>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	492a      	ldr	r1, [pc, #168]	; (8002b8c <changeCANID+0x158>)
 8002ae2:	482b      	ldr	r0, [pc, #172]	; (8002b90 <changeCANID+0x15c>)
 8002ae4:	f004 fbbc 	bl	8007260 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <changeCANID+0x160>)
 8002aea:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <changeCANID+0x15c>)
 8002aec:	8811      	ldrh	r1, [r2, #0]
 8002aee:	7892      	ldrb	r2, [r2, #2]
 8002af0:	8019      	strh	r1, [r3, #0]
 8002af2:	709a      	strb	r2, [r3, #2]
 8002af4:	e02c      	b.n	8002b50 <changeCANID+0x11c>
	} else if(can_pos==4){// change can id 3
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <changeCANID+0x148>)
 8002af8:	f993 3000 	ldrsb.w	r3, [r3]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d127      	bne.n	8002b50 <changeCANID+0x11c>
		can_id_3+=direction;
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <changeCANID+0x154>)
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	4413      	add	r3, r2
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <changeCANID+0x154>)
 8002b0c:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 8002b0e:	e006      	b.n	8002b1e <changeCANID+0xea>
			can_id_3+=direction;
 8002b10:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <changeCANID+0x154>)
 8002b12:	781a      	ldrb	r2, [r3, #0]
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4413      	add	r3, r2
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <changeCANID+0x154>)
 8002b1c:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <changeCANID+0x154>)
 8002b20:	781a      	ldrb	r2, [r3, #0]
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <changeCANID+0x14c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d0f2      	beq.n	8002b10 <changeCANID+0xdc>
 8002b2a:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <changeCANID+0x154>)
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <changeCANID+0x150>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d0ec      	beq.n	8002b10 <changeCANID+0xdc>
		sprintf(char_arr, "%03d", can_id_3);
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <changeCANID+0x154>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4913      	ldr	r1, [pc, #76]	; (8002b8c <changeCANID+0x158>)
 8002b3e:	4814      	ldr	r0, [pc, #80]	; (8002b90 <changeCANID+0x15c>)
 8002b40:	f004 fb8e 	bl	8007260 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <changeCANID+0x160>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <changeCANID+0x15c>)
 8002b48:	8811      	ldrh	r1, [r2, #0]
 8002b4a:	7892      	ldrb	r2, [r2, #2]
 8002b4c:	8019      	strh	r1, [r3, #0]
 8002b4e:	709a      	strb	r2, [r3, #2]
	}
	//display the selected CAN ID
	lcd_put_cur(0,13);
 8002b50:	210d      	movs	r1, #13
 8002b52:	2000      	movs	r0, #0
 8002b54:	f7fe f8c2 	bl	8000cdc <lcd_put_cur>
	lcd_send_string("    ");
 8002b58:	480f      	ldr	r0, [pc, #60]	; (8002b98 <changeCANID+0x164>)
 8002b5a:	f7fe f924 	bl	8000da6 <lcd_send_string>
	lcd_put_cur(0,13);
 8002b5e:	210d      	movs	r1, #13
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7fe f8bb 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(modified_can_id);
 8002b66:	480b      	ldr	r0, [pc, #44]	; (8002b94 <changeCANID+0x160>)
 8002b68:	f7fe f91d 	bl	8000da6 <lcd_send_string>
	lcd_put_cur(0,15);
 8002b6c:	210f      	movs	r1, #15
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fe f8b4 	bl	8000cdc <lcd_put_cur>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000214 	.word	0x20000214
 8002b80:	200032b0 	.word	0x200032b0
 8002b84:	200012a0 	.word	0x200012a0
 8002b88:	20000228 	.word	0x20000228
 8002b8c:	08008b18 	.word	0x08008b18
 8002b90:	2000331c 	.word	0x2000331c
 8002b94:	20003318 	.word	0x20003318
 8002b98:	08008ba8 	.word	0x08008ba8

08002b9c <setCANID>:

//set the can IDs
void setCANID(void){
 8002b9c:	b5b0      	push	{r4, r5, r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	headers_1.StdId = can_id_1; // set CAN ID 1
 8002ba0:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <setCANID+0x194>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <setCANID+0x198>)
 8002ba8:	601a      	str	r2, [r3, #0]
	headers_2.StdId = can_id_2; // set CAN ID 2
 8002baa:	4b63      	ldr	r3, [pc, #396]	; (8002d38 <setCANID+0x19c>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b62      	ldr	r3, [pc, #392]	; (8002d3c <setCANID+0x1a0>)
 8002bb2:	601a      	str	r2, [r3, #0]
	headers_3.StdId = can_id_3; // set CAN ID 3
 8002bb4:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <setCANID+0x1a4>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b62      	ldr	r3, [pc, #392]	; (8002d44 <setCANID+0x1a8>)
 8002bbc:	601a      	str	r2, [r3, #0]

	//Store the CAN IDs
	id_arr[0]=can_id_1;
 8002bbe:	4b5c      	ldr	r3, [pc, #368]	; (8002d30 <setCANID+0x194>)
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <setCANID+0x1ac>)
 8002bc4:	701a      	strb	r2, [r3, #0]
	id_arr[1]=can_id_2;
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	; (8002d38 <setCANID+0x19c>)
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	4b5f      	ldr	r3, [pc, #380]	; (8002d48 <setCANID+0x1ac>)
 8002bcc:	705a      	strb	r2, [r3, #1]
	id_arr[2]=can_id_3;
 8002bce:	4b5c      	ldr	r3, [pc, #368]	; (8002d40 <setCANID+0x1a4>)
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	4b5d      	ldr	r3, [pc, #372]	; (8002d48 <setCANID+0x1ac>)
 8002bd4:	709a      	strb	r2, [r3, #2]
	id_arr[3]=0;
 8002bd6:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <setCANID+0x1ac>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	70da      	strb	r2, [r3, #3]

	storeInFlash();
 8002bdc:	f000 fd1a 	bl	8003614 <storeInFlash>


	//save can IDs in menu
	//can id 1
	memset(temp,0,17); // erase the temp array
 8002be0:	2211      	movs	r2, #17
 8002be2:	2100      	movs	r1, #0
 8002be4:	4859      	ldr	r0, [pc, #356]	; (8002d4c <setCANID+0x1b0>)
 8002be6:	f004 fb33 	bl	8007250 <memset>
	strncpy(temp, "CAN ID ",16);
 8002bea:	2210      	movs	r2, #16
 8002bec:	4958      	ldr	r1, [pc, #352]	; (8002d50 <setCANID+0x1b4>)
 8002bee:	4857      	ldr	r0, [pc, #348]	; (8002d4c <setCANID+0x1b0>)
 8002bf0:	f004 fb9d 	bl	800732e <strncpy>
	strcat(temp, "1:    ");
 8002bf4:	4855      	ldr	r0, [pc, #340]	; (8002d4c <setCANID+0x1b0>)
 8002bf6:	f7fd faeb 	bl	80001d0 <strlen>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <setCANID+0x1b0>)
 8002c00:	4413      	add	r3, r2
 8002c02:	4a54      	ldr	r2, [pc, #336]	; (8002d54 <setCANID+0x1b8>)
 8002c04:	6810      	ldr	r0, [r2, #0]
 8002c06:	6018      	str	r0, [r3, #0]
 8002c08:	8891      	ldrh	r1, [r2, #4]
 8002c0a:	7992      	ldrb	r2, [r2, #6]
 8002c0c:	8099      	strh	r1, [r3, #4]
 8002c0e:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002c10:	2210      	movs	r2, #16
 8002c12:	2100      	movs	r1, #0
 8002c14:	4850      	ldr	r0, [pc, #320]	; (8002d58 <setCANID+0x1bc>)
 8002c16:	f004 fb1b 	bl	8007250 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8002c1a:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <setCANID+0x194>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	494e      	ldr	r1, [pc, #312]	; (8002d5c <setCANID+0x1c0>)
 8002c22:	484d      	ldr	r0, [pc, #308]	; (8002d58 <setCANID+0x1bc>)
 8002c24:	f004 fb1c 	bl	8007260 <siprintf>
	strlcat(temp, char_arr,17);
 8002c28:	2211      	movs	r2, #17
 8002c2a:	494b      	ldr	r1, [pc, #300]	; (8002d58 <setCANID+0x1bc>)
 8002c2c:	4847      	ldr	r0, [pc, #284]	; (8002d4c <setCANID+0x1b0>)
 8002c2e:	f004 fb46 	bl	80072be <strlcat>
	memcpy(can_menu[2],temp,17);
 8002c32:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <setCANID+0x1c4>)
 8002c34:	4a45      	ldr	r2, [pc, #276]	; (8002d4c <setCANID+0x1b0>)
 8002c36:	3322      	adds	r3, #34	; 0x22
 8002c38:	6815      	ldr	r5, [r2, #0]
 8002c3a:	6854      	ldr	r4, [r2, #4]
 8002c3c:	6890      	ldr	r0, [r2, #8]
 8002c3e:	68d1      	ldr	r1, [r2, #12]
 8002c40:	601d      	str	r5, [r3, #0]
 8002c42:	605c      	str	r4, [r3, #4]
 8002c44:	6098      	str	r0, [r3, #8]
 8002c46:	60d9      	str	r1, [r3, #12]
 8002c48:	7c12      	ldrb	r2, [r2, #16]
 8002c4a:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 8002c4c:	2211      	movs	r2, #17
 8002c4e:	2100      	movs	r1, #0
 8002c50:	483e      	ldr	r0, [pc, #248]	; (8002d4c <setCANID+0x1b0>)
 8002c52:	f004 fafd 	bl	8007250 <memset>
	strncpy(temp, "CAN ID ",16);
 8002c56:	2210      	movs	r2, #16
 8002c58:	493d      	ldr	r1, [pc, #244]	; (8002d50 <setCANID+0x1b4>)
 8002c5a:	483c      	ldr	r0, [pc, #240]	; (8002d4c <setCANID+0x1b0>)
 8002c5c:	f004 fb67 	bl	800732e <strncpy>
	strcat(temp, "2:    ");
 8002c60:	483a      	ldr	r0, [pc, #232]	; (8002d4c <setCANID+0x1b0>)
 8002c62:	f7fd fab5 	bl	80001d0 <strlen>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <setCANID+0x1b0>)
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4a3d      	ldr	r2, [pc, #244]	; (8002d64 <setCANID+0x1c8>)
 8002c70:	6810      	ldr	r0, [r2, #0]
 8002c72:	6018      	str	r0, [r3, #0]
 8002c74:	8891      	ldrh	r1, [r2, #4]
 8002c76:	7992      	ldrb	r2, [r2, #6]
 8002c78:	8099      	strh	r1, [r3, #4]
 8002c7a:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002c7c:	2210      	movs	r2, #16
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4835      	ldr	r0, [pc, #212]	; (8002d58 <setCANID+0x1bc>)
 8002c82:	f004 fae5 	bl	8007250 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 8002c86:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <setCANID+0x19c>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4933      	ldr	r1, [pc, #204]	; (8002d5c <setCANID+0x1c0>)
 8002c8e:	4832      	ldr	r0, [pc, #200]	; (8002d58 <setCANID+0x1bc>)
 8002c90:	f004 fae6 	bl	8007260 <siprintf>
	strlcat(temp, char_arr,17);
 8002c94:	2211      	movs	r2, #17
 8002c96:	4930      	ldr	r1, [pc, #192]	; (8002d58 <setCANID+0x1bc>)
 8002c98:	482c      	ldr	r0, [pc, #176]	; (8002d4c <setCANID+0x1b0>)
 8002c9a:	f004 fb10 	bl	80072be <strlcat>
	memcpy(can_menu[3],temp,17);
 8002c9e:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <setCANID+0x1c4>)
 8002ca0:	4a2a      	ldr	r2, [pc, #168]	; (8002d4c <setCANID+0x1b0>)
 8002ca2:	3333      	adds	r3, #51	; 0x33
 8002ca4:	6815      	ldr	r5, [r2, #0]
 8002ca6:	6854      	ldr	r4, [r2, #4]
 8002ca8:	6890      	ldr	r0, [r2, #8]
 8002caa:	68d1      	ldr	r1, [r2, #12]
 8002cac:	601d      	str	r5, [r3, #0]
 8002cae:	605c      	str	r4, [r3, #4]
 8002cb0:	6098      	str	r0, [r3, #8]
 8002cb2:	60d9      	str	r1, [r3, #12]
 8002cb4:	7c12      	ldrb	r2, [r2, #16]
 8002cb6:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 8002cb8:	2211      	movs	r2, #17
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4823      	ldr	r0, [pc, #140]	; (8002d4c <setCANID+0x1b0>)
 8002cbe:	f004 fac7 	bl	8007250 <memset>
	strncpy(temp, "CAN ID ",16);
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	4922      	ldr	r1, [pc, #136]	; (8002d50 <setCANID+0x1b4>)
 8002cc6:	4821      	ldr	r0, [pc, #132]	; (8002d4c <setCANID+0x1b0>)
 8002cc8:	f004 fb31 	bl	800732e <strncpy>
	strcat(temp, "3:    ");
 8002ccc:	481f      	ldr	r0, [pc, #124]	; (8002d4c <setCANID+0x1b0>)
 8002cce:	f7fd fa7f 	bl	80001d0 <strlen>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <setCANID+0x1b0>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <setCANID+0x1cc>)
 8002cdc:	6810      	ldr	r0, [r2, #0]
 8002cde:	6018      	str	r0, [r3, #0]
 8002ce0:	8891      	ldrh	r1, [r2, #4]
 8002ce2:	7992      	ldrb	r2, [r2, #6]
 8002ce4:	8099      	strh	r1, [r3, #4]
 8002ce6:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002ce8:	2210      	movs	r2, #16
 8002cea:	2100      	movs	r1, #0
 8002cec:	481a      	ldr	r0, [pc, #104]	; (8002d58 <setCANID+0x1bc>)
 8002cee:	f004 faaf 	bl	8007250 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <setCANID+0x1a4>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4918      	ldr	r1, [pc, #96]	; (8002d5c <setCANID+0x1c0>)
 8002cfa:	4817      	ldr	r0, [pc, #92]	; (8002d58 <setCANID+0x1bc>)
 8002cfc:	f004 fab0 	bl	8007260 <siprintf>
	strlcat(temp, char_arr,17);
 8002d00:	2211      	movs	r2, #17
 8002d02:	4915      	ldr	r1, [pc, #84]	; (8002d58 <setCANID+0x1bc>)
 8002d04:	4811      	ldr	r0, [pc, #68]	; (8002d4c <setCANID+0x1b0>)
 8002d06:	f004 fada 	bl	80072be <strlcat>
	memcpy(can_menu[4],temp,17);
 8002d0a:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <setCANID+0x1c4>)
 8002d0c:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <setCANID+0x1b0>)
 8002d0e:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8002d12:	4615      	mov	r5, r2
 8002d14:	6828      	ldr	r0, [r5, #0]
 8002d16:	6869      	ldr	r1, [r5, #4]
 8002d18:	68aa      	ldr	r2, [r5, #8]
 8002d1a:	68eb      	ldr	r3, [r5, #12]
 8002d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d1e:	7c2b      	ldrb	r3, [r5, #16]
 8002d20:	7023      	strb	r3, [r4, #0]

	lcd_put_cur(0,0);
 8002d22:	2100      	movs	r1, #0
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fd ffd9 	bl	8000cdc <lcd_put_cur>
}
 8002d2a:	bf00      	nop
 8002d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200032b0 	.word	0x200032b0
 8002d34:	200011f4 	.word	0x200011f4
 8002d38:	200012a0 	.word	0x200012a0
 8002d3c:	200032b4 	.word	0x200032b4
 8002d40:	20000228 	.word	0x20000228
 8002d44:	200011dc 	.word	0x200011dc
 8002d48:	20000234 	.word	0x20000234
 8002d4c:	20001238 	.word	0x20001238
 8002d50:	08008b08 	.word	0x08008b08
 8002d54:	08008b10 	.word	0x08008b10
 8002d58:	2000331c 	.word	0x2000331c
 8002d5c:	08008b18 	.word	0x08008b18
 8002d60:	2000004c 	.word	0x2000004c
 8002d64:	08008b20 	.word	0x08008b20
 8002d68:	08008b28 	.word	0x08008b28

08002d6c <resetCAN>:

//reset CAN Variables
void resetCAN(void){
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	//reset IDs
	can_id_1=1;
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <resetCAN+0x28>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
	can_id_2=2;
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <resetCAN+0x2c>)
 8002d78:	2202      	movs	r2, #2
 8002d7a:	701a      	strb	r2, [r3, #0]
	can_id_3=3;
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <resetCAN+0x30>)
 8002d7e:	2203      	movs	r2, #3
 8002d80:	701a      	strb	r2, [r3, #0]
	setCANID();
 8002d82:	f7ff ff0b 	bl	8002b9c <setCANID>

	//reset baud rate to 1M
	baud_pos=3;
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <resetCAN+0x34>)
 8002d88:	2203      	movs	r2, #3
 8002d8a:	701a      	strb	r2, [r3, #0]
	setBaudRate();
 8002d8c:	f7ff fde8 	bl	8002960 <setBaudRate>
}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	200032b0 	.word	0x200032b0
 8002d98:	200012a0 	.word	0x200012a0
 8002d9c:	20000228 	.word	0x20000228
 8002da0:	2000015f 	.word	0x2000015f

08002da4 <changeDelay>:

//change the number of delays between samples
void changeDelay(uint16_t direction){
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
	num_delays+=direction;//move num_delays in given direction
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <changeDelay+0x5c>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	4413      	add	r3, r2
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <changeDelay+0x5c>)
 8002dbc:	701a      	strb	r2, [r3, #0]

	//display new delay in microseconds
	lcd_put_cur(0,9);
 8002dbe:	2109      	movs	r1, #9
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7fd ff8b 	bl	8000cdc <lcd_put_cur>
	char temp_arr[5];
	sprintf(temp_arr, "%05d", us*(num_delays+1));
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <changeDelay+0x60>)
 8002dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <changeDelay+0x5c>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	fb03 f202 	mul.w	r2, r3, r2
 8002dd8:	f107 0308 	add.w	r3, r7, #8
 8002ddc:	490a      	ldr	r1, [pc, #40]	; (8002e08 <changeDelay+0x64>)
 8002dde:	4618      	mov	r0, r3
 8002de0:	f004 fa3e 	bl	8007260 <siprintf>
	lcd_send_string(temp_arr);
 8002de4:	f107 0308 	add.w	r3, r7, #8
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd ffdc 	bl	8000da6 <lcd_send_string>
	lcd_put_cur(0,13);
 8002dee:	210d      	movs	r1, #13
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd ff73 	bl	8000cdc <lcd_put_cur>
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000216 	.word	0x20000216
 8002e04:	20000160 	.word	0x20000160
 8002e08:	08008b3c 	.word	0x08008b3c

08002e0c <setDelay>:

//change the prescaler to achieve the desired baud rate and reinitialize the can bus
void setDelay(void){
 8002e0c:	b5b0      	push	{r4, r5, r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	//sore the nmber of delays in flash
	storeInFlash();
 8002e10:	f000 fc00 	bl	8003614 <storeInFlash>
	TIM3->ARR = ((num_delays+1)*us) - 1;//change CAN interrupt timer period
 8002e14:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <setDelay+0x90>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <setDelay+0x94>)
 8002e1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e20:	fb02 f303 	mul.w	r3, r2, r3
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <setDelay+0x98>)
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

	//save the delay in microseconds in menu
	memset(temp,0,17); // erase the temp array
 8002e2a:	2211      	movs	r2, #17
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	481e      	ldr	r0, [pc, #120]	; (8002ea8 <setDelay+0x9c>)
 8002e30:	f004 fa0e 	bl	8007250 <memset>
	strncpy(temp, "Delay:   ",16);
 8002e34:	2210      	movs	r2, #16
 8002e36:	491d      	ldr	r1, [pc, #116]	; (8002eac <setDelay+0xa0>)
 8002e38:	481b      	ldr	r0, [pc, #108]	; (8002ea8 <setDelay+0x9c>)
 8002e3a:	f004 fa78 	bl	800732e <strncpy>
	memset(char_arr, 0, 16);
 8002e3e:	2210      	movs	r2, #16
 8002e40:	2100      	movs	r1, #0
 8002e42:	481b      	ldr	r0, [pc, #108]	; (8002eb0 <setDelay+0xa4>)
 8002e44:	f004 fa04 	bl	8007250 <memset>
	sprintf(char_arr, "%05d", us*(num_delays+1));
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <setDelay+0x94>)
 8002e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <setDelay+0x90>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	fb03 f302 	mul.w	r3, r3, r2
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4915      	ldr	r1, [pc, #84]	; (8002eb4 <setDelay+0xa8>)
 8002e5e:	4814      	ldr	r0, [pc, #80]	; (8002eb0 <setDelay+0xa4>)
 8002e60:	f004 f9fe 	bl	8007260 <siprintf>
	strcat(temp, char_arr);
 8002e64:	4912      	ldr	r1, [pc, #72]	; (8002eb0 <setDelay+0xa4>)
 8002e66:	4810      	ldr	r0, [pc, #64]	; (8002ea8 <setDelay+0x9c>)
 8002e68:	f004 fa1a 	bl	80072a0 <strcat>
	strlcat(temp,"us",17);
 8002e6c:	2211      	movs	r2, #17
 8002e6e:	4912      	ldr	r1, [pc, #72]	; (8002eb8 <setDelay+0xac>)
 8002e70:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <setDelay+0x9c>)
 8002e72:	f004 fa24 	bl	80072be <strlcat>
	memcpy(main_menu[3],temp,17);
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <setDelay+0xb0>)
 8002e78:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <setDelay+0x9c>)
 8002e7a:	3333      	adds	r3, #51	; 0x33
 8002e7c:	6815      	ldr	r5, [r2, #0]
 8002e7e:	6854      	ldr	r4, [r2, #4]
 8002e80:	6890      	ldr	r0, [r2, #8]
 8002e82:	68d1      	ldr	r1, [r2, #12]
 8002e84:	601d      	str	r5, [r3, #0]
 8002e86:	605c      	str	r4, [r3, #4]
 8002e88:	6098      	str	r0, [r3, #8]
 8002e8a:	60d9      	str	r1, [r3, #12]
 8002e8c:	7c12      	ldrb	r2, [r2, #16]
 8002e8e:	741a      	strb	r2, [r3, #16]
	lcd_put_cur(0,0);
 8002e90:	2100      	movs	r1, #0
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fd ff22 	bl	8000cdc <lcd_put_cur>
}
 8002e98:	bf00      	nop
 8002e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9c:	20000216 	.word	0x20000216
 8002ea0:	20000160 	.word	0x20000160
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	20001238 	.word	0x20001238
 8002eac:	08008b30 	.word	0x08008b30
 8002eb0:	2000331c 	.word	0x2000331c
 8002eb4:	08008b3c 	.word	0x08008b3c
 8002eb8:	08008b44 	.word	0x08008b44
 8002ebc:	20000008 	.word	0x20000008

08002ec0 <zeroAnalog>:

//sets an offset for the specified analog value
void zeroAnalog(uint8_t analog_id){
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
	if(analog_id==0){//zero all
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10f      	bne.n	8002ef0 <zeroAnalog+0x30>
		analog_1_offset = raw_1;
 8002ed0:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <zeroAnalog+0x70>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <zeroAnalog+0x74>)
 8002ed8:	601a      	str	r2, [r3, #0]
		analog_2_offset = raw_2;
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <zeroAnalog+0x78>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <zeroAnalog+0x7c>)
 8002ee2:	601a      	str	r2, [r3, #0]
		analog_3_offset = raw_3;
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <zeroAnalog+0x80>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <zeroAnalog+0x84>)
 8002eec:	601a      	str	r2, [r3, #0]
		analog_1_offset = raw_1;
	else if(analog_id==2)//zero 2
		analog_2_offset = raw_2;
	else if(analog_id==3)//zero 3
		analog_3_offset = raw_3;
}
 8002eee:	e019      	b.n	8002f24 <zeroAnalog+0x64>
	}else if(analog_id==1)//zero 1
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <zeroAnalog+0x42>
		analog_1_offset = raw_1;
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <zeroAnalog+0x70>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <zeroAnalog+0x74>)
 8002efe:	601a      	str	r2, [r3, #0]
}
 8002f00:	e010      	b.n	8002f24 <zeroAnalog+0x64>
	else if(analog_id==2)//zero 2
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d105      	bne.n	8002f14 <zeroAnalog+0x54>
		analog_2_offset = raw_2;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <zeroAnalog+0x78>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <zeroAnalog+0x7c>)
 8002f10:	601a      	str	r2, [r3, #0]
}
 8002f12:	e007      	b.n	8002f24 <zeroAnalog+0x64>
	else if(analog_id==3)//zero 3
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d104      	bne.n	8002f24 <zeroAnalog+0x64>
		analog_3_offset = raw_3;
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <zeroAnalog+0x80>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <zeroAnalog+0x84>)
 8002f22:	601a      	str	r2, [r3, #0]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	200011d8 	.word	0x200011d8
 8002f34:	200001f4 	.word	0x200001f4
 8002f38:	20003260 	.word	0x20003260
 8002f3c:	200001f8 	.word	0x200001f8
 8002f40:	20000230 	.word	0x20000230
 8002f44:	200001fc 	.word	0x200001fc

08002f48 <resetOffsets>:

//resets all analog offsets to 0 and stores it in flash
void resetOffsets(void){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
	analog_1_offset=0;
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <resetOffsets+0x24>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
	analog_2_offset=0;
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <resetOffsets+0x28>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
	analog_3_offset=0;
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <resetOffsets+0x2c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]

	store_offsets=1;
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <resetOffsets+0x30>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]

	storeInFlash();
 8002f64:	f000 fb56 	bl	8003614 <storeInFlash>
}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200001f4 	.word	0x200001f4
 8002f70:	200001f8 	.word	0x200001f8
 8002f74:	200001fc 	.word	0x200001fc
 8002f78:	20000200 	.word	0x20000200

08002f7c <toggleAnalog>:

//turns the analog device on or off
void toggleAnalog(uint8_t analog_id){
 8002f7c:	b5b0      	push	{r4, r5, r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
	uint8_t enabled=0;//bool to indicate if the change enabled the device
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
	//update state and display it
	lcd_put_cur(0,13);
 8002f8a:	210d      	movs	r1, #13
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fd fea5 	bl	8000cdc <lcd_put_cur>
	if(analog_id==1){
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d117      	bne.n	8002fc8 <toggleAnalog+0x4c>
		if(analog_1_enabled)
 8002f98:	4b79      	ldr	r3, [pc, #484]	; (8003180 <toggleAnalog+0x204>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <toggleAnalog+0x2c>
			lcd_send_string("OFF");
 8002fa0:	4878      	ldr	r0, [pc, #480]	; (8003184 <toggleAnalog+0x208>)
 8002fa2:	f7fd ff00 	bl	8000da6 <lcd_send_string>
 8002fa6:	e004      	b.n	8002fb2 <toggleAnalog+0x36>
		else{
			lcd_send_string(" ON");
 8002fa8:	4877      	ldr	r0, [pc, #476]	; (8003188 <toggleAnalog+0x20c>)
 8002faa:	f7fd fefc 	bl	8000da6 <lcd_send_string>
			enabled=1;}
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
		analog_1_enabled=!analog_1_enabled;
 8002fb2:	4b73      	ldr	r3, [pc, #460]	; (8003180 <toggleAnalog+0x204>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <toggleAnalog+0x204>)
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e034      	b.n	8003032 <toggleAnalog+0xb6>
	}else if(analog_id==2){
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d117      	bne.n	8002ffe <toggleAnalog+0x82>
		if(analog_2_enabled)
 8002fce:	4b6f      	ldr	r3, [pc, #444]	; (800318c <toggleAnalog+0x210>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <toggleAnalog+0x62>
			lcd_send_string("OFF");
 8002fd6:	486b      	ldr	r0, [pc, #428]	; (8003184 <toggleAnalog+0x208>)
 8002fd8:	f7fd fee5 	bl	8000da6 <lcd_send_string>
 8002fdc:	e004      	b.n	8002fe8 <toggleAnalog+0x6c>
		else{
			lcd_send_string(" ON");
 8002fde:	486a      	ldr	r0, [pc, #424]	; (8003188 <toggleAnalog+0x20c>)
 8002fe0:	f7fd fee1 	bl	8000da6 <lcd_send_string>
			enabled=1;}
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
		analog_2_enabled=!analog_2_enabled;
 8002fe8:	4b68      	ldr	r3, [pc, #416]	; (800318c <toggleAnalog+0x210>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b64      	ldr	r3, [pc, #400]	; (800318c <toggleAnalog+0x210>)
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e019      	b.n	8003032 <toggleAnalog+0xb6>
	}else if(analog_id==3){
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d116      	bne.n	8003032 <toggleAnalog+0xb6>
		if(analog_3_enabled)
 8003004:	4b62      	ldr	r3, [pc, #392]	; (8003190 <toggleAnalog+0x214>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <toggleAnalog+0x98>
			lcd_send_string("OFF");
 800300c:	485d      	ldr	r0, [pc, #372]	; (8003184 <toggleAnalog+0x208>)
 800300e:	f7fd feca 	bl	8000da6 <lcd_send_string>
 8003012:	e004      	b.n	800301e <toggleAnalog+0xa2>
		else{
			lcd_send_string(" ON");enabled=1;}
 8003014:	485c      	ldr	r0, [pc, #368]	; (8003188 <toggleAnalog+0x20c>)
 8003016:	f7fd fec6 	bl	8000da6 <lcd_send_string>
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
		analog_3_enabled=!analog_3_enabled;
 800301e:	4b5c      	ldr	r3, [pc, #368]	; (8003190 <toggleAnalog+0x214>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	4b58      	ldr	r3, [pc, #352]	; (8003190 <toggleAnalog+0x214>)
 8003030:	701a      	strb	r2, [r3, #0]
	}

	//store the state in the menu
	if(enabled){
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d03e      	beq.n	80030b6 <toggleAnalog+0x13a>
		memset(temp,0,17); // erase the temp array
 8003038:	2211      	movs	r2, #17
 800303a:	2100      	movs	r1, #0
 800303c:	4855      	ldr	r0, [pc, #340]	; (8003194 <toggleAnalog+0x218>)
 800303e:	f004 f907 	bl	8007250 <memset>
		strncpy(temp, "Analog ",16);
 8003042:	2210      	movs	r2, #16
 8003044:	4954      	ldr	r1, [pc, #336]	; (8003198 <toggleAnalog+0x21c>)
 8003046:	4853      	ldr	r0, [pc, #332]	; (8003194 <toggleAnalog+0x218>)
 8003048:	f004 f971 	bl	800732e <strncpy>
		memset(char_arr, 0, 16);
 800304c:	2210      	movs	r2, #16
 800304e:	2100      	movs	r1, #0
 8003050:	4852      	ldr	r0, [pc, #328]	; (800319c <toggleAnalog+0x220>)
 8003052:	f004 f8fd 	bl	8007250 <memset>
		sprintf(char_arr, "%01d", analog_id);
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	461a      	mov	r2, r3
 800305a:	4951      	ldr	r1, [pc, #324]	; (80031a0 <toggleAnalog+0x224>)
 800305c:	484f      	ldr	r0, [pc, #316]	; (800319c <toggleAnalog+0x220>)
 800305e:	f004 f8ff 	bl	8007260 <siprintf>
		strcat(temp, char_arr);
 8003062:	494e      	ldr	r1, [pc, #312]	; (800319c <toggleAnalog+0x220>)
 8003064:	484b      	ldr	r0, [pc, #300]	; (8003194 <toggleAnalog+0x218>)
 8003066:	f004 f91b 	bl	80072a0 <strcat>
		strcat(temp,":     ");
 800306a:	484a      	ldr	r0, [pc, #296]	; (8003194 <toggleAnalog+0x218>)
 800306c:	f7fd f8b0 	bl	80001d0 <strlen>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	4b47      	ldr	r3, [pc, #284]	; (8003194 <toggleAnalog+0x218>)
 8003076:	4413      	add	r3, r2
 8003078:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <toggleAnalog+0x228>)
 800307a:	6810      	ldr	r0, [r2, #0]
 800307c:	6018      	str	r0, [r3, #0]
 800307e:	8891      	ldrh	r1, [r2, #4]
 8003080:	7992      	ldrb	r2, [r2, #6]
 8003082:	8099      	strh	r1, [r3, #4]
 8003084:	719a      	strb	r2, [r3, #6]
		strlcat(temp, "ON",17);
 8003086:	2211      	movs	r2, #17
 8003088:	4947      	ldr	r1, [pc, #284]	; (80031a8 <toggleAnalog+0x22c>)
 800308a:	4842      	ldr	r0, [pc, #264]	; (8003194 <toggleAnalog+0x218>)
 800308c:	f004 f917 	bl	80072be <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	1d1a      	adds	r2, r3, #4
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	4413      	add	r3, r2
 800309a:	4a44      	ldr	r2, [pc, #272]	; (80031ac <toggleAnalog+0x230>)
 800309c:	4413      	add	r3, r2
 800309e:	4a3d      	ldr	r2, [pc, #244]	; (8003194 <toggleAnalog+0x218>)
 80030a0:	6815      	ldr	r5, [r2, #0]
 80030a2:	6854      	ldr	r4, [r2, #4]
 80030a4:	6890      	ldr	r0, [r2, #8]
 80030a6:	68d1      	ldr	r1, [r2, #12]
 80030a8:	601d      	str	r5, [r3, #0]
 80030aa:	605c      	str	r4, [r3, #4]
 80030ac:	6098      	str	r0, [r3, #8]
 80030ae:	60d9      	str	r1, [r3, #12]
 80030b0:	7c12      	ldrb	r2, [r2, #16]
 80030b2:	741a      	strb	r2, [r3, #16]
 80030b4:	e03b      	b.n	800312e <toggleAnalog+0x1b2>
	}else{
		memset(temp,0,17); // erase the temp array
 80030b6:	2211      	movs	r2, #17
 80030b8:	2100      	movs	r1, #0
 80030ba:	4836      	ldr	r0, [pc, #216]	; (8003194 <toggleAnalog+0x218>)
 80030bc:	f004 f8c8 	bl	8007250 <memset>
		strncpy(temp, "Analog ",16);
 80030c0:	2210      	movs	r2, #16
 80030c2:	4935      	ldr	r1, [pc, #212]	; (8003198 <toggleAnalog+0x21c>)
 80030c4:	4833      	ldr	r0, [pc, #204]	; (8003194 <toggleAnalog+0x218>)
 80030c6:	f004 f932 	bl	800732e <strncpy>
		memset(char_arr, 0, 16);
 80030ca:	2210      	movs	r2, #16
 80030cc:	2100      	movs	r1, #0
 80030ce:	4833      	ldr	r0, [pc, #204]	; (800319c <toggleAnalog+0x220>)
 80030d0:	f004 f8be 	bl	8007250 <memset>
		sprintf(char_arr, "%01d", analog_id);
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	461a      	mov	r2, r3
 80030d8:	4931      	ldr	r1, [pc, #196]	; (80031a0 <toggleAnalog+0x224>)
 80030da:	4830      	ldr	r0, [pc, #192]	; (800319c <toggleAnalog+0x220>)
 80030dc:	f004 f8c0 	bl	8007260 <siprintf>
		strcat(temp, char_arr);
 80030e0:	492e      	ldr	r1, [pc, #184]	; (800319c <toggleAnalog+0x220>)
 80030e2:	482c      	ldr	r0, [pc, #176]	; (8003194 <toggleAnalog+0x218>)
 80030e4:	f004 f8dc 	bl	80072a0 <strcat>
		strcat(temp,":    ");
 80030e8:	482a      	ldr	r0, [pc, #168]	; (8003194 <toggleAnalog+0x218>)
 80030ea:	f7fd f871 	bl	80001d0 <strlen>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b28      	ldr	r3, [pc, #160]	; (8003194 <toggleAnalog+0x218>)
 80030f4:	4413      	add	r3, r2
 80030f6:	4a2e      	ldr	r2, [pc, #184]	; (80031b0 <toggleAnalog+0x234>)
 80030f8:	6810      	ldr	r0, [r2, #0]
 80030fa:	6018      	str	r0, [r3, #0]
 80030fc:	8892      	ldrh	r2, [r2, #4]
 80030fe:	809a      	strh	r2, [r3, #4]
		strlcat(temp, "OFF",17);
 8003100:	2211      	movs	r2, #17
 8003102:	4920      	ldr	r1, [pc, #128]	; (8003184 <toggleAnalog+0x208>)
 8003104:	4823      	ldr	r0, [pc, #140]	; (8003194 <toggleAnalog+0x218>)
 8003106:	f004 f8da 	bl	80072be <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);}
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	1d1a      	adds	r2, r3, #4
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	4413      	add	r3, r2
 8003114:	4a25      	ldr	r2, [pc, #148]	; (80031ac <toggleAnalog+0x230>)
 8003116:	4413      	add	r3, r2
 8003118:	4a1e      	ldr	r2, [pc, #120]	; (8003194 <toggleAnalog+0x218>)
 800311a:	6815      	ldr	r5, [r2, #0]
 800311c:	6854      	ldr	r4, [r2, #4]
 800311e:	6890      	ldr	r0, [r2, #8]
 8003120:	68d1      	ldr	r1, [r2, #12]
 8003122:	601d      	str	r5, [r3, #0]
 8003124:	605c      	str	r4, [r3, #4]
 8003126:	6098      	str	r0, [r3, #8]
 8003128:	60d9      	str	r1, [r3, #12]
 800312a:	7c12      	ldrb	r2, [r2, #16]
 800312c:	741a      	strb	r2, [r3, #16]

	//invert values so the default is on after erasing memory
	analog_enable_arr[0]=!analog_1_enabled;
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <toggleAnalog+0x204>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <toggleAnalog+0x238>)
 8003140:	701a      	strb	r2, [r3, #0]
	analog_enable_arr[1]=!analog_2_enabled;
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <toggleAnalog+0x210>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <toggleAnalog+0x238>)
 8003154:	705a      	strb	r2, [r3, #1]
	analog_enable_arr[2]=!analog_3_enabled;
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <toggleAnalog+0x214>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <toggleAnalog+0x238>)
 8003168:	709a      	strb	r2, [r3, #2]

	storeInFlash();
 800316a:	f000 fa53 	bl	8003614 <storeInFlash>

	//reset cursor on display
	lcd_put_cur(0,0);
 800316e:	2100      	movs	r1, #0
 8003170:	2000      	movs	r0, #0
 8003172:	f7fd fdb3 	bl	8000cdc <lcd_put_cur>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bdb0      	pop	{r4, r5, r7, pc}
 800317e:	bf00      	nop
 8003180:	20000001 	.word	0x20000001
 8003184:	08008bb0 	.word	0x08008bb0
 8003188:	08008bb4 	.word	0x08008bb4
 800318c:	20000002 	.word	0x20000002
 8003190:	20000003 	.word	0x20000003
 8003194:	20001238 	.word	0x20001238
 8003198:	08008bb8 	.word	0x08008bb8
 800319c:	2000331c 	.word	0x2000331c
 80031a0:	08008bc0 	.word	0x08008bc0
 80031a4:	08008bc8 	.word	0x08008bc8
 80031a8:	08008bd0 	.word	0x08008bd0
 80031ac:	200000b4 	.word	0x200000b4
 80031b0:	08008bd4 	.word	0x08008bd4
 80031b4:	20003268 	.word	0x20003268

080031b8 <displayValues>:

//display the analog values on the display
void displayValues(void){
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	lcd_put_cur(0,0);
 80031bc:	2100      	movs	r1, #0
 80031be:	2000      	movs	r0, #0
 80031c0:	f7fd fd8c 	bl	8000cdc <lcd_put_cur>
	if(analog_1_enabled&&analog_2_enabled&&analog_3_enabled){//all 3 devices are enabled
 80031c4:	4bac      	ldr	r3, [pc, #688]	; (8003478 <displayValues+0x2c0>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80a5 	beq.w	8003318 <displayValues+0x160>
 80031ce:	4bab      	ldr	r3, [pc, #684]	; (800347c <displayValues+0x2c4>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f000 80a0 	beq.w	8003318 <displayValues+0x160>
 80031d8:	4ba9      	ldr	r3, [pc, #676]	; (8003480 <displayValues+0x2c8>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 809b 	beq.w	8003318 <displayValues+0x160>
		if(display_scroll==0){//position 1
 80031e2:	4ba8      	ldr	r3, [pc, #672]	; (8003484 <displayValues+0x2cc>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d130      	bne.n	800324c <displayValues+0x94>
			lcd_send_string("Analog 1:       ");
 80031ea:	48a7      	ldr	r0, [pc, #668]	; (8003488 <displayValues+0x2d0>)
 80031ec:	f7fd fddb 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(0,11);
 80031f0:	210b      	movs	r1, #11
 80031f2:	2000      	movs	r0, #0
 80031f4:	f7fd fd72 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 80031f8:	2210      	movs	r2, #16
 80031fa:	2100      	movs	r1, #0
 80031fc:	48a3      	ldr	r0, [pc, #652]	; (800348c <displayValues+0x2d4>)
 80031fe:	f004 f827 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 8003202:	4ba3      	ldr	r3, [pc, #652]	; (8003490 <displayValues+0x2d8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	49a2      	ldr	r1, [pc, #648]	; (8003494 <displayValues+0x2dc>)
 800320a:	48a0      	ldr	r0, [pc, #640]	; (800348c <displayValues+0x2d4>)
 800320c:	f004 f828 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 8003210:	489e      	ldr	r0, [pc, #632]	; (800348c <displayValues+0x2d4>)
 8003212:	f7fd fdc8 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(1,0);
 8003216:	2100      	movs	r1, #0
 8003218:	2001      	movs	r0, #1
 800321a:	f7fd fd5f 	bl	8000cdc <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 800321e:	489e      	ldr	r0, [pc, #632]	; (8003498 <displayValues+0x2e0>)
 8003220:	f7fd fdc1 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(1,11);
 8003224:	210b      	movs	r1, #11
 8003226:	2001      	movs	r0, #1
 8003228:	f7fd fd58 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 800322c:	2210      	movs	r2, #16
 800322e:	2100      	movs	r1, #0
 8003230:	4896      	ldr	r0, [pc, #600]	; (800348c <displayValues+0x2d4>)
 8003232:	f004 f80d 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 8003236:	4b99      	ldr	r3, [pc, #612]	; (800349c <displayValues+0x2e4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	4995      	ldr	r1, [pc, #596]	; (8003494 <displayValues+0x2dc>)
 800323e:	4893      	ldr	r0, [pc, #588]	; (800348c <displayValues+0x2d4>)
 8003240:	f004 f80e 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 8003244:	4891      	ldr	r0, [pc, #580]	; (800348c <displayValues+0x2d4>)
 8003246:	f7fd fdae 	bl	8000da6 <lcd_send_string>
		if(display_scroll==0){//position 1
 800324a:	e112      	b.n	8003472 <displayValues+0x2ba>
		}else if(display_scroll==1){//position 2
 800324c:	4b8d      	ldr	r3, [pc, #564]	; (8003484 <displayValues+0x2cc>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d130      	bne.n	80032b6 <displayValues+0xfe>
			lcd_send_string("Analog 2:       ");
 8003254:	4890      	ldr	r0, [pc, #576]	; (8003498 <displayValues+0x2e0>)
 8003256:	f7fd fda6 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(0,11);
 800325a:	210b      	movs	r1, #11
 800325c:	2000      	movs	r0, #0
 800325e:	f7fd fd3d 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003262:	2210      	movs	r2, #16
 8003264:	2100      	movs	r1, #0
 8003266:	4889      	ldr	r0, [pc, #548]	; (800348c <displayValues+0x2d4>)
 8003268:	f003 fff2 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 800326c:	4b8b      	ldr	r3, [pc, #556]	; (800349c <displayValues+0x2e4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	4988      	ldr	r1, [pc, #544]	; (8003494 <displayValues+0x2dc>)
 8003274:	4885      	ldr	r0, [pc, #532]	; (800348c <displayValues+0x2d4>)
 8003276:	f003 fff3 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 800327a:	4884      	ldr	r0, [pc, #528]	; (800348c <displayValues+0x2d4>)
 800327c:	f7fd fd93 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(1,0);
 8003280:	2100      	movs	r1, #0
 8003282:	2001      	movs	r0, #1
 8003284:	f7fd fd2a 	bl	8000cdc <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 8003288:	4885      	ldr	r0, [pc, #532]	; (80034a0 <displayValues+0x2e8>)
 800328a:	f7fd fd8c 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(1,11);
 800328e:	210b      	movs	r1, #11
 8003290:	2001      	movs	r0, #1
 8003292:	f7fd fd23 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003296:	2210      	movs	r2, #16
 8003298:	2100      	movs	r1, #0
 800329a:	487c      	ldr	r0, [pc, #496]	; (800348c <displayValues+0x2d4>)
 800329c:	f003 ffd8 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 80032a0:	4b80      	ldr	r3, [pc, #512]	; (80034a4 <displayValues+0x2ec>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	497b      	ldr	r1, [pc, #492]	; (8003494 <displayValues+0x2dc>)
 80032a8:	4878      	ldr	r0, [pc, #480]	; (800348c <displayValues+0x2d4>)
 80032aa:	f003 ffd9 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 80032ae:	4877      	ldr	r0, [pc, #476]	; (800348c <displayValues+0x2d4>)
 80032b0:	f7fd fd79 	bl	8000da6 <lcd_send_string>
		if(display_scroll==0){//position 1
 80032b4:	e0dd      	b.n	8003472 <displayValues+0x2ba>
		}else {//position 3
			lcd_send_string("Analog 3:       ");
 80032b6:	487a      	ldr	r0, [pc, #488]	; (80034a0 <displayValues+0x2e8>)
 80032b8:	f7fd fd75 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(0,11);
 80032bc:	210b      	movs	r1, #11
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd fd0c 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 80032c4:	2210      	movs	r2, #16
 80032c6:	2100      	movs	r1, #0
 80032c8:	4870      	ldr	r0, [pc, #448]	; (800348c <displayValues+0x2d4>)
 80032ca:	f003 ffc1 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 80032ce:	4b75      	ldr	r3, [pc, #468]	; (80034a4 <displayValues+0x2ec>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	496f      	ldr	r1, [pc, #444]	; (8003494 <displayValues+0x2dc>)
 80032d6:	486d      	ldr	r0, [pc, #436]	; (800348c <displayValues+0x2d4>)
 80032d8:	f003 ffc2 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 80032dc:	486b      	ldr	r0, [pc, #428]	; (800348c <displayValues+0x2d4>)
 80032de:	f7fd fd62 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(1,0);
 80032e2:	2100      	movs	r1, #0
 80032e4:	2001      	movs	r0, #1
 80032e6:	f7fd fcf9 	bl	8000cdc <lcd_put_cur>
			lcd_send_string("Analog 1:       ");
 80032ea:	4867      	ldr	r0, [pc, #412]	; (8003488 <displayValues+0x2d0>)
 80032ec:	f7fd fd5b 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(1,11);
 80032f0:	210b      	movs	r1, #11
 80032f2:	2001      	movs	r0, #1
 80032f4:	f7fd fcf2 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 80032f8:	2210      	movs	r2, #16
 80032fa:	2100      	movs	r1, #0
 80032fc:	4863      	ldr	r0, [pc, #396]	; (800348c <displayValues+0x2d4>)
 80032fe:	f003 ffa7 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 8003302:	4b63      	ldr	r3, [pc, #396]	; (8003490 <displayValues+0x2d8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	4962      	ldr	r1, [pc, #392]	; (8003494 <displayValues+0x2dc>)
 800330a:	4860      	ldr	r0, [pc, #384]	; (800348c <displayValues+0x2d4>)
 800330c:	f003 ffa8 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 8003310:	485e      	ldr	r0, [pc, #376]	; (800348c <displayValues+0x2d4>)
 8003312:	f7fd fd48 	bl	8000da6 <lcd_send_string>
		if(display_scroll==0){//position 1
 8003316:	e0ac      	b.n	8003472 <displayValues+0x2ba>
		}

	}else{//less than 3 are enabled
		if(analog_1_enabled){//display device 1 on first line
 8003318:	4b57      	ldr	r3, [pc, #348]	; (8003478 <displayValues+0x2c0>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d016      	beq.n	800334e <displayValues+0x196>
			lcd_send_string("Analog 1:       ");
 8003320:	4859      	ldr	r0, [pc, #356]	; (8003488 <displayValues+0x2d0>)
 8003322:	f7fd fd40 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(0,11);
 8003326:	210b      	movs	r1, #11
 8003328:	2000      	movs	r0, #0
 800332a:	f7fd fcd7 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 800332e:	2210      	movs	r2, #16
 8003330:	2100      	movs	r1, #0
 8003332:	4856      	ldr	r0, [pc, #344]	; (800348c <displayValues+0x2d4>)
 8003334:	f003 ff8c 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 8003338:	4b55      	ldr	r3, [pc, #340]	; (8003490 <displayValues+0x2d8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	4955      	ldr	r1, [pc, #340]	; (8003494 <displayValues+0x2dc>)
 8003340:	4852      	ldr	r0, [pc, #328]	; (800348c <displayValues+0x2d4>)
 8003342:	f003 ff8d 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 8003346:	4851      	ldr	r0, [pc, #324]	; (800348c <displayValues+0x2d4>)
 8003348:	f7fd fd2d 	bl	8000da6 <lcd_send_string>
 800334c:	e043      	b.n	80033d6 <displayValues+0x21e>
		} else if(analog_2_enabled){//display device 2 on first line
 800334e:	4b4b      	ldr	r3, [pc, #300]	; (800347c <displayValues+0x2c4>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <displayValues+0x1cc>
			lcd_send_string("Analog 2:       ");
 8003356:	4850      	ldr	r0, [pc, #320]	; (8003498 <displayValues+0x2e0>)
 8003358:	f7fd fd25 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(0,11);
 800335c:	210b      	movs	r1, #11
 800335e:	2000      	movs	r0, #0
 8003360:	f7fd fcbc 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003364:	2210      	movs	r2, #16
 8003366:	2100      	movs	r1, #0
 8003368:	4848      	ldr	r0, [pc, #288]	; (800348c <displayValues+0x2d4>)
 800336a:	f003 ff71 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 800336e:	4b4b      	ldr	r3, [pc, #300]	; (800349c <displayValues+0x2e4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	4947      	ldr	r1, [pc, #284]	; (8003494 <displayValues+0x2dc>)
 8003376:	4845      	ldr	r0, [pc, #276]	; (800348c <displayValues+0x2d4>)
 8003378:	f003 ff72 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 800337c:	4843      	ldr	r0, [pc, #268]	; (800348c <displayValues+0x2d4>)
 800337e:	f7fd fd12 	bl	8000da6 <lcd_send_string>
 8003382:	e028      	b.n	80033d6 <displayValues+0x21e>
		} else if(analog_3_enabled){//display device 3 on first line
 8003384:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <displayValues+0x2c8>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d016      	beq.n	80033ba <displayValues+0x202>
			lcd_send_string("Analog 3:       ");
 800338c:	4844      	ldr	r0, [pc, #272]	; (80034a0 <displayValues+0x2e8>)
 800338e:	f7fd fd0a 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(0,11);
 8003392:	210b      	movs	r1, #11
 8003394:	2000      	movs	r0, #0
 8003396:	f7fd fca1 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 800339a:	2210      	movs	r2, #16
 800339c:	2100      	movs	r1, #0
 800339e:	483b      	ldr	r0, [pc, #236]	; (800348c <displayValues+0x2d4>)
 80033a0:	f003 ff56 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 80033a4:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <displayValues+0x2ec>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	493a      	ldr	r1, [pc, #232]	; (8003494 <displayValues+0x2dc>)
 80033ac:	4837      	ldr	r0, [pc, #220]	; (800348c <displayValues+0x2d4>)
 80033ae:	f003 ff57 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 80033b2:	4836      	ldr	r0, [pc, #216]	; (800348c <displayValues+0x2d4>)
 80033b4:	f7fd fcf7 	bl	8000da6 <lcd_send_string>
 80033b8:	e00d      	b.n	80033d6 <displayValues+0x21e>
		} else{//display no devices enabled
			lcd_send_string("No Devices      ");
 80033ba:	483b      	ldr	r0, [pc, #236]	; (80034a8 <displayValues+0x2f0>)
 80033bc:	f7fd fcf3 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(1,0);
 80033c0:	2100      	movs	r1, #0
 80033c2:	2001      	movs	r0, #1
 80033c4:	f7fd fc8a 	bl	8000cdc <lcd_put_cur>
			lcd_send_string("Enabled         ");
 80033c8:	4838      	ldr	r0, [pc, #224]	; (80034ac <displayValues+0x2f4>)
 80033ca:	f7fd fcec 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(1,15);
 80033ce:	210f      	movs	r1, #15
 80033d0:	2001      	movs	r0, #1
 80033d2:	f7fd fc83 	bl	8000cdc <lcd_put_cur>
		}

		if(analog_1_enabled&&analog_2_enabled){//display device 2 on second line
 80033d6:	4b28      	ldr	r3, [pc, #160]	; (8003478 <displayValues+0x2c0>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01e      	beq.n	800341c <displayValues+0x264>
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <displayValues+0x2c4>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01a      	beq.n	800341c <displayValues+0x264>
			lcd_put_cur(1,0);
 80033e6:	2100      	movs	r1, #0
 80033e8:	2001      	movs	r0, #1
 80033ea:	f7fd fc77 	bl	8000cdc <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 80033ee:	482a      	ldr	r0, [pc, #168]	; (8003498 <displayValues+0x2e0>)
 80033f0:	f7fd fcd9 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(1,11);
 80033f4:	210b      	movs	r1, #11
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7fd fc70 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 80033fc:	2210      	movs	r2, #16
 80033fe:	2100      	movs	r1, #0
 8003400:	4822      	ldr	r0, [pc, #136]	; (800348c <displayValues+0x2d4>)
 8003402:	f003 ff25 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <displayValues+0x2e4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	4921      	ldr	r1, [pc, #132]	; (8003494 <displayValues+0x2dc>)
 800340e:	481f      	ldr	r0, [pc, #124]	; (800348c <displayValues+0x2d4>)
 8003410:	f003 ff26 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 8003414:	481d      	ldr	r0, [pc, #116]	; (800348c <displayValues+0x2d4>)
 8003416:	f7fd fcc6 	bl	8000da6 <lcd_send_string>
 800341a:	e02a      	b.n	8003472 <displayValues+0x2ba>
		} else if((analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled)){//display device 3 on second line
 800341c:	4b16      	ldr	r3, [pc, #88]	; (8003478 <displayValues+0x2c0>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <displayValues+0x274>
 8003424:	4b16      	ldr	r3, [pc, #88]	; (8003480 <displayValues+0x2c8>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <displayValues+0x284>
 800342c:	4b13      	ldr	r3, [pc, #76]	; (800347c <displayValues+0x2c4>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01e      	beq.n	8003472 <displayValues+0x2ba>
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <displayValues+0x2c8>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01a      	beq.n	8003472 <displayValues+0x2ba>
			lcd_put_cur(1,0);
 800343c:	2100      	movs	r1, #0
 800343e:	2001      	movs	r0, #1
 8003440:	f7fd fc4c 	bl	8000cdc <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 8003444:	4816      	ldr	r0, [pc, #88]	; (80034a0 <displayValues+0x2e8>)
 8003446:	f7fd fcae 	bl	8000da6 <lcd_send_string>
			lcd_put_cur(1,11);
 800344a:	210b      	movs	r1, #11
 800344c:	2001      	movs	r0, #1
 800344e:	f7fd fc45 	bl	8000cdc <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003452:	2210      	movs	r2, #16
 8003454:	2100      	movs	r1, #0
 8003456:	480d      	ldr	r0, [pc, #52]	; (800348c <displayValues+0x2d4>)
 8003458:	f003 fefa 	bl	8007250 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <displayValues+0x2ec>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	490c      	ldr	r1, [pc, #48]	; (8003494 <displayValues+0x2dc>)
 8003464:	4809      	ldr	r0, [pc, #36]	; (800348c <displayValues+0x2d4>)
 8003466:	f003 fefb 	bl	8007260 <siprintf>
			lcd_send_string(char_arr);
 800346a:	4808      	ldr	r0, [pc, #32]	; (800348c <displayValues+0x2d4>)
 800346c:	f7fd fc9b 	bl	8000da6 <lcd_send_string>
		}
	}
}
 8003470:	e7ff      	b.n	8003472 <displayValues+0x2ba>
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000001 	.word	0x20000001
 800347c:	20000002 	.word	0x20000002
 8003480:	20000003 	.word	0x20000003
 8003484:	20000212 	.word	0x20000212
 8003488:	08008bdc 	.word	0x08008bdc
 800348c:	2000331c 	.word	0x2000331c
 8003490:	20003264 	.word	0x20003264
 8003494:	08008b3c 	.word	0x08008b3c
 8003498:	08008bf0 	.word	0x08008bf0
 800349c:	2000022c 	.word	0x2000022c
 80034a0:	08008c04 	.word	0x08008c04
 80034a4:	20001234 	.word	0x20001234
 80034a8:	08008c18 	.word	0x08008c18
 80034ac:	08008c2c 	.word	0x08008c2c

080034b0 <bytesToWord>:


//convert a 4 byte array to a word (unsigned long int)
uint32_t bytesToWord(uint8_t* arr) {
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	uint32_t value = arr[0] & 0xFF;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
	value |= (arr[1] << 8) & 0xFFFF;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3301      	adds	r3, #1
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
	value |= (arr[2] << 16) & 0xFFFFFF;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3302      	adds	r3, #2
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
	value |= (arr[3] << 24) & 0xFFFFFFFF;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3303      	adds	r3, #3
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	061b      	lsls	r3, r3, #24
 80034e8:	461a      	mov	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
	return value;
 80034f0:	68fb      	ldr	r3, [r7, #12]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <wordToBytes>:

//convert a word (unsigned long int) to a 4 byte array
uint8_t* wordToBytes(uint32_t value){
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	byte_arr[3] = (value >> 24) & 0xFF;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	0e1b      	lsrs	r3, r3, #24
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <wordToBytes+0x3c>)
 8003510:	70da      	strb	r2, [r3, #3]
	byte_arr[2] = (value >> 16) & 0xFF;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	b2da      	uxtb	r2, r3
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <wordToBytes+0x3c>)
 800351a:	709a      	strb	r2, [r3, #2]
	byte_arr[1] = (value >> 8) & 0xFF;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <wordToBytes+0x3c>)
 8003524:	705a      	strb	r2, [r3, #1]
	byte_arr[0] = value & 0xFF;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <wordToBytes+0x3c>)
 800352c:	701a      	strb	r2, [r3, #0]
	return byte_arr;
 800352e:	4b03      	ldr	r3, [pc, #12]	; (800353c <wordToBytes+0x3c>)
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	20003370 	.word	0x20003370

08003540 <calibrateSDADC>:

//calibrate the given sdadc for the given channel
void calibrateSDADC(SDADC_HandleTypeDef* adc, uint32_t channel){
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
	//Display Calibrating
	lcd_put_cur(0,0);
 800354a:	2100      	movs	r1, #0
 800354c:	2000      	movs	r0, #0
 800354e:	f7fd fbc5 	bl	8000cdc <lcd_put_cur>
	lcd_send_string("Calibrating ADC ");
 8003552:	482b      	ldr	r0, [pc, #172]	; (8003600 <calibrateSDADC+0xc0>)
 8003554:	f7fd fc27 	bl	8000da6 <lcd_send_string>
	lcd_put_cur(1,0);
 8003558:	2100      	movs	r1, #0
 800355a:	2001      	movs	r0, #1
 800355c:	f7fd fbbe 	bl	8000cdc <lcd_put_cur>
	lcd_send_string("                ");
 8003560:	4828      	ldr	r0, [pc, #160]	; (8003604 <calibrateSDADC+0xc4>)
 8003562:	f7fd fc20 	bl	8000da6 <lcd_send_string>

	//Run Calibration Sequence
	HAL_SDADC_AssociateChannelConfig(adc, channel, SDADC_CONF_INDEX_0);
 8003566:	2200      	movs	r2, #0
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f002 fedc 	bl	8006328 <HAL_SDADC_AssociateChannelConfig>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_OFF);
 8003570:	2200      	movs	r2, #0
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f002 ff27 	bl	80063c8 <HAL_SDADC_ConfigChannel>
	HAL_SDADC_CalibrationStart(adc, SDADC_CALIBRATION_SEQ_1);
 800357a:	2100      	movs	r1, #0
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f002 ff67 	bl	8006450 <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(adc, HAL_MAX_DELAY);
 8003582:	f04f 31ff 	mov.w	r1, #4294967295
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f002 ffa2 	bl	80064d0 <HAL_SDADC_PollForCalibEvent>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_ON);
 800358c:	2201      	movs	r2, #1
 800358e:	6839      	ldr	r1, [r7, #0]
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f002 ff19 	bl	80063c8 <HAL_SDADC_ConfigChannel>

	//Display Menu
	lcd_put_cur(0,0);
 8003596:	2100      	movs	r1, #0
 8003598:	2000      	movs	r0, #0
 800359a:	f7fd fb9f 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 800359e:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <calibrateSDADC+0xc8>)
 80035a0:	f993 3000 	ldrsb.w	r3, [r3]
 80035a4:	461a      	mov	r2, r3
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4413      	add	r3, r2
 80035ac:	4a17      	ldr	r2, [pc, #92]	; (800360c <calibrateSDADC+0xcc>)
 80035ae:	4413      	add	r3, r2
 80035b0:	2210      	movs	r2, #16
 80035b2:	4619      	mov	r1, r3
 80035b4:	4816      	ldr	r0, [pc, #88]	; (8003610 <calibrateSDADC+0xd0>)
 80035b6:	f003 feba 	bl	800732e <strncpy>
 80035ba:	4603      	mov	r3, r0
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fd fbf2 	bl	8000da6 <lcd_send_string>
	lcd_put_cur(1,0);
 80035c2:	2100      	movs	r1, #0
 80035c4:	2001      	movs	r0, #1
 80035c6:	f7fd fb89 	bl	8000cdc <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <calibrateSDADC+0xc8>)
 80035cc:	f993 3000 	ldrsb.w	r3, [r3]
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4413      	add	r3, r2
 80035d8:	4a0c      	ldr	r2, [pc, #48]	; (800360c <calibrateSDADC+0xcc>)
 80035da:	4413      	add	r3, r2
 80035dc:	2210      	movs	r2, #16
 80035de:	4619      	mov	r1, r3
 80035e0:	480b      	ldr	r0, [pc, #44]	; (8003610 <calibrateSDADC+0xd0>)
 80035e2:	f003 fea4 	bl	800732e <strncpy>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fbdc 	bl	8000da6 <lcd_send_string>
	lcd_put_cur(0,0);
 80035ee:	2100      	movs	r1, #0
 80035f0:	2000      	movs	r0, #0
 80035f2:	f7fd fb73 	bl	8000cdc <lcd_put_cur>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	08008c40 	.word	0x08008c40
 8003604:	08008c54 	.word	0x08008c54
 8003608:	20000213 	.word	0x20000213
 800360c:	20000008 	.word	0x20000008
 8003610:	20001238 	.word	0x20001238

08003614 <storeInFlash>:

//store all saved values in flash memory
void storeInFlash(void){
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
	//Unlock the Flash Program Erase controller
	HAL_FLASH_Unlock();
 800361a:	f001 f82f 	bl	800467c <HAL_FLASH_Unlock>

	//Erase page
	FLASH_EraseInitTypeDef eraseParams;
	eraseParams.TypeErase = FLASH_TYPEERASE_PAGES;
 800361e:	2300      	movs	r3, #0
 8003620:	607b      	str	r3, [r7, #4]
	eraseParams.PageAddress = 0x0800F800;
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <storeInFlash+0x108>)
 8003624:	60bb      	str	r3, [r7, #8]
	eraseParams.NbPages=1;
 8003626:	2301      	movs	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
	uint32_t eraseError=0;
 800362a:	2300      	movs	r3, #0
 800362c:	603b      	str	r3, [r7, #0]
	HAL_FLASHEx_Erase(&eraseParams, &eraseError);
 800362e:	463a      	mov	r2, r7
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f001 f8e5 	bl	8004804 <HAL_FLASHEx_Erase>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800363a:	f04f 30ff 	mov.w	r0, #4294967295
 800363e:	f001 f86f 	bl	8004720 <FLASH_WaitForLastOperation>


	//Store the CAN IDs
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F800, bytesToWord(id_arr));//store can ids
 8003642:	4837      	ldr	r0, [pc, #220]	; (8003720 <storeInFlash+0x10c>)
 8003644:	f7ff ff34 	bl	80034b0 <bytesToWord>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	4932      	ldr	r1, [pc, #200]	; (800371c <storeInFlash+0x108>)
 8003652:	2002      	movs	r0, #2
 8003654:	f000 ffa2 	bl	800459c <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f001 f860 	bl	8004720 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F804, (uint32_t)baud_pos); //store baud rate
 8003660:	4b30      	ldr	r3, [pc, #192]	; (8003724 <storeInFlash+0x110>)
 8003662:	f993 3000 	ldrsb.w	r3, [r3]
 8003666:	461a      	mov	r2, r3
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	492e      	ldr	r1, [pc, #184]	; (8003728 <storeInFlash+0x114>)
 800366e:	2002      	movs	r0, #2
 8003670:	f000 ff94 	bl	800459c <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	f001 f852 	bl	8004720 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F808, (uint32_t)num_delays); // store number of delays
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <storeInFlash+0x118>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	492a      	ldr	r1, [pc, #168]	; (8003730 <storeInFlash+0x11c>)
 8003688:	2002      	movs	r0, #2
 800368a:	f000 ff87 	bl	800459c <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800368e:	f04f 30ff 	mov.w	r0, #4294967295
 8003692:	f001 f845 	bl	8004720 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F80C, bytesToWord(analog_enable_arr)); // store device enable bools
 8003696:	4827      	ldr	r0, [pc, #156]	; (8003734 <storeInFlash+0x120>)
 8003698:	f7ff ff0a 	bl	80034b0 <bytesToWord>
 800369c:	4603      	mov	r3, r0
 800369e:	461a      	mov	r2, r3
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	4924      	ldr	r1, [pc, #144]	; (8003738 <storeInFlash+0x124>)
 80036a6:	2002      	movs	r0, #2
 80036a8:	f000 ff78 	bl	800459c <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295
 80036b0:	f001 f836 	bl	8004720 <FLASH_WaitForLastOperation>
	if(store_offsets){
 80036b4:	4b21      	ldr	r3, [pc, #132]	; (800373c <storeInFlash+0x128>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d029      	beq.n	8003710 <storeInFlash+0xfc>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F810, analog_1_offset); // store analog 1 offset
 80036bc:	4b20      	ldr	r3, [pc, #128]	; (8003740 <storeInFlash+0x12c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	491f      	ldr	r1, [pc, #124]	; (8003744 <storeInFlash+0x130>)
 80036c8:	2002      	movs	r0, #2
 80036ca:	f000 ff67 	bl	800459c <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80036ce:	f04f 30ff 	mov.w	r0, #4294967295
 80036d2:	f001 f825 	bl	8004720 <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F814, analog_2_offset); // store analog 2 offset
 80036d6:	4b1c      	ldr	r3, [pc, #112]	; (8003748 <storeInFlash+0x134>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	491a      	ldr	r1, [pc, #104]	; (800374c <storeInFlash+0x138>)
 80036e2:	2002      	movs	r0, #2
 80036e4:	f000 ff5a 	bl	800459c <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	f001 f818 	bl	8004720 <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F818, analog_3_offset); // store analog 3 offset
 80036f0:	4b17      	ldr	r3, [pc, #92]	; (8003750 <storeInFlash+0x13c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	4916      	ldr	r1, [pc, #88]	; (8003754 <storeInFlash+0x140>)
 80036fc:	2002      	movs	r0, #2
 80036fe:	f000 ff4d 	bl	800459c <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003702:	f04f 30ff 	mov.w	r0, #4294967295
 8003706:	f001 f80b 	bl	8004720 <FLASH_WaitForLastOperation>
		store_offsets=0;
 800370a:	4b0c      	ldr	r3, [pc, #48]	; (800373c <storeInFlash+0x128>)
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
	}


	//Lock the Flash Program Erase controller
	HAL_FLASH_Lock();
 8003710:	f000 ffda 	bl	80046c8 <HAL_FLASH_Lock>
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	0800f800 	.word	0x0800f800
 8003720:	20000234 	.word	0x20000234
 8003724:	2000015f 	.word	0x2000015f
 8003728:	0800f804 	.word	0x0800f804
 800372c:	20000216 	.word	0x20000216
 8003730:	0800f808 	.word	0x0800f808
 8003734:	20003268 	.word	0x20003268
 8003738:	0800f80c 	.word	0x0800f80c
 800373c:	20000200 	.word	0x20000200
 8003740:	200001f4 	.word	0x200001f4
 8003744:	0800f810 	.word	0x0800f810
 8003748:	200001f8 	.word	0x200001f8
 800374c:	0800f814 	.word	0x0800f814
 8003750:	200001fc 	.word	0x200001fc
 8003754:	0800f818 	.word	0x0800f818

08003758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800375c:	b672      	cpsid	i
}
 800375e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003760:	e7fe      	b.n	8003760 <Error_Handler+0x8>
	...

08003764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_MspInit+0x44>)
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <HAL_MspInit+0x44>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6193      	str	r3, [r2, #24]
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_MspInit+0x44>)
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_MspInit+0x44>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <HAL_MspInit+0x44>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378c:	61d3      	str	r3, [r2, #28]
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_MspInit+0x44>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000

080037ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a18      	ldr	r2, [pc, #96]	; (800382c <HAL_CAN_MspInit+0x80>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d129      	bne.n	8003822 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_CAN_MspInit+0x84>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	4a17      	ldr	r2, [pc, #92]	; (8003830 <HAL_CAN_MspInit+0x84>)
 80037d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037d8:	61d3      	str	r3, [r2, #28]
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_CAN_MspInit+0x84>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	4b12      	ldr	r3, [pc, #72]	; (8003830 <HAL_CAN_MspInit+0x84>)
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	4a11      	ldr	r2, [pc, #68]	; (8003830 <HAL_CAN_MspInit+0x84>)
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	6153      	str	r3, [r2, #20]
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_CAN_MspInit+0x84>)
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80037fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003804:	2302      	movs	r3, #2
 8003806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800380c:	2303      	movs	r3, #3
 800380e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003810:	2309      	movs	r3, #9
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003814:	f107 0314 	add.w	r3, r7, #20
 8003818:	4619      	mov	r1, r3
 800381a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800381e:	f001 f895 	bl	800494c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003822:	bf00      	nop
 8003824:	3728      	adds	r7, #40	; 0x28
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40006400 	.word	0x40006400
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08e      	sub	sp, #56	; 0x38
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a4c      	ldr	r2, [pc, #304]	; (8003984 <HAL_SDADC_MspInit+0x150>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d12d      	bne.n	80038b2 <HAL_SDADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8003856:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	4a4b      	ldr	r2, [pc, #300]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 800385c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003860:	6193      	str	r3, [r2, #24]
 8003862:	4b49      	ldr	r3, [pc, #292]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800386e:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	4a45      	ldr	r2, [pc, #276]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 8003874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003878:	6153      	str	r3, [r2, #20]
 800387a:	4b43      	ldr	r3, [pc, #268]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	69fb      	ldr	r3, [r7, #28]
    /**SDADC1 GPIO Configuration
    PE8     ------> SDADC1_AIN8P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800388c:	2303      	movs	r3, #3
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003898:	4619      	mov	r1, r3
 800389a:	483c      	ldr	r0, [pc, #240]	; (800398c <HAL_SDADC_MspInit+0x158>)
 800389c:	f001 f856 	bl	800494c <HAL_GPIO_Init>

    /* SDADC1 interrupt Init */
    HAL_NVIC_SetPriority(SDADC1_IRQn, 1, 0);
 80038a0:	2200      	movs	r2, #0
 80038a2:	2101      	movs	r1, #1
 80038a4:	203d      	movs	r0, #61	; 0x3d
 80038a6:	f000 fe42 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 80038aa:	203d      	movs	r0, #61	; 0x3d
 80038ac:	f000 fe5b 	bl	8004566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 80038b0:	e064      	b.n	800397c <HAL_SDADC_MspInit+0x148>
  else if(hsdadc->Instance==SDADC2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a36      	ldr	r2, [pc, #216]	; (8003990 <HAL_SDADC_MspInit+0x15c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d12d      	bne.n	8003918 <HAL_SDADC_MspInit+0xe4>
    __HAL_RCC_SDADC2_CLK_ENABLE();
 80038bc:	4b32      	ldr	r3, [pc, #200]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	4a31      	ldr	r2, [pc, #196]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 80038c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038c6:	6193      	str	r3, [r2, #24]
 80038c8:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038d4:	4b2c      	ldr	r3, [pc, #176]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	4a2b      	ldr	r2, [pc, #172]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 80038da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038de:	6153      	str	r3, [r2, #20]
 80038e0:	4b29      	ldr	r3, [pc, #164]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80038ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038f2:	2303      	movs	r3, #3
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038fe:	4619      	mov	r1, r3
 8003900:	4822      	ldr	r0, [pc, #136]	; (800398c <HAL_SDADC_MspInit+0x158>)
 8003902:	f001 f823 	bl	800494c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC2_IRQn, 1, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2101      	movs	r1, #1
 800390a:	203e      	movs	r0, #62	; 0x3e
 800390c:	f000 fe0f 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC2_IRQn);
 8003910:	203e      	movs	r0, #62	; 0x3e
 8003912:	f000 fe28 	bl	8004566 <HAL_NVIC_EnableIRQ>
}
 8003916:	e031      	b.n	800397c <HAL_SDADC_MspInit+0x148>
  else if(hsdadc->Instance==SDADC3)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_SDADC_MspInit+0x160>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d12c      	bne.n	800397c <HAL_SDADC_MspInit+0x148>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	4a18      	ldr	r2, [pc, #96]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 8003928:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800392c:	6193      	str	r3, [r2, #24]
 800392e:	4b16      	ldr	r3, [pc, #88]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800393a:	4b13      	ldr	r3, [pc, #76]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4a12      	ldr	r2, [pc, #72]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003944:	6153      	str	r3, [r2, #20]
 8003946:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_SDADC_MspInit+0x154>)
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003952:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003958:	2303      	movs	r3, #3
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003964:	4619      	mov	r1, r3
 8003966:	480c      	ldr	r0, [pc, #48]	; (8003998 <HAL_SDADC_MspInit+0x164>)
 8003968:	f000 fff0 	bl	800494c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC3_IRQn, 1, 0);
 800396c:	2200      	movs	r2, #0
 800396e:	2101      	movs	r1, #1
 8003970:	203f      	movs	r0, #63	; 0x3f
 8003972:	f000 fddc 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC3_IRQn);
 8003976:	203f      	movs	r0, #63	; 0x3f
 8003978:	f000 fdf5 	bl	8004566 <HAL_NVIC_EnableIRQ>
}
 800397c:	bf00      	nop
 800397e:	3738      	adds	r7, #56	; 0x38
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40016000 	.word	0x40016000
 8003988:	40021000 	.word	0x40021000
 800398c:	48001000 	.word	0x48001000
 8003990:	40016400 	.word	0x40016400
 8003994:	40016800 	.word	0x40016800
 8003998:	48000400 	.word	0x48000400

0800399c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d10c      	bne.n	80039c8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_TIM_Base_MspInit+0x68>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <HAL_TIM_Base_MspInit+0x68>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	61d3      	str	r3, [r2, #28]
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_TIM_Base_MspInit+0x68>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80039c6:	e018      	b.n	80039fa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <HAL_TIM_Base_MspInit+0x6c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d113      	bne.n	80039fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_TIM_Base_MspInit+0x68>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <HAL_TIM_Base_MspInit+0x68>)
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	61d3      	str	r3, [r2, #28]
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_TIM_Base_MspInit+0x68>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80039ea:	2200      	movs	r2, #0
 80039ec:	2100      	movs	r1, #0
 80039ee:	201d      	movs	r0, #29
 80039f0:	f000 fd9d 	bl	800452e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039f4:	201d      	movs	r0, #29
 80039f6:	f000 fdb6 	bl	8004566 <HAL_NVIC_EnableIRQ>
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40000400 	.word	0x40000400

08003a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a10:	e7fe      	b.n	8003a10 <NMI_Handler+0x4>

08003a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a16:	e7fe      	b.n	8003a16 <HardFault_Handler+0x4>

08003a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <MemManage_Handler+0x4>

08003a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a22:	e7fe      	b.n	8003a22 <BusFault_Handler+0x4>

08003a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a28:	e7fe      	b.n	8003a28 <UsageFault_Handler+0x4>

08003a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a58:	f000 f8f8 	bl	8003c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003a64:	2001      	movs	r0, #1
 8003a66:	f001 f903 	bl	8004c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003a72:	2002      	movs	r0, #2
 8003a74:	f001 f8fc 	bl	8004c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt and touch sense controller interrupt.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003a80:	2004      	movs	r0, #4
 8003a82:	f001 f8f5 	bl	8004c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <TIM3_IRQHandler+0x10>)
 8003a92:	f003 f803 	bl	8006a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20001250 	.word	0x20001250

08003aa0 <SDADC1_IRQHandler>:

/**
  * @brief This function handles SDADC1 global interrupt.
  */
void SDADC1_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC1_IRQn 0 */

  /* USER CODE END SDADC1_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc1);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <SDADC1_IRQHandler+0x10>)
 8003aa6:	f002 fd7c 	bl	80065a2 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC1_IRQn 1 */

  /* USER CODE END SDADC1_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20002270 	.word	0x20002270

08003ab4 <SDADC2_IRQHandler>:

/**
  * @brief This function handles SDADC2 global interrupt.
  */
void SDADC2_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC2_IRQn 0 */

  /* USER CODE END SDADC2_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc2);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <SDADC2_IRQHandler+0x10>)
 8003aba:	f002 fd72 	bl	80065a2 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC2_IRQn 1 */

  /* USER CODE END SDADC2_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	2000326c 	.word	0x2000326c

08003ac8 <SDADC3_IRQHandler>:

/**
  * @brief This function handles SDADC3 global interrupt.
  */
void SDADC3_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC3_IRQn 0 */

  /* USER CODE END SDADC3_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc3);
 8003acc:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <SDADC3_IRQHandler+0x10>)
 8003ace:	f002 fd68 	bl	80065a2 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC3_IRQn 1 */

  /* USER CODE END SDADC3_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	2000332c 	.word	0x2000332c

08003adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ae4:	4a14      	ldr	r2, [pc, #80]	; (8003b38 <_sbrk+0x5c>)
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <_sbrk+0x60>)
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <_sbrk+0x64>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <_sbrk+0x64>)
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <_sbrk+0x68>)
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <_sbrk+0x64>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4413      	add	r3, r2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d207      	bcs.n	8003b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b0c:	f003 fb76 	bl	80071fc <__errno>
 8003b10:	4603      	mov	r3, r0
 8003b12:	220c      	movs	r2, #12
 8003b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	e009      	b.n	8003b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <_sbrk+0x64>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <_sbrk+0x64>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <_sbrk+0x64>)
 8003b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20008000 	.word	0x20008000
 8003b3c:	00000400 	.word	0x00000400
 8003b40:	2000021c 	.word	0x2000021c
 8003b44:	200033a8 	.word	0x200033a8

08003b48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <SystemInit+0x20>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <SystemInit+0x20>)
 8003b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ba4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b70:	480d      	ldr	r0, [pc, #52]	; (8003ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b72:	490e      	ldr	r1, [pc, #56]	; (8003bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b74:	4a0e      	ldr	r2, [pc, #56]	; (8003bb0 <LoopForever+0xe>)
  movs r3, #0
 8003b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b78:	e002      	b.n	8003b80 <LoopCopyDataInit>

08003b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b7e:	3304      	adds	r3, #4

08003b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b84:	d3f9      	bcc.n	8003b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b86:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b88:	4c0b      	ldr	r4, [pc, #44]	; (8003bb8 <LoopForever+0x16>)
  movs r3, #0
 8003b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b8c:	e001      	b.n	8003b92 <LoopFillZerobss>

08003b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b90:	3204      	adds	r2, #4

08003b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b94:	d3fb      	bcc.n	8003b8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b96:	f7ff ffd7 	bl	8003b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b9a:	f003 fb35 	bl	8007208 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b9e:	f7fd f917 	bl	8000dd0 <main>

08003ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ba2:	e7fe      	b.n	8003ba2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ba4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bac:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003bb0:	08008d28 	.word	0x08008d28
  ldr r2, =_sbss
 8003bb4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003bb8:	200033a8 	.word	0x200033a8

08003bbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003bbc:	e7fe      	b.n	8003bbc <ADC1_IRQHandler>
	...

08003bc0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_Init+0x28>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a07      	ldr	r2, [pc, #28]	; (8003be8 <HAL_Init+0x28>)
 8003bca:	f043 0310 	orr.w	r3, r3, #16
 8003bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd0:	2003      	movs	r0, #3
 8003bd2:	f000 fca1 	bl	8004518 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f000 f808 	bl	8003bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bdc:	f7ff fdc2 	bl	8003764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40022000 	.word	0x40022000

08003bec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_InitTick+0x54>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_InitTick+0x58>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fcb9 	bl	8004582 <HAL_SYSTICK_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e00e      	b.n	8003c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b0f      	cmp	r3, #15
 8003c1e:	d80a      	bhi.n	8003c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c20:	2200      	movs	r2, #0
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295
 8003c28:	f000 fc81 	bl	800452e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c2c:	4a06      	ldr	r2, [pc, #24]	; (8003c48 <HAL_InitTick+0x5c>)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000164 	.word	0x20000164
 8003c44:	2000016c 	.word	0x2000016c
 8003c48:	20000168 	.word	0x20000168

08003c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_IncTick+0x20>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_IncTick+0x24>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <HAL_IncTick+0x24>)
 8003c5e:	6013      	str	r3, [r2, #0]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	2000016c 	.word	0x2000016c
 8003c70:	20003374 	.word	0x20003374

08003c74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return uwTick;  
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <HAL_GetTick+0x14>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20003374 	.word	0x20003374

08003c8c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c94:	f7ff ffee 	bl	8003c74 <HAL_GetTick>
 8003c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d005      	beq.n	8003cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_Delay+0x44>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003cb2:	bf00      	nop
 8003cb4:	f7ff ffde 	bl	8003c74 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d8f7      	bhi.n	8003cb4 <HAL_Delay+0x28>
  {
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	2000016c 	.word	0x2000016c

08003cd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e0ed      	b.n	8003ec2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fd5a 	bl	80037ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0202 	bic.w	r2, r2, #2
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d08:	f7ff ffb4 	bl	8003c74 <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d0e:	e012      	b.n	8003d36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d10:	f7ff ffb0 	bl	8003c74 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b0a      	cmp	r3, #10
 8003d1c:	d90b      	bls.n	8003d36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2205      	movs	r2, #5
 8003d2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0c5      	b.n	8003ec2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e5      	bne.n	8003d10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d54:	f7ff ff8e 	bl	8003c74 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d5a:	e012      	b.n	8003d82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d5c:	f7ff ff8a 	bl	8003c74 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b0a      	cmp	r3, #10
 8003d68:	d90b      	bls.n	8003d82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2205      	movs	r2, #5
 8003d7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e09f      	b.n	8003ec2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0e5      	beq.n	8003d5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	7e1b      	ldrb	r3, [r3, #24]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d108      	bne.n	8003daa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	e007      	b.n	8003dba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	7e5b      	ldrb	r3, [r3, #25]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d108      	bne.n	8003dd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e007      	b.n	8003de4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	7e9b      	ldrb	r3, [r3, #26]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d108      	bne.n	8003dfe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0220 	orr.w	r2, r2, #32
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e007      	b.n	8003e0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0220 	bic.w	r2, r2, #32
 8003e0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	7edb      	ldrb	r3, [r3, #27]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d108      	bne.n	8003e28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0210 	bic.w	r2, r2, #16
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e007      	b.n	8003e38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0210 	orr.w	r2, r2, #16
 8003e36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	7f1b      	ldrb	r3, [r3, #28]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d108      	bne.n	8003e52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0208 	orr.w	r2, r2, #8
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e007      	b.n	8003e62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0208 	bic.w	r2, r2, #8
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7f5b      	ldrb	r3, [r3, #29]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d108      	bne.n	8003e7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0204 	orr.w	r2, r2, #4
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e007      	b.n	8003e8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0204 	bic.w	r2, r2, #4
 8003e8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	ea42 0103 	orr.w	r1, r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	1e5a      	subs	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b087      	sub	sp, #28
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d003      	beq.n	8003ef0 <HAL_CAN_ConfigFilter+0x26>
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	f040 80aa 	bne.w	8004044 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ef6:	f043 0201 	orr.w	r2, r3, #1
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2201      	movs	r2, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d123      	bne.n	8003f72 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	401a      	ands	r2, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003f4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	3248      	adds	r2, #72	; 0x48
 8003f52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003f66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	3348      	adds	r3, #72	; 0x48
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	440b      	add	r3, r1
 8003f70:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d122      	bne.n	8003fc0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003f9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	3248      	adds	r2, #72	; 0x48
 8003fa0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003fb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003fb6:	6979      	ldr	r1, [r7, #20]
 8003fb8:	3348      	adds	r3, #72	; 0x48
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003fda:	e007      	b.n	8003fec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d109      	bne.n	8004008 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	401a      	ands	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004006:	e007      	b.n	8004018 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	431a      	orrs	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d107      	bne.n	8004030 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	431a      	orrs	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e006      	b.n	8004052 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b01      	cmp	r3, #1
 8004070:	d12e      	bne.n	80040d0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800408a:	f7ff fdf3 	bl	8003c74 <HAL_GetTick>
 800408e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004090:	e012      	b.n	80040b8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004092:	f7ff fdef 	bl	8003c74 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b0a      	cmp	r3, #10
 800409e:	d90b      	bls.n	80040b8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2205      	movs	r2, #5
 80040b0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e012      	b.n	80040de <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e5      	bne.n	8004092 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	e006      	b.n	80040de <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d133      	bne.n	8004162 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800410a:	f7ff fdb3 	bl	8003c74 <HAL_GetTick>
 800410e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004110:	e012      	b.n	8004138 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004112:	f7ff fdaf 	bl	8003c74 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b0a      	cmp	r3, #10
 800411e:	d90b      	bls.n	8004138 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2205      	movs	r2, #5
 8004130:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e01b      	b.n	8004170 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0e5      	beq.n	8004112 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0202 	bic.w	r2, r2, #2
 8004154:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e006      	b.n	8004170 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004178:	b480      	push	{r7}
 800417a:	b089      	sub	sp, #36	; 0x24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800418c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004196:	7ffb      	ldrb	r3, [r7, #31]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d003      	beq.n	80041a4 <HAL_CAN_AddTxMessage+0x2c>
 800419c:	7ffb      	ldrb	r3, [r7, #31]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	f040 80b8 	bne.w	8004314 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80a0 	beq.w	8004304 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	0e1b      	lsrs	r3, r3, #24
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d907      	bls.n	80041e4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e09e      	b.n	8004322 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80041e4:	2201      	movs	r2, #1
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	409a      	lsls	r2, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004200:	68f9      	ldr	r1, [r7, #12]
 8004202:	6809      	ldr	r1, [r1, #0]
 8004204:	431a      	orrs	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	3318      	adds	r3, #24
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	440b      	add	r3, r1
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	e00f      	b.n	8004232 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800421c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004222:	68f9      	ldr	r1, [r7, #12]
 8004224:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004226:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3318      	adds	r3, #24
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	440b      	add	r3, r1
 8004230:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	3318      	adds	r3, #24
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	440b      	add	r3, r1
 8004242:	3304      	adds	r3, #4
 8004244:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	7d1b      	ldrb	r3, [r3, #20]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d111      	bne.n	8004272 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3318      	adds	r3, #24
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	4413      	add	r3, r2
 800425a:	3304      	adds	r3, #4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	6811      	ldr	r1, [r2, #0]
 8004262:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	3318      	adds	r3, #24
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	440b      	add	r3, r1
 800426e:	3304      	adds	r3, #4
 8004270:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3307      	adds	r3, #7
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	061a      	lsls	r2, r3, #24
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3306      	adds	r3, #6
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3305      	adds	r3, #5
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	021b      	lsls	r3, r3, #8
 800428c:	4313      	orrs	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	3204      	adds	r2, #4
 8004292:	7812      	ldrb	r2, [r2, #0]
 8004294:	4610      	mov	r0, r2
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	6811      	ldr	r1, [r2, #0]
 800429a:	ea43 0200 	orr.w	r2, r3, r0
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	440b      	add	r3, r1
 80042a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80042a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3303      	adds	r3, #3
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	061a      	lsls	r2, r3, #24
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3302      	adds	r3, #2
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3301      	adds	r3, #1
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	4313      	orrs	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	7812      	ldrb	r2, [r2, #0]
 80042ca:	4610      	mov	r0, r2
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	6811      	ldr	r1, [r2, #0]
 80042d0:	ea43 0200 	orr.w	r2, r3, r0
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	440b      	add	r3, r1
 80042da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80042de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3318      	adds	r3, #24
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	4413      	add	r3, r2
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	6811      	ldr	r1, [r2, #0]
 80042f2:	f043 0201 	orr.w	r2, r3, #1
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	3318      	adds	r3, #24
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	440b      	add	r3, r1
 80042fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e00e      	b.n	8004322 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e006      	b.n	8004322 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3724      	adds	r7, #36	; 0x24
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004342:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004344:	7afb      	ldrb	r3, [r7, #11]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d002      	beq.n	8004350 <HAL_CAN_IsTxMessagePending+0x22>
 800434a:	7afb      	ldrb	r3, [r7, #11]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d10b      	bne.n	8004368 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	069b      	lsls	r3, r3, #26
 800435a:	401a      	ands	r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	069b      	lsls	r3, r3, #26
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004364:	2301      	movs	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <__NVIC_SetPriorityGrouping+0x44>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004394:	4013      	ands	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043aa:	4a04      	ldr	r2, [pc, #16]	; (80043bc <__NVIC_SetPriorityGrouping+0x44>)
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	60d3      	str	r3, [r2, #12]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <__NVIC_GetPriorityGrouping+0x18>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	0a1b      	lsrs	r3, r3, #8
 80043ca:	f003 0307 	and.w	r3, r3, #7
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	db0b      	blt.n	8004406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043ee:	79fb      	ldrb	r3, [r7, #7]
 80043f0:	f003 021f 	and.w	r2, r3, #31
 80043f4:	4907      	ldr	r1, [pc, #28]	; (8004414 <__NVIC_EnableIRQ+0x38>)
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2001      	movs	r0, #1
 80043fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	e000e100 	.word	0xe000e100

08004418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	6039      	str	r1, [r7, #0]
 8004422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004428:	2b00      	cmp	r3, #0
 800442a:	db0a      	blt.n	8004442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	b2da      	uxtb	r2, r3
 8004430:	490c      	ldr	r1, [pc, #48]	; (8004464 <__NVIC_SetPriority+0x4c>)
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	0112      	lsls	r2, r2, #4
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	440b      	add	r3, r1
 800443c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004440:	e00a      	b.n	8004458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	4908      	ldr	r1, [pc, #32]	; (8004468 <__NVIC_SetPriority+0x50>)
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	3b04      	subs	r3, #4
 8004450:	0112      	lsls	r2, r2, #4
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	440b      	add	r3, r1
 8004456:	761a      	strb	r2, [r3, #24]
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	e000e100 	.word	0xe000e100
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800446c:	b480      	push	{r7}
 800446e:	b089      	sub	sp, #36	; 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f1c3 0307 	rsb	r3, r3, #7
 8004486:	2b04      	cmp	r3, #4
 8004488:	bf28      	it	cs
 800448a:	2304      	movcs	r3, #4
 800448c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3304      	adds	r3, #4
 8004492:	2b06      	cmp	r3, #6
 8004494:	d902      	bls.n	800449c <NVIC_EncodePriority+0x30>
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3b03      	subs	r3, #3
 800449a:	e000      	b.n	800449e <NVIC_EncodePriority+0x32>
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43da      	mvns	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	401a      	ands	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044b4:	f04f 31ff 	mov.w	r1, #4294967295
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	fa01 f303 	lsl.w	r3, r1, r3
 80044be:	43d9      	mvns	r1, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c4:	4313      	orrs	r3, r2
         );
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3724      	adds	r7, #36	; 0x24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
	...

080044d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3b01      	subs	r3, #1
 80044e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044e4:	d301      	bcc.n	80044ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044e6:	2301      	movs	r3, #1
 80044e8:	e00f      	b.n	800450a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ea:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <SysTick_Config+0x40>)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044f2:	210f      	movs	r1, #15
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	f7ff ff8e 	bl	8004418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <SysTick_Config+0x40>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004502:	4b04      	ldr	r3, [pc, #16]	; (8004514 <SysTick_Config+0x40>)
 8004504:	2207      	movs	r2, #7
 8004506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	e000e010 	.word	0xe000e010

08004518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff29 	bl	8004378 <__NVIC_SetPriorityGrouping>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af00      	add	r7, sp, #0
 8004534:	4603      	mov	r3, r0
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004540:	f7ff ff3e 	bl	80043c0 <__NVIC_GetPriorityGrouping>
 8004544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	6978      	ldr	r0, [r7, #20]
 800454c:	f7ff ff8e 	bl	800446c <NVIC_EncodePriority>
 8004550:	4602      	mov	r2, r0
 8004552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ff5d 	bl	8004418 <__NVIC_SetPriority>
}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	4603      	mov	r3, r0
 800456e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff31 	bl	80043dc <__NVIC_EnableIRQ>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff ffa2 	bl	80044d4 <SysTick_Config>
 8004590:	4603      	mov	r3, r0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800459c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80045b6:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <HAL_FLASH_Program+0xd8>)
 80045b8:	7e1b      	ldrb	r3, [r3, #24]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_FLASH_Program+0x26>
 80045be:	2302      	movs	r3, #2
 80045c0:	e054      	b.n	800466c <HAL_FLASH_Program+0xd0>
 80045c2:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <HAL_FLASH_Program+0xd8>)
 80045c4:	2201      	movs	r2, #1
 80045c6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80045cc:	f000 f8a8 	bl	8004720 <FLASH_WaitForLastOperation>
 80045d0:	4603      	mov	r3, r0
 80045d2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d144      	bne.n	8004664 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d102      	bne.n	80045e6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80045e0:	2301      	movs	r3, #1
 80045e2:	757b      	strb	r3, [r7, #21]
 80045e4:	e007      	b.n	80045f6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d102      	bne.n	80045f2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80045ec:	2302      	movs	r3, #2
 80045ee:	757b      	strb	r3, [r7, #21]
 80045f0:	e001      	b.n	80045f6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80045f2:	2304      	movs	r3, #4
 80045f4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	75bb      	strb	r3, [r7, #22]
 80045fa:	e02d      	b.n	8004658 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80045fc:	7dbb      	ldrb	r3, [r7, #22]
 80045fe:	005a      	lsls	r2, r3, #1
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	eb02 0c03 	add.w	ip, r2, r3
 8004606:	7dbb      	ldrb	r3, [r7, #22]
 8004608:	0119      	lsls	r1, r3, #4
 800460a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800460e:	f1c1 0620 	rsb	r6, r1, #32
 8004612:	f1a1 0020 	sub.w	r0, r1, #32
 8004616:	fa22 f401 	lsr.w	r4, r2, r1
 800461a:	fa03 f606 	lsl.w	r6, r3, r6
 800461e:	4334      	orrs	r4, r6
 8004620:	fa23 f000 	lsr.w	r0, r3, r0
 8004624:	4304      	orrs	r4, r0
 8004626:	fa23 f501 	lsr.w	r5, r3, r1
 800462a:	b2a3      	uxth	r3, r4
 800462c:	4619      	mov	r1, r3
 800462e:	4660      	mov	r0, ip
 8004630:	f000 f85a 	bl	80046e8 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004634:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004638:	f000 f872 	bl	8004720 <FLASH_WaitForLastOperation>
 800463c:	4603      	mov	r3, r0
 800463e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004640:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <HAL_FLASH_Program+0xdc>)
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <HAL_FLASH_Program+0xdc>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004652:	7dbb      	ldrb	r3, [r7, #22]
 8004654:	3301      	adds	r3, #1
 8004656:	75bb      	strb	r3, [r7, #22]
 8004658:	7dba      	ldrb	r2, [r7, #22]
 800465a:	7d7b      	ldrb	r3, [r7, #21]
 800465c:	429a      	cmp	r2, r3
 800465e:	d3cd      	bcc.n	80045fc <HAL_FLASH_Program+0x60>
 8004660:	e000      	b.n	8004664 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004662:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <HAL_FLASH_Program+0xd8>)
 8004666:	2200      	movs	r2, #0
 8004668:	761a      	strb	r2, [r3, #24]

  return status;
 800466a:	7dfb      	ldrb	r3, [r7, #23]
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004674:	20003378 	.word	0x20003378
 8004678:	40022000 	.word	0x40022000

0800467c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <HAL_FLASH_Unlock+0x40>)
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00d      	beq.n	80046ae <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <HAL_FLASH_Unlock+0x40>)
 8004694:	4a0a      	ldr	r2, [pc, #40]	; (80046c0 <HAL_FLASH_Unlock+0x44>)
 8004696:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004698:	4b08      	ldr	r3, [pc, #32]	; (80046bc <HAL_FLASH_Unlock+0x40>)
 800469a:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <HAL_FLASH_Unlock+0x48>)
 800469c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800469e:	4b07      	ldr	r3, [pc, #28]	; (80046bc <HAL_FLASH_Unlock+0x40>)
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80046ae:	79fb      	ldrb	r3, [r7, #7]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40022000 	.word	0x40022000
 80046c0:	45670123 	.word	0x45670123
 80046c4:	cdef89ab 	.word	0xcdef89ab

080046c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_FLASH_Lock+0x1c>)
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4a04      	ldr	r2, [pc, #16]	; (80046e4 <HAL_FLASH_Lock+0x1c>)
 80046d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	40022000 	.word	0x40022000

080046e8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046f4:	4b08      	ldr	r3, [pc, #32]	; (8004718 <FLASH_Program_HalfWord+0x30>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <FLASH_Program_HalfWord+0x34>)
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	4a07      	ldr	r2, [pc, #28]	; (800471c <FLASH_Program_HalfWord+0x34>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	887a      	ldrh	r2, [r7, #2]
 800470a:	801a      	strh	r2, [r3, #0]
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	20003378 	.word	0x20003378
 800471c:	40022000 	.word	0x40022000

08004720 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004728:	f7ff faa4 	bl	8003c74 <HAL_GetTick>
 800472c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800472e:	e010      	b.n	8004752 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004736:	d00c      	beq.n	8004752 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <FLASH_WaitForLastOperation+0x2e>
 800473e:	f7ff fa99 	bl	8003c74 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	429a      	cmp	r2, r3
 800474c:	d201      	bcs.n	8004752 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e01f      	b.n	8004792 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <FLASH_WaitForLastOperation+0x7c>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d0e8      	beq.n	8004730 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <FLASH_WaitForLastOperation+0x7c>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b20      	cmp	r3, #32
 8004768:	d102      	bne.n	8004770 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800476a:	4b0c      	ldr	r3, [pc, #48]	; (800479c <FLASH_WaitForLastOperation+0x7c>)
 800476c:	2220      	movs	r2, #32
 800476e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <FLASH_WaitForLastOperation+0x7c>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b10      	cmp	r3, #16
 800477a:	d005      	beq.n	8004788 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <FLASH_WaitForLastOperation+0x7c>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004784:	2b04      	cmp	r3, #4
 8004786:	d103      	bne.n	8004790 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004788:	f000 f80a 	bl	80047a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40022000 	.word	0x40022000

080047a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80047aa:	4b14      	ldr	r3, [pc, #80]	; (80047fc <FLASH_SetErrorCode+0x5c>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d109      	bne.n	80047ca <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <FLASH_SetErrorCode+0x60>)
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f043 0302 	orr.w	r3, r3, #2
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <FLASH_SetErrorCode+0x60>)
 80047c0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f043 0310 	orr.w	r3, r3, #16
 80047c8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <FLASH_SetErrorCode+0x5c>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d109      	bne.n	80047ea <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <FLASH_SetErrorCode+0x60>)
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	4a08      	ldr	r2, [pc, #32]	; (8004800 <FLASH_SetErrorCode+0x60>)
 80047e0:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f043 0304 	orr.w	r3, r3, #4
 80047e8:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80047ea:	4a04      	ldr	r2, [pc, #16]	; (80047fc <FLASH_SetErrorCode+0x5c>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60d3      	str	r3, [r2, #12]
}  
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	40022000 	.word	0x40022000
 8004800:	20003378 	.word	0x20003378

08004804 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004816:	4b2e      	ldr	r3, [pc, #184]	; (80048d0 <HAL_FLASHEx_Erase+0xcc>)
 8004818:	7e1b      	ldrb	r3, [r3, #24]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_FLASHEx_Erase+0x1e>
 800481e:	2302      	movs	r3, #2
 8004820:	e052      	b.n	80048c8 <HAL_FLASHEx_Erase+0xc4>
 8004822:	4b2b      	ldr	r3, [pc, #172]	; (80048d0 <HAL_FLASHEx_Erase+0xcc>)
 8004824:	2201      	movs	r2, #1
 8004826:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d115      	bne.n	800485c <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004830:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004834:	f7ff ff74 	bl	8004720 <FLASH_WaitForLastOperation>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d140      	bne.n	80048c0 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800483e:	f000 f84b 	bl	80048d8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004842:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004846:	f7ff ff6b 	bl	8004720 <FLASH_WaitForLastOperation>
 800484a:	4603      	mov	r3, r0
 800484c:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800484e:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <HAL_FLASHEx_Erase+0xd0>)
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	4a20      	ldr	r2, [pc, #128]	; (80048d4 <HAL_FLASHEx_Erase+0xd0>)
 8004854:	f023 0304 	bic.w	r3, r3, #4
 8004858:	6113      	str	r3, [r2, #16]
 800485a:	e031      	b.n	80048c0 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800485c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004860:	f7ff ff5e 	bl	8004720 <FLASH_WaitForLastOperation>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d12a      	bne.n	80048c0 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	f04f 32ff 	mov.w	r2, #4294967295
 8004870:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	e019      	b.n	80048ae <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800487a:	68b8      	ldr	r0, [r7, #8]
 800487c:	f000 f846 	bl	800490c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004880:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004884:	f7ff ff4c 	bl	8004720 <FLASH_WaitForLastOperation>
 8004888:	4603      	mov	r3, r0
 800488a:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_FLASHEx_Erase+0xd0>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <HAL_FLASHEx_Erase+0xd0>)
 8004892:	f023 0302 	bic.w	r3, r3, #2
 8004896:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	601a      	str	r2, [r3, #0]
            break;
 80048a4:	e00c      	b.n	80048c0 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ac:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	02da      	lsls	r2, r3, #11
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d3dc      	bcc.n	800487a <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80048c0:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <HAL_FLASHEx_Erase+0xcc>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	761a      	strb	r2, [r3, #24]

  return status;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20003378 	.word	0x20003378
 80048d4:	40022000 	.word	0x40022000

080048d8 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <FLASH_MassErase+0x2c>)
 80048de:	2200      	movs	r2, #0
 80048e0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <FLASH_MassErase+0x30>)
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	4a08      	ldr	r2, [pc, #32]	; (8004908 <FLASH_MassErase+0x30>)
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <FLASH_MassErase+0x30>)
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	4a05      	ldr	r2, [pc, #20]	; (8004908 <FLASH_MassErase+0x30>)
 80048f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f8:	6113      	str	r3, [r2, #16]
}
 80048fa:	bf00      	nop
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	20003378 	.word	0x20003378
 8004908:	40022000 	.word	0x40022000

0800490c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <FLASH_PageErase+0x38>)
 8004916:	2200      	movs	r2, #0
 8004918:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <FLASH_PageErase+0x3c>)
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <FLASH_PageErase+0x3c>)
 8004920:	f043 0302 	orr.w	r3, r3, #2
 8004924:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <FLASH_PageErase+0x3c>)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <FLASH_PageErase+0x3c>)
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	4a05      	ldr	r2, [pc, #20]	; (8004948 <FLASH_PageErase+0x3c>)
 8004932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004936:	6113      	str	r3, [r2, #16]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	20003378 	.word	0x20003378
 8004948:	40022000 	.word	0x40022000

0800494c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800495a:	e154      	b.n	8004c06 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	2101      	movs	r1, #1
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8146 	beq.w	8004c00 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d00b      	beq.n	8004994 <HAL_GPIO_Init+0x48>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d007      	beq.n	8004994 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004988:	2b11      	cmp	r3, #17
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b12      	cmp	r3, #18
 8004992:	d130      	bne.n	80049f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	2203      	movs	r2, #3
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4013      	ands	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049ca:	2201      	movs	r2, #1
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	f003 0201 	and.w	r2, r3, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	2203      	movs	r2, #3
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0xea>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b12      	cmp	r3, #18
 8004a34:	d123      	bne.n	8004a7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	08da      	lsrs	r2, r3, #3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3208      	adds	r2, #8
 8004a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	220f      	movs	r2, #15
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	08da      	lsrs	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3208      	adds	r2, #8
 8004a78:	6939      	ldr	r1, [r7, #16]
 8004a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	2203      	movs	r2, #3
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4013      	ands	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 0203 	and.w	r2, r3, #3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80a0 	beq.w	8004c00 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac0:	4b58      	ldr	r3, [pc, #352]	; (8004c24 <HAL_GPIO_Init+0x2d8>)
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	4a57      	ldr	r2, [pc, #348]	; (8004c24 <HAL_GPIO_Init+0x2d8>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	6193      	str	r3, [r2, #24]
 8004acc:	4b55      	ldr	r3, [pc, #340]	; (8004c24 <HAL_GPIO_Init+0x2d8>)
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ad8:	4a53      	ldr	r2, [pc, #332]	; (8004c28 <HAL_GPIO_Init+0x2dc>)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	3302      	adds	r3, #2
 8004ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	220f      	movs	r2, #15
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4013      	ands	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b02:	d019      	beq.n	8004b38 <HAL_GPIO_Init+0x1ec>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a49      	ldr	r2, [pc, #292]	; (8004c2c <HAL_GPIO_Init+0x2e0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <HAL_GPIO_Init+0x1e8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a48      	ldr	r2, [pc, #288]	; (8004c30 <HAL_GPIO_Init+0x2e4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00d      	beq.n	8004b30 <HAL_GPIO_Init+0x1e4>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a47      	ldr	r2, [pc, #284]	; (8004c34 <HAL_GPIO_Init+0x2e8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <HAL_GPIO_Init+0x1e0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a46      	ldr	r2, [pc, #280]	; (8004c38 <HAL_GPIO_Init+0x2ec>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <HAL_GPIO_Init+0x1dc>
 8004b24:	2304      	movs	r3, #4
 8004b26:	e008      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b28:	2305      	movs	r3, #5
 8004b2a:	e006      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e004      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e002      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <HAL_GPIO_Init+0x1ee>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	f002 0203 	and.w	r2, r2, #3
 8004b40:	0092      	lsls	r2, r2, #2
 8004b42:	4093      	lsls	r3, r2
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b4a:	4937      	ldr	r1, [pc, #220]	; (8004c28 <HAL_GPIO_Init+0x2dc>)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	089b      	lsrs	r3, r3, #2
 8004b50:	3302      	adds	r3, #2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b58:	4b38      	ldr	r3, [pc, #224]	; (8004c3c <HAL_GPIO_Init+0x2f0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4013      	ands	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004b7c:	4a2f      	ldr	r2, [pc, #188]	; (8004c3c <HAL_GPIO_Init+0x2f0>)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b82:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <HAL_GPIO_Init+0x2f0>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ba6:	4a25      	ldr	r2, [pc, #148]	; (8004c3c <HAL_GPIO_Init+0x2f0>)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bac:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <HAL_GPIO_Init+0x2f0>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004bd0:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <HAL_GPIO_Init+0x2f0>)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bd6:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_GPIO_Init+0x2f0>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	43db      	mvns	r3, r3
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4013      	ands	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004bfa:	4a10      	ldr	r2, [pc, #64]	; (8004c3c <HAL_GPIO_Init+0x2f0>)
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	3301      	adds	r3, #1
 8004c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f47f aea3 	bne.w	800495c <HAL_GPIO_Init+0x10>
  }
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	40021000 	.word	0x40021000
 8004c28:	40010000 	.word	0x40010000
 8004c2c:	48000400 	.word	0x48000400
 8004c30:	48000800 	.word	0x48000800
 8004c34:	48000c00 	.word	0x48000c00
 8004c38:	48001000 	.word	0x48001000
 8004c3c:	40010400 	.word	0x40010400

08004c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	807b      	strh	r3, [r7, #2]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c50:	787b      	ldrb	r3, [r7, #1]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c56:	887a      	ldrh	r2, [r7, #2]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c5c:	e002      	b.n	8004c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c7a:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	4013      	ands	r3, r2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d006      	beq.n	8004c94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c86:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c88:	88fb      	ldrh	r3, [r7, #6]
 8004c8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd f954 	bl	8001f3c <HAL_GPIO_EXTI_Callback>
  }
}
 8004c94:	bf00      	nop
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40010400 	.word	0x40010400

08004ca0 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ca8:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <HAL_PWREx_EnableSDADC+0x38>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4a0a      	ldr	r2, [pc, #40]	; (8004cd8 <HAL_PWREx_EnableSDADC+0x38>)
 8004cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	61d3      	str	r3, [r2, #28]
 8004cb4:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <HAL_PWREx_EnableSDADC+0x38>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_PWREx_EnableSDADC+0x3c>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4905      	ldr	r1, [pc, #20]	; (8004cdc <HAL_PWREx_EnableSDADC+0x3c>)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40007000 	.word	0x40007000

08004ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	1d3b      	adds	r3, r7, #4
 8004cea:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cec:	1d3b      	adds	r3, r7, #4
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f000 bef4 	b.w	8005ae2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 816a 	beq.w	8004fde <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004d0a:	4bb3      	ldr	r3, [pc, #716]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d00c      	beq.n	8004d30 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d16:	4bb0      	ldr	r3, [pc, #704]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d159      	bne.n	8004dd6 <HAL_RCC_OscConfig+0xf6>
 8004d22:	4bad      	ldr	r3, [pc, #692]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2e:	d152      	bne.n	8004dd6 <HAL_RCC_OscConfig+0xf6>
 8004d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d34:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d38:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d44:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d48:	fab3 f383 	clz	r3, r3
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d102      	bne.n	8004d62 <HAL_RCC_OscConfig+0x82>
 8004d5c:	4b9e      	ldr	r3, [pc, #632]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	e015      	b.n	8004d8e <HAL_RCC_OscConfig+0xae>
 8004d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d66:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d7a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004d7e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004d82:	fa93 f3a3 	rbit	r3, r3
 8004d86:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004d8a:	4b93      	ldr	r3, [pc, #588]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d92:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004d96:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004d9a:	fa92 f2a2 	rbit	r2, r2
 8004d9e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004da2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004da6:	fab2 f282 	clz	r2, r2
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	f042 0220 	orr.w	r2, r2, #32
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	f002 021f 	and.w	r2, r2, #31
 8004db6:	2101      	movs	r1, #1
 8004db8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 810c 	beq.w	8004fdc <HAL_RCC_OscConfig+0x2fc>
 8004dc4:	1d3b      	adds	r3, r7, #4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f040 8106 	bne.w	8004fdc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f000 be86 	b.w	8005ae2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d106      	bne.n	8004df0 <HAL_RCC_OscConfig+0x110>
 8004de2:	4b7d      	ldr	r3, [pc, #500]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a7c      	ldr	r2, [pc, #496]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	e030      	b.n	8004e52 <HAL_RCC_OscConfig+0x172>
 8004df0:	1d3b      	adds	r3, r7, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x134>
 8004dfa:	4b77      	ldr	r3, [pc, #476]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a76      	ldr	r2, [pc, #472]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	4b74      	ldr	r3, [pc, #464]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a73      	ldr	r2, [pc, #460]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e01e      	b.n	8004e52 <HAL_RCC_OscConfig+0x172>
 8004e14:	1d3b      	adds	r3, r7, #4
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e1e:	d10c      	bne.n	8004e3a <HAL_RCC_OscConfig+0x15a>
 8004e20:	4b6d      	ldr	r3, [pc, #436]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a6c      	ldr	r2, [pc, #432]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a69      	ldr	r2, [pc, #420]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	e00b      	b.n	8004e52 <HAL_RCC_OscConfig+0x172>
 8004e3a:	4b67      	ldr	r3, [pc, #412]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a66      	ldr	r2, [pc, #408]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	4b64      	ldr	r3, [pc, #400]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a63      	ldr	r2, [pc, #396]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e52:	4b61      	ldr	r3, [pc, #388]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	f023 020f 	bic.w	r2, r3, #15
 8004e5a:	1d3b      	adds	r3, r7, #4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	495d      	ldr	r1, [pc, #372]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e66:	1d3b      	adds	r3, r7, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d059      	beq.n	8004f24 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fe ff00 	bl	8003c74 <HAL_GetTick>
 8004e74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e78:	e00a      	b.n	8004e90 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e7a:	f7fe fefb 	bl	8003c74 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	; 0x64
 8004e88:	d902      	bls.n	8004e90 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	f000 be29 	b.w	8005ae2 <HAL_RCC_OscConfig+0xe02>
 8004e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004e9c:	fa93 f3a3 	rbit	r3, r3
 8004ea0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004ea4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea8:	fab3 f383 	clz	r3, r3
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d102      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x1e2>
 8004ebc:	4b46      	ldr	r3, [pc, #280]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	e015      	b.n	8004eee <HAL_RCC_OscConfig+0x20e>
 8004ec2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ec6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eca:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004ece:	fa93 f3a3 	rbit	r3, r3
 8004ed2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004ede:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004ee2:	fa93 f3a3 	rbit	r3, r3
 8004ee6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004eea:	4b3b      	ldr	r3, [pc, #236]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ef2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004ef6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004efa:	fa92 f2a2 	rbit	r2, r2
 8004efe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004f02:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004f06:	fab2 f282 	clz	r2, r2
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	f042 0220 	orr.w	r2, r2, #32
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	f002 021f 	and.w	r2, r2, #31
 8004f16:	2101      	movs	r1, #1
 8004f18:	fa01 f202 	lsl.w	r2, r1, r2
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0ab      	beq.n	8004e7a <HAL_RCC_OscConfig+0x19a>
 8004f22:	e05c      	b.n	8004fde <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fe fea6 	bl	8003c74 <HAL_GetTick>
 8004f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2c:	e00a      	b.n	8004f44 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f2e:	f7fe fea1 	bl	8003c74 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	; 0x64
 8004f3c:	d902      	bls.n	8004f44 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	f000 bdcf 	b.w	8005ae2 <HAL_RCC_OscConfig+0xe02>
 8004f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f48:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004f50:	fa93 f3a3 	rbit	r3, r3
 8004f54:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004f58:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5c:	fab3 f383 	clz	r3, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <HAL_RCC_OscConfig+0x296>
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	e015      	b.n	8004fa2 <HAL_RCC_OscConfig+0x2c2>
 8004f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004f82:	fa93 f3a3 	rbit	r3, r3
 8004f86:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004f92:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004f96:	fa93 f3a3 	rbit	r3, r3
 8004f9a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <HAL_RCC_OscConfig+0x2f8>)
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fa6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004faa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004fae:	fa92 f2a2 	rbit	r2, r2
 8004fb2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004fb6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004fba:	fab2 f282 	clz	r2, r2
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	f042 0220 	orr.w	r2, r2, #32
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	f002 021f 	and.w	r2, r2, #31
 8004fca:	2101      	movs	r1, #1
 8004fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1ab      	bne.n	8004f2e <HAL_RCC_OscConfig+0x24e>
 8004fd6:	e002      	b.n	8004fde <HAL_RCC_OscConfig+0x2fe>
 8004fd8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 816f 	beq.w	80052cc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004fee:	4bd0      	ldr	r3, [pc, #832]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ffa:	4bcd      	ldr	r3, [pc, #820]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b08      	cmp	r3, #8
 8005004:	d16c      	bne.n	80050e0 <HAL_RCC_OscConfig+0x400>
 8005006:	4bca      	ldr	r3, [pc, #808]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d166      	bne.n	80050e0 <HAL_RCC_OscConfig+0x400>
 8005012:	2302      	movs	r3, #2
 8005014:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005018:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800501c:	fa93 f3a3 	rbit	r3, r3
 8005020:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005024:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005028:	fab3 f383 	clz	r3, r3
 800502c:	b2db      	uxtb	r3, r3
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	d102      	bne.n	8005042 <HAL_RCC_OscConfig+0x362>
 800503c:	4bbc      	ldr	r3, [pc, #752]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	e013      	b.n	800506a <HAL_RCC_OscConfig+0x38a>
 8005042:	2302      	movs	r3, #2
 8005044:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005048:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800504c:	fa93 f3a3 	rbit	r3, r3
 8005050:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005054:	2302      	movs	r3, #2
 8005056:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800505a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800505e:	fa93 f3a3 	rbit	r3, r3
 8005062:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005066:	4bb2      	ldr	r3, [pc, #712]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2202      	movs	r2, #2
 800506c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005070:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005074:	fa92 f2a2 	rbit	r2, r2
 8005078:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800507c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005080:	fab2 f282 	clz	r2, r2
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	f042 0220 	orr.w	r2, r2, #32
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	f002 021f 	and.w	r2, r2, #31
 8005090:	2101      	movs	r1, #1
 8005092:	fa01 f202 	lsl.w	r2, r1, r2
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <HAL_RCC_OscConfig+0x3cc>
 800509c:	1d3b      	adds	r3, r7, #4
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d002      	beq.n	80050ac <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f000 bd1b 	b.w	8005ae2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ac:	4ba0      	ldr	r3, [pc, #640]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	21f8      	movs	r1, #248	; 0xf8
 80050bc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80050c4:	fa91 f1a1 	rbit	r1, r1
 80050c8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80050cc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80050d0:	fab1 f181 	clz	r1, r1
 80050d4:	b2c9      	uxtb	r1, r1
 80050d6:	408b      	lsls	r3, r1
 80050d8:	4995      	ldr	r1, [pc, #596]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050de:	e0f5      	b.n	80052cc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 8085 	beq.w	80051f6 <HAL_RCC_OscConfig+0x516>
 80050ec:	2301      	movs	r3, #1
 80050ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80050f6:	fa93 f3a3 	rbit	r3, r3
 80050fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80050fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800510c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	461a      	mov	r2, r3
 8005114:	2301      	movs	r3, #1
 8005116:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fe fdac 	bl	8003c74 <HAL_GetTick>
 800511c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005120:	e00a      	b.n	8005138 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005122:	f7fe fda7 	bl	8003c74 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d902      	bls.n	8005138 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	f000 bcd5 	b.w	8005ae2 <HAL_RCC_OscConfig+0xe02>
 8005138:	2302      	movs	r3, #2
 800513a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005142:	fa93 f3a3 	rbit	r3, r3
 8005146:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800514a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514e:	fab3 f383 	clz	r3, r3
 8005152:	b2db      	uxtb	r3, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d102      	bne.n	8005168 <HAL_RCC_OscConfig+0x488>
 8005162:	4b73      	ldr	r3, [pc, #460]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	e013      	b.n	8005190 <HAL_RCC_OscConfig+0x4b0>
 8005168:	2302      	movs	r3, #2
 800516a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005172:	fa93 f3a3 	rbit	r3, r3
 8005176:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800517a:	2302      	movs	r3, #2
 800517c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005180:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005184:	fa93 f3a3 	rbit	r3, r3
 8005188:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800518c:	4b68      	ldr	r3, [pc, #416]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2202      	movs	r2, #2
 8005192:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005196:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800519a:	fa92 f2a2 	rbit	r2, r2
 800519e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80051a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80051a6:	fab2 f282 	clz	r2, r2
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	f042 0220 	orr.w	r2, r2, #32
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	f002 021f 	and.w	r2, r2, #31
 80051b6:	2101      	movs	r1, #1
 80051b8:	fa01 f202 	lsl.w	r2, r1, r2
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0af      	beq.n	8005122 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c2:	4b5b      	ldr	r3, [pc, #364]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	21f8      	movs	r1, #248	; 0xf8
 80051d2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80051da:	fa91 f1a1 	rbit	r1, r1
 80051de:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80051e2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80051e6:	fab1 f181 	clz	r1, r1
 80051ea:	b2c9      	uxtb	r1, r1
 80051ec:	408b      	lsls	r3, r1
 80051ee:	4950      	ldr	r1, [pc, #320]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	600b      	str	r3, [r1, #0]
 80051f4:	e06a      	b.n	80052cc <HAL_RCC_OscConfig+0x5ec>
 80051f6:	2301      	movs	r3, #1
 80051f8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005200:	fa93 f3a3 	rbit	r3, r3
 8005204:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005208:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800520c:	fab3 f383 	clz	r3, r3
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005216:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	461a      	mov	r2, r3
 800521e:	2300      	movs	r3, #0
 8005220:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fe fd27 	bl	8003c74 <HAL_GetTick>
 8005226:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800522a:	e00a      	b.n	8005242 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800522c:	f7fe fd22 	bl	8003c74 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d902      	bls.n	8005242 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	f000 bc50 	b.w	8005ae2 <HAL_RCC_OscConfig+0xe02>
 8005242:	2302      	movs	r3, #2
 8005244:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005248:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800524c:	fa93 f3a3 	rbit	r3, r3
 8005250:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005258:	fab3 f383 	clz	r3, r3
 800525c:	b2db      	uxtb	r3, r3
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d102      	bne.n	8005272 <HAL_RCC_OscConfig+0x592>
 800526c:	4b30      	ldr	r3, [pc, #192]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	e013      	b.n	800529a <HAL_RCC_OscConfig+0x5ba>
 8005272:	2302      	movs	r3, #2
 8005274:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005278:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800527c:	fa93 f3a3 	rbit	r3, r3
 8005280:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005284:	2302      	movs	r3, #2
 8005286:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800528a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800528e:	fa93 f3a3 	rbit	r3, r3
 8005292:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005296:	4b26      	ldr	r3, [pc, #152]	; (8005330 <HAL_RCC_OscConfig+0x650>)
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2202      	movs	r2, #2
 800529c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80052a0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80052a4:	fa92 f2a2 	rbit	r2, r2
 80052a8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80052ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80052b0:	fab2 f282 	clz	r2, r2
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	f042 0220 	orr.w	r2, r2, #32
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	f002 021f 	and.w	r2, r2, #31
 80052c0:	2101      	movs	r1, #1
 80052c2:	fa01 f202 	lsl.w	r2, r1, r2
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1af      	bne.n	800522c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052cc:	1d3b      	adds	r3, r7, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 80da 	beq.w	8005490 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052dc:	1d3b      	adds	r3, r7, #4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d069      	beq.n	80053ba <HAL_RCC_OscConfig+0x6da>
 80052e6:	2301      	movs	r3, #1
 80052e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052f0:	fa93 f3a3 	rbit	r3, r3
 80052f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80052f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052fc:	fab3 f383 	clz	r3, r3
 8005300:	b2db      	uxtb	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_OscConfig+0x654>)
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	461a      	mov	r2, r3
 800530c:	2301      	movs	r3, #1
 800530e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005310:	f7fe fcb0 	bl	8003c74 <HAL_GetTick>
 8005314:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005318:	e00e      	b.n	8005338 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800531a:	f7fe fcab 	bl	8003c74 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d906      	bls.n	8005338 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e3d9      	b.n	8005ae2 <HAL_RCC_OscConfig+0xe02>
 800532e:	bf00      	nop
 8005330:	40021000 	.word	0x40021000
 8005334:	10908120 	.word	0x10908120
 8005338:	2302      	movs	r3, #2
 800533a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005342:	fa93 f3a3 	rbit	r3, r3
 8005346:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800534a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800534e:	2202      	movs	r2, #2
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	fa93 f2a3 	rbit	r2, r3
 800535c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005366:	2202      	movs	r2, #2
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	fa93 f2a3 	rbit	r2, r3
 8005374:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005378:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800537a:	4ba5      	ldr	r3, [pc, #660]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 800537c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800537e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005382:	2102      	movs	r1, #2
 8005384:	6019      	str	r1, [r3, #0]
 8005386:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	fa93 f1a3 	rbit	r1, r3
 8005390:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005394:	6019      	str	r1, [r3, #0]
  return result;
 8005396:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	fab3 f383 	clz	r3, r3
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2101      	movs	r1, #1
 80053ae:	fa01 f303 	lsl.w	r3, r1, r3
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0b0      	beq.n	800531a <HAL_RCC_OscConfig+0x63a>
 80053b8:	e06a      	b.n	8005490 <HAL_RCC_OscConfig+0x7b0>
 80053ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80053be:	2201      	movs	r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	fa93 f2a3 	rbit	r2, r3
 80053cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80053d0:	601a      	str	r2, [r3, #0]
  return result;
 80053d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80053d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d8:	fab3 f383 	clz	r3, r3
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	461a      	mov	r2, r3
 80053e0:	4b8c      	ldr	r3, [pc, #560]	; (8005614 <HAL_RCC_OscConfig+0x934>)
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	461a      	mov	r2, r3
 80053e8:	2300      	movs	r3, #0
 80053ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ec:	f7fe fc42 	bl	8003c74 <HAL_GetTick>
 80053f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f4:	e009      	b.n	800540a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053f6:	f7fe fc3d 	bl	8003c74 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e36b      	b.n	8005ae2 <HAL_RCC_OscConfig+0xe02>
 800540a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800540e:	2202      	movs	r2, #2
 8005410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005412:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	fa93 f2a3 	rbit	r2, r3
 800541c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005426:	2202      	movs	r2, #2
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	fa93 f2a3 	rbit	r2, r3
 8005434:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800543e:	2202      	movs	r2, #2
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	fa93 f2a3 	rbit	r2, r3
 800544c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005450:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005452:	4b6f      	ldr	r3, [pc, #444]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 8005454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005456:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800545a:	2102      	movs	r1, #2
 800545c:	6019      	str	r1, [r3, #0]
 800545e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	fa93 f1a3 	rbit	r1, r3
 8005468:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800546c:	6019      	str	r1, [r3, #0]
  return result;
 800546e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	fab3 f383 	clz	r3, r3
 8005478:	b2db      	uxtb	r3, r3
 800547a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f303 	lsl.w	r3, r1, r3
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1b2      	bne.n	80053f6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005490:	1d3b      	adds	r3, r7, #4
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 8158 	beq.w	8005750 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a6:	4b5a      	ldr	r3, [pc, #360]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d112      	bne.n	80054d8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b2:	4b57      	ldr	r3, [pc, #348]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	4a56      	ldr	r2, [pc, #344]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 80054b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054bc:	61d3      	str	r3, [r2, #28]
 80054be:	4b54      	ldr	r3, [pc, #336]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80054c6:	f107 0308 	add.w	r3, r7, #8
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f107 0308 	add.w	r3, r7, #8
 80054d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d8:	4b4f      	ldr	r3, [pc, #316]	; (8005618 <HAL_RCC_OscConfig+0x938>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d11a      	bne.n	800551a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e4:	4b4c      	ldr	r3, [pc, #304]	; (8005618 <HAL_RCC_OscConfig+0x938>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a4b      	ldr	r2, [pc, #300]	; (8005618 <HAL_RCC_OscConfig+0x938>)
 80054ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f0:	f7fe fbc0 	bl	8003c74 <HAL_GetTick>
 80054f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f8:	e009      	b.n	800550e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fa:	f7fe fbbb 	bl	8003c74 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b64      	cmp	r3, #100	; 0x64
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e2e9      	b.n	8005ae2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550e:	4b42      	ldr	r3, [pc, #264]	; (8005618 <HAL_RCC_OscConfig+0x938>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0ef      	beq.n	80054fa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d106      	bne.n	8005532 <HAL_RCC_OscConfig+0x852>
 8005524:	4b3a      	ldr	r3, [pc, #232]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	4a39      	ldr	r2, [pc, #228]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6213      	str	r3, [r2, #32]
 8005530:	e02f      	b.n	8005592 <HAL_RCC_OscConfig+0x8b2>
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10c      	bne.n	8005556 <HAL_RCC_OscConfig+0x876>
 800553c:	4b34      	ldr	r3, [pc, #208]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	4a33      	ldr	r2, [pc, #204]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	6213      	str	r3, [r2, #32]
 8005548:	4b31      	ldr	r3, [pc, #196]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	4a30      	ldr	r2, [pc, #192]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 800554e:	f023 0304 	bic.w	r3, r3, #4
 8005552:	6213      	str	r3, [r2, #32]
 8005554:	e01d      	b.n	8005592 <HAL_RCC_OscConfig+0x8b2>
 8005556:	1d3b      	adds	r3, r7, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	2b05      	cmp	r3, #5
 800555e:	d10c      	bne.n	800557a <HAL_RCC_OscConfig+0x89a>
 8005560:	4b2b      	ldr	r3, [pc, #172]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	4a2a      	ldr	r2, [pc, #168]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 8005566:	f043 0304 	orr.w	r3, r3, #4
 800556a:	6213      	str	r3, [r2, #32]
 800556c:	4b28      	ldr	r3, [pc, #160]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	4a27      	ldr	r2, [pc, #156]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 8005572:	f043 0301 	orr.w	r3, r3, #1
 8005576:	6213      	str	r3, [r2, #32]
 8005578:	e00b      	b.n	8005592 <HAL_RCC_OscConfig+0x8b2>
 800557a:	4b25      	ldr	r3, [pc, #148]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	4a24      	ldr	r2, [pc, #144]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	6213      	str	r3, [r2, #32]
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	4a21      	ldr	r2, [pc, #132]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 800558c:	f023 0304 	bic.w	r3, r3, #4
 8005590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005592:	1d3b      	adds	r3, r7, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d06b      	beq.n	8005674 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800559c:	f7fe fb6a 	bl	8003c74 <HAL_GetTick>
 80055a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a4:	e00b      	b.n	80055be <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a6:	f7fe fb65 	bl	8003c74 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e291      	b.n	8005ae2 <HAL_RCC_OscConfig+0xe02>
 80055be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80055c2:	2202      	movs	r2, #2
 80055c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	fa93 f2a3 	rbit	r2, r3
 80055d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80055da:	2202      	movs	r2, #2
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	fa93 f2a3 	rbit	r2, r3
 80055e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80055ec:	601a      	str	r2, [r3, #0]
  return result;
 80055ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80055f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f4:	fab3 f383 	clz	r3, r3
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f043 0302 	orr.w	r3, r3, #2
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d109      	bne.n	800561c <HAL_RCC_OscConfig+0x93c>
 8005608:	4b01      	ldr	r3, [pc, #4]	; (8005610 <HAL_RCC_OscConfig+0x930>)
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	e014      	b.n	8005638 <HAL_RCC_OscConfig+0x958>
 800560e:	bf00      	nop
 8005610:	40021000 	.word	0x40021000
 8005614:	10908120 	.word	0x10908120
 8005618:	40007000 	.word	0x40007000
 800561c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005620:	2202      	movs	r2, #2
 8005622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	fa93 f2a3 	rbit	r2, r3
 800562e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	4bbb      	ldr	r3, [pc, #748]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800563c:	2102      	movs	r1, #2
 800563e:	6011      	str	r1, [r2, #0]
 8005640:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	fa92 f1a2 	rbit	r1, r2
 800564a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800564e:	6011      	str	r1, [r2, #0]
  return result;
 8005650:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	fab2 f282 	clz	r2, r2
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	f002 021f 	and.w	r2, r2, #31
 8005666:	2101      	movs	r1, #1
 8005668:	fa01 f202 	lsl.w	r2, r1, r2
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d099      	beq.n	80055a6 <HAL_RCC_OscConfig+0x8c6>
 8005672:	e063      	b.n	800573c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005674:	f7fe fafe 	bl	8003c74 <HAL_GetTick>
 8005678:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567c:	e00b      	b.n	8005696 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800567e:	f7fe faf9 	bl	8003c74 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	; 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e225      	b.n	8005ae2 <HAL_RCC_OscConfig+0xe02>
 8005696:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800569a:	2202      	movs	r2, #2
 800569c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	fa93 f2a3 	rbit	r2, r3
 80056a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80056b2:	2202      	movs	r2, #2
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	fa93 f2a3 	rbit	r2, r3
 80056c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80056c4:	601a      	str	r2, [r3, #0]
  return result;
 80056c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80056ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056cc:	fab3 f383 	clz	r3, r3
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f043 0302 	orr.w	r3, r3, #2
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d102      	bne.n	80056e6 <HAL_RCC_OscConfig+0xa06>
 80056e0:	4b90      	ldr	r3, [pc, #576]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	e00d      	b.n	8005702 <HAL_RCC_OscConfig+0xa22>
 80056e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80056ea:	2202      	movs	r2, #2
 80056ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	fa93 f2a3 	rbit	r2, r3
 80056f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	4b89      	ldr	r3, [pc, #548]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005706:	2102      	movs	r1, #2
 8005708:	6011      	str	r1, [r2, #0]
 800570a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	fa92 f1a2 	rbit	r1, r2
 8005714:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005718:	6011      	str	r1, [r2, #0]
  return result;
 800571a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	fab2 f282 	clz	r2, r2
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	f002 021f 	and.w	r2, r2, #31
 8005730:	2101      	movs	r1, #1
 8005732:	fa01 f202 	lsl.w	r2, r1, r2
 8005736:	4013      	ands	r3, r2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1a0      	bne.n	800567e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800573c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005740:	2b01      	cmp	r3, #1
 8005742:	d105      	bne.n	8005750 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005744:	4b77      	ldr	r3, [pc, #476]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	4a76      	ldr	r2, [pc, #472]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 800574a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 81c2 	beq.w	8005ae0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800575c:	4b71      	ldr	r3, [pc, #452]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f003 030c 	and.w	r3, r3, #12
 8005764:	2b08      	cmp	r3, #8
 8005766:	f000 819c 	beq.w	8005aa2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	2b02      	cmp	r3, #2
 8005772:	f040 8114 	bne.w	800599e <HAL_RCC_OscConfig+0xcbe>
 8005776:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800577a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800577e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005780:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	fa93 f2a3 	rbit	r2, r3
 800578a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800578e:	601a      	str	r2, [r3, #0]
  return result;
 8005790:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005794:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005796:	fab3 f383 	clz	r3, r3
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	461a      	mov	r2, r3
 80057a8:	2300      	movs	r3, #0
 80057aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ac:	f7fe fa62 	bl	8003c74 <HAL_GetTick>
 80057b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b4:	e009      	b.n	80057ca <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b6:	f7fe fa5d 	bl	8003c74 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e18b      	b.n	8005ae2 <HAL_RCC_OscConfig+0xe02>
 80057ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80057ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	fa93 f2a3 	rbit	r2, r3
 80057de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057e2:	601a      	str	r2, [r3, #0]
  return result;
 80057e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ea:	fab3 f383 	clz	r3, r3
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d102      	bne.n	8005804 <HAL_RCC_OscConfig+0xb24>
 80057fe:	4b49      	ldr	r3, [pc, #292]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	e01b      	b.n	800583c <HAL_RCC_OscConfig+0xb5c>
 8005804:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800580c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	fa93 f2a3 	rbit	r2, r3
 8005818:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	fa93 f2a3 	rbit	r2, r3
 8005832:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	4b3a      	ldr	r3, [pc, #232]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005840:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005844:	6011      	str	r1, [r2, #0]
 8005846:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	fa92 f1a2 	rbit	r1, r2
 8005850:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005854:	6011      	str	r1, [r2, #0]
  return result;
 8005856:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	fab2 f282 	clz	r2, r2
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	f042 0220 	orr.w	r2, r2, #32
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	f002 021f 	and.w	r2, r2, #31
 800586c:	2101      	movs	r1, #1
 800586e:	fa01 f202 	lsl.w	r2, r1, r2
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d19e      	bne.n	80057b6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005878:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005880:	1d3b      	adds	r3, r7, #4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005886:	1d3b      	adds	r3, r7, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	430b      	orrs	r3, r1
 800588e:	4925      	ldr	r1, [pc, #148]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
 8005894:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005898:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800589c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	fa93 f2a3 	rbit	r2, r3
 80058a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80058ac:	601a      	str	r2, [r3, #0]
  return result;
 80058ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80058b2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b4:	fab3 f383 	clz	r3, r3
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	461a      	mov	r2, r3
 80058c6:	2301      	movs	r3, #1
 80058c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ca:	f7fe f9d3 	bl	8003c74 <HAL_GetTick>
 80058ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058d2:	e009      	b.n	80058e8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fe f9ce 	bl	8003c74 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e0fc      	b.n	8005ae2 <HAL_RCC_OscConfig+0xe02>
 80058e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80058ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	fa93 f2a3 	rbit	r2, r3
 80058fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005900:	601a      	str	r2, [r3, #0]
  return result;
 8005902:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005906:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005908:	fab3 f383 	clz	r3, r3
 800590c:	b2db      	uxtb	r3, r3
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b01      	cmp	r3, #1
 800591a:	d105      	bne.n	8005928 <HAL_RCC_OscConfig+0xc48>
 800591c:	4b01      	ldr	r3, [pc, #4]	; (8005924 <HAL_RCC_OscConfig+0xc44>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	e01e      	b.n	8005960 <HAL_RCC_OscConfig+0xc80>
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800592c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005932:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	fa93 f2a3 	rbit	r2, r3
 800593c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	fa93 f2a3 	rbit	r2, r3
 8005956:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	4b63      	ldr	r3, [pc, #396]	; (8005aec <HAL_RCC_OscConfig+0xe0c>)
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005964:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005968:	6011      	str	r1, [r2, #0]
 800596a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	fa92 f1a2 	rbit	r1, r2
 8005974:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005978:	6011      	str	r1, [r2, #0]
  return result;
 800597a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	fab2 f282 	clz	r2, r2
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	f042 0220 	orr.w	r2, r2, #32
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	f002 021f 	and.w	r2, r2, #31
 8005990:	2101      	movs	r1, #1
 8005992:	fa01 f202 	lsl.w	r2, r1, r2
 8005996:	4013      	ands	r3, r2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d09b      	beq.n	80058d4 <HAL_RCC_OscConfig+0xbf4>
 800599c:	e0a0      	b.n	8005ae0 <HAL_RCC_OscConfig+0xe00>
 800599e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	fa93 f2a3 	rbit	r2, r3
 80059b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059b6:	601a      	str	r2, [r3, #0]
  return result;
 80059b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059be:	fab3 f383 	clz	r3, r3
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	461a      	mov	r2, r3
 80059d0:	2300      	movs	r3, #0
 80059d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d4:	f7fe f94e 	bl	8003c74 <HAL_GetTick>
 80059d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059dc:	e009      	b.n	80059f2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059de:	f7fe f949 	bl	8003c74 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e077      	b.n	8005ae2 <HAL_RCC_OscConfig+0xe02>
 80059f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	fa93 f2a3 	rbit	r2, r3
 8005a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a0a:	601a      	str	r2, [r3, #0]
  return result;
 8005a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a12:	fab3 f383 	clz	r3, r3
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d102      	bne.n	8005a2c <HAL_RCC_OscConfig+0xd4c>
 8005a26:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_RCC_OscConfig+0xe0c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	e01b      	b.n	8005a64 <HAL_RCC_OscConfig+0xd84>
 8005a2c:	f107 0320 	add.w	r3, r7, #32
 8005a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a36:	f107 0320 	add.w	r3, r7, #32
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	fa93 f2a3 	rbit	r2, r3
 8005a40:	f107 031c 	add.w	r3, r7, #28
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	f107 0318 	add.w	r3, r7, #24
 8005a4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f107 0318 	add.w	r3, r7, #24
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	fa93 f2a3 	rbit	r2, r3
 8005a5a:	f107 0314 	add.w	r3, r7, #20
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	4b22      	ldr	r3, [pc, #136]	; (8005aec <HAL_RCC_OscConfig+0xe0c>)
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	f107 0210 	add.w	r2, r7, #16
 8005a68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a6c:	6011      	str	r1, [r2, #0]
 8005a6e:	f107 0210 	add.w	r2, r7, #16
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	fa92 f1a2 	rbit	r1, r2
 8005a78:	f107 020c 	add.w	r2, r7, #12
 8005a7c:	6011      	str	r1, [r2, #0]
  return result;
 8005a7e:	f107 020c 	add.w	r2, r7, #12
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	fab2 f282 	clz	r2, r2
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	f042 0220 	orr.w	r2, r2, #32
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	f002 021f 	and.w	r2, r2, #31
 8005a94:	2101      	movs	r1, #1
 8005a96:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d19e      	bne.n	80059de <HAL_RCC_OscConfig+0xcfe>
 8005aa0:	e01e      	b.n	8005ae0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e018      	b.n	8005ae2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <HAL_RCC_OscConfig+0xe0c>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005ab8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005abc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ac0:	1d3b      	adds	r3, r7, #4
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d108      	bne.n	8005adc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005aca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005ace:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005ad2:	1d3b      	adds	r3, r7, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40021000 	.word	0x40021000

08005af0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b09e      	sub	sp, #120	; 0x78
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e162      	b.n	8005dce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b08:	4b90      	ldr	r3, [pc, #576]	; (8005d4c <HAL_RCC_ClockConfig+0x25c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d910      	bls.n	8005b38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b16:	4b8d      	ldr	r3, [pc, #564]	; (8005d4c <HAL_RCC_ClockConfig+0x25c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f023 0207 	bic.w	r2, r3, #7
 8005b1e:	498b      	ldr	r1, [pc, #556]	; (8005d4c <HAL_RCC_ClockConfig+0x25c>)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b26:	4b89      	ldr	r3, [pc, #548]	; (8005d4c <HAL_RCC_ClockConfig+0x25c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d001      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e14a      	b.n	8005dce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b44:	4b82      	ldr	r3, [pc, #520]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	497f      	ldr	r1, [pc, #508]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80dc 	beq.w	8005d1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d13c      	bne.n	8005be6 <HAL_RCC_ClockConfig+0xf6>
 8005b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b74:	fa93 f3a3 	rbit	r3, r3
 8005b78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7c:	fab3 f383 	clz	r3, r3
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f043 0301 	orr.w	r3, r3, #1
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d102      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xa6>
 8005b90:	4b6f      	ldr	r3, [pc, #444]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	e00f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0xc6>
 8005b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b9e:	fa93 f3a3 	rbit	r3, r3
 8005ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8005ba4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8005baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bac:	fa93 f3a3 	rbit	r3, r3
 8005bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bb2:	4b67      	ldr	r3, [pc, #412]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bba:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bbe:	fa92 f2a2 	rbit	r2, r2
 8005bc2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bc6:	fab2 f282 	clz	r2, r2
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	f042 0220 	orr.w	r2, r2, #32
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	f002 021f 	and.w	r2, r2, #31
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d17b      	bne.n	8005cda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e0f3      	b.n	8005dce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d13c      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x178>
 8005bee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bf2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf6:	fa93 f3a3 	rbit	r3, r3
 8005bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bfe:	fab3 f383 	clz	r3, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d102      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x128>
 8005c12:	4b4f      	ldr	r3, [pc, #316]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	e00f      	b.n	8005c38 <HAL_RCC_ClockConfig+0x148>
 8005c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c20:	fa93 f3a3 	rbit	r3, r3
 8005c24:	647b      	str	r3, [r7, #68]	; 0x44
 8005c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2e:	fa93 f3a3 	rbit	r3, r3
 8005c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c34:	4b46      	ldr	r3, [pc, #280]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c40:	fa92 f2a2 	rbit	r2, r2
 8005c44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c48:	fab2 f282 	clz	r2, r2
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	f042 0220 	orr.w	r2, r2, #32
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	f002 021f 	and.w	r2, r2, #31
 8005c58:	2101      	movs	r1, #1
 8005c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c5e:	4013      	ands	r3, r2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d13a      	bne.n	8005cda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0b2      	b.n	8005dce <HAL_RCC_ClockConfig+0x2de>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	fa93 f3a3 	rbit	r3, r3
 8005c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c76:	fab3 f383 	clz	r3, r3
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	f043 0301 	orr.w	r3, r3, #1
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d102      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x1a0>
 8005c8a:	4b31      	ldr	r3, [pc, #196]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	e00d      	b.n	8005cac <HAL_RCC_ClockConfig+0x1bc>
 8005c90:	2302      	movs	r3, #2
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	fa93 f3a3 	rbit	r3, r3
 8005c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	623b      	str	r3, [r7, #32]
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	fa93 f3a3 	rbit	r3, r3
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	4b29      	ldr	r3, [pc, #164]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	2202      	movs	r2, #2
 8005cae:	61ba      	str	r2, [r7, #24]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	fa92 f2a2 	rbit	r2, r2
 8005cb6:	617a      	str	r2, [r7, #20]
  return result;
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	fab2 f282 	clz	r2, r2
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	f042 0220 	orr.w	r2, r2, #32
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	f002 021f 	and.w	r2, r2, #31
 8005cca:	2101      	movs	r1, #1
 8005ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e079      	b.n	8005dce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cda:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f023 0203 	bic.w	r2, r3, #3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	491a      	ldr	r1, [pc, #104]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cec:	f7fd ffc2 	bl	8003c74 <HAL_GetTick>
 8005cf0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf4:	f7fd ffbe 	bl	8003c74 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e061      	b.n	8005dce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0a:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_RCC_ClockConfig+0x260>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 020c 	and.w	r2, r3, #12
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d1eb      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCC_ClockConfig+0x25c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d214      	bcs.n	8005d54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2a:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <HAL_RCC_ClockConfig+0x25c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f023 0207 	bic.w	r2, r3, #7
 8005d32:	4906      	ldr	r1, [pc, #24]	; (8005d4c <HAL_RCC_ClockConfig+0x25c>)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3a:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <HAL_RCC_ClockConfig+0x25c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e040      	b.n	8005dce <HAL_RCC_ClockConfig+0x2de>
 8005d4c:	40022000 	.word	0x40022000
 8005d50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d60:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	491a      	ldr	r1, [pc, #104]	; (8005dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d7e:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	4912      	ldr	r1, [pc, #72]	; (8005dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d92:	f000 f829 	bl	8005de8 <HAL_RCC_GetSysClockFreq>
 8005d96:	4601      	mov	r1, r0
 8005d98:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <HAL_RCC_ClockConfig+0x2e8>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da0:	22f0      	movs	r2, #240	; 0xf0
 8005da2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	fa92 f2a2 	rbit	r2, r2
 8005daa:	60fa      	str	r2, [r7, #12]
  return result;
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	fab2 f282 	clz	r2, r2
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	40d3      	lsrs	r3, r2
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <HAL_RCC_ClockConfig+0x2ec>)
 8005db8:	5cd3      	ldrb	r3, [r2, r3]
 8005dba:	fa21 f303 	lsr.w	r3, r1, r3
 8005dbe:	4a08      	ldr	r2, [pc, #32]	; (8005de0 <HAL_RCC_ClockConfig+0x2f0>)
 8005dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005dc2:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <HAL_RCC_ClockConfig+0x2f4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fd ff10 	bl	8003bec <HAL_InitTick>
  
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3778      	adds	r7, #120	; 0x78
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40021000 	.word	0x40021000
 8005ddc:	08008c78 	.word	0x08008c78
 8005de0:	20000164 	.word	0x20000164
 8005de4:	20000168 	.word	0x20000168

08005de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b08b      	sub	sp, #44	; 0x2c
 8005dec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	2300      	movs	r3, #0
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005e02:	4b29      	ldr	r3, [pc, #164]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d002      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x30>
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d003      	beq.n	8005e1e <HAL_RCC_GetSysClockFreq+0x36>
 8005e16:	e03c      	b.n	8005e92 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e18:	4b24      	ldr	r3, [pc, #144]	; (8005eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e1a:	623b      	str	r3, [r7, #32]
      break;
 8005e1c:	e03c      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005e24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005e28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	fa92 f2a2 	rbit	r2, r2
 8005e30:	607a      	str	r2, [r7, #4]
  return result;
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	fab2 f282 	clz	r2, r2
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	40d3      	lsrs	r3, r2
 8005e3c:	4a1c      	ldr	r2, [pc, #112]	; (8005eb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e3e:	5cd3      	ldrb	r3, [r2, r3]
 8005e40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005e42:	4b19      	ldr	r3, [pc, #100]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	220f      	movs	r2, #15
 8005e4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	fa92 f2a2 	rbit	r2, r2
 8005e54:	60fa      	str	r2, [r7, #12]
  return result;
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	fab2 f282 	clz	r2, r2
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	40d3      	lsrs	r3, r2
 8005e60:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e62:	5cd3      	ldrb	r3, [r2, r3]
 8005e64:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d008      	beq.n	8005e82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e70:	4a0e      	ldr	r2, [pc, #56]	; (8005eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e80:	e004      	b.n	8005e8c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	4a0c      	ldr	r2, [pc, #48]	; (8005eb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	623b      	str	r3, [r7, #32]
      break;
 8005e90:	e002      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e92:	4b0a      	ldr	r3, [pc, #40]	; (8005ebc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e94:	623b      	str	r3, [r7, #32]
      break;
 8005e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e98:	6a3b      	ldr	r3, [r7, #32]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	372c      	adds	r7, #44	; 0x2c
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	00f42400 	.word	0x00f42400
 8005eb0:	08008c88 	.word	0x08008c88
 8005eb4:	08008c98 	.word	0x08008c98
 8005eb8:	003d0900 	.word	0x003d0900
 8005ebc:	007a1200 	.word	0x007a1200

08005ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b092      	sub	sp, #72	; 0x48
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 80d4 	beq.w	800608c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ee4:	4b4e      	ldr	r3, [pc, #312]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10e      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ef0:	4b4b      	ldr	r3, [pc, #300]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	4a4a      	ldr	r2, [pc, #296]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efa:	61d3      	str	r3, [r2, #28]
 8005efc:	4b48      	ldr	r3, [pc, #288]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0e:	4b45      	ldr	r3, [pc, #276]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d118      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f1a:	4b42      	ldr	r3, [pc, #264]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a41      	ldr	r2, [pc, #260]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f26:	f7fd fea5 	bl	8003c74 <HAL_GetTick>
 8005f2a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2c:	e008      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2e:	f7fd fea1 	bl	8003c74 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b64      	cmp	r3, #100	; 0x64
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e12d      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f40:	4b38      	ldr	r3, [pc, #224]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f4c:	4b34      	ldr	r3, [pc, #208]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8084 	beq.w	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d07c      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f6c:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	fa93 f3a3 	rbit	r3, r3
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f86:	fab3 f383 	clz	r3, r3
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4b26      	ldr	r3, [pc, #152]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	461a      	mov	r2, r3
 8005f96:	2301      	movs	r3, #1
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa2:	fa93 f3a3 	rbit	r3, r3
 8005fa6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005faa:	fab3 f383 	clz	r3, r3
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4b1d      	ldr	r3, [pc, #116]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fbe:	4a18      	ldr	r2, [pc, #96]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d04b      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fce:	f7fd fe51 	bl	8003c74 <HAL_GetTick>
 8005fd2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd4:	e00a      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd6:	f7fd fe4d 	bl	8003c74 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e0d7      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005fec:	2302      	movs	r3, #2
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	fa93 f3a3 	rbit	r3, r3
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	623b      	str	r3, [r7, #32]
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	fa93 f3a3 	rbit	r3, r3
 8006002:	61fb      	str	r3, [r7, #28]
  return result;
 8006004:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006006:	fab3 f383 	clz	r3, r3
 800600a:	b2db      	uxtb	r3, r3
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f043 0302 	orr.w	r3, r3, #2
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d108      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800601a:	4b01      	ldr	r3, [pc, #4]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	e00d      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006020:	40021000 	.word	0x40021000
 8006024:	40007000 	.word	0x40007000
 8006028:	10908100 	.word	0x10908100
 800602c:	2302      	movs	r3, #2
 800602e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	fa93 f3a3 	rbit	r3, r3
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	4b5a      	ldr	r3, [pc, #360]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	2202      	movs	r2, #2
 800603e:	613a      	str	r2, [r7, #16]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	fa92 f2a2 	rbit	r2, r2
 8006046:	60fa      	str	r2, [r7, #12]
  return result;
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	fab2 f282 	clz	r2, r2
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	f002 021f 	and.w	r2, r2, #31
 800605a:	2101      	movs	r1, #1
 800605c:	fa01 f202 	lsl.w	r2, r1, r2
 8006060:	4013      	ands	r3, r2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0b7      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006066:	4b4f      	ldr	r3, [pc, #316]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	494c      	ldr	r1, [pc, #304]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006074:	4313      	orrs	r3, r2
 8006076:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006078:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800607c:	2b01      	cmp	r3, #1
 800607e:	d105      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006080:	4b48      	ldr	r3, [pc, #288]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	4a47      	ldr	r2, [pc, #284]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006098:	4b42      	ldr	r3, [pc, #264]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	f023 0203 	bic.w	r2, r3, #3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	493f      	ldr	r1, [pc, #252]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060b6:	4b3b      	ldr	r3, [pc, #236]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	4938      	ldr	r1, [pc, #224]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060d4:	4b33      	ldr	r3, [pc, #204]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	4930      	ldr	r1, [pc, #192]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d008      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060f2:	4b2c      	ldr	r3, [pc, #176]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	f023 0210 	bic.w	r2, r3, #16
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	4929      	ldr	r1, [pc, #164]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006100:	4313      	orrs	r3, r2
 8006102:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006110:	4b24      	ldr	r3, [pc, #144]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	4921      	ldr	r1, [pc, #132]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800611e:	4313      	orrs	r3, r2
 8006120:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800612e:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	f023 0220 	bic.w	r2, r3, #32
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	491a      	ldr	r1, [pc, #104]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800613c:	4313      	orrs	r3, r2
 800613e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b00      	cmp	r3, #0
 800614a:	d008      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800614c:	4b15      	ldr	r3, [pc, #84]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	4912      	ldr	r1, [pc, #72]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800615a:	4313      	orrs	r3, r2
 800615c:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006166:	2b00      	cmp	r3, #0
 8006168:	d008      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800616a:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	490b      	ldr	r1, [pc, #44]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006178:	4313      	orrs	r3, r2
 800617a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006188:	4b06      	ldr	r3, [pc, #24]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	4903      	ldr	r1, [pc, #12]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006196:	4313      	orrs	r3, r2
 8006198:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3748      	adds	r7, #72	; 0x48
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40021000 	.word	0x40021000

080061a8 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e073      	b.n	80062a2 <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061e4:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7fd fb1b 	bl	8003834 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800620c:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006234:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6859      	ldr	r1, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8006248:	4b18      	ldr	r3, [pc, #96]	; (80062ac <HAL_SDADC_Init+0x104>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	429a      	cmp	r2, r3
 8006256:	d00f      	beq.n	8006278 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8006258:	4b14      	ldr	r3, [pc, #80]	; (80062ac <HAL_SDADC_Init+0x104>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a13      	ldr	r2, [pc, #76]	; (80062ac <HAL_SDADC_Init+0x104>)
 800625e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006262:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8006264:	4b11      	ldr	r3, [pc, #68]	; (80062ac <HAL_SDADC_Init+0x104>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	490f      	ldr	r1, [pc, #60]	; (80062ac <HAL_SDADC_Init+0x104>)
 800626e:	4313      	orrs	r3, r2
 8006270:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8006272:	2002      	movs	r0, #2
 8006274:	f7fd fd0a 	bl	8003c8c <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8006288:	bf00      	nop
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f8      	bne.n	800628a <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40016000 	.word	0x40016000

080062b0 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d002      	beq.n	80062d0 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	75fb      	strb	r3, [r7, #23]
 80062ce:	e025      	b.n	800631c <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fa59 	bl	8006788 <SDADC_EnterInitMode>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d006      	beq.n	80062ea <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	22ff      	movs	r2, #255	; 0xff
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	75fb      	strb	r3, [r7, #23]
 80062e8:	e018      	b.n	800631c <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80062f4:	4413      	add	r3, r2
 80062f6:	3320      	adds	r3, #32
 80062f8:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006302:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8006308:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006310:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8006312:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006314:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fa59 	bl	80067ce <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 800631c:	7dfb      	ldrb	r3, [r7, #23]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d002      	beq.n	8006348 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	75fb      	strb	r3, [r7, #23]
 8006346:	e037      	b.n	80063b8 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fa1d 	bl	8006788 <SDADC_EnterInitMode>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d006      	beq.n	8006362 <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	22ff      	movs	r2, #255	; 0xff
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	75fb      	strb	r3, [r7, #23]
 8006360:	e02a      	b.n	80063b8 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d01f      	beq.n	80063aa <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	0c1b      	lsrs	r3, r3, #16
 800636e:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	2203      	movs	r2, #3
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	43da      	mvns	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	400a      	ands	r2, r1
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	409a      	lsls	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	641a      	str	r2, [r3, #64]	; 0x40
 80063a8:	e003      	b.n	80063b2 <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	645a      	str	r2, [r3, #68]	; 0x44
      }      
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 fa0b 	bl	80067ce <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	00080100 	.word	0x00080100

080063c8 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d02a      	beq.n	8006438 <HAL_SDADC_ConfigChannel+0x70>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e8:	2bff      	cmp	r3, #255	; 0xff
 80063ea:	d025      	beq.n	8006438 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 80063fa:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d10c      	bne.n	800641c <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);    
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	4b10      	ldr	r3, [pc, #64]	; (800644c <HAL_SDADC_ConfigChannel+0x84>)
 800640c:	400b      	ands	r3, r1
 800640e:	431a      	orrs	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	e009      	b.n	8006430 <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));    
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6859      	ldr	r1, [r3, #4]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	0c1b      	lsrs	r3, r3, #16
 8006426:	041b      	lsls	r3, r3, #16
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	430b      	orrs	r3, r1
 800642e:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	619a      	str	r2, [r3, #24]
 8006436:	e001      	b.n	800643c <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800643c:	7dfb      	ldrb	r3, [r7, #23]
}
 800643e:	4618      	mov	r0, r3
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	ffbf0000 	.word	0xffbf0000

08006450 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d12c      	bne.n	80064c2 <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f98d 	bl	8006788 <SDADC_EnterInitMode>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	22ff      	movs	r2, #255	; 0xff
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	73fb      	strb	r3, [r7, #15]
 8006480:	e021      	b.n	80064c6 <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0206 	bic.w	r2, r2, #6
 8006490:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6859      	ldr	r1, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f993 	bl	80067ce <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0210 	orr.w	r2, r2, #16
 80064b6:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064c0:	e001      	b.n	80064c6 <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d001      	beq.n	80064e8 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e028      	b.n	800653a <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 80064e8:	f7fd fbc4 	bl	8003c74 <HAL_GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 80064ee:	e010      	b.n	8006512 <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f6:	d00c      	beq.n	8006512 <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 80064f8:	f7fd fbbc 	bl	8003c74 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d302      	bcc.n	800650e <HAL_SDADC_PollForCalibEvent+0x3e>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e013      	b.n	800653a <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b01      	cmp	r3, #1
 800651e:	d1e7      	bne.n	80064f0 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 8006538:	2300      	movs	r3, #0
  }
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_SDADC_Start_IT>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start_IT(SDADC_HandleTypeDef *hsdadc)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d004      	beq.n	800655e <HAL_SDADC_Start_IT+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800655a:	2b04      	cmp	r3, #4
 800655c:	d10d      	bne.n	800657a <HAL_SDADC_Start_IT+0x38>
  {
    /* Set REOCIE and ROVRIE bits in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= (uint32_t) (SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0218 	orr.w	r2, r2, #24
 800656c:	601a      	str	r2, [r3, #0]

    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f93f 	bl	80067f2 <SDADC_RegConvStart>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
 8006578:	e001      	b.n	800657e <HAL_SDADC_Start_IT+0x3c>
  }
  else
  {
    status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8006596:	4618      	mov	r0, r3
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <HAL_SDADC_IRQHandler>:
  * @brief  This function handles the SDADC interrupts.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
void HAL_SDADC_IRQHandler(SDADC_HandleTypeDef* hsdadc)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	60fb      	str	r3, [r7, #12]
    
  /* Check if end of regular conversion */
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d125      	bne.n	800660c <HAL_SDADC_IRQHandler+0x6a>
     ((tmp_isr & SDADC_ISR_REOCF) == SDADC_ISR_REOCF))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0308 	and.w	r3, r3, #8
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d020      	beq.n	800660c <HAL_SDADC_IRQHandler+0x6a>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ConvCpltCallback(hsdadc);
#else
    HAL_SDADC_ConvCpltCallback(hsdadc);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fb fa3e 	bl	8001a4c <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* End of conversion if mode is not continuous and software trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f040 80b1 	bne.w	800673c <HAL_SDADC_IRQHandler+0x19a>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 80ac 	bne.w	800673c <HAL_SDADC_IRQHandler+0x19a>
    {
      /* Clear REOCIE and ROVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0218 	bic.w	r2, r2, #24
 80065f2:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d101      	bne.n	8006602 <HAL_SDADC_IRQHandler+0x60>
 80065fe:	2201      	movs	r2, #1
 8006600:	e000      	b.n	8006604 <HAL_SDADC_IRQHandler+0x62>
 8006602:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800660a:	e097      	b.n	800673c <HAL_SDADC_IRQHandler+0x19a>
    }
  }
  /* Check if end of injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b02      	cmp	r3, #2
 8006618:	d136      	bne.n	8006688 <HAL_SDADC_IRQHandler+0xe6>
          ((tmp_isr & SDADC_ISR_JEOCF) == SDADC_ISR_JEOCF))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f003 0302 	and.w	r3, r3, #2
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8006620:	2b00      	cmp	r3, #0
 8006622:	d031      	beq.n	8006688 <HAL_SDADC_IRQHandler+0xe6>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->InjectedConvCpltCallback(hsdadc);
#else
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f89b 	bl	8006760 <HAL_SDADC_InjectedConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	1e5a      	subs	r2, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	625a      	str	r2, [r3, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	d103      	bne.n	8006644 <HAL_SDADC_IRQHandler+0xa2>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1a      	ldr	r2, [r3, #32]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* End of conversion if mode is not continuous, software trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d179      	bne.n	8006740 <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006650:	2b00      	cmp	r3, #0
 8006652:	d175      	bne.n	8006740 <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 800665c:	429a      	cmp	r2, r3
 800665e:	d16f      	bne.n	8006740 <HAL_SDADC_IRQHandler+0x19e>
    {
      /* Clear JEOCIE and JOVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0206 	bic.w	r2, r2, #6
 800666e:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8006676:	2b04      	cmp	r3, #4
 8006678:	d101      	bne.n	800667e <HAL_SDADC_IRQHandler+0xdc>
 800667a:	2201      	movs	r2, #1
 800667c:	e000      	b.n	8006680 <HAL_SDADC_IRQHandler+0xde>
 800667e:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006686:	e05b      	b.n	8006740 <HAL_SDADC_IRQHandler+0x19e>
    }
  }
  /* Check if end of calibration */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b01      	cmp	r3, #1
 8006694:	d11c      	bne.n	80066d0 <HAL_SDADC_IRQHandler+0x12e>
          ((tmp_isr & SDADC_ISR_EOCALF) == SDADC_ISR_EOCALF))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f003 0301 	and.w	r3, r3, #1
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 800669c:	2b00      	cmp	r3, #0
 800669e:	d017      	beq.n	80066d0 <HAL_SDADC_IRQHandler+0x12e>
  {
    /* Clear EOCALIE bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0201 	orr.w	r2, r2, #1
 80066be:	60da      	str	r2, [r3, #12]

    /* Call calibration callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->CalibrationCpltCallback(hsdadc);
#else
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f843 	bl	800674c <HAL_SDADC_CalibrationCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update SDADC state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066ce:	e038      	b.n	8006742 <HAL_SDADC_IRQHandler+0x1a0>
  }
  /* Check if overrun occurs during regular conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b10      	cmp	r3, #16
 80066dc:	d113      	bne.n	8006706 <HAL_SDADC_IRQHandler+0x164>
          ((tmp_isr & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f003 0310 	and.w	r3, r3, #16
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00e      	beq.n	8006706 <HAL_SDADC_IRQHandler+0x164>
  {
    /* Set CLRROVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0210 	orr.w	r2, r2, #16
 80066f6:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f838 	bl	8006774 <HAL_SDADC_ErrorCallback>
 8006704:	e01d      	b.n	8006742 <HAL_SDADC_IRQHandler+0x1a0>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  }
  /* Check if overrun occurs during injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b04      	cmp	r3, #4
 8006712:	d117      	bne.n	8006744 <HAL_SDADC_IRQHandler+0x1a2>
          ((tmp_isr & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 0304 	and.w	r3, r3, #4
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 800671a:	2b00      	cmp	r3, #0
 800671c:	d012      	beq.n	8006744 <HAL_SDADC_IRQHandler+0x1a2>
  {
    /* Set CLRJOVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0204 	orr.w	r2, r2, #4
 800672c:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f81d 	bl	8006774 <HAL_SDADC_ErrorCallback>
  else
  {
    /* No additional IRQ source */
  }
  
  return;
 800673a:	e002      	b.n	8006742 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800673c:	bf00      	nop
 800673e:	e000      	b.n	8006742 <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006740:	bf00      	nop
  return;
 8006742:	bf00      	nop
 8006744:	bf00      	nop
}
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_SDADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_CalibrationCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_CalibrationCpltCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_SDADC_InjectedConvCpltCallback>:
            using HAL_SDADC_InjectedGetValue or HAL_SDADC_InjectedMultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_InjectedConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_InjectedConvCpltCallback could be implemented in the user file.
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800679e:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 80067a0:	f7fd fa68 	bl	8003c74 <HAL_GetTick>
 80067a4:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80067a6:	e008      	b.n	80067ba <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 80067a8:	f7fd fa64 	bl	8003c74 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2bc8      	cmp	r3, #200	; 0xc8
 80067b4:	d901      	bls.n	80067ba <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e005      	b.n	80067c6 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	daf1      	bge.n	80067a8 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80067e4:	601a      	str	r2, [r3, #0]
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d108      	bne.n	8006818 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006814:	605a      	str	r2, [r3, #4]
 8006816:	e017      	b.n	8006848 <SDADC_RegConvStart+0x56>
  }
  else /* synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff ffb5 	bl	8006788 <SDADC_EnterInitMode>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d006      	beq.n	8006832 <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	22ff      	movs	r2, #255	; 0xff
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	73fb      	strb	r3, [r7, #15]
 8006830:	e00a      	b.n	8006848 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006840:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff ffc3 	bl	80067ce <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 8006854:	2b01      	cmp	r3, #1
 8006856:	d101      	bne.n	800685c <SDADC_RegConvStart+0x6a>
 8006858:	2203      	movs	r2, #3
 800685a:	e000      	b.n	800685e <SDADC_RegConvStart+0x6c>
 800685c:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e041      	b.n	8006904 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fd f881 	bl	800399c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f000 fae9 	bl	8006e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	d001      	beq.n	8006924 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e041      	b.n	80069a8 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006934:	d01d      	beq.n	8006972 <HAL_TIM_Base_Start+0x66>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <HAL_TIM_Base_Start+0xa8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d018      	beq.n	8006972 <HAL_TIM_Base_Start+0x66>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1c      	ldr	r2, [pc, #112]	; (80069b8 <HAL_TIM_Base_Start+0xac>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <HAL_TIM_Base_Start+0x66>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1b      	ldr	r2, [pc, #108]	; (80069bc <HAL_TIM_Base_Start+0xb0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <HAL_TIM_Base_Start+0x66>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <HAL_TIM_Base_Start+0xb4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_TIM_Base_Start+0x66>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <HAL_TIM_Base_Start+0xb8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_TIM_Base_Start+0x66>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a16      	ldr	r2, [pc, #88]	; (80069c8 <HAL_TIM_Base_Start+0xbc>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d111      	bne.n	8006996 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b06      	cmp	r3, #6
 8006982:	d010      	beq.n	80069a6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0201 	orr.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006994:	e007      	b.n	80069a6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40001800 	.word	0x40001800
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40015c00 	.word	0x40015c00

080069cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d001      	beq.n	80069e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e049      	b.n	8006a78 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a04:	d01d      	beq.n	8006a42 <HAL_TIM_Base_Start_IT+0x76>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <HAL_TIM_Base_Start_IT+0xb8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d018      	beq.n	8006a42 <HAL_TIM_Base_Start_IT+0x76>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a1c      	ldr	r2, [pc, #112]	; (8006a88 <HAL_TIM_Base_Start_IT+0xbc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <HAL_TIM_Base_Start_IT+0x76>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a1b      	ldr	r2, [pc, #108]	; (8006a8c <HAL_TIM_Base_Start_IT+0xc0>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00e      	beq.n	8006a42 <HAL_TIM_Base_Start_IT+0x76>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a19      	ldr	r2, [pc, #100]	; (8006a90 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d009      	beq.n	8006a42 <HAL_TIM_Base_Start_IT+0x76>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d004      	beq.n	8006a42 <HAL_TIM_Base_Start_IT+0x76>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a16      	ldr	r2, [pc, #88]	; (8006a98 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d111      	bne.n	8006a66 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b06      	cmp	r3, #6
 8006a52:	d010      	beq.n	8006a76 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a64:	e007      	b.n	8006a76 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0201 	orr.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40001800 	.word	0x40001800
 8006a94:	40014000 	.word	0x40014000
 8006a98:	40015c00 	.word	0x40015c00

08006a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d122      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d11b      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0202 	mvn.w	r2, #2
 8006ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f9b2 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 8006ae4:	e005      	b.n	8006af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9a4 	bl	8006e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f9b5 	bl	8006e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d122      	bne.n	8006b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d11b      	bne.n	8006b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0204 	mvn.w	r2, #4
 8006b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f988 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 8006b38:	e005      	b.n	8006b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f97a 	bl	8006e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f98b 	bl	8006e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d122      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d11b      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0208 	mvn.w	r2, #8
 8006b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2204      	movs	r2, #4
 8006b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f95e 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 8006b8c:	e005      	b.n	8006b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f950 	bl	8006e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f961 	bl	8006e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b10      	cmp	r3, #16
 8006bac:	d122      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b10      	cmp	r3, #16
 8006bba:	d11b      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0210 	mvn.w	r2, #16
 8006bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f934 	bl	8006e48 <HAL_TIM_IC_CaptureCallback>
 8006be0:	e005      	b.n	8006bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f926 	bl	8006e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f937 	bl	8006e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d10e      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d107      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0201 	mvn.w	r2, #1
 8006c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fb f836 	bl	8001c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	d10e      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c38:	2b80      	cmp	r3, #128	; 0x80
 8006c3a:	d107      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 face 	bl	80071e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c56:	2b40      	cmp	r3, #64	; 0x40
 8006c58:	d10e      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c64:	2b40      	cmp	r3, #64	; 0x40
 8006c66:	d107      	bne.n	8006c78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f8fc 	bl	8006e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d10e      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d107      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0220 	mvn.w	r2, #32
 8006c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fa98 	bl	80071d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_TIM_ConfigClockSource+0x18>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e0b3      	b.n	8006e2c <HAL_TIM_ConfigClockSource+0x180>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cfc:	d03e      	beq.n	8006d7c <HAL_TIM_ConfigClockSource+0xd0>
 8006cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d02:	f200 8087 	bhi.w	8006e14 <HAL_TIM_ConfigClockSource+0x168>
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0a:	f000 8085 	beq.w	8006e18 <HAL_TIM_ConfigClockSource+0x16c>
 8006d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d12:	d87f      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x168>
 8006d14:	2b70      	cmp	r3, #112	; 0x70
 8006d16:	d01a      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0xa2>
 8006d18:	2b70      	cmp	r3, #112	; 0x70
 8006d1a:	d87b      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x168>
 8006d1c:	2b60      	cmp	r3, #96	; 0x60
 8006d1e:	d050      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x116>
 8006d20:	2b60      	cmp	r3, #96	; 0x60
 8006d22:	d877      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x168>
 8006d24:	2b50      	cmp	r3, #80	; 0x50
 8006d26:	d03c      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0xf6>
 8006d28:	2b50      	cmp	r3, #80	; 0x50
 8006d2a:	d873      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x168>
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	d058      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x136>
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d86f      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x168>
 8006d34:	2b30      	cmp	r3, #48	; 0x30
 8006d36:	d064      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x156>
 8006d38:	2b30      	cmp	r3, #48	; 0x30
 8006d3a:	d86b      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x168>
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d060      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x156>
 8006d40:	2b20      	cmp	r3, #32
 8006d42:	d867      	bhi.n	8006e14 <HAL_TIM_ConfigClockSource+0x168>
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d05c      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x156>
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d05a      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d4c:	e062      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6899      	ldr	r1, [r3, #8]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f000 f9a5 	bl	80070ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	609a      	str	r2, [r3, #8]
      break;
 8006d7a:	e04e      	b.n	8006e1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	6899      	ldr	r1, [r3, #8]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f000 f98e 	bl	80070ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d9e:	609a      	str	r2, [r3, #8]
      break;
 8006da0:	e03b      	b.n	8006e1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f000 f902 	bl	8006fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2150      	movs	r1, #80	; 0x50
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f95b 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e02b      	b.n	8006e1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f000 f921 	bl	8007016 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2160      	movs	r1, #96	; 0x60
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f94b 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006de0:	e01b      	b.n	8006e1a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6818      	ldr	r0, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6859      	ldr	r1, [r3, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	461a      	mov	r2, r3
 8006df0:	f000 f8e2 	bl	8006fb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2140      	movs	r1, #64	; 0x40
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 f93b 	bl	8007076 <TIM_ITRx_SetConfig>
      break;
 8006e00:	e00b      	b.n	8006e1a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	f000 f932 	bl	8007076 <TIM_ITRx_SetConfig>
        break;
 8006e12:	e002      	b.n	8006e1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e14:	bf00      	nop
 8006e16:	e000      	b.n	8006e1a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d00f      	beq.n	8006ebc <TIM_Base_SetConfig+0x38>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a3c      	ldr	r2, [pc, #240]	; (8006f90 <TIM_Base_SetConfig+0x10c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00b      	beq.n	8006ebc <TIM_Base_SetConfig+0x38>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a3b      	ldr	r2, [pc, #236]	; (8006f94 <TIM_Base_SetConfig+0x110>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d007      	beq.n	8006ebc <TIM_Base_SetConfig+0x38>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a3a      	ldr	r2, [pc, #232]	; (8006f98 <TIM_Base_SetConfig+0x114>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d003      	beq.n	8006ebc <TIM_Base_SetConfig+0x38>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a39      	ldr	r2, [pc, #228]	; (8006f9c <TIM_Base_SetConfig+0x118>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d108      	bne.n	8006ece <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed4:	d027      	beq.n	8006f26 <TIM_Base_SetConfig+0xa2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a2d      	ldr	r2, [pc, #180]	; (8006f90 <TIM_Base_SetConfig+0x10c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d023      	beq.n	8006f26 <TIM_Base_SetConfig+0xa2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a2c      	ldr	r2, [pc, #176]	; (8006f94 <TIM_Base_SetConfig+0x110>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d01f      	beq.n	8006f26 <TIM_Base_SetConfig+0xa2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a2b      	ldr	r2, [pc, #172]	; (8006f98 <TIM_Base_SetConfig+0x114>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d01b      	beq.n	8006f26 <TIM_Base_SetConfig+0xa2>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a2b      	ldr	r2, [pc, #172]	; (8006fa0 <TIM_Base_SetConfig+0x11c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d017      	beq.n	8006f26 <TIM_Base_SetConfig+0xa2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a2a      	ldr	r2, [pc, #168]	; (8006fa4 <TIM_Base_SetConfig+0x120>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d013      	beq.n	8006f26 <TIM_Base_SetConfig+0xa2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a29      	ldr	r2, [pc, #164]	; (8006fa8 <TIM_Base_SetConfig+0x124>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00f      	beq.n	8006f26 <TIM_Base_SetConfig+0xa2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a28      	ldr	r2, [pc, #160]	; (8006fac <TIM_Base_SetConfig+0x128>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d00b      	beq.n	8006f26 <TIM_Base_SetConfig+0xa2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a27      	ldr	r2, [pc, #156]	; (8006fb0 <TIM_Base_SetConfig+0x12c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d007      	beq.n	8006f26 <TIM_Base_SetConfig+0xa2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <TIM_Base_SetConfig+0x130>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d003      	beq.n	8006f26 <TIM_Base_SetConfig+0xa2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a1e      	ldr	r2, [pc, #120]	; (8006f9c <TIM_Base_SetConfig+0x118>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d108      	bne.n	8006f38 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a13      	ldr	r2, [pc, #76]	; (8006fac <TIM_Base_SetConfig+0x128>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d007      	beq.n	8006f74 <TIM_Base_SetConfig+0xf0>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a12      	ldr	r2, [pc, #72]	; (8006fb0 <TIM_Base_SetConfig+0x12c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d003      	beq.n	8006f74 <TIM_Base_SetConfig+0xf0>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a11      	ldr	r2, [pc, #68]	; (8006fb4 <TIM_Base_SetConfig+0x130>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d103      	bne.n	8006f7c <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	615a      	str	r2, [r3, #20]
}
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40015c00 	.word	0x40015c00
 8006fa0:	40001800 	.word	0x40001800
 8006fa4:	40001c00 	.word	0x40001c00
 8006fa8:	40002000 	.word	0x40002000
 8006fac:	40014000 	.word	0x40014000
 8006fb0:	40014400 	.word	0x40014400
 8006fb4:	40014800 	.word	0x40014800

08006fb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f023 0201 	bic.w	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fe2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f023 030a 	bic.w	r3, r3, #10
 8006ff4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	621a      	str	r2, [r3, #32]
}
 800700a:	bf00      	nop
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007016:	b480      	push	{r7}
 8007018:	b087      	sub	sp, #28
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f023 0210 	bic.w	r2, r3, #16
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007040:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007052:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	621a      	str	r2, [r3, #32]
}
 800706a:	bf00      	nop
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800708c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	f043 0307 	orr.w	r3, r3, #7
 8007098:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	021a      	lsls	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d101      	bne.n	8007104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007100:	2302      	movs	r3, #2
 8007102:	e055      	b.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007146:	d01d      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1b      	ldr	r2, [pc, #108]	; (80071bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d018      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a1a      	ldr	r2, [pc, #104]	; (80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d013      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a18      	ldr	r2, [pc, #96]	; (80071c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00e      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a17      	ldr	r2, [pc, #92]	; (80071c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d009      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a15      	ldr	r2, [pc, #84]	; (80071cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a14      	ldr	r2, [pc, #80]	; (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d10c      	bne.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800718a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	4313      	orrs	r3, r2
 8007194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40000400 	.word	0x40000400
 80071c0:	40000800 	.word	0x40000800
 80071c4:	40000c00 	.word	0x40000c00
 80071c8:	40001800 	.word	0x40001800
 80071cc:	40014000 	.word	0x40014000
 80071d0:	40015c00 	.word	0x40015c00

080071d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <__errno>:
 80071fc:	4b01      	ldr	r3, [pc, #4]	; (8007204 <__errno+0x8>)
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	20000170 	.word	0x20000170

08007208 <__libc_init_array>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	4d0d      	ldr	r5, [pc, #52]	; (8007240 <__libc_init_array+0x38>)
 800720c:	4c0d      	ldr	r4, [pc, #52]	; (8007244 <__libc_init_array+0x3c>)
 800720e:	1b64      	subs	r4, r4, r5
 8007210:	10a4      	asrs	r4, r4, #2
 8007212:	2600      	movs	r6, #0
 8007214:	42a6      	cmp	r6, r4
 8007216:	d109      	bne.n	800722c <__libc_init_array+0x24>
 8007218:	4d0b      	ldr	r5, [pc, #44]	; (8007248 <__libc_init_array+0x40>)
 800721a:	4c0c      	ldr	r4, [pc, #48]	; (800724c <__libc_init_array+0x44>)
 800721c:	f001 fc5e 	bl	8008adc <_init>
 8007220:	1b64      	subs	r4, r4, r5
 8007222:	10a4      	asrs	r4, r4, #2
 8007224:	2600      	movs	r6, #0
 8007226:	42a6      	cmp	r6, r4
 8007228:	d105      	bne.n	8007236 <__libc_init_array+0x2e>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007230:	4798      	blx	r3
 8007232:	3601      	adds	r6, #1
 8007234:	e7ee      	b.n	8007214 <__libc_init_array+0xc>
 8007236:	f855 3b04 	ldr.w	r3, [r5], #4
 800723a:	4798      	blx	r3
 800723c:	3601      	adds	r6, #1
 800723e:	e7f2      	b.n	8007226 <__libc_init_array+0x1e>
 8007240:	08008d20 	.word	0x08008d20
 8007244:	08008d20 	.word	0x08008d20
 8007248:	08008d20 	.word	0x08008d20
 800724c:	08008d24 	.word	0x08008d24

08007250 <memset>:
 8007250:	4402      	add	r2, r0
 8007252:	4603      	mov	r3, r0
 8007254:	4293      	cmp	r3, r2
 8007256:	d100      	bne.n	800725a <memset+0xa>
 8007258:	4770      	bx	lr
 800725a:	f803 1b01 	strb.w	r1, [r3], #1
 800725e:	e7f9      	b.n	8007254 <memset+0x4>

08007260 <siprintf>:
 8007260:	b40e      	push	{r1, r2, r3}
 8007262:	b500      	push	{lr}
 8007264:	b09c      	sub	sp, #112	; 0x70
 8007266:	ab1d      	add	r3, sp, #116	; 0x74
 8007268:	9002      	str	r0, [sp, #8]
 800726a:	9006      	str	r0, [sp, #24]
 800726c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007270:	4809      	ldr	r0, [pc, #36]	; (8007298 <siprintf+0x38>)
 8007272:	9107      	str	r1, [sp, #28]
 8007274:	9104      	str	r1, [sp, #16]
 8007276:	4909      	ldr	r1, [pc, #36]	; (800729c <siprintf+0x3c>)
 8007278:	f853 2b04 	ldr.w	r2, [r3], #4
 800727c:	9105      	str	r1, [sp, #20]
 800727e:	6800      	ldr	r0, [r0, #0]
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	a902      	add	r1, sp, #8
 8007284:	f000 f8c2 	bl	800740c <_svfiprintf_r>
 8007288:	9b02      	ldr	r3, [sp, #8]
 800728a:	2200      	movs	r2, #0
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	b01c      	add	sp, #112	; 0x70
 8007290:	f85d eb04 	ldr.w	lr, [sp], #4
 8007294:	b003      	add	sp, #12
 8007296:	4770      	bx	lr
 8007298:	20000170 	.word	0x20000170
 800729c:	ffff0208 	.word	0xffff0208

080072a0 <strcat>:
 80072a0:	b510      	push	{r4, lr}
 80072a2:	4602      	mov	r2, r0
 80072a4:	7814      	ldrb	r4, [r2, #0]
 80072a6:	4613      	mov	r3, r2
 80072a8:	3201      	adds	r2, #1
 80072aa:	2c00      	cmp	r4, #0
 80072ac:	d1fa      	bne.n	80072a4 <strcat+0x4>
 80072ae:	3b01      	subs	r3, #1
 80072b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	d1f9      	bne.n	80072b0 <strcat+0x10>
 80072bc:	bd10      	pop	{r4, pc}

080072be <strlcat>:
 80072be:	b570      	push	{r4, r5, r6, lr}
 80072c0:	4604      	mov	r4, r0
 80072c2:	1916      	adds	r6, r2, r4
 80072c4:	4608      	mov	r0, r1
 80072c6:	4621      	mov	r1, r4
 80072c8:	42b1      	cmp	r1, r6
 80072ca:	460b      	mov	r3, r1
 80072cc:	d106      	bne.n	80072dc <strlcat+0x1e>
 80072ce:	1b1c      	subs	r4, r3, r4
 80072d0:	1b12      	subs	r2, r2, r4
 80072d2:	d108      	bne.n	80072e6 <strlcat+0x28>
 80072d4:	f7f8 ff7c 	bl	80001d0 <strlen>
 80072d8:	4420      	add	r0, r4
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	781d      	ldrb	r5, [r3, #0]
 80072de:	3101      	adds	r1, #1
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	d1f1      	bne.n	80072c8 <strlcat+0xa>
 80072e4:	e7f3      	b.n	80072ce <strlcat+0x10>
 80072e6:	4606      	mov	r6, r0
 80072e8:	4631      	mov	r1, r6
 80072ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 80072ee:	b915      	cbnz	r5, 80072f6 <strlcat+0x38>
 80072f0:	701d      	strb	r5, [r3, #0]
 80072f2:	1a08      	subs	r0, r1, r0
 80072f4:	e7f0      	b.n	80072d8 <strlcat+0x1a>
 80072f6:	2a01      	cmp	r2, #1
 80072f8:	bf1c      	itt	ne
 80072fa:	f803 5b01 	strbne.w	r5, [r3], #1
 80072fe:	f102 32ff 	addne.w	r2, r2, #4294967295
 8007302:	e7f1      	b.n	80072e8 <strlcat+0x2a>

08007304 <strlcpy>:
 8007304:	b510      	push	{r4, lr}
 8007306:	460b      	mov	r3, r1
 8007308:	b162      	cbz	r2, 8007324 <strlcpy+0x20>
 800730a:	3a01      	subs	r2, #1
 800730c:	d008      	beq.n	8007320 <strlcpy+0x1c>
 800730e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007312:	f800 4b01 	strb.w	r4, [r0], #1
 8007316:	2c00      	cmp	r4, #0
 8007318:	d1f7      	bne.n	800730a <strlcpy+0x6>
 800731a:	1a58      	subs	r0, r3, r1
 800731c:	3801      	subs	r0, #1
 800731e:	bd10      	pop	{r4, pc}
 8007320:	2200      	movs	r2, #0
 8007322:	7002      	strb	r2, [r0, #0]
 8007324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007328:	2a00      	cmp	r2, #0
 800732a:	d1fb      	bne.n	8007324 <strlcpy+0x20>
 800732c:	e7f5      	b.n	800731a <strlcpy+0x16>

0800732e <strncpy>:
 800732e:	b510      	push	{r4, lr}
 8007330:	3901      	subs	r1, #1
 8007332:	4603      	mov	r3, r0
 8007334:	b132      	cbz	r2, 8007344 <strncpy+0x16>
 8007336:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800733a:	f803 4b01 	strb.w	r4, [r3], #1
 800733e:	3a01      	subs	r2, #1
 8007340:	2c00      	cmp	r4, #0
 8007342:	d1f7      	bne.n	8007334 <strncpy+0x6>
 8007344:	441a      	add	r2, r3
 8007346:	2100      	movs	r1, #0
 8007348:	4293      	cmp	r3, r2
 800734a:	d100      	bne.n	800734e <strncpy+0x20>
 800734c:	bd10      	pop	{r4, pc}
 800734e:	f803 1b01 	strb.w	r1, [r3], #1
 8007352:	e7f9      	b.n	8007348 <strncpy+0x1a>

08007354 <__ssputs_r>:
 8007354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	688e      	ldr	r6, [r1, #8]
 800735a:	429e      	cmp	r6, r3
 800735c:	4682      	mov	sl, r0
 800735e:	460c      	mov	r4, r1
 8007360:	4690      	mov	r8, r2
 8007362:	461f      	mov	r7, r3
 8007364:	d838      	bhi.n	80073d8 <__ssputs_r+0x84>
 8007366:	898a      	ldrh	r2, [r1, #12]
 8007368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800736c:	d032      	beq.n	80073d4 <__ssputs_r+0x80>
 800736e:	6825      	ldr	r5, [r4, #0]
 8007370:	6909      	ldr	r1, [r1, #16]
 8007372:	eba5 0901 	sub.w	r9, r5, r1
 8007376:	6965      	ldr	r5, [r4, #20]
 8007378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800737c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007380:	3301      	adds	r3, #1
 8007382:	444b      	add	r3, r9
 8007384:	106d      	asrs	r5, r5, #1
 8007386:	429d      	cmp	r5, r3
 8007388:	bf38      	it	cc
 800738a:	461d      	movcc	r5, r3
 800738c:	0553      	lsls	r3, r2, #21
 800738e:	d531      	bpl.n	80073f4 <__ssputs_r+0xa0>
 8007390:	4629      	mov	r1, r5
 8007392:	f000 fb47 	bl	8007a24 <_malloc_r>
 8007396:	4606      	mov	r6, r0
 8007398:	b950      	cbnz	r0, 80073b0 <__ssputs_r+0x5c>
 800739a:	230c      	movs	r3, #12
 800739c:	f8ca 3000 	str.w	r3, [sl]
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a6:	81a3      	strh	r3, [r4, #12]
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b0:	6921      	ldr	r1, [r4, #16]
 80073b2:	464a      	mov	r2, r9
 80073b4:	f000 fabe 	bl	8007934 <memcpy>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	6126      	str	r6, [r4, #16]
 80073c6:	6165      	str	r5, [r4, #20]
 80073c8:	444e      	add	r6, r9
 80073ca:	eba5 0509 	sub.w	r5, r5, r9
 80073ce:	6026      	str	r6, [r4, #0]
 80073d0:	60a5      	str	r5, [r4, #8]
 80073d2:	463e      	mov	r6, r7
 80073d4:	42be      	cmp	r6, r7
 80073d6:	d900      	bls.n	80073da <__ssputs_r+0x86>
 80073d8:	463e      	mov	r6, r7
 80073da:	4632      	mov	r2, r6
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	4641      	mov	r1, r8
 80073e0:	f000 fab6 	bl	8007950 <memmove>
 80073e4:	68a3      	ldr	r3, [r4, #8]
 80073e6:	6822      	ldr	r2, [r4, #0]
 80073e8:	1b9b      	subs	r3, r3, r6
 80073ea:	4432      	add	r2, r6
 80073ec:	60a3      	str	r3, [r4, #8]
 80073ee:	6022      	str	r2, [r4, #0]
 80073f0:	2000      	movs	r0, #0
 80073f2:	e7db      	b.n	80073ac <__ssputs_r+0x58>
 80073f4:	462a      	mov	r2, r5
 80073f6:	f000 fb6f 	bl	8007ad8 <_realloc_r>
 80073fa:	4606      	mov	r6, r0
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d1e1      	bne.n	80073c4 <__ssputs_r+0x70>
 8007400:	6921      	ldr	r1, [r4, #16]
 8007402:	4650      	mov	r0, sl
 8007404:	f000 fabe 	bl	8007984 <_free_r>
 8007408:	e7c7      	b.n	800739a <__ssputs_r+0x46>
	...

0800740c <_svfiprintf_r>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	4698      	mov	r8, r3
 8007412:	898b      	ldrh	r3, [r1, #12]
 8007414:	061b      	lsls	r3, r3, #24
 8007416:	b09d      	sub	sp, #116	; 0x74
 8007418:	4607      	mov	r7, r0
 800741a:	460d      	mov	r5, r1
 800741c:	4614      	mov	r4, r2
 800741e:	d50e      	bpl.n	800743e <_svfiprintf_r+0x32>
 8007420:	690b      	ldr	r3, [r1, #16]
 8007422:	b963      	cbnz	r3, 800743e <_svfiprintf_r+0x32>
 8007424:	2140      	movs	r1, #64	; 0x40
 8007426:	f000 fafd 	bl	8007a24 <_malloc_r>
 800742a:	6028      	str	r0, [r5, #0]
 800742c:	6128      	str	r0, [r5, #16]
 800742e:	b920      	cbnz	r0, 800743a <_svfiprintf_r+0x2e>
 8007430:	230c      	movs	r3, #12
 8007432:	603b      	str	r3, [r7, #0]
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	e0d1      	b.n	80075de <_svfiprintf_r+0x1d2>
 800743a:	2340      	movs	r3, #64	; 0x40
 800743c:	616b      	str	r3, [r5, #20]
 800743e:	2300      	movs	r3, #0
 8007440:	9309      	str	r3, [sp, #36]	; 0x24
 8007442:	2320      	movs	r3, #32
 8007444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007448:	f8cd 800c 	str.w	r8, [sp, #12]
 800744c:	2330      	movs	r3, #48	; 0x30
 800744e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80075f8 <_svfiprintf_r+0x1ec>
 8007452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007456:	f04f 0901 	mov.w	r9, #1
 800745a:	4623      	mov	r3, r4
 800745c:	469a      	mov	sl, r3
 800745e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007462:	b10a      	cbz	r2, 8007468 <_svfiprintf_r+0x5c>
 8007464:	2a25      	cmp	r2, #37	; 0x25
 8007466:	d1f9      	bne.n	800745c <_svfiprintf_r+0x50>
 8007468:	ebba 0b04 	subs.w	fp, sl, r4
 800746c:	d00b      	beq.n	8007486 <_svfiprintf_r+0x7a>
 800746e:	465b      	mov	r3, fp
 8007470:	4622      	mov	r2, r4
 8007472:	4629      	mov	r1, r5
 8007474:	4638      	mov	r0, r7
 8007476:	f7ff ff6d 	bl	8007354 <__ssputs_r>
 800747a:	3001      	adds	r0, #1
 800747c:	f000 80aa 	beq.w	80075d4 <_svfiprintf_r+0x1c8>
 8007480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007482:	445a      	add	r2, fp
 8007484:	9209      	str	r2, [sp, #36]	; 0x24
 8007486:	f89a 3000 	ldrb.w	r3, [sl]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 80a2 	beq.w	80075d4 <_svfiprintf_r+0x1c8>
 8007490:	2300      	movs	r3, #0
 8007492:	f04f 32ff 	mov.w	r2, #4294967295
 8007496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800749a:	f10a 0a01 	add.w	sl, sl, #1
 800749e:	9304      	str	r3, [sp, #16]
 80074a0:	9307      	str	r3, [sp, #28]
 80074a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074a6:	931a      	str	r3, [sp, #104]	; 0x68
 80074a8:	4654      	mov	r4, sl
 80074aa:	2205      	movs	r2, #5
 80074ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b0:	4851      	ldr	r0, [pc, #324]	; (80075f8 <_svfiprintf_r+0x1ec>)
 80074b2:	f7f8 fe95 	bl	80001e0 <memchr>
 80074b6:	9a04      	ldr	r2, [sp, #16]
 80074b8:	b9d8      	cbnz	r0, 80074f2 <_svfiprintf_r+0xe6>
 80074ba:	06d0      	lsls	r0, r2, #27
 80074bc:	bf44      	itt	mi
 80074be:	2320      	movmi	r3, #32
 80074c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074c4:	0711      	lsls	r1, r2, #28
 80074c6:	bf44      	itt	mi
 80074c8:	232b      	movmi	r3, #43	; 0x2b
 80074ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ce:	f89a 3000 	ldrb.w	r3, [sl]
 80074d2:	2b2a      	cmp	r3, #42	; 0x2a
 80074d4:	d015      	beq.n	8007502 <_svfiprintf_r+0xf6>
 80074d6:	9a07      	ldr	r2, [sp, #28]
 80074d8:	4654      	mov	r4, sl
 80074da:	2000      	movs	r0, #0
 80074dc:	f04f 0c0a 	mov.w	ip, #10
 80074e0:	4621      	mov	r1, r4
 80074e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e6:	3b30      	subs	r3, #48	; 0x30
 80074e8:	2b09      	cmp	r3, #9
 80074ea:	d94e      	bls.n	800758a <_svfiprintf_r+0x17e>
 80074ec:	b1b0      	cbz	r0, 800751c <_svfiprintf_r+0x110>
 80074ee:	9207      	str	r2, [sp, #28]
 80074f0:	e014      	b.n	800751c <_svfiprintf_r+0x110>
 80074f2:	eba0 0308 	sub.w	r3, r0, r8
 80074f6:	fa09 f303 	lsl.w	r3, r9, r3
 80074fa:	4313      	orrs	r3, r2
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	46a2      	mov	sl, r4
 8007500:	e7d2      	b.n	80074a8 <_svfiprintf_r+0x9c>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	1d19      	adds	r1, r3, #4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	9103      	str	r1, [sp, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	bfbb      	ittet	lt
 800750e:	425b      	neglt	r3, r3
 8007510:	f042 0202 	orrlt.w	r2, r2, #2
 8007514:	9307      	strge	r3, [sp, #28]
 8007516:	9307      	strlt	r3, [sp, #28]
 8007518:	bfb8      	it	lt
 800751a:	9204      	strlt	r2, [sp, #16]
 800751c:	7823      	ldrb	r3, [r4, #0]
 800751e:	2b2e      	cmp	r3, #46	; 0x2e
 8007520:	d10c      	bne.n	800753c <_svfiprintf_r+0x130>
 8007522:	7863      	ldrb	r3, [r4, #1]
 8007524:	2b2a      	cmp	r3, #42	; 0x2a
 8007526:	d135      	bne.n	8007594 <_svfiprintf_r+0x188>
 8007528:	9b03      	ldr	r3, [sp, #12]
 800752a:	1d1a      	adds	r2, r3, #4
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	9203      	str	r2, [sp, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfb8      	it	lt
 8007534:	f04f 33ff 	movlt.w	r3, #4294967295
 8007538:	3402      	adds	r4, #2
 800753a:	9305      	str	r3, [sp, #20]
 800753c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007608 <_svfiprintf_r+0x1fc>
 8007540:	7821      	ldrb	r1, [r4, #0]
 8007542:	2203      	movs	r2, #3
 8007544:	4650      	mov	r0, sl
 8007546:	f7f8 fe4b 	bl	80001e0 <memchr>
 800754a:	b140      	cbz	r0, 800755e <_svfiprintf_r+0x152>
 800754c:	2340      	movs	r3, #64	; 0x40
 800754e:	eba0 000a 	sub.w	r0, r0, sl
 8007552:	fa03 f000 	lsl.w	r0, r3, r0
 8007556:	9b04      	ldr	r3, [sp, #16]
 8007558:	4303      	orrs	r3, r0
 800755a:	3401      	adds	r4, #1
 800755c:	9304      	str	r3, [sp, #16]
 800755e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007562:	4826      	ldr	r0, [pc, #152]	; (80075fc <_svfiprintf_r+0x1f0>)
 8007564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007568:	2206      	movs	r2, #6
 800756a:	f7f8 fe39 	bl	80001e0 <memchr>
 800756e:	2800      	cmp	r0, #0
 8007570:	d038      	beq.n	80075e4 <_svfiprintf_r+0x1d8>
 8007572:	4b23      	ldr	r3, [pc, #140]	; (8007600 <_svfiprintf_r+0x1f4>)
 8007574:	bb1b      	cbnz	r3, 80075be <_svfiprintf_r+0x1b2>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	3307      	adds	r3, #7
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	3308      	adds	r3, #8
 8007580:	9303      	str	r3, [sp, #12]
 8007582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007584:	4433      	add	r3, r6
 8007586:	9309      	str	r3, [sp, #36]	; 0x24
 8007588:	e767      	b.n	800745a <_svfiprintf_r+0x4e>
 800758a:	fb0c 3202 	mla	r2, ip, r2, r3
 800758e:	460c      	mov	r4, r1
 8007590:	2001      	movs	r0, #1
 8007592:	e7a5      	b.n	80074e0 <_svfiprintf_r+0xd4>
 8007594:	2300      	movs	r3, #0
 8007596:	3401      	adds	r4, #1
 8007598:	9305      	str	r3, [sp, #20]
 800759a:	4619      	mov	r1, r3
 800759c:	f04f 0c0a 	mov.w	ip, #10
 80075a0:	4620      	mov	r0, r4
 80075a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a6:	3a30      	subs	r2, #48	; 0x30
 80075a8:	2a09      	cmp	r2, #9
 80075aa:	d903      	bls.n	80075b4 <_svfiprintf_r+0x1a8>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0c5      	beq.n	800753c <_svfiprintf_r+0x130>
 80075b0:	9105      	str	r1, [sp, #20]
 80075b2:	e7c3      	b.n	800753c <_svfiprintf_r+0x130>
 80075b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80075b8:	4604      	mov	r4, r0
 80075ba:	2301      	movs	r3, #1
 80075bc:	e7f0      	b.n	80075a0 <_svfiprintf_r+0x194>
 80075be:	ab03      	add	r3, sp, #12
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	462a      	mov	r2, r5
 80075c4:	4b0f      	ldr	r3, [pc, #60]	; (8007604 <_svfiprintf_r+0x1f8>)
 80075c6:	a904      	add	r1, sp, #16
 80075c8:	4638      	mov	r0, r7
 80075ca:	f3af 8000 	nop.w
 80075ce:	1c42      	adds	r2, r0, #1
 80075d0:	4606      	mov	r6, r0
 80075d2:	d1d6      	bne.n	8007582 <_svfiprintf_r+0x176>
 80075d4:	89ab      	ldrh	r3, [r5, #12]
 80075d6:	065b      	lsls	r3, r3, #25
 80075d8:	f53f af2c 	bmi.w	8007434 <_svfiprintf_r+0x28>
 80075dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075de:	b01d      	add	sp, #116	; 0x74
 80075e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e4:	ab03      	add	r3, sp, #12
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	462a      	mov	r2, r5
 80075ea:	4b06      	ldr	r3, [pc, #24]	; (8007604 <_svfiprintf_r+0x1f8>)
 80075ec:	a904      	add	r1, sp, #16
 80075ee:	4638      	mov	r0, r7
 80075f0:	f000 f87a 	bl	80076e8 <_printf_i>
 80075f4:	e7eb      	b.n	80075ce <_svfiprintf_r+0x1c2>
 80075f6:	bf00      	nop
 80075f8:	08008ca8 	.word	0x08008ca8
 80075fc:	08008cb2 	.word	0x08008cb2
 8007600:	00000000 	.word	0x00000000
 8007604:	08007355 	.word	0x08007355
 8007608:	08008cae 	.word	0x08008cae

0800760c <_printf_common>:
 800760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	4616      	mov	r6, r2
 8007612:	4699      	mov	r9, r3
 8007614:	688a      	ldr	r2, [r1, #8]
 8007616:	690b      	ldr	r3, [r1, #16]
 8007618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800761c:	4293      	cmp	r3, r2
 800761e:	bfb8      	it	lt
 8007620:	4613      	movlt	r3, r2
 8007622:	6033      	str	r3, [r6, #0]
 8007624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007628:	4607      	mov	r7, r0
 800762a:	460c      	mov	r4, r1
 800762c:	b10a      	cbz	r2, 8007632 <_printf_common+0x26>
 800762e:	3301      	adds	r3, #1
 8007630:	6033      	str	r3, [r6, #0]
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	0699      	lsls	r1, r3, #26
 8007636:	bf42      	ittt	mi
 8007638:	6833      	ldrmi	r3, [r6, #0]
 800763a:	3302      	addmi	r3, #2
 800763c:	6033      	strmi	r3, [r6, #0]
 800763e:	6825      	ldr	r5, [r4, #0]
 8007640:	f015 0506 	ands.w	r5, r5, #6
 8007644:	d106      	bne.n	8007654 <_printf_common+0x48>
 8007646:	f104 0a19 	add.w	sl, r4, #25
 800764a:	68e3      	ldr	r3, [r4, #12]
 800764c:	6832      	ldr	r2, [r6, #0]
 800764e:	1a9b      	subs	r3, r3, r2
 8007650:	42ab      	cmp	r3, r5
 8007652:	dc26      	bgt.n	80076a2 <_printf_common+0x96>
 8007654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007658:	1e13      	subs	r3, r2, #0
 800765a:	6822      	ldr	r2, [r4, #0]
 800765c:	bf18      	it	ne
 800765e:	2301      	movne	r3, #1
 8007660:	0692      	lsls	r2, r2, #26
 8007662:	d42b      	bmi.n	80076bc <_printf_common+0xb0>
 8007664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007668:	4649      	mov	r1, r9
 800766a:	4638      	mov	r0, r7
 800766c:	47c0      	blx	r8
 800766e:	3001      	adds	r0, #1
 8007670:	d01e      	beq.n	80076b0 <_printf_common+0xa4>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	68e5      	ldr	r5, [r4, #12]
 8007676:	6832      	ldr	r2, [r6, #0]
 8007678:	f003 0306 	and.w	r3, r3, #6
 800767c:	2b04      	cmp	r3, #4
 800767e:	bf08      	it	eq
 8007680:	1aad      	subeq	r5, r5, r2
 8007682:	68a3      	ldr	r3, [r4, #8]
 8007684:	6922      	ldr	r2, [r4, #16]
 8007686:	bf0c      	ite	eq
 8007688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800768c:	2500      	movne	r5, #0
 800768e:	4293      	cmp	r3, r2
 8007690:	bfc4      	itt	gt
 8007692:	1a9b      	subgt	r3, r3, r2
 8007694:	18ed      	addgt	r5, r5, r3
 8007696:	2600      	movs	r6, #0
 8007698:	341a      	adds	r4, #26
 800769a:	42b5      	cmp	r5, r6
 800769c:	d11a      	bne.n	80076d4 <_printf_common+0xc8>
 800769e:	2000      	movs	r0, #0
 80076a0:	e008      	b.n	80076b4 <_printf_common+0xa8>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4652      	mov	r2, sl
 80076a6:	4649      	mov	r1, r9
 80076a8:	4638      	mov	r0, r7
 80076aa:	47c0      	blx	r8
 80076ac:	3001      	adds	r0, #1
 80076ae:	d103      	bne.n	80076b8 <_printf_common+0xac>
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295
 80076b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b8:	3501      	adds	r5, #1
 80076ba:	e7c6      	b.n	800764a <_printf_common+0x3e>
 80076bc:	18e1      	adds	r1, r4, r3
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	2030      	movs	r0, #48	; 0x30
 80076c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076c6:	4422      	add	r2, r4
 80076c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076d0:	3302      	adds	r3, #2
 80076d2:	e7c7      	b.n	8007664 <_printf_common+0x58>
 80076d4:	2301      	movs	r3, #1
 80076d6:	4622      	mov	r2, r4
 80076d8:	4649      	mov	r1, r9
 80076da:	4638      	mov	r0, r7
 80076dc:	47c0      	blx	r8
 80076de:	3001      	adds	r0, #1
 80076e0:	d0e6      	beq.n	80076b0 <_printf_common+0xa4>
 80076e2:	3601      	adds	r6, #1
 80076e4:	e7d9      	b.n	800769a <_printf_common+0x8e>
	...

080076e8 <_printf_i>:
 80076e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	460c      	mov	r4, r1
 80076ee:	4691      	mov	r9, r2
 80076f0:	7e27      	ldrb	r7, [r4, #24]
 80076f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076f4:	2f78      	cmp	r7, #120	; 0x78
 80076f6:	4680      	mov	r8, r0
 80076f8:	469a      	mov	sl, r3
 80076fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076fe:	d807      	bhi.n	8007710 <_printf_i+0x28>
 8007700:	2f62      	cmp	r7, #98	; 0x62
 8007702:	d80a      	bhi.n	800771a <_printf_i+0x32>
 8007704:	2f00      	cmp	r7, #0
 8007706:	f000 80d8 	beq.w	80078ba <_printf_i+0x1d2>
 800770a:	2f58      	cmp	r7, #88	; 0x58
 800770c:	f000 80a3 	beq.w	8007856 <_printf_i+0x16e>
 8007710:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007718:	e03a      	b.n	8007790 <_printf_i+0xa8>
 800771a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800771e:	2b15      	cmp	r3, #21
 8007720:	d8f6      	bhi.n	8007710 <_printf_i+0x28>
 8007722:	a001      	add	r0, pc, #4	; (adr r0, 8007728 <_printf_i+0x40>)
 8007724:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007728:	08007781 	.word	0x08007781
 800772c:	08007795 	.word	0x08007795
 8007730:	08007711 	.word	0x08007711
 8007734:	08007711 	.word	0x08007711
 8007738:	08007711 	.word	0x08007711
 800773c:	08007711 	.word	0x08007711
 8007740:	08007795 	.word	0x08007795
 8007744:	08007711 	.word	0x08007711
 8007748:	08007711 	.word	0x08007711
 800774c:	08007711 	.word	0x08007711
 8007750:	08007711 	.word	0x08007711
 8007754:	080078a1 	.word	0x080078a1
 8007758:	080077c5 	.word	0x080077c5
 800775c:	08007883 	.word	0x08007883
 8007760:	08007711 	.word	0x08007711
 8007764:	08007711 	.word	0x08007711
 8007768:	080078c3 	.word	0x080078c3
 800776c:	08007711 	.word	0x08007711
 8007770:	080077c5 	.word	0x080077c5
 8007774:	08007711 	.word	0x08007711
 8007778:	08007711 	.word	0x08007711
 800777c:	0800788b 	.word	0x0800788b
 8007780:	680b      	ldr	r3, [r1, #0]
 8007782:	1d1a      	adds	r2, r3, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	600a      	str	r2, [r1, #0]
 8007788:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800778c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007790:	2301      	movs	r3, #1
 8007792:	e0a3      	b.n	80078dc <_printf_i+0x1f4>
 8007794:	6825      	ldr	r5, [r4, #0]
 8007796:	6808      	ldr	r0, [r1, #0]
 8007798:	062e      	lsls	r6, r5, #24
 800779a:	f100 0304 	add.w	r3, r0, #4
 800779e:	d50a      	bpl.n	80077b6 <_printf_i+0xce>
 80077a0:	6805      	ldr	r5, [r0, #0]
 80077a2:	600b      	str	r3, [r1, #0]
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	da03      	bge.n	80077b0 <_printf_i+0xc8>
 80077a8:	232d      	movs	r3, #45	; 0x2d
 80077aa:	426d      	negs	r5, r5
 80077ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b0:	485e      	ldr	r0, [pc, #376]	; (800792c <_printf_i+0x244>)
 80077b2:	230a      	movs	r3, #10
 80077b4:	e019      	b.n	80077ea <_printf_i+0x102>
 80077b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80077ba:	6805      	ldr	r5, [r0, #0]
 80077bc:	600b      	str	r3, [r1, #0]
 80077be:	bf18      	it	ne
 80077c0:	b22d      	sxthne	r5, r5
 80077c2:	e7ef      	b.n	80077a4 <_printf_i+0xbc>
 80077c4:	680b      	ldr	r3, [r1, #0]
 80077c6:	6825      	ldr	r5, [r4, #0]
 80077c8:	1d18      	adds	r0, r3, #4
 80077ca:	6008      	str	r0, [r1, #0]
 80077cc:	0628      	lsls	r0, r5, #24
 80077ce:	d501      	bpl.n	80077d4 <_printf_i+0xec>
 80077d0:	681d      	ldr	r5, [r3, #0]
 80077d2:	e002      	b.n	80077da <_printf_i+0xf2>
 80077d4:	0669      	lsls	r1, r5, #25
 80077d6:	d5fb      	bpl.n	80077d0 <_printf_i+0xe8>
 80077d8:	881d      	ldrh	r5, [r3, #0]
 80077da:	4854      	ldr	r0, [pc, #336]	; (800792c <_printf_i+0x244>)
 80077dc:	2f6f      	cmp	r7, #111	; 0x6f
 80077de:	bf0c      	ite	eq
 80077e0:	2308      	moveq	r3, #8
 80077e2:	230a      	movne	r3, #10
 80077e4:	2100      	movs	r1, #0
 80077e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077ea:	6866      	ldr	r6, [r4, #4]
 80077ec:	60a6      	str	r6, [r4, #8]
 80077ee:	2e00      	cmp	r6, #0
 80077f0:	bfa2      	ittt	ge
 80077f2:	6821      	ldrge	r1, [r4, #0]
 80077f4:	f021 0104 	bicge.w	r1, r1, #4
 80077f8:	6021      	strge	r1, [r4, #0]
 80077fa:	b90d      	cbnz	r5, 8007800 <_printf_i+0x118>
 80077fc:	2e00      	cmp	r6, #0
 80077fe:	d04d      	beq.n	800789c <_printf_i+0x1b4>
 8007800:	4616      	mov	r6, r2
 8007802:	fbb5 f1f3 	udiv	r1, r5, r3
 8007806:	fb03 5711 	mls	r7, r3, r1, r5
 800780a:	5dc7      	ldrb	r7, [r0, r7]
 800780c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007810:	462f      	mov	r7, r5
 8007812:	42bb      	cmp	r3, r7
 8007814:	460d      	mov	r5, r1
 8007816:	d9f4      	bls.n	8007802 <_printf_i+0x11a>
 8007818:	2b08      	cmp	r3, #8
 800781a:	d10b      	bne.n	8007834 <_printf_i+0x14c>
 800781c:	6823      	ldr	r3, [r4, #0]
 800781e:	07df      	lsls	r7, r3, #31
 8007820:	d508      	bpl.n	8007834 <_printf_i+0x14c>
 8007822:	6923      	ldr	r3, [r4, #16]
 8007824:	6861      	ldr	r1, [r4, #4]
 8007826:	4299      	cmp	r1, r3
 8007828:	bfde      	ittt	le
 800782a:	2330      	movle	r3, #48	; 0x30
 800782c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007830:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007834:	1b92      	subs	r2, r2, r6
 8007836:	6122      	str	r2, [r4, #16]
 8007838:	f8cd a000 	str.w	sl, [sp]
 800783c:	464b      	mov	r3, r9
 800783e:	aa03      	add	r2, sp, #12
 8007840:	4621      	mov	r1, r4
 8007842:	4640      	mov	r0, r8
 8007844:	f7ff fee2 	bl	800760c <_printf_common>
 8007848:	3001      	adds	r0, #1
 800784a:	d14c      	bne.n	80078e6 <_printf_i+0x1fe>
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	b004      	add	sp, #16
 8007852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007856:	4835      	ldr	r0, [pc, #212]	; (800792c <_printf_i+0x244>)
 8007858:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	680e      	ldr	r6, [r1, #0]
 8007860:	061f      	lsls	r7, r3, #24
 8007862:	f856 5b04 	ldr.w	r5, [r6], #4
 8007866:	600e      	str	r6, [r1, #0]
 8007868:	d514      	bpl.n	8007894 <_printf_i+0x1ac>
 800786a:	07d9      	lsls	r1, r3, #31
 800786c:	bf44      	itt	mi
 800786e:	f043 0320 	orrmi.w	r3, r3, #32
 8007872:	6023      	strmi	r3, [r4, #0]
 8007874:	b91d      	cbnz	r5, 800787e <_printf_i+0x196>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	f023 0320 	bic.w	r3, r3, #32
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	2310      	movs	r3, #16
 8007880:	e7b0      	b.n	80077e4 <_printf_i+0xfc>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	f043 0320 	orr.w	r3, r3, #32
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	2378      	movs	r3, #120	; 0x78
 800788c:	4828      	ldr	r0, [pc, #160]	; (8007930 <_printf_i+0x248>)
 800788e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007892:	e7e3      	b.n	800785c <_printf_i+0x174>
 8007894:	065e      	lsls	r6, r3, #25
 8007896:	bf48      	it	mi
 8007898:	b2ad      	uxthmi	r5, r5
 800789a:	e7e6      	b.n	800786a <_printf_i+0x182>
 800789c:	4616      	mov	r6, r2
 800789e:	e7bb      	b.n	8007818 <_printf_i+0x130>
 80078a0:	680b      	ldr	r3, [r1, #0]
 80078a2:	6826      	ldr	r6, [r4, #0]
 80078a4:	6960      	ldr	r0, [r4, #20]
 80078a6:	1d1d      	adds	r5, r3, #4
 80078a8:	600d      	str	r5, [r1, #0]
 80078aa:	0635      	lsls	r5, r6, #24
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	d501      	bpl.n	80078b4 <_printf_i+0x1cc>
 80078b0:	6018      	str	r0, [r3, #0]
 80078b2:	e002      	b.n	80078ba <_printf_i+0x1d2>
 80078b4:	0671      	lsls	r1, r6, #25
 80078b6:	d5fb      	bpl.n	80078b0 <_printf_i+0x1c8>
 80078b8:	8018      	strh	r0, [r3, #0]
 80078ba:	2300      	movs	r3, #0
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	4616      	mov	r6, r2
 80078c0:	e7ba      	b.n	8007838 <_printf_i+0x150>
 80078c2:	680b      	ldr	r3, [r1, #0]
 80078c4:	1d1a      	adds	r2, r3, #4
 80078c6:	600a      	str	r2, [r1, #0]
 80078c8:	681e      	ldr	r6, [r3, #0]
 80078ca:	6862      	ldr	r2, [r4, #4]
 80078cc:	2100      	movs	r1, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7f8 fc86 	bl	80001e0 <memchr>
 80078d4:	b108      	cbz	r0, 80078da <_printf_i+0x1f2>
 80078d6:	1b80      	subs	r0, r0, r6
 80078d8:	6060      	str	r0, [r4, #4]
 80078da:	6863      	ldr	r3, [r4, #4]
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	2300      	movs	r3, #0
 80078e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078e4:	e7a8      	b.n	8007838 <_printf_i+0x150>
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	4632      	mov	r2, r6
 80078ea:	4649      	mov	r1, r9
 80078ec:	4640      	mov	r0, r8
 80078ee:	47d0      	blx	sl
 80078f0:	3001      	adds	r0, #1
 80078f2:	d0ab      	beq.n	800784c <_printf_i+0x164>
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	079b      	lsls	r3, r3, #30
 80078f8:	d413      	bmi.n	8007922 <_printf_i+0x23a>
 80078fa:	68e0      	ldr	r0, [r4, #12]
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	4298      	cmp	r0, r3
 8007900:	bfb8      	it	lt
 8007902:	4618      	movlt	r0, r3
 8007904:	e7a4      	b.n	8007850 <_printf_i+0x168>
 8007906:	2301      	movs	r3, #1
 8007908:	4632      	mov	r2, r6
 800790a:	4649      	mov	r1, r9
 800790c:	4640      	mov	r0, r8
 800790e:	47d0      	blx	sl
 8007910:	3001      	adds	r0, #1
 8007912:	d09b      	beq.n	800784c <_printf_i+0x164>
 8007914:	3501      	adds	r5, #1
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	9903      	ldr	r1, [sp, #12]
 800791a:	1a5b      	subs	r3, r3, r1
 800791c:	42ab      	cmp	r3, r5
 800791e:	dcf2      	bgt.n	8007906 <_printf_i+0x21e>
 8007920:	e7eb      	b.n	80078fa <_printf_i+0x212>
 8007922:	2500      	movs	r5, #0
 8007924:	f104 0619 	add.w	r6, r4, #25
 8007928:	e7f5      	b.n	8007916 <_printf_i+0x22e>
 800792a:	bf00      	nop
 800792c:	08008cb9 	.word	0x08008cb9
 8007930:	08008cca 	.word	0x08008cca

08007934 <memcpy>:
 8007934:	440a      	add	r2, r1
 8007936:	4291      	cmp	r1, r2
 8007938:	f100 33ff 	add.w	r3, r0, #4294967295
 800793c:	d100      	bne.n	8007940 <memcpy+0xc>
 800793e:	4770      	bx	lr
 8007940:	b510      	push	{r4, lr}
 8007942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800794a:	4291      	cmp	r1, r2
 800794c:	d1f9      	bne.n	8007942 <memcpy+0xe>
 800794e:	bd10      	pop	{r4, pc}

08007950 <memmove>:
 8007950:	4288      	cmp	r0, r1
 8007952:	b510      	push	{r4, lr}
 8007954:	eb01 0402 	add.w	r4, r1, r2
 8007958:	d902      	bls.n	8007960 <memmove+0x10>
 800795a:	4284      	cmp	r4, r0
 800795c:	4623      	mov	r3, r4
 800795e:	d807      	bhi.n	8007970 <memmove+0x20>
 8007960:	1e43      	subs	r3, r0, #1
 8007962:	42a1      	cmp	r1, r4
 8007964:	d008      	beq.n	8007978 <memmove+0x28>
 8007966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800796a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800796e:	e7f8      	b.n	8007962 <memmove+0x12>
 8007970:	4402      	add	r2, r0
 8007972:	4601      	mov	r1, r0
 8007974:	428a      	cmp	r2, r1
 8007976:	d100      	bne.n	800797a <memmove+0x2a>
 8007978:	bd10      	pop	{r4, pc}
 800797a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800797e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007982:	e7f7      	b.n	8007974 <memmove+0x24>

08007984 <_free_r>:
 8007984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007986:	2900      	cmp	r1, #0
 8007988:	d048      	beq.n	8007a1c <_free_r+0x98>
 800798a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800798e:	9001      	str	r0, [sp, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f1a1 0404 	sub.w	r4, r1, #4
 8007996:	bfb8      	it	lt
 8007998:	18e4      	addlt	r4, r4, r3
 800799a:	f000 f8d3 	bl	8007b44 <__malloc_lock>
 800799e:	4a20      	ldr	r2, [pc, #128]	; (8007a20 <_free_r+0x9c>)
 80079a0:	9801      	ldr	r0, [sp, #4]
 80079a2:	6813      	ldr	r3, [r2, #0]
 80079a4:	4615      	mov	r5, r2
 80079a6:	b933      	cbnz	r3, 80079b6 <_free_r+0x32>
 80079a8:	6063      	str	r3, [r4, #4]
 80079aa:	6014      	str	r4, [r2, #0]
 80079ac:	b003      	add	sp, #12
 80079ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079b2:	f000 b8cd 	b.w	8007b50 <__malloc_unlock>
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	d90b      	bls.n	80079d2 <_free_r+0x4e>
 80079ba:	6821      	ldr	r1, [r4, #0]
 80079bc:	1862      	adds	r2, r4, r1
 80079be:	4293      	cmp	r3, r2
 80079c0:	bf04      	itt	eq
 80079c2:	681a      	ldreq	r2, [r3, #0]
 80079c4:	685b      	ldreq	r3, [r3, #4]
 80079c6:	6063      	str	r3, [r4, #4]
 80079c8:	bf04      	itt	eq
 80079ca:	1852      	addeq	r2, r2, r1
 80079cc:	6022      	streq	r2, [r4, #0]
 80079ce:	602c      	str	r4, [r5, #0]
 80079d0:	e7ec      	b.n	80079ac <_free_r+0x28>
 80079d2:	461a      	mov	r2, r3
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	b10b      	cbz	r3, 80079dc <_free_r+0x58>
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d9fa      	bls.n	80079d2 <_free_r+0x4e>
 80079dc:	6811      	ldr	r1, [r2, #0]
 80079de:	1855      	adds	r5, r2, r1
 80079e0:	42a5      	cmp	r5, r4
 80079e2:	d10b      	bne.n	80079fc <_free_r+0x78>
 80079e4:	6824      	ldr	r4, [r4, #0]
 80079e6:	4421      	add	r1, r4
 80079e8:	1854      	adds	r4, r2, r1
 80079ea:	42a3      	cmp	r3, r4
 80079ec:	6011      	str	r1, [r2, #0]
 80079ee:	d1dd      	bne.n	80079ac <_free_r+0x28>
 80079f0:	681c      	ldr	r4, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	6053      	str	r3, [r2, #4]
 80079f6:	4421      	add	r1, r4
 80079f8:	6011      	str	r1, [r2, #0]
 80079fa:	e7d7      	b.n	80079ac <_free_r+0x28>
 80079fc:	d902      	bls.n	8007a04 <_free_r+0x80>
 80079fe:	230c      	movs	r3, #12
 8007a00:	6003      	str	r3, [r0, #0]
 8007a02:	e7d3      	b.n	80079ac <_free_r+0x28>
 8007a04:	6825      	ldr	r5, [r4, #0]
 8007a06:	1961      	adds	r1, r4, r5
 8007a08:	428b      	cmp	r3, r1
 8007a0a:	bf04      	itt	eq
 8007a0c:	6819      	ldreq	r1, [r3, #0]
 8007a0e:	685b      	ldreq	r3, [r3, #4]
 8007a10:	6063      	str	r3, [r4, #4]
 8007a12:	bf04      	itt	eq
 8007a14:	1949      	addeq	r1, r1, r5
 8007a16:	6021      	streq	r1, [r4, #0]
 8007a18:	6054      	str	r4, [r2, #4]
 8007a1a:	e7c7      	b.n	80079ac <_free_r+0x28>
 8007a1c:	b003      	add	sp, #12
 8007a1e:	bd30      	pop	{r4, r5, pc}
 8007a20:	20000220 	.word	0x20000220

08007a24 <_malloc_r>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	1ccd      	adds	r5, r1, #3
 8007a28:	f025 0503 	bic.w	r5, r5, #3
 8007a2c:	3508      	adds	r5, #8
 8007a2e:	2d0c      	cmp	r5, #12
 8007a30:	bf38      	it	cc
 8007a32:	250c      	movcc	r5, #12
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	4606      	mov	r6, r0
 8007a38:	db01      	blt.n	8007a3e <_malloc_r+0x1a>
 8007a3a:	42a9      	cmp	r1, r5
 8007a3c:	d903      	bls.n	8007a46 <_malloc_r+0x22>
 8007a3e:	230c      	movs	r3, #12
 8007a40:	6033      	str	r3, [r6, #0]
 8007a42:	2000      	movs	r0, #0
 8007a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a46:	f000 f87d 	bl	8007b44 <__malloc_lock>
 8007a4a:	4921      	ldr	r1, [pc, #132]	; (8007ad0 <_malloc_r+0xac>)
 8007a4c:	680a      	ldr	r2, [r1, #0]
 8007a4e:	4614      	mov	r4, r2
 8007a50:	b99c      	cbnz	r4, 8007a7a <_malloc_r+0x56>
 8007a52:	4f20      	ldr	r7, [pc, #128]	; (8007ad4 <_malloc_r+0xb0>)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	b923      	cbnz	r3, 8007a62 <_malloc_r+0x3e>
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f000 f862 	bl	8007b24 <_sbrk_r>
 8007a60:	6038      	str	r0, [r7, #0]
 8007a62:	4629      	mov	r1, r5
 8007a64:	4630      	mov	r0, r6
 8007a66:	f000 f85d 	bl	8007b24 <_sbrk_r>
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	d123      	bne.n	8007ab6 <_malloc_r+0x92>
 8007a6e:	230c      	movs	r3, #12
 8007a70:	6033      	str	r3, [r6, #0]
 8007a72:	4630      	mov	r0, r6
 8007a74:	f000 f86c 	bl	8007b50 <__malloc_unlock>
 8007a78:	e7e3      	b.n	8007a42 <_malloc_r+0x1e>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	1b5b      	subs	r3, r3, r5
 8007a7e:	d417      	bmi.n	8007ab0 <_malloc_r+0x8c>
 8007a80:	2b0b      	cmp	r3, #11
 8007a82:	d903      	bls.n	8007a8c <_malloc_r+0x68>
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	441c      	add	r4, r3
 8007a88:	6025      	str	r5, [r4, #0]
 8007a8a:	e004      	b.n	8007a96 <_malloc_r+0x72>
 8007a8c:	6863      	ldr	r3, [r4, #4]
 8007a8e:	42a2      	cmp	r2, r4
 8007a90:	bf0c      	ite	eq
 8007a92:	600b      	streq	r3, [r1, #0]
 8007a94:	6053      	strne	r3, [r2, #4]
 8007a96:	4630      	mov	r0, r6
 8007a98:	f000 f85a 	bl	8007b50 <__malloc_unlock>
 8007a9c:	f104 000b 	add.w	r0, r4, #11
 8007aa0:	1d23      	adds	r3, r4, #4
 8007aa2:	f020 0007 	bic.w	r0, r0, #7
 8007aa6:	1ac2      	subs	r2, r0, r3
 8007aa8:	d0cc      	beq.n	8007a44 <_malloc_r+0x20>
 8007aaa:	1a1b      	subs	r3, r3, r0
 8007aac:	50a3      	str	r3, [r4, r2]
 8007aae:	e7c9      	b.n	8007a44 <_malloc_r+0x20>
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	6864      	ldr	r4, [r4, #4]
 8007ab4:	e7cc      	b.n	8007a50 <_malloc_r+0x2c>
 8007ab6:	1cc4      	adds	r4, r0, #3
 8007ab8:	f024 0403 	bic.w	r4, r4, #3
 8007abc:	42a0      	cmp	r0, r4
 8007abe:	d0e3      	beq.n	8007a88 <_malloc_r+0x64>
 8007ac0:	1a21      	subs	r1, r4, r0
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f000 f82e 	bl	8007b24 <_sbrk_r>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d1dd      	bne.n	8007a88 <_malloc_r+0x64>
 8007acc:	e7cf      	b.n	8007a6e <_malloc_r+0x4a>
 8007ace:	bf00      	nop
 8007ad0:	20000220 	.word	0x20000220
 8007ad4:	20000224 	.word	0x20000224

08007ad8 <_realloc_r>:
 8007ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ada:	4607      	mov	r7, r0
 8007adc:	4614      	mov	r4, r2
 8007ade:	460e      	mov	r6, r1
 8007ae0:	b921      	cbnz	r1, 8007aec <_realloc_r+0x14>
 8007ae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	f7ff bf9c 	b.w	8007a24 <_malloc_r>
 8007aec:	b922      	cbnz	r2, 8007af8 <_realloc_r+0x20>
 8007aee:	f7ff ff49 	bl	8007984 <_free_r>
 8007af2:	4625      	mov	r5, r4
 8007af4:	4628      	mov	r0, r5
 8007af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af8:	f000 f830 	bl	8007b5c <_malloc_usable_size_r>
 8007afc:	42a0      	cmp	r0, r4
 8007afe:	d20f      	bcs.n	8007b20 <_realloc_r+0x48>
 8007b00:	4621      	mov	r1, r4
 8007b02:	4638      	mov	r0, r7
 8007b04:	f7ff ff8e 	bl	8007a24 <_malloc_r>
 8007b08:	4605      	mov	r5, r0
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d0f2      	beq.n	8007af4 <_realloc_r+0x1c>
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4622      	mov	r2, r4
 8007b12:	f7ff ff0f 	bl	8007934 <memcpy>
 8007b16:	4631      	mov	r1, r6
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f7ff ff33 	bl	8007984 <_free_r>
 8007b1e:	e7e9      	b.n	8007af4 <_realloc_r+0x1c>
 8007b20:	4635      	mov	r5, r6
 8007b22:	e7e7      	b.n	8007af4 <_realloc_r+0x1c>

08007b24 <_sbrk_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d06      	ldr	r5, [pc, #24]	; (8007b40 <_sbrk_r+0x1c>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	602b      	str	r3, [r5, #0]
 8007b30:	f7fb ffd4 	bl	8003adc <_sbrk>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_sbrk_r+0x1a>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_sbrk_r+0x1a>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	20003398 	.word	0x20003398

08007b44 <__malloc_lock>:
 8007b44:	4801      	ldr	r0, [pc, #4]	; (8007b4c <__malloc_lock+0x8>)
 8007b46:	f000 b811 	b.w	8007b6c <__retarget_lock_acquire_recursive>
 8007b4a:	bf00      	nop
 8007b4c:	200033a0 	.word	0x200033a0

08007b50 <__malloc_unlock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	; (8007b58 <__malloc_unlock+0x8>)
 8007b52:	f000 b80c 	b.w	8007b6e <__retarget_lock_release_recursive>
 8007b56:	bf00      	nop
 8007b58:	200033a0 	.word	0x200033a0

08007b5c <_malloc_usable_size_r>:
 8007b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b60:	1f18      	subs	r0, r3, #4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bfbc      	itt	lt
 8007b66:	580b      	ldrlt	r3, [r1, r0]
 8007b68:	18c0      	addlt	r0, r0, r3
 8007b6a:	4770      	bx	lr

08007b6c <__retarget_lock_acquire_recursive>:
 8007b6c:	4770      	bx	lr

08007b6e <__retarget_lock_release_recursive>:
 8007b6e:	4770      	bx	lr

08007b70 <pow>:
 8007b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b74:	ec59 8b10 	vmov	r8, r9, d0
 8007b78:	ec57 6b11 	vmov	r6, r7, d1
 8007b7c:	f000 f8a8 	bl	8007cd0 <__ieee754_pow>
 8007b80:	4b4e      	ldr	r3, [pc, #312]	; (8007cbc <pow+0x14c>)
 8007b82:	f993 3000 	ldrsb.w	r3, [r3]
 8007b86:	3301      	adds	r3, #1
 8007b88:	ec55 4b10 	vmov	r4, r5, d0
 8007b8c:	d015      	beq.n	8007bba <pow+0x4a>
 8007b8e:	4632      	mov	r2, r6
 8007b90:	463b      	mov	r3, r7
 8007b92:	4630      	mov	r0, r6
 8007b94:	4639      	mov	r1, r7
 8007b96:	f7f8 ffc9 	bl	8000b2c <__aeabi_dcmpun>
 8007b9a:	b970      	cbnz	r0, 8007bba <pow+0x4a>
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	464b      	mov	r3, r9
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	f7f8 ffc2 	bl	8000b2c <__aeabi_dcmpun>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2300      	movs	r3, #0
 8007bac:	b148      	cbz	r0, 8007bc2 <pow+0x52>
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	f7f8 ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d17d      	bne.n	8007cb6 <pow+0x146>
 8007bba:	ec45 4b10 	vmov	d0, r4, r5
 8007bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bc2:	4640      	mov	r0, r8
 8007bc4:	4649      	mov	r1, r9
 8007bc6:	f7f8 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bca:	b1e0      	cbz	r0, 8007c06 <pow+0x96>
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2300      	movs	r3, #0
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	f7f8 ff78 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d16c      	bne.n	8007cb6 <pow+0x146>
 8007bdc:	ec47 6b10 	vmov	d0, r6, r7
 8007be0:	f000 fe55 	bl	800888e <finite>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d0e8      	beq.n	8007bba <pow+0x4a>
 8007be8:	2200      	movs	r2, #0
 8007bea:	2300      	movs	r3, #0
 8007bec:	4630      	mov	r0, r6
 8007bee:	4639      	mov	r1, r7
 8007bf0:	f7f8 ff74 	bl	8000adc <__aeabi_dcmplt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d0e0      	beq.n	8007bba <pow+0x4a>
 8007bf8:	f7ff fb00 	bl	80071fc <__errno>
 8007bfc:	2321      	movs	r3, #33	; 0x21
 8007bfe:	6003      	str	r3, [r0, #0]
 8007c00:	2400      	movs	r4, #0
 8007c02:	4d2f      	ldr	r5, [pc, #188]	; (8007cc0 <pow+0x150>)
 8007c04:	e7d9      	b.n	8007bba <pow+0x4a>
 8007c06:	ec45 4b10 	vmov	d0, r4, r5
 8007c0a:	f000 fe40 	bl	800888e <finite>
 8007c0e:	bbb8      	cbnz	r0, 8007c80 <pow+0x110>
 8007c10:	ec49 8b10 	vmov	d0, r8, r9
 8007c14:	f000 fe3b 	bl	800888e <finite>
 8007c18:	b390      	cbz	r0, 8007c80 <pow+0x110>
 8007c1a:	ec47 6b10 	vmov	d0, r6, r7
 8007c1e:	f000 fe36 	bl	800888e <finite>
 8007c22:	b368      	cbz	r0, 8007c80 <pow+0x110>
 8007c24:	4622      	mov	r2, r4
 8007c26:	462b      	mov	r3, r5
 8007c28:	4620      	mov	r0, r4
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	f7f8 ff7e 	bl	8000b2c <__aeabi_dcmpun>
 8007c30:	b160      	cbz	r0, 8007c4c <pow+0xdc>
 8007c32:	f7ff fae3 	bl	80071fc <__errno>
 8007c36:	2321      	movs	r3, #33	; 0x21
 8007c38:	6003      	str	r3, [r0, #0]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4610      	mov	r0, r2
 8007c40:	4619      	mov	r1, r3
 8007c42:	f7f8 fe03 	bl	800084c <__aeabi_ddiv>
 8007c46:	4604      	mov	r4, r0
 8007c48:	460d      	mov	r5, r1
 8007c4a:	e7b6      	b.n	8007bba <pow+0x4a>
 8007c4c:	f7ff fad6 	bl	80071fc <__errno>
 8007c50:	2322      	movs	r3, #34	; 0x22
 8007c52:	6003      	str	r3, [r0, #0]
 8007c54:	2200      	movs	r2, #0
 8007c56:	2300      	movs	r3, #0
 8007c58:	4640      	mov	r0, r8
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	f7f8 ff3e 	bl	8000adc <__aeabi_dcmplt>
 8007c60:	2400      	movs	r4, #0
 8007c62:	b158      	cbz	r0, 8007c7c <pow+0x10c>
 8007c64:	ec47 6b10 	vmov	d0, r6, r7
 8007c68:	f000 fe26 	bl	80088b8 <rint>
 8007c6c:	4632      	mov	r2, r6
 8007c6e:	ec51 0b10 	vmov	r0, r1, d0
 8007c72:	463b      	mov	r3, r7
 8007c74:	f7f8 ff28 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d0c2      	beq.n	8007c02 <pow+0x92>
 8007c7c:	4d11      	ldr	r5, [pc, #68]	; (8007cc4 <pow+0x154>)
 8007c7e:	e79c      	b.n	8007bba <pow+0x4a>
 8007c80:	2200      	movs	r2, #0
 8007c82:	2300      	movs	r3, #0
 8007c84:	4620      	mov	r0, r4
 8007c86:	4629      	mov	r1, r5
 8007c88:	f7f8 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d094      	beq.n	8007bba <pow+0x4a>
 8007c90:	ec49 8b10 	vmov	d0, r8, r9
 8007c94:	f000 fdfb 	bl	800888e <finite>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d08e      	beq.n	8007bba <pow+0x4a>
 8007c9c:	ec47 6b10 	vmov	d0, r6, r7
 8007ca0:	f000 fdf5 	bl	800888e <finite>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d088      	beq.n	8007bba <pow+0x4a>
 8007ca8:	f7ff faa8 	bl	80071fc <__errno>
 8007cac:	2322      	movs	r3, #34	; 0x22
 8007cae:	6003      	str	r3, [r0, #0]
 8007cb0:	2400      	movs	r4, #0
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	e781      	b.n	8007bba <pow+0x4a>
 8007cb6:	4d04      	ldr	r5, [pc, #16]	; (8007cc8 <pow+0x158>)
 8007cb8:	2400      	movs	r4, #0
 8007cba:	e77e      	b.n	8007bba <pow+0x4a>
 8007cbc:	200001d4 	.word	0x200001d4
 8007cc0:	fff00000 	.word	0xfff00000
 8007cc4:	7ff00000 	.word	0x7ff00000
 8007cc8:	3ff00000 	.word	0x3ff00000
 8007ccc:	00000000 	.word	0x00000000

08007cd0 <__ieee754_pow>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	ed2d 8b06 	vpush	{d8-d10}
 8007cd8:	b08d      	sub	sp, #52	; 0x34
 8007cda:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007cde:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8007ce2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007ce6:	ea56 0100 	orrs.w	r1, r6, r0
 8007cea:	ec53 2b10 	vmov	r2, r3, d0
 8007cee:	f000 84d1 	beq.w	8008694 <__ieee754_pow+0x9c4>
 8007cf2:	497f      	ldr	r1, [pc, #508]	; (8007ef0 <__ieee754_pow+0x220>)
 8007cf4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007cf8:	428c      	cmp	r4, r1
 8007cfa:	ee10 8a10 	vmov	r8, s0
 8007cfe:	4699      	mov	r9, r3
 8007d00:	dc09      	bgt.n	8007d16 <__ieee754_pow+0x46>
 8007d02:	d103      	bne.n	8007d0c <__ieee754_pow+0x3c>
 8007d04:	b97a      	cbnz	r2, 8007d26 <__ieee754_pow+0x56>
 8007d06:	42a6      	cmp	r6, r4
 8007d08:	dd02      	ble.n	8007d10 <__ieee754_pow+0x40>
 8007d0a:	e00c      	b.n	8007d26 <__ieee754_pow+0x56>
 8007d0c:	428e      	cmp	r6, r1
 8007d0e:	dc02      	bgt.n	8007d16 <__ieee754_pow+0x46>
 8007d10:	428e      	cmp	r6, r1
 8007d12:	d110      	bne.n	8007d36 <__ieee754_pow+0x66>
 8007d14:	b178      	cbz	r0, 8007d36 <__ieee754_pow+0x66>
 8007d16:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007d1a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007d1e:	ea54 0308 	orrs.w	r3, r4, r8
 8007d22:	f000 84b7 	beq.w	8008694 <__ieee754_pow+0x9c4>
 8007d26:	4873      	ldr	r0, [pc, #460]	; (8007ef4 <__ieee754_pow+0x224>)
 8007d28:	b00d      	add	sp, #52	; 0x34
 8007d2a:	ecbd 8b06 	vpop	{d8-d10}
 8007d2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d32:	f000 bdb9 	b.w	80088a8 <nan>
 8007d36:	f1b9 0f00 	cmp.w	r9, #0
 8007d3a:	da36      	bge.n	8007daa <__ieee754_pow+0xda>
 8007d3c:	496e      	ldr	r1, [pc, #440]	; (8007ef8 <__ieee754_pow+0x228>)
 8007d3e:	428e      	cmp	r6, r1
 8007d40:	dc51      	bgt.n	8007de6 <__ieee754_pow+0x116>
 8007d42:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8007d46:	428e      	cmp	r6, r1
 8007d48:	f340 84af 	ble.w	80086aa <__ieee754_pow+0x9da>
 8007d4c:	1531      	asrs	r1, r6, #20
 8007d4e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007d52:	2914      	cmp	r1, #20
 8007d54:	dd0f      	ble.n	8007d76 <__ieee754_pow+0xa6>
 8007d56:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007d5a:	fa20 fc01 	lsr.w	ip, r0, r1
 8007d5e:	fa0c f101 	lsl.w	r1, ip, r1
 8007d62:	4281      	cmp	r1, r0
 8007d64:	f040 84a1 	bne.w	80086aa <__ieee754_pow+0x9da>
 8007d68:	f00c 0c01 	and.w	ip, ip, #1
 8007d6c:	f1cc 0102 	rsb	r1, ip, #2
 8007d70:	9100      	str	r1, [sp, #0]
 8007d72:	b180      	cbz	r0, 8007d96 <__ieee754_pow+0xc6>
 8007d74:	e059      	b.n	8007e2a <__ieee754_pow+0x15a>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d155      	bne.n	8007e26 <__ieee754_pow+0x156>
 8007d7a:	f1c1 0114 	rsb	r1, r1, #20
 8007d7e:	fa46 fc01 	asr.w	ip, r6, r1
 8007d82:	fa0c f101 	lsl.w	r1, ip, r1
 8007d86:	42b1      	cmp	r1, r6
 8007d88:	f040 848c 	bne.w	80086a4 <__ieee754_pow+0x9d4>
 8007d8c:	f00c 0c01 	and.w	ip, ip, #1
 8007d90:	f1cc 0102 	rsb	r1, ip, #2
 8007d94:	9100      	str	r1, [sp, #0]
 8007d96:	4959      	ldr	r1, [pc, #356]	; (8007efc <__ieee754_pow+0x22c>)
 8007d98:	428e      	cmp	r6, r1
 8007d9a:	d12d      	bne.n	8007df8 <__ieee754_pow+0x128>
 8007d9c:	2f00      	cmp	r7, #0
 8007d9e:	da79      	bge.n	8007e94 <__ieee754_pow+0x1c4>
 8007da0:	4956      	ldr	r1, [pc, #344]	; (8007efc <__ieee754_pow+0x22c>)
 8007da2:	2000      	movs	r0, #0
 8007da4:	f7f8 fd52 	bl	800084c <__aeabi_ddiv>
 8007da8:	e016      	b.n	8007dd8 <__ieee754_pow+0x108>
 8007daa:	2100      	movs	r1, #0
 8007dac:	9100      	str	r1, [sp, #0]
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d13b      	bne.n	8007e2a <__ieee754_pow+0x15a>
 8007db2:	494f      	ldr	r1, [pc, #316]	; (8007ef0 <__ieee754_pow+0x220>)
 8007db4:	428e      	cmp	r6, r1
 8007db6:	d1ee      	bne.n	8007d96 <__ieee754_pow+0xc6>
 8007db8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007dbc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007dc0:	ea53 0308 	orrs.w	r3, r3, r8
 8007dc4:	f000 8466 	beq.w	8008694 <__ieee754_pow+0x9c4>
 8007dc8:	4b4d      	ldr	r3, [pc, #308]	; (8007f00 <__ieee754_pow+0x230>)
 8007dca:	429c      	cmp	r4, r3
 8007dcc:	dd0d      	ble.n	8007dea <__ieee754_pow+0x11a>
 8007dce:	2f00      	cmp	r7, #0
 8007dd0:	f280 8464 	bge.w	800869c <__ieee754_pow+0x9cc>
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	ec41 0b10 	vmov	d0, r0, r1
 8007ddc:	b00d      	add	sp, #52	; 0x34
 8007dde:	ecbd 8b06 	vpop	{d8-d10}
 8007de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de6:	2102      	movs	r1, #2
 8007de8:	e7e0      	b.n	8007dac <__ieee754_pow+0xdc>
 8007dea:	2f00      	cmp	r7, #0
 8007dec:	daf2      	bge.n	8007dd4 <__ieee754_pow+0x104>
 8007dee:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8007df2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007df6:	e7ef      	b.n	8007dd8 <__ieee754_pow+0x108>
 8007df8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007dfc:	d104      	bne.n	8007e08 <__ieee754_pow+0x138>
 8007dfe:	4610      	mov	r0, r2
 8007e00:	4619      	mov	r1, r3
 8007e02:	f7f8 fbf9 	bl	80005f8 <__aeabi_dmul>
 8007e06:	e7e7      	b.n	8007dd8 <__ieee754_pow+0x108>
 8007e08:	493e      	ldr	r1, [pc, #248]	; (8007f04 <__ieee754_pow+0x234>)
 8007e0a:	428f      	cmp	r7, r1
 8007e0c:	d10d      	bne.n	8007e2a <__ieee754_pow+0x15a>
 8007e0e:	f1b9 0f00 	cmp.w	r9, #0
 8007e12:	db0a      	blt.n	8007e2a <__ieee754_pow+0x15a>
 8007e14:	ec43 2b10 	vmov	d0, r2, r3
 8007e18:	b00d      	add	sp, #52	; 0x34
 8007e1a:	ecbd 8b06 	vpop	{d8-d10}
 8007e1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e22:	f000 bc77 	b.w	8008714 <__ieee754_sqrt>
 8007e26:	2100      	movs	r1, #0
 8007e28:	9100      	str	r1, [sp, #0]
 8007e2a:	ec43 2b10 	vmov	d0, r2, r3
 8007e2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e32:	f000 fd23 	bl	800887c <fabs>
 8007e36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e3a:	ec51 0b10 	vmov	r0, r1, d0
 8007e3e:	f1b8 0f00 	cmp.w	r8, #0
 8007e42:	d12a      	bne.n	8007e9a <__ieee754_pow+0x1ca>
 8007e44:	b12c      	cbz	r4, 8007e52 <__ieee754_pow+0x182>
 8007e46:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007efc <__ieee754_pow+0x22c>
 8007e4a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007e4e:	45e6      	cmp	lr, ip
 8007e50:	d123      	bne.n	8007e9a <__ieee754_pow+0x1ca>
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	da05      	bge.n	8007e62 <__ieee754_pow+0x192>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	4927      	ldr	r1, [pc, #156]	; (8007efc <__ieee754_pow+0x22c>)
 8007e5e:	f7f8 fcf5 	bl	800084c <__aeabi_ddiv>
 8007e62:	f1b9 0f00 	cmp.w	r9, #0
 8007e66:	dab7      	bge.n	8007dd8 <__ieee754_pow+0x108>
 8007e68:	9b00      	ldr	r3, [sp, #0]
 8007e6a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007e6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e72:	4323      	orrs	r3, r4
 8007e74:	d108      	bne.n	8007e88 <__ieee754_pow+0x1b8>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	f7f8 fa03 	bl	8000288 <__aeabi_dsub>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	e78d      	b.n	8007da4 <__ieee754_pow+0xd4>
 8007e88:	9b00      	ldr	r3, [sp, #0]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d1a4      	bne.n	8007dd8 <__ieee754_pow+0x108>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e94:	4610      	mov	r0, r2
 8007e96:	4619      	mov	r1, r3
 8007e98:	e79e      	b.n	8007dd8 <__ieee754_pow+0x108>
 8007e9a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8007e9e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007ea2:	950a      	str	r5, [sp, #40]	; 0x28
 8007ea4:	9d00      	ldr	r5, [sp, #0]
 8007ea6:	46ac      	mov	ip, r5
 8007ea8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007eaa:	ea5c 0505 	orrs.w	r5, ip, r5
 8007eae:	d0e4      	beq.n	8007e7a <__ieee754_pow+0x1aa>
 8007eb0:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <__ieee754_pow+0x238>)
 8007eb2:	429e      	cmp	r6, r3
 8007eb4:	f340 80fc 	ble.w	80080b0 <__ieee754_pow+0x3e0>
 8007eb8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007ebc:	429e      	cmp	r6, r3
 8007ebe:	4b10      	ldr	r3, [pc, #64]	; (8007f00 <__ieee754_pow+0x230>)
 8007ec0:	dd07      	ble.n	8007ed2 <__ieee754_pow+0x202>
 8007ec2:	429c      	cmp	r4, r3
 8007ec4:	dc0a      	bgt.n	8007edc <__ieee754_pow+0x20c>
 8007ec6:	2f00      	cmp	r7, #0
 8007ec8:	da84      	bge.n	8007dd4 <__ieee754_pow+0x104>
 8007eca:	a307      	add	r3, pc, #28	; (adr r3, 8007ee8 <__ieee754_pow+0x218>)
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	e795      	b.n	8007dfe <__ieee754_pow+0x12e>
 8007ed2:	429c      	cmp	r4, r3
 8007ed4:	dbf7      	blt.n	8007ec6 <__ieee754_pow+0x1f6>
 8007ed6:	4b09      	ldr	r3, [pc, #36]	; (8007efc <__ieee754_pow+0x22c>)
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	dd17      	ble.n	8007f0c <__ieee754_pow+0x23c>
 8007edc:	2f00      	cmp	r7, #0
 8007ede:	dcf4      	bgt.n	8007eca <__ieee754_pow+0x1fa>
 8007ee0:	e778      	b.n	8007dd4 <__ieee754_pow+0x104>
 8007ee2:	bf00      	nop
 8007ee4:	f3af 8000 	nop.w
 8007ee8:	8800759c 	.word	0x8800759c
 8007eec:	7e37e43c 	.word	0x7e37e43c
 8007ef0:	7ff00000 	.word	0x7ff00000
 8007ef4:	08008cad 	.word	0x08008cad
 8007ef8:	433fffff 	.word	0x433fffff
 8007efc:	3ff00000 	.word	0x3ff00000
 8007f00:	3fefffff 	.word	0x3fefffff
 8007f04:	3fe00000 	.word	0x3fe00000
 8007f08:	41e00000 	.word	0x41e00000
 8007f0c:	4b64      	ldr	r3, [pc, #400]	; (80080a0 <__ieee754_pow+0x3d0>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f7f8 f9ba 	bl	8000288 <__aeabi_dsub>
 8007f14:	a356      	add	r3, pc, #344	; (adr r3, 8008070 <__ieee754_pow+0x3a0>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	460d      	mov	r5, r1
 8007f1e:	f7f8 fb6b 	bl	80005f8 <__aeabi_dmul>
 8007f22:	a355      	add	r3, pc, #340	; (adr r3, 8008078 <__ieee754_pow+0x3a8>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	4606      	mov	r6, r0
 8007f2a:	460f      	mov	r7, r1
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	4629      	mov	r1, r5
 8007f30:	f7f8 fb62 	bl	80005f8 <__aeabi_dmul>
 8007f34:	4b5b      	ldr	r3, [pc, #364]	; (80080a4 <__ieee754_pow+0x3d4>)
 8007f36:	4682      	mov	sl, r0
 8007f38:	468b      	mov	fp, r1
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 fb5a 	bl	80005f8 <__aeabi_dmul>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	a14d      	add	r1, pc, #308	; (adr r1, 8008080 <__ieee754_pow+0x3b0>)
 8007f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f4e:	f7f8 f99b 	bl	8000288 <__aeabi_dsub>
 8007f52:	4622      	mov	r2, r4
 8007f54:	462b      	mov	r3, r5
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	2000      	movs	r0, #0
 8007f60:	4951      	ldr	r1, [pc, #324]	; (80080a8 <__ieee754_pow+0x3d8>)
 8007f62:	f7f8 f991 	bl	8000288 <__aeabi_dsub>
 8007f66:	4622      	mov	r2, r4
 8007f68:	4680      	mov	r8, r0
 8007f6a:	4689      	mov	r9, r1
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	4620      	mov	r0, r4
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 fb41 	bl	80005f8 <__aeabi_dmul>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	f7f8 fb3b 	bl	80005f8 <__aeabi_dmul>
 8007f82:	a341      	add	r3, pc, #260	; (adr r3, 8008088 <__ieee754_pow+0x3b8>)
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f7f8 fb36 	bl	80005f8 <__aeabi_dmul>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	4650      	mov	r0, sl
 8007f92:	4659      	mov	r1, fp
 8007f94:	f7f8 f978 	bl	8000288 <__aeabi_dsub>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	4689      	mov	r9, r1
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 f972 	bl	800028c <__adddf3>
 8007fa8:	2400      	movs	r4, #0
 8007faa:	4632      	mov	r2, r6
 8007fac:	463b      	mov	r3, r7
 8007fae:	4620      	mov	r0, r4
 8007fb0:	460d      	mov	r5, r1
 8007fb2:	f7f8 f969 	bl	8000288 <__aeabi_dsub>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4640      	mov	r0, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	f7f8 f963 	bl	8000288 <__aeabi_dsub>
 8007fc2:	9b00      	ldr	r3, [sp, #0]
 8007fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	4682      	mov	sl, r0
 8007fcc:	468b      	mov	fp, r1
 8007fce:	f040 81f1 	bne.w	80083b4 <__ieee754_pow+0x6e4>
 8007fd2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008090 <__ieee754_pow+0x3c0>
 8007fd6:	eeb0 8a47 	vmov.f32	s16, s14
 8007fda:	eef0 8a67 	vmov.f32	s17, s15
 8007fde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fe2:	2600      	movs	r6, #0
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	463b      	mov	r3, r7
 8007fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fec:	f7f8 f94c 	bl	8000288 <__aeabi_dsub>
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	462b      	mov	r3, r5
 8007ff4:	f7f8 fb00 	bl	80005f8 <__aeabi_dmul>
 8007ff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4689      	mov	r9, r1
 8008000:	4650      	mov	r0, sl
 8008002:	4659      	mov	r1, fp
 8008004:	f7f8 faf8 	bl	80005f8 <__aeabi_dmul>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4640      	mov	r0, r8
 800800e:	4649      	mov	r1, r9
 8008010:	f7f8 f93c 	bl	800028c <__adddf3>
 8008014:	4632      	mov	r2, r6
 8008016:	463b      	mov	r3, r7
 8008018:	4680      	mov	r8, r0
 800801a:	4689      	mov	r9, r1
 800801c:	4620      	mov	r0, r4
 800801e:	4629      	mov	r1, r5
 8008020:	f7f8 faea 	bl	80005f8 <__aeabi_dmul>
 8008024:	460b      	mov	r3, r1
 8008026:	4604      	mov	r4, r0
 8008028:	460d      	mov	r5, r1
 800802a:	4602      	mov	r2, r0
 800802c:	4649      	mov	r1, r9
 800802e:	4640      	mov	r0, r8
 8008030:	f7f8 f92c 	bl	800028c <__adddf3>
 8008034:	4b1d      	ldr	r3, [pc, #116]	; (80080ac <__ieee754_pow+0x3dc>)
 8008036:	4299      	cmp	r1, r3
 8008038:	ec45 4b19 	vmov	d9, r4, r5
 800803c:	4606      	mov	r6, r0
 800803e:	460f      	mov	r7, r1
 8008040:	468b      	mov	fp, r1
 8008042:	f340 82fe 	ble.w	8008642 <__ieee754_pow+0x972>
 8008046:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800804a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800804e:	4303      	orrs	r3, r0
 8008050:	f000 81f0 	beq.w	8008434 <__ieee754_pow+0x764>
 8008054:	a310      	add	r3, pc, #64	; (adr r3, 8008098 <__ieee754_pow+0x3c8>)
 8008056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805a:	ec51 0b18 	vmov	r0, r1, d8
 800805e:	f7f8 facb 	bl	80005f8 <__aeabi_dmul>
 8008062:	a30d      	add	r3, pc, #52	; (adr r3, 8008098 <__ieee754_pow+0x3c8>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	e6cb      	b.n	8007e02 <__ieee754_pow+0x132>
 800806a:	bf00      	nop
 800806c:	f3af 8000 	nop.w
 8008070:	60000000 	.word	0x60000000
 8008074:	3ff71547 	.word	0x3ff71547
 8008078:	f85ddf44 	.word	0xf85ddf44
 800807c:	3e54ae0b 	.word	0x3e54ae0b
 8008080:	55555555 	.word	0x55555555
 8008084:	3fd55555 	.word	0x3fd55555
 8008088:	652b82fe 	.word	0x652b82fe
 800808c:	3ff71547 	.word	0x3ff71547
 8008090:	00000000 	.word	0x00000000
 8008094:	bff00000 	.word	0xbff00000
 8008098:	8800759c 	.word	0x8800759c
 800809c:	7e37e43c 	.word	0x7e37e43c
 80080a0:	3ff00000 	.word	0x3ff00000
 80080a4:	3fd00000 	.word	0x3fd00000
 80080a8:	3fe00000 	.word	0x3fe00000
 80080ac:	408fffff 	.word	0x408fffff
 80080b0:	4bd7      	ldr	r3, [pc, #860]	; (8008410 <__ieee754_pow+0x740>)
 80080b2:	ea03 0309 	and.w	r3, r3, r9
 80080b6:	2200      	movs	r2, #0
 80080b8:	b92b      	cbnz	r3, 80080c6 <__ieee754_pow+0x3f6>
 80080ba:	4bd6      	ldr	r3, [pc, #856]	; (8008414 <__ieee754_pow+0x744>)
 80080bc:	f7f8 fa9c 	bl	80005f8 <__aeabi_dmul>
 80080c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80080c4:	460c      	mov	r4, r1
 80080c6:	1523      	asrs	r3, r4, #20
 80080c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080cc:	4413      	add	r3, r2
 80080ce:	9309      	str	r3, [sp, #36]	; 0x24
 80080d0:	4bd1      	ldr	r3, [pc, #836]	; (8008418 <__ieee754_pow+0x748>)
 80080d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80080d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80080da:	429c      	cmp	r4, r3
 80080dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80080e0:	dd08      	ble.n	80080f4 <__ieee754_pow+0x424>
 80080e2:	4bce      	ldr	r3, [pc, #824]	; (800841c <__ieee754_pow+0x74c>)
 80080e4:	429c      	cmp	r4, r3
 80080e6:	f340 8163 	ble.w	80083b0 <__ieee754_pow+0x6e0>
 80080ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ec:	3301      	adds	r3, #1
 80080ee:	9309      	str	r3, [sp, #36]	; 0x24
 80080f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80080f4:	2400      	movs	r4, #0
 80080f6:	00e3      	lsls	r3, r4, #3
 80080f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80080fa:	4bc9      	ldr	r3, [pc, #804]	; (8008420 <__ieee754_pow+0x750>)
 80080fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008100:	ed93 7b00 	vldr	d7, [r3]
 8008104:	4629      	mov	r1, r5
 8008106:	ec53 2b17 	vmov	r2, r3, d7
 800810a:	eeb0 8a47 	vmov.f32	s16, s14
 800810e:	eef0 8a67 	vmov.f32	s17, s15
 8008112:	4682      	mov	sl, r0
 8008114:	f7f8 f8b8 	bl	8000288 <__aeabi_dsub>
 8008118:	4652      	mov	r2, sl
 800811a:	4606      	mov	r6, r0
 800811c:	460f      	mov	r7, r1
 800811e:	462b      	mov	r3, r5
 8008120:	ec51 0b18 	vmov	r0, r1, d8
 8008124:	f7f8 f8b2 	bl	800028c <__adddf3>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	2000      	movs	r0, #0
 800812e:	49bd      	ldr	r1, [pc, #756]	; (8008424 <__ieee754_pow+0x754>)
 8008130:	f7f8 fb8c 	bl	800084c <__aeabi_ddiv>
 8008134:	ec41 0b19 	vmov	d9, r0, r1
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4630      	mov	r0, r6
 800813e:	4639      	mov	r1, r7
 8008140:	f7f8 fa5a 	bl	80005f8 <__aeabi_dmul>
 8008144:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008148:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800814c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008150:	2300      	movs	r3, #0
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008158:	46ab      	mov	fp, r5
 800815a:	106d      	asrs	r5, r5, #1
 800815c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008160:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008164:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008168:	2200      	movs	r2, #0
 800816a:	4640      	mov	r0, r8
 800816c:	4649      	mov	r1, r9
 800816e:	4614      	mov	r4, r2
 8008170:	461d      	mov	r5, r3
 8008172:	f7f8 fa41 	bl	80005f8 <__aeabi_dmul>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	4630      	mov	r0, r6
 800817c:	4639      	mov	r1, r7
 800817e:	f7f8 f883 	bl	8000288 <__aeabi_dsub>
 8008182:	ec53 2b18 	vmov	r2, r3, d8
 8008186:	4606      	mov	r6, r0
 8008188:	460f      	mov	r7, r1
 800818a:	4620      	mov	r0, r4
 800818c:	4629      	mov	r1, r5
 800818e:	f7f8 f87b 	bl	8000288 <__aeabi_dsub>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4650      	mov	r0, sl
 8008198:	4659      	mov	r1, fp
 800819a:	f7f8 f875 	bl	8000288 <__aeabi_dsub>
 800819e:	4642      	mov	r2, r8
 80081a0:	464b      	mov	r3, r9
 80081a2:	f7f8 fa29 	bl	80005f8 <__aeabi_dmul>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4630      	mov	r0, r6
 80081ac:	4639      	mov	r1, r7
 80081ae:	f7f8 f86b 	bl	8000288 <__aeabi_dsub>
 80081b2:	ec53 2b19 	vmov	r2, r3, d9
 80081b6:	f7f8 fa1f 	bl	80005f8 <__aeabi_dmul>
 80081ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081be:	ec41 0b18 	vmov	d8, r0, r1
 80081c2:	4610      	mov	r0, r2
 80081c4:	4619      	mov	r1, r3
 80081c6:	f7f8 fa17 	bl	80005f8 <__aeabi_dmul>
 80081ca:	a37d      	add	r3, pc, #500	; (adr r3, 80083c0 <__ieee754_pow+0x6f0>)
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	4604      	mov	r4, r0
 80081d2:	460d      	mov	r5, r1
 80081d4:	f7f8 fa10 	bl	80005f8 <__aeabi_dmul>
 80081d8:	a37b      	add	r3, pc, #492	; (adr r3, 80083c8 <__ieee754_pow+0x6f8>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	f7f8 f855 	bl	800028c <__adddf3>
 80081e2:	4622      	mov	r2, r4
 80081e4:	462b      	mov	r3, r5
 80081e6:	f7f8 fa07 	bl	80005f8 <__aeabi_dmul>
 80081ea:	a379      	add	r3, pc, #484	; (adr r3, 80083d0 <__ieee754_pow+0x700>)
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f7f8 f84c 	bl	800028c <__adddf3>
 80081f4:	4622      	mov	r2, r4
 80081f6:	462b      	mov	r3, r5
 80081f8:	f7f8 f9fe 	bl	80005f8 <__aeabi_dmul>
 80081fc:	a376      	add	r3, pc, #472	; (adr r3, 80083d8 <__ieee754_pow+0x708>)
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	f7f8 f843 	bl	800028c <__adddf3>
 8008206:	4622      	mov	r2, r4
 8008208:	462b      	mov	r3, r5
 800820a:	f7f8 f9f5 	bl	80005f8 <__aeabi_dmul>
 800820e:	a374      	add	r3, pc, #464	; (adr r3, 80083e0 <__ieee754_pow+0x710>)
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	f7f8 f83a 	bl	800028c <__adddf3>
 8008218:	4622      	mov	r2, r4
 800821a:	462b      	mov	r3, r5
 800821c:	f7f8 f9ec 	bl	80005f8 <__aeabi_dmul>
 8008220:	a371      	add	r3, pc, #452	; (adr r3, 80083e8 <__ieee754_pow+0x718>)
 8008222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008226:	f7f8 f831 	bl	800028c <__adddf3>
 800822a:	4622      	mov	r2, r4
 800822c:	4606      	mov	r6, r0
 800822e:	460f      	mov	r7, r1
 8008230:	462b      	mov	r3, r5
 8008232:	4620      	mov	r0, r4
 8008234:	4629      	mov	r1, r5
 8008236:	f7f8 f9df 	bl	80005f8 <__aeabi_dmul>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4630      	mov	r0, r6
 8008240:	4639      	mov	r1, r7
 8008242:	f7f8 f9d9 	bl	80005f8 <__aeabi_dmul>
 8008246:	4642      	mov	r2, r8
 8008248:	4604      	mov	r4, r0
 800824a:	460d      	mov	r5, r1
 800824c:	464b      	mov	r3, r9
 800824e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008252:	f7f8 f81b 	bl	800028c <__adddf3>
 8008256:	ec53 2b18 	vmov	r2, r3, d8
 800825a:	f7f8 f9cd 	bl	80005f8 <__aeabi_dmul>
 800825e:	4622      	mov	r2, r4
 8008260:	462b      	mov	r3, r5
 8008262:	f7f8 f813 	bl	800028c <__adddf3>
 8008266:	4642      	mov	r2, r8
 8008268:	4682      	mov	sl, r0
 800826a:	468b      	mov	fp, r1
 800826c:	464b      	mov	r3, r9
 800826e:	4640      	mov	r0, r8
 8008270:	4649      	mov	r1, r9
 8008272:	f7f8 f9c1 	bl	80005f8 <__aeabi_dmul>
 8008276:	4b6c      	ldr	r3, [pc, #432]	; (8008428 <__ieee754_pow+0x758>)
 8008278:	2200      	movs	r2, #0
 800827a:	4606      	mov	r6, r0
 800827c:	460f      	mov	r7, r1
 800827e:	f7f8 f805 	bl	800028c <__adddf3>
 8008282:	4652      	mov	r2, sl
 8008284:	465b      	mov	r3, fp
 8008286:	f7f8 f801 	bl	800028c <__adddf3>
 800828a:	9c04      	ldr	r4, [sp, #16]
 800828c:	460d      	mov	r5, r1
 800828e:	4622      	mov	r2, r4
 8008290:	460b      	mov	r3, r1
 8008292:	4640      	mov	r0, r8
 8008294:	4649      	mov	r1, r9
 8008296:	f7f8 f9af 	bl	80005f8 <__aeabi_dmul>
 800829a:	4b63      	ldr	r3, [pc, #396]	; (8008428 <__ieee754_pow+0x758>)
 800829c:	4680      	mov	r8, r0
 800829e:	4689      	mov	r9, r1
 80082a0:	2200      	movs	r2, #0
 80082a2:	4620      	mov	r0, r4
 80082a4:	4629      	mov	r1, r5
 80082a6:	f7f7 ffef 	bl	8000288 <__aeabi_dsub>
 80082aa:	4632      	mov	r2, r6
 80082ac:	463b      	mov	r3, r7
 80082ae:	f7f7 ffeb 	bl	8000288 <__aeabi_dsub>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
 80082b6:	4650      	mov	r0, sl
 80082b8:	4659      	mov	r1, fp
 80082ba:	f7f7 ffe5 	bl	8000288 <__aeabi_dsub>
 80082be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082c2:	f7f8 f999 	bl	80005f8 <__aeabi_dmul>
 80082c6:	4622      	mov	r2, r4
 80082c8:	4606      	mov	r6, r0
 80082ca:	460f      	mov	r7, r1
 80082cc:	462b      	mov	r3, r5
 80082ce:	ec51 0b18 	vmov	r0, r1, d8
 80082d2:	f7f8 f991 	bl	80005f8 <__aeabi_dmul>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4630      	mov	r0, r6
 80082dc:	4639      	mov	r1, r7
 80082de:	f7f7 ffd5 	bl	800028c <__adddf3>
 80082e2:	4606      	mov	r6, r0
 80082e4:	460f      	mov	r7, r1
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4640      	mov	r0, r8
 80082ec:	4649      	mov	r1, r9
 80082ee:	f7f7 ffcd 	bl	800028c <__adddf3>
 80082f2:	9c04      	ldr	r4, [sp, #16]
 80082f4:	a33e      	add	r3, pc, #248	; (adr r3, 80083f0 <__ieee754_pow+0x720>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	4620      	mov	r0, r4
 80082fc:	460d      	mov	r5, r1
 80082fe:	f7f8 f97b 	bl	80005f8 <__aeabi_dmul>
 8008302:	4642      	mov	r2, r8
 8008304:	ec41 0b18 	vmov	d8, r0, r1
 8008308:	464b      	mov	r3, r9
 800830a:	4620      	mov	r0, r4
 800830c:	4629      	mov	r1, r5
 800830e:	f7f7 ffbb 	bl	8000288 <__aeabi_dsub>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4630      	mov	r0, r6
 8008318:	4639      	mov	r1, r7
 800831a:	f7f7 ffb5 	bl	8000288 <__aeabi_dsub>
 800831e:	a336      	add	r3, pc, #216	; (adr r3, 80083f8 <__ieee754_pow+0x728>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	f7f8 f968 	bl	80005f8 <__aeabi_dmul>
 8008328:	a335      	add	r3, pc, #212	; (adr r3, 8008400 <__ieee754_pow+0x730>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	4606      	mov	r6, r0
 8008330:	460f      	mov	r7, r1
 8008332:	4620      	mov	r0, r4
 8008334:	4629      	mov	r1, r5
 8008336:	f7f8 f95f 	bl	80005f8 <__aeabi_dmul>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4630      	mov	r0, r6
 8008340:	4639      	mov	r1, r7
 8008342:	f7f7 ffa3 	bl	800028c <__adddf3>
 8008346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008348:	4b38      	ldr	r3, [pc, #224]	; (800842c <__ieee754_pow+0x75c>)
 800834a:	4413      	add	r3, r2
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f7 ff9c 	bl	800028c <__adddf3>
 8008354:	4682      	mov	sl, r0
 8008356:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008358:	468b      	mov	fp, r1
 800835a:	f7f8 f8e3 	bl	8000524 <__aeabi_i2d>
 800835e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008360:	4b33      	ldr	r3, [pc, #204]	; (8008430 <__ieee754_pow+0x760>)
 8008362:	4413      	add	r3, r2
 8008364:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008368:	4606      	mov	r6, r0
 800836a:	460f      	mov	r7, r1
 800836c:	4652      	mov	r2, sl
 800836e:	465b      	mov	r3, fp
 8008370:	ec51 0b18 	vmov	r0, r1, d8
 8008374:	f7f7 ff8a 	bl	800028c <__adddf3>
 8008378:	4642      	mov	r2, r8
 800837a:	464b      	mov	r3, r9
 800837c:	f7f7 ff86 	bl	800028c <__adddf3>
 8008380:	4632      	mov	r2, r6
 8008382:	463b      	mov	r3, r7
 8008384:	f7f7 ff82 	bl	800028c <__adddf3>
 8008388:	9c04      	ldr	r4, [sp, #16]
 800838a:	4632      	mov	r2, r6
 800838c:	463b      	mov	r3, r7
 800838e:	4620      	mov	r0, r4
 8008390:	460d      	mov	r5, r1
 8008392:	f7f7 ff79 	bl	8000288 <__aeabi_dsub>
 8008396:	4642      	mov	r2, r8
 8008398:	464b      	mov	r3, r9
 800839a:	f7f7 ff75 	bl	8000288 <__aeabi_dsub>
 800839e:	ec53 2b18 	vmov	r2, r3, d8
 80083a2:	f7f7 ff71 	bl	8000288 <__aeabi_dsub>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4650      	mov	r0, sl
 80083ac:	4659      	mov	r1, fp
 80083ae:	e606      	b.n	8007fbe <__ieee754_pow+0x2ee>
 80083b0:	2401      	movs	r4, #1
 80083b2:	e6a0      	b.n	80080f6 <__ieee754_pow+0x426>
 80083b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008408 <__ieee754_pow+0x738>
 80083b8:	e60d      	b.n	8007fd6 <__ieee754_pow+0x306>
 80083ba:	bf00      	nop
 80083bc:	f3af 8000 	nop.w
 80083c0:	4a454eef 	.word	0x4a454eef
 80083c4:	3fca7e28 	.word	0x3fca7e28
 80083c8:	93c9db65 	.word	0x93c9db65
 80083cc:	3fcd864a 	.word	0x3fcd864a
 80083d0:	a91d4101 	.word	0xa91d4101
 80083d4:	3fd17460 	.word	0x3fd17460
 80083d8:	518f264d 	.word	0x518f264d
 80083dc:	3fd55555 	.word	0x3fd55555
 80083e0:	db6fabff 	.word	0xdb6fabff
 80083e4:	3fdb6db6 	.word	0x3fdb6db6
 80083e8:	33333303 	.word	0x33333303
 80083ec:	3fe33333 	.word	0x3fe33333
 80083f0:	e0000000 	.word	0xe0000000
 80083f4:	3feec709 	.word	0x3feec709
 80083f8:	dc3a03fd 	.word	0xdc3a03fd
 80083fc:	3feec709 	.word	0x3feec709
 8008400:	145b01f5 	.word	0x145b01f5
 8008404:	be3e2fe0 	.word	0xbe3e2fe0
 8008408:	00000000 	.word	0x00000000
 800840c:	3ff00000 	.word	0x3ff00000
 8008410:	7ff00000 	.word	0x7ff00000
 8008414:	43400000 	.word	0x43400000
 8008418:	0003988e 	.word	0x0003988e
 800841c:	000bb679 	.word	0x000bb679
 8008420:	08008ce0 	.word	0x08008ce0
 8008424:	3ff00000 	.word	0x3ff00000
 8008428:	40080000 	.word	0x40080000
 800842c:	08008d00 	.word	0x08008d00
 8008430:	08008cf0 	.word	0x08008cf0
 8008434:	a3b5      	add	r3, pc, #724	; (adr r3, 800870c <__ieee754_pow+0xa3c>)
 8008436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843a:	4640      	mov	r0, r8
 800843c:	4649      	mov	r1, r9
 800843e:	f7f7 ff25 	bl	800028c <__adddf3>
 8008442:	4622      	mov	r2, r4
 8008444:	ec41 0b1a 	vmov	d10, r0, r1
 8008448:	462b      	mov	r3, r5
 800844a:	4630      	mov	r0, r6
 800844c:	4639      	mov	r1, r7
 800844e:	f7f7 ff1b 	bl	8000288 <__aeabi_dsub>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	ec51 0b1a 	vmov	r0, r1, d10
 800845a:	f7f8 fb5d 	bl	8000b18 <__aeabi_dcmpgt>
 800845e:	2800      	cmp	r0, #0
 8008460:	f47f adf8 	bne.w	8008054 <__ieee754_pow+0x384>
 8008464:	4aa4      	ldr	r2, [pc, #656]	; (80086f8 <__ieee754_pow+0xa28>)
 8008466:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800846a:	4293      	cmp	r3, r2
 800846c:	f340 810b 	ble.w	8008686 <__ieee754_pow+0x9b6>
 8008470:	151b      	asrs	r3, r3, #20
 8008472:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008476:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800847a:	fa4a f303 	asr.w	r3, sl, r3
 800847e:	445b      	add	r3, fp
 8008480:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008484:	4e9d      	ldr	r6, [pc, #628]	; (80086fc <__ieee754_pow+0xa2c>)
 8008486:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800848a:	4116      	asrs	r6, r2
 800848c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008490:	2000      	movs	r0, #0
 8008492:	ea23 0106 	bic.w	r1, r3, r6
 8008496:	f1c2 0214 	rsb	r2, r2, #20
 800849a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800849e:	fa4a fa02 	asr.w	sl, sl, r2
 80084a2:	f1bb 0f00 	cmp.w	fp, #0
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4620      	mov	r0, r4
 80084ac:	4629      	mov	r1, r5
 80084ae:	bfb8      	it	lt
 80084b0:	f1ca 0a00 	rsblt	sl, sl, #0
 80084b4:	f7f7 fee8 	bl	8000288 <__aeabi_dsub>
 80084b8:	ec41 0b19 	vmov	d9, r0, r1
 80084bc:	4642      	mov	r2, r8
 80084be:	464b      	mov	r3, r9
 80084c0:	ec51 0b19 	vmov	r0, r1, d9
 80084c4:	f7f7 fee2 	bl	800028c <__adddf3>
 80084c8:	2400      	movs	r4, #0
 80084ca:	a379      	add	r3, pc, #484	; (adr r3, 80086b0 <__ieee754_pow+0x9e0>)
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	4620      	mov	r0, r4
 80084d2:	460d      	mov	r5, r1
 80084d4:	f7f8 f890 	bl	80005f8 <__aeabi_dmul>
 80084d8:	ec53 2b19 	vmov	r2, r3, d9
 80084dc:	4606      	mov	r6, r0
 80084de:	460f      	mov	r7, r1
 80084e0:	4620      	mov	r0, r4
 80084e2:	4629      	mov	r1, r5
 80084e4:	f7f7 fed0 	bl	8000288 <__aeabi_dsub>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	4640      	mov	r0, r8
 80084ee:	4649      	mov	r1, r9
 80084f0:	f7f7 feca 	bl	8000288 <__aeabi_dsub>
 80084f4:	a370      	add	r3, pc, #448	; (adr r3, 80086b8 <__ieee754_pow+0x9e8>)
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f7f8 f87d 	bl	80005f8 <__aeabi_dmul>
 80084fe:	a370      	add	r3, pc, #448	; (adr r3, 80086c0 <__ieee754_pow+0x9f0>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	4680      	mov	r8, r0
 8008506:	4689      	mov	r9, r1
 8008508:	4620      	mov	r0, r4
 800850a:	4629      	mov	r1, r5
 800850c:	f7f8 f874 	bl	80005f8 <__aeabi_dmul>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4640      	mov	r0, r8
 8008516:	4649      	mov	r1, r9
 8008518:	f7f7 feb8 	bl	800028c <__adddf3>
 800851c:	4604      	mov	r4, r0
 800851e:	460d      	mov	r5, r1
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4630      	mov	r0, r6
 8008526:	4639      	mov	r1, r7
 8008528:	f7f7 feb0 	bl	800028c <__adddf3>
 800852c:	4632      	mov	r2, r6
 800852e:	463b      	mov	r3, r7
 8008530:	4680      	mov	r8, r0
 8008532:	4689      	mov	r9, r1
 8008534:	f7f7 fea8 	bl	8000288 <__aeabi_dsub>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4620      	mov	r0, r4
 800853e:	4629      	mov	r1, r5
 8008540:	f7f7 fea2 	bl	8000288 <__aeabi_dsub>
 8008544:	4642      	mov	r2, r8
 8008546:	4606      	mov	r6, r0
 8008548:	460f      	mov	r7, r1
 800854a:	464b      	mov	r3, r9
 800854c:	4640      	mov	r0, r8
 800854e:	4649      	mov	r1, r9
 8008550:	f7f8 f852 	bl	80005f8 <__aeabi_dmul>
 8008554:	a35c      	add	r3, pc, #368	; (adr r3, 80086c8 <__ieee754_pow+0x9f8>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	4604      	mov	r4, r0
 800855c:	460d      	mov	r5, r1
 800855e:	f7f8 f84b 	bl	80005f8 <__aeabi_dmul>
 8008562:	a35b      	add	r3, pc, #364	; (adr r3, 80086d0 <__ieee754_pow+0xa00>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	f7f7 fe8e 	bl	8000288 <__aeabi_dsub>
 800856c:	4622      	mov	r2, r4
 800856e:	462b      	mov	r3, r5
 8008570:	f7f8 f842 	bl	80005f8 <__aeabi_dmul>
 8008574:	a358      	add	r3, pc, #352	; (adr r3, 80086d8 <__ieee754_pow+0xa08>)
 8008576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857a:	f7f7 fe87 	bl	800028c <__adddf3>
 800857e:	4622      	mov	r2, r4
 8008580:	462b      	mov	r3, r5
 8008582:	f7f8 f839 	bl	80005f8 <__aeabi_dmul>
 8008586:	a356      	add	r3, pc, #344	; (adr r3, 80086e0 <__ieee754_pow+0xa10>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f7f7 fe7c 	bl	8000288 <__aeabi_dsub>
 8008590:	4622      	mov	r2, r4
 8008592:	462b      	mov	r3, r5
 8008594:	f7f8 f830 	bl	80005f8 <__aeabi_dmul>
 8008598:	a353      	add	r3, pc, #332	; (adr r3, 80086e8 <__ieee754_pow+0xa18>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f7 fe75 	bl	800028c <__adddf3>
 80085a2:	4622      	mov	r2, r4
 80085a4:	462b      	mov	r3, r5
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4640      	mov	r0, r8
 80085b0:	4649      	mov	r1, r9
 80085b2:	f7f7 fe69 	bl	8000288 <__aeabi_dsub>
 80085b6:	4604      	mov	r4, r0
 80085b8:	460d      	mov	r5, r1
 80085ba:	4602      	mov	r2, r0
 80085bc:	460b      	mov	r3, r1
 80085be:	4640      	mov	r0, r8
 80085c0:	4649      	mov	r1, r9
 80085c2:	f7f8 f819 	bl	80005f8 <__aeabi_dmul>
 80085c6:	2200      	movs	r2, #0
 80085c8:	ec41 0b19 	vmov	d9, r0, r1
 80085cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085d0:	4620      	mov	r0, r4
 80085d2:	4629      	mov	r1, r5
 80085d4:	f7f7 fe58 	bl	8000288 <__aeabi_dsub>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	ec51 0b19 	vmov	r0, r1, d9
 80085e0:	f7f8 f934 	bl	800084c <__aeabi_ddiv>
 80085e4:	4632      	mov	r2, r6
 80085e6:	4604      	mov	r4, r0
 80085e8:	460d      	mov	r5, r1
 80085ea:	463b      	mov	r3, r7
 80085ec:	4640      	mov	r0, r8
 80085ee:	4649      	mov	r1, r9
 80085f0:	f7f8 f802 	bl	80005f8 <__aeabi_dmul>
 80085f4:	4632      	mov	r2, r6
 80085f6:	463b      	mov	r3, r7
 80085f8:	f7f7 fe48 	bl	800028c <__adddf3>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4620      	mov	r0, r4
 8008602:	4629      	mov	r1, r5
 8008604:	f7f7 fe40 	bl	8000288 <__aeabi_dsub>
 8008608:	4642      	mov	r2, r8
 800860a:	464b      	mov	r3, r9
 800860c:	f7f7 fe3c 	bl	8000288 <__aeabi_dsub>
 8008610:	460b      	mov	r3, r1
 8008612:	4602      	mov	r2, r0
 8008614:	493a      	ldr	r1, [pc, #232]	; (8008700 <__ieee754_pow+0xa30>)
 8008616:	2000      	movs	r0, #0
 8008618:	f7f7 fe36 	bl	8000288 <__aeabi_dsub>
 800861c:	e9cd 0100 	strd	r0, r1, [sp]
 8008620:	9b01      	ldr	r3, [sp, #4]
 8008622:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800862a:	da2f      	bge.n	800868c <__ieee754_pow+0x9bc>
 800862c:	4650      	mov	r0, sl
 800862e:	ed9d 0b00 	vldr	d0, [sp]
 8008632:	f000 f9cd 	bl	80089d0 <scalbn>
 8008636:	ec51 0b10 	vmov	r0, r1, d0
 800863a:	ec53 2b18 	vmov	r2, r3, d8
 800863e:	f7ff bbe0 	b.w	8007e02 <__ieee754_pow+0x132>
 8008642:	4b30      	ldr	r3, [pc, #192]	; (8008704 <__ieee754_pow+0xa34>)
 8008644:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008648:	429e      	cmp	r6, r3
 800864a:	f77f af0b 	ble.w	8008464 <__ieee754_pow+0x794>
 800864e:	4b2e      	ldr	r3, [pc, #184]	; (8008708 <__ieee754_pow+0xa38>)
 8008650:	440b      	add	r3, r1
 8008652:	4303      	orrs	r3, r0
 8008654:	d00b      	beq.n	800866e <__ieee754_pow+0x99e>
 8008656:	a326      	add	r3, pc, #152	; (adr r3, 80086f0 <__ieee754_pow+0xa20>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	ec51 0b18 	vmov	r0, r1, d8
 8008660:	f7f7 ffca 	bl	80005f8 <__aeabi_dmul>
 8008664:	a322      	add	r3, pc, #136	; (adr r3, 80086f0 <__ieee754_pow+0xa20>)
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f7ff bbca 	b.w	8007e02 <__ieee754_pow+0x132>
 800866e:	4622      	mov	r2, r4
 8008670:	462b      	mov	r3, r5
 8008672:	f7f7 fe09 	bl	8000288 <__aeabi_dsub>
 8008676:	4642      	mov	r2, r8
 8008678:	464b      	mov	r3, r9
 800867a:	f7f8 fa43 	bl	8000b04 <__aeabi_dcmpge>
 800867e:	2800      	cmp	r0, #0
 8008680:	f43f aef0 	beq.w	8008464 <__ieee754_pow+0x794>
 8008684:	e7e7      	b.n	8008656 <__ieee754_pow+0x986>
 8008686:	f04f 0a00 	mov.w	sl, #0
 800868a:	e717      	b.n	80084bc <__ieee754_pow+0x7ec>
 800868c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008690:	4619      	mov	r1, r3
 8008692:	e7d2      	b.n	800863a <__ieee754_pow+0x96a>
 8008694:	491a      	ldr	r1, [pc, #104]	; (8008700 <__ieee754_pow+0xa30>)
 8008696:	2000      	movs	r0, #0
 8008698:	f7ff bb9e 	b.w	8007dd8 <__ieee754_pow+0x108>
 800869c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086a0:	f7ff bb9a 	b.w	8007dd8 <__ieee754_pow+0x108>
 80086a4:	9000      	str	r0, [sp, #0]
 80086a6:	f7ff bb76 	b.w	8007d96 <__ieee754_pow+0xc6>
 80086aa:	2100      	movs	r1, #0
 80086ac:	f7ff bb60 	b.w	8007d70 <__ieee754_pow+0xa0>
 80086b0:	00000000 	.word	0x00000000
 80086b4:	3fe62e43 	.word	0x3fe62e43
 80086b8:	fefa39ef 	.word	0xfefa39ef
 80086bc:	3fe62e42 	.word	0x3fe62e42
 80086c0:	0ca86c39 	.word	0x0ca86c39
 80086c4:	be205c61 	.word	0xbe205c61
 80086c8:	72bea4d0 	.word	0x72bea4d0
 80086cc:	3e663769 	.word	0x3e663769
 80086d0:	c5d26bf1 	.word	0xc5d26bf1
 80086d4:	3ebbbd41 	.word	0x3ebbbd41
 80086d8:	af25de2c 	.word	0xaf25de2c
 80086dc:	3f11566a 	.word	0x3f11566a
 80086e0:	16bebd93 	.word	0x16bebd93
 80086e4:	3f66c16c 	.word	0x3f66c16c
 80086e8:	5555553e 	.word	0x5555553e
 80086ec:	3fc55555 	.word	0x3fc55555
 80086f0:	c2f8f359 	.word	0xc2f8f359
 80086f4:	01a56e1f 	.word	0x01a56e1f
 80086f8:	3fe00000 	.word	0x3fe00000
 80086fc:	000fffff 	.word	0x000fffff
 8008700:	3ff00000 	.word	0x3ff00000
 8008704:	4090cbff 	.word	0x4090cbff
 8008708:	3f6f3400 	.word	0x3f6f3400
 800870c:	652b82fe 	.word	0x652b82fe
 8008710:	3c971547 	.word	0x3c971547

08008714 <__ieee754_sqrt>:
 8008714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008718:	ec55 4b10 	vmov	r4, r5, d0
 800871c:	4e56      	ldr	r6, [pc, #344]	; (8008878 <__ieee754_sqrt+0x164>)
 800871e:	43ae      	bics	r6, r5
 8008720:	ee10 0a10 	vmov	r0, s0
 8008724:	ee10 3a10 	vmov	r3, s0
 8008728:	4629      	mov	r1, r5
 800872a:	462a      	mov	r2, r5
 800872c:	d110      	bne.n	8008750 <__ieee754_sqrt+0x3c>
 800872e:	ee10 2a10 	vmov	r2, s0
 8008732:	462b      	mov	r3, r5
 8008734:	f7f7 ff60 	bl	80005f8 <__aeabi_dmul>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	f7f7 fda4 	bl	800028c <__adddf3>
 8008744:	4604      	mov	r4, r0
 8008746:	460d      	mov	r5, r1
 8008748:	ec45 4b10 	vmov	d0, r4, r5
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	2d00      	cmp	r5, #0
 8008752:	dc10      	bgt.n	8008776 <__ieee754_sqrt+0x62>
 8008754:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008758:	4330      	orrs	r0, r6
 800875a:	d0f5      	beq.n	8008748 <__ieee754_sqrt+0x34>
 800875c:	b15d      	cbz	r5, 8008776 <__ieee754_sqrt+0x62>
 800875e:	ee10 2a10 	vmov	r2, s0
 8008762:	462b      	mov	r3, r5
 8008764:	ee10 0a10 	vmov	r0, s0
 8008768:	f7f7 fd8e 	bl	8000288 <__aeabi_dsub>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	f7f8 f86c 	bl	800084c <__aeabi_ddiv>
 8008774:	e7e6      	b.n	8008744 <__ieee754_sqrt+0x30>
 8008776:	1509      	asrs	r1, r1, #20
 8008778:	d076      	beq.n	8008868 <__ieee754_sqrt+0x154>
 800877a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800877e:	07ce      	lsls	r6, r1, #31
 8008780:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008784:	bf5e      	ittt	pl
 8008786:	0fda      	lsrpl	r2, r3, #31
 8008788:	005b      	lslpl	r3, r3, #1
 800878a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800878e:	0fda      	lsrs	r2, r3, #31
 8008790:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008794:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008798:	2000      	movs	r0, #0
 800879a:	106d      	asrs	r5, r5, #1
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	f04f 0e16 	mov.w	lr, #22
 80087a2:	4684      	mov	ip, r0
 80087a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087a8:	eb0c 0401 	add.w	r4, ip, r1
 80087ac:	4294      	cmp	r4, r2
 80087ae:	bfde      	ittt	le
 80087b0:	1b12      	suble	r2, r2, r4
 80087b2:	eb04 0c01 	addle.w	ip, r4, r1
 80087b6:	1840      	addle	r0, r0, r1
 80087b8:	0052      	lsls	r2, r2, #1
 80087ba:	f1be 0e01 	subs.w	lr, lr, #1
 80087be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80087c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80087c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087ca:	d1ed      	bne.n	80087a8 <__ieee754_sqrt+0x94>
 80087cc:	4671      	mov	r1, lr
 80087ce:	2720      	movs	r7, #32
 80087d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80087d4:	4562      	cmp	r2, ip
 80087d6:	eb04 060e 	add.w	r6, r4, lr
 80087da:	dc02      	bgt.n	80087e2 <__ieee754_sqrt+0xce>
 80087dc:	d113      	bne.n	8008806 <__ieee754_sqrt+0xf2>
 80087de:	429e      	cmp	r6, r3
 80087e0:	d811      	bhi.n	8008806 <__ieee754_sqrt+0xf2>
 80087e2:	2e00      	cmp	r6, #0
 80087e4:	eb06 0e04 	add.w	lr, r6, r4
 80087e8:	da43      	bge.n	8008872 <__ieee754_sqrt+0x15e>
 80087ea:	f1be 0f00 	cmp.w	lr, #0
 80087ee:	db40      	blt.n	8008872 <__ieee754_sqrt+0x15e>
 80087f0:	f10c 0801 	add.w	r8, ip, #1
 80087f4:	eba2 020c 	sub.w	r2, r2, ip
 80087f8:	429e      	cmp	r6, r3
 80087fa:	bf88      	it	hi
 80087fc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008800:	1b9b      	subs	r3, r3, r6
 8008802:	4421      	add	r1, r4
 8008804:	46c4      	mov	ip, r8
 8008806:	0052      	lsls	r2, r2, #1
 8008808:	3f01      	subs	r7, #1
 800880a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800880e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008812:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008816:	d1dd      	bne.n	80087d4 <__ieee754_sqrt+0xc0>
 8008818:	4313      	orrs	r3, r2
 800881a:	d006      	beq.n	800882a <__ieee754_sqrt+0x116>
 800881c:	1c4c      	adds	r4, r1, #1
 800881e:	bf13      	iteet	ne
 8008820:	3101      	addne	r1, #1
 8008822:	3001      	addeq	r0, #1
 8008824:	4639      	moveq	r1, r7
 8008826:	f021 0101 	bicne.w	r1, r1, #1
 800882a:	1043      	asrs	r3, r0, #1
 800882c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008830:	0849      	lsrs	r1, r1, #1
 8008832:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008836:	07c2      	lsls	r2, r0, #31
 8008838:	bf48      	it	mi
 800883a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800883e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008842:	460c      	mov	r4, r1
 8008844:	463d      	mov	r5, r7
 8008846:	e77f      	b.n	8008748 <__ieee754_sqrt+0x34>
 8008848:	0ada      	lsrs	r2, r3, #11
 800884a:	3815      	subs	r0, #21
 800884c:	055b      	lsls	r3, r3, #21
 800884e:	2a00      	cmp	r2, #0
 8008850:	d0fa      	beq.n	8008848 <__ieee754_sqrt+0x134>
 8008852:	02d7      	lsls	r7, r2, #11
 8008854:	d50a      	bpl.n	800886c <__ieee754_sqrt+0x158>
 8008856:	f1c1 0420 	rsb	r4, r1, #32
 800885a:	fa23 f404 	lsr.w	r4, r3, r4
 800885e:	1e4d      	subs	r5, r1, #1
 8008860:	408b      	lsls	r3, r1
 8008862:	4322      	orrs	r2, r4
 8008864:	1b41      	subs	r1, r0, r5
 8008866:	e788      	b.n	800877a <__ieee754_sqrt+0x66>
 8008868:	4608      	mov	r0, r1
 800886a:	e7f0      	b.n	800884e <__ieee754_sqrt+0x13a>
 800886c:	0052      	lsls	r2, r2, #1
 800886e:	3101      	adds	r1, #1
 8008870:	e7ef      	b.n	8008852 <__ieee754_sqrt+0x13e>
 8008872:	46e0      	mov	r8, ip
 8008874:	e7be      	b.n	80087f4 <__ieee754_sqrt+0xe0>
 8008876:	bf00      	nop
 8008878:	7ff00000 	.word	0x7ff00000

0800887c <fabs>:
 800887c:	ec51 0b10 	vmov	r0, r1, d0
 8008880:	ee10 2a10 	vmov	r2, s0
 8008884:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008888:	ec43 2b10 	vmov	d0, r2, r3
 800888c:	4770      	bx	lr

0800888e <finite>:
 800888e:	b082      	sub	sp, #8
 8008890:	ed8d 0b00 	vstr	d0, [sp]
 8008894:	9801      	ldr	r0, [sp, #4]
 8008896:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800889a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800889e:	0fc0      	lsrs	r0, r0, #31
 80088a0:	b002      	add	sp, #8
 80088a2:	4770      	bx	lr
 80088a4:	0000      	movs	r0, r0
	...

080088a8 <nan>:
 80088a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088b0 <nan+0x8>
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	00000000 	.word	0x00000000
 80088b4:	7ff80000 	.word	0x7ff80000

080088b8 <rint>:
 80088b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ba:	ec51 0b10 	vmov	r0, r1, d0
 80088be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80088c2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80088c6:	2e13      	cmp	r6, #19
 80088c8:	ee10 4a10 	vmov	r4, s0
 80088cc:	460b      	mov	r3, r1
 80088ce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80088d2:	dc58      	bgt.n	8008986 <rint+0xce>
 80088d4:	2e00      	cmp	r6, #0
 80088d6:	da2b      	bge.n	8008930 <rint+0x78>
 80088d8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80088dc:	4302      	orrs	r2, r0
 80088de:	d023      	beq.n	8008928 <rint+0x70>
 80088e0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80088e4:	4302      	orrs	r2, r0
 80088e6:	4254      	negs	r4, r2
 80088e8:	4314      	orrs	r4, r2
 80088ea:	0c4b      	lsrs	r3, r1, #17
 80088ec:	0b24      	lsrs	r4, r4, #12
 80088ee:	045b      	lsls	r3, r3, #17
 80088f0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80088f4:	ea44 0103 	orr.w	r1, r4, r3
 80088f8:	4b32      	ldr	r3, [pc, #200]	; (80089c4 <rint+0x10c>)
 80088fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80088fe:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4630      	mov	r0, r6
 8008908:	4639      	mov	r1, r7
 800890a:	f7f7 fcbf 	bl	800028c <__adddf3>
 800890e:	e9cd 0100 	strd	r0, r1, [sp]
 8008912:	463b      	mov	r3, r7
 8008914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008918:	4632      	mov	r2, r6
 800891a:	f7f7 fcb5 	bl	8000288 <__aeabi_dsub>
 800891e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008922:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008926:	4639      	mov	r1, r7
 8008928:	ec41 0b10 	vmov	d0, r0, r1
 800892c:	b003      	add	sp, #12
 800892e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008930:	4a25      	ldr	r2, [pc, #148]	; (80089c8 <rint+0x110>)
 8008932:	4132      	asrs	r2, r6
 8008934:	ea01 0702 	and.w	r7, r1, r2
 8008938:	4307      	orrs	r7, r0
 800893a:	d0f5      	beq.n	8008928 <rint+0x70>
 800893c:	0851      	lsrs	r1, r2, #1
 800893e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8008942:	4314      	orrs	r4, r2
 8008944:	d00c      	beq.n	8008960 <rint+0xa8>
 8008946:	ea23 0201 	bic.w	r2, r3, r1
 800894a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800894e:	2e13      	cmp	r6, #19
 8008950:	fa43 f606 	asr.w	r6, r3, r6
 8008954:	bf0c      	ite	eq
 8008956:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800895a:	2400      	movne	r4, #0
 800895c:	ea42 0306 	orr.w	r3, r2, r6
 8008960:	4918      	ldr	r1, [pc, #96]	; (80089c4 <rint+0x10c>)
 8008962:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008966:	4622      	mov	r2, r4
 8008968:	e9d5 4500 	ldrd	r4, r5, [r5]
 800896c:	4620      	mov	r0, r4
 800896e:	4629      	mov	r1, r5
 8008970:	f7f7 fc8c 	bl	800028c <__adddf3>
 8008974:	e9cd 0100 	strd	r0, r1, [sp]
 8008978:	e9dd 0100 	ldrd	r0, r1, [sp]
 800897c:	4622      	mov	r2, r4
 800897e:	462b      	mov	r3, r5
 8008980:	f7f7 fc82 	bl	8000288 <__aeabi_dsub>
 8008984:	e7d0      	b.n	8008928 <rint+0x70>
 8008986:	2e33      	cmp	r6, #51	; 0x33
 8008988:	dd07      	ble.n	800899a <rint+0xe2>
 800898a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800898e:	d1cb      	bne.n	8008928 <rint+0x70>
 8008990:	ee10 2a10 	vmov	r2, s0
 8008994:	f7f7 fc7a 	bl	800028c <__adddf3>
 8008998:	e7c6      	b.n	8008928 <rint+0x70>
 800899a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800899e:	f04f 36ff 	mov.w	r6, #4294967295
 80089a2:	40d6      	lsrs	r6, r2
 80089a4:	4230      	tst	r0, r6
 80089a6:	d0bf      	beq.n	8008928 <rint+0x70>
 80089a8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80089ac:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80089b0:	bf1f      	itttt	ne
 80089b2:	ea24 0101 	bicne.w	r1, r4, r1
 80089b6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80089ba:	fa44 f202 	asrne.w	r2, r4, r2
 80089be:	ea41 0402 	orrne.w	r4, r1, r2
 80089c2:	e7cd      	b.n	8008960 <rint+0xa8>
 80089c4:	08008d10 	.word	0x08008d10
 80089c8:	000fffff 	.word	0x000fffff
 80089cc:	00000000 	.word	0x00000000

080089d0 <scalbn>:
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	ec55 4b10 	vmov	r4, r5, d0
 80089d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80089da:	4606      	mov	r6, r0
 80089dc:	462b      	mov	r3, r5
 80089de:	b99a      	cbnz	r2, 8008a08 <scalbn+0x38>
 80089e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80089e4:	4323      	orrs	r3, r4
 80089e6:	d036      	beq.n	8008a56 <scalbn+0x86>
 80089e8:	4b39      	ldr	r3, [pc, #228]	; (8008ad0 <scalbn+0x100>)
 80089ea:	4629      	mov	r1, r5
 80089ec:	ee10 0a10 	vmov	r0, s0
 80089f0:	2200      	movs	r2, #0
 80089f2:	f7f7 fe01 	bl	80005f8 <__aeabi_dmul>
 80089f6:	4b37      	ldr	r3, [pc, #220]	; (8008ad4 <scalbn+0x104>)
 80089f8:	429e      	cmp	r6, r3
 80089fa:	4604      	mov	r4, r0
 80089fc:	460d      	mov	r5, r1
 80089fe:	da10      	bge.n	8008a22 <scalbn+0x52>
 8008a00:	a32b      	add	r3, pc, #172	; (adr r3, 8008ab0 <scalbn+0xe0>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	e03a      	b.n	8008a7e <scalbn+0xae>
 8008a08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008a0c:	428a      	cmp	r2, r1
 8008a0e:	d10c      	bne.n	8008a2a <scalbn+0x5a>
 8008a10:	ee10 2a10 	vmov	r2, s0
 8008a14:	4620      	mov	r0, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	f7f7 fc38 	bl	800028c <__adddf3>
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	460d      	mov	r5, r1
 8008a20:	e019      	b.n	8008a56 <scalbn+0x86>
 8008a22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008a26:	460b      	mov	r3, r1
 8008a28:	3a36      	subs	r2, #54	; 0x36
 8008a2a:	4432      	add	r2, r6
 8008a2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008a30:	428a      	cmp	r2, r1
 8008a32:	dd08      	ble.n	8008a46 <scalbn+0x76>
 8008a34:	2d00      	cmp	r5, #0
 8008a36:	a120      	add	r1, pc, #128	; (adr r1, 8008ab8 <scalbn+0xe8>)
 8008a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a3c:	da1c      	bge.n	8008a78 <scalbn+0xa8>
 8008a3e:	a120      	add	r1, pc, #128	; (adr r1, 8008ac0 <scalbn+0xf0>)
 8008a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a44:	e018      	b.n	8008a78 <scalbn+0xa8>
 8008a46:	2a00      	cmp	r2, #0
 8008a48:	dd08      	ble.n	8008a5c <scalbn+0x8c>
 8008a4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008a56:	ec45 4b10 	vmov	d0, r4, r5
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008a60:	da19      	bge.n	8008a96 <scalbn+0xc6>
 8008a62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008a66:	429e      	cmp	r6, r3
 8008a68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008a6c:	dd0a      	ble.n	8008a84 <scalbn+0xb4>
 8008a6e:	a112      	add	r1, pc, #72	; (adr r1, 8008ab8 <scalbn+0xe8>)
 8008a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e2      	bne.n	8008a3e <scalbn+0x6e>
 8008a78:	a30f      	add	r3, pc, #60	; (adr r3, 8008ab8 <scalbn+0xe8>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f7 fdbb 	bl	80005f8 <__aeabi_dmul>
 8008a82:	e7cb      	b.n	8008a1c <scalbn+0x4c>
 8008a84:	a10a      	add	r1, pc, #40	; (adr r1, 8008ab0 <scalbn+0xe0>)
 8008a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0b8      	beq.n	8008a00 <scalbn+0x30>
 8008a8e:	a10e      	add	r1, pc, #56	; (adr r1, 8008ac8 <scalbn+0xf8>)
 8008a90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a94:	e7b4      	b.n	8008a00 <scalbn+0x30>
 8008a96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008a9a:	3236      	adds	r2, #54	; 0x36
 8008a9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008aa0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <scalbn+0x108>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	e7e8      	b.n	8008a7e <scalbn+0xae>
 8008aac:	f3af 8000 	nop.w
 8008ab0:	c2f8f359 	.word	0xc2f8f359
 8008ab4:	01a56e1f 	.word	0x01a56e1f
 8008ab8:	8800759c 	.word	0x8800759c
 8008abc:	7e37e43c 	.word	0x7e37e43c
 8008ac0:	8800759c 	.word	0x8800759c
 8008ac4:	fe37e43c 	.word	0xfe37e43c
 8008ac8:	c2f8f359 	.word	0xc2f8f359
 8008acc:	81a56e1f 	.word	0x81a56e1f
 8008ad0:	43500000 	.word	0x43500000
 8008ad4:	ffff3cb0 	.word	0xffff3cb0
 8008ad8:	3c900000 	.word	0x3c900000

08008adc <_init>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	bf00      	nop
 8008ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae2:	bc08      	pop	{r3}
 8008ae4:	469e      	mov	lr, r3
 8008ae6:	4770      	bx	lr

08008ae8 <_fini>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	bf00      	nop
 8008aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aee:	bc08      	pop	{r3}
 8008af0:	469e      	mov	lr, r3
 8008af2:	4770      	bx	lr
