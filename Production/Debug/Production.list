
Production.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08008268  08008268  00018268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008490  08008490  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08008490  08008490  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008490  08008490  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001d8  0800866c  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800866c  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001051a  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002722  00000000  00000000  0003071e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00032e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00033d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c66d  00000000  00000000  00034b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116ea  00000000  00000000  000511f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a765c  00000000  00000000  000628df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109f3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000477c  00000000  00000000  00109f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800824c 	.word	0x0800824c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800824c 	.word	0x0800824c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <delay>:
#define timer htim2


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <delay+0x30>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000baa:	bf00      	nop
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <delay+0x30>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3f9      	bcc.n	8000bac <delay+0x14>
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000380 	.word	0x20000380

08000bcc <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2108      	movs	r1, #8
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f003 fe40 	bl	8004868 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	08db      	lsrs	r3, r3, #3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <send_to_lcd+0xa0>)
 8000bfa:	f003 fe35 	bl	8004868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <send_to_lcd+0xa0>)
 8000c10:	f003 fe2a 	bl	8004868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	085b      	lsrs	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	2101      	movs	r1, #1
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <send_to_lcd+0xa0>)
 8000c26:	f003 fe1f 	bl	8004868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f003 fe15 	bl	8004868 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2120      	movs	r1, #32
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f003 fe0f 	bl	8004868 <HAL_GPIO_WritePin>
	delay (20);
 8000c4a:	2014      	movs	r0, #20
 8000c4c:	f7ff ffa4 	bl	8000b98 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2120      	movs	r1, #32
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f003 fe06 	bl	8004868 <HAL_GPIO_WritePin>
	delay (20);
 8000c5c:	2014      	movs	r0, #20
 8000c5e:	f7ff ff9b 	bl	8000b98 <delay>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	48000400 	.word	0x48000400

08000c70 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ffa1 	bl	8000bcc <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff98 	bl	8000bcc <send_to_lcd>
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff87 	bl	8000bcc <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff7e 	bl	8000bcc <send_to_lcd>
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <lcd_put_cur+0x18>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d005      	beq.n	8000cfa <lcd_put_cur+0x22>
 8000cee:	e009      	b.n	8000d04 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf6:	603b      	str	r3, [r7, #0]
            break;
 8000cf8:	e004      	b.n	8000d04 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d00:	603b      	str	r3, [r7, #0]
            break;
 8000d02:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ffb1 	bl	8000c70 <lcd_send_cmd>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <lcd_init>:


void lcd_init (void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000d1a:	2032      	movs	r0, #50	; 0x32
 8000d1c:	f002 fdde 	bl	80038dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d20:	2030      	movs	r0, #48	; 0x30
 8000d22:	f7ff ffa5 	bl	8000c70 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d26:	2005      	movs	r0, #5
 8000d28:	f002 fdd8 	bl	80038dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d2c:	2030      	movs	r0, #48	; 0x30
 8000d2e:	f7ff ff9f 	bl	8000c70 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d32:	2001      	movs	r0, #1
 8000d34:	f002 fdd2 	bl	80038dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d38:	2030      	movs	r0, #48	; 0x30
 8000d3a:	f7ff ff99 	bl	8000c70 <lcd_send_cmd>
	HAL_Delay(10);
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f002 fdcc 	bl	80038dc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d44:	2020      	movs	r0, #32
 8000d46:	f7ff ff93 	bl	8000c70 <lcd_send_cmd>
	HAL_Delay(10);
 8000d4a:	200a      	movs	r0, #10
 8000d4c:	f002 fdc6 	bl	80038dc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d50:	2028      	movs	r0, #40	; 0x28
 8000d52:	f7ff ff8d 	bl	8000c70 <lcd_send_cmd>
	HAL_Delay(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f002 fdc0 	bl	80038dc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d5c:	2008      	movs	r0, #8
 8000d5e:	f7ff ff87 	bl	8000c70 <lcd_send_cmd>
	HAL_Delay(1);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f002 fdba 	bl	80038dc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff ff81 	bl	8000c70 <lcd_send_cmd>
	HAL_Delay(1);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f002 fdb4 	bl	80038dc <HAL_Delay>
	HAL_Delay(1);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f002 fdb1 	bl	80038dc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d7a:	2006      	movs	r0, #6
 8000d7c:	f7ff ff78 	bl	8000c70 <lcd_send_cmd>
	HAL_Delay(1);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f002 fdab 	bl	80038dc <HAL_Delay>
	lcd_send_cmd (0x0F); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000d86:	200f      	movs	r0, #15
 8000d88:	f7ff ff72 	bl	8000c70 <lcd_send_cmd>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d98:	e006      	b.n	8000da8 <lcd_send_string+0x18>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff7e 	bl	8000ca4 <lcd_send_data>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f4      	bne.n	8000d9a <lcd_send_string+0xa>
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	0000      	movs	r0, r0
 8000dbc:	0000      	movs	r0, r0
	...

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//booleans to track the state of the buttons
	uint8_t up_btn_pressed = 0; // up button pressed
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	77fb      	strb	r3, [r7, #31]
	uint8_t down_btn_pressed = 0; // down button pressed
 8000dca:	2300      	movs	r3, #0
 8000dcc:	77bb      	strb	r3, [r7, #30]
	uint8_t sel_btn_pressed = 0; // select button pressed
 8000dce:	2300      	movs	r3, #0
 8000dd0:	777b      	strb	r3, [r7, #29]
	uint8_t change_value_bool = 0; //boolean for changing the value the selected item
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	773b      	strb	r3, [r7, #28]
	uint8_t a_data_1[2], a_data_2[2], a_data_3[2]; //analog data in a byte array

	//Get variables from Flash Memory

	// retrieve the stored CAN IDs
	CAN_IDs=(*(__IO uint32_t *) 0x0800F800);
 8000dd6:	4bac      	ldr	r3, [pc, #688]	; (8001088 <main+0x2c8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4bab      	ldr	r3, [pc, #684]	; (800108c <main+0x2cc>)
 8000dde:	601a      	str	r2, [r3, #0]
	memcpy(id_arr, wordToBytes(CAN_IDs), 4);
 8000de0:	4baa      	ldr	r3, [pc, #680]	; (800108c <main+0x2cc>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fa23 	bl	8003230 <wordToBytes>
 8000dea:	4603      	mov	r3, r0
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4ba7      	ldr	r3, [pc, #668]	; (8001090 <main+0x2d0>)
 8000df2:	601a      	str	r2, [r3, #0]
	can_id_1=id_arr[0];
 8000df4:	4ba6      	ldr	r3, [pc, #664]	; (8001090 <main+0x2d0>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4ba6      	ldr	r3, [pc, #664]	; (8001094 <main+0x2d4>)
 8000dfa:	701a      	strb	r2, [r3, #0]
	can_id_2=id_arr[1];
 8000dfc:	4ba4      	ldr	r3, [pc, #656]	; (8001090 <main+0x2d0>)
 8000dfe:	785a      	ldrb	r2, [r3, #1]
 8000e00:	4ba5      	ldr	r3, [pc, #660]	; (8001098 <main+0x2d8>)
 8000e02:	701a      	strb	r2, [r3, #0]
	can_id_3=id_arr[2];
 8000e04:	4ba2      	ldr	r3, [pc, #648]	; (8001090 <main+0x2d0>)
 8000e06:	789a      	ldrb	r2, [r3, #2]
 8000e08:	4ba4      	ldr	r3, [pc, #656]	; (800109c <main+0x2dc>)
 8000e0a:	701a      	strb	r2, [r3, #0]
	//if duplicate IDs set IDs to 1, 2, and 3 respectively
	if(can_id_1==can_id_2 || can_id_1==can_id_3||can_id_2==can_id_3){
 8000e0c:	4ba1      	ldr	r3, [pc, #644]	; (8001094 <main+0x2d4>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	4ba1      	ldr	r3, [pc, #644]	; (8001098 <main+0x2d8>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d00b      	beq.n	8000e30 <main+0x70>
 8000e18:	4b9e      	ldr	r3, [pc, #632]	; (8001094 <main+0x2d4>)
 8000e1a:	781a      	ldrb	r2, [r3, #0]
 8000e1c:	4b9f      	ldr	r3, [pc, #636]	; (800109c <main+0x2dc>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d005      	beq.n	8000e30 <main+0x70>
 8000e24:	4b9c      	ldr	r3, [pc, #624]	; (8001098 <main+0x2d8>)
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4b9c      	ldr	r3, [pc, #624]	; (800109c <main+0x2dc>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d108      	bne.n	8000e42 <main+0x82>
		can_id_1=1;
 8000e30:	4b98      	ldr	r3, [pc, #608]	; (8001094 <main+0x2d4>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
		can_id_2=2;
 8000e36:	4b98      	ldr	r3, [pc, #608]	; (8001098 <main+0x2d8>)
 8000e38:	2202      	movs	r2, #2
 8000e3a:	701a      	strb	r2, [r3, #0]
		can_id_3=3;
 8000e3c:	4b97      	ldr	r3, [pc, #604]	; (800109c <main+0x2dc>)
 8000e3e:	2203      	movs	r2, #3
 8000e40:	701a      	strb	r2, [r3, #0]
	}

	//get the baud rate
	baud_pos=(uint8_t)(*(__IO uint32_t *) 0x0800F804);
 8000e42:	4b97      	ldr	r3, [pc, #604]	; (80010a0 <main+0x2e0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	b25a      	sxtb	r2, r3
 8000e48:	4b96      	ldr	r3, [pc, #600]	; (80010a4 <main+0x2e4>)
 8000e4a:	701a      	strb	r2, [r3, #0]
	//if invalid baud rate then set to 1M
	if(baud_pos<0||baud_pos>3)
 8000e4c:	4b95      	ldr	r3, [pc, #596]	; (80010a4 <main+0x2e4>)
 8000e4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db04      	blt.n	8000e60 <main+0xa0>
 8000e56:	4b93      	ldr	r3, [pc, #588]	; (80010a4 <main+0x2e4>)
 8000e58:	f993 3000 	ldrsb.w	r3, [r3]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	dd02      	ble.n	8000e66 <main+0xa6>
		baud_pos=3;
 8000e60:	4b90      	ldr	r3, [pc, #576]	; (80010a4 <main+0x2e4>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	701a      	strb	r2, [r3, #0]
	PSC=pow(2,4-baud_pos);//set prescaler
 8000e66:	4b8f      	ldr	r3, [pc, #572]	; (80010a4 <main+0x2e4>)
 8000e68:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6c:	f1c3 0304 	rsb	r3, r3, #4
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb57 	bl	8000524 <__aeabi_i2d>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	ec43 2b11 	vmov	d1, r2, r3
 8000e7e:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8001080 <main+0x2c0>
 8000e82:	f006 fa2f 	bl	80072e4 <pow>
 8000e86:	ec53 2b10 	vmov	r2, r3, d0
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fe63 	bl	8000b58 <__aeabi_d2uiz>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b84      	ldr	r3, [pc, #528]	; (80010a8 <main+0x2e8>)
 8000e98:	701a      	strb	r2, [r3, #0]

	//get the number of delays between samples
	num_delays=(uint8_t)(*(__IO uint32_t *) 0x0800F808);
 8000e9a:	4b84      	ldr	r3, [pc, #528]	; (80010ac <main+0x2ec>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b83      	ldr	r3, [pc, #524]	; (80010b0 <main+0x2f0>)
 8000ea2:	701a      	strb	r2, [r3, #0]

	// retrieve the analog enabled booleans
	enable_word=(*(__IO uint32_t *) 0x0800F80C);
 8000ea4:	4b83      	ldr	r3, [pc, #524]	; (80010b4 <main+0x2f4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b83      	ldr	r3, [pc, #524]	; (80010b8 <main+0x2f8>)
 8000eac:	601a      	str	r2, [r3, #0]
	memcpy(analog_enable_arr, wordToBytes(enable_word), 4);
 8000eae:	4b82      	ldr	r3, [pc, #520]	; (80010b8 <main+0x2f8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 f9bc 	bl	8003230 <wordToBytes>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b7f      	ldr	r3, [pc, #508]	; (80010bc <main+0x2fc>)
 8000ec0:	601a      	str	r2, [r3, #0]
	//invert values so the default is on after erasing the memory
	analog_1_enabled=!analog_enable_arr[0];
 8000ec2:	4b7e      	ldr	r3, [pc, #504]	; (80010bc <main+0x2fc>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf0c      	ite	eq
 8000eca:	2301      	moveq	r3, #1
 8000ecc:	2300      	movne	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b7b      	ldr	r3, [pc, #492]	; (80010c0 <main+0x300>)
 8000ed4:	701a      	strb	r2, [r3, #0]
	analog_2_enabled=!analog_enable_arr[1];
 8000ed6:	4b79      	ldr	r3, [pc, #484]	; (80010bc <main+0x2fc>)
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf0c      	ite	eq
 8000ede:	2301      	moveq	r3, #1
 8000ee0:	2300      	movne	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b77      	ldr	r3, [pc, #476]	; (80010c4 <main+0x304>)
 8000ee8:	701a      	strb	r2, [r3, #0]
	analog_3_enabled=!analog_enable_arr[2];
 8000eea:	4b74      	ldr	r3, [pc, #464]	; (80010bc <main+0x2fc>)
 8000eec:	789b      	ldrb	r3, [r3, #2]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	bf0c      	ite	eq
 8000ef2:	2301      	moveq	r3, #1
 8000ef4:	2300      	movne	r3, #0
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <main+0x308>)
 8000efc:	701a      	strb	r2, [r3, #0]

	//get the offsets
	analog_1_offset=(*(__IO uint32_t *) 0x0800F810);
 8000efe:	4b73      	ldr	r3, [pc, #460]	; (80010cc <main+0x30c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a73      	ldr	r2, [pc, #460]	; (80010d0 <main+0x310>)
 8000f04:	6013      	str	r3, [r2, #0]
	analog_2_offset=(*(__IO uint32_t *) 0x0800F814);
 8000f06:	4b73      	ldr	r3, [pc, #460]	; (80010d4 <main+0x314>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a73      	ldr	r2, [pc, #460]	; (80010d8 <main+0x318>)
 8000f0c:	6013      	str	r3, [r2, #0]
	analog_3_offset=(*(__IO uint32_t *) 0x0800F818);
 8000f0e:	4b73      	ldr	r3, [pc, #460]	; (80010dc <main+0x31c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a73      	ldr	r2, [pc, #460]	; (80010e0 <main+0x320>)
 8000f14:	6013      	str	r3, [r2, #0]


	// Set the headers for the first analog device
	headers_1.StdId = can_id_1; // set the CAN ID
 8000f16:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <main+0x2d4>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b71      	ldr	r3, [pc, #452]	; (80010e4 <main+0x324>)
 8000f1e:	601a      	str	r2, [r3, #0]
	headers_1.IDE = CAN_ID_STD;
 8000f20:	4b70      	ldr	r3, [pc, #448]	; (80010e4 <main+0x324>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
	headers_1.RTR = CAN_RTR_DATA;
 8000f26:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <main+0x324>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
	headers_1.DLC = sizeof(a_data_1); // set the size of the data
 8000f2c:	4b6d      	ldr	r3, [pc, #436]	; (80010e4 <main+0x324>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	611a      	str	r2, [r3, #16]
	headers_1.TransmitGlobalTime = DISABLE; // disable transmission of time
 8000f32:	4b6c      	ldr	r3, [pc, #432]	; (80010e4 <main+0x324>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	751a      	strb	r2, [r3, #20]

	// Set the headers for the second analog device
	headers_2.StdId = can_id_2; // set the CAN ID
 8000f38:	4b57      	ldr	r3, [pc, #348]	; (8001098 <main+0x2d8>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b6a      	ldr	r3, [pc, #424]	; (80010e8 <main+0x328>)
 8000f40:	601a      	str	r2, [r3, #0]
	headers_2.IDE = CAN_ID_STD;
 8000f42:	4b69      	ldr	r3, [pc, #420]	; (80010e8 <main+0x328>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
	headers_2.RTR = CAN_RTR_DATA;
 8000f48:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <main+0x328>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
	headers_2.DLC = sizeof(a_data_2); // set the size of the data
 8000f4e:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <main+0x328>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	611a      	str	r2, [r3, #16]
	headers_2.TransmitGlobalTime = DISABLE; // disable transmission of time
 8000f54:	4b64      	ldr	r3, [pc, #400]	; (80010e8 <main+0x328>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	751a      	strb	r2, [r3, #20]

	// Set the headers for the third analog device
	headers_3.StdId = can_id_3; // set the CAN ID
 8000f5a:	4b50      	ldr	r3, [pc, #320]	; (800109c <main+0x2dc>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b62      	ldr	r3, [pc, #392]	; (80010ec <main+0x32c>)
 8000f62:	601a      	str	r2, [r3, #0]
	headers_3.IDE = CAN_ID_STD;
 8000f64:	4b61      	ldr	r3, [pc, #388]	; (80010ec <main+0x32c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
	headers_3.RTR = CAN_RTR_DATA;
 8000f6a:	4b60      	ldr	r3, [pc, #384]	; (80010ec <main+0x32c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
	headers_3.DLC = sizeof(a_data_3); // set the size of the data
 8000f70:	4b5e      	ldr	r3, [pc, #376]	; (80010ec <main+0x32c>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	611a      	str	r2, [r3, #16]
	headers_3.TransmitGlobalTime = DISABLE; // disable transmission of time
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <main+0x32c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	751a      	strb	r2, [r3, #20]


	//Save the stored values to the menus
	//set the baud rate
	memset(temp,0,17); // erase the temp array
 8000f7c:	2211      	movs	r2, #17
 8000f7e:	2100      	movs	r1, #0
 8000f80:	485b      	ldr	r0, [pc, #364]	; (80010f0 <main+0x330>)
 8000f82:	f005 fd1f 	bl	80069c4 <memset>
	strncpy(temp, "Baud rate:  ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8000f86:	2210      	movs	r2, #16
 8000f88:	495a      	ldr	r1, [pc, #360]	; (80010f4 <main+0x334>)
 8000f8a:	4859      	ldr	r0, [pc, #356]	; (80010f0 <main+0x330>)
 8000f8c:	f005 fd89 	bl	8006aa2 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 8000f90:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <main+0x2e4>)
 8000f92:	f993 3000 	ldrsb.w	r3, [r3]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4a57      	ldr	r2, [pc, #348]	; (80010f8 <main+0x338>)
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2211      	movs	r2, #17
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4853      	ldr	r0, [pc, #332]	; (80010f0 <main+0x330>)
 8000fa2:	f005 fd46 	bl	8006a32 <strlcat>
	strlcpy(can_menu[1],temp,17);
 8000fa6:	2211      	movs	r2, #17
 8000fa8:	4951      	ldr	r1, [pc, #324]	; (80010f0 <main+0x330>)
 8000faa:	4854      	ldr	r0, [pc, #336]	; (80010fc <main+0x33c>)
 8000fac:	f005 fd64 	bl	8006a78 <strlcpy>

	//set can IDs
	memset(temp,0,17); // erase the temp array
 8000fb0:	2211      	movs	r2, #17
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	484e      	ldr	r0, [pc, #312]	; (80010f0 <main+0x330>)
 8000fb6:	f005 fd05 	bl	80069c4 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8000fba:	2210      	movs	r2, #16
 8000fbc:	4950      	ldr	r1, [pc, #320]	; (8001100 <main+0x340>)
 8000fbe:	484c      	ldr	r0, [pc, #304]	; (80010f0 <main+0x330>)
 8000fc0:	f005 fd6f 	bl	8006aa2 <strncpy>
	strcat(temp, "1:    ");
 8000fc4:	484a      	ldr	r0, [pc, #296]	; (80010f0 <main+0x330>)
 8000fc6:	f7ff f903 	bl	80001d0 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <main+0x330>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a4c      	ldr	r2, [pc, #304]	; (8001104 <main+0x344>)
 8000fd4:	6810      	ldr	r0, [r2, #0]
 8000fd6:	6018      	str	r0, [r3, #0]
 8000fd8:	8891      	ldrh	r1, [r2, #4]
 8000fda:	7992      	ldrb	r2, [r2, #6]
 8000fdc:	8099      	strh	r1, [r3, #4]
 8000fde:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4848      	ldr	r0, [pc, #288]	; (8001108 <main+0x348>)
 8000fe6:	f005 fced 	bl	80069c4 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <main+0x2d4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4946      	ldr	r1, [pc, #280]	; (800110c <main+0x34c>)
 8000ff2:	4845      	ldr	r0, [pc, #276]	; (8001108 <main+0x348>)
 8000ff4:	f005 fcee 	bl	80069d4 <siprintf>
	strlcat(temp, char_arr,17);
 8000ff8:	2211      	movs	r2, #17
 8000ffa:	4943      	ldr	r1, [pc, #268]	; (8001108 <main+0x348>)
 8000ffc:	483c      	ldr	r0, [pc, #240]	; (80010f0 <main+0x330>)
 8000ffe:	f005 fd18 	bl	8006a32 <strlcat>
	memcpy(can_menu[2],temp,17);
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <main+0x350>)
 8001004:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <main+0x330>)
 8001006:	3322      	adds	r3, #34	; 0x22
 8001008:	6815      	ldr	r5, [r2, #0]
 800100a:	6854      	ldr	r4, [r2, #4]
 800100c:	6890      	ldr	r0, [r2, #8]
 800100e:	68d1      	ldr	r1, [r2, #12]
 8001010:	601d      	str	r5, [r3, #0]
 8001012:	605c      	str	r4, [r3, #4]
 8001014:	6098      	str	r0, [r3, #8]
 8001016:	60d9      	str	r1, [r3, #12]
 8001018:	7c12      	ldrb	r2, [r2, #16]
 800101a:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 800101c:	2211      	movs	r2, #17
 800101e:	2100      	movs	r1, #0
 8001020:	4833      	ldr	r0, [pc, #204]	; (80010f0 <main+0x330>)
 8001022:	f005 fccf 	bl	80069c4 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8001026:	2210      	movs	r2, #16
 8001028:	4935      	ldr	r1, [pc, #212]	; (8001100 <main+0x340>)
 800102a:	4831      	ldr	r0, [pc, #196]	; (80010f0 <main+0x330>)
 800102c:	f005 fd39 	bl	8006aa2 <strncpy>
	strcat(temp, "2:    ");
 8001030:	482f      	ldr	r0, [pc, #188]	; (80010f0 <main+0x330>)
 8001032:	f7ff f8cd 	bl	80001d0 <strlen>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <main+0x330>)
 800103c:	4413      	add	r3, r2
 800103e:	4a35      	ldr	r2, [pc, #212]	; (8001114 <main+0x354>)
 8001040:	6810      	ldr	r0, [r2, #0]
 8001042:	6018      	str	r0, [r3, #0]
 8001044:	8891      	ldrh	r1, [r2, #4]
 8001046:	7992      	ldrb	r2, [r2, #6]
 8001048:	8099      	strh	r1, [r3, #4]
 800104a:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 800104c:	2210      	movs	r2, #16
 800104e:	2100      	movs	r1, #0
 8001050:	482d      	ldr	r0, [pc, #180]	; (8001108 <main+0x348>)
 8001052:	f005 fcb7 	bl	80069c4 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <main+0x2d8>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	492b      	ldr	r1, [pc, #172]	; (800110c <main+0x34c>)
 800105e:	482a      	ldr	r0, [pc, #168]	; (8001108 <main+0x348>)
 8001060:	f005 fcb8 	bl	80069d4 <siprintf>
	strlcat(temp, char_arr,17);
 8001064:	2211      	movs	r2, #17
 8001066:	4928      	ldr	r1, [pc, #160]	; (8001108 <main+0x348>)
 8001068:	4821      	ldr	r0, [pc, #132]	; (80010f0 <main+0x330>)
 800106a:	f005 fce2 	bl	8006a32 <strlcat>
	memcpy(can_menu[3],temp,17);
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <main+0x350>)
 8001070:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <main+0x330>)
 8001072:	3333      	adds	r3, #51	; 0x33
 8001074:	6815      	ldr	r5, [r2, #0]
 8001076:	6854      	ldr	r4, [r2, #4]
 8001078:	6890      	ldr	r0, [r2, #8]
 800107a:	68d1      	ldr	r1, [r2, #12]
 800107c:	e04c      	b.n	8001118 <main+0x358>
 800107e:	bf00      	nop
 8001080:	00000000 	.word	0x00000000
 8001084:	40000000 	.word	0x40000000
 8001088:	0800f800 	.word	0x0800f800
 800108c:	20000310 	.word	0x20000310
 8001090:	20000220 	.word	0x20000220
 8001094:	20000364 	.word	0x20000364
 8001098:	2000029c 	.word	0x2000029c
 800109c:	20000214 	.word	0x20000214
 80010a0:	0800f804 	.word	0x0800f804
 80010a4:	2000015b 	.word	0x2000015b
 80010a8:	20000000 	.word	0x20000000
 80010ac:	0800f808 	.word	0x0800f808
 80010b0:	20000207 	.word	0x20000207
 80010b4:	0800f80c 	.word	0x0800f80c
 80010b8:	200002a0 	.word	0x200002a0
 80010bc:	2000031c 	.word	0x2000031c
 80010c0:	20000001 	.word	0x20000001
 80010c4:	20000002 	.word	0x20000002
 80010c8:	20000003 	.word	0x20000003
 80010cc:	0800f810 	.word	0x0800f810
 80010d0:	200001f4 	.word	0x200001f4
 80010d4:	0800f814 	.word	0x0800f814
 80010d8:	200001f8 	.word	0x200001f8
 80010dc:	0800f818 	.word	0x0800f818
 80010e0:	200001fc 	.word	0x200001fc
 80010e4:	20000240 	.word	0x20000240
 80010e8:	20000368 	.word	0x20000368
 80010ec:	20000228 	.word	0x20000228
 80010f0:	20000284 	.word	0x20000284
 80010f4:	08008268 	.word	0x08008268
 80010f8:	080083d8 	.word	0x080083d8
 80010fc:	20000059 	.word	0x20000059
 8001100:	08008278 	.word	0x08008278
 8001104:	08008280 	.word	0x08008280
 8001108:	200003d0 	.word	0x200003d0
 800110c:	08008288 	.word	0x08008288
 8001110:	20000048 	.word	0x20000048
 8001114:	08008290 	.word	0x08008290
 8001118:	601d      	str	r5, [r3, #0]
 800111a:	605c      	str	r4, [r3, #4]
 800111c:	6098      	str	r0, [r3, #8]
 800111e:	60d9      	str	r1, [r3, #12]
 8001120:	7c12      	ldrb	r2, [r2, #16]
 8001122:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 8001124:	2211      	movs	r2, #17
 8001126:	2100      	movs	r1, #0
 8001128:	48bd      	ldr	r0, [pc, #756]	; (8001420 <main+0x660>)
 800112a:	f005 fc4b 	bl	80069c4 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 800112e:	2210      	movs	r2, #16
 8001130:	49bc      	ldr	r1, [pc, #752]	; (8001424 <main+0x664>)
 8001132:	48bb      	ldr	r0, [pc, #748]	; (8001420 <main+0x660>)
 8001134:	f005 fcb5 	bl	8006aa2 <strncpy>
	strcat(temp, "3:    ");
 8001138:	48b9      	ldr	r0, [pc, #740]	; (8001420 <main+0x660>)
 800113a:	f7ff f849 	bl	80001d0 <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4bb7      	ldr	r3, [pc, #732]	; (8001420 <main+0x660>)
 8001144:	4413      	add	r3, r2
 8001146:	4ab8      	ldr	r2, [pc, #736]	; (8001428 <main+0x668>)
 8001148:	6810      	ldr	r0, [r2, #0]
 800114a:	6018      	str	r0, [r3, #0]
 800114c:	8891      	ldrh	r1, [r2, #4]
 800114e:	7992      	ldrb	r2, [r2, #6]
 8001150:	8099      	strh	r1, [r3, #4]
 8001152:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8001154:	2210      	movs	r2, #16
 8001156:	2100      	movs	r1, #0
 8001158:	48b4      	ldr	r0, [pc, #720]	; (800142c <main+0x66c>)
 800115a:	f005 fc33 	bl	80069c4 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 800115e:	4bb4      	ldr	r3, [pc, #720]	; (8001430 <main+0x670>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	49b3      	ldr	r1, [pc, #716]	; (8001434 <main+0x674>)
 8001166:	48b1      	ldr	r0, [pc, #708]	; (800142c <main+0x66c>)
 8001168:	f005 fc34 	bl	80069d4 <siprintf>
	strlcat(temp, char_arr,17);
 800116c:	2211      	movs	r2, #17
 800116e:	49af      	ldr	r1, [pc, #700]	; (800142c <main+0x66c>)
 8001170:	48ab      	ldr	r0, [pc, #684]	; (8001420 <main+0x660>)
 8001172:	f005 fc5e 	bl	8006a32 <strlcat>
	memcpy(can_menu[4],temp,17);
 8001176:	4bb0      	ldr	r3, [pc, #704]	; (8001438 <main+0x678>)
 8001178:	4aa9      	ldr	r2, [pc, #676]	; (8001420 <main+0x660>)
 800117a:	f103 0444 	add.w	r4, r3, #68	; 0x44
 800117e:	4615      	mov	r5, r2
 8001180:	6828      	ldr	r0, [r5, #0]
 8001182:	6869      	ldr	r1, [r5, #4]
 8001184:	68aa      	ldr	r2, [r5, #8]
 8001186:	68eb      	ldr	r3, [r5, #12]
 8001188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118a:	7c2b      	ldrb	r3, [r5, #16]
 800118c:	7023      	strb	r3, [r4, #0]

	//Delay
	memset(temp,0,17); // erase the temp array
 800118e:	2211      	movs	r2, #17
 8001190:	2100      	movs	r1, #0
 8001192:	48a3      	ldr	r0, [pc, #652]	; (8001420 <main+0x660>)
 8001194:	f005 fc16 	bl	80069c4 <memset>
	strncpy(temp, "Delay:   ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8001198:	2210      	movs	r2, #16
 800119a:	49a8      	ldr	r1, [pc, #672]	; (800143c <main+0x67c>)
 800119c:	48a0      	ldr	r0, [pc, #640]	; (8001420 <main+0x660>)
 800119e:	f005 fc80 	bl	8006aa2 <strncpy>
	memset(char_arr, 0, 16);
 80011a2:	2210      	movs	r2, #16
 80011a4:	2100      	movs	r1, #0
 80011a6:	48a1      	ldr	r0, [pc, #644]	; (800142c <main+0x66c>)
 80011a8:	f005 fc0c 	bl	80069c4 <memset>
	sprintf(char_arr, "%05d", us*(num_delays+1));
 80011ac:	4ba4      	ldr	r3, [pc, #656]	; (8001440 <main+0x680>)
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4ba3      	ldr	r3, [pc, #652]	; (8001444 <main+0x684>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	fb03 f302 	mul.w	r3, r3, r2
 80011be:	461a      	mov	r2, r3
 80011c0:	49a1      	ldr	r1, [pc, #644]	; (8001448 <main+0x688>)
 80011c2:	489a      	ldr	r0, [pc, #616]	; (800142c <main+0x66c>)
 80011c4:	f005 fc06 	bl	80069d4 <siprintf>
	strcat(temp, char_arr);
 80011c8:	4998      	ldr	r1, [pc, #608]	; (800142c <main+0x66c>)
 80011ca:	4895      	ldr	r0, [pc, #596]	; (8001420 <main+0x660>)
 80011cc:	f005 fc22 	bl	8006a14 <strcat>
	strlcat(temp,"us",17);
 80011d0:	2211      	movs	r2, #17
 80011d2:	499e      	ldr	r1, [pc, #632]	; (800144c <main+0x68c>)
 80011d4:	4892      	ldr	r0, [pc, #584]	; (8001420 <main+0x660>)
 80011d6:	f005 fc2c 	bl	8006a32 <strlcat>
	memcpy(main_menu[3],temp,17);
 80011da:	4b9d      	ldr	r3, [pc, #628]	; (8001450 <main+0x690>)
 80011dc:	4a90      	ldr	r2, [pc, #576]	; (8001420 <main+0x660>)
 80011de:	3333      	adds	r3, #51	; 0x33
 80011e0:	6815      	ldr	r5, [r2, #0]
 80011e2:	6854      	ldr	r4, [r2, #4]
 80011e4:	6890      	ldr	r0, [r2, #8]
 80011e6:	68d1      	ldr	r1, [r2, #12]
 80011e8:	601d      	str	r5, [r3, #0]
 80011ea:	605c      	str	r4, [r3, #4]
 80011ec:	6098      	str	r0, [r3, #8]
 80011ee:	60d9      	str	r1, [r3, #12]
 80011f0:	7c12      	ldrb	r2, [r2, #16]
 80011f2:	741a      	strb	r2, [r3, #16]

	//Analog enabled bools
	if(!analog_1_enabled)
 80011f4:	4b97      	ldr	r3, [pc, #604]	; (8001454 <main+0x694>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10b      	bne.n	8001214 <main+0x454>
		memcpy(analog_menu[5],"Analog 1:    OFF",17);
 80011fc:	4b96      	ldr	r3, [pc, #600]	; (8001458 <main+0x698>)
 80011fe:	4a97      	ldr	r2, [pc, #604]	; (800145c <main+0x69c>)
 8001200:	f103 0555 	add.w	r5, r3, #85	; 0x55
 8001204:	4614      	mov	r4, r2
 8001206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001208:	6028      	str	r0, [r5, #0]
 800120a:	6069      	str	r1, [r5, #4]
 800120c:	60aa      	str	r2, [r5, #8]
 800120e:	60eb      	str	r3, [r5, #12]
 8001210:	7823      	ldrb	r3, [r4, #0]
 8001212:	742b      	strb	r3, [r5, #16]
	if(!analog_2_enabled)
 8001214:	4b92      	ldr	r3, [pc, #584]	; (8001460 <main+0x6a0>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10b      	bne.n	8001234 <main+0x474>
		memcpy(analog_menu[6],"Analog 2:    OFF",17);
 800121c:	4b8e      	ldr	r3, [pc, #568]	; (8001458 <main+0x698>)
 800121e:	4a91      	ldr	r2, [pc, #580]	; (8001464 <main+0x6a4>)
 8001220:	f103 0566 	add.w	r5, r3, #102	; 0x66
 8001224:	4614      	mov	r4, r2
 8001226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001228:	6028      	str	r0, [r5, #0]
 800122a:	6069      	str	r1, [r5, #4]
 800122c:	60aa      	str	r2, [r5, #8]
 800122e:	60eb      	str	r3, [r5, #12]
 8001230:	7823      	ldrb	r3, [r4, #0]
 8001232:	742b      	strb	r3, [r5, #16]
	if(!analog_3_enabled)
 8001234:	4b8c      	ldr	r3, [pc, #560]	; (8001468 <main+0x6a8>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10b      	bne.n	8001254 <main+0x494>
		memcpy(analog_menu[7],"Analog 3:    OFF",17);
 800123c:	4b86      	ldr	r3, [pc, #536]	; (8001458 <main+0x698>)
 800123e:	4a8b      	ldr	r2, [pc, #556]	; (800146c <main+0x6ac>)
 8001240:	f103 0577 	add.w	r5, r3, #119	; 0x77
 8001244:	4614      	mov	r4, r2
 8001246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001248:	6028      	str	r0, [r5, #0]
 800124a:	6069      	str	r1, [r5, #4]
 800124c:	60aa      	str	r2, [r5, #8]
 800124e:	60eb      	str	r3, [r5, #12]
 8001250:	7823      	ldrb	r3, [r4, #0]
 8001252:	742b      	strb	r3, [r5, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001254:	f002 fadc 	bl	8003810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001258:	f000 ff8c 	bl	8002174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125c:	f001 f92e 	bl	80024bc <MX_GPIO_Init>
  MX_CAN_Init();
 8001260:	f000 ffe6 	bl	8002230 <MX_CAN_Init>
  MX_SDADC1_Init();
 8001264:	f001 f828 	bl	80022b8 <MX_SDADC1_Init>
  MX_SDADC2_Init();
 8001268:	f001 f862 	bl	8002330 <MX_SDADC2_Init>
  MX_SDADC3_Init();
 800126c:	f001 f89e 	bl	80023ac <MX_SDADC3_Init>
  MX_TIM2_Init();
 8001270:	f001 f8d8 	bl	8002424 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);// start timer
 8001274:	487e      	ldr	r0, [pc, #504]	; (8001470 <main+0x6b0>)
 8001276:	f005 f8af 	bl	80063d8 <HAL_TIM_Base_Start>

	//initialize LCD
	lcd_init();
 800127a:	f7ff fd4c 	bl	8000d16 <lcd_init>
	lcd_put_cur(0,0);
 800127e:	2100      	movs	r1, #0
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fd29 	bl	8000cd8 <lcd_put_cur>
	lcd_send_string("Starting Up...");
 8001286:	487b      	ldr	r0, [pc, #492]	; (8001474 <main+0x6b4>)
 8001288:	f7ff fd82 	bl	8000d90 <lcd_send_string>
	HAL_Delay(1000);
 800128c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001290:	f002 fb24 	bl	80038dc <HAL_Delay>
	lcd_put_cur(0,0);
 8001294:	2100      	movs	r1, #0
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fd1e 	bl	8000cd8 <lcd_put_cur>
	lcd_send_string("Initializing CAN");
 800129c:	4876      	ldr	r0, [pc, #472]	; (8001478 <main+0x6b8>)
 800129e:	f7ff fd77 	bl	8000d90 <lcd_send_string>
	HAL_Delay(1000);
 80012a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a6:	f002 fb19 	bl	80038dc <HAL_Delay>

	//setup CAN filter
	can_filter.FilterMaskIdHigh = 0x0000;
 80012aa:	4b74      	ldr	r3, [pc, #464]	; (800147c <main+0x6bc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 80012b0:	4b72      	ldr	r3, [pc, #456]	; (800147c <main+0x6bc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80012b6:	4b71      	ldr	r3, [pc, #452]	; (800147c <main+0x6bc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
	can_filter.FilterBank = 0;
 80012bc:	4b6f      	ldr	r3, [pc, #444]	; (800147c <main+0x6bc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80012c2:	4b6e      	ldr	r3, [pc, #440]	; (800147c <main+0x6bc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80012c8:	4b6c      	ldr	r3, [pc, #432]	; (800147c <main+0x6bc>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	61da      	str	r2, [r3, #28]
	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 80012ce:	4b6b      	ldr	r3, [pc, #428]	; (800147c <main+0x6bc>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	621a      	str	r2, [r3, #32]
	//check that CAN Filter was setup correctly
	if (HAL_CAN_ConfigFilter(&hcan, &can_filter) != HAL_OK) {
 80012d4:	4969      	ldr	r1, [pc, #420]	; (800147c <main+0x6bc>)
 80012d6:	486a      	ldr	r0, [pc, #424]	; (8001480 <main+0x6c0>)
 80012d8:	f002 fc1f 	bl	8003b1a <HAL_CAN_ConfigFilter>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <main+0x526>
		Error_Handler();
 80012e2:	f002 f8d1 	bl	8003488 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80012e6:	4866      	ldr	r0, [pc, #408]	; (8001480 <main+0x6c0>)
 80012e8:	f002 fce1 	bl	8003cae <HAL_CAN_Start>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <main+0x536>
		Error_Handler();
 80012f2:	f002 f8c9 	bl	8003488 <Error_Handler>
	}

	//display main menu
	lcd_put_cur(0,0);
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fced 	bl	8000cd8 <lcd_put_cur>
	//the string is copied to temp to remove the null character at the end of the string in the menu
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80012fe:	4b61      	ldr	r3, [pc, #388]	; (8001484 <main+0x6c4>)
 8001300:	f993 3000 	ldrsb.w	r3, [r3]
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	4a50      	ldr	r2, [pc, #320]	; (8001450 <main+0x690>)
 800130e:	4413      	add	r3, r2
 8001310:	2210      	movs	r2, #16
 8001312:	4619      	mov	r1, r3
 8001314:	4842      	ldr	r0, [pc, #264]	; (8001420 <main+0x660>)
 8001316:	f005 fbc4 	bl	8006aa2 <strncpy>
 800131a:	4603      	mov	r3, r0
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fd37 	bl	8000d90 <lcd_send_string>
	lcd_put_cur(1,0);
 8001322:	2100      	movs	r1, #0
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff fcd7 	bl	8000cd8 <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 800132a:	4b56      	ldr	r3, [pc, #344]	; (8001484 <main+0x6c4>)
 800132c:	f993 3000 	ldrsb.w	r3, [r3]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	4613      	mov	r3, r2
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	4413      	add	r3, r2
 8001338:	4a45      	ldr	r2, [pc, #276]	; (8001450 <main+0x690>)
 800133a:	4413      	add	r3, r2
 800133c:	2210      	movs	r2, #16
 800133e:	4619      	mov	r1, r3
 8001340:	4837      	ldr	r0, [pc, #220]	; (8001420 <main+0x660>)
 8001342:	f005 fbae 	bl	8006aa2 <strncpy>
 8001346:	4603      	mov	r3, r0
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fd21 	bl	8000d90 <lcd_send_string>
	lcd_put_cur(0,0);
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fcc1 	bl	8000cd8 <lcd_put_cur>

	int analog_counter = 0;//counter used for sampling the analog signals
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
	int display_counter=0;//counter used in updating the display
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
	int btn_counter=0;//button counter used to reduce double clicks
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
	int16_t timer_compensation=0;//compensation for when the operations within the loop take too long
 8001362:	2300      	movs	r3, #0
 8001364:	81fb      	strh	r3, [r7, #14]

	//calibrate the SDADCs
	calibrateSDADC(&hsdadc1, SDADC_CHANNEL_1);
 8001366:	4948      	ldr	r1, [pc, #288]	; (8001488 <main+0x6c8>)
 8001368:	4848      	ldr	r0, [pc, #288]	; (800148c <main+0x6cc>)
 800136a:	f001 ff81 	bl	8003270 <calibrateSDADC>
	calibrateSDADC(&hsdadc2, SDADC_CHANNEL_0);
 800136e:	2101      	movs	r1, #1
 8001370:	4847      	ldr	r0, [pc, #284]	; (8001490 <main+0x6d0>)
 8001372:	f001 ff7d 	bl	8003270 <calibrateSDADC>
	calibrateSDADC(&hsdadc3, SDADC_CHANNEL_4);
 8001376:	4947      	ldr	r1, [pc, #284]	; (8001494 <main+0x6d4>)
 8001378:	4847      	ldr	r0, [pc, #284]	; (8001498 <main+0x6d8>)
 800137a:	f001 ff79 	bl	8003270 <calibrateSDADC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		__HAL_TIM_SET_COUNTER(&htim2,0); // reset timer
 800137e:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <main+0x6b0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
		//reset display counter (waits 200 delays between updates to the display in the display values menu)
		if(display_counter>200)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2bc8      	cmp	r3, #200	; 0xc8
 800138a:	dd01      	ble.n	8001390 <main+0x5d0>
			display_counter=0;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
		//reset analog counter (waits num_delays delays between samples)
		if(analog_counter>num_delays)
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <main+0x684>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4293      	cmp	r3, r2
 800139a:	dd01      	ble.n	80013a0 <main+0x5e0>
			analog_counter=0;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]

		//get and send analog 1 data
		if(analog_1_enabled && analog_counter==0){
 80013a0:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <main+0x694>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80ac 	beq.w	8001502 <main+0x742>
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 80a8 	bne.w	8001502 <main+0x742>
			//get raw data for analog 1
			HAL_SDADC_Start(&hsdadc1);
 80013b2:	4836      	ldr	r0, [pc, #216]	; (800148c <main+0x6cc>)
 80013b4:	f004 fec1 	bl	800613a <HAL_SDADC_Start>
			HAL_SDADC_PollForConversion(&hsdadc1, HAL_MAX_DELAY);
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295
 80013bc:	4833      	ldr	r0, [pc, #204]	; (800148c <main+0x6cc>)
 80013be:	f004 fed7 	bl	8006170 <HAL_SDADC_PollForConversion>
			raw_1 = (int16_t)HAL_SDADC_GetValue(&hsdadc1);
 80013c2:	4832      	ldr	r0, [pc, #200]	; (800148c <main+0x6cc>)
 80013c4:	f004 ff2e 	bl	8006224 <HAL_SDADC_GetValue>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b33      	ldr	r3, [pc, #204]	; (800149c <main+0x6dc>)
 80013d0:	601a      	str	r2, [r3, #0]
			raw_1+=32768;
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <main+0x6dc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80013da:	4a30      	ldr	r2, [pc, #192]	; (800149c <main+0x6dc>)
 80013dc:	6013      	str	r3, [r2, #0]
			//convert and scale raw data
			a_in_1=(raw_1-analog_1_offset);
 80013de:	4b2f      	ldr	r3, [pc, #188]	; (800149c <main+0x6dc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <main+0x6e0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <main+0x6e4>)
 80013ee:	601a      	str	r2, [r3, #0]
			if(a_in_1<0)
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <main+0x6e4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	da02      	bge.n	80013fe <main+0x63e>
				a_in_1=0;
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <main+0x6e4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
			a_in_1=(uint16_t)(a_in_1*((65535)/(float)(65535-analog_1_offset)));//scale value
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <main+0x6e4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <main+0x6e0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001412:	33ff      	adds	r3, #255	; 0xff
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800141c:	e046      	b.n	80014ac <main+0x6ec>
 800141e:	bf00      	nop
 8001420:	20000284 	.word	0x20000284
 8001424:	08008278 	.word	0x08008278
 8001428:	08008298 	.word	0x08008298
 800142c:	200003d0 	.word	0x200003d0
 8001430:	20000214 	.word	0x20000214
 8001434:	08008288 	.word	0x08008288
 8001438:	20000048 	.word	0x20000048
 800143c:	080082a0 	.word	0x080082a0
 8001440:	2000015c 	.word	0x2000015c
 8001444:	20000207 	.word	0x20000207
 8001448:	080082ac 	.word	0x080082ac
 800144c:	080082b4 	.word	0x080082b4
 8001450:	20000004 	.word	0x20000004
 8001454:	20000001 	.word	0x20000001
 8001458:	200000b0 	.word	0x200000b0
 800145c:	080082b8 	.word	0x080082b8
 8001460:	20000002 	.word	0x20000002
 8001464:	080082cc 	.word	0x080082cc
 8001468:	20000003 	.word	0x20000003
 800146c:	080082e0 	.word	0x080082e0
 8001470:	20000380 	.word	0x20000380
 8001474:	080082f4 	.word	0x080082f4
 8001478:	08008304 	.word	0x08008304
 800147c:	200002a4 	.word	0x200002a4
 8001480:	20000258 	.word	0x20000258
 8001484:	20000204 	.word	0x20000204
 8001488:	00010002 	.word	0x00010002
 800148c:	200002cc 	.word	0x200002cc
 8001490:	20000320 	.word	0x20000320
 8001494:	00040010 	.word	0x00040010
 8001498:	200003e0 	.word	0x200003e0
 800149c:	20000224 	.word	0x20000224
 80014a0:	200001f4 	.word	0x200001f4
 80014a4:	20000318 	.word	0x20000318
 80014a8:	477fff00 	.word	0x477fff00
 80014ac:	ed1f 6a02 	vldr	s12, [pc, #-8]	; 80014a8 <main+0x6e8>
 80014b0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014bc:	ee17 3a90 	vmov	r3, s15
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	4ba2      	ldr	r3, [pc, #648]	; (8001750 <main+0x990>)
 80014c6:	601a      	str	r2, [r3, #0]
			//put raw data into byte arrays
			a_data_1[0]=a_in_1 & 0xff;
 80014c8:	4ba1      	ldr	r3, [pc, #644]	; (8001750 <main+0x990>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	733b      	strb	r3, [r7, #12]
			a_data_1[1]=(a_in_1 >> 8);
 80014d0:	4b9f      	ldr	r3, [pc, #636]	; (8001750 <main+0x990>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	121b      	asrs	r3, r3, #8
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	737b      	strb	r3, [r7, #13]
			//transmit CAN data for analog 1
			HAL_CAN_AddTxMessage(&hcan, &headers_1, a_data_1, *tx_mailbox);
 80014da:	4b9e      	ldr	r3, [pc, #632]	; (8001754 <main+0x994>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f107 020c 	add.w	r2, r7, #12
 80014e4:	499c      	ldr	r1, [pc, #624]	; (8001758 <main+0x998>)
 80014e6:	489d      	ldr	r0, [pc, #628]	; (800175c <main+0x99c>)
 80014e8:	f002 fc6e 	bl	8003dc8 <HAL_CAN_AddTxMessage>
			while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 1
 80014ec:	bf00      	nop
 80014ee:	4b99      	ldr	r3, [pc, #612]	; (8001754 <main+0x994>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4899      	ldr	r0, [pc, #612]	; (800175c <main+0x99c>)
 80014f8:	f002 fd41 	bl	8003f7e <HAL_CAN_IsTxMessagePending>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f5      	bne.n	80014ee <main+0x72e>
		}

		//get and send analog 2 data
		if(analog_2_enabled&& analog_counter==0){
 8001502:	4b97      	ldr	r3, [pc, #604]	; (8001760 <main+0x9a0>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d062      	beq.n	80015d0 <main+0x810>
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d15f      	bne.n	80015d0 <main+0x810>
			//get raw data for analog 2
			HAL_SDADC_Start(&hsdadc2);
 8001510:	4894      	ldr	r0, [pc, #592]	; (8001764 <main+0x9a4>)
 8001512:	f004 fe12 	bl	800613a <HAL_SDADC_Start>
			HAL_SDADC_PollForConversion(&hsdadc2, HAL_MAX_DELAY);
 8001516:	f04f 31ff 	mov.w	r1, #4294967295
 800151a:	4892      	ldr	r0, [pc, #584]	; (8001764 <main+0x9a4>)
 800151c:	f004 fe28 	bl	8006170 <HAL_SDADC_PollForConversion>
			raw_2 = (int16_t)HAL_SDADC_GetValue(&hsdadc2);
 8001520:	4890      	ldr	r0, [pc, #576]	; (8001764 <main+0x9a4>)
 8001522:	f004 fe7f 	bl	8006224 <HAL_SDADC_GetValue>
 8001526:	4603      	mov	r3, r0
 8001528:	b21b      	sxth	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	4b8e      	ldr	r3, [pc, #568]	; (8001768 <main+0x9a8>)
 800152e:	601a      	str	r2, [r3, #0]
			raw_2+=32768;
 8001530:	4b8d      	ldr	r3, [pc, #564]	; (8001768 <main+0x9a8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001538:	4a8b      	ldr	r2, [pc, #556]	; (8001768 <main+0x9a8>)
 800153a:	6013      	str	r3, [r2, #0]
			//convert and scale raw data
			a_in_2=(raw_2-analog_2_offset);
 800153c:	4b8a      	ldr	r3, [pc, #552]	; (8001768 <main+0x9a8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b8a      	ldr	r3, [pc, #552]	; (800176c <main+0x9ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	461a      	mov	r2, r3
 800154a:	4b89      	ldr	r3, [pc, #548]	; (8001770 <main+0x9b0>)
 800154c:	601a      	str	r2, [r3, #0]
			if(a_in_2<0)
 800154e:	4b88      	ldr	r3, [pc, #544]	; (8001770 <main+0x9b0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	da02      	bge.n	800155c <main+0x79c>
				a_in_2=0;
 8001556:	4b86      	ldr	r3, [pc, #536]	; (8001770 <main+0x9b0>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
			a_in_2=(uint16_t)(a_in_2*((65535)/(float)(65535-analog_2_offset)));//scale value
 800155c:	4b84      	ldr	r3, [pc, #528]	; (8001770 <main+0x9b0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001568:	4b80      	ldr	r3, [pc, #512]	; (800176c <main+0x9ac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001570:	33ff      	adds	r3, #255	; 0xff
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800157a:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 8001774 <main+0x9b4>
 800157e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800158a:	ee17 3a90 	vmov	r3, s15
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	4b77      	ldr	r3, [pc, #476]	; (8001770 <main+0x9b0>)
 8001594:	601a      	str	r2, [r3, #0]
			//put raw data into byte arrays
			a_data_2[0]=a_in_2 & 0xff;
 8001596:	4b76      	ldr	r3, [pc, #472]	; (8001770 <main+0x9b0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	723b      	strb	r3, [r7, #8]
			a_data_2[1]=(a_in_2 >> 8);
 800159e:	4b74      	ldr	r3, [pc, #464]	; (8001770 <main+0x9b0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	121b      	asrs	r3, r3, #8
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	727b      	strb	r3, [r7, #9]
			//transmit CAN data for analog 2
			HAL_CAN_AddTxMessage(&hcan, &headers_2, a_data_2, *tx_mailbox);
 80015a8:	4b6a      	ldr	r3, [pc, #424]	; (8001754 <main+0x994>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f107 0208 	add.w	r2, r7, #8
 80015b2:	4971      	ldr	r1, [pc, #452]	; (8001778 <main+0x9b8>)
 80015b4:	4869      	ldr	r0, [pc, #420]	; (800175c <main+0x99c>)
 80015b6:	f002 fc07 	bl	8003dc8 <HAL_CAN_AddTxMessage>
			while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 2
 80015ba:	bf00      	nop
 80015bc:	4b65      	ldr	r3, [pc, #404]	; (8001754 <main+0x994>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4865      	ldr	r0, [pc, #404]	; (800175c <main+0x99c>)
 80015c6:	f002 fcda 	bl	8003f7e <HAL_CAN_IsTxMessagePending>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f5      	bne.n	80015bc <main+0x7fc>
		}

		//get and send analog 3 data
		if(analog_3_enabled&& analog_counter==0){
 80015d0:	4b6a      	ldr	r3, [pc, #424]	; (800177c <main+0x9bc>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d061      	beq.n	800169c <main+0x8dc>
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d15e      	bne.n	800169c <main+0x8dc>
			//get raw data for analog 3
			HAL_SDADC_Start(&hsdadc3);
 80015de:	4868      	ldr	r0, [pc, #416]	; (8001780 <main+0x9c0>)
 80015e0:	f004 fdab 	bl	800613a <HAL_SDADC_Start>
			HAL_SDADC_PollForConversion(&hsdadc3, HAL_MAX_DELAY);
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	4865      	ldr	r0, [pc, #404]	; (8001780 <main+0x9c0>)
 80015ea:	f004 fdc1 	bl	8006170 <HAL_SDADC_PollForConversion>
			raw_3 = (int16_t)HAL_SDADC_GetValue(&hsdadc3);
 80015ee:	4864      	ldr	r0, [pc, #400]	; (8001780 <main+0x9c0>)
 80015f0:	f004 fe18 	bl	8006224 <HAL_SDADC_GetValue>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b62      	ldr	r3, [pc, #392]	; (8001784 <main+0x9c4>)
 80015fc:	601a      	str	r2, [r3, #0]
			raw_3+=32768;
 80015fe:	4b61      	ldr	r3, [pc, #388]	; (8001784 <main+0x9c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001606:	4a5f      	ldr	r2, [pc, #380]	; (8001784 <main+0x9c4>)
 8001608:	6013      	str	r3, [r2, #0]
			//convert and scale raw data
			a_in_3=(raw_3-analog_3_offset);
 800160a:	4b5e      	ldr	r3, [pc, #376]	; (8001784 <main+0x9c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	4b5d      	ldr	r3, [pc, #372]	; (8001788 <main+0x9c8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	461a      	mov	r2, r3
 8001618:	4b5c      	ldr	r3, [pc, #368]	; (800178c <main+0x9cc>)
 800161a:	601a      	str	r2, [r3, #0]
			if(a_in_3<0)
 800161c:	4b5b      	ldr	r3, [pc, #364]	; (800178c <main+0x9cc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	da02      	bge.n	800162a <main+0x86a>
				a_in_3=0;
 8001624:	4b59      	ldr	r3, [pc, #356]	; (800178c <main+0x9cc>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
			a_in_3=(uint16_t)(a_in_3*((65535)/(float)(65535-analog_3_offset)));//scale value
 800162a:	4b58      	ldr	r3, [pc, #352]	; (800178c <main+0x9cc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001636:	4b54      	ldr	r3, [pc, #336]	; (8001788 <main+0x9c8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800163e:	33ff      	adds	r3, #255	; 0xff
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001648:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001774 <main+0x9b4>
 800164c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	b29b      	uxth	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	4b4a      	ldr	r3, [pc, #296]	; (800178c <main+0x9cc>)
 8001662:	601a      	str	r2, [r3, #0]
			//put raw data into byte arrays
			a_data_3[0]=a_in_3 & 0xff;
 8001664:	4b49      	ldr	r3, [pc, #292]	; (800178c <main+0x9cc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	713b      	strb	r3, [r7, #4]
			a_data_3[1]=(a_in_3 >> 8);
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <main+0x9cc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	121b      	asrs	r3, r3, #8
 8001672:	b2db      	uxtb	r3, r3
 8001674:	717b      	strb	r3, [r7, #5]
			//transmit CAN data for analog 3
			HAL_CAN_AddTxMessage(&hcan, &headers_3, a_data_3, *tx_mailbox);
 8001676:	4b37      	ldr	r3, [pc, #220]	; (8001754 <main+0x994>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1d3a      	adds	r2, r7, #4
 800167e:	4944      	ldr	r1, [pc, #272]	; (8001790 <main+0x9d0>)
 8001680:	4836      	ldr	r0, [pc, #216]	; (800175c <main+0x99c>)
 8001682:	f002 fba1 	bl	8003dc8 <HAL_CAN_AddTxMessage>
			while (HAL_CAN_IsTxMessagePending(&hcan, *tx_mailbox));//wait until data is sent for analog 3
 8001686:	bf00      	nop
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <main+0x994>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	4832      	ldr	r0, [pc, #200]	; (800175c <main+0x99c>)
 8001692:	f002 fc74 	bl	8003f7e <HAL_CAN_IsTxMessagePending>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f5      	bne.n	8001688 <main+0x8c8>
		}


		//if the up button is pressed
		if(up_btn_pressed==0 && HAL_GPIO_ReadPin(UP_BTN_GPIO_Port, UP_BTN_Pin)){
 800169c:	7ffb      	ldrb	r3, [r7, #31]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 8164 	bne.w	800196c <main+0xbac>
 80016a4:	2104      	movs	r1, #4
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016aa:	f003 f8c5 	bl	8004838 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 815b 	beq.w	800196c <main+0xbac>
			if(change_value_bool){//if changing a value
 80016b6:	7f3b      	ldrb	r3, [r7, #28]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d03a      	beq.n	8001732 <main+0x972>
				//change the value of the selected item
				//main menu changes
				if(in_main_menu){
 80016bc:	4b35      	ldr	r3, [pc, #212]	; (8001794 <main+0x9d4>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d018      	beq.n	80016f6 <main+0x936>
					if(menu_pos==2)
 80016c4:	4b34      	ldr	r3, [pc, #208]	; (8001798 <main+0x9d8>)
 80016c6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d10b      	bne.n	80016e6 <main+0x926>
						display_scroll=(display_scroll==0)?2:(display_scroll-1);//scroll through devices in display values menu
 80016ce:	4b33      	ldr	r3, [pc, #204]	; (800179c <main+0x9dc>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <main+0x920>
 80016d6:	4b31      	ldr	r3, [pc, #196]	; (800179c <main+0x9dc>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	3b01      	subs	r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	e000      	b.n	80016e2 <main+0x922>
 80016e0:	2302      	movs	r3, #2
 80016e2:	4a2e      	ldr	r2, [pc, #184]	; (800179c <main+0x9dc>)
 80016e4:	7013      	strb	r3, [r2, #0]
					if(menu_pos == 3)
 80016e6:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <main+0x9d8>)
 80016e8:	f993 3000 	ldrsb.w	r3, [r3]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d102      	bne.n	80016f6 <main+0x936>
						changeDelay(1);//increment Delay
 80016f0:	2001      	movs	r0, #1
 80016f2:	f001 f9fb 	bl	8002aec <changeDelay>
				}
				//can menu changes
				if(in_can_menu){
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <main+0x9e0>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8131 	beq.w	8001962 <main+0xba2>
					if(can_pos==1)
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <main+0x9e4>)
 8001702:	f993 3000 	ldrsb.w	r3, [r3]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d103      	bne.n	8001712 <main+0x952>
						changeBaudRate(1);//increment baud rate
 800170a:	2001      	movs	r0, #1
 800170c:	f000 ff8e 	bl	800262c <changeBaudRate>
 8001710:	e127      	b.n	8001962 <main+0xba2>
					else if(can_pos>=2&&can_pos<=4)
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <main+0x9e4>)
 8001714:	f993 3000 	ldrsb.w	r3, [r3]
 8001718:	2b01      	cmp	r3, #1
 800171a:	f340 8122 	ble.w	8001962 <main+0xba2>
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <main+0x9e4>)
 8001720:	f993 3000 	ldrsb.w	r3, [r3]
 8001724:	2b04      	cmp	r3, #4
 8001726:	f300 811c 	bgt.w	8001962 <main+0xba2>
						changeCANID(1);//increment CAN ID
 800172a:	2001      	movs	r0, #1
 800172c:	f001 f826 	bl	800277c <changeCANID>
 8001730:	e117      	b.n	8001962 <main+0xba2>
				}

			} else {
				//scroll menu up
				if(in_main_menu){
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <main+0x9d4>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d076      	beq.n	8001828 <main+0xa68>
					menu_pos=(menu_pos==0)?main_menu_length-1:(menu_pos-1);//decrement menu position
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <main+0x9d8>)
 800173c:	f993 3000 	ldrsb.w	r3, [r3]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d131      	bne.n	80017a8 <main+0x9e8>
 8001744:	2304      	movs	r3, #4
 8001746:	b2db      	uxtb	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	e032      	b.n	80017b6 <main+0x9f6>
 8001750:	20000318 	.word	0x20000318
 8001754:	20000298 	.word	0x20000298
 8001758:	20000240 	.word	0x20000240
 800175c:	20000258 	.word	0x20000258
 8001760:	20000002 	.word	0x20000002
 8001764:	20000320 	.word	0x20000320
 8001768:	20000314 	.word	0x20000314
 800176c:	200001f8 	.word	0x200001f8
 8001770:	20000218 	.word	0x20000218
 8001774:	477fff00 	.word	0x477fff00
 8001778:	20000368 	.word	0x20000368
 800177c:	20000003 	.word	0x20000003
 8001780:	200003e0 	.word	0x200003e0
 8001784:	2000021c 	.word	0x2000021c
 8001788:	200001fc 	.word	0x200001fc
 800178c:	20000280 	.word	0x20000280
 8001790:	20000228 	.word	0x20000228
 8001794:	2000015a 	.word	0x2000015a
 8001798:	20000204 	.word	0x20000204
 800179c:	20000203 	.word	0x20000203
 80017a0:	20000201 	.word	0x20000201
 80017a4:	20000205 	.word	0x20000205
 80017a8:	4bc8      	ldr	r3, [pc, #800]	; (8001acc <main+0xd0c>)
 80017aa:	f993 3000 	ldrsb.w	r3, [r3]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	4ac5      	ldr	r2, [pc, #788]	; (8001acc <main+0xd0c>)
 80017b8:	7013      	strb	r3, [r2, #0]
					lcd_put_cur(0,0);
 80017ba:	2100      	movs	r1, #0
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fa8b 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80017c2:	4bc2      	ldr	r3, [pc, #776]	; (8001acc <main+0xd0c>)
 80017c4:	f993 3000 	ldrsb.w	r3, [r3]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4613      	mov	r3, r2
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	4abf      	ldr	r2, [pc, #764]	; (8001ad0 <main+0xd10>)
 80017d2:	4413      	add	r3, r2
 80017d4:	2210      	movs	r2, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	48be      	ldr	r0, [pc, #760]	; (8001ad4 <main+0xd14>)
 80017da:	f005 f962 	bl	8006aa2 <strncpy>
 80017de:	4603      	mov	r3, r0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fad5 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(1,0);
 80017e6:	2100      	movs	r1, #0
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7ff fa75 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 80017ee:	4bb7      	ldr	r3, [pc, #732]	; (8001acc <main+0xd0c>)
 80017f0:	f993 3000 	ldrsb.w	r3, [r3]
 80017f4:	3301      	adds	r3, #1
 80017f6:	2204      	movs	r2, #4
 80017f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80017fc:	fb02 f201 	mul.w	r2, r2, r1
 8001800:	1a9a      	subs	r2, r3, r2
 8001802:	4613      	mov	r3, r2
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	4413      	add	r3, r2
 8001808:	4ab1      	ldr	r2, [pc, #708]	; (8001ad0 <main+0xd10>)
 800180a:	4413      	add	r3, r2
 800180c:	2210      	movs	r2, #16
 800180e:	4619      	mov	r1, r3
 8001810:	48b0      	ldr	r0, [pc, #704]	; (8001ad4 <main+0xd14>)
 8001812:	f005 f946 	bl	8006aa2 <strncpy>
 8001816:	4603      	mov	r3, r0
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fab9 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(0,0);
 800181e:	2100      	movs	r1, #0
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff fa59 	bl	8000cd8 <lcd_put_cur>
 8001826:	e09c      	b.n	8001962 <main+0xba2>
				} else if(in_can_menu){
 8001828:	4bab      	ldr	r3, [pc, #684]	; (8001ad8 <main+0xd18>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d04a      	beq.n	80018c6 <main+0xb06>
					can_pos=(can_pos==0)?can_menu_length-1:(can_pos-1);//decrement menu position
 8001830:	4baa      	ldr	r3, [pc, #680]	; (8001adc <main+0xd1c>)
 8001832:	f993 3000 	ldrsb.w	r3, [r3]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d105      	bne.n	8001846 <main+0xa86>
 800183a:	2306      	movs	r3, #6
 800183c:	b2db      	uxtb	r3, r3
 800183e:	3b01      	subs	r3, #1
 8001840:	b2db      	uxtb	r3, r3
 8001842:	b25b      	sxtb	r3, r3
 8001844:	e006      	b.n	8001854 <main+0xa94>
 8001846:	4ba5      	ldr	r3, [pc, #660]	; (8001adc <main+0xd1c>)
 8001848:	f993 3000 	ldrsb.w	r3, [r3]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	b25b      	sxtb	r3, r3
 8001854:	4aa1      	ldr	r2, [pc, #644]	; (8001adc <main+0xd1c>)
 8001856:	7013      	strb	r3, [r2, #0]
					lcd_put_cur(0,0);
 8001858:	2100      	movs	r1, #0
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff fa3c 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 8001860:	4b9e      	ldr	r3, [pc, #632]	; (8001adc <main+0xd1c>)
 8001862:	f993 3000 	ldrsb.w	r3, [r3]
 8001866:	461a      	mov	r2, r3
 8001868:	4613      	mov	r3, r2
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	4a9c      	ldr	r2, [pc, #624]	; (8001ae0 <main+0xd20>)
 8001870:	4413      	add	r3, r2
 8001872:	2210      	movs	r2, #16
 8001874:	4619      	mov	r1, r3
 8001876:	4897      	ldr	r0, [pc, #604]	; (8001ad4 <main+0xd14>)
 8001878:	f005 f913 	bl	8006aa2 <strncpy>
 800187c:	4603      	mov	r3, r0
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fa86 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(1,0);
 8001884:	2100      	movs	r1, #0
 8001886:	2001      	movs	r0, #1
 8001888:	f7ff fa26 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 800188c:	4b93      	ldr	r3, [pc, #588]	; (8001adc <main+0xd1c>)
 800188e:	f993 3000 	ldrsb.w	r3, [r3]
 8001892:	3301      	adds	r3, #1
 8001894:	2206      	movs	r2, #6
 8001896:	fb93 f1f2 	sdiv	r1, r3, r2
 800189a:	fb02 f201 	mul.w	r2, r2, r1
 800189e:	1a9a      	subs	r2, r3, r2
 80018a0:	4613      	mov	r3, r2
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	4a8e      	ldr	r2, [pc, #568]	; (8001ae0 <main+0xd20>)
 80018a8:	4413      	add	r3, r2
 80018aa:	2210      	movs	r2, #16
 80018ac:	4619      	mov	r1, r3
 80018ae:	4889      	ldr	r0, [pc, #548]	; (8001ad4 <main+0xd14>)
 80018b0:	f005 f8f7 	bl	8006aa2 <strncpy>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fa6a 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(0,0);
 80018bc:	2100      	movs	r1, #0
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff fa0a 	bl	8000cd8 <lcd_put_cur>
 80018c4:	e04d      	b.n	8001962 <main+0xba2>
				} else if(in_analog_menu){
 80018c6:	4b87      	ldr	r3, [pc, #540]	; (8001ae4 <main+0xd24>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d049      	beq.n	8001962 <main+0xba2>
					analog_pos=(analog_pos==0)?analog_menu_length-1:(analog_pos-1);//decrement menu position
 80018ce:	4b86      	ldr	r3, [pc, #536]	; (8001ae8 <main+0xd28>)
 80018d0:	f993 3000 	ldrsb.w	r3, [r3]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <main+0xb24>
 80018d8:	230a      	movs	r3, #10
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3b01      	subs	r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	e006      	b.n	80018f2 <main+0xb32>
 80018e4:	4b80      	ldr	r3, [pc, #512]	; (8001ae8 <main+0xd28>)
 80018e6:	f993 3000 	ldrsb.w	r3, [r3]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	b25b      	sxtb	r3, r3
 80018f2:	4a7d      	ldr	r2, [pc, #500]	; (8001ae8 <main+0xd28>)
 80018f4:	7013      	strb	r3, [r2, #0]
					lcd_put_cur(0,0);
 80018f6:	2100      	movs	r1, #0
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff f9ed 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 80018fe:	4b7a      	ldr	r3, [pc, #488]	; (8001ae8 <main+0xd28>)
 8001900:	f993 3000 	ldrsb.w	r3, [r3]
 8001904:	461a      	mov	r2, r3
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	4a77      	ldr	r2, [pc, #476]	; (8001aec <main+0xd2c>)
 800190e:	4413      	add	r3, r2
 8001910:	2210      	movs	r2, #16
 8001912:	4619      	mov	r1, r3
 8001914:	486f      	ldr	r0, [pc, #444]	; (8001ad4 <main+0xd14>)
 8001916:	f005 f8c4 	bl	8006aa2 <strncpy>
 800191a:	4603      	mov	r3, r0
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fa37 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(1,0);
 8001922:	2100      	movs	r1, #0
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff f9d7 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 800192a:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <main+0xd28>)
 800192c:	f993 3000 	ldrsb.w	r3, [r3]
 8001930:	3301      	adds	r3, #1
 8001932:	220a      	movs	r2, #10
 8001934:	fb93 f1f2 	sdiv	r1, r3, r2
 8001938:	fb02 f201 	mul.w	r2, r2, r1
 800193c:	1a9a      	subs	r2, r3, r2
 800193e:	4613      	mov	r3, r2
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	4413      	add	r3, r2
 8001944:	4a69      	ldr	r2, [pc, #420]	; (8001aec <main+0xd2c>)
 8001946:	4413      	add	r3, r2
 8001948:	2210      	movs	r2, #16
 800194a:	4619      	mov	r1, r3
 800194c:	4861      	ldr	r0, [pc, #388]	; (8001ad4 <main+0xd14>)
 800194e:	f005 f8a8 	bl	8006aa2 <strncpy>
 8001952:	4603      	mov	r3, r0
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fa1b 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(0,0);
 800195a:	2100      	movs	r1, #0
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff f9bb 	bl	8000cd8 <lcd_put_cur>
				}
			}
			up_btn_pressed = 1; // set button value to pressed
 8001962:	2301      	movs	r3, #1
 8001964:	77fb      	strb	r3, [r7, #31]
			btn_counter=0; // reset button counter
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e018      	b.n	800199e <main+0xbde>
		} else if ((up_btn_pressed==1 &&!HAL_GPIO_ReadPin(UP_BTN_GPIO_Port, UP_BTN_Pin)&&btn_counter>1000)||(up_btn_pressed==1&&btn_counter>7000)){
 800196c:	7ffb      	ldrb	r3, [r7, #31]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d10b      	bne.n	800198a <main+0xbca>
 8001972:	2104      	movs	r1, #4
 8001974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001978:	f002 ff5e 	bl	8004838 <HAL_GPIO_ReadPin>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <main+0xbca>
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001988:	dc07      	bgt.n	800199a <main+0xbda>
 800198a:	7ffb      	ldrb	r3, [r7, #31]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d106      	bne.n	800199e <main+0xbde>
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001996:	4293      	cmp	r3, r2
 8001998:	dd01      	ble.n	800199e <main+0xbde>
			up_btn_pressed = 0; // reset up button value
 800199a:	2300      	movs	r3, #0
 800199c:	77fb      	strb	r3, [r7, #31]
		}

		//if the down button is pressed
		if(down_btn_pressed==0 && HAL_GPIO_ReadPin(DOWN_BTN_GPIO_Port, DOWN_BTN_Pin)){
 800199e:	7fbb      	ldrb	r3, [r7, #30]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 813f 	bne.w	8001c24 <main+0xe64>
 80019a6:	2101      	movs	r1, #1
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ac:	f002 ff44 	bl	8004838 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8136 	beq.w	8001c24 <main+0xe64>
			if(change_value_bool){//if changing a value
 80019b8:	7f3b      	ldrb	r3, [r7, #28]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d03e      	beq.n	8001a3c <main+0xc7c>
				//change the value of the selected item
				//main menu changes
				if(in_main_menu){
 80019be:	4b4c      	ldr	r3, [pc, #304]	; (8001af0 <main+0xd30>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d01c      	beq.n	8001a00 <main+0xc40>
					if(menu_pos==2)
 80019c6:	4b41      	ldr	r3, [pc, #260]	; (8001acc <main+0xd0c>)
 80019c8:	f993 3000 	ldrsb.w	r3, [r3]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d10e      	bne.n	80019ee <main+0xc2e>
						display_scroll=(display_scroll+1)%3;//scroll through devices in display values menu
 80019d0:	4b48      	ldr	r3, [pc, #288]	; (8001af4 <main+0xd34>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <main+0xd38>)
 80019d8:	fb83 3102 	smull	r3, r1, r3, r2
 80019dc:	17d3      	asrs	r3, r2, #31
 80019de:	1ac9      	subs	r1, r1, r3
 80019e0:	460b      	mov	r3, r1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	440b      	add	r3, r1
 80019e6:	1ad1      	subs	r1, r2, r3
 80019e8:	b2ca      	uxtb	r2, r1
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <main+0xd34>)
 80019ec:	701a      	strb	r2, [r3, #0]
					if(menu_pos == 3)
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <main+0xd0c>)
 80019f0:	f993 3000 	ldrsb.w	r3, [r3]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d103      	bne.n	8001a00 <main+0xc40>
						changeDelay(-1);//decrement Delay
 80019f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019fc:	f001 f876 	bl	8002aec <changeDelay>
				}
				//can menu changes
				if(in_can_menu){
 8001a00:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <main+0xd18>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8108 	beq.w	8001c1a <main+0xe5a>
					if(can_pos==1)
 8001a0a:	4b34      	ldr	r3, [pc, #208]	; (8001adc <main+0xd1c>)
 8001a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d103      	bne.n	8001a1c <main+0xc5c>
						changeBaudRate(-1);//decrement baud rate
 8001a14:	20ff      	movs	r0, #255	; 0xff
 8001a16:	f000 fe09 	bl	800262c <changeBaudRate>
 8001a1a:	e0fe      	b.n	8001c1a <main+0xe5a>
					else if(can_pos>=2&&can_pos<=4)
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <main+0xd1c>)
 8001a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	f340 80f9 	ble.w	8001c1a <main+0xe5a>
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <main+0xd1c>)
 8001a2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	f300 80f3 	bgt.w	8001c1a <main+0xe5a>
						changeCANID(-1);//decrement CAN ID
 8001a34:	20ff      	movs	r0, #255	; 0xff
 8001a36:	f000 fea1 	bl	800277c <changeCANID>
 8001a3a:	e0ee      	b.n	8001c1a <main+0xe5a>
				}
			} else {
				//scroll menu down
				if(in_main_menu){
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <main+0xd30>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d05b      	beq.n	8001afc <main+0xd3c>
					menu_pos = (menu_pos+1)%main_menu_length;//increment menu position
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <main+0xd0c>)
 8001a46:	f993 3000 	ldrsb.w	r3, [r3]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a52:	fb02 f201 	mul.w	r2, r2, r1
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	b25a      	sxtb	r2, r3
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <main+0xd0c>)
 8001a5c:	701a      	strb	r2, [r3, #0]
					lcd_put_cur(0,0);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff f939 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <main+0xd0c>)
 8001a68:	f993 3000 	ldrsb.w	r3, [r3]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4613      	mov	r3, r2
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	4413      	add	r3, r2
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <main+0xd10>)
 8001a76:	4413      	add	r3, r2
 8001a78:	2210      	movs	r2, #16
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4815      	ldr	r0, [pc, #84]	; (8001ad4 <main+0xd14>)
 8001a7e:	f005 f810 	bl	8006aa2 <strncpy>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f983 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(1,0);
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f7ff f923 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <main+0xd0c>)
 8001a94:	f993 3000 	ldrsb.w	r3, [r3]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001aa0:	fb02 f201 	mul.w	r2, r2, r1
 8001aa4:	1a9a      	subs	r2, r3, r2
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	4413      	add	r3, r2
 8001aac:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <main+0xd10>)
 8001aae:	4413      	add	r3, r2
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <main+0xd14>)
 8001ab6:	f004 fff4 	bl	8006aa2 <strncpy>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f967 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(0,0);
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff f907 	bl	8000cd8 <lcd_put_cur>
 8001aca:	e0a6      	b.n	8001c1a <main+0xe5a>
 8001acc:	20000204 	.word	0x20000204
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	20000284 	.word	0x20000284
 8001ad8:	20000201 	.word	0x20000201
 8001adc:	20000205 	.word	0x20000205
 8001ae0:	20000048 	.word	0x20000048
 8001ae4:	20000202 	.word	0x20000202
 8001ae8:	20000206 	.word	0x20000206
 8001aec:	200000b0 	.word	0x200000b0
 8001af0:	2000015a 	.word	0x2000015a
 8001af4:	20000203 	.word	0x20000203
 8001af8:	55555556 	.word	0x55555556
				} else if(in_can_menu){
 8001afc:	4bb4      	ldr	r3, [pc, #720]	; (8001dd0 <main+0x1010>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d043      	beq.n	8001b8c <main+0xdcc>
					can_pos=(can_pos+1)%can_menu_length;//increment menu position
 8001b04:	4bb3      	ldr	r3, [pc, #716]	; (8001dd4 <main+0x1014>)
 8001b06:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	2206      	movs	r2, #6
 8001b0e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b12:	fb02 f201 	mul.w	r2, r2, r1
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	b25a      	sxtb	r2, r3
 8001b1a:	4bae      	ldr	r3, [pc, #696]	; (8001dd4 <main+0x1014>)
 8001b1c:	701a      	strb	r2, [r3, #0]
					lcd_put_cur(0,0);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7ff f8d9 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 8001b26:	4bab      	ldr	r3, [pc, #684]	; (8001dd4 <main+0x1014>)
 8001b28:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4613      	mov	r3, r2
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	4aa8      	ldr	r2, [pc, #672]	; (8001dd8 <main+0x1018>)
 8001b36:	4413      	add	r3, r2
 8001b38:	2210      	movs	r2, #16
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	48a7      	ldr	r0, [pc, #668]	; (8001ddc <main+0x101c>)
 8001b3e:	f004 ffb0 	bl	8006aa2 <strncpy>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f923 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(1,0);
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff f8c3 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 8001b52:	4ba0      	ldr	r3, [pc, #640]	; (8001dd4 <main+0x1014>)
 8001b54:	f993 3000 	ldrsb.w	r3, [r3]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	2206      	movs	r2, #6
 8001b5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b60:	fb02 f201 	mul.w	r2, r2, r1
 8001b64:	1a9a      	subs	r2, r3, r2
 8001b66:	4613      	mov	r3, r2
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a9a      	ldr	r2, [pc, #616]	; (8001dd8 <main+0x1018>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	2210      	movs	r2, #16
 8001b72:	4619      	mov	r1, r3
 8001b74:	4899      	ldr	r0, [pc, #612]	; (8001ddc <main+0x101c>)
 8001b76:	f004 ff94 	bl	8006aa2 <strncpy>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f907 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(0,0);
 8001b82:	2100      	movs	r1, #0
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff f8a7 	bl	8000cd8 <lcd_put_cur>
 8001b8a:	e046      	b.n	8001c1a <main+0xe5a>
				} else if(in_analog_menu){
 8001b8c:	4b94      	ldr	r3, [pc, #592]	; (8001de0 <main+0x1020>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d042      	beq.n	8001c1a <main+0xe5a>
					analog_pos=(analog_pos+1)%analog_menu_length;//increment menu position
 8001b94:	4b93      	ldr	r3, [pc, #588]	; (8001de4 <main+0x1024>)
 8001b96:	f993 3000 	ldrsb.w	r3, [r3]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ba2:	fb02 f201 	mul.w	r2, r2, r1
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	4b8e      	ldr	r3, [pc, #568]	; (8001de4 <main+0x1024>)
 8001bac:	701a      	strb	r2, [r3, #0]
					lcd_put_cur(0,0);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff f891 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 8001bb6:	4b8b      	ldr	r3, [pc, #556]	; (8001de4 <main+0x1024>)
 8001bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a88      	ldr	r2, [pc, #544]	; (8001de8 <main+0x1028>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	2210      	movs	r2, #16
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4883      	ldr	r0, [pc, #524]	; (8001ddc <main+0x101c>)
 8001bce:	f004 ff68 	bl	8006aa2 <strncpy>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f8db 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(1,0);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff f87b 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 8001be2:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <main+0x1024>)
 8001be4:	f993 3000 	ldrsb.w	r3, [r3]
 8001be8:	3301      	adds	r3, #1
 8001bea:	220a      	movs	r2, #10
 8001bec:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bf0:	fb02 f201 	mul.w	r2, r2, r1
 8001bf4:	1a9a      	subs	r2, r3, r2
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a7a      	ldr	r2, [pc, #488]	; (8001de8 <main+0x1028>)
 8001bfe:	4413      	add	r3, r2
 8001c00:	2210      	movs	r2, #16
 8001c02:	4619      	mov	r1, r3
 8001c04:	4875      	ldr	r0, [pc, #468]	; (8001ddc <main+0x101c>)
 8001c06:	f004 ff4c 	bl	8006aa2 <strncpy>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff f8bf 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(0,0);
 8001c12:	2100      	movs	r1, #0
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff f85f 	bl	8000cd8 <lcd_put_cur>
				}

			}
			down_btn_pressed = 1; // set button value to pressed
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	77bb      	strb	r3, [r7, #30]
			btn_counter=0;// reset button counter
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e018      	b.n	8001c56 <main+0xe96>
		} else if ((down_btn_pressed==1&& !HAL_GPIO_ReadPin(DOWN_BTN_GPIO_Port, DOWN_BTN_Pin)&&btn_counter>1000)||(down_btn_pressed==1&&btn_counter>7000)){
 8001c24:	7fbb      	ldrb	r3, [r7, #30]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d10b      	bne.n	8001c42 <main+0xe82>
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c30:	f002 fe02 	bl	8004838 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d103      	bne.n	8001c42 <main+0xe82>
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c40:	dc07      	bgt.n	8001c52 <main+0xe92>
 8001c42:	7fbb      	ldrb	r3, [r7, #30]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d106      	bne.n	8001c56 <main+0xe96>
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	dd01      	ble.n	8001c56 <main+0xe96>
			down_btn_pressed = 0; // reset up button value
 8001c52:	2300      	movs	r3, #0
 8001c54:	77bb      	strb	r3, [r7, #30]
		}

		//if the select button is pressed
		if(sel_btn_pressed==0 && HAL_GPIO_ReadPin(SEL_BTN_GPIO_Port, SEL_BTN_Pin)){
 8001c56:	7f7b      	ldrb	r3, [r7, #29]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 8219 	bne.w	8002090 <main+0x12d0>
 8001c5e:	2102      	movs	r1, #2
 8001c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c64:	f002 fde8 	bl	8004838 <HAL_GPIO_ReadPin>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8210 	beq.w	8002090 <main+0x12d0>
			//set changes and reinitialize can bus
			if(!change_value_bool){
 8001c70:	7f3b      	ldrb	r3, [r7, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 818d 	bne.w	8001f92 <main+0x11d2>
				if(in_main_menu){
 8001c78:	4b5c      	ldr	r3, [pc, #368]	; (8001dec <main+0x102c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80bb 	beq.w	8001df8 <main+0x1038>
					if(menu_pos==0){
 8001c82:	4b5b      	ldr	r3, [pc, #364]	; (8001df0 <main+0x1030>)
 8001c84:	f993 3000 	ldrsb.w	r3, [r3]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d143      	bne.n	8001d14 <main+0xf54>
						//display can menu
						lcd_put_cur(0,0);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff f822 	bl	8000cd8 <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 8001c94:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <main+0x1014>)
 8001c96:	f993 3000 	ldrsb.w	r3, [r3]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <main+0x1018>)
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	484c      	ldr	r0, [pc, #304]	; (8001ddc <main+0x101c>)
 8001cac:	f004 fef9 	bl	8006aa2 <strncpy>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f86c 	bl	8000d90 <lcd_send_string>
						lcd_put_cur(1,0);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff f80c 	bl	8000cd8 <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 8001cc0:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <main+0x1014>)
 8001cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	2206      	movs	r2, #6
 8001cca:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cce:	fb02 f201 	mul.w	r2, r2, r1
 8001cd2:	1a9a      	subs	r2, r3, r2
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a3f      	ldr	r2, [pc, #252]	; (8001dd8 <main+0x1018>)
 8001cdc:	4413      	add	r3, r2
 8001cde:	2210      	movs	r2, #16
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	483e      	ldr	r0, [pc, #248]	; (8001ddc <main+0x101c>)
 8001ce4:	f004 fedd 	bl	8006aa2 <strncpy>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f850 	bl	8000d90 <lcd_send_string>
						lcd_put_cur(0,0);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7fe fff0 	bl	8000cd8 <lcd_put_cur>
						//update menu booleans
						in_can_menu=1;
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <main+0x1010>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
						in_main_menu=0;
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <main+0x102c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
						change_value_bool=!change_value_bool;//invert change value bool
 8001d04:	7f3b      	ldrb	r3, [r7, #28]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf0c      	ite	eq
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	2300      	movne	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	773b      	strb	r3, [r7, #28]
 8001d12:	e19e      	b.n	8002052 <main+0x1292>
					} else if(menu_pos==1){
 8001d14:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <main+0x1030>)
 8001d16:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d143      	bne.n	8001da6 <main+0xfe6>
						//display can menu
						lcd_put_cur(0,0);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7fe ffd9 	bl	8000cd8 <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <main+0x1024>)
 8001d28:	f993 3000 	ldrsb.w	r3, [r3]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4613      	mov	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <main+0x1028>)
 8001d36:	4413      	add	r3, r2
 8001d38:	2210      	movs	r2, #16
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4827      	ldr	r0, [pc, #156]	; (8001ddc <main+0x101c>)
 8001d3e:	f004 feb0 	bl	8006aa2 <strncpy>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f823 	bl	8000d90 <lcd_send_string>
						lcd_put_cur(1,0);
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7fe ffc3 	bl	8000cd8 <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <main+0x1024>)
 8001d54:	f993 3000 	ldrsb.w	r3, [r3]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	220a      	movs	r2, #10
 8001d5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d60:	fb02 f201 	mul.w	r2, r2, r1
 8001d64:	1a9a      	subs	r2, r3, r2
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <main+0x1028>)
 8001d6e:	4413      	add	r3, r2
 8001d70:	2210      	movs	r2, #16
 8001d72:	4619      	mov	r1, r3
 8001d74:	4819      	ldr	r0, [pc, #100]	; (8001ddc <main+0x101c>)
 8001d76:	f004 fe94 	bl	8006aa2 <strncpy>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f807 	bl	8000d90 <lcd_send_string>
						lcd_put_cur(0,0);
 8001d82:	2100      	movs	r1, #0
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7fe ffa7 	bl	8000cd8 <lcd_put_cur>
						//update menu booleans
						in_analog_menu=1;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <main+0x1020>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
						in_main_menu=0;
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <main+0x102c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
						change_value_bool=!change_value_bool;//invert change value bool
 8001d96:	7f3b      	ldrb	r3, [r7, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	773b      	strb	r3, [r7, #28]
 8001da4:	e155      	b.n	8002052 <main+0x1292>
					} else if (menu_pos==2){
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <main+0x1030>)
 8001da8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d103      	bne.n	8001db8 <main+0xff8>
						display_scroll=0;// reset display value menu position
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <main+0x1034>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	e14c      	b.n	8002052 <main+0x1292>
					} else if (menu_pos==3){
 8001db8:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <main+0x1030>)
 8001dba:	f993 3000 	ldrsb.w	r3, [r3]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	f040 8147 	bne.w	8002052 <main+0x1292>
						//move cursor for delay change
						lcd_put_cur(0,13);
 8001dc4:	210d      	movs	r1, #13
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7fe ff86 	bl	8000cd8 <lcd_put_cur>
 8001dcc:	e141      	b.n	8002052 <main+0x1292>
 8001dce:	bf00      	nop
 8001dd0:	20000201 	.word	0x20000201
 8001dd4:	20000205 	.word	0x20000205
 8001dd8:	20000048 	.word	0x20000048
 8001ddc:	20000284 	.word	0x20000284
 8001de0:	20000202 	.word	0x20000202
 8001de4:	20000206 	.word	0x20000206
 8001de8:	200000b0 	.word	0x200000b0
 8001dec:	2000015a 	.word	0x2000015a
 8001df0:	20000204 	.word	0x20000204
 8001df4:	20000203 	.word	0x20000203
					}
				} else if((in_can_menu&&can_pos==0)||(in_analog_menu&&analog_pos==0)){// back buttons
 8001df8:	4b9c      	ldr	r3, [pc, #624]	; (800206c <main+0x12ac>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <main+0x104a>
 8001e00:	4b9b      	ldr	r3, [pc, #620]	; (8002070 <main+0x12b0>)
 8001e02:	f993 3000 	ldrsb.w	r3, [r3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <main+0x105c>
 8001e0a:	4b9a      	ldr	r3, [pc, #616]	; (8002074 <main+0x12b4>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d04b      	beq.n	8001eaa <main+0x10ea>
 8001e12:	4b99      	ldr	r3, [pc, #612]	; (8002078 <main+0x12b8>)
 8001e14:	f993 3000 	ldrsb.w	r3, [r3]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d146      	bne.n	8001eaa <main+0x10ea>
					//display main menu
					lcd_put_cur(0,0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7fe ff5a 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8001e24:	4b95      	ldr	r3, [pc, #596]	; (800207c <main+0x12bc>)
 8001e26:	f993 3000 	ldrsb.w	r3, [r3]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	4413      	add	r3, r2
 8001e32:	4a93      	ldr	r2, [pc, #588]	; (8002080 <main+0x12c0>)
 8001e34:	4413      	add	r3, r2
 8001e36:	2210      	movs	r2, #16
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4892      	ldr	r0, [pc, #584]	; (8002084 <main+0x12c4>)
 8001e3c:	f004 fe31 	bl	8006aa2 <strncpy>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe ffa4 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(1,0);
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7fe ff44 	bl	8000cd8 <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8001e50:	4b8a      	ldr	r3, [pc, #552]	; (800207c <main+0x12bc>)
 8001e52:	f993 3000 	ldrsb.w	r3, [r3]
 8001e56:	3301      	adds	r3, #1
 8001e58:	2204      	movs	r2, #4
 8001e5a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e5e:	fb02 f201 	mul.w	r2, r2, r1
 8001e62:	1a9a      	subs	r2, r3, r2
 8001e64:	4613      	mov	r3, r2
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a85      	ldr	r2, [pc, #532]	; (8002080 <main+0x12c0>)
 8001e6c:	4413      	add	r3, r2
 8001e6e:	2210      	movs	r2, #16
 8001e70:	4619      	mov	r1, r3
 8001e72:	4884      	ldr	r0, [pc, #528]	; (8002084 <main+0x12c4>)
 8001e74:	f004 fe15 	bl	8006aa2 <strncpy>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe ff88 	bl	8000d90 <lcd_send_string>
					lcd_put_cur(0,0);
 8001e80:	2100      	movs	r1, #0
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7fe ff28 	bl	8000cd8 <lcd_put_cur>
					//update menu booleans
					in_can_menu=0;
 8001e88:	4b78      	ldr	r3, [pc, #480]	; (800206c <main+0x12ac>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
					in_analog_menu=0;
 8001e8e:	4b79      	ldr	r3, [pc, #484]	; (8002074 <main+0x12b4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	701a      	strb	r2, [r3, #0]
					in_main_menu=1;
 8001e94:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <main+0x12c8>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
					change_value_bool=!change_value_bool;//invert change value bool
 8001e9a:	7f3b      	ldrb	r3, [r7, #28]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	773b      	strb	r3, [r7, #28]
 8001ea8:	e0d3      	b.n	8002052 <main+0x1292>
				} else if (in_analog_menu){
 8001eaa:	4b72      	ldr	r3, [pc, #456]	; (8002074 <main+0x12b4>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d057      	beq.n	8001f62 <main+0x11a2>
					if(analog_pos>=1 && analog_pos<=4){
 8001eb2:	4b71      	ldr	r3, [pc, #452]	; (8002078 <main+0x12b8>)
 8001eb4:	f993 3000 	ldrsb.w	r3, [r3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dd15      	ble.n	8001ee8 <main+0x1128>
 8001ebc:	4b6e      	ldr	r3, [pc, #440]	; (8002078 <main+0x12b8>)
 8001ebe:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	dc10      	bgt.n	8001ee8 <main+0x1128>
						zeroAnalog(analog_pos-1);// set the analog offsets to the current value
 8001ec6:	4b6c      	ldr	r3, [pc, #432]	; (8002078 <main+0x12b8>)
 8001ec8:	f993 3000 	ldrsb.w	r3, [r3]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fe8c 	bl	8002bf0 <zeroAnalog>
						change_value_bool=!change_value_bool;//invert change value bool
 8001ed8:	7f3b      	ldrb	r3, [r7, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf0c      	ite	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	2300      	movne	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	773b      	strb	r3, [r7, #28]
 8001ee6:	e0b4      	b.n	8002052 <main+0x1292>
					}else if(analog_pos>=5 && analog_pos<=7){
 8001ee8:	4b63      	ldr	r3, [pc, #396]	; (8002078 <main+0x12b8>)
 8001eea:	f993 3000 	ldrsb.w	r3, [r3]
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	dd15      	ble.n	8001f1e <main+0x115e>
 8001ef2:	4b61      	ldr	r3, [pc, #388]	; (8002078 <main+0x12b8>)
 8001ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef8:	2b07      	cmp	r3, #7
 8001efa:	dc10      	bgt.n	8001f1e <main+0x115e>
						toggleAnalog(analog_pos-4);
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <main+0x12b8>)
 8001efe:	f993 3000 	ldrsb.w	r3, [r3]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3b04      	subs	r3, #4
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fecf 	bl	8002cac <toggleAnalog>
						change_value_bool=!change_value_bool;//invert change value bool
 8001f0e:	7f3b      	ldrb	r3, [r7, #28]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	773b      	strb	r3, [r7, #28]
 8001f1c:	e099      	b.n	8002052 <main+0x1292>
					}else if(analog_pos==8){
 8001f1e:	4b56      	ldr	r3, [pc, #344]	; (8002078 <main+0x12b8>)
 8001f20:	f993 3000 	ldrsb.w	r3, [r3]
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d109      	bne.n	8001f3c <main+0x117c>
						resetOffsets();// reset the analog offsets
 8001f28:	f000 fea6 	bl	8002c78 <resetOffsets>
						change_value_bool =!change_value_bool;//invert change value bool
 8001f2c:	7f3b      	ldrb	r3, [r7, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	773b      	strb	r3, [r7, #28]
 8001f3a:	e08a      	b.n	8002052 <main+0x1292>
					}else if(analog_pos==9){
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <main+0x12b8>)
 8001f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001f42:	2b09      	cmp	r3, #9
 8001f44:	f040 8085 	bne.w	8002052 <main+0x1292>
						store_offsets=1;
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <main+0x12cc>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
						storeInFlash();// store the analog offsets
 8001f4e:	f001 f9f9 	bl	8003344 <storeInFlash>
						change_value_bool=!change_value_bool;//invert change value bool
 8001f52:	7f3b      	ldrb	r3, [r7, #28]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	773b      	strb	r3, [r7, #28]
 8001f60:	e077      	b.n	8002052 <main+0x1292>
					}

				} else if (in_can_menu){
 8001f62:	4b42      	ldr	r3, [pc, #264]	; (800206c <main+0x12ac>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00e      	beq.n	8001f88 <main+0x11c8>
					if(can_pos==5){
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <main+0x12b0>)
 8001f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d16e      	bne.n	8002052 <main+0x1292>
						resetCAN();// reset the CAN options to default
 8001f74:	f000 fd9e 	bl	8002ab4 <resetCAN>
						change_value_bool=!change_value_bool;//invert change value bool
 8001f78:	7f3b      	ldrb	r3, [r7, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	773b      	strb	r3, [r7, #28]
 8001f86:	e064      	b.n	8002052 <main+0x1292>
					}
				} else{
					//move cursor to end
					lcd_put_cur(0,15);
 8001f88:	210f      	movs	r1, #15
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7fe fea4 	bl	8000cd8 <lcd_put_cur>
 8001f90:	e05f      	b.n	8002052 <main+0x1292>
				}

			}else{
				if(in_main_menu){
 8001f92:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <main+0x12c8>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d043      	beq.n	8002022 <main+0x1262>
					if(menu_pos==2){ //display menu
 8001f9a:	4b38      	ldr	r3, [pc, #224]	; (800207c <main+0x12bc>)
 8001f9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d136      	bne.n	8002012 <main+0x1252>
						lcd_put_cur(0,0);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7fe fe96 	bl	8000cd8 <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <main+0x12bc>)
 8001fae:	f993 3000 	ldrsb.w	r3, [r3]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a31      	ldr	r2, [pc, #196]	; (8002080 <main+0x12c0>)
 8001fbc:	4413      	add	r3, r2
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4830      	ldr	r0, [pc, #192]	; (8002084 <main+0x12c4>)
 8001fc4:	f004 fd6d 	bl	8006aa2 <strncpy>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fee0 	bl	8000d90 <lcd_send_string>
						lcd_put_cur(1,0);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7fe fe80 	bl	8000cd8 <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8001fd8:	4b28      	ldr	r3, [pc, #160]	; (800207c <main+0x12bc>)
 8001fda:	f993 3000 	ldrsb.w	r3, [r3]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fe6:	fb02 f201 	mul.w	r2, r2, r1
 8001fea:	1a9a      	subs	r2, r3, r2
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a23      	ldr	r2, [pc, #140]	; (8002080 <main+0x12c0>)
 8001ff4:	4413      	add	r3, r2
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4822      	ldr	r0, [pc, #136]	; (8002084 <main+0x12c4>)
 8001ffc:	f004 fd51 	bl	8006aa2 <strncpy>
 8002000:	4603      	mov	r3, r0
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fec4 	bl	8000d90 <lcd_send_string>
						lcd_put_cur(0,0);
 8002008:	2100      	movs	r1, #0
 800200a:	2000      	movs	r0, #0
 800200c:	f7fe fe64 	bl	8000cd8 <lcd_put_cur>
 8002010:	e01f      	b.n	8002052 <main+0x1292>
					}
					else if(menu_pos==3)
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <main+0x12bc>)
 8002014:	f993 3000 	ldrsb.w	r3, [r3]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d11a      	bne.n	8002052 <main+0x1292>
						setDelay();//set Delay
 800201c:	f000 fd9a 	bl	8002b54 <setDelay>
 8002020:	e017      	b.n	8002052 <main+0x1292>
				}
				else if(in_can_menu){
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <main+0x12ac>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d013      	beq.n	8002052 <main+0x1292>
					if(can_pos==1)
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <main+0x12b0>)
 800202c:	f993 3000 	ldrsb.w	r3, [r3]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d102      	bne.n	800203a <main+0x127a>
						setBaudRate(); // set and store the selected baud rate
 8002034:	f000 fb38 	bl	80026a8 <setBaudRate>
 8002038:	e00b      	b.n	8002052 <main+0x1292>
					else if(can_pos>=2 && can_pos<=4)
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <main+0x12b0>)
 800203c:	f993 3000 	ldrsb.w	r3, [r3]
 8002040:	2b01      	cmp	r3, #1
 8002042:	dd06      	ble.n	8002052 <main+0x1292>
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <main+0x12b0>)
 8002046:	f993 3000 	ldrsb.w	r3, [r3]
 800204a:	2b04      	cmp	r3, #4
 800204c:	dc01      	bgt.n	8002052 <main+0x1292>
						setCANID(); // set and store the selected can id
 800204e:	f000 fc49 	bl	80028e4 <setCANID>
				}

			}
			change_value_bool=!change_value_bool;//invert change value bool
 8002052:	7f3b      	ldrb	r3, [r7, #28]
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	773b      	strb	r3, [r7, #28]
			sel_btn_pressed=1;//set select button to pressed
 8002060:	2301      	movs	r3, #1
 8002062:	777b      	strb	r3, [r7, #29]
			btn_counter=0;// reset button counter
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e023      	b.n	80020b2 <main+0x12f2>
 800206a:	bf00      	nop
 800206c:	20000201 	.word	0x20000201
 8002070:	20000205 	.word	0x20000205
 8002074:	20000202 	.word	0x20000202
 8002078:	20000206 	.word	0x20000206
 800207c:	20000204 	.word	0x20000204
 8002080:	20000004 	.word	0x20000004
 8002084:	20000284 	.word	0x20000284
 8002088:	2000015a 	.word	0x2000015a
 800208c:	20000200 	.word	0x20000200
		} else if (sel_btn_pressed==1 && !HAL_GPIO_ReadPin(SEL_BTN_GPIO_Port, SEL_BTN_Pin) && btn_counter>1000){
 8002090:	7f7b      	ldrb	r3, [r7, #29]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d10d      	bne.n	80020b2 <main+0x12f2>
 8002096:	2102      	movs	r1, #2
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209c:	f002 fbcc 	bl	8004838 <HAL_GPIO_ReadPin>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <main+0x12f2>
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ac:	dd01      	ble.n	80020b2 <main+0x12f2>
			sel_btn_pressed = 0; // reset select button value
 80020ae:	2300      	movs	r3, #0
 80020b0:	777b      	strb	r3, [r7, #29]
		}

		//Display analog values on display
		if(in_main_menu && menu_pos==2 && change_value_bool && display_counter==0)
 80020b2:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <main+0x13a4>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00c      	beq.n	80020d4 <main+0x1314>
 80020ba:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <main+0x13a8>)
 80020bc:	f993 3000 	ldrsb.w	r3, [r3]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d107      	bne.n	80020d4 <main+0x1314>
 80020c4:	7f3b      	ldrb	r3, [r7, #28]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <main+0x1314>
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <main+0x1314>
			displayValues();
 80020d0:	f000 ff0a 	bl	8002ee8 <displayValues>


		//increment counters
		analog_counter++;
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	3301      	adds	r3, #1
 80020d8:	61bb      	str	r3, [r7, #24]
		display_counter++;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
		btn_counter++;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3301      	adds	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]


		//Delay between samples
		while ((int16_t)__HAL_TIM_GET_COUNTER(&htim2) < us-timer_compensation-7);
 80020e6:	bf00      	nop
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <main+0x13ac>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b1f      	ldr	r3, [pc, #124]	; (8002170 <main+0x13b0>)
 80020f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020fe:	1acb      	subs	r3, r1, r3
 8002100:	3b07      	subs	r3, #7
 8002102:	429a      	cmp	r2, r3
 8002104:	dbf0      	blt.n	80020e8 <main+0x1328>
		//compensation for when operations take longer than the specified delay
		if((int16_t)__HAL_TIM_GET_COUNTER(&htim2)>us)
 8002106:	4b19      	ldr	r3, [pc, #100]	; (800216c <main+0x13ac>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	b21a      	sxth	r2, r3
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <main+0x13b0>)
 8002110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002114:	429a      	cmp	r2, r3
 8002116:	dd0c      	ble.n	8002132 <main+0x1372>
			timer_compensation=((int16_t)__HAL_TIM_GET_COUNTER(&htim2)-us);
 8002118:	4b14      	ldr	r3, [pc, #80]	; (800216c <main+0x13ac>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	b29a      	uxth	r2, r3
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <main+0x13b0>)
 8002122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002126:	b29b      	uxth	r3, r3
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	b29b      	uxth	r3, r3
 800212c:	81fb      	strh	r3, [r7, #14]
 800212e:	f7ff b926 	b.w	800137e <main+0x5be>
		else if(us-timer_compensation<0) // if the issue wasn't resolved in this loop
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <main+0x13b0>)
 8002134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002138:	461a      	mov	r2, r3
 800213a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	da0a      	bge.n	800215a <main+0x139a>
			timer_compensation-=(int16_t)__HAL_TIM_GET_COUNTER(&htim2);
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <main+0x13ac>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	b21b      	sxth	r3, r3
 800214c:	89fa      	ldrh	r2, [r7, #14]
 800214e:	b29b      	uxth	r3, r3
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	b29b      	uxth	r3, r3
 8002154:	81fb      	strh	r3, [r7, #14]
 8002156:	f7ff b912 	b.w	800137e <main+0x5be>
		else
			timer_compensation=0;//reset compensation
 800215a:	2300      	movs	r3, #0
 800215c:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(&htim2,0); // reset timer
 800215e:	f7ff b90e 	b.w	800137e <main+0x5be>
 8002162:	bf00      	nop
 8002164:	2000015a 	.word	0x2000015a
 8002168:	20000204 	.word	0x20000204
 800216c:	20000380 	.word	0x20000380
 8002170:	2000015c 	.word	0x2000015c

08002174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b09a      	sub	sp, #104	; 0x68
 8002178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800217e:	2228      	movs	r2, #40	; 0x28
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f004 fc1e 	bl	80069c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002188:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002198:	463b      	mov	r3, r7
 800219a:	222c      	movs	r2, #44	; 0x2c
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 fc10 	bl	80069c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021a4:	2302      	movs	r3, #2
 80021a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021a8:	2301      	movs	r3, #1
 80021aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ac:	2310      	movs	r3, #16
 80021ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 fb8d 	bl	80048d8 <HAL_RCC_OscConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80021c4:	f001 f960 	bl	8003488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c8:	230f      	movs	r3, #15
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80021cc:	2300      	movs	r3, #0
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021d4:	2300      	movs	r3, #0
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d8:	2300      	movs	r3, #0
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 fa80 	bl	80056e8 <HAL_RCC_ClockConfig>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80021ee:	f001 f94b 	bl	8003488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDADC;
 80021f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021f6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV4;
 80021f8:	f04f 4308 	mov.w	r3, #2281701376	; 0x88000000
 80021fc:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021fe:	463b      	mov	r3, r7
 8002200:	4618      	mov	r0, r3
 8002202:	f003 fc59 	bl	8005ab8 <HAL_RCCEx_PeriphCLKConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800220c:	f001 f93c 	bl	8003488 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8002210:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002214:	f002 fb40 	bl	8004898 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG2);
 8002218:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800221c:	f002 fb3c 	bl	8004898 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 8002220:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002224:	f002 fb38 	bl	8004898 <HAL_PWREx_EnableSDADC>
}
 8002228:	bf00      	nop
 800222a:	3768      	adds	r7, #104	; 0x68
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <MX_CAN_Init+0x7c>)
 8002236:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <MX_CAN_Init+0x80>)
 8002238:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <MX_CAN_Init+0x7c>)
 800223c:	2202      	movs	r2, #2
 800223e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_CAN_Init+0x7c>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <MX_CAN_Init+0x7c>)
 8002248:	2200      	movs	r2, #0
 800224a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800224c:	4b17      	ldr	r3, [pc, #92]	; (80022ac <MX_CAN_Init+0x7c>)
 800224e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002252:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <MX_CAN_Init+0x7c>)
 8002256:	2200      	movs	r2, #0
 8002258:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <MX_CAN_Init+0x7c>)
 800225c:	2200      	movs	r2, #0
 800225e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <MX_CAN_Init+0x7c>)
 8002262:	2200      	movs	r2, #0
 8002264:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <MX_CAN_Init+0x7c>)
 8002268:	2200      	movs	r2, #0
 800226a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <MX_CAN_Init+0x7c>)
 800226e:	2200      	movs	r2, #0
 8002270:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_CAN_Init+0x7c>)
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_CAN_Init+0x7c>)
 800227a:	2200      	movs	r2, #0
 800227c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800227e:	480b      	ldr	r0, [pc, #44]	; (80022ac <MX_CAN_Init+0x7c>)
 8002280:	f001 fb50 	bl	8003924 <HAL_CAN_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800228a:	f001 f8fd 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	//set the prescaler to the right value for the stored baud rate
	hcan.Init.Prescaler = PSC;
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_CAN_Init+0x84>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <MX_CAN_Init+0x7c>)
 8002296:	605a      	str	r2, [r3, #4]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002298:	4804      	ldr	r0, [pc, #16]	; (80022ac <MX_CAN_Init+0x7c>)
 800229a:	f001 fb43 	bl	8003924 <HAL_CAN_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_CAN_Init+0x78>
	{
		Error_Handler();
 80022a4:	f001 f8f0 	bl	8003488 <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000258 	.word	0x20000258
 80022b0:	40006400 	.word	0x40006400
 80022b4:	20000000 	.word	0x20000000

080022b8 <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 80022be:	463b      	mov	r3, r7
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC1_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <MX_SDADC1_Init+0x70>)
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <MX_SDADC1_Init+0x74>)
 80022ce:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <MX_SDADC1_Init+0x70>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <MX_SDADC1_Init+0x70>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <MX_SDADC1_Init+0x70>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <MX_SDADC1_Init+0x70>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 80022e8:	480f      	ldr	r0, [pc, #60]	; (8002328 <MX_SDADC1_Init+0x70>)
 80022ea:	f003 fd59 	bl	8005da0 <HAL_SDADC_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_SDADC1_Init+0x40>
  {
    Error_Handler();
 80022f4:	f001 f8c8 	bl	8003488 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 80022f8:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80022fc:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 800230a:	463b      	mov	r3, r7
 800230c:	461a      	mov	r2, r3
 800230e:	2100      	movs	r1, #0
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <MX_SDADC1_Init+0x70>)
 8002312:	f003 fdc9 	bl	8005ea8 <HAL_SDADC_PrepareChannelConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_SDADC1_Init+0x68>
  {
    Error_Handler();
 800231c:	f001 f8b4 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200002cc 	.word	0x200002cc
 800232c:	40016000 	.word	0x40016000

08002330 <MX_SDADC2_Init>:
  * @brief SDADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC2_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC2_Init 0 */

  /* USER CODE END SDADC2_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8002336:	463b      	mov	r3, r7
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC2_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc2.Instance = SDADC2;
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <MX_SDADC2_Init+0x74>)
 8002344:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <MX_SDADC2_Init+0x78>)
 8002346:	601a      	str	r2, [r3, #0]
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <MX_SDADC2_Init+0x74>)
 800234a:	2200      	movs	r2, #0
 800234c:	605a      	str	r2, [r3, #4]
  hsdadc2.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <MX_SDADC2_Init+0x74>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  hsdadc2.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <MX_SDADC2_Init+0x74>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  hsdadc2.Init.ReferenceVoltage = SDADC_VREF_EXT;
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <MX_SDADC2_Init+0x74>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 8002360:	4810      	ldr	r0, [pc, #64]	; (80023a4 <MX_SDADC2_Init+0x74>)
 8002362:	f003 fd1d 	bl	8005da0 <HAL_SDADC_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_SDADC2_Init+0x40>
  {
    Error_Handler();
 800236c:	f001 f88c 	bl	8003488 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8002370:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8002374:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VDDA;
 800237a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800237e:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8002384:	463b      	mov	r3, r7
 8002386:	461a      	mov	r2, r3
 8002388:	2100      	movs	r1, #0
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <MX_SDADC2_Init+0x74>)
 800238c:	f003 fd8c 	bl	8005ea8 <HAL_SDADC_PrepareChannelConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_SDADC2_Init+0x6a>
  {
    Error_Handler();
 8002396:	f001 f877 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC2_Init 2 */

  /* USER CODE END SDADC2_Init 2 */

}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000320 	.word	0x20000320
 80023a8:	40016400 	.word	0x40016400

080023ac <MX_SDADC3_Init>:
  * @brief SDADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC3_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC3_Init 0 */

  /* USER CODE END SDADC3_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 80023b2:	463b      	mov	r3, r7
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC3_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc3.Instance = SDADC3;
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <MX_SDADC3_Init+0x70>)
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <MX_SDADC3_Init+0x74>)
 80023c2:	601a      	str	r2, [r3, #0]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_SDADC3_Init+0x70>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	605a      	str	r2, [r3, #4]
  hsdadc3.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <MX_SDADC3_Init+0x70>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <MX_SDADC3_Init+0x70>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_SDADC3_Init+0x70>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 80023dc:	480f      	ldr	r0, [pc, #60]	; (800241c <MX_SDADC3_Init+0x70>)
 80023de:	f003 fcdf 	bl	8005da0 <HAL_SDADC_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_SDADC3_Init+0x40>
  {
    Error_Handler();
 80023e8:	f001 f84e 	bl	8003488 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 80023ec:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80023f0:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 80023fe:	463b      	mov	r3, r7
 8002400:	461a      	mov	r2, r3
 8002402:	2100      	movs	r1, #0
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_SDADC3_Init+0x70>)
 8002406:	f003 fd4f 	bl	8005ea8 <HAL_SDADC_PrepareChannelConfig>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_SDADC3_Init+0x68>
  {
    Error_Handler();
 8002410:	f001 f83a 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC3_Init 2 */

  /* USER CODE END SDADC3_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200003e0 	.word	0x200003e0
 8002420:	40016800 	.word	0x40016800

08002424 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	463b      	mov	r3, r7
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <MX_TIM2_Init+0x94>)
 8002442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <MX_TIM2_Init+0x94>)
 800244a:	2207      	movs	r2, #7
 800244c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <MX_TIM2_Init+0x94>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <MX_TIM2_Init+0x94>)
 8002456:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800245a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <MX_TIM2_Init+0x94>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <MX_TIM2_Init+0x94>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002468:	4813      	ldr	r0, [pc, #76]	; (80024b8 <MX_TIM2_Init+0x94>)
 800246a:	f003 ff65 	bl	8006338 <HAL_TIM_Base_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002474:	f001 f808 	bl	8003488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	4619      	mov	r1, r3
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <MX_TIM2_Init+0x94>)
 8002486:	f004 f807 	bl	8006498 <HAL_TIM_ConfigClockSource>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002490:	f000 fffa 	bl	8003488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800249c:	463b      	mov	r3, r7
 800249e:	4619      	mov	r1, r3
 80024a0:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_TIM2_Init+0x94>)
 80024a2:	f004 f9f1 	bl	8006888 <HAL_TIMEx_MasterConfigSynchronization>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80024ac:	f000 ffec 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000380 	.word	0x20000380

080024bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	; 0x30
 80024c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	4b52      	ldr	r3, [pc, #328]	; (800261c <MX_GPIO_Init+0x160>)
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	4a51      	ldr	r2, [pc, #324]	; (800261c <MX_GPIO_Init+0x160>)
 80024d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024dc:	6153      	str	r3, [r2, #20]
 80024de:	4b4f      	ldr	r3, [pc, #316]	; (800261c <MX_GPIO_Init+0x160>)
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b4c      	ldr	r3, [pc, #304]	; (800261c <MX_GPIO_Init+0x160>)
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	4a4b      	ldr	r2, [pc, #300]	; (800261c <MX_GPIO_Init+0x160>)
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f4:	6153      	str	r3, [r2, #20]
 80024f6:	4b49      	ldr	r3, [pc, #292]	; (800261c <MX_GPIO_Init+0x160>)
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002502:	4b46      	ldr	r3, [pc, #280]	; (800261c <MX_GPIO_Init+0x160>)
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	4a45      	ldr	r2, [pc, #276]	; (800261c <MX_GPIO_Init+0x160>)
 8002508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800250c:	6153      	str	r3, [r2, #20]
 800250e:	4b43      	ldr	r3, [pc, #268]	; (800261c <MX_GPIO_Init+0x160>)
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <MX_GPIO_Init+0x160>)
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	4a3f      	ldr	r2, [pc, #252]	; (800261c <MX_GPIO_Init+0x160>)
 8002520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002524:	6153      	str	r3, [r2, #20]
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <MX_GPIO_Init+0x160>)
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002532:	4b3a      	ldr	r3, [pc, #232]	; (800261c <MX_GPIO_Init+0x160>)
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	4a39      	ldr	r2, [pc, #228]	; (800261c <MX_GPIO_Init+0x160>)
 8002538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800253c:	6153      	str	r3, [r2, #20]
 800253e:	4b37      	ldr	r3, [pc, #220]	; (800261c <MX_GPIO_Init+0x160>)
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800254a:	4b34      	ldr	r3, [pc, #208]	; (800261c <MX_GPIO_Init+0x160>)
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	4a33      	ldr	r2, [pc, #204]	; (800261c <MX_GPIO_Init+0x160>)
 8002550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002554:	6153      	str	r3, [r2, #20]
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <MX_GPIO_Init+0x160>)
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	2192      	movs	r1, #146	; 0x92
 8002566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256a:	f002 f97d 	bl	8004868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800256e:	2200      	movs	r2, #0
 8002570:	2103      	movs	r1, #3
 8002572:	482b      	ldr	r0, [pc, #172]	; (8002620 <MX_GPIO_Init+0x164>)
 8002574:	f002 f978 	bl	8004868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8002578:	2200      	movs	r2, #0
 800257a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800257e:	4829      	ldr	r0, [pc, #164]	; (8002624 <MX_GPIO_Init+0x168>)
 8002580:	f002 f972 	bl	8004868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800259c:	f001 ffd2 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 80025a0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	481c      	ldr	r0, [pc, #112]	; (8002628 <MX_GPIO_Init+0x16c>)
 80025b6:	f001 ffc5 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7;
 80025ba:	2392      	movs	r3, #146	; 0x92
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025be:	2301      	movs	r3, #1
 80025c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f107 031c 	add.w	r3, r7, #28
 80025ce:	4619      	mov	r1, r3
 80025d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d4:	f001 ffb6 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025d8:	2303      	movs	r3, #3
 80025da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025dc:	2301      	movs	r3, #1
 80025de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4619      	mov	r1, r3
 80025ee:	480c      	ldr	r0, [pc, #48]	; (8002620 <MX_GPIO_Init+0x164>)
 80025f0:	f001 ffa8 	bl	8004544 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80025f4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80025f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fa:	2301      	movs	r3, #1
 80025fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_GPIO_Init+0x168>)
 800260e:	f001 ff99 	bl	8004544 <HAL_GPIO_Init>

}
 8002612:	bf00      	nop
 8002614:	3730      	adds	r7, #48	; 0x30
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	48000400 	.word	0x48000400
 8002624:	48001000 	.word	0x48001000
 8002628:	48000800 	.word	0x48000800

0800262c <changeBaudRate>:

/* USER CODE BEGIN 4 */
//changes the baud rate of the CAN connection
void changeBaudRate(uint8_t direction){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
	baud_pos = ((baud_pos+direction)<0)?baud_rates_length-1:(baud_pos+direction)%baud_rates_length;//move baud rate position in given direction
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <changeBaudRate+0x70>)
 8002638:	f993 3000 	ldrsb.w	r3, [r3]
 800263c:	461a      	mov	r2, r3
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	4413      	add	r3, r2
 8002642:	2b00      	cmp	r3, #0
 8002644:	da05      	bge.n	8002652 <changeBaudRate+0x26>
 8002646:	2304      	movs	r3, #4
 8002648:	b2db      	uxtb	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	b25b      	sxtb	r3, r3
 8002650:	e00c      	b.n	800266c <changeBaudRate+0x40>
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <changeBaudRate+0x70>)
 8002654:	f993 3000 	ldrsb.w	r3, [r3]
 8002658:	461a      	mov	r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	4413      	add	r3, r2
 800265e:	2204      	movs	r2, #4
 8002660:	fb93 f1f2 	sdiv	r1, r3, r2
 8002664:	fb02 f201 	mul.w	r2, r2, r1
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	b25b      	sxtb	r3, r3
 800266c:	4a0b      	ldr	r2, [pc, #44]	; (800269c <changeBaudRate+0x70>)
 800266e:	7013      	strb	r3, [r2, #0]

	//display the selected baud rate
	lcd_put_cur(0,12);
 8002670:	210c      	movs	r1, #12
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe fb30 	bl	8000cd8 <lcd_put_cur>
	lcd_send_string(baud_rates[baud_pos]);
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <changeBaudRate+0x70>)
 800267a:	f993 3000 	ldrsb.w	r3, [r3]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <changeBaudRate+0x74>)
 8002682:	4413      	add	r3, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fb83 	bl	8000d90 <lcd_send_string>
	lcd_put_cur(0,15);
 800268a:	210f      	movs	r1, #15
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe fb23 	bl	8000cd8 <lcd_put_cur>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000015b 	.word	0x2000015b
 80026a0:	080083d8 	.word	0x080083d8
 80026a4:	00000000 	.word	0x00000000

080026a8 <setBaudRate>:

//set the baud rate and store it
void setBaudRate(void){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	//stop can bus
	HAL_CAN_Stop(&hcan);
 80026ac:	482c      	ldr	r0, [pc, #176]	; (8002760 <setBaudRate+0xb8>)
 80026ae:	f001 fb42 	bl	8003d36 <HAL_CAN_Stop>

	//set prescaler
	PSC=pow(2,4-baud_pos);
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <setBaudRate+0xbc>)
 80026b4:	f993 3000 	ldrsb.w	r3, [r3]
 80026b8:	f1c3 0304 	rsb	r3, r3, #4
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff31 	bl	8000524 <__aeabi_i2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	ec43 2b11 	vmov	d1, r2, r3
 80026ca:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002758 <setBaudRate+0xb0>
 80026ce:	f004 fe09 	bl	80072e4 <pow>
 80026d2:	ec53 2b10 	vmov	r2, r3, d0
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f7fe fa3d 	bl	8000b58 <__aeabi_d2uiz>
 80026de:	4603      	mov	r3, r0
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b21      	ldr	r3, [pc, #132]	; (8002768 <setBaudRate+0xc0>)
 80026e4:	701a      	strb	r2, [r3, #0]
	hcan.Init.Prescaler = PSC;
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <setBaudRate+0xc0>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <setBaudRate+0xb8>)
 80026ee:	605a      	str	r2, [r3, #4]

	//reinitialize can
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80026f0:	481b      	ldr	r0, [pc, #108]	; (8002760 <setBaudRate+0xb8>)
 80026f2:	f001 f917 	bl	8003924 <HAL_CAN_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <setBaudRate+0x58>
	{
		Error_Handler();
 80026fc:	f000 fec4 	bl	8003488 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002700:	4817      	ldr	r0, [pc, #92]	; (8002760 <setBaudRate+0xb8>)
 8002702:	f001 fad4 	bl	8003cae <HAL_CAN_Start>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <setBaudRate+0x68>
		Error_Handler();
 800270c:	f000 febc 	bl	8003488 <Error_Handler>
	}

	//store new baud in flash
	storeInFlash();
 8002710:	f000 fe18 	bl	8003344 <storeInFlash>

	//save the baud rate in menu
	memset(temp,0,17); // erase the temp array
 8002714:	2211      	movs	r2, #17
 8002716:	2100      	movs	r1, #0
 8002718:	4814      	ldr	r0, [pc, #80]	; (800276c <setBaudRate+0xc4>)
 800271a:	f004 f953 	bl	80069c4 <memset>
	strncpy(temp, "Baud rate:  ",16);
 800271e:	2210      	movs	r2, #16
 8002720:	4913      	ldr	r1, [pc, #76]	; (8002770 <setBaudRate+0xc8>)
 8002722:	4812      	ldr	r0, [pc, #72]	; (800276c <setBaudRate+0xc4>)
 8002724:	f004 f9bd 	bl	8006aa2 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <setBaudRate+0xbc>)
 800272a:	f993 3000 	ldrsb.w	r3, [r3]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4a10      	ldr	r2, [pc, #64]	; (8002774 <setBaudRate+0xcc>)
 8002732:	4413      	add	r3, r2
 8002734:	2211      	movs	r2, #17
 8002736:	4619      	mov	r1, r3
 8002738:	480c      	ldr	r0, [pc, #48]	; (800276c <setBaudRate+0xc4>)
 800273a:	f004 f97a 	bl	8006a32 <strlcat>
	strlcpy(can_menu[1],temp,17);
 800273e:	2211      	movs	r2, #17
 8002740:	490a      	ldr	r1, [pc, #40]	; (800276c <setBaudRate+0xc4>)
 8002742:	480d      	ldr	r0, [pc, #52]	; (8002778 <setBaudRate+0xd0>)
 8002744:	f004 f998 	bl	8006a78 <strlcpy>
	lcd_put_cur(0,0);
 8002748:	2100      	movs	r1, #0
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fac4 	bl	8000cd8 <lcd_put_cur>
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	f3af 8000 	nop.w
 8002758:	00000000 	.word	0x00000000
 800275c:	40000000 	.word	0x40000000
 8002760:	20000258 	.word	0x20000258
 8002764:	2000015b 	.word	0x2000015b
 8002768:	20000000 	.word	0x20000000
 800276c:	20000284 	.word	0x20000284
 8002770:	08008268 	.word	0x08008268
 8002774:	080083d8 	.word	0x080083d8
 8002778:	20000059 	.word	0x20000059

0800277c <changeCANID>:

//changes the ID of the selected can device
void changeCANID(uint8_t direction){
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
	if(can_pos==2){//change can id 1
 8002786:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <changeCANID+0x148>)
 8002788:	f993 3000 	ldrsb.w	r3, [r3]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d128      	bne.n	80027e2 <changeCANID+0x66>
		can_id_1+=direction;
 8002790:	4b4d      	ldr	r3, [pc, #308]	; (80028c8 <changeCANID+0x14c>)
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	4413      	add	r3, r2
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <changeCANID+0x14c>)
 800279c:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 800279e:	e006      	b.n	80027ae <changeCANID+0x32>
			can_id_1+=direction;
 80027a0:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <changeCANID+0x14c>)
 80027a2:	781a      	ldrb	r2, [r3, #0]
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	4413      	add	r3, r2
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <changeCANID+0x14c>)
 80027ac:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 80027ae:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <changeCANID+0x14c>)
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <changeCANID+0x150>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d0f2      	beq.n	80027a0 <changeCANID+0x24>
 80027ba:	4b43      	ldr	r3, [pc, #268]	; (80028c8 <changeCANID+0x14c>)
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <changeCANID+0x154>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d0ec      	beq.n	80027a0 <changeCANID+0x24>
		sprintf(char_arr, "%03d", can_id_1);
 80027c6:	4b40      	ldr	r3, [pc, #256]	; (80028c8 <changeCANID+0x14c>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	4941      	ldr	r1, [pc, #260]	; (80028d4 <changeCANID+0x158>)
 80027ce:	4842      	ldr	r0, [pc, #264]	; (80028d8 <changeCANID+0x15c>)
 80027d0:	f004 f900 	bl	80069d4 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 80027d4:	4b41      	ldr	r3, [pc, #260]	; (80028dc <changeCANID+0x160>)
 80027d6:	4a40      	ldr	r2, [pc, #256]	; (80028d8 <changeCANID+0x15c>)
 80027d8:	8811      	ldrh	r1, [r2, #0]
 80027da:	7892      	ldrb	r2, [r2, #2]
 80027dc:	8019      	strh	r1, [r3, #0]
 80027de:	709a      	strb	r2, [r3, #2]
 80027e0:	e05a      	b.n	8002898 <changeCANID+0x11c>
	} else if(can_pos==3){//change can id 2
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <changeCANID+0x148>)
 80027e4:	f993 3000 	ldrsb.w	r3, [r3]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d128      	bne.n	800283e <changeCANID+0xc2>
		can_id_2+=direction;
 80027ec:	4b37      	ldr	r3, [pc, #220]	; (80028cc <changeCANID+0x150>)
 80027ee:	781a      	ldrb	r2, [r3, #0]
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	4413      	add	r3, r2
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b35      	ldr	r3, [pc, #212]	; (80028cc <changeCANID+0x150>)
 80027f8:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 80027fa:	e006      	b.n	800280a <changeCANID+0x8e>
			can_id_2+=direction;
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <changeCANID+0x150>)
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4413      	add	r3, r2
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4b31      	ldr	r3, [pc, #196]	; (80028cc <changeCANID+0x150>)
 8002808:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 800280a:	4b30      	ldr	r3, [pc, #192]	; (80028cc <changeCANID+0x150>)
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <changeCANID+0x14c>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d0f2      	beq.n	80027fc <changeCANID+0x80>
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <changeCANID+0x150>)
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <changeCANID+0x154>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d0ec      	beq.n	80027fc <changeCANID+0x80>
		sprintf(char_arr, "%03d", can_id_2);
 8002822:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <changeCANID+0x150>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	492a      	ldr	r1, [pc, #168]	; (80028d4 <changeCANID+0x158>)
 800282a:	482b      	ldr	r0, [pc, #172]	; (80028d8 <changeCANID+0x15c>)
 800282c:	f004 f8d2 	bl	80069d4 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <changeCANID+0x160>)
 8002832:	4a29      	ldr	r2, [pc, #164]	; (80028d8 <changeCANID+0x15c>)
 8002834:	8811      	ldrh	r1, [r2, #0]
 8002836:	7892      	ldrb	r2, [r2, #2]
 8002838:	8019      	strh	r1, [r3, #0]
 800283a:	709a      	strb	r2, [r3, #2]
 800283c:	e02c      	b.n	8002898 <changeCANID+0x11c>
	} else if(can_pos==4){// change can id 3
 800283e:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <changeCANID+0x148>)
 8002840:	f993 3000 	ldrsb.w	r3, [r3]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d127      	bne.n	8002898 <changeCANID+0x11c>
		can_id_3+=direction;
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <changeCANID+0x154>)
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	4413      	add	r3, r2
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <changeCANID+0x154>)
 8002854:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 8002856:	e006      	b.n	8002866 <changeCANID+0xea>
			can_id_3+=direction;
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <changeCANID+0x154>)
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	4413      	add	r3, r2
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <changeCANID+0x154>)
 8002864:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <changeCANID+0x154>)
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <changeCANID+0x14c>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d0f2      	beq.n	8002858 <changeCANID+0xdc>
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <changeCANID+0x154>)
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <changeCANID+0x150>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d0ec      	beq.n	8002858 <changeCANID+0xdc>
		sprintf(char_arr, "%03d", can_id_3);
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <changeCANID+0x154>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	4913      	ldr	r1, [pc, #76]	; (80028d4 <changeCANID+0x158>)
 8002886:	4814      	ldr	r0, [pc, #80]	; (80028d8 <changeCANID+0x15c>)
 8002888:	f004 f8a4 	bl	80069d4 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <changeCANID+0x160>)
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <changeCANID+0x15c>)
 8002890:	8811      	ldrh	r1, [r2, #0]
 8002892:	7892      	ldrb	r2, [r2, #2]
 8002894:	8019      	strh	r1, [r3, #0]
 8002896:	709a      	strb	r2, [r3, #2]
	}
	//display the selected CAN ID
	lcd_put_cur(0,13);
 8002898:	210d      	movs	r1, #13
 800289a:	2000      	movs	r0, #0
 800289c:	f7fe fa1c 	bl	8000cd8 <lcd_put_cur>
	lcd_send_string("    ");
 80028a0:	480f      	ldr	r0, [pc, #60]	; (80028e0 <changeCANID+0x164>)
 80028a2:	f7fe fa75 	bl	8000d90 <lcd_send_string>
	lcd_put_cur(0,13);
 80028a6:	210d      	movs	r1, #13
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7fe fa15 	bl	8000cd8 <lcd_put_cur>
	lcd_send_string(modified_can_id);
 80028ae:	480b      	ldr	r0, [pc, #44]	; (80028dc <changeCANID+0x160>)
 80028b0:	f7fe fa6e 	bl	8000d90 <lcd_send_string>
	lcd_put_cur(0,15);
 80028b4:	210f      	movs	r1, #15
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe fa0e 	bl	8000cd8 <lcd_put_cur>
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000205 	.word	0x20000205
 80028c8:	20000364 	.word	0x20000364
 80028cc:	2000029c 	.word	0x2000029c
 80028d0:	20000214 	.word	0x20000214
 80028d4:	08008288 	.word	0x08008288
 80028d8:	200003d0 	.word	0x200003d0
 80028dc:	200003cc 	.word	0x200003cc
 80028e0:	08008318 	.word	0x08008318

080028e4 <setCANID>:

//set the can IDs
void setCANID(void){
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	headers_1.StdId = can_id_1; // set CAN ID 1
 80028e8:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <setCANID+0x194>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <setCANID+0x198>)
 80028f0:	601a      	str	r2, [r3, #0]
	headers_2.StdId = can_id_2; // set CAN ID 2
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <setCANID+0x19c>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <setCANID+0x1a0>)
 80028fa:	601a      	str	r2, [r3, #0]
	headers_3.StdId = can_id_3; // set CAN ID 3
 80028fc:	4b62      	ldr	r3, [pc, #392]	; (8002a88 <setCANID+0x1a4>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b62      	ldr	r3, [pc, #392]	; (8002a8c <setCANID+0x1a8>)
 8002904:	601a      	str	r2, [r3, #0]

	//Store the CAN IDs
	id_arr[0]=can_id_1;
 8002906:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <setCANID+0x194>)
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <setCANID+0x1ac>)
 800290c:	701a      	strb	r2, [r3, #0]
	id_arr[1]=can_id_2;
 800290e:	4b5c      	ldr	r3, [pc, #368]	; (8002a80 <setCANID+0x19c>)
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	4b5f      	ldr	r3, [pc, #380]	; (8002a90 <setCANID+0x1ac>)
 8002914:	705a      	strb	r2, [r3, #1]
	id_arr[2]=can_id_3;
 8002916:	4b5c      	ldr	r3, [pc, #368]	; (8002a88 <setCANID+0x1a4>)
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <setCANID+0x1ac>)
 800291c:	709a      	strb	r2, [r3, #2]
	id_arr[3]=0;
 800291e:	4b5c      	ldr	r3, [pc, #368]	; (8002a90 <setCANID+0x1ac>)
 8002920:	2200      	movs	r2, #0
 8002922:	70da      	strb	r2, [r3, #3]

	storeInFlash();
 8002924:	f000 fd0e 	bl	8003344 <storeInFlash>


	//save can IDs in menu
	//can id 1
	memset(temp,0,17); // erase the temp array
 8002928:	2211      	movs	r2, #17
 800292a:	2100      	movs	r1, #0
 800292c:	4859      	ldr	r0, [pc, #356]	; (8002a94 <setCANID+0x1b0>)
 800292e:	f004 f849 	bl	80069c4 <memset>
	strncpy(temp, "CAN ID ",16);
 8002932:	2210      	movs	r2, #16
 8002934:	4958      	ldr	r1, [pc, #352]	; (8002a98 <setCANID+0x1b4>)
 8002936:	4857      	ldr	r0, [pc, #348]	; (8002a94 <setCANID+0x1b0>)
 8002938:	f004 f8b3 	bl	8006aa2 <strncpy>
	strcat(temp, "1:    ");
 800293c:	4855      	ldr	r0, [pc, #340]	; (8002a94 <setCANID+0x1b0>)
 800293e:	f7fd fc47 	bl	80001d0 <strlen>
 8002942:	4603      	mov	r3, r0
 8002944:	461a      	mov	r2, r3
 8002946:	4b53      	ldr	r3, [pc, #332]	; (8002a94 <setCANID+0x1b0>)
 8002948:	4413      	add	r3, r2
 800294a:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <setCANID+0x1b8>)
 800294c:	6810      	ldr	r0, [r2, #0]
 800294e:	6018      	str	r0, [r3, #0]
 8002950:	8891      	ldrh	r1, [r2, #4]
 8002952:	7992      	ldrb	r2, [r2, #6]
 8002954:	8099      	strh	r1, [r3, #4]
 8002956:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002958:	2210      	movs	r2, #16
 800295a:	2100      	movs	r1, #0
 800295c:	4850      	ldr	r0, [pc, #320]	; (8002aa0 <setCANID+0x1bc>)
 800295e:	f004 f831 	bl	80069c4 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8002962:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <setCANID+0x194>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	494e      	ldr	r1, [pc, #312]	; (8002aa4 <setCANID+0x1c0>)
 800296a:	484d      	ldr	r0, [pc, #308]	; (8002aa0 <setCANID+0x1bc>)
 800296c:	f004 f832 	bl	80069d4 <siprintf>
	strlcat(temp, char_arr,17);
 8002970:	2211      	movs	r2, #17
 8002972:	494b      	ldr	r1, [pc, #300]	; (8002aa0 <setCANID+0x1bc>)
 8002974:	4847      	ldr	r0, [pc, #284]	; (8002a94 <setCANID+0x1b0>)
 8002976:	f004 f85c 	bl	8006a32 <strlcat>
	memcpy(can_menu[2],temp,17);
 800297a:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <setCANID+0x1c4>)
 800297c:	4a45      	ldr	r2, [pc, #276]	; (8002a94 <setCANID+0x1b0>)
 800297e:	3322      	adds	r3, #34	; 0x22
 8002980:	6815      	ldr	r5, [r2, #0]
 8002982:	6854      	ldr	r4, [r2, #4]
 8002984:	6890      	ldr	r0, [r2, #8]
 8002986:	68d1      	ldr	r1, [r2, #12]
 8002988:	601d      	str	r5, [r3, #0]
 800298a:	605c      	str	r4, [r3, #4]
 800298c:	6098      	str	r0, [r3, #8]
 800298e:	60d9      	str	r1, [r3, #12]
 8002990:	7c12      	ldrb	r2, [r2, #16]
 8002992:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 8002994:	2211      	movs	r2, #17
 8002996:	2100      	movs	r1, #0
 8002998:	483e      	ldr	r0, [pc, #248]	; (8002a94 <setCANID+0x1b0>)
 800299a:	f004 f813 	bl	80069c4 <memset>
	strncpy(temp, "CAN ID ",16);
 800299e:	2210      	movs	r2, #16
 80029a0:	493d      	ldr	r1, [pc, #244]	; (8002a98 <setCANID+0x1b4>)
 80029a2:	483c      	ldr	r0, [pc, #240]	; (8002a94 <setCANID+0x1b0>)
 80029a4:	f004 f87d 	bl	8006aa2 <strncpy>
	strcat(temp, "2:    ");
 80029a8:	483a      	ldr	r0, [pc, #232]	; (8002a94 <setCANID+0x1b0>)
 80029aa:	f7fd fc11 	bl	80001d0 <strlen>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <setCANID+0x1b0>)
 80029b4:	4413      	add	r3, r2
 80029b6:	4a3d      	ldr	r2, [pc, #244]	; (8002aac <setCANID+0x1c8>)
 80029b8:	6810      	ldr	r0, [r2, #0]
 80029ba:	6018      	str	r0, [r3, #0]
 80029bc:	8891      	ldrh	r1, [r2, #4]
 80029be:	7992      	ldrb	r2, [r2, #6]
 80029c0:	8099      	strh	r1, [r3, #4]
 80029c2:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 80029c4:	2210      	movs	r2, #16
 80029c6:	2100      	movs	r1, #0
 80029c8:	4835      	ldr	r0, [pc, #212]	; (8002aa0 <setCANID+0x1bc>)
 80029ca:	f003 fffb 	bl	80069c4 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 80029ce:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <setCANID+0x19c>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4933      	ldr	r1, [pc, #204]	; (8002aa4 <setCANID+0x1c0>)
 80029d6:	4832      	ldr	r0, [pc, #200]	; (8002aa0 <setCANID+0x1bc>)
 80029d8:	f003 fffc 	bl	80069d4 <siprintf>
	strlcat(temp, char_arr,17);
 80029dc:	2211      	movs	r2, #17
 80029de:	4930      	ldr	r1, [pc, #192]	; (8002aa0 <setCANID+0x1bc>)
 80029e0:	482c      	ldr	r0, [pc, #176]	; (8002a94 <setCANID+0x1b0>)
 80029e2:	f004 f826 	bl	8006a32 <strlcat>
	memcpy(can_menu[3],temp,17);
 80029e6:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <setCANID+0x1c4>)
 80029e8:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <setCANID+0x1b0>)
 80029ea:	3333      	adds	r3, #51	; 0x33
 80029ec:	6815      	ldr	r5, [r2, #0]
 80029ee:	6854      	ldr	r4, [r2, #4]
 80029f0:	6890      	ldr	r0, [r2, #8]
 80029f2:	68d1      	ldr	r1, [r2, #12]
 80029f4:	601d      	str	r5, [r3, #0]
 80029f6:	605c      	str	r4, [r3, #4]
 80029f8:	6098      	str	r0, [r3, #8]
 80029fa:	60d9      	str	r1, [r3, #12]
 80029fc:	7c12      	ldrb	r2, [r2, #16]
 80029fe:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 8002a00:	2211      	movs	r2, #17
 8002a02:	2100      	movs	r1, #0
 8002a04:	4823      	ldr	r0, [pc, #140]	; (8002a94 <setCANID+0x1b0>)
 8002a06:	f003 ffdd 	bl	80069c4 <memset>
	strncpy(temp, "CAN ID ",16);
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	4922      	ldr	r1, [pc, #136]	; (8002a98 <setCANID+0x1b4>)
 8002a0e:	4821      	ldr	r0, [pc, #132]	; (8002a94 <setCANID+0x1b0>)
 8002a10:	f004 f847 	bl	8006aa2 <strncpy>
	strcat(temp, "3:    ");
 8002a14:	481f      	ldr	r0, [pc, #124]	; (8002a94 <setCANID+0x1b0>)
 8002a16:	f7fd fbdb 	bl	80001d0 <strlen>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <setCANID+0x1b0>)
 8002a20:	4413      	add	r3, r2
 8002a22:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <setCANID+0x1cc>)
 8002a24:	6810      	ldr	r0, [r2, #0]
 8002a26:	6018      	str	r0, [r3, #0]
 8002a28:	8891      	ldrh	r1, [r2, #4]
 8002a2a:	7992      	ldrb	r2, [r2, #6]
 8002a2c:	8099      	strh	r1, [r3, #4]
 8002a2e:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002a30:	2210      	movs	r2, #16
 8002a32:	2100      	movs	r1, #0
 8002a34:	481a      	ldr	r0, [pc, #104]	; (8002aa0 <setCANID+0x1bc>)
 8002a36:	f003 ffc5 	bl	80069c4 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <setCANID+0x1a4>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4918      	ldr	r1, [pc, #96]	; (8002aa4 <setCANID+0x1c0>)
 8002a42:	4817      	ldr	r0, [pc, #92]	; (8002aa0 <setCANID+0x1bc>)
 8002a44:	f003 ffc6 	bl	80069d4 <siprintf>
	strlcat(temp, char_arr,17);
 8002a48:	2211      	movs	r2, #17
 8002a4a:	4915      	ldr	r1, [pc, #84]	; (8002aa0 <setCANID+0x1bc>)
 8002a4c:	4811      	ldr	r0, [pc, #68]	; (8002a94 <setCANID+0x1b0>)
 8002a4e:	f003 fff0 	bl	8006a32 <strlcat>
	memcpy(can_menu[4],temp,17);
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <setCANID+0x1c4>)
 8002a54:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <setCANID+0x1b0>)
 8002a56:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8002a5a:	4615      	mov	r5, r2
 8002a5c:	6828      	ldr	r0, [r5, #0]
 8002a5e:	6869      	ldr	r1, [r5, #4]
 8002a60:	68aa      	ldr	r2, [r5, #8]
 8002a62:	68eb      	ldr	r3, [r5, #12]
 8002a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a66:	7c2b      	ldrb	r3, [r5, #16]
 8002a68:	7023      	strb	r3, [r4, #0]

	lcd_put_cur(0,0);
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fe f933 	bl	8000cd8 <lcd_put_cur>
}
 8002a72:	bf00      	nop
 8002a74:	bdb0      	pop	{r4, r5, r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000364 	.word	0x20000364
 8002a7c:	20000240 	.word	0x20000240
 8002a80:	2000029c 	.word	0x2000029c
 8002a84:	20000368 	.word	0x20000368
 8002a88:	20000214 	.word	0x20000214
 8002a8c:	20000228 	.word	0x20000228
 8002a90:	20000220 	.word	0x20000220
 8002a94:	20000284 	.word	0x20000284
 8002a98:	08008278 	.word	0x08008278
 8002a9c:	08008280 	.word	0x08008280
 8002aa0:	200003d0 	.word	0x200003d0
 8002aa4:	08008288 	.word	0x08008288
 8002aa8:	20000048 	.word	0x20000048
 8002aac:	08008290 	.word	0x08008290
 8002ab0:	08008298 	.word	0x08008298

08002ab4 <resetCAN>:

//reset CAN Variables
void resetCAN(void){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
	//reset IDs
	can_id_1=1;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <resetCAN+0x28>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
	can_id_2=2;
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <resetCAN+0x2c>)
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	701a      	strb	r2, [r3, #0]
	can_id_3=3;
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <resetCAN+0x30>)
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	701a      	strb	r2, [r3, #0]
	setCANID();
 8002aca:	f7ff ff0b 	bl	80028e4 <setCANID>

	//reset baud rate to 1M
	baud_pos=3;
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <resetCAN+0x34>)
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	701a      	strb	r2, [r3, #0]
	setBaudRate();
 8002ad4:	f7ff fde8 	bl	80026a8 <setBaudRate>
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000364 	.word	0x20000364
 8002ae0:	2000029c 	.word	0x2000029c
 8002ae4:	20000214 	.word	0x20000214
 8002ae8:	2000015b 	.word	0x2000015b

08002aec <changeDelay>:

//change the number of delays between samples
void changeDelay(uint16_t direction){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	80fb      	strh	r3, [r7, #6]
	num_delays+=direction;//move num_delays in given direction
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <changeDelay+0x5c>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <changeDelay+0x5c>)
 8002b04:	701a      	strb	r2, [r3, #0]

	//display new delay in microseconds
	lcd_put_cur(0,9);
 8002b06:	2109      	movs	r1, #9
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fe f8e5 	bl	8000cd8 <lcd_put_cur>
	char temp_arr[5];
	sprintf(temp_arr, "%05d", us*(num_delays+1));
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <changeDelay+0x60>)
 8002b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <changeDelay+0x5c>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	fb03 f202 	mul.w	r2, r3, r2
 8002b20:	f107 0308 	add.w	r3, r7, #8
 8002b24:	490a      	ldr	r1, [pc, #40]	; (8002b50 <changeDelay+0x64>)
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 ff54 	bl	80069d4 <siprintf>
	lcd_send_string(temp_arr);
 8002b2c:	f107 0308 	add.w	r3, r7, #8
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f92d 	bl	8000d90 <lcd_send_string>
	lcd_put_cur(0,13);
 8002b36:	210d      	movs	r1, #13
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fe f8cd 	bl	8000cd8 <lcd_put_cur>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000207 	.word	0x20000207
 8002b4c:	2000015c 	.word	0x2000015c
 8002b50:	080082ac 	.word	0x080082ac

08002b54 <setDelay>:

//change the prescaler to achieve the desired baud rate and reinitialize the can bus
void setDelay(void){
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	//sore the nmber of delays in flash
	storeInFlash();
 8002b58:	f000 fbf4 	bl	8003344 <storeInFlash>

	//save the delay in microseconds in menu
	memset(temp,0,17); // erase the temp array
 8002b5c:	2211      	movs	r2, #17
 8002b5e:	2100      	movs	r1, #0
 8002b60:	481b      	ldr	r0, [pc, #108]	; (8002bd0 <setDelay+0x7c>)
 8002b62:	f003 ff2f 	bl	80069c4 <memset>
	strncpy(temp, "Delay:   ",16);
 8002b66:	2210      	movs	r2, #16
 8002b68:	491a      	ldr	r1, [pc, #104]	; (8002bd4 <setDelay+0x80>)
 8002b6a:	4819      	ldr	r0, [pc, #100]	; (8002bd0 <setDelay+0x7c>)
 8002b6c:	f003 ff99 	bl	8006aa2 <strncpy>
	memset(char_arr, 0, 16);
 8002b70:	2210      	movs	r2, #16
 8002b72:	2100      	movs	r1, #0
 8002b74:	4818      	ldr	r0, [pc, #96]	; (8002bd8 <setDelay+0x84>)
 8002b76:	f003 ff25 	bl	80069c4 <memset>
	sprintf(char_arr, "%05d", us*(num_delays+1));
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <setDelay+0x88>)
 8002b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <setDelay+0x8c>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	fb03 f302 	mul.w	r3, r3, r2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4915      	ldr	r1, [pc, #84]	; (8002be4 <setDelay+0x90>)
 8002b90:	4811      	ldr	r0, [pc, #68]	; (8002bd8 <setDelay+0x84>)
 8002b92:	f003 ff1f 	bl	80069d4 <siprintf>
	strcat(temp, char_arr);
 8002b96:	4910      	ldr	r1, [pc, #64]	; (8002bd8 <setDelay+0x84>)
 8002b98:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <setDelay+0x7c>)
 8002b9a:	f003 ff3b 	bl	8006a14 <strcat>
	strlcat(temp,"us",17);
 8002b9e:	2211      	movs	r2, #17
 8002ba0:	4911      	ldr	r1, [pc, #68]	; (8002be8 <setDelay+0x94>)
 8002ba2:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <setDelay+0x7c>)
 8002ba4:	f003 ff45 	bl	8006a32 <strlcat>
	memcpy(main_menu[3],temp,17);
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <setDelay+0x98>)
 8002baa:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <setDelay+0x7c>)
 8002bac:	3333      	adds	r3, #51	; 0x33
 8002bae:	6815      	ldr	r5, [r2, #0]
 8002bb0:	6854      	ldr	r4, [r2, #4]
 8002bb2:	6890      	ldr	r0, [r2, #8]
 8002bb4:	68d1      	ldr	r1, [r2, #12]
 8002bb6:	601d      	str	r5, [r3, #0]
 8002bb8:	605c      	str	r4, [r3, #4]
 8002bba:	6098      	str	r0, [r3, #8]
 8002bbc:	60d9      	str	r1, [r3, #12]
 8002bbe:	7c12      	ldrb	r2, [r2, #16]
 8002bc0:	741a      	strb	r2, [r3, #16]
	lcd_put_cur(0,0);
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7fe f887 	bl	8000cd8 <lcd_put_cur>
}
 8002bca:	bf00      	nop
 8002bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000284 	.word	0x20000284
 8002bd4:	080082a0 	.word	0x080082a0
 8002bd8:	200003d0 	.word	0x200003d0
 8002bdc:	2000015c 	.word	0x2000015c
 8002be0:	20000207 	.word	0x20000207
 8002be4:	080082ac 	.word	0x080082ac
 8002be8:	080082b4 	.word	0x080082b4
 8002bec:	20000004 	.word	0x20000004

08002bf0 <zeroAnalog>:

//sets an offset for the specified analog value
void zeroAnalog(uint8_t analog_id){
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
	if(analog_id==0){//zero all
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <zeroAnalog+0x30>
		analog_1_offset = raw_1;
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <zeroAnalog+0x70>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <zeroAnalog+0x74>)
 8002c08:	601a      	str	r2, [r3, #0]
		analog_2_offset = raw_2;
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <zeroAnalog+0x78>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <zeroAnalog+0x7c>)
 8002c12:	601a      	str	r2, [r3, #0]
		analog_3_offset = raw_3;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <zeroAnalog+0x80>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <zeroAnalog+0x84>)
 8002c1c:	601a      	str	r2, [r3, #0]
		analog_1_offset = raw_1;
	else if(analog_id==2)//zero 2
		analog_2_offset = raw_2;
	else if(analog_id==3)//zero 3
		analog_3_offset = raw_3;
}
 8002c1e:	e019      	b.n	8002c54 <zeroAnalog+0x64>
	}else if(analog_id==1)//zero 1
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d105      	bne.n	8002c32 <zeroAnalog+0x42>
		analog_1_offset = raw_1;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <zeroAnalog+0x70>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <zeroAnalog+0x74>)
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	e010      	b.n	8002c54 <zeroAnalog+0x64>
	else if(analog_id==2)//zero 2
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d105      	bne.n	8002c44 <zeroAnalog+0x54>
		analog_2_offset = raw_2;
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <zeroAnalog+0x78>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <zeroAnalog+0x7c>)
 8002c40:	601a      	str	r2, [r3, #0]
}
 8002c42:	e007      	b.n	8002c54 <zeroAnalog+0x64>
	else if(analog_id==3)//zero 3
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d104      	bne.n	8002c54 <zeroAnalog+0x64>
		analog_3_offset = raw_3;
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <zeroAnalog+0x80>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <zeroAnalog+0x84>)
 8002c52:	601a      	str	r2, [r3, #0]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	20000224 	.word	0x20000224
 8002c64:	200001f4 	.word	0x200001f4
 8002c68:	20000314 	.word	0x20000314
 8002c6c:	200001f8 	.word	0x200001f8
 8002c70:	2000021c 	.word	0x2000021c
 8002c74:	200001fc 	.word	0x200001fc

08002c78 <resetOffsets>:

//resets all analog offsets to 0 and stores it in flash
void resetOffsets(void){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
	analog_1_offset=0;
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <resetOffsets+0x24>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
	analog_2_offset=0;
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <resetOffsets+0x28>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
	analog_3_offset=0;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <resetOffsets+0x2c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

	store_offsets=1;
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <resetOffsets+0x30>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]

	storeInFlash();
 8002c94:	f000 fb56 	bl	8003344 <storeInFlash>
}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200001f4 	.word	0x200001f4
 8002ca0:	200001f8 	.word	0x200001f8
 8002ca4:	200001fc 	.word	0x200001fc
 8002ca8:	20000200 	.word	0x20000200

08002cac <toggleAnalog>:

//turns the analog device on or off
void toggleAnalog(uint8_t analog_id){
 8002cac:	b5b0      	push	{r4, r5, r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
	uint8_t enabled=0;//bool to indicate if the change enabled the device
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
	//update state and display it
	lcd_put_cur(0,13);
 8002cba:	210d      	movs	r1, #13
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f7fe f80b 	bl	8000cd8 <lcd_put_cur>
	if(analog_id==1){
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d117      	bne.n	8002cf8 <toggleAnalog+0x4c>
		if(analog_1_enabled)
 8002cc8:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <toggleAnalog+0x204>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <toggleAnalog+0x2c>
			lcd_send_string("OFF");
 8002cd0:	4878      	ldr	r0, [pc, #480]	; (8002eb4 <toggleAnalog+0x208>)
 8002cd2:	f7fe f85d 	bl	8000d90 <lcd_send_string>
 8002cd6:	e004      	b.n	8002ce2 <toggleAnalog+0x36>
		else{
			lcd_send_string(" ON");
 8002cd8:	4877      	ldr	r0, [pc, #476]	; (8002eb8 <toggleAnalog+0x20c>)
 8002cda:	f7fe f859 	bl	8000d90 <lcd_send_string>
			enabled=1;}
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
		analog_1_enabled=!analog_1_enabled;
 8002ce2:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <toggleAnalog+0x204>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <toggleAnalog+0x204>)
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e034      	b.n	8002d62 <toggleAnalog+0xb6>
	}else if(analog_id==2){
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d117      	bne.n	8002d2e <toggleAnalog+0x82>
		if(analog_2_enabled)
 8002cfe:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <toggleAnalog+0x210>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <toggleAnalog+0x62>
			lcd_send_string("OFF");
 8002d06:	486b      	ldr	r0, [pc, #428]	; (8002eb4 <toggleAnalog+0x208>)
 8002d08:	f7fe f842 	bl	8000d90 <lcd_send_string>
 8002d0c:	e004      	b.n	8002d18 <toggleAnalog+0x6c>
		else{
			lcd_send_string(" ON");
 8002d0e:	486a      	ldr	r0, [pc, #424]	; (8002eb8 <toggleAnalog+0x20c>)
 8002d10:	f7fe f83e 	bl	8000d90 <lcd_send_string>
			enabled=1;}
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
		analog_2_enabled=!analog_2_enabled;
 8002d18:	4b68      	ldr	r3, [pc, #416]	; (8002ebc <toggleAnalog+0x210>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	4b64      	ldr	r3, [pc, #400]	; (8002ebc <toggleAnalog+0x210>)
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e019      	b.n	8002d62 <toggleAnalog+0xb6>
	}else if(analog_id==3){
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d116      	bne.n	8002d62 <toggleAnalog+0xb6>
		if(analog_3_enabled)
 8002d34:	4b62      	ldr	r3, [pc, #392]	; (8002ec0 <toggleAnalog+0x214>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <toggleAnalog+0x98>
			lcd_send_string("OFF");
 8002d3c:	485d      	ldr	r0, [pc, #372]	; (8002eb4 <toggleAnalog+0x208>)
 8002d3e:	f7fe f827 	bl	8000d90 <lcd_send_string>
 8002d42:	e004      	b.n	8002d4e <toggleAnalog+0xa2>
		else{
			lcd_send_string(" ON");enabled=1;}
 8002d44:	485c      	ldr	r0, [pc, #368]	; (8002eb8 <toggleAnalog+0x20c>)
 8002d46:	f7fe f823 	bl	8000d90 <lcd_send_string>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
		analog_3_enabled=!analog_3_enabled;
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <toggleAnalog+0x214>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bf0c      	ite	eq
 8002d56:	2301      	moveq	r3, #1
 8002d58:	2300      	movne	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b58      	ldr	r3, [pc, #352]	; (8002ec0 <toggleAnalog+0x214>)
 8002d60:	701a      	strb	r2, [r3, #0]
	}

	//store the state in the menu
	if(enabled){
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d03e      	beq.n	8002de6 <toggleAnalog+0x13a>
		memset(temp,0,17); // erase the temp array
 8002d68:	2211      	movs	r2, #17
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4855      	ldr	r0, [pc, #340]	; (8002ec4 <toggleAnalog+0x218>)
 8002d6e:	f003 fe29 	bl	80069c4 <memset>
		strncpy(temp, "Analog ",16);
 8002d72:	2210      	movs	r2, #16
 8002d74:	4954      	ldr	r1, [pc, #336]	; (8002ec8 <toggleAnalog+0x21c>)
 8002d76:	4853      	ldr	r0, [pc, #332]	; (8002ec4 <toggleAnalog+0x218>)
 8002d78:	f003 fe93 	bl	8006aa2 <strncpy>
		memset(char_arr, 0, 16);
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4852      	ldr	r0, [pc, #328]	; (8002ecc <toggleAnalog+0x220>)
 8002d82:	f003 fe1f 	bl	80069c4 <memset>
		sprintf(char_arr, "%01d", analog_id);
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4951      	ldr	r1, [pc, #324]	; (8002ed0 <toggleAnalog+0x224>)
 8002d8c:	484f      	ldr	r0, [pc, #316]	; (8002ecc <toggleAnalog+0x220>)
 8002d8e:	f003 fe21 	bl	80069d4 <siprintf>
		strcat(temp, char_arr);
 8002d92:	494e      	ldr	r1, [pc, #312]	; (8002ecc <toggleAnalog+0x220>)
 8002d94:	484b      	ldr	r0, [pc, #300]	; (8002ec4 <toggleAnalog+0x218>)
 8002d96:	f003 fe3d 	bl	8006a14 <strcat>
		strcat(temp,":     ");
 8002d9a:	484a      	ldr	r0, [pc, #296]	; (8002ec4 <toggleAnalog+0x218>)
 8002d9c:	f7fd fa18 	bl	80001d0 <strlen>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <toggleAnalog+0x218>)
 8002da6:	4413      	add	r3, r2
 8002da8:	4a4a      	ldr	r2, [pc, #296]	; (8002ed4 <toggleAnalog+0x228>)
 8002daa:	6810      	ldr	r0, [r2, #0]
 8002dac:	6018      	str	r0, [r3, #0]
 8002dae:	8891      	ldrh	r1, [r2, #4]
 8002db0:	7992      	ldrb	r2, [r2, #6]
 8002db2:	8099      	strh	r1, [r3, #4]
 8002db4:	719a      	strb	r2, [r3, #6]
		strlcat(temp, "ON",17);
 8002db6:	2211      	movs	r2, #17
 8002db8:	4947      	ldr	r1, [pc, #284]	; (8002ed8 <toggleAnalog+0x22c>)
 8002dba:	4842      	ldr	r0, [pc, #264]	; (8002ec4 <toggleAnalog+0x218>)
 8002dbc:	f003 fe39 	bl	8006a32 <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	1d1a      	adds	r2, r3, #4
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	4413      	add	r3, r2
 8002dca:	4a44      	ldr	r2, [pc, #272]	; (8002edc <toggleAnalog+0x230>)
 8002dcc:	4413      	add	r3, r2
 8002dce:	4a3d      	ldr	r2, [pc, #244]	; (8002ec4 <toggleAnalog+0x218>)
 8002dd0:	6815      	ldr	r5, [r2, #0]
 8002dd2:	6854      	ldr	r4, [r2, #4]
 8002dd4:	6890      	ldr	r0, [r2, #8]
 8002dd6:	68d1      	ldr	r1, [r2, #12]
 8002dd8:	601d      	str	r5, [r3, #0]
 8002dda:	605c      	str	r4, [r3, #4]
 8002ddc:	6098      	str	r0, [r3, #8]
 8002dde:	60d9      	str	r1, [r3, #12]
 8002de0:	7c12      	ldrb	r2, [r2, #16]
 8002de2:	741a      	strb	r2, [r3, #16]
 8002de4:	e03b      	b.n	8002e5e <toggleAnalog+0x1b2>
	}else{
		memset(temp,0,17); // erase the temp array
 8002de6:	2211      	movs	r2, #17
 8002de8:	2100      	movs	r1, #0
 8002dea:	4836      	ldr	r0, [pc, #216]	; (8002ec4 <toggleAnalog+0x218>)
 8002dec:	f003 fdea 	bl	80069c4 <memset>
		strncpy(temp, "Analog ",16);
 8002df0:	2210      	movs	r2, #16
 8002df2:	4935      	ldr	r1, [pc, #212]	; (8002ec8 <toggleAnalog+0x21c>)
 8002df4:	4833      	ldr	r0, [pc, #204]	; (8002ec4 <toggleAnalog+0x218>)
 8002df6:	f003 fe54 	bl	8006aa2 <strncpy>
		memset(char_arr, 0, 16);
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4833      	ldr	r0, [pc, #204]	; (8002ecc <toggleAnalog+0x220>)
 8002e00:	f003 fde0 	bl	80069c4 <memset>
		sprintf(char_arr, "%01d", analog_id);
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4931      	ldr	r1, [pc, #196]	; (8002ed0 <toggleAnalog+0x224>)
 8002e0a:	4830      	ldr	r0, [pc, #192]	; (8002ecc <toggleAnalog+0x220>)
 8002e0c:	f003 fde2 	bl	80069d4 <siprintf>
		strcat(temp, char_arr);
 8002e10:	492e      	ldr	r1, [pc, #184]	; (8002ecc <toggleAnalog+0x220>)
 8002e12:	482c      	ldr	r0, [pc, #176]	; (8002ec4 <toggleAnalog+0x218>)
 8002e14:	f003 fdfe 	bl	8006a14 <strcat>
		strcat(temp,":    ");
 8002e18:	482a      	ldr	r0, [pc, #168]	; (8002ec4 <toggleAnalog+0x218>)
 8002e1a:	f7fd f9d9 	bl	80001d0 <strlen>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <toggleAnalog+0x218>)
 8002e24:	4413      	add	r3, r2
 8002e26:	4a2e      	ldr	r2, [pc, #184]	; (8002ee0 <toggleAnalog+0x234>)
 8002e28:	6810      	ldr	r0, [r2, #0]
 8002e2a:	6018      	str	r0, [r3, #0]
 8002e2c:	8892      	ldrh	r2, [r2, #4]
 8002e2e:	809a      	strh	r2, [r3, #4]
		strlcat(temp, "OFF",17);
 8002e30:	2211      	movs	r2, #17
 8002e32:	4920      	ldr	r1, [pc, #128]	; (8002eb4 <toggleAnalog+0x208>)
 8002e34:	4823      	ldr	r0, [pc, #140]	; (8002ec4 <toggleAnalog+0x218>)
 8002e36:	f003 fdfc 	bl	8006a32 <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);}
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	1d1a      	adds	r2, r3, #4
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	4413      	add	r3, r2
 8002e44:	4a25      	ldr	r2, [pc, #148]	; (8002edc <toggleAnalog+0x230>)
 8002e46:	4413      	add	r3, r2
 8002e48:	4a1e      	ldr	r2, [pc, #120]	; (8002ec4 <toggleAnalog+0x218>)
 8002e4a:	6815      	ldr	r5, [r2, #0]
 8002e4c:	6854      	ldr	r4, [r2, #4]
 8002e4e:	6890      	ldr	r0, [r2, #8]
 8002e50:	68d1      	ldr	r1, [r2, #12]
 8002e52:	601d      	str	r5, [r3, #0]
 8002e54:	605c      	str	r4, [r3, #4]
 8002e56:	6098      	str	r0, [r3, #8]
 8002e58:	60d9      	str	r1, [r3, #12]
 8002e5a:	7c12      	ldrb	r2, [r2, #16]
 8002e5c:	741a      	strb	r2, [r3, #16]

	//invert values so the default is on after erasing memory
	analog_enable_arr[0]=!analog_1_enabled;
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <toggleAnalog+0x204>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf0c      	ite	eq
 8002e66:	2301      	moveq	r3, #1
 8002e68:	2300      	movne	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <toggleAnalog+0x238>)
 8002e70:	701a      	strb	r2, [r3, #0]
	analog_enable_arr[1]=!analog_2_enabled;
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <toggleAnalog+0x210>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <toggleAnalog+0x238>)
 8002e84:	705a      	strb	r2, [r3, #1]
	analog_enable_arr[2]=!analog_3_enabled;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <toggleAnalog+0x214>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2301      	moveq	r3, #1
 8002e90:	2300      	movne	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <toggleAnalog+0x238>)
 8002e98:	709a      	strb	r2, [r3, #2]

	storeInFlash();
 8002e9a:	f000 fa53 	bl	8003344 <storeInFlash>

	//reset cursor on display
	lcd_put_cur(0,0);
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fd ff19 	bl	8000cd8 <lcd_put_cur>
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bdb0      	pop	{r4, r5, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000001 	.word	0x20000001
 8002eb4:	08008320 	.word	0x08008320
 8002eb8:	08008324 	.word	0x08008324
 8002ebc:	20000002 	.word	0x20000002
 8002ec0:	20000003 	.word	0x20000003
 8002ec4:	20000284 	.word	0x20000284
 8002ec8:	08008328 	.word	0x08008328
 8002ecc:	200003d0 	.word	0x200003d0
 8002ed0:	08008330 	.word	0x08008330
 8002ed4:	08008338 	.word	0x08008338
 8002ed8:	08008340 	.word	0x08008340
 8002edc:	200000b0 	.word	0x200000b0
 8002ee0:	08008344 	.word	0x08008344
 8002ee4:	2000031c 	.word	0x2000031c

08002ee8 <displayValues>:

//display the analog values on the display
void displayValues(void){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
	lcd_put_cur(0,0);
 8002eec:	2100      	movs	r1, #0
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7fd fef2 	bl	8000cd8 <lcd_put_cur>
	if(analog_1_enabled&&analog_2_enabled&&analog_3_enabled){//all 3 devices are enabled
 8002ef4:	4bac      	ldr	r3, [pc, #688]	; (80031a8 <displayValues+0x2c0>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80a5 	beq.w	8003048 <displayValues+0x160>
 8002efe:	4bab      	ldr	r3, [pc, #684]	; (80031ac <displayValues+0x2c4>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80a0 	beq.w	8003048 <displayValues+0x160>
 8002f08:	4ba9      	ldr	r3, [pc, #676]	; (80031b0 <displayValues+0x2c8>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 809b 	beq.w	8003048 <displayValues+0x160>
		if(display_scroll==0){//position 1
 8002f12:	4ba8      	ldr	r3, [pc, #672]	; (80031b4 <displayValues+0x2cc>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d130      	bne.n	8002f7c <displayValues+0x94>
			lcd_send_string("Analog 1:       ");
 8002f1a:	48a7      	ldr	r0, [pc, #668]	; (80031b8 <displayValues+0x2d0>)
 8002f1c:	f7fd ff38 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(0,11);
 8002f20:	210b      	movs	r1, #11
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fd fed8 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8002f28:	2210      	movs	r2, #16
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	48a3      	ldr	r0, [pc, #652]	; (80031bc <displayValues+0x2d4>)
 8002f2e:	f003 fd49 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 8002f32:	4ba3      	ldr	r3, [pc, #652]	; (80031c0 <displayValues+0x2d8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	49a2      	ldr	r1, [pc, #648]	; (80031c4 <displayValues+0x2dc>)
 8002f3a:	48a0      	ldr	r0, [pc, #640]	; (80031bc <displayValues+0x2d4>)
 8002f3c:	f003 fd4a 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 8002f40:	489e      	ldr	r0, [pc, #632]	; (80031bc <displayValues+0x2d4>)
 8002f42:	f7fd ff25 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(1,0);
 8002f46:	2100      	movs	r1, #0
 8002f48:	2001      	movs	r0, #1
 8002f4a:	f7fd fec5 	bl	8000cd8 <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 8002f4e:	489e      	ldr	r0, [pc, #632]	; (80031c8 <displayValues+0x2e0>)
 8002f50:	f7fd ff1e 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(1,11);
 8002f54:	210b      	movs	r1, #11
 8002f56:	2001      	movs	r0, #1
 8002f58:	f7fd febe 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8002f5c:	2210      	movs	r2, #16
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4896      	ldr	r0, [pc, #600]	; (80031bc <displayValues+0x2d4>)
 8002f62:	f003 fd2f 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 8002f66:	4b99      	ldr	r3, [pc, #612]	; (80031cc <displayValues+0x2e4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4995      	ldr	r1, [pc, #596]	; (80031c4 <displayValues+0x2dc>)
 8002f6e:	4893      	ldr	r0, [pc, #588]	; (80031bc <displayValues+0x2d4>)
 8002f70:	f003 fd30 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 8002f74:	4891      	ldr	r0, [pc, #580]	; (80031bc <displayValues+0x2d4>)
 8002f76:	f7fd ff0b 	bl	8000d90 <lcd_send_string>
		if(display_scroll==0){//position 1
 8002f7a:	e112      	b.n	80031a2 <displayValues+0x2ba>
		}else if(display_scroll==1){//position 2
 8002f7c:	4b8d      	ldr	r3, [pc, #564]	; (80031b4 <displayValues+0x2cc>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d130      	bne.n	8002fe6 <displayValues+0xfe>
			lcd_send_string("Analog 2:       ");
 8002f84:	4890      	ldr	r0, [pc, #576]	; (80031c8 <displayValues+0x2e0>)
 8002f86:	f7fd ff03 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(0,11);
 8002f8a:	210b      	movs	r1, #11
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fd fea3 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8002f92:	2210      	movs	r2, #16
 8002f94:	2100      	movs	r1, #0
 8002f96:	4889      	ldr	r0, [pc, #548]	; (80031bc <displayValues+0x2d4>)
 8002f98:	f003 fd14 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 8002f9c:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <displayValues+0x2e4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4988      	ldr	r1, [pc, #544]	; (80031c4 <displayValues+0x2dc>)
 8002fa4:	4885      	ldr	r0, [pc, #532]	; (80031bc <displayValues+0x2d4>)
 8002fa6:	f003 fd15 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 8002faa:	4884      	ldr	r0, [pc, #528]	; (80031bc <displayValues+0x2d4>)
 8002fac:	f7fd fef0 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(1,0);
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f7fd fe90 	bl	8000cd8 <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 8002fb8:	4885      	ldr	r0, [pc, #532]	; (80031d0 <displayValues+0x2e8>)
 8002fba:	f7fd fee9 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(1,11);
 8002fbe:	210b      	movs	r1, #11
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f7fd fe89 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	2100      	movs	r1, #0
 8002fca:	487c      	ldr	r0, [pc, #496]	; (80031bc <displayValues+0x2d4>)
 8002fcc:	f003 fcfa 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 8002fd0:	4b80      	ldr	r3, [pc, #512]	; (80031d4 <displayValues+0x2ec>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	497b      	ldr	r1, [pc, #492]	; (80031c4 <displayValues+0x2dc>)
 8002fd8:	4878      	ldr	r0, [pc, #480]	; (80031bc <displayValues+0x2d4>)
 8002fda:	f003 fcfb 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 8002fde:	4877      	ldr	r0, [pc, #476]	; (80031bc <displayValues+0x2d4>)
 8002fe0:	f7fd fed6 	bl	8000d90 <lcd_send_string>
		if(display_scroll==0){//position 1
 8002fe4:	e0dd      	b.n	80031a2 <displayValues+0x2ba>
		}else {//position 3
			lcd_send_string("Analog 3:       ");
 8002fe6:	487a      	ldr	r0, [pc, #488]	; (80031d0 <displayValues+0x2e8>)
 8002fe8:	f7fd fed2 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(0,11);
 8002fec:	210b      	movs	r1, #11
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f7fd fe72 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4870      	ldr	r0, [pc, #448]	; (80031bc <displayValues+0x2d4>)
 8002ffa:	f003 fce3 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 8002ffe:	4b75      	ldr	r3, [pc, #468]	; (80031d4 <displayValues+0x2ec>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	496f      	ldr	r1, [pc, #444]	; (80031c4 <displayValues+0x2dc>)
 8003006:	486d      	ldr	r0, [pc, #436]	; (80031bc <displayValues+0x2d4>)
 8003008:	f003 fce4 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 800300c:	486b      	ldr	r0, [pc, #428]	; (80031bc <displayValues+0x2d4>)
 800300e:	f7fd febf 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(1,0);
 8003012:	2100      	movs	r1, #0
 8003014:	2001      	movs	r0, #1
 8003016:	f7fd fe5f 	bl	8000cd8 <lcd_put_cur>
			lcd_send_string("Analog 1:       ");
 800301a:	4867      	ldr	r0, [pc, #412]	; (80031b8 <displayValues+0x2d0>)
 800301c:	f7fd feb8 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(1,11);
 8003020:	210b      	movs	r1, #11
 8003022:	2001      	movs	r0, #1
 8003024:	f7fd fe58 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003028:	2210      	movs	r2, #16
 800302a:	2100      	movs	r1, #0
 800302c:	4863      	ldr	r0, [pc, #396]	; (80031bc <displayValues+0x2d4>)
 800302e:	f003 fcc9 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 8003032:	4b63      	ldr	r3, [pc, #396]	; (80031c0 <displayValues+0x2d8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4962      	ldr	r1, [pc, #392]	; (80031c4 <displayValues+0x2dc>)
 800303a:	4860      	ldr	r0, [pc, #384]	; (80031bc <displayValues+0x2d4>)
 800303c:	f003 fcca 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 8003040:	485e      	ldr	r0, [pc, #376]	; (80031bc <displayValues+0x2d4>)
 8003042:	f7fd fea5 	bl	8000d90 <lcd_send_string>
		if(display_scroll==0){//position 1
 8003046:	e0ac      	b.n	80031a2 <displayValues+0x2ba>
		}

	}else{//less than 3 are enabled
		if(analog_1_enabled){//display device 1 on first line
 8003048:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <displayValues+0x2c0>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d016      	beq.n	800307e <displayValues+0x196>
			lcd_send_string("Analog 1:       ");
 8003050:	4859      	ldr	r0, [pc, #356]	; (80031b8 <displayValues+0x2d0>)
 8003052:	f7fd fe9d 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(0,11);
 8003056:	210b      	movs	r1, #11
 8003058:	2000      	movs	r0, #0
 800305a:	f7fd fe3d 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 800305e:	2210      	movs	r2, #16
 8003060:	2100      	movs	r1, #0
 8003062:	4856      	ldr	r0, [pc, #344]	; (80031bc <displayValues+0x2d4>)
 8003064:	f003 fcae 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_1);
 8003068:	4b55      	ldr	r3, [pc, #340]	; (80031c0 <displayValues+0x2d8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4955      	ldr	r1, [pc, #340]	; (80031c4 <displayValues+0x2dc>)
 8003070:	4852      	ldr	r0, [pc, #328]	; (80031bc <displayValues+0x2d4>)
 8003072:	f003 fcaf 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 8003076:	4851      	ldr	r0, [pc, #324]	; (80031bc <displayValues+0x2d4>)
 8003078:	f7fd fe8a 	bl	8000d90 <lcd_send_string>
 800307c:	e043      	b.n	8003106 <displayValues+0x21e>
		} else if(analog_2_enabled){//display device 2 on first line
 800307e:	4b4b      	ldr	r3, [pc, #300]	; (80031ac <displayValues+0x2c4>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <displayValues+0x1cc>
			lcd_send_string("Analog 2:       ");
 8003086:	4850      	ldr	r0, [pc, #320]	; (80031c8 <displayValues+0x2e0>)
 8003088:	f7fd fe82 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(0,11);
 800308c:	210b      	movs	r1, #11
 800308e:	2000      	movs	r0, #0
 8003090:	f7fd fe22 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003094:	2210      	movs	r2, #16
 8003096:	2100      	movs	r1, #0
 8003098:	4848      	ldr	r0, [pc, #288]	; (80031bc <displayValues+0x2d4>)
 800309a:	f003 fc93 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 800309e:	4b4b      	ldr	r3, [pc, #300]	; (80031cc <displayValues+0x2e4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	4947      	ldr	r1, [pc, #284]	; (80031c4 <displayValues+0x2dc>)
 80030a6:	4845      	ldr	r0, [pc, #276]	; (80031bc <displayValues+0x2d4>)
 80030a8:	f003 fc94 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 80030ac:	4843      	ldr	r0, [pc, #268]	; (80031bc <displayValues+0x2d4>)
 80030ae:	f7fd fe6f 	bl	8000d90 <lcd_send_string>
 80030b2:	e028      	b.n	8003106 <displayValues+0x21e>
		} else if(analog_3_enabled){//display device 3 on first line
 80030b4:	4b3e      	ldr	r3, [pc, #248]	; (80031b0 <displayValues+0x2c8>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d016      	beq.n	80030ea <displayValues+0x202>
			lcd_send_string("Analog 3:       ");
 80030bc:	4844      	ldr	r0, [pc, #272]	; (80031d0 <displayValues+0x2e8>)
 80030be:	f7fd fe67 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(0,11);
 80030c2:	210b      	movs	r1, #11
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fd fe07 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 80030ca:	2210      	movs	r2, #16
 80030cc:	2100      	movs	r1, #0
 80030ce:	483b      	ldr	r0, [pc, #236]	; (80031bc <displayValues+0x2d4>)
 80030d0:	f003 fc78 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 80030d4:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <displayValues+0x2ec>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	493a      	ldr	r1, [pc, #232]	; (80031c4 <displayValues+0x2dc>)
 80030dc:	4837      	ldr	r0, [pc, #220]	; (80031bc <displayValues+0x2d4>)
 80030de:	f003 fc79 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 80030e2:	4836      	ldr	r0, [pc, #216]	; (80031bc <displayValues+0x2d4>)
 80030e4:	f7fd fe54 	bl	8000d90 <lcd_send_string>
 80030e8:	e00d      	b.n	8003106 <displayValues+0x21e>
		} else{//display no devices enabled
			lcd_send_string("No Devices      ");
 80030ea:	483b      	ldr	r0, [pc, #236]	; (80031d8 <displayValues+0x2f0>)
 80030ec:	f7fd fe50 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(1,0);
 80030f0:	2100      	movs	r1, #0
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7fd fdf0 	bl	8000cd8 <lcd_put_cur>
			lcd_send_string("Enabled         ");
 80030f8:	4838      	ldr	r0, [pc, #224]	; (80031dc <displayValues+0x2f4>)
 80030fa:	f7fd fe49 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(1,15);
 80030fe:	210f      	movs	r1, #15
 8003100:	2001      	movs	r0, #1
 8003102:	f7fd fde9 	bl	8000cd8 <lcd_put_cur>
		}

		if(analog_1_enabled&&analog_2_enabled){//display device 2 on second line
 8003106:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <displayValues+0x2c0>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01e      	beq.n	800314c <displayValues+0x264>
 800310e:	4b27      	ldr	r3, [pc, #156]	; (80031ac <displayValues+0x2c4>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01a      	beq.n	800314c <displayValues+0x264>
			lcd_put_cur(1,0);
 8003116:	2100      	movs	r1, #0
 8003118:	2001      	movs	r0, #1
 800311a:	f7fd fddd 	bl	8000cd8 <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 800311e:	482a      	ldr	r0, [pc, #168]	; (80031c8 <displayValues+0x2e0>)
 8003120:	f7fd fe36 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(1,11);
 8003124:	210b      	movs	r1, #11
 8003126:	2001      	movs	r0, #1
 8003128:	f7fd fdd6 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 800312c:	2210      	movs	r2, #16
 800312e:	2100      	movs	r1, #0
 8003130:	4822      	ldr	r0, [pc, #136]	; (80031bc <displayValues+0x2d4>)
 8003132:	f003 fc47 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_2);
 8003136:	4b25      	ldr	r3, [pc, #148]	; (80031cc <displayValues+0x2e4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	4921      	ldr	r1, [pc, #132]	; (80031c4 <displayValues+0x2dc>)
 800313e:	481f      	ldr	r0, [pc, #124]	; (80031bc <displayValues+0x2d4>)
 8003140:	f003 fc48 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 8003144:	481d      	ldr	r0, [pc, #116]	; (80031bc <displayValues+0x2d4>)
 8003146:	f7fd fe23 	bl	8000d90 <lcd_send_string>
 800314a:	e02a      	b.n	80031a2 <displayValues+0x2ba>
		} else if((analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled)){//display device 3 on second line
 800314c:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <displayValues+0x2c0>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <displayValues+0x274>
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <displayValues+0x2c8>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d107      	bne.n	800316c <displayValues+0x284>
 800315c:	4b13      	ldr	r3, [pc, #76]	; (80031ac <displayValues+0x2c4>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01e      	beq.n	80031a2 <displayValues+0x2ba>
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <displayValues+0x2c8>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01a      	beq.n	80031a2 <displayValues+0x2ba>
			lcd_put_cur(1,0);
 800316c:	2100      	movs	r1, #0
 800316e:	2001      	movs	r0, #1
 8003170:	f7fd fdb2 	bl	8000cd8 <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 8003174:	4816      	ldr	r0, [pc, #88]	; (80031d0 <displayValues+0x2e8>)
 8003176:	f7fd fe0b 	bl	8000d90 <lcd_send_string>
			lcd_put_cur(1,11);
 800317a:	210b      	movs	r1, #11
 800317c:	2001      	movs	r0, #1
 800317e:	f7fd fdab 	bl	8000cd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003182:	2210      	movs	r2, #16
 8003184:	2100      	movs	r1, #0
 8003186:	480d      	ldr	r0, [pc, #52]	; (80031bc <displayValues+0x2d4>)
 8003188:	f003 fc1c 	bl	80069c4 <memset>
			sprintf(char_arr, "%05d", a_in_3);
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <displayValues+0x2ec>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	490c      	ldr	r1, [pc, #48]	; (80031c4 <displayValues+0x2dc>)
 8003194:	4809      	ldr	r0, [pc, #36]	; (80031bc <displayValues+0x2d4>)
 8003196:	f003 fc1d 	bl	80069d4 <siprintf>
			lcd_send_string(char_arr);
 800319a:	4808      	ldr	r0, [pc, #32]	; (80031bc <displayValues+0x2d4>)
 800319c:	f7fd fdf8 	bl	8000d90 <lcd_send_string>
		}
	}
}
 80031a0:	e7ff      	b.n	80031a2 <displayValues+0x2ba>
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000001 	.word	0x20000001
 80031ac:	20000002 	.word	0x20000002
 80031b0:	20000003 	.word	0x20000003
 80031b4:	20000203 	.word	0x20000203
 80031b8:	0800834c 	.word	0x0800834c
 80031bc:	200003d0 	.word	0x200003d0
 80031c0:	20000318 	.word	0x20000318
 80031c4:	080082ac 	.word	0x080082ac
 80031c8:	08008360 	.word	0x08008360
 80031cc:	20000218 	.word	0x20000218
 80031d0:	08008374 	.word	0x08008374
 80031d4:	20000280 	.word	0x20000280
 80031d8:	08008388 	.word	0x08008388
 80031dc:	0800839c 	.word	0x0800839c

080031e0 <bytesToWord>:


//convert a 4 byte array to a word (unsigned long int)
uint32_t bytesToWord(uint8_t* arr) {
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	uint32_t value = arr[0] & 0xFF;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
	value |= (arr[1] << 8) & 0xFFFF;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3301      	adds	r3, #1
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
	value |= (arr[2] << 16) & 0xFFFFFF;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3302      	adds	r3, #2
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
	value |= (arr[3] << 24) & 0xFFFFFFFF;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3303      	adds	r3, #3
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	061b      	lsls	r3, r3, #24
 8003218:	461a      	mov	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
	return value;
 8003220:	68fb      	ldr	r3, [r7, #12]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <wordToBytes>:

//convert a word (unsigned long int) to a 4 byte array
uint8_t* wordToBytes(uint32_t value){
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	byte_arr[3] = (value >> 24) & 0xFF;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	0e1b      	lsrs	r3, r3, #24
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <wordToBytes+0x3c>)
 8003240:	70da      	strb	r2, [r3, #3]
	byte_arr[2] = (value >> 16) & 0xFF;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <wordToBytes+0x3c>)
 800324a:	709a      	strb	r2, [r3, #2]
	byte_arr[1] = (value >> 8) & 0xFF;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <wordToBytes+0x3c>)
 8003254:	705a      	strb	r2, [r3, #1]
	byte_arr[0] = value & 0xFF;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <wordToBytes+0x3c>)
 800325c:	701a      	strb	r2, [r3, #0]
	return byte_arr;
 800325e:	4b03      	ldr	r3, [pc, #12]	; (800326c <wordToBytes+0x3c>)
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	20000424 	.word	0x20000424

08003270 <calibrateSDADC>:

//calibrate the given sdadc for the given channel
void calibrateSDADC(SDADC_HandleTypeDef* adc, uint32_t channel){
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
	//Display Calibrating
	lcd_put_cur(0,0);
 800327a:	2100      	movs	r1, #0
 800327c:	2000      	movs	r0, #0
 800327e:	f7fd fd2b 	bl	8000cd8 <lcd_put_cur>
	lcd_send_string("Calibrating ADC ");
 8003282:	482b      	ldr	r0, [pc, #172]	; (8003330 <calibrateSDADC+0xc0>)
 8003284:	f7fd fd84 	bl	8000d90 <lcd_send_string>
	lcd_put_cur(1,0);
 8003288:	2100      	movs	r1, #0
 800328a:	2001      	movs	r0, #1
 800328c:	f7fd fd24 	bl	8000cd8 <lcd_put_cur>
	lcd_send_string("                ");
 8003290:	4828      	ldr	r0, [pc, #160]	; (8003334 <calibrateSDADC+0xc4>)
 8003292:	f7fd fd7d 	bl	8000d90 <lcd_send_string>

	//Run Calibration Sequence
	HAL_SDADC_AssociateChannelConfig(adc, channel, SDADC_CONF_INDEX_0);
 8003296:	2200      	movs	r2, #0
 8003298:	6839      	ldr	r1, [r7, #0]
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f002 fe40 	bl	8005f20 <HAL_SDADC_AssociateChannelConfig>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_OFF);
 80032a0:	2200      	movs	r2, #0
 80032a2:	6839      	ldr	r1, [r7, #0]
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f002 fe8b 	bl	8005fc0 <HAL_SDADC_ConfigChannel>
	HAL_SDADC_CalibrationStart(adc, SDADC_CALIBRATION_SEQ_1);
 80032aa:	2100      	movs	r1, #0
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f002 fecb 	bl	8006048 <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(adc, HAL_MAX_DELAY);
 80032b2:	f04f 31ff 	mov.w	r1, #4294967295
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f002 ff06 	bl	80060c8 <HAL_SDADC_PollForCalibEvent>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_ON);
 80032bc:	2201      	movs	r2, #1
 80032be:	6839      	ldr	r1, [r7, #0]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f002 fe7d 	bl	8005fc0 <HAL_SDADC_ConfigChannel>

	//Display Menu
	lcd_put_cur(0,0);
 80032c6:	2100      	movs	r1, #0
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fd fd05 	bl	8000cd8 <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80032ce:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <calibrateSDADC+0xc8>)
 80032d0:	f993 3000 	ldrsb.w	r3, [r3]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4413      	add	r3, r2
 80032dc:	4a17      	ldr	r2, [pc, #92]	; (800333c <calibrateSDADC+0xcc>)
 80032de:	4413      	add	r3, r2
 80032e0:	2210      	movs	r2, #16
 80032e2:	4619      	mov	r1, r3
 80032e4:	4816      	ldr	r0, [pc, #88]	; (8003340 <calibrateSDADC+0xd0>)
 80032e6:	f003 fbdc 	bl	8006aa2 <strncpy>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd fd4f 	bl	8000d90 <lcd_send_string>
	lcd_put_cur(1,0);
 80032f2:	2100      	movs	r1, #0
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7fd fcef 	bl	8000cd8 <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <calibrateSDADC+0xc8>)
 80032fc:	f993 3000 	ldrsb.w	r3, [r3]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	4413      	add	r3, r2
 8003308:	4a0c      	ldr	r2, [pc, #48]	; (800333c <calibrateSDADC+0xcc>)
 800330a:	4413      	add	r3, r2
 800330c:	2210      	movs	r2, #16
 800330e:	4619      	mov	r1, r3
 8003310:	480b      	ldr	r0, [pc, #44]	; (8003340 <calibrateSDADC+0xd0>)
 8003312:	f003 fbc6 	bl	8006aa2 <strncpy>
 8003316:	4603      	mov	r3, r0
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fd39 	bl	8000d90 <lcd_send_string>
	lcd_put_cur(0,0);
 800331e:	2100      	movs	r1, #0
 8003320:	2000      	movs	r0, #0
 8003322:	f7fd fcd9 	bl	8000cd8 <lcd_put_cur>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	080083b0 	.word	0x080083b0
 8003334:	080083c4 	.word	0x080083c4
 8003338:	20000204 	.word	0x20000204
 800333c:	20000004 	.word	0x20000004
 8003340:	20000284 	.word	0x20000284

08003344 <storeInFlash>:

//store all saved values in flash memory
void storeInFlash(void){
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
	//Unlock the Flash Program Erase controller
	HAL_FLASH_Unlock();
 800334a:	f000 ff93 	bl	8004274 <HAL_FLASH_Unlock>

	//Erase page
	FLASH_EraseInitTypeDef eraseParams;
	eraseParams.TypeErase = FLASH_TYPEERASE_PAGES;
 800334e:	2300      	movs	r3, #0
 8003350:	607b      	str	r3, [r7, #4]
	eraseParams.PageAddress = 0x0800F800;
 8003352:	4b3e      	ldr	r3, [pc, #248]	; (800344c <storeInFlash+0x108>)
 8003354:	60bb      	str	r3, [r7, #8]
	eraseParams.NbPages=1;
 8003356:	2301      	movs	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
	uint32_t eraseError=0;
 800335a:	2300      	movs	r3, #0
 800335c:	603b      	str	r3, [r7, #0]
	HAL_FLASHEx_Erase(&eraseParams, &eraseError);
 800335e:	463a      	mov	r2, r7
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f001 f849 	bl	80043fc <HAL_FLASHEx_Erase>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800336a:	f04f 30ff 	mov.w	r0, #4294967295
 800336e:	f000 ffd3 	bl	8004318 <FLASH_WaitForLastOperation>


	//Store the CAN IDs
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F800, bytesToWord(id_arr));//store can ids
 8003372:	4837      	ldr	r0, [pc, #220]	; (8003450 <storeInFlash+0x10c>)
 8003374:	f7ff ff34 	bl	80031e0 <bytesToWord>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	4932      	ldr	r1, [pc, #200]	; (800344c <storeInFlash+0x108>)
 8003382:	2002      	movs	r0, #2
 8003384:	f000 ff06 	bl	8004194 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f000 ffc4 	bl	8004318 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F804, (uint32_t)baud_pos); //store baud rate
 8003390:	4b30      	ldr	r3, [pc, #192]	; (8003454 <storeInFlash+0x110>)
 8003392:	f993 3000 	ldrsb.w	r3, [r3]
 8003396:	461a      	mov	r2, r3
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	492e      	ldr	r1, [pc, #184]	; (8003458 <storeInFlash+0x114>)
 800339e:	2002      	movs	r0, #2
 80033a0:	f000 fef8 	bl	8004194 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	f000 ffb6 	bl	8004318 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F808, (uint32_t)num_delays); // store number of delays
 80033ac:	4b2b      	ldr	r3, [pc, #172]	; (800345c <storeInFlash+0x118>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	492a      	ldr	r1, [pc, #168]	; (8003460 <storeInFlash+0x11c>)
 80033b8:	2002      	movs	r0, #2
 80033ba:	f000 feeb 	bl	8004194 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80033be:	f04f 30ff 	mov.w	r0, #4294967295
 80033c2:	f000 ffa9 	bl	8004318 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F80C, bytesToWord(analog_enable_arr)); // store device enable bools
 80033c6:	4827      	ldr	r0, [pc, #156]	; (8003464 <storeInFlash+0x120>)
 80033c8:	f7ff ff0a 	bl	80031e0 <bytesToWord>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	4924      	ldr	r1, [pc, #144]	; (8003468 <storeInFlash+0x124>)
 80033d6:	2002      	movs	r0, #2
 80033d8:	f000 fedc 	bl	8004194 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	f000 ff9a 	bl	8004318 <FLASH_WaitForLastOperation>
	if(store_offsets){
 80033e4:	4b21      	ldr	r3, [pc, #132]	; (800346c <storeInFlash+0x128>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d029      	beq.n	8003440 <storeInFlash+0xfc>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F810, analog_1_offset); // store analog 1 offset
 80033ec:	4b20      	ldr	r3, [pc, #128]	; (8003470 <storeInFlash+0x12c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	491f      	ldr	r1, [pc, #124]	; (8003474 <storeInFlash+0x130>)
 80033f8:	2002      	movs	r0, #2
 80033fa:	f000 fecb 	bl	8004194 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80033fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003402:	f000 ff89 	bl	8004318 <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F814, analog_2_offset); // store analog 2 offset
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <storeInFlash+0x134>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	491a      	ldr	r1, [pc, #104]	; (800347c <storeInFlash+0x138>)
 8003412:	2002      	movs	r0, #2
 8003414:	f000 febe 	bl	8004194 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	f000 ff7c 	bl	8004318 <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F818, analog_3_offset); // store analog 3 offset
 8003420:	4b17      	ldr	r3, [pc, #92]	; (8003480 <storeInFlash+0x13c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	4916      	ldr	r1, [pc, #88]	; (8003484 <storeInFlash+0x140>)
 800342c:	2002      	movs	r0, #2
 800342e:	f000 feb1 	bl	8004194 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8003432:	f04f 30ff 	mov.w	r0, #4294967295
 8003436:	f000 ff6f 	bl	8004318 <FLASH_WaitForLastOperation>
		store_offsets=0;
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <storeInFlash+0x128>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
	}


	//Lock the Flash Program Erase controller
	HAL_FLASH_Lock();
 8003440:	f000 ff3e 	bl	80042c0 <HAL_FLASH_Lock>
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	0800f800 	.word	0x0800f800
 8003450:	20000220 	.word	0x20000220
 8003454:	2000015b 	.word	0x2000015b
 8003458:	0800f804 	.word	0x0800f804
 800345c:	20000207 	.word	0x20000207
 8003460:	0800f808 	.word	0x0800f808
 8003464:	2000031c 	.word	0x2000031c
 8003468:	0800f80c 	.word	0x0800f80c
 800346c:	20000200 	.word	0x20000200
 8003470:	200001f4 	.word	0x200001f4
 8003474:	0800f810 	.word	0x0800f810
 8003478:	200001f8 	.word	0x200001f8
 800347c:	0800f814 	.word	0x0800f814
 8003480:	200001fc 	.word	0x200001fc
 8003484:	0800f818 	.word	0x0800f818

08003488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800348c:	b672      	cpsid	i
}
 800348e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003490:	e7fe      	b.n	8003490 <Error_Handler+0x8>
	...

08003494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <HAL_MspInit+0x44>)
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	4a0e      	ldr	r2, [pc, #56]	; (80034d8 <HAL_MspInit+0x44>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6193      	str	r3, [r2, #24]
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <HAL_MspInit+0x44>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_MspInit+0x44>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <HAL_MspInit+0x44>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	61d3      	str	r3, [r2, #28]
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_MspInit+0x44>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000

080034dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	; 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <HAL_CAN_MspInit+0x80>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d129      	bne.n	8003552 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80034fe:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_CAN_MspInit+0x84>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4a17      	ldr	r2, [pc, #92]	; (8003560 <HAL_CAN_MspInit+0x84>)
 8003504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003508:	61d3      	str	r3, [r2, #28]
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_CAN_MspInit+0x84>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_CAN_MspInit+0x84>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4a11      	ldr	r2, [pc, #68]	; (8003560 <HAL_CAN_MspInit+0x84>)
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	6153      	str	r3, [r2, #20]
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_CAN_MspInit+0x84>)
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800352e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003534:	2302      	movs	r3, #2
 8003536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003540:	2309      	movs	r3, #9
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	4619      	mov	r1, r3
 800354a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800354e:	f000 fff9 	bl	8004544 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40006400 	.word	0x40006400
 8003560:	40021000 	.word	0x40021000

08003564 <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08e      	sub	sp, #56	; 0x38
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a40      	ldr	r2, [pc, #256]	; (8003684 <HAL_SDADC_MspInit+0x120>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d125      	bne.n	80035d2 <HAL_SDADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8003586:	4b40      	ldr	r3, [pc, #256]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	4a3f      	ldr	r2, [pc, #252]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 800358c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003590:	6193      	str	r3, [r2, #24]
 8003592:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359a:	623b      	str	r3, [r7, #32]
 800359c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800359e:	4b3a      	ldr	r3, [pc, #232]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4a39      	ldr	r2, [pc, #228]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 80035a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035a8:	6153      	str	r3, [r2, #20]
 80035aa:	4b37      	ldr	r3, [pc, #220]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	69fb      	ldr	r3, [r7, #28]
    /**SDADC1 GPIO Configuration
    PE8     ------> SDADC1_AIN8P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035bc:	2303      	movs	r3, #3
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035c8:	4619      	mov	r1, r3
 80035ca:	4830      	ldr	r0, [pc, #192]	; (800368c <HAL_SDADC_MspInit+0x128>)
 80035cc:	f000 ffba 	bl	8004544 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 80035d0:	e054      	b.n	800367c <HAL_SDADC_MspInit+0x118>
  else if(hsdadc->Instance==SDADC2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2e      	ldr	r2, [pc, #184]	; (8003690 <HAL_SDADC_MspInit+0x12c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d125      	bne.n	8003628 <HAL_SDADC_MspInit+0xc4>
    __HAL_RCC_SDADC2_CLK_ENABLE();
 80035dc:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a29      	ldr	r2, [pc, #164]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 80035e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035e6:	6193      	str	r3, [r2, #24]
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035f4:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	4a23      	ldr	r2, [pc, #140]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 80035fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035fe:	6153      	str	r3, [r2, #20]
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800360c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003612:	2303      	movs	r3, #3
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	2300      	movs	r3, #0
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800361a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800361e:	4619      	mov	r1, r3
 8003620:	481a      	ldr	r0, [pc, #104]	; (800368c <HAL_SDADC_MspInit+0x128>)
 8003622:	f000 ff8f 	bl	8004544 <HAL_GPIO_Init>
}
 8003626:	e029      	b.n	800367c <HAL_SDADC_MspInit+0x118>
  else if(hsdadc->Instance==SDADC3)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a19      	ldr	r2, [pc, #100]	; (8003694 <HAL_SDADC_MspInit+0x130>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d124      	bne.n	800367c <HAL_SDADC_MspInit+0x118>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	4a14      	ldr	r2, [pc, #80]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 8003638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800363c:	6193      	str	r3, [r2, #24]
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 8003650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003654:	6153      	str	r3, [r2, #20]
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <HAL_SDADC_MspInit+0x124>)
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003662:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003668:	2303      	movs	r3, #3
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003674:	4619      	mov	r1, r3
 8003676:	4808      	ldr	r0, [pc, #32]	; (8003698 <HAL_SDADC_MspInit+0x134>)
 8003678:	f000 ff64 	bl	8004544 <HAL_GPIO_Init>
}
 800367c:	bf00      	nop
 800367e:	3738      	adds	r7, #56	; 0x38
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40016000 	.word	0x40016000
 8003688:	40021000 	.word	0x40021000
 800368c:	48001000 	.word	0x48001000
 8003690:	40016400 	.word	0x40016400
 8003694:	40016800 	.word	0x40016800
 8003698:	48000400 	.word	0x48000400

0800369c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ac:	d10b      	bne.n	80036c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_TIM_Base_MspInit+0x38>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <HAL_TIM_Base_MspInit+0x38>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	61d3      	str	r3, [r2, #28]
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_TIM_Base_MspInit+0x38>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000

080036d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036dc:	e7fe      	b.n	80036dc <NMI_Handler+0x4>

080036de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036de:	b480      	push	{r7}
 80036e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036e2:	e7fe      	b.n	80036e2 <HardFault_Handler+0x4>

080036e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036e8:	e7fe      	b.n	80036e8 <MemManage_Handler+0x4>

080036ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036ee:	e7fe      	b.n	80036ee <BusFault_Handler+0x4>

080036f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036f4:	e7fe      	b.n	80036f4 <UsageFault_Handler+0x4>

080036f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036f6:	b480      	push	{r7}
 80036f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003708:	bf00      	nop
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003724:	f000 f8ba 	bl	800389c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003728:	bf00      	nop
 800372a:	bd80      	pop	{r7, pc}

0800372c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <_sbrk+0x5c>)
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <_sbrk+0x60>)
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <_sbrk+0x64>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <_sbrk+0x64>)
 800374a:	4a12      	ldr	r2, [pc, #72]	; (8003794 <_sbrk+0x68>)
 800374c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <_sbrk+0x64>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	429a      	cmp	r2, r3
 800375a:	d207      	bcs.n	800376c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800375c:	f003 f908 	bl	8006970 <__errno>
 8003760:	4603      	mov	r3, r0
 8003762:	220c      	movs	r2, #12
 8003764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	e009      	b.n	8003780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <_sbrk+0x64>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003772:	4b07      	ldr	r3, [pc, #28]	; (8003790 <_sbrk+0x64>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	4a05      	ldr	r2, [pc, #20]	; (8003790 <_sbrk+0x64>)
 800377c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800377e:	68fb      	ldr	r3, [r7, #12]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20008000 	.word	0x20008000
 800378c:	00000400 	.word	0x00000400
 8003790:	20000208 	.word	0x20000208
 8003794:	20000460 	.word	0x20000460

08003798 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <SystemInit+0x20>)
 800379e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a2:	4a05      	ldr	r2, [pc, #20]	; (80037b8 <SystemInit+0x20>)
 80037a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037c0:	480d      	ldr	r0, [pc, #52]	; (80037f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80037c2:	490e      	ldr	r1, [pc, #56]	; (80037fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80037c4:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <LoopForever+0xe>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037c8:	e002      	b.n	80037d0 <LoopCopyDataInit>

080037ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ce:	3304      	adds	r3, #4

080037d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037d4:	d3f9      	bcc.n	80037ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037d6:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037d8:	4c0b      	ldr	r4, [pc, #44]	; (8003808 <LoopForever+0x16>)
  movs r3, #0
 80037da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037dc:	e001      	b.n	80037e2 <LoopFillZerobss>

080037de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e0:	3204      	adds	r2, #4

080037e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037e4:	d3fb      	bcc.n	80037de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037e6:	f7ff ffd7 	bl	8003798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ea:	f003 f8c7 	bl	800697c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037ee:	f7fd fae7 	bl	8000dc0 <main>

080037f2 <LoopForever>:

LoopForever:
    b LoopForever
 80037f2:	e7fe      	b.n	80037f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80037f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003800:	08008498 	.word	0x08008498
  ldr r2, =_sbss
 8003804:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003808:	20000460 	.word	0x20000460

0800380c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800380c:	e7fe      	b.n	800380c <ADC1_IRQHandler>
	...

08003810 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_Init+0x28>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a07      	ldr	r2, [pc, #28]	; (8003838 <HAL_Init+0x28>)
 800381a:	f043 0310 	orr.w	r3, r3, #16
 800381e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003820:	2003      	movs	r0, #3
 8003822:	f000 fc83 	bl	800412c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003826:	2000      	movs	r0, #0
 8003828:	f000 f808 	bl	800383c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800382c:	f7ff fe32 	bl	8003494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40022000 	.word	0x40022000

0800383c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003844:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_InitTick+0x54>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <HAL_InitTick+0x58>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	4619      	mov	r1, r3
 800384e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003852:	fbb3 f3f1 	udiv	r3, r3, r1
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fc8d 	bl	800417a <HAL_SYSTICK_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e00e      	b.n	8003888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b0f      	cmp	r3, #15
 800386e:	d80a      	bhi.n	8003886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003870:	2200      	movs	r2, #0
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	f04f 30ff 	mov.w	r0, #4294967295
 8003878:	f000 fc63 	bl	8004142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800387c:	4a06      	ldr	r2, [pc, #24]	; (8003898 <HAL_InitTick+0x5c>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20000160 	.word	0x20000160
 8003894:	20000168 	.word	0x20000168
 8003898:	20000164 	.word	0x20000164

0800389c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_IncTick+0x20>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_IncTick+0x24>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <HAL_IncTick+0x24>)
 80038ae:	6013      	str	r3, [r2, #0]
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20000168 	.word	0x20000168
 80038c0:	20000428 	.word	0x20000428

080038c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <HAL_GetTick+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000428 	.word	0x20000428

080038dc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e4:	f7ff ffee 	bl	80038c4 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d005      	beq.n	8003902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_Delay+0x44>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003902:	bf00      	nop
 8003904:	f7ff ffde 	bl	80038c4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	429a      	cmp	r2, r3
 8003912:	d8f7      	bhi.n	8003904 <HAL_Delay+0x28>
  {
  }
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000168 	.word	0x20000168

08003924 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e0ed      	b.n	8003b12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff fdca 	bl	80034dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0202 	bic.w	r2, r2, #2
 8003956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003958:	f7ff ffb4 	bl	80038c4 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800395e:	e012      	b.n	8003986 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003960:	f7ff ffb0 	bl	80038c4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b0a      	cmp	r3, #10
 800396c:	d90b      	bls.n	8003986 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2205      	movs	r2, #5
 800397e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e0c5      	b.n	8003b12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e5      	bne.n	8003960 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a4:	f7ff ff8e 	bl	80038c4 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039aa:	e012      	b.n	80039d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039ac:	f7ff ff8a 	bl	80038c4 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b0a      	cmp	r3, #10
 80039b8:	d90b      	bls.n	80039d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2205      	movs	r2, #5
 80039ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e09f      	b.n	8003b12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0e5      	beq.n	80039ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7e1b      	ldrb	r3, [r3, #24]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d108      	bne.n	80039fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e007      	b.n	8003a0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	7e5b      	ldrb	r3, [r3, #25]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d108      	bne.n	8003a24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e007      	b.n	8003a34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7e9b      	ldrb	r3, [r3, #26]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d108      	bne.n	8003a4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0220 	orr.w	r2, r2, #32
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e007      	b.n	8003a5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0220 	bic.w	r2, r2, #32
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	7edb      	ldrb	r3, [r3, #27]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d108      	bne.n	8003a78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0210 	bic.w	r2, r2, #16
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e007      	b.n	8003a88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0210 	orr.w	r2, r2, #16
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7f1b      	ldrb	r3, [r3, #28]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d108      	bne.n	8003aa2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0208 	orr.w	r2, r2, #8
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e007      	b.n	8003ab2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0208 	bic.w	r2, r2, #8
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	7f5b      	ldrb	r3, [r3, #29]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d108      	bne.n	8003acc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0204 	orr.w	r2, r2, #4
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	e007      	b.n	8003adc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0204 	bic.w	r2, r2, #4
 8003ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	ea42 0103 	orr.w	r1, r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	1e5a      	subs	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b087      	sub	sp, #28
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b30:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b32:	7cfb      	ldrb	r3, [r7, #19]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d003      	beq.n	8003b40 <HAL_CAN_ConfigFilter+0x26>
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	f040 80aa 	bne.w	8003c94 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2201      	movs	r2, #1
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d123      	bne.n	8003bc2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	43db      	mvns	r3, r3
 8003b84:	401a      	ands	r2, r3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3248      	adds	r2, #72	; 0x48
 8003ba2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003bb8:	6979      	ldr	r1, [r7, #20]
 8003bba:	3348      	adds	r3, #72	; 0x48
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	440b      	add	r3, r1
 8003bc0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d122      	bne.n	8003c10 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003bea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3248      	adds	r2, #72	; 0x48
 8003bf0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c06:	6979      	ldr	r1, [r7, #20]
 8003c08:	3348      	adds	r3, #72	; 0x48
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	440b      	add	r3, r1
 8003c0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	401a      	ands	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003c2a:	e007      	b.n	8003c3c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	401a      	ands	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003c56:	e007      	b.n	8003c68 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d107      	bne.n	8003c80 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c86:	f023 0201 	bic.w	r2, r3, #1
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e006      	b.n	8003ca2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
  }
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d12e      	bne.n	8003d20 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cda:	f7ff fdf3 	bl	80038c4 <HAL_GetTick>
 8003cde:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ce0:	e012      	b.n	8003d08 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ce2:	f7ff fdef 	bl	80038c4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b0a      	cmp	r3, #10
 8003cee:	d90b      	bls.n	8003d08 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2205      	movs	r2, #5
 8003d00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e012      	b.n	8003d2e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1e5      	bne.n	8003ce2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e006      	b.n	8003d2e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d133      	bne.n	8003db2 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5a:	f7ff fdb3 	bl	80038c4 <HAL_GetTick>
 8003d5e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d60:	e012      	b.n	8003d88 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d62:	f7ff fdaf 	bl	80038c4 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b0a      	cmp	r3, #10
 8003d6e:	d90b      	bls.n	8003d88 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2205      	movs	r2, #5
 8003d80:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e01b      	b.n	8003dc0 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0e5      	beq.n	8003d62 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0202 	bic.w	r2, r2, #2
 8003da4:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e006      	b.n	8003dc0 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ddc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003de6:	7ffb      	ldrb	r3, [r7, #31]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d003      	beq.n	8003df4 <HAL_CAN_AddTxMessage+0x2c>
 8003dec:	7ffb      	ldrb	r3, [r7, #31]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	f040 80b8 	bne.w	8003f64 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d105      	bne.n	8003e14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80a0 	beq.w	8003f54 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	0e1b      	lsrs	r3, r3, #24
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d907      	bls.n	8003e34 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e09e      	b.n	8003f72 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003e34:	2201      	movs	r2, #1
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e50:	68f9      	ldr	r1, [r7, #12]
 8003e52:	6809      	ldr	r1, [r1, #0]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	3318      	adds	r3, #24
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	440b      	add	r3, r1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e00f      	b.n	8003e82 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e6c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003e76:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	440b      	add	r3, r1
 8003e80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3318      	adds	r3, #24
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	440b      	add	r3, r1
 8003e92:	3304      	adds	r3, #4
 8003e94:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	7d1b      	ldrb	r3, [r3, #20]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d111      	bne.n	8003ec2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	3318      	adds	r3, #24
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	6811      	ldr	r1, [r2, #0]
 8003eb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	3318      	adds	r3, #24
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3307      	adds	r3, #7
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	061a      	lsls	r2, r3, #24
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3306      	adds	r3, #6
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	041b      	lsls	r3, r3, #16
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3305      	adds	r3, #5
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	4313      	orrs	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	3204      	adds	r2, #4
 8003ee2:	7812      	ldrb	r2, [r2, #0]
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	6811      	ldr	r1, [r2, #0]
 8003eea:	ea43 0200 	orr.w	r2, r3, r0
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	440b      	add	r3, r1
 8003ef4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003ef8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3303      	adds	r3, #3
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	061a      	lsls	r2, r3, #24
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3302      	adds	r3, #2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	021b      	lsls	r3, r3, #8
 8003f14:	4313      	orrs	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	7812      	ldrb	r2, [r2, #0]
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	6811      	ldr	r1, [r2, #0]
 8003f20:	ea43 0200 	orr.w	r2, r3, r0
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	440b      	add	r3, r1
 8003f2a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003f2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	3318      	adds	r3, #24
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	4413      	add	r3, r2
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	6811      	ldr	r1, [r2, #0]
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	3318      	adds	r3, #24
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	440b      	add	r3, r1
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e00e      	b.n	8003f72 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e006      	b.n	8003f72 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3724      	adds	r7, #36	; 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f92:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f94:	7afb      	ldrb	r3, [r7, #11]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d002      	beq.n	8003fa0 <HAL_CAN_IsTxMessagePending+0x22>
 8003f9a:	7afb      	ldrb	r3, [r7, #11]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	069b      	lsls	r3, r3, #26
 8003faa:	401a      	ands	r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	069b      	lsls	r3, r3, #26
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <__NVIC_SetPriorityGrouping+0x44>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <__NVIC_SetPriorityGrouping+0x44>)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	60d3      	str	r3, [r2, #12]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00

08004010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <__NVIC_GetPriorityGrouping+0x18>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	0a1b      	lsrs	r3, r3, #8
 800401a:	f003 0307 	and.w	r3, r3, #7
}
 800401e:	4618      	mov	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	6039      	str	r1, [r7, #0]
 8004036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403c:	2b00      	cmp	r3, #0
 800403e:	db0a      	blt.n	8004056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	b2da      	uxtb	r2, r3
 8004044:	490c      	ldr	r1, [pc, #48]	; (8004078 <__NVIC_SetPriority+0x4c>)
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	0112      	lsls	r2, r2, #4
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	440b      	add	r3, r1
 8004050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004054:	e00a      	b.n	800406c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	4908      	ldr	r1, [pc, #32]	; (800407c <__NVIC_SetPriority+0x50>)
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	3b04      	subs	r3, #4
 8004064:	0112      	lsls	r2, r2, #4
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	440b      	add	r3, r1
 800406a:	761a      	strb	r2, [r3, #24]
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	e000e100 	.word	0xe000e100
 800407c:	e000ed00 	.word	0xe000ed00

08004080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004080:	b480      	push	{r7}
 8004082:	b089      	sub	sp, #36	; 0x24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f1c3 0307 	rsb	r3, r3, #7
 800409a:	2b04      	cmp	r3, #4
 800409c:	bf28      	it	cs
 800409e:	2304      	movcs	r3, #4
 80040a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3304      	adds	r3, #4
 80040a6:	2b06      	cmp	r3, #6
 80040a8:	d902      	bls.n	80040b0 <NVIC_EncodePriority+0x30>
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3b03      	subs	r3, #3
 80040ae:	e000      	b.n	80040b2 <NVIC_EncodePriority+0x32>
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43da      	mvns	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	401a      	ands	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040c8:	f04f 31ff 	mov.w	r1, #4294967295
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	43d9      	mvns	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d8:	4313      	orrs	r3, r2
         );
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3724      	adds	r7, #36	; 0x24
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040f8:	d301      	bcc.n	80040fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040fa:	2301      	movs	r3, #1
 80040fc:	e00f      	b.n	800411e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040fe:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <SysTick_Config+0x40>)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3b01      	subs	r3, #1
 8004104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004106:	210f      	movs	r1, #15
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	f7ff ff8e 	bl	800402c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <SysTick_Config+0x40>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004116:	4b04      	ldr	r3, [pc, #16]	; (8004128 <SysTick_Config+0x40>)
 8004118:	2207      	movs	r2, #7
 800411a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	e000e010 	.word	0xe000e010

0800412c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ff47 	bl	8003fc8 <__NVIC_SetPriorityGrouping>
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	4603      	mov	r3, r0
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004154:	f7ff ff5c 	bl	8004010 <__NVIC_GetPriorityGrouping>
 8004158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f7ff ff8e 	bl	8004080 <NVIC_EncodePriority>
 8004164:	4602      	mov	r2, r0
 8004166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416a:	4611      	mov	r1, r2
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff ff5d 	bl	800402c <__NVIC_SetPriority>
}
 8004172:	bf00      	nop
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff ffb0 	bl	80040e8 <SysTick_Config>
 8004188:	4603      	mov	r3, r0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041ae:	4b2f      	ldr	r3, [pc, #188]	; (800426c <HAL_FLASH_Program+0xd8>)
 80041b0:	7e1b      	ldrb	r3, [r3, #24]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_FLASH_Program+0x26>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e054      	b.n	8004264 <HAL_FLASH_Program+0xd0>
 80041ba:	4b2c      	ldr	r3, [pc, #176]	; (800426c <HAL_FLASH_Program+0xd8>)
 80041bc:	2201      	movs	r2, #1
 80041be:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041c4:	f000 f8a8 	bl	8004318 <FLASH_WaitForLastOperation>
 80041c8:	4603      	mov	r3, r0
 80041ca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d144      	bne.n	800425c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d102      	bne.n	80041de <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80041d8:	2301      	movs	r3, #1
 80041da:	757b      	strb	r3, [r7, #21]
 80041dc:	e007      	b.n	80041ee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d102      	bne.n	80041ea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80041e4:	2302      	movs	r3, #2
 80041e6:	757b      	strb	r3, [r7, #21]
 80041e8:	e001      	b.n	80041ee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80041ea:	2304      	movs	r3, #4
 80041ec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	75bb      	strb	r3, [r7, #22]
 80041f2:	e02d      	b.n	8004250 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80041f4:	7dbb      	ldrb	r3, [r7, #22]
 80041f6:	005a      	lsls	r2, r3, #1
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	eb02 0c03 	add.w	ip, r2, r3
 80041fe:	7dbb      	ldrb	r3, [r7, #22]
 8004200:	0119      	lsls	r1, r3, #4
 8004202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004206:	f1c1 0620 	rsb	r6, r1, #32
 800420a:	f1a1 0020 	sub.w	r0, r1, #32
 800420e:	fa22 f401 	lsr.w	r4, r2, r1
 8004212:	fa03 f606 	lsl.w	r6, r3, r6
 8004216:	4334      	orrs	r4, r6
 8004218:	fa23 f000 	lsr.w	r0, r3, r0
 800421c:	4304      	orrs	r4, r0
 800421e:	fa23 f501 	lsr.w	r5, r3, r1
 8004222:	b2a3      	uxth	r3, r4
 8004224:	4619      	mov	r1, r3
 8004226:	4660      	mov	r0, ip
 8004228:	f000 f85a 	bl	80042e0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800422c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004230:	f000 f872 	bl	8004318 <FLASH_WaitForLastOperation>
 8004234:	4603      	mov	r3, r0
 8004236:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <HAL_FLASH_Program+0xdc>)
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <HAL_FLASH_Program+0xdc>)
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d107      	bne.n	800425a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800424a:	7dbb      	ldrb	r3, [r7, #22]
 800424c:	3301      	adds	r3, #1
 800424e:	75bb      	strb	r3, [r7, #22]
 8004250:	7dba      	ldrb	r2, [r7, #22]
 8004252:	7d7b      	ldrb	r3, [r7, #21]
 8004254:	429a      	cmp	r2, r3
 8004256:	d3cd      	bcc.n	80041f4 <HAL_FLASH_Program+0x60>
 8004258:	e000      	b.n	800425c <HAL_FLASH_Program+0xc8>
      {
        break;
 800425a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800425c:	4b03      	ldr	r3, [pc, #12]	; (800426c <HAL_FLASH_Program+0xd8>)
 800425e:	2200      	movs	r2, #0
 8004260:	761a      	strb	r2, [r3, #24]

  return status;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
}
 8004264:	4618      	mov	r0, r3
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800426c:	20000430 	.word	0x20000430
 8004270:	40022000 	.word	0x40022000

08004274 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <HAL_FLASH_Unlock+0x40>)
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00d      	beq.n	80042a6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <HAL_FLASH_Unlock+0x40>)
 800428c:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <HAL_FLASH_Unlock+0x44>)
 800428e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_FLASH_Unlock+0x40>)
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <HAL_FLASH_Unlock+0x48>)
 8004294:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <HAL_FLASH_Unlock+0x40>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80042a6:	79fb      	ldrb	r3, [r7, #7]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	40022000 	.word	0x40022000
 80042b8:	45670123 	.word	0x45670123
 80042bc:	cdef89ab 	.word	0xcdef89ab

080042c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_FLASH_Lock+0x1c>)
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <HAL_FLASH_Lock+0x1c>)
 80042ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40022000 	.word	0x40022000

080042e0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <FLASH_Program_HalfWord+0x30>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <FLASH_Program_HalfWord+0x34>)
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	4a07      	ldr	r2, [pc, #28]	; (8004314 <FLASH_Program_HalfWord+0x34>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	887a      	ldrh	r2, [r7, #2]
 8004302:	801a      	strh	r2, [r3, #0]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20000430 	.word	0x20000430
 8004314:	40022000 	.word	0x40022000

08004318 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004320:	f7ff fad0 	bl	80038c4 <HAL_GetTick>
 8004324:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004326:	e010      	b.n	800434a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d00c      	beq.n	800434a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <FLASH_WaitForLastOperation+0x2e>
 8004336:	f7ff fac5 	bl	80038c4 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d201      	bcs.n	800434a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e01f      	b.n	800438a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <FLASH_WaitForLastOperation+0x7c>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b01      	cmp	r3, #1
 8004354:	d0e8      	beq.n	8004328 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <FLASH_WaitForLastOperation+0x7c>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b20      	cmp	r3, #32
 8004360:	d102      	bne.n	8004368 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <FLASH_WaitForLastOperation+0x7c>)
 8004364:	2220      	movs	r2, #32
 8004366:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <FLASH_WaitForLastOperation+0x7c>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b10      	cmp	r3, #16
 8004372:	d005      	beq.n	8004380 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <FLASH_WaitForLastOperation+0x7c>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800437c:	2b04      	cmp	r3, #4
 800437e:	d103      	bne.n	8004388 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004380:	f000 f80a 	bl	8004398 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40022000 	.word	0x40022000

08004398 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80043a2:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <FLASH_SetErrorCode+0x5c>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d109      	bne.n	80043c2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80043ae:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <FLASH_SetErrorCode+0x60>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f043 0302 	orr.w	r3, r3, #2
 80043b6:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <FLASH_SetErrorCode+0x60>)
 80043b8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f043 0310 	orr.w	r3, r3, #16
 80043c0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <FLASH_SetErrorCode+0x5c>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d109      	bne.n	80043e2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <FLASH_SetErrorCode+0x60>)
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <FLASH_SetErrorCode+0x60>)
 80043d8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80043e2:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <FLASH_SetErrorCode+0x5c>)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	60d3      	str	r3, [r2, #12]
}  
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40022000 	.word	0x40022000
 80043f8:	20000430 	.word	0x20000430

080043fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800440e:	4b2e      	ldr	r3, [pc, #184]	; (80044c8 <HAL_FLASHEx_Erase+0xcc>)
 8004410:	7e1b      	ldrb	r3, [r3, #24]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_FLASHEx_Erase+0x1e>
 8004416:	2302      	movs	r3, #2
 8004418:	e052      	b.n	80044c0 <HAL_FLASHEx_Erase+0xc4>
 800441a:	4b2b      	ldr	r3, [pc, #172]	; (80044c8 <HAL_FLASHEx_Erase+0xcc>)
 800441c:	2201      	movs	r2, #1
 800441e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d115      	bne.n	8004454 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004428:	f24c 3050 	movw	r0, #50000	; 0xc350
 800442c:	f7ff ff74 	bl	8004318 <FLASH_WaitForLastOperation>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d140      	bne.n	80044b8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004436:	f000 f84b 	bl	80044d0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800443a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800443e:	f7ff ff6b 	bl	8004318 <FLASH_WaitForLastOperation>
 8004442:	4603      	mov	r3, r0
 8004444:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004446:	4b21      	ldr	r3, [pc, #132]	; (80044cc <HAL_FLASHEx_Erase+0xd0>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4a20      	ldr	r2, [pc, #128]	; (80044cc <HAL_FLASHEx_Erase+0xd0>)
 800444c:	f023 0304 	bic.w	r3, r3, #4
 8004450:	6113      	str	r3, [r2, #16]
 8004452:	e031      	b.n	80044b8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004454:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004458:	f7ff ff5e 	bl	8004318 <FLASH_WaitForLastOperation>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d12a      	bne.n	80044b8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f04f 32ff 	mov.w	r2, #4294967295
 8004468:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	e019      	b.n	80044a6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004472:	68b8      	ldr	r0, [r7, #8]
 8004474:	f000 f846 	bl	8004504 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004478:	f24c 3050 	movw	r0, #50000	; 0xc350
 800447c:	f7ff ff4c 	bl	8004318 <FLASH_WaitForLastOperation>
 8004480:	4603      	mov	r3, r0
 8004482:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <HAL_FLASHEx_Erase+0xd0>)
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	4a10      	ldr	r2, [pc, #64]	; (80044cc <HAL_FLASHEx_Erase+0xd0>)
 800448a:	f023 0302 	bic.w	r3, r3, #2
 800448e:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	601a      	str	r2, [r3, #0]
            break;
 800449c:	e00c      	b.n	80044b8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	02da      	lsls	r2, r3, #11
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d3dc      	bcc.n	8004472 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80044b8:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <HAL_FLASHEx_Erase+0xcc>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	761a      	strb	r2, [r3, #24]

  return status;
 80044be:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20000430 	.word	0x20000430
 80044cc:	40022000 	.word	0x40022000

080044d0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <FLASH_MassErase+0x2c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80044da:	4b09      	ldr	r3, [pc, #36]	; (8004500 <FLASH_MassErase+0x30>)
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <FLASH_MassErase+0x30>)
 80044e0:	f043 0304 	orr.w	r3, r3, #4
 80044e4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <FLASH_MassErase+0x30>)
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	4a05      	ldr	r2, [pc, #20]	; (8004500 <FLASH_MassErase+0x30>)
 80044ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f0:	6113      	str	r3, [r2, #16]
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20000430 	.word	0x20000430
 8004500:	40022000 	.word	0x40022000

08004504 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <FLASH_PageErase+0x38>)
 800450e:	2200      	movs	r2, #0
 8004510:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <FLASH_PageErase+0x3c>)
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <FLASH_PageErase+0x3c>)
 8004518:	f043 0302 	orr.w	r3, r3, #2
 800451c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800451e:	4a08      	ldr	r2, [pc, #32]	; (8004540 <FLASH_PageErase+0x3c>)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <FLASH_PageErase+0x3c>)
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	4a05      	ldr	r2, [pc, #20]	; (8004540 <FLASH_PageErase+0x3c>)
 800452a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800452e:	6113      	str	r3, [r2, #16]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	20000430 	.word	0x20000430
 8004540:	40022000 	.word	0x40022000

08004544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004552:	e154      	b.n	80047fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2101      	movs	r1, #1
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	4013      	ands	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8146 	beq.w	80047f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d00b      	beq.n	800458c <HAL_GPIO_Init+0x48>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d007      	beq.n	800458c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004580:	2b11      	cmp	r3, #17
 8004582:	d003      	beq.n	800458c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b12      	cmp	r3, #18
 800458a:	d130      	bne.n	80045ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	2203      	movs	r2, #3
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045c2:	2201      	movs	r2, #1
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4013      	ands	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	091b      	lsrs	r3, r3, #4
 80045d8:	f003 0201 	and.w	r2, r3, #1
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	2203      	movs	r2, #3
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d003      	beq.n	800462e <HAL_GPIO_Init+0xea>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b12      	cmp	r3, #18
 800462c:	d123      	bne.n	8004676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	08da      	lsrs	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3208      	adds	r2, #8
 8004636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800463a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	220f      	movs	r2, #15
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	08da      	lsrs	r2, r3, #3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3208      	adds	r2, #8
 8004670:	6939      	ldr	r1, [r7, #16]
 8004672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	2203      	movs	r2, #3
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4013      	ands	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0203 	and.w	r2, r3, #3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80a0 	beq.w	80047f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b8:	4b58      	ldr	r3, [pc, #352]	; (800481c <HAL_GPIO_Init+0x2d8>)
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	4a57      	ldr	r2, [pc, #348]	; (800481c <HAL_GPIO_Init+0x2d8>)
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	6193      	str	r3, [r2, #24]
 80046c4:	4b55      	ldr	r3, [pc, #340]	; (800481c <HAL_GPIO_Init+0x2d8>)
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046d0:	4a53      	ldr	r2, [pc, #332]	; (8004820 <HAL_GPIO_Init+0x2dc>)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	3302      	adds	r3, #2
 80046d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	220f      	movs	r2, #15
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046fa:	d019      	beq.n	8004730 <HAL_GPIO_Init+0x1ec>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a49      	ldr	r2, [pc, #292]	; (8004824 <HAL_GPIO_Init+0x2e0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_GPIO_Init+0x1e8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a48      	ldr	r2, [pc, #288]	; (8004828 <HAL_GPIO_Init+0x2e4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00d      	beq.n	8004728 <HAL_GPIO_Init+0x1e4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a47      	ldr	r2, [pc, #284]	; (800482c <HAL_GPIO_Init+0x2e8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <HAL_GPIO_Init+0x1e0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a46      	ldr	r2, [pc, #280]	; (8004830 <HAL_GPIO_Init+0x2ec>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <HAL_GPIO_Init+0x1dc>
 800471c:	2304      	movs	r3, #4
 800471e:	e008      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004720:	2305      	movs	r3, #5
 8004722:	e006      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004724:	2303      	movs	r3, #3
 8004726:	e004      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004728:	2302      	movs	r3, #2
 800472a:	e002      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_GPIO_Init+0x1ee>
 8004730:	2300      	movs	r3, #0
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	f002 0203 	and.w	r2, r2, #3
 8004738:	0092      	lsls	r2, r2, #2
 800473a:	4093      	lsls	r3, r2
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004742:	4937      	ldr	r1, [pc, #220]	; (8004820 <HAL_GPIO_Init+0x2dc>)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	089b      	lsrs	r3, r3, #2
 8004748:	3302      	adds	r3, #2
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004750:	4b38      	ldr	r3, [pc, #224]	; (8004834 <HAL_GPIO_Init+0x2f0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004774:	4a2f      	ldr	r2, [pc, #188]	; (8004834 <HAL_GPIO_Init+0x2f0>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800477a:	4b2e      	ldr	r3, [pc, #184]	; (8004834 <HAL_GPIO_Init+0x2f0>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800479e:	4a25      	ldr	r2, [pc, #148]	; (8004834 <HAL_GPIO_Init+0x2f0>)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047a4:	4b23      	ldr	r3, [pc, #140]	; (8004834 <HAL_GPIO_Init+0x2f0>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80047c8:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <HAL_GPIO_Init+0x2f0>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047ce:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_GPIO_Init+0x2f0>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80047f2:	4a10      	ldr	r2, [pc, #64]	; (8004834 <HAL_GPIO_Init+0x2f0>)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	3301      	adds	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	f47f aea3 	bne.w	8004554 <HAL_GPIO_Init+0x10>
  }
}
 800480e:	bf00      	nop
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40021000 	.word	0x40021000
 8004820:	40010000 	.word	0x40010000
 8004824:	48000400 	.word	0x48000400
 8004828:	48000800 	.word	0x48000800
 800482c:	48000c00 	.word	0x48000c00
 8004830:	48001000 	.word	0x48001000
 8004834:	40010400 	.word	0x40010400

08004838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	887b      	ldrh	r3, [r7, #2]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
 8004854:	e001      	b.n	800485a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	807b      	strh	r3, [r7, #2]
 8004874:	4613      	mov	r3, r2
 8004876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004878:	787b      	ldrb	r3, [r7, #1]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004884:	e002      	b.n	800488c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004886:	887a      	ldrh	r2, [r7, #2]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_PWREx_EnableSDADC+0x38>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <HAL_PWREx_EnableSDADC+0x38>)
 80048a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048aa:	61d3      	str	r3, [r2, #28]
 80048ac:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <HAL_PWREx_EnableSDADC+0x38>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_PWREx_EnableSDADC+0x3c>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4905      	ldr	r1, [pc, #20]	; (80048d4 <HAL_PWREx_EnableSDADC+0x3c>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]
}
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40007000 	.word	0x40007000

080048d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80048de:	af00      	add	r7, sp, #0
 80048e0:	1d3b      	adds	r3, r7, #4
 80048e2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d102      	bne.n	80048f2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f000 bef4 	b.w	80056da <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 816a 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004902:	4bb3      	ldr	r3, [pc, #716]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b04      	cmp	r3, #4
 800490c:	d00c      	beq.n	8004928 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800490e:	4bb0      	ldr	r3, [pc, #704]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b08      	cmp	r3, #8
 8004918:	d159      	bne.n	80049ce <HAL_RCC_OscConfig+0xf6>
 800491a:	4bad      	ldr	r3, [pc, #692]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004926:	d152      	bne.n	80049ce <HAL_RCC_OscConfig+0xf6>
 8004928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800492c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004930:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004934:	fa93 f3a3 	rbit	r3, r3
 8004938:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800493c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	fab3 f383 	clz	r3, r3
 8004944:	b2db      	uxtb	r3, r3
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b01      	cmp	r3, #1
 8004952:	d102      	bne.n	800495a <HAL_RCC_OscConfig+0x82>
 8004954:	4b9e      	ldr	r3, [pc, #632]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	e015      	b.n	8004986 <HAL_RCC_OscConfig+0xae>
 800495a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800495e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800496e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004972:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004976:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004982:	4b93      	ldr	r3, [pc, #588]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800498a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800498e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004992:	fa92 f2a2 	rbit	r2, r2
 8004996:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800499a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800499e:	fab2 f282 	clz	r2, r2
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	f042 0220 	orr.w	r2, r2, #32
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	f002 021f 	and.w	r2, r2, #31
 80049ae:	2101      	movs	r1, #1
 80049b0:	fa01 f202 	lsl.w	r2, r1, r2
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 810c 	beq.w	8004bd4 <HAL_RCC_OscConfig+0x2fc>
 80049bc:	1d3b      	adds	r3, r7, #4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 8106 	bne.w	8004bd4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f000 be86 	b.w	80056da <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCC_OscConfig+0x110>
 80049da:	4b7d      	ldr	r3, [pc, #500]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7c      	ldr	r2, [pc, #496]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e030      	b.n	8004a4a <HAL_RCC_OscConfig+0x172>
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x134>
 80049f2:	4b77      	ldr	r3, [pc, #476]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a76      	ldr	r2, [pc, #472]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 80049f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b74      	ldr	r3, [pc, #464]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a73      	ldr	r2, [pc, #460]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e01e      	b.n	8004a4a <HAL_RCC_OscConfig+0x172>
 8004a0c:	1d3b      	adds	r3, r7, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a16:	d10c      	bne.n	8004a32 <HAL_RCC_OscConfig+0x15a>
 8004a18:	4b6d      	ldr	r3, [pc, #436]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6c      	ldr	r2, [pc, #432]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	4b6a      	ldr	r3, [pc, #424]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a69      	ldr	r2, [pc, #420]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e00b      	b.n	8004a4a <HAL_RCC_OscConfig+0x172>
 8004a32:	4b67      	ldr	r3, [pc, #412]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a66      	ldr	r2, [pc, #408]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4b64      	ldr	r3, [pc, #400]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a63      	ldr	r2, [pc, #396]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a48:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a4a:	4b61      	ldr	r3, [pc, #388]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	f023 020f 	bic.w	r2, r3, #15
 8004a52:	1d3b      	adds	r3, r7, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	495d      	ldr	r1, [pc, #372]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d059      	beq.n	8004b1c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fe ff2c 	bl	80038c4 <HAL_GetTick>
 8004a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a70:	e00a      	b.n	8004a88 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a72:	f7fe ff27 	bl	80038c4 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d902      	bls.n	8004a88 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	f000 be29 	b.w	80056da <HAL_RCC_OscConfig+0xe02>
 8004a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a8c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a90:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004a94:	fa93 f3a3 	rbit	r3, r3
 8004a98:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004a9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa0:	fab3 f383 	clz	r3, r3
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d102      	bne.n	8004aba <HAL_RCC_OscConfig+0x1e2>
 8004ab4:	4b46      	ldr	r3, [pc, #280]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	e015      	b.n	8004ae6 <HAL_RCC_OscConfig+0x20e>
 8004aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004abe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004ac6:	fa93 f3a3 	rbit	r3, r3
 8004aca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ad2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004ad6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004aea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004aee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004af2:	fa92 f2a2 	rbit	r2, r2
 8004af6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004afa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004afe:	fab2 f282 	clz	r2, r2
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	f042 0220 	orr.w	r2, r2, #32
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	f002 021f 	and.w	r2, r2, #31
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f202 	lsl.w	r2, r1, r2
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0ab      	beq.n	8004a72 <HAL_RCC_OscConfig+0x19a>
 8004b1a:	e05c      	b.n	8004bd6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1c:	f7fe fed2 	bl	80038c4 <HAL_GetTick>
 8004b20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b24:	e00a      	b.n	8004b3c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b26:	f7fe fecd 	bl	80038c4 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d902      	bls.n	8004b3c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	f000 bdcf 	b.w	80056da <HAL_RCC_OscConfig+0xe02>
 8004b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b40:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b44:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004b48:	fa93 f3a3 	rbit	r3, r3
 8004b4c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004b50:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d102      	bne.n	8004b6e <HAL_RCC_OscConfig+0x296>
 8004b68:	4b19      	ldr	r3, [pc, #100]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	e015      	b.n	8004b9a <HAL_RCC_OscConfig+0x2c2>
 8004b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b72:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b76:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004b7a:	fa93 f3a3 	rbit	r3, r3
 8004b7e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b86:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004b8a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004b96:	4b0e      	ldr	r3, [pc, #56]	; (8004bd0 <HAL_RCC_OscConfig+0x2f8>)
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b9e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004ba2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004ba6:	fa92 f2a2 	rbit	r2, r2
 8004baa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004bae:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004bb2:	fab2 f282 	clz	r2, r2
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	f042 0220 	orr.w	r2, r2, #32
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	f002 021f 	and.w	r2, r2, #31
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc8:	4013      	ands	r3, r2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1ab      	bne.n	8004b26 <HAL_RCC_OscConfig+0x24e>
 8004bce:	e002      	b.n	8004bd6 <HAL_RCC_OscConfig+0x2fe>
 8004bd0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd6:	1d3b      	adds	r3, r7, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 816f 	beq.w	8004ec4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004be6:	4bd0      	ldr	r3, [pc, #832]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bf2:	4bcd      	ldr	r3, [pc, #820]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d16c      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x400>
 8004bfe:	4bca      	ldr	r3, [pc, #808]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d166      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x400>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004c14:	fa93 f3a3 	rbit	r3, r3
 8004c18:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004c1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c20:	fab3 f383 	clz	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d102      	bne.n	8004c3a <HAL_RCC_OscConfig+0x362>
 8004c34:	4bbc      	ldr	r3, [pc, #752]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	e013      	b.n	8004c62 <HAL_RCC_OscConfig+0x38a>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004c52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004c56:	fa93 f3a3 	rbit	r3, r3
 8004c5a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004c5e:	4bb2      	ldr	r3, [pc, #712]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2202      	movs	r2, #2
 8004c64:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004c68:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004c6c:	fa92 f2a2 	rbit	r2, r2
 8004c70:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004c74:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004c78:	fab2 f282 	clz	r2, r2
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	f042 0220 	orr.w	r2, r2, #32
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	f002 021f 	and.w	r2, r2, #31
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x3cc>
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d002      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f000 bd1b 	b.w	80056da <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca4:	4ba0      	ldr	r3, [pc, #640]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cac:	1d3b      	adds	r3, r7, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	21f8      	movs	r1, #248	; 0xf8
 8004cb4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004cbc:	fa91 f1a1 	rbit	r1, r1
 8004cc0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004cc4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004cc8:	fab1 f181 	clz	r1, r1
 8004ccc:	b2c9      	uxtb	r1, r1
 8004cce:	408b      	lsls	r3, r1
 8004cd0:	4995      	ldr	r1, [pc, #596]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd6:	e0f5      	b.n	8004ec4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd8:	1d3b      	adds	r3, r7, #4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8085 	beq.w	8004dee <HAL_RCC_OscConfig+0x516>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004cee:	fa93 f3a3 	rbit	r3, r3
 8004cf2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004cf6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cfa:	fab3 f383 	clz	r3, r3
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fe fdd8 	bl	80038c4 <HAL_GetTick>
 8004d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	e00a      	b.n	8004d30 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7fe fdd3 	bl	80038c4 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d902      	bls.n	8004d30 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	f000 bcd5 	b.w	80056da <HAL_RCC_OscConfig+0xe02>
 8004d30:	2302      	movs	r3, #2
 8004d32:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d36:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004d3a:	fa93 f3a3 	rbit	r3, r3
 8004d3e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004d42:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d102      	bne.n	8004d60 <HAL_RCC_OscConfig+0x488>
 8004d5a:	4b73      	ldr	r3, [pc, #460]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	e013      	b.n	8004d88 <HAL_RCC_OscConfig+0x4b0>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004d6a:	fa93 f3a3 	rbit	r3, r3
 8004d6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004d72:	2302      	movs	r3, #2
 8004d74:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d78:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d7c:	fa93 f3a3 	rbit	r3, r3
 8004d80:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004d84:	4b68      	ldr	r3, [pc, #416]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004d8e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004d92:	fa92 f2a2 	rbit	r2, r2
 8004d96:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004d9a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004d9e:	fab2 f282 	clz	r2, r2
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	f042 0220 	orr.w	r2, r2, #32
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	f002 021f 	and.w	r2, r2, #31
 8004dae:	2101      	movs	r1, #1
 8004db0:	fa01 f202 	lsl.w	r2, r1, r2
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0af      	beq.n	8004d1a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dba:	4b5b      	ldr	r3, [pc, #364]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dc2:	1d3b      	adds	r3, r7, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	21f8      	movs	r1, #248	; 0xf8
 8004dca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004dd2:	fa91 f1a1 	rbit	r1, r1
 8004dd6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004dda:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004dde:	fab1 f181 	clz	r1, r1
 8004de2:	b2c9      	uxtb	r1, r1
 8004de4:	408b      	lsls	r3, r1
 8004de6:	4950      	ldr	r1, [pc, #320]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]
 8004dec:	e06a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x5ec>
 8004dee:	2301      	movs	r3, #1
 8004df0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004df8:	fa93 f3a3 	rbit	r3, r3
 8004dfc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004e00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e04:	fab3 f383 	clz	r3, r3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	461a      	mov	r2, r3
 8004e16:	2300      	movs	r3, #0
 8004e18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1a:	f7fe fd53 	bl	80038c4 <HAL_GetTick>
 8004e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e24:	f7fe fd4e 	bl	80038c4 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d902      	bls.n	8004e3a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	f000 bc50 	b.w	80056da <HAL_RCC_OscConfig+0xe02>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e44:	fa93 f3a3 	rbit	r3, r3
 8004e48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e50:	fab3 f383 	clz	r3, r3
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d102      	bne.n	8004e6a <HAL_RCC_OscConfig+0x592>
 8004e64:	4b30      	ldr	r3, [pc, #192]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	e013      	b.n	8004e92 <HAL_RCC_OscConfig+0x5ba>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e74:	fa93 f3a3 	rbit	r3, r3
 8004e78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e8e:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <HAL_RCC_OscConfig+0x650>)
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2202      	movs	r2, #2
 8004e94:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004e98:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004e9c:	fa92 f2a2 	rbit	r2, r2
 8004ea0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004ea4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004ea8:	fab2 f282 	clz	r2, r2
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	f042 0220 	orr.w	r2, r2, #32
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	f002 021f 	and.w	r2, r2, #31
 8004eb8:	2101      	movs	r1, #1
 8004eba:	fa01 f202 	lsl.w	r2, r1, r2
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1af      	bne.n	8004e24 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ec4:	1d3b      	adds	r3, r7, #4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80da 	beq.w	8005088 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ed4:	1d3b      	adds	r3, r7, #4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d069      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x6da>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ef4:	fab3 f383 	clz	r3, r3
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_OscConfig+0x654>)
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	461a      	mov	r2, r3
 8004f04:	2301      	movs	r3, #1
 8004f06:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f08:	f7fe fcdc 	bl	80038c4 <HAL_GetTick>
 8004f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f10:	e00e      	b.n	8004f30 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f12:	f7fe fcd7 	bl	80038c4 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d906      	bls.n	8004f30 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e3d9      	b.n	80056da <HAL_RCC_OscConfig+0xe02>
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	10908120 	.word	0x10908120
 8004f30:	2302      	movs	r3, #2
 8004f32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f3a:	fa93 f3a3 	rbit	r3, r3
 8004f3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f42:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004f46:	2202      	movs	r2, #2
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	fa93 f2a3 	rbit	r2, r3
 8004f54:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004f5e:	2202      	movs	r2, #2
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	fa93 f2a3 	rbit	r2, r3
 8004f6c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004f70:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f72:	4ba5      	ldr	r3, [pc, #660]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8004f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f76:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	6019      	str	r1, [r3, #0]
 8004f7e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	fa93 f1a3 	rbit	r1, r3
 8004f88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004f8c:	6019      	str	r1, [r3, #0]
  return result;
 8004f8e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	fab3 f383 	clz	r3, r3
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0b0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x63a>
 8004fb0:	e06a      	b.n	8005088 <HAL_RCC_OscConfig+0x7b0>
 8004fb2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	fa93 f2a3 	rbit	r2, r3
 8004fc4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004fc8:	601a      	str	r2, [r3, #0]
  return result;
 8004fca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004fce:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd0:	fab3 f383 	clz	r3, r3
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4b8c      	ldr	r3, [pc, #560]	; (800520c <HAL_RCC_OscConfig+0x934>)
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe4:	f7fe fc6e 	bl	80038c4 <HAL_GetTick>
 8004fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fec:	e009      	b.n	8005002 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fee:	f7fe fc69 	bl	80038c4 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e36b      	b.n	80056da <HAL_RCC_OscConfig+0xe02>
 8005002:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005006:	2202      	movs	r2, #2
 8005008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	fa93 f2a3 	rbit	r2, r3
 8005014:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800501e:	2202      	movs	r2, #2
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	fa93 f2a3 	rbit	r2, r3
 800502c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005036:	2202      	movs	r2, #2
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	fa93 f2a3 	rbit	r2, r3
 8005044:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005048:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800504a:	4b6f      	ldr	r3, [pc, #444]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 800504c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800504e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005052:	2102      	movs	r1, #2
 8005054:	6019      	str	r1, [r3, #0]
 8005056:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	fa93 f1a3 	rbit	r1, r3
 8005060:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005064:	6019      	str	r1, [r3, #0]
  return result;
 8005066:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	fab3 f383 	clz	r3, r3
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	2101      	movs	r1, #1
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1b2      	bne.n	8004fee <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005088:	1d3b      	adds	r3, r7, #4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8158 	beq.w	8005348 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005098:	2300      	movs	r3, #0
 800509a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509e:	4b5a      	ldr	r3, [pc, #360]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d112      	bne.n	80050d0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050aa:	4b57      	ldr	r3, [pc, #348]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	4a56      	ldr	r2, [pc, #344]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 80050b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b4:	61d3      	str	r3, [r2, #28]
 80050b6:	4b54      	ldr	r3, [pc, #336]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80050be:	f107 0308 	add.w	r3, r7, #8
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f107 0308 	add.w	r3, r7, #8
 80050c8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d0:	4b4f      	ldr	r3, [pc, #316]	; (8005210 <HAL_RCC_OscConfig+0x938>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d11a      	bne.n	8005112 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050dc:	4b4c      	ldr	r3, [pc, #304]	; (8005210 <HAL_RCC_OscConfig+0x938>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a4b      	ldr	r2, [pc, #300]	; (8005210 <HAL_RCC_OscConfig+0x938>)
 80050e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050e8:	f7fe fbec 	bl	80038c4 <HAL_GetTick>
 80050ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f0:	e009      	b.n	8005106 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f2:	f7fe fbe7 	bl	80038c4 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	; 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e2e9      	b.n	80056da <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b42      	ldr	r3, [pc, #264]	; (8005210 <HAL_RCC_OscConfig+0x938>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0ef      	beq.n	80050f2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005112:	1d3b      	adds	r3, r7, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <HAL_RCC_OscConfig+0x852>
 800511c:	4b3a      	ldr	r3, [pc, #232]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	4a39      	ldr	r2, [pc, #228]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6213      	str	r3, [r2, #32]
 8005128:	e02f      	b.n	800518a <HAL_RCC_OscConfig+0x8b2>
 800512a:	1d3b      	adds	r3, r7, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10c      	bne.n	800514e <HAL_RCC_OscConfig+0x876>
 8005134:	4b34      	ldr	r3, [pc, #208]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	4a33      	ldr	r2, [pc, #204]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	6213      	str	r3, [r2, #32]
 8005140:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	4a30      	ldr	r2, [pc, #192]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8005146:	f023 0304 	bic.w	r3, r3, #4
 800514a:	6213      	str	r3, [r2, #32]
 800514c:	e01d      	b.n	800518a <HAL_RCC_OscConfig+0x8b2>
 800514e:	1d3b      	adds	r3, r7, #4
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b05      	cmp	r3, #5
 8005156:	d10c      	bne.n	8005172 <HAL_RCC_OscConfig+0x89a>
 8005158:	4b2b      	ldr	r3, [pc, #172]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 800515e:	f043 0304 	orr.w	r3, r3, #4
 8005162:	6213      	str	r3, [r2, #32]
 8005164:	4b28      	ldr	r3, [pc, #160]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	4a27      	ldr	r2, [pc, #156]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	6213      	str	r3, [r2, #32]
 8005170:	e00b      	b.n	800518a <HAL_RCC_OscConfig+0x8b2>
 8005172:	4b25      	ldr	r3, [pc, #148]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	4a24      	ldr	r2, [pc, #144]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	6213      	str	r3, [r2, #32]
 800517e:	4b22      	ldr	r3, [pc, #136]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	4a21      	ldr	r2, [pc, #132]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800518a:	1d3b      	adds	r3, r7, #4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d06b      	beq.n	800526c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005194:	f7fe fb96 	bl	80038c4 <HAL_GetTick>
 8005198:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519c:	e00b      	b.n	80051b6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fe fb91 	bl	80038c4 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e291      	b.n	80056da <HAL_RCC_OscConfig+0xe02>
 80051b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80051ba:	2202      	movs	r2, #2
 80051bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	fa93 f2a3 	rbit	r2, r3
 80051c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80051d2:	2202      	movs	r2, #2
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	fa93 f2a3 	rbit	r2, r3
 80051e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80051e4:	601a      	str	r2, [r3, #0]
  return result;
 80051e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80051ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ec:	fab3 f383 	clz	r3, r3
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	f043 0302 	orr.w	r3, r3, #2
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d109      	bne.n	8005214 <HAL_RCC_OscConfig+0x93c>
 8005200:	4b01      	ldr	r3, [pc, #4]	; (8005208 <HAL_RCC_OscConfig+0x930>)
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	e014      	b.n	8005230 <HAL_RCC_OscConfig+0x958>
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	10908120 	.word	0x10908120
 8005210:	40007000 	.word	0x40007000
 8005214:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005218:	2202      	movs	r2, #2
 800521a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	fa93 f2a3 	rbit	r2, r3
 8005226:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	4bbb      	ldr	r3, [pc, #748]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005234:	2102      	movs	r1, #2
 8005236:	6011      	str	r1, [r2, #0]
 8005238:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	fa92 f1a2 	rbit	r1, r2
 8005242:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005246:	6011      	str	r1, [r2, #0]
  return result;
 8005248:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	fab2 f282 	clz	r2, r2
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	f002 021f 	and.w	r2, r2, #31
 800525e:	2101      	movs	r1, #1
 8005260:	fa01 f202 	lsl.w	r2, r1, r2
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d099      	beq.n	800519e <HAL_RCC_OscConfig+0x8c6>
 800526a:	e063      	b.n	8005334 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800526c:	f7fe fb2a 	bl	80038c4 <HAL_GetTick>
 8005270:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005274:	e00b      	b.n	800528e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005276:	f7fe fb25 	bl	80038c4 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	; 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e225      	b.n	80056da <HAL_RCC_OscConfig+0xe02>
 800528e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005292:	2202      	movs	r2, #2
 8005294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005296:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	fa93 f2a3 	rbit	r2, r3
 80052a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80052aa:	2202      	movs	r2, #2
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	fa93 f2a3 	rbit	r2, r3
 80052b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80052bc:	601a      	str	r2, [r3, #0]
  return result;
 80052be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80052c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c4:	fab3 f383 	clz	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f043 0302 	orr.w	r3, r3, #2
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d102      	bne.n	80052de <HAL_RCC_OscConfig+0xa06>
 80052d8:	4b90      	ldr	r3, [pc, #576]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	e00d      	b.n	80052fa <HAL_RCC_OscConfig+0xa22>
 80052de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80052e2:	2202      	movs	r2, #2
 80052e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	fa93 f2a3 	rbit	r2, r3
 80052f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	4b89      	ldr	r3, [pc, #548]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80052fe:	2102      	movs	r1, #2
 8005300:	6011      	str	r1, [r2, #0]
 8005302:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	fa92 f1a2 	rbit	r1, r2
 800530c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005310:	6011      	str	r1, [r2, #0]
  return result;
 8005312:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005316:	6812      	ldr	r2, [r2, #0]
 8005318:	fab2 f282 	clz	r2, r2
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	f002 021f 	and.w	r2, r2, #31
 8005328:	2101      	movs	r1, #1
 800532a:	fa01 f202 	lsl.w	r2, r1, r2
 800532e:	4013      	ands	r3, r2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1a0      	bne.n	8005276 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005334:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005338:	2b01      	cmp	r3, #1
 800533a:	d105      	bne.n	8005348 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533c:	4b77      	ldr	r3, [pc, #476]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	4a76      	ldr	r2, [pc, #472]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 8005342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005346:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005348:	1d3b      	adds	r3, r7, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 81c2 	beq.w	80056d8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005354:	4b71      	ldr	r3, [pc, #452]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 030c 	and.w	r3, r3, #12
 800535c:	2b08      	cmp	r3, #8
 800535e:	f000 819c 	beq.w	800569a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005362:	1d3b      	adds	r3, r7, #4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	2b02      	cmp	r3, #2
 800536a:	f040 8114 	bne.w	8005596 <HAL_RCC_OscConfig+0xcbe>
 800536e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005372:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005378:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	fa93 f2a3 	rbit	r2, r3
 8005382:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005386:	601a      	str	r2, [r3, #0]
  return result;
 8005388:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800538c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538e:	fab3 f383 	clz	r3, r3
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005398:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	461a      	mov	r2, r3
 80053a0:	2300      	movs	r3, #0
 80053a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a4:	f7fe fa8e 	bl	80038c4 <HAL_GetTick>
 80053a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ac:	e009      	b.n	80053c2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ae:	f7fe fa89 	bl	80038c4 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e18b      	b.n	80056da <HAL_RCC_OscConfig+0xe02>
 80053c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80053c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	fa93 f2a3 	rbit	r2, r3
 80053d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80053da:	601a      	str	r2, [r3, #0]
  return result;
 80053dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80053e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e2:	fab3 f383 	clz	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d102      	bne.n	80053fc <HAL_RCC_OscConfig+0xb24>
 80053f6:	4b49      	ldr	r3, [pc, #292]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	e01b      	b.n	8005434 <HAL_RCC_OscConfig+0xb5c>
 80053fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	fa93 f2a3 	rbit	r2, r3
 8005410:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800541a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	fa93 f2a3 	rbit	r2, r3
 800542a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	4b3a      	ldr	r3, [pc, #232]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005438:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	fa92 f1a2 	rbit	r1, r2
 8005448:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800544c:	6011      	str	r1, [r2, #0]
  return result;
 800544e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005452:	6812      	ldr	r2, [r2, #0]
 8005454:	fab2 f282 	clz	r2, r2
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	f042 0220 	orr.w	r2, r2, #32
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	f002 021f 	and.w	r2, r2, #31
 8005464:	2101      	movs	r1, #1
 8005466:	fa01 f202 	lsl.w	r2, r1, r2
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d19e      	bne.n	80053ae <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005470:	4b2a      	ldr	r3, [pc, #168]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005478:	1d3b      	adds	r3, r7, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	430b      	orrs	r3, r1
 8005486:	4925      	ldr	r1, [pc, #148]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 8005488:	4313      	orrs	r3, r2
 800548a:	604b      	str	r3, [r1, #4]
 800548c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	fa93 f2a3 	rbit	r2, r3
 80054a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054a4:	601a      	str	r2, [r3, #0]
  return result;
 80054a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054aa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054ac:	fab3 f383 	clz	r3, r3
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	461a      	mov	r2, r3
 80054be:	2301      	movs	r3, #1
 80054c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c2:	f7fe f9ff 	bl	80038c4 <HAL_GetTick>
 80054c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054ca:	e009      	b.n	80054e0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054cc:	f7fe f9fa 	bl	80038c4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e0fc      	b.n	80056da <HAL_RCC_OscConfig+0xe02>
 80054e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	fa93 f2a3 	rbit	r2, r3
 80054f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054f8:	601a      	str	r2, [r3, #0]
  return result;
 80054fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005500:	fab3 f383 	clz	r3, r3
 8005504:	b2db      	uxtb	r3, r3
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f043 0301 	orr.w	r3, r3, #1
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d105      	bne.n	8005520 <HAL_RCC_OscConfig+0xc48>
 8005514:	4b01      	ldr	r3, [pc, #4]	; (800551c <HAL_RCC_OscConfig+0xc44>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	e01e      	b.n	8005558 <HAL_RCC_OscConfig+0xc80>
 800551a:	bf00      	nop
 800551c:	40021000 	.word	0x40021000
 8005520:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	fa93 f2a3 	rbit	r2, r3
 8005534:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800553e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	fa93 f2a3 	rbit	r2, r3
 800554e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	4b63      	ldr	r3, [pc, #396]	; (80056e4 <HAL_RCC_OscConfig+0xe0c>)
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800555c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005560:	6011      	str	r1, [r2, #0]
 8005562:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	fa92 f1a2 	rbit	r1, r2
 800556c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005570:	6011      	str	r1, [r2, #0]
  return result;
 8005572:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	fab2 f282 	clz	r2, r2
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	f042 0220 	orr.w	r2, r2, #32
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	f002 021f 	and.w	r2, r2, #31
 8005588:	2101      	movs	r1, #1
 800558a:	fa01 f202 	lsl.w	r2, r1, r2
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d09b      	beq.n	80054cc <HAL_RCC_OscConfig+0xbf4>
 8005594:	e0a0      	b.n	80056d8 <HAL_RCC_OscConfig+0xe00>
 8005596:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800559a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800559e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	fa93 f2a3 	rbit	r2, r3
 80055aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055ae:	601a      	str	r2, [r3, #0]
  return result;
 80055b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055b4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	461a      	mov	r2, r3
 80055c8:	2300      	movs	r3, #0
 80055ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055cc:	f7fe f97a 	bl	80038c4 <HAL_GetTick>
 80055d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055d4:	e009      	b.n	80055ea <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d6:	f7fe f975 	bl	80038c4 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e077      	b.n	80056da <HAL_RCC_OscConfig+0xe02>
 80055ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	fa93 f2a3 	rbit	r2, r3
 80055fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005602:	601a      	str	r2, [r3, #0]
  return result;
 8005604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005608:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800560a:	fab3 f383 	clz	r3, r3
 800560e:	b2db      	uxtb	r3, r3
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	b2db      	uxtb	r3, r3
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d102      	bne.n	8005624 <HAL_RCC_OscConfig+0xd4c>
 800561e:	4b31      	ldr	r3, [pc, #196]	; (80056e4 <HAL_RCC_OscConfig+0xe0c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	e01b      	b.n	800565c <HAL_RCC_OscConfig+0xd84>
 8005624:	f107 0320 	add.w	r3, r7, #32
 8005628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800562c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562e:	f107 0320 	add.w	r3, r7, #32
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	fa93 f2a3 	rbit	r2, r3
 8005638:	f107 031c 	add.w	r3, r7, #28
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	f107 0318 	add.w	r3, r7, #24
 8005642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	f107 0318 	add.w	r3, r7, #24
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	fa93 f2a3 	rbit	r2, r3
 8005652:	f107 0314 	add.w	r3, r7, #20
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	4b22      	ldr	r3, [pc, #136]	; (80056e4 <HAL_RCC_OscConfig+0xe0c>)
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	f107 0210 	add.w	r2, r7, #16
 8005660:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005664:	6011      	str	r1, [r2, #0]
 8005666:	f107 0210 	add.w	r2, r7, #16
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	fa92 f1a2 	rbit	r1, r2
 8005670:	f107 020c 	add.w	r2, r7, #12
 8005674:	6011      	str	r1, [r2, #0]
  return result;
 8005676:	f107 020c 	add.w	r2, r7, #12
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	fab2 f282 	clz	r2, r2
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	f042 0220 	orr.w	r2, r2, #32
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	f002 021f 	and.w	r2, r2, #31
 800568c:	2101      	movs	r1, #1
 800568e:	fa01 f202 	lsl.w	r2, r1, r2
 8005692:	4013      	ands	r3, r2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d19e      	bne.n	80055d6 <HAL_RCC_OscConfig+0xcfe>
 8005698:	e01e      	b.n	80056d8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800569a:	1d3b      	adds	r3, r7, #4
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e018      	b.n	80056da <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80056a8:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <HAL_RCC_OscConfig+0xe0c>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80056b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80056b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80056b8:	1d3b      	adds	r3, r7, #4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d108      	bne.n	80056d4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80056c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80056c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80056ca:	1d3b      	adds	r3, r7, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40021000 	.word	0x40021000

080056e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b09e      	sub	sp, #120	; 0x78
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e162      	b.n	80059c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005700:	4b90      	ldr	r3, [pc, #576]	; (8005944 <HAL_RCC_ClockConfig+0x25c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d910      	bls.n	8005730 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4b8d      	ldr	r3, [pc, #564]	; (8005944 <HAL_RCC_ClockConfig+0x25c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 0207 	bic.w	r2, r3, #7
 8005716:	498b      	ldr	r1, [pc, #556]	; (8005944 <HAL_RCC_ClockConfig+0x25c>)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b89      	ldr	r3, [pc, #548]	; (8005944 <HAL_RCC_ClockConfig+0x25c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e14a      	b.n	80059c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800573c:	4b82      	ldr	r3, [pc, #520]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	497f      	ldr	r1, [pc, #508]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 800574a:	4313      	orrs	r3, r2
 800574c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80dc 	beq.w	8005914 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d13c      	bne.n	80057de <HAL_RCC_ClockConfig+0xf6>
 8005764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005768:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800576c:	fa93 f3a3 	rbit	r3, r3
 8005770:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005774:	fab3 f383 	clz	r3, r3
 8005778:	b2db      	uxtb	r3, r3
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d102      	bne.n	800578e <HAL_RCC_ClockConfig+0xa6>
 8005788:	4b6f      	ldr	r3, [pc, #444]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	e00f      	b.n	80057ae <HAL_RCC_ClockConfig+0xc6>
 800578e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005792:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005796:	fa93 f3a3 	rbit	r3, r3
 800579a:	667b      	str	r3, [r7, #100]	; 0x64
 800579c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057a0:	663b      	str	r3, [r7, #96]	; 0x60
 80057a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a4:	fa93 f3a3 	rbit	r3, r3
 80057a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057aa:	4b67      	ldr	r3, [pc, #412]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80057b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057b6:	fa92 f2a2 	rbit	r2, r2
 80057ba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80057bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057be:	fab2 f282 	clz	r2, r2
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	f042 0220 	orr.w	r2, r2, #32
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	f002 021f 	and.w	r2, r2, #31
 80057ce:	2101      	movs	r1, #1
 80057d0:	fa01 f202 	lsl.w	r2, r1, r2
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d17b      	bne.n	80058d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e0f3      	b.n	80059c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d13c      	bne.n	8005860 <HAL_RCC_ClockConfig+0x178>
 80057e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057ea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ee:	fa93 f3a3 	rbit	r3, r3
 80057f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80057f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f6:	fab3 f383 	clz	r3, r3
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b01      	cmp	r3, #1
 8005808:	d102      	bne.n	8005810 <HAL_RCC_ClockConfig+0x128>
 800580a:	4b4f      	ldr	r3, [pc, #316]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	e00f      	b.n	8005830 <HAL_RCC_ClockConfig+0x148>
 8005810:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005818:	fa93 f3a3 	rbit	r3, r3
 800581c:	647b      	str	r3, [r7, #68]	; 0x44
 800581e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005822:	643b      	str	r3, [r7, #64]	; 0x40
 8005824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005826:	fa93 f3a3 	rbit	r3, r3
 800582a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800582c:	4b46      	ldr	r3, [pc, #280]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005834:	63ba      	str	r2, [r7, #56]	; 0x38
 8005836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005838:	fa92 f2a2 	rbit	r2, r2
 800583c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800583e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005840:	fab2 f282 	clz	r2, r2
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	f042 0220 	orr.w	r2, r2, #32
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	f002 021f 	and.w	r2, r2, #31
 8005850:	2101      	movs	r1, #1
 8005852:	fa01 f202 	lsl.w	r2, r1, r2
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d13a      	bne.n	80058d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e0b2      	b.n	80059c6 <HAL_RCC_ClockConfig+0x2de>
 8005860:	2302      	movs	r3, #2
 8005862:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	fa93 f3a3 	rbit	r3, r3
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586e:	fab3 f383 	clz	r3, r3
 8005872:	b2db      	uxtb	r3, r3
 8005874:	095b      	lsrs	r3, r3, #5
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d102      	bne.n	8005888 <HAL_RCC_ClockConfig+0x1a0>
 8005882:	4b31      	ldr	r3, [pc, #196]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	e00d      	b.n	80058a4 <HAL_RCC_ClockConfig+0x1bc>
 8005888:	2302      	movs	r3, #2
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	fa93 f3a3 	rbit	r3, r3
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
 8005894:	2302      	movs	r3, #2
 8005896:	623b      	str	r3, [r7, #32]
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	fa93 f3a3 	rbit	r3, r3
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	4b29      	ldr	r3, [pc, #164]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2202      	movs	r2, #2
 80058a6:	61ba      	str	r2, [r7, #24]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	fa92 f2a2 	rbit	r2, r2
 80058ae:	617a      	str	r2, [r7, #20]
  return result;
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	fab2 f282 	clz	r2, r2
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	f042 0220 	orr.w	r2, r2, #32
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	f002 021f 	and.w	r2, r2, #31
 80058c2:	2101      	movs	r1, #1
 80058c4:	fa01 f202 	lsl.w	r2, r1, r2
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e079      	b.n	80059c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f023 0203 	bic.w	r2, r3, #3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	491a      	ldr	r1, [pc, #104]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058e4:	f7fd ffee 	bl	80038c4 <HAL_GetTick>
 80058e8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ea:	e00a      	b.n	8005902 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ec:	f7fd ffea 	bl	80038c4 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e061      	b.n	80059c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	4b11      	ldr	r3, [pc, #68]	; (8005948 <HAL_RCC_ClockConfig+0x260>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f003 020c 	and.w	r2, r3, #12
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	429a      	cmp	r2, r3
 8005912:	d1eb      	bne.n	80058ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <HAL_RCC_ClockConfig+0x25c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d214      	bcs.n	800594c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005922:	4b08      	ldr	r3, [pc, #32]	; (8005944 <HAL_RCC_ClockConfig+0x25c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f023 0207 	bic.w	r2, r3, #7
 800592a:	4906      	ldr	r1, [pc, #24]	; (8005944 <HAL_RCC_ClockConfig+0x25c>)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	4313      	orrs	r3, r2
 8005930:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005932:	4b04      	ldr	r3, [pc, #16]	; (8005944 <HAL_RCC_ClockConfig+0x25c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d005      	beq.n	800594c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e040      	b.n	80059c6 <HAL_RCC_ClockConfig+0x2de>
 8005944:	40022000 	.word	0x40022000
 8005948:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005958:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <HAL_RCC_ClockConfig+0x2e8>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	491a      	ldr	r1, [pc, #104]	; (80059d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005966:	4313      	orrs	r3, r2
 8005968:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005976:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	4912      	ldr	r1, [pc, #72]	; (80059d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005986:	4313      	orrs	r3, r2
 8005988:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800598a:	f000 f829 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 800598e:	4601      	mov	r1, r0
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <HAL_RCC_ClockConfig+0x2e8>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005998:	22f0      	movs	r2, #240	; 0xf0
 800599a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	fa92 f2a2 	rbit	r2, r2
 80059a2:	60fa      	str	r2, [r7, #12]
  return result;
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	fab2 f282 	clz	r2, r2
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	40d3      	lsrs	r3, r2
 80059ae:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <HAL_RCC_ClockConfig+0x2ec>)
 80059b0:	5cd3      	ldrb	r3, [r2, r3]
 80059b2:	fa21 f303 	lsr.w	r3, r1, r3
 80059b6:	4a08      	ldr	r2, [pc, #32]	; (80059d8 <HAL_RCC_ClockConfig+0x2f0>)
 80059b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <HAL_RCC_ClockConfig+0x2f4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fd ff3c 	bl	800383c <HAL_InitTick>
  
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3778      	adds	r7, #120	; 0x78
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000
 80059d4:	080083e8 	.word	0x080083e8
 80059d8:	20000160 	.word	0x20000160
 80059dc:	20000164 	.word	0x20000164

080059e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b08b      	sub	sp, #44	; 0x2c
 80059e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	2300      	movs	r3, #0
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	2300      	movs	r3, #0
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80059fa:	4b29      	ldr	r3, [pc, #164]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d002      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x30>
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d003      	beq.n	8005a16 <HAL_RCC_GetSysClockFreq+0x36>
 8005a0e:	e03c      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a10:	4b24      	ldr	r3, [pc, #144]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a12:	623b      	str	r3, [r7, #32]
      break;
 8005a14:	e03c      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005a1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005a20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	fa92 f2a2 	rbit	r2, r2
 8005a28:	607a      	str	r2, [r7, #4]
  return result;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	fab2 f282 	clz	r2, r2
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	40d3      	lsrs	r3, r2
 8005a34:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a36:	5cd3      	ldrb	r3, [r2, r3]
 8005a38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005a3a:	4b19      	ldr	r3, [pc, #100]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	220f      	movs	r2, #15
 8005a44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	fa92 f2a2 	rbit	r2, r2
 8005a4c:	60fa      	str	r2, [r7, #12]
  return result;
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	fab2 f282 	clz	r2, r2
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	40d3      	lsrs	r3, r2
 8005a58:	4a14      	ldr	r2, [pc, #80]	; (8005aac <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a5a:	5cd3      	ldrb	r3, [r2, r3]
 8005a5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a68:	4a0e      	ldr	r2, [pc, #56]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
 8005a78:	e004      	b.n	8005a84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a7e:	fb02 f303 	mul.w	r3, r2, r3
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	623b      	str	r3, [r7, #32]
      break;
 8005a88:	e002      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a8a:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a8c:	623b      	str	r3, [r7, #32]
      break;
 8005a8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a90:	6a3b      	ldr	r3, [r7, #32]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	372c      	adds	r7, #44	; 0x2c
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	00f42400 	.word	0x00f42400
 8005aa8:	080083f8 	.word	0x080083f8
 8005aac:	08008408 	.word	0x08008408
 8005ab0:	003d0900 	.word	0x003d0900
 8005ab4:	007a1200 	.word	0x007a1200

08005ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b092      	sub	sp, #72	; 0x48
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80d4 	beq.w	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005adc:	4b4e      	ldr	r3, [pc, #312]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10e      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae8:	4b4b      	ldr	r3, [pc, #300]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	4a4a      	ldr	r2, [pc, #296]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af2:	61d3      	str	r3, [r2, #28]
 8005af4:	4b48      	ldr	r3, [pc, #288]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b00:	2301      	movs	r3, #1
 8005b02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b06:	4b45      	ldr	r3, [pc, #276]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d118      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b12:	4b42      	ldr	r3, [pc, #264]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a41      	ldr	r2, [pc, #260]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1e:	f7fd fed1 	bl	80038c4 <HAL_GetTick>
 8005b22:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b24:	e008      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b26:	f7fd fecd 	bl	80038c4 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b64      	cmp	r3, #100	; 0x64
 8005b32:	d901      	bls.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e12d      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b38:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b44:	4b34      	ldr	r3, [pc, #208]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8084 	beq.w	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d07c      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b64:	4b2c      	ldr	r3, [pc, #176]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	fa93 f3a3 	rbit	r3, r3
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b7e:	fab3 f383 	clz	r3, r3
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	4b26      	ldr	r3, [pc, #152]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2301      	movs	r3, #1
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	fa93 f3a3 	rbit	r3, r3
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ba2:	fab3 f383 	clz	r3, r3
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005bb6:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d04b      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc6:	f7fd fe7d 	bl	80038c4 <HAL_GetTick>
 8005bca:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bcc:	e00a      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bce:	f7fd fe79 	bl	80038c4 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e0d7      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005be4:	2302      	movs	r3, #2
 8005be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	fa93 f3a3 	rbit	r3, r3
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	623b      	str	r3, [r7, #32]
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	fa93 f3a3 	rbit	r3, r3
 8005bfa:	61fb      	str	r3, [r7, #28]
  return result;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bfe:	fab3 f383 	clz	r3, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f043 0302 	orr.w	r3, r3, #2
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d108      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005c12:	4b01      	ldr	r3, [pc, #4]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	e00d      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	40007000 	.word	0x40007000
 8005c20:	10908100 	.word	0x10908100
 8005c24:	2302      	movs	r3, #2
 8005c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	fa93 f3a3 	rbit	r3, r3
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	4b5a      	ldr	r3, [pc, #360]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2202      	movs	r2, #2
 8005c36:	613a      	str	r2, [r7, #16]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	fa92 f2a2 	rbit	r2, r2
 8005c3e:	60fa      	str	r2, [r7, #12]
  return result;
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	fab2 f282 	clz	r2, r2
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	f002 021f 	and.w	r2, r2, #31
 8005c52:	2101      	movs	r1, #1
 8005c54:	fa01 f202 	lsl.w	r2, r1, r2
 8005c58:	4013      	ands	r3, r2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0b7      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005c5e:	4b4f      	ldr	r3, [pc, #316]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	494c      	ldr	r1, [pc, #304]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d105      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c78:	4b48      	ldr	r3, [pc, #288]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	4a47      	ldr	r2, [pc, #284]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c90:	4b42      	ldr	r3, [pc, #264]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	f023 0203 	bic.w	r2, r3, #3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	493f      	ldr	r1, [pc, #252]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d008      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cae:	4b3b      	ldr	r3, [pc, #236]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	4938      	ldr	r1, [pc, #224]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ccc:	4b33      	ldr	r3, [pc, #204]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	4930      	ldr	r1, [pc, #192]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cea:	4b2c      	ldr	r3, [pc, #176]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	f023 0210 	bic.w	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	4929      	ldr	r1, [pc, #164]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005d08:	4b24      	ldr	r3, [pc, #144]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	4921      	ldr	r1, [pc, #132]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d26:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	f023 0220 	bic.w	r2, r3, #32
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	491a      	ldr	r1, [pc, #104]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005d44:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	4912      	ldr	r1, [pc, #72]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d008      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8005d62:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	490b      	ldr	r1, [pc, #44]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d008      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d80:	4b06      	ldr	r3, [pc, #24]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	4903      	ldr	r1, [pc, #12]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3748      	adds	r7, #72	; 0x48
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40021000 	.word	0x40021000

08005da0 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e073      	b.n	8005e9a <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ddc:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7fd fbb7 	bl	8003564 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8005e04:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6819      	ldr	r1, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005e2c:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6859      	ldr	r1, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8005e40:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <HAL_SDADC_Init+0x104>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d00f      	beq.n	8005e70 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8005e50:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <HAL_SDADC_Init+0x104>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a13      	ldr	r2, [pc, #76]	; (8005ea4 <HAL_SDADC_Init+0x104>)
 8005e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e5a:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8005e5c:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <HAL_SDADC_Init+0x104>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	490f      	ldr	r1, [pc, #60]	; (8005ea4 <HAL_SDADC_Init+0x104>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8005e6a:	2002      	movs	r0, #2
 8005e6c:	f7fd fd36 	bl	80038dc <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8005e80:	bf00      	nop
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1f8      	bne.n	8005e82 <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	40016000 	.word	0x40016000

08005ea8 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d002      	beq.n	8005ec8 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	75fb      	strb	r3, [r7, #23]
 8005ec6:	e025      	b.n	8005f14 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f9c2 	bl	8006252 <SDADC_EnterInitMode>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d006      	beq.n	8005ee2 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	22ff      	movs	r2, #255	; 0xff
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	75fb      	strb	r3, [r7, #23]
 8005ee0:	e018      	b.n	8005f14 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8005eec:	4413      	add	r3, r2
 8005eee:	3320      	adds	r3, #32
 8005ef0:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8005efa:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8005f00:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8005f08:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8005f0a:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8005f0c:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 f9c2 	bl	8006298 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d002      	beq.n	8005f40 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	75fb      	strb	r3, [r7, #23]
 8005f3e:	e037      	b.n	8005fb0 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 f986 	bl	8006252 <SDADC_EnterInitMode>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d006      	beq.n	8005f5a <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	22ff      	movs	r2, #255	; 0xff
 8005f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	75fb      	strb	r3, [r7, #23]
 8005f58:	e02a      	b.n	8005fb0 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d01f      	beq.n	8005fa2 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2203      	movs	r2, #3
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	43da      	mvns	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	400a      	ands	r2, r1
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	f003 031f 	and.w	r3, r3, #31
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	409a      	lsls	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40
 8005fa0:	e003      	b.n	8005faa <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	645a      	str	r2, [r3, #68]	; 0x44
      }      
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f974 	bl	8006298 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	00080100 	.word	0x00080100

08005fc0 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d02a      	beq.n	8006030 <HAL_SDADC_ConfigChannel+0x70>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe0:	2bff      	cmp	r3, #255	; 0xff
 8005fe2:	d025      	beq.n	8006030 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 8005ff2:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d10c      	bne.n	8006014 <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);    
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <HAL_SDADC_ConfigChannel+0x84>)
 8006004:	400b      	ands	r3, r1
 8006006:	431a      	orrs	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	e009      	b.n	8006028 <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));    
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	0c1b      	lsrs	r3, r3, #16
 800601e:	041b      	lsls	r3, r3, #16
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	430b      	orrs	r3, r1
 8006026:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	619a      	str	r2, [r3, #24]
 800602e:	e001      	b.n	8006034 <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
}
 8006036:	4618      	mov	r0, r3
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	ffbf0000 	.word	0xffbf0000

08006048 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d12c      	bne.n	80060ba <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f8f6 	bl	8006252 <SDADC_EnterInitMode>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d006      	beq.n	800607a <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	22ff      	movs	r2, #255	; 0xff
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	73fb      	strb	r3, [r7, #15]
 8006078:	e021      	b.n	80060be <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0206 	bic.w	r2, r2, #6
 8006088:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6859      	ldr	r1, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8fc 	bl	8006298 <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0210 	orr.w	r2, r2, #16
 80060ae:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060b8:	e001      	b.n	80060be <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d001      	beq.n	80060e0 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e028      	b.n	8006132 <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 80060e0:	f7fd fbf0 	bl	80038c4 <HAL_GetTick>
 80060e4:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 80060e6:	e010      	b.n	800610a <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d00c      	beq.n	800610a <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 80060f0:	f7fd fbe8 	bl	80038c4 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d302      	bcc.n	8006106 <HAL_SDADC_PollForCalibEvent+0x3e>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e013      	b.n	8006132 <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b01      	cmp	r3, #1
 8006116:	d1e7      	bne.n	80060e8 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 8006130:	2300      	movs	r3, #0
  }
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_SDADC_Start>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start(SDADC_HandleTypeDef *hsdadc)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d004      	beq.n	8006156 <HAL_SDADC_Start+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006152:	2b04      	cmp	r3, #4
 8006154:	d105      	bne.n	8006162 <HAL_SDADC_Start+0x28>
  {
    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f8b0 	bl	80062bc <SDADC_RegConvStart>
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]
 8006160:	e001      	b.n	8006166 <HAL_SDADC_Start+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_SDADC_PollForConversion>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForConversion(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006180:	2b03      	cmp	r3, #3
 8006182:	d006      	beq.n	8006192 <HAL_SDADC_PollForConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 800618a:	2b05      	cmp	r3, #5
 800618c:	d001      	beq.n	8006192 <HAL_SDADC_PollForConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e044      	b.n	800621c <HAL_SDADC_PollForConversion+0xac>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 8006192:	f7fd fb97 	bl	80038c4 <HAL_GetTick>
 8006196:	60f8      	str	r0, [r7, #12]

    /* Wait REOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8006198:	e010      	b.n	80061bc <HAL_SDADC_PollForConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a0:	d00c      	beq.n	80061bc <HAL_SDADC_PollForConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 80061a2:	f7fd fb8f 	bl	80038c4 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d302      	bcc.n	80061b8 <HAL_SDADC_PollForConversion+0x48>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_SDADC_PollForConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e02f      	b.n	800621c <HAL_SDADC_PollForConversion+0xac>
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d1e7      	bne.n	800619a <HAL_SDADC_PollForConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d10d      	bne.n	80061f4 <HAL_SDADC_PollForConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f82d 	bl	800623e <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRROVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0210 	orr.w	r2, r2, #16
 80061f2:	60da      	str	r2, [r3, #12]
    }
    /* Update SDADC state only if not continuous conversion and SW trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10e      	bne.n	800621a <HAL_SDADC_PollForConversion+0xaa>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <HAL_SDADC_PollForConversion+0xaa>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 800620a:	2b03      	cmp	r3, #3
 800620c:	d101      	bne.n	8006212 <HAL_SDADC_PollForConversion+0xa2>
 800620e:	2201      	movs	r2, #1
 8006210:	e000      	b.n	8006214 <HAL_SDADC_PollForConversion+0xa4>
 8006212:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Return function status */
    return HAL_OK;
 800621a:	2300      	movs	r3, #0
  }
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006268:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 800626a:	f7fd fb2b 	bl	80038c4 <HAL_GetTick>
 800626e:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8006270:	e008      	b.n	8006284 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8006272:	f7fd fb27 	bl	80038c4 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2bc8      	cmp	r3, #200	; 0xc8
 800627e:	d901      	bls.n	8006284 <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e005      	b.n	8006290 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	daf1      	bge.n	8006272 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80062ae:	601a      	str	r2, [r3, #0]
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d108      	bne.n	80062e2 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	e017      	b.n	8006312 <SDADC_RegConvStart+0x56>
  }
  else /* synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff ffb5 	bl	8006252 <SDADC_EnterInitMode>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d006      	beq.n	80062fc <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	22ff      	movs	r2, #255	; 0xff
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	73fb      	strb	r3, [r7, #15]
 80062fa:	e00a      	b.n	8006312 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800630a:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff ffc3 	bl	8006298 <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8006312:	7bfb      	ldrb	r3, [r7, #15]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <SDADC_RegConvStart+0x6a>
 8006322:	2203      	movs	r2, #3
 8006324:	e000      	b.n	8006328 <SDADC_RegConvStart+0x6c>
 8006326:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 800632e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e041      	b.n	80063ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fd f99c 	bl	800369c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3304      	adds	r3, #4
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f000 f952 	bl	8006620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d001      	beq.n	80063f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e041      	b.n	8006474 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006400:	d01d      	beq.n	800643e <HAL_TIM_Base_Start+0x66>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <HAL_TIM_Base_Start+0xa8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d018      	beq.n	800643e <HAL_TIM_Base_Start+0x66>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <HAL_TIM_Base_Start+0xac>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d013      	beq.n	800643e <HAL_TIM_Base_Start+0x66>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1b      	ldr	r2, [pc, #108]	; (8006488 <HAL_TIM_Base_Start+0xb0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00e      	beq.n	800643e <HAL_TIM_Base_Start+0x66>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a19      	ldr	r2, [pc, #100]	; (800648c <HAL_TIM_Base_Start+0xb4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d009      	beq.n	800643e <HAL_TIM_Base_Start+0x66>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a18      	ldr	r2, [pc, #96]	; (8006490 <HAL_TIM_Base_Start+0xb8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d004      	beq.n	800643e <HAL_TIM_Base_Start+0x66>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a16      	ldr	r2, [pc, #88]	; (8006494 <HAL_TIM_Base_Start+0xbc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d111      	bne.n	8006462 <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b06      	cmp	r3, #6
 800644e:	d010      	beq.n	8006472 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006460:	e007      	b.n	8006472 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00
 800648c:	40001800 	.word	0x40001800
 8006490:	40014000 	.word	0x40014000
 8006494:	40015c00 	.word	0x40015c00

08006498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIM_ConfigClockSource+0x18>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e0b3      	b.n	8006618 <HAL_TIM_ConfigClockSource+0x180>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e8:	d03e      	beq.n	8006568 <HAL_TIM_ConfigClockSource+0xd0>
 80064ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ee:	f200 8087 	bhi.w	8006600 <HAL_TIM_ConfigClockSource+0x168>
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f6:	f000 8085 	beq.w	8006604 <HAL_TIM_ConfigClockSource+0x16c>
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d87f      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006500:	2b70      	cmp	r3, #112	; 0x70
 8006502:	d01a      	beq.n	800653a <HAL_TIM_ConfigClockSource+0xa2>
 8006504:	2b70      	cmp	r3, #112	; 0x70
 8006506:	d87b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006508:	2b60      	cmp	r3, #96	; 0x60
 800650a:	d050      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x116>
 800650c:	2b60      	cmp	r3, #96	; 0x60
 800650e:	d877      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006510:	2b50      	cmp	r3, #80	; 0x50
 8006512:	d03c      	beq.n	800658e <HAL_TIM_ConfigClockSource+0xf6>
 8006514:	2b50      	cmp	r3, #80	; 0x50
 8006516:	d873      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d058      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x136>
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d86f      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006520:	2b30      	cmp	r3, #48	; 0x30
 8006522:	d064      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x156>
 8006524:	2b30      	cmp	r3, #48	; 0x30
 8006526:	d86b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006528:	2b20      	cmp	r3, #32
 800652a:	d060      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x156>
 800652c:	2b20      	cmp	r3, #32
 800652e:	d867      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d05c      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x156>
 8006534:	2b10      	cmp	r3, #16
 8006536:	d05a      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006538:	e062      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6899      	ldr	r1, [r3, #8]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f000 f97d 	bl	8006848 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800655c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	609a      	str	r2, [r3, #8]
      break;
 8006566:	e04e      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6899      	ldr	r1, [r3, #8]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f000 f966 	bl	8006848 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800658a:	609a      	str	r2, [r3, #8]
      break;
 800658c:	e03b      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	461a      	mov	r2, r3
 800659c:	f000 f8da 	bl	8006754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2150      	movs	r1, #80	; 0x50
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f933 	bl	8006812 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e02b      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6859      	ldr	r1, [r3, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f000 f8f9 	bl	80067b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2160      	movs	r1, #96	; 0x60
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f923 	bl	8006812 <TIM_ITRx_SetConfig>
      break;
 80065cc:	e01b      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6859      	ldr	r1, [r3, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	461a      	mov	r2, r3
 80065dc:	f000 f8ba 	bl	8006754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2140      	movs	r1, #64	; 0x40
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f913 	bl	8006812 <TIM_ITRx_SetConfig>
      break;
 80065ec:	e00b      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f000 f90a 	bl	8006812 <TIM_ITRx_SetConfig>
        break;
 80065fe:	e002      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006600:	bf00      	nop
 8006602:	e000      	b.n	8006606 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006604:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006636:	d00f      	beq.n	8006658 <TIM_Base_SetConfig+0x38>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a3c      	ldr	r2, [pc, #240]	; (800672c <TIM_Base_SetConfig+0x10c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00b      	beq.n	8006658 <TIM_Base_SetConfig+0x38>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a3b      	ldr	r2, [pc, #236]	; (8006730 <TIM_Base_SetConfig+0x110>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d007      	beq.n	8006658 <TIM_Base_SetConfig+0x38>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a3a      	ldr	r2, [pc, #232]	; (8006734 <TIM_Base_SetConfig+0x114>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_Base_SetConfig+0x38>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a39      	ldr	r2, [pc, #228]	; (8006738 <TIM_Base_SetConfig+0x118>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d108      	bne.n	800666a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006670:	d027      	beq.n	80066c2 <TIM_Base_SetConfig+0xa2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a2d      	ldr	r2, [pc, #180]	; (800672c <TIM_Base_SetConfig+0x10c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d023      	beq.n	80066c2 <TIM_Base_SetConfig+0xa2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a2c      	ldr	r2, [pc, #176]	; (8006730 <TIM_Base_SetConfig+0x110>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d01f      	beq.n	80066c2 <TIM_Base_SetConfig+0xa2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a2b      	ldr	r2, [pc, #172]	; (8006734 <TIM_Base_SetConfig+0x114>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d01b      	beq.n	80066c2 <TIM_Base_SetConfig+0xa2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a2b      	ldr	r2, [pc, #172]	; (800673c <TIM_Base_SetConfig+0x11c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d017      	beq.n	80066c2 <TIM_Base_SetConfig+0xa2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a2a      	ldr	r2, [pc, #168]	; (8006740 <TIM_Base_SetConfig+0x120>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <TIM_Base_SetConfig+0xa2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a29      	ldr	r2, [pc, #164]	; (8006744 <TIM_Base_SetConfig+0x124>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00f      	beq.n	80066c2 <TIM_Base_SetConfig+0xa2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a28      	ldr	r2, [pc, #160]	; (8006748 <TIM_Base_SetConfig+0x128>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00b      	beq.n	80066c2 <TIM_Base_SetConfig+0xa2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a27      	ldr	r2, [pc, #156]	; (800674c <TIM_Base_SetConfig+0x12c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d007      	beq.n	80066c2 <TIM_Base_SetConfig+0xa2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a26      	ldr	r2, [pc, #152]	; (8006750 <TIM_Base_SetConfig+0x130>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_Base_SetConfig+0xa2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <TIM_Base_SetConfig+0x118>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d108      	bne.n	80066d4 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a13      	ldr	r2, [pc, #76]	; (8006748 <TIM_Base_SetConfig+0x128>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_Base_SetConfig+0xf0>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a12      	ldr	r2, [pc, #72]	; (800674c <TIM_Base_SetConfig+0x12c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_Base_SetConfig+0xf0>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a11      	ldr	r2, [pc, #68]	; (8006750 <TIM_Base_SetConfig+0x130>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d103      	bne.n	8006718 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	615a      	str	r2, [r3, #20]
}
 800671e:	bf00      	nop
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800
 8006734:	40000c00 	.word	0x40000c00
 8006738:	40015c00 	.word	0x40015c00
 800673c:	40001800 	.word	0x40001800
 8006740:	40001c00 	.word	0x40001c00
 8006744:	40002000 	.word	0x40002000
 8006748:	40014000 	.word	0x40014000
 800674c:	40014400 	.word	0x40014400
 8006750:	40014800 	.word	0x40014800

08006754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	f023 0201 	bic.w	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800677e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f023 030a 	bic.w	r3, r3, #10
 8006790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	621a      	str	r2, [r3, #32]
}
 80067a6:	bf00      	nop
 80067a8:	371c      	adds	r7, #28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b087      	sub	sp, #28
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	f023 0210 	bic.w	r2, r3, #16
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	031b      	lsls	r3, r3, #12
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006812:	b480      	push	{r7}
 8006814:	b085      	sub	sp, #20
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	f043 0307 	orr.w	r3, r3, #7
 8006834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	609a      	str	r2, [r3, #8]
}
 800683c:	bf00      	nop
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	021a      	lsls	r2, r3, #8
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	431a      	orrs	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	4313      	orrs	r3, r2
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	609a      	str	r2, [r3, #8]
}
 800687c:	bf00      	nop
 800687e:	371c      	adds	r7, #28
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800689c:	2302      	movs	r3, #2
 800689e:	e055      	b.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e2:	d01d      	beq.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1b      	ldr	r2, [pc, #108]	; (8006958 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d018      	beq.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1a      	ldr	r2, [pc, #104]	; (800695c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d013      	beq.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a18      	ldr	r2, [pc, #96]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00e      	beq.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a17      	ldr	r2, [pc, #92]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d009      	beq.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a15      	ldr	r2, [pc, #84]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a14      	ldr	r2, [pc, #80]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d10c      	bne.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006926:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	4313      	orrs	r3, r2
 8006930:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	40000400 	.word	0x40000400
 800695c:	40000800 	.word	0x40000800
 8006960:	40000c00 	.word	0x40000c00
 8006964:	40001800 	.word	0x40001800
 8006968:	40014000 	.word	0x40014000
 800696c:	40015c00 	.word	0x40015c00

08006970 <__errno>:
 8006970:	4b01      	ldr	r3, [pc, #4]	; (8006978 <__errno+0x8>)
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	2000016c 	.word	0x2000016c

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4d0d      	ldr	r5, [pc, #52]	; (80069b4 <__libc_init_array+0x38>)
 8006980:	4c0d      	ldr	r4, [pc, #52]	; (80069b8 <__libc_init_array+0x3c>)
 8006982:	1b64      	subs	r4, r4, r5
 8006984:	10a4      	asrs	r4, r4, #2
 8006986:	2600      	movs	r6, #0
 8006988:	42a6      	cmp	r6, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	4d0b      	ldr	r5, [pc, #44]	; (80069bc <__libc_init_array+0x40>)
 800698e:	4c0c      	ldr	r4, [pc, #48]	; (80069c0 <__libc_init_array+0x44>)
 8006990:	f001 fc5c 	bl	800824c <_init>
 8006994:	1b64      	subs	r4, r4, r5
 8006996:	10a4      	asrs	r4, r4, #2
 8006998:	2600      	movs	r6, #0
 800699a:	42a6      	cmp	r6, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a4:	4798      	blx	r3
 80069a6:	3601      	adds	r6, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ae:	4798      	blx	r3
 80069b0:	3601      	adds	r6, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	08008490 	.word	0x08008490
 80069b8:	08008490 	.word	0x08008490
 80069bc:	08008490 	.word	0x08008490
 80069c0:	08008494 	.word	0x08008494

080069c4 <memset>:
 80069c4:	4402      	add	r2, r0
 80069c6:	4603      	mov	r3, r0
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d100      	bne.n	80069ce <memset+0xa>
 80069cc:	4770      	bx	lr
 80069ce:	f803 1b01 	strb.w	r1, [r3], #1
 80069d2:	e7f9      	b.n	80069c8 <memset+0x4>

080069d4 <siprintf>:
 80069d4:	b40e      	push	{r1, r2, r3}
 80069d6:	b500      	push	{lr}
 80069d8:	b09c      	sub	sp, #112	; 0x70
 80069da:	ab1d      	add	r3, sp, #116	; 0x74
 80069dc:	9002      	str	r0, [sp, #8]
 80069de:	9006      	str	r0, [sp, #24]
 80069e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069e4:	4809      	ldr	r0, [pc, #36]	; (8006a0c <siprintf+0x38>)
 80069e6:	9107      	str	r1, [sp, #28]
 80069e8:	9104      	str	r1, [sp, #16]
 80069ea:	4909      	ldr	r1, [pc, #36]	; (8006a10 <siprintf+0x3c>)
 80069ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80069f0:	9105      	str	r1, [sp, #20]
 80069f2:	6800      	ldr	r0, [r0, #0]
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	a902      	add	r1, sp, #8
 80069f8:	f000 f8c2 	bl	8006b80 <_svfiprintf_r>
 80069fc:	9b02      	ldr	r3, [sp, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	b01c      	add	sp, #112	; 0x70
 8006a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a08:	b003      	add	sp, #12
 8006a0a:	4770      	bx	lr
 8006a0c:	2000016c 	.word	0x2000016c
 8006a10:	ffff0208 	.word	0xffff0208

08006a14 <strcat>:
 8006a14:	b510      	push	{r4, lr}
 8006a16:	4602      	mov	r2, r0
 8006a18:	7814      	ldrb	r4, [r2, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	3201      	adds	r2, #1
 8006a1e:	2c00      	cmp	r4, #0
 8006a20:	d1fa      	bne.n	8006a18 <strcat+0x4>
 8006a22:	3b01      	subs	r3, #1
 8006a24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a28:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	d1f9      	bne.n	8006a24 <strcat+0x10>
 8006a30:	bd10      	pop	{r4, pc}

08006a32 <strlcat>:
 8006a32:	b570      	push	{r4, r5, r6, lr}
 8006a34:	4604      	mov	r4, r0
 8006a36:	1916      	adds	r6, r2, r4
 8006a38:	4608      	mov	r0, r1
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	42b1      	cmp	r1, r6
 8006a3e:	460b      	mov	r3, r1
 8006a40:	d106      	bne.n	8006a50 <strlcat+0x1e>
 8006a42:	1b1c      	subs	r4, r3, r4
 8006a44:	1b12      	subs	r2, r2, r4
 8006a46:	d108      	bne.n	8006a5a <strlcat+0x28>
 8006a48:	f7f9 fbc2 	bl	80001d0 <strlen>
 8006a4c:	4420      	add	r0, r4
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	781d      	ldrb	r5, [r3, #0]
 8006a52:	3101      	adds	r1, #1
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	d1f1      	bne.n	8006a3c <strlcat+0xa>
 8006a58:	e7f3      	b.n	8006a42 <strlcat+0x10>
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006a62:	b915      	cbnz	r5, 8006a6a <strlcat+0x38>
 8006a64:	701d      	strb	r5, [r3, #0]
 8006a66:	1a08      	subs	r0, r1, r0
 8006a68:	e7f0      	b.n	8006a4c <strlcat+0x1a>
 8006a6a:	2a01      	cmp	r2, #1
 8006a6c:	bf1c      	itt	ne
 8006a6e:	f803 5b01 	strbne.w	r5, [r3], #1
 8006a72:	f102 32ff 	addne.w	r2, r2, #4294967295
 8006a76:	e7f1      	b.n	8006a5c <strlcat+0x2a>

08006a78 <strlcpy>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	b162      	cbz	r2, 8006a98 <strlcpy+0x20>
 8006a7e:	3a01      	subs	r2, #1
 8006a80:	d008      	beq.n	8006a94 <strlcpy+0x1c>
 8006a82:	f813 4b01 	ldrb.w	r4, [r3], #1
 8006a86:	f800 4b01 	strb.w	r4, [r0], #1
 8006a8a:	2c00      	cmp	r4, #0
 8006a8c:	d1f7      	bne.n	8006a7e <strlcpy+0x6>
 8006a8e:	1a58      	subs	r0, r3, r1
 8006a90:	3801      	subs	r0, #1
 8006a92:	bd10      	pop	{r4, pc}
 8006a94:	2200      	movs	r2, #0
 8006a96:	7002      	strb	r2, [r0, #0]
 8006a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a9c:	2a00      	cmp	r2, #0
 8006a9e:	d1fb      	bne.n	8006a98 <strlcpy+0x20>
 8006aa0:	e7f5      	b.n	8006a8e <strlcpy+0x16>

08006aa2 <strncpy>:
 8006aa2:	b510      	push	{r4, lr}
 8006aa4:	3901      	subs	r1, #1
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	b132      	cbz	r2, 8006ab8 <strncpy+0x16>
 8006aaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006aae:	f803 4b01 	strb.w	r4, [r3], #1
 8006ab2:	3a01      	subs	r2, #1
 8006ab4:	2c00      	cmp	r4, #0
 8006ab6:	d1f7      	bne.n	8006aa8 <strncpy+0x6>
 8006ab8:	441a      	add	r2, r3
 8006aba:	2100      	movs	r1, #0
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d100      	bne.n	8006ac2 <strncpy+0x20>
 8006ac0:	bd10      	pop	{r4, pc}
 8006ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac6:	e7f9      	b.n	8006abc <strncpy+0x1a>

08006ac8 <__ssputs_r>:
 8006ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006acc:	688e      	ldr	r6, [r1, #8]
 8006ace:	429e      	cmp	r6, r3
 8006ad0:	4682      	mov	sl, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	4690      	mov	r8, r2
 8006ad6:	461f      	mov	r7, r3
 8006ad8:	d838      	bhi.n	8006b4c <__ssputs_r+0x84>
 8006ada:	898a      	ldrh	r2, [r1, #12]
 8006adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ae0:	d032      	beq.n	8006b48 <__ssputs_r+0x80>
 8006ae2:	6825      	ldr	r5, [r4, #0]
 8006ae4:	6909      	ldr	r1, [r1, #16]
 8006ae6:	eba5 0901 	sub.w	r9, r5, r1
 8006aea:	6965      	ldr	r5, [r4, #20]
 8006aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006af4:	3301      	adds	r3, #1
 8006af6:	444b      	add	r3, r9
 8006af8:	106d      	asrs	r5, r5, #1
 8006afa:	429d      	cmp	r5, r3
 8006afc:	bf38      	it	cc
 8006afe:	461d      	movcc	r5, r3
 8006b00:	0553      	lsls	r3, r2, #21
 8006b02:	d531      	bpl.n	8006b68 <__ssputs_r+0xa0>
 8006b04:	4629      	mov	r1, r5
 8006b06:	f000 fb47 	bl	8007198 <_malloc_r>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	b950      	cbnz	r0, 8006b24 <__ssputs_r+0x5c>
 8006b0e:	230c      	movs	r3, #12
 8006b10:	f8ca 3000 	str.w	r3, [sl]
 8006b14:	89a3      	ldrh	r3, [r4, #12]
 8006b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b24:	6921      	ldr	r1, [r4, #16]
 8006b26:	464a      	mov	r2, r9
 8006b28:	f000 fabe 	bl	80070a8 <memcpy>
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	6126      	str	r6, [r4, #16]
 8006b3a:	6165      	str	r5, [r4, #20]
 8006b3c:	444e      	add	r6, r9
 8006b3e:	eba5 0509 	sub.w	r5, r5, r9
 8006b42:	6026      	str	r6, [r4, #0]
 8006b44:	60a5      	str	r5, [r4, #8]
 8006b46:	463e      	mov	r6, r7
 8006b48:	42be      	cmp	r6, r7
 8006b4a:	d900      	bls.n	8006b4e <__ssputs_r+0x86>
 8006b4c:	463e      	mov	r6, r7
 8006b4e:	4632      	mov	r2, r6
 8006b50:	6820      	ldr	r0, [r4, #0]
 8006b52:	4641      	mov	r1, r8
 8006b54:	f000 fab6 	bl	80070c4 <memmove>
 8006b58:	68a3      	ldr	r3, [r4, #8]
 8006b5a:	6822      	ldr	r2, [r4, #0]
 8006b5c:	1b9b      	subs	r3, r3, r6
 8006b5e:	4432      	add	r2, r6
 8006b60:	60a3      	str	r3, [r4, #8]
 8006b62:	6022      	str	r2, [r4, #0]
 8006b64:	2000      	movs	r0, #0
 8006b66:	e7db      	b.n	8006b20 <__ssputs_r+0x58>
 8006b68:	462a      	mov	r2, r5
 8006b6a:	f000 fb6f 	bl	800724c <_realloc_r>
 8006b6e:	4606      	mov	r6, r0
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d1e1      	bne.n	8006b38 <__ssputs_r+0x70>
 8006b74:	6921      	ldr	r1, [r4, #16]
 8006b76:	4650      	mov	r0, sl
 8006b78:	f000 fabe 	bl	80070f8 <_free_r>
 8006b7c:	e7c7      	b.n	8006b0e <__ssputs_r+0x46>
	...

08006b80 <_svfiprintf_r>:
 8006b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b84:	4698      	mov	r8, r3
 8006b86:	898b      	ldrh	r3, [r1, #12]
 8006b88:	061b      	lsls	r3, r3, #24
 8006b8a:	b09d      	sub	sp, #116	; 0x74
 8006b8c:	4607      	mov	r7, r0
 8006b8e:	460d      	mov	r5, r1
 8006b90:	4614      	mov	r4, r2
 8006b92:	d50e      	bpl.n	8006bb2 <_svfiprintf_r+0x32>
 8006b94:	690b      	ldr	r3, [r1, #16]
 8006b96:	b963      	cbnz	r3, 8006bb2 <_svfiprintf_r+0x32>
 8006b98:	2140      	movs	r1, #64	; 0x40
 8006b9a:	f000 fafd 	bl	8007198 <_malloc_r>
 8006b9e:	6028      	str	r0, [r5, #0]
 8006ba0:	6128      	str	r0, [r5, #16]
 8006ba2:	b920      	cbnz	r0, 8006bae <_svfiprintf_r+0x2e>
 8006ba4:	230c      	movs	r3, #12
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bac:	e0d1      	b.n	8006d52 <_svfiprintf_r+0x1d2>
 8006bae:	2340      	movs	r3, #64	; 0x40
 8006bb0:	616b      	str	r3, [r5, #20]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb6:	2320      	movs	r3, #32
 8006bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bc0:	2330      	movs	r3, #48	; 0x30
 8006bc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d6c <_svfiprintf_r+0x1ec>
 8006bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bca:	f04f 0901 	mov.w	r9, #1
 8006bce:	4623      	mov	r3, r4
 8006bd0:	469a      	mov	sl, r3
 8006bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd6:	b10a      	cbz	r2, 8006bdc <_svfiprintf_r+0x5c>
 8006bd8:	2a25      	cmp	r2, #37	; 0x25
 8006bda:	d1f9      	bne.n	8006bd0 <_svfiprintf_r+0x50>
 8006bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8006be0:	d00b      	beq.n	8006bfa <_svfiprintf_r+0x7a>
 8006be2:	465b      	mov	r3, fp
 8006be4:	4622      	mov	r2, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	4638      	mov	r0, r7
 8006bea:	f7ff ff6d 	bl	8006ac8 <__ssputs_r>
 8006bee:	3001      	adds	r0, #1
 8006bf0:	f000 80aa 	beq.w	8006d48 <_svfiprintf_r+0x1c8>
 8006bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bf6:	445a      	add	r2, fp
 8006bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8006bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80a2 	beq.w	8006d48 <_svfiprintf_r+0x1c8>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c0e:	f10a 0a01 	add.w	sl, sl, #1
 8006c12:	9304      	str	r3, [sp, #16]
 8006c14:	9307      	str	r3, [sp, #28]
 8006c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8006c1c:	4654      	mov	r4, sl
 8006c1e:	2205      	movs	r2, #5
 8006c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c24:	4851      	ldr	r0, [pc, #324]	; (8006d6c <_svfiprintf_r+0x1ec>)
 8006c26:	f7f9 fadb 	bl	80001e0 <memchr>
 8006c2a:	9a04      	ldr	r2, [sp, #16]
 8006c2c:	b9d8      	cbnz	r0, 8006c66 <_svfiprintf_r+0xe6>
 8006c2e:	06d0      	lsls	r0, r2, #27
 8006c30:	bf44      	itt	mi
 8006c32:	2320      	movmi	r3, #32
 8006c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c38:	0711      	lsls	r1, r2, #28
 8006c3a:	bf44      	itt	mi
 8006c3c:	232b      	movmi	r3, #43	; 0x2b
 8006c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c42:	f89a 3000 	ldrb.w	r3, [sl]
 8006c46:	2b2a      	cmp	r3, #42	; 0x2a
 8006c48:	d015      	beq.n	8006c76 <_svfiprintf_r+0xf6>
 8006c4a:	9a07      	ldr	r2, [sp, #28]
 8006c4c:	4654      	mov	r4, sl
 8006c4e:	2000      	movs	r0, #0
 8006c50:	f04f 0c0a 	mov.w	ip, #10
 8006c54:	4621      	mov	r1, r4
 8006c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c5a:	3b30      	subs	r3, #48	; 0x30
 8006c5c:	2b09      	cmp	r3, #9
 8006c5e:	d94e      	bls.n	8006cfe <_svfiprintf_r+0x17e>
 8006c60:	b1b0      	cbz	r0, 8006c90 <_svfiprintf_r+0x110>
 8006c62:	9207      	str	r2, [sp, #28]
 8006c64:	e014      	b.n	8006c90 <_svfiprintf_r+0x110>
 8006c66:	eba0 0308 	sub.w	r3, r0, r8
 8006c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	9304      	str	r3, [sp, #16]
 8006c72:	46a2      	mov	sl, r4
 8006c74:	e7d2      	b.n	8006c1c <_svfiprintf_r+0x9c>
 8006c76:	9b03      	ldr	r3, [sp, #12]
 8006c78:	1d19      	adds	r1, r3, #4
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	9103      	str	r1, [sp, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	bfbb      	ittet	lt
 8006c82:	425b      	neglt	r3, r3
 8006c84:	f042 0202 	orrlt.w	r2, r2, #2
 8006c88:	9307      	strge	r3, [sp, #28]
 8006c8a:	9307      	strlt	r3, [sp, #28]
 8006c8c:	bfb8      	it	lt
 8006c8e:	9204      	strlt	r2, [sp, #16]
 8006c90:	7823      	ldrb	r3, [r4, #0]
 8006c92:	2b2e      	cmp	r3, #46	; 0x2e
 8006c94:	d10c      	bne.n	8006cb0 <_svfiprintf_r+0x130>
 8006c96:	7863      	ldrb	r3, [r4, #1]
 8006c98:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9a:	d135      	bne.n	8006d08 <_svfiprintf_r+0x188>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	1d1a      	adds	r2, r3, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	9203      	str	r2, [sp, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bfb8      	it	lt
 8006ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cac:	3402      	adds	r4, #2
 8006cae:	9305      	str	r3, [sp, #20]
 8006cb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d7c <_svfiprintf_r+0x1fc>
 8006cb4:	7821      	ldrb	r1, [r4, #0]
 8006cb6:	2203      	movs	r2, #3
 8006cb8:	4650      	mov	r0, sl
 8006cba:	f7f9 fa91 	bl	80001e0 <memchr>
 8006cbe:	b140      	cbz	r0, 8006cd2 <_svfiprintf_r+0x152>
 8006cc0:	2340      	movs	r3, #64	; 0x40
 8006cc2:	eba0 000a 	sub.w	r0, r0, sl
 8006cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	4303      	orrs	r3, r0
 8006cce:	3401      	adds	r4, #1
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd6:	4826      	ldr	r0, [pc, #152]	; (8006d70 <_svfiprintf_r+0x1f0>)
 8006cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cdc:	2206      	movs	r2, #6
 8006cde:	f7f9 fa7f 	bl	80001e0 <memchr>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d038      	beq.n	8006d58 <_svfiprintf_r+0x1d8>
 8006ce6:	4b23      	ldr	r3, [pc, #140]	; (8006d74 <_svfiprintf_r+0x1f4>)
 8006ce8:	bb1b      	cbnz	r3, 8006d32 <_svfiprintf_r+0x1b2>
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	3307      	adds	r3, #7
 8006cee:	f023 0307 	bic.w	r3, r3, #7
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	9303      	str	r3, [sp, #12]
 8006cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf8:	4433      	add	r3, r6
 8006cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfc:	e767      	b.n	8006bce <_svfiprintf_r+0x4e>
 8006cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d02:	460c      	mov	r4, r1
 8006d04:	2001      	movs	r0, #1
 8006d06:	e7a5      	b.n	8006c54 <_svfiprintf_r+0xd4>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	3401      	adds	r4, #1
 8006d0c:	9305      	str	r3, [sp, #20]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f04f 0c0a 	mov.w	ip, #10
 8006d14:	4620      	mov	r0, r4
 8006d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d1a:	3a30      	subs	r2, #48	; 0x30
 8006d1c:	2a09      	cmp	r2, #9
 8006d1e:	d903      	bls.n	8006d28 <_svfiprintf_r+0x1a8>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0c5      	beq.n	8006cb0 <_svfiprintf_r+0x130>
 8006d24:	9105      	str	r1, [sp, #20]
 8006d26:	e7c3      	b.n	8006cb0 <_svfiprintf_r+0x130>
 8006d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e7f0      	b.n	8006d14 <_svfiprintf_r+0x194>
 8006d32:	ab03      	add	r3, sp, #12
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	462a      	mov	r2, r5
 8006d38:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <_svfiprintf_r+0x1f8>)
 8006d3a:	a904      	add	r1, sp, #16
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f3af 8000 	nop.w
 8006d42:	1c42      	adds	r2, r0, #1
 8006d44:	4606      	mov	r6, r0
 8006d46:	d1d6      	bne.n	8006cf6 <_svfiprintf_r+0x176>
 8006d48:	89ab      	ldrh	r3, [r5, #12]
 8006d4a:	065b      	lsls	r3, r3, #25
 8006d4c:	f53f af2c 	bmi.w	8006ba8 <_svfiprintf_r+0x28>
 8006d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d52:	b01d      	add	sp, #116	; 0x74
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d58:	ab03      	add	r3, sp, #12
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	462a      	mov	r2, r5
 8006d5e:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <_svfiprintf_r+0x1f8>)
 8006d60:	a904      	add	r1, sp, #16
 8006d62:	4638      	mov	r0, r7
 8006d64:	f000 f87a 	bl	8006e5c <_printf_i>
 8006d68:	e7eb      	b.n	8006d42 <_svfiprintf_r+0x1c2>
 8006d6a:	bf00      	nop
 8006d6c:	08008418 	.word	0x08008418
 8006d70:	08008422 	.word	0x08008422
 8006d74:	00000000 	.word	0x00000000
 8006d78:	08006ac9 	.word	0x08006ac9
 8006d7c:	0800841e 	.word	0x0800841e

08006d80 <_printf_common>:
 8006d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	4616      	mov	r6, r2
 8006d86:	4699      	mov	r9, r3
 8006d88:	688a      	ldr	r2, [r1, #8]
 8006d8a:	690b      	ldr	r3, [r1, #16]
 8006d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d90:	4293      	cmp	r3, r2
 8006d92:	bfb8      	it	lt
 8006d94:	4613      	movlt	r3, r2
 8006d96:	6033      	str	r3, [r6, #0]
 8006d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d9c:	4607      	mov	r7, r0
 8006d9e:	460c      	mov	r4, r1
 8006da0:	b10a      	cbz	r2, 8006da6 <_printf_common+0x26>
 8006da2:	3301      	adds	r3, #1
 8006da4:	6033      	str	r3, [r6, #0]
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	0699      	lsls	r1, r3, #26
 8006daa:	bf42      	ittt	mi
 8006dac:	6833      	ldrmi	r3, [r6, #0]
 8006dae:	3302      	addmi	r3, #2
 8006db0:	6033      	strmi	r3, [r6, #0]
 8006db2:	6825      	ldr	r5, [r4, #0]
 8006db4:	f015 0506 	ands.w	r5, r5, #6
 8006db8:	d106      	bne.n	8006dc8 <_printf_common+0x48>
 8006dba:	f104 0a19 	add.w	sl, r4, #25
 8006dbe:	68e3      	ldr	r3, [r4, #12]
 8006dc0:	6832      	ldr	r2, [r6, #0]
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	dc26      	bgt.n	8006e16 <_printf_common+0x96>
 8006dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dcc:	1e13      	subs	r3, r2, #0
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	bf18      	it	ne
 8006dd2:	2301      	movne	r3, #1
 8006dd4:	0692      	lsls	r2, r2, #26
 8006dd6:	d42b      	bmi.n	8006e30 <_printf_common+0xb0>
 8006dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ddc:	4649      	mov	r1, r9
 8006dde:	4638      	mov	r0, r7
 8006de0:	47c0      	blx	r8
 8006de2:	3001      	adds	r0, #1
 8006de4:	d01e      	beq.n	8006e24 <_printf_common+0xa4>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	68e5      	ldr	r5, [r4, #12]
 8006dea:	6832      	ldr	r2, [r6, #0]
 8006dec:	f003 0306 	and.w	r3, r3, #6
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	bf08      	it	eq
 8006df4:	1aad      	subeq	r5, r5, r2
 8006df6:	68a3      	ldr	r3, [r4, #8]
 8006df8:	6922      	ldr	r2, [r4, #16]
 8006dfa:	bf0c      	ite	eq
 8006dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e00:	2500      	movne	r5, #0
 8006e02:	4293      	cmp	r3, r2
 8006e04:	bfc4      	itt	gt
 8006e06:	1a9b      	subgt	r3, r3, r2
 8006e08:	18ed      	addgt	r5, r5, r3
 8006e0a:	2600      	movs	r6, #0
 8006e0c:	341a      	adds	r4, #26
 8006e0e:	42b5      	cmp	r5, r6
 8006e10:	d11a      	bne.n	8006e48 <_printf_common+0xc8>
 8006e12:	2000      	movs	r0, #0
 8006e14:	e008      	b.n	8006e28 <_printf_common+0xa8>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4652      	mov	r2, sl
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	47c0      	blx	r8
 8006e20:	3001      	adds	r0, #1
 8006e22:	d103      	bne.n	8006e2c <_printf_common+0xac>
 8006e24:	f04f 30ff 	mov.w	r0, #4294967295
 8006e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	e7c6      	b.n	8006dbe <_printf_common+0x3e>
 8006e30:	18e1      	adds	r1, r4, r3
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	2030      	movs	r0, #48	; 0x30
 8006e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e3a:	4422      	add	r2, r4
 8006e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e44:	3302      	adds	r3, #2
 8006e46:	e7c7      	b.n	8006dd8 <_printf_common+0x58>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	4638      	mov	r0, r7
 8006e50:	47c0      	blx	r8
 8006e52:	3001      	adds	r0, #1
 8006e54:	d0e6      	beq.n	8006e24 <_printf_common+0xa4>
 8006e56:	3601      	adds	r6, #1
 8006e58:	e7d9      	b.n	8006e0e <_printf_common+0x8e>
	...

08006e5c <_printf_i>:
 8006e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	460c      	mov	r4, r1
 8006e62:	4691      	mov	r9, r2
 8006e64:	7e27      	ldrb	r7, [r4, #24]
 8006e66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e68:	2f78      	cmp	r7, #120	; 0x78
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	469a      	mov	sl, r3
 8006e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e72:	d807      	bhi.n	8006e84 <_printf_i+0x28>
 8006e74:	2f62      	cmp	r7, #98	; 0x62
 8006e76:	d80a      	bhi.n	8006e8e <_printf_i+0x32>
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	f000 80d8 	beq.w	800702e <_printf_i+0x1d2>
 8006e7e:	2f58      	cmp	r7, #88	; 0x58
 8006e80:	f000 80a3 	beq.w	8006fca <_printf_i+0x16e>
 8006e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e8c:	e03a      	b.n	8006f04 <_printf_i+0xa8>
 8006e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e92:	2b15      	cmp	r3, #21
 8006e94:	d8f6      	bhi.n	8006e84 <_printf_i+0x28>
 8006e96:	a001      	add	r0, pc, #4	; (adr r0, 8006e9c <_printf_i+0x40>)
 8006e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e9c:	08006ef5 	.word	0x08006ef5
 8006ea0:	08006f09 	.word	0x08006f09
 8006ea4:	08006e85 	.word	0x08006e85
 8006ea8:	08006e85 	.word	0x08006e85
 8006eac:	08006e85 	.word	0x08006e85
 8006eb0:	08006e85 	.word	0x08006e85
 8006eb4:	08006f09 	.word	0x08006f09
 8006eb8:	08006e85 	.word	0x08006e85
 8006ebc:	08006e85 	.word	0x08006e85
 8006ec0:	08006e85 	.word	0x08006e85
 8006ec4:	08006e85 	.word	0x08006e85
 8006ec8:	08007015 	.word	0x08007015
 8006ecc:	08006f39 	.word	0x08006f39
 8006ed0:	08006ff7 	.word	0x08006ff7
 8006ed4:	08006e85 	.word	0x08006e85
 8006ed8:	08006e85 	.word	0x08006e85
 8006edc:	08007037 	.word	0x08007037
 8006ee0:	08006e85 	.word	0x08006e85
 8006ee4:	08006f39 	.word	0x08006f39
 8006ee8:	08006e85 	.word	0x08006e85
 8006eec:	08006e85 	.word	0x08006e85
 8006ef0:	08006fff 	.word	0x08006fff
 8006ef4:	680b      	ldr	r3, [r1, #0]
 8006ef6:	1d1a      	adds	r2, r3, #4
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	600a      	str	r2, [r1, #0]
 8006efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f04:	2301      	movs	r3, #1
 8006f06:	e0a3      	b.n	8007050 <_printf_i+0x1f4>
 8006f08:	6825      	ldr	r5, [r4, #0]
 8006f0a:	6808      	ldr	r0, [r1, #0]
 8006f0c:	062e      	lsls	r6, r5, #24
 8006f0e:	f100 0304 	add.w	r3, r0, #4
 8006f12:	d50a      	bpl.n	8006f2a <_printf_i+0xce>
 8006f14:	6805      	ldr	r5, [r0, #0]
 8006f16:	600b      	str	r3, [r1, #0]
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	da03      	bge.n	8006f24 <_printf_i+0xc8>
 8006f1c:	232d      	movs	r3, #45	; 0x2d
 8006f1e:	426d      	negs	r5, r5
 8006f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f24:	485e      	ldr	r0, [pc, #376]	; (80070a0 <_printf_i+0x244>)
 8006f26:	230a      	movs	r3, #10
 8006f28:	e019      	b.n	8006f5e <_printf_i+0x102>
 8006f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f2e:	6805      	ldr	r5, [r0, #0]
 8006f30:	600b      	str	r3, [r1, #0]
 8006f32:	bf18      	it	ne
 8006f34:	b22d      	sxthne	r5, r5
 8006f36:	e7ef      	b.n	8006f18 <_printf_i+0xbc>
 8006f38:	680b      	ldr	r3, [r1, #0]
 8006f3a:	6825      	ldr	r5, [r4, #0]
 8006f3c:	1d18      	adds	r0, r3, #4
 8006f3e:	6008      	str	r0, [r1, #0]
 8006f40:	0628      	lsls	r0, r5, #24
 8006f42:	d501      	bpl.n	8006f48 <_printf_i+0xec>
 8006f44:	681d      	ldr	r5, [r3, #0]
 8006f46:	e002      	b.n	8006f4e <_printf_i+0xf2>
 8006f48:	0669      	lsls	r1, r5, #25
 8006f4a:	d5fb      	bpl.n	8006f44 <_printf_i+0xe8>
 8006f4c:	881d      	ldrh	r5, [r3, #0]
 8006f4e:	4854      	ldr	r0, [pc, #336]	; (80070a0 <_printf_i+0x244>)
 8006f50:	2f6f      	cmp	r7, #111	; 0x6f
 8006f52:	bf0c      	ite	eq
 8006f54:	2308      	moveq	r3, #8
 8006f56:	230a      	movne	r3, #10
 8006f58:	2100      	movs	r1, #0
 8006f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f5e:	6866      	ldr	r6, [r4, #4]
 8006f60:	60a6      	str	r6, [r4, #8]
 8006f62:	2e00      	cmp	r6, #0
 8006f64:	bfa2      	ittt	ge
 8006f66:	6821      	ldrge	r1, [r4, #0]
 8006f68:	f021 0104 	bicge.w	r1, r1, #4
 8006f6c:	6021      	strge	r1, [r4, #0]
 8006f6e:	b90d      	cbnz	r5, 8006f74 <_printf_i+0x118>
 8006f70:	2e00      	cmp	r6, #0
 8006f72:	d04d      	beq.n	8007010 <_printf_i+0x1b4>
 8006f74:	4616      	mov	r6, r2
 8006f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f7e:	5dc7      	ldrb	r7, [r0, r7]
 8006f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f84:	462f      	mov	r7, r5
 8006f86:	42bb      	cmp	r3, r7
 8006f88:	460d      	mov	r5, r1
 8006f8a:	d9f4      	bls.n	8006f76 <_printf_i+0x11a>
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d10b      	bne.n	8006fa8 <_printf_i+0x14c>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	07df      	lsls	r7, r3, #31
 8006f94:	d508      	bpl.n	8006fa8 <_printf_i+0x14c>
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	6861      	ldr	r1, [r4, #4]
 8006f9a:	4299      	cmp	r1, r3
 8006f9c:	bfde      	ittt	le
 8006f9e:	2330      	movle	r3, #48	; 0x30
 8006fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fa8:	1b92      	subs	r2, r2, r6
 8006faa:	6122      	str	r2, [r4, #16]
 8006fac:	f8cd a000 	str.w	sl, [sp]
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	aa03      	add	r2, sp, #12
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	f7ff fee2 	bl	8006d80 <_printf_common>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d14c      	bne.n	800705a <_printf_i+0x1fe>
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	b004      	add	sp, #16
 8006fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fca:	4835      	ldr	r0, [pc, #212]	; (80070a0 <_printf_i+0x244>)
 8006fcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	680e      	ldr	r6, [r1, #0]
 8006fd4:	061f      	lsls	r7, r3, #24
 8006fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006fda:	600e      	str	r6, [r1, #0]
 8006fdc:	d514      	bpl.n	8007008 <_printf_i+0x1ac>
 8006fde:	07d9      	lsls	r1, r3, #31
 8006fe0:	bf44      	itt	mi
 8006fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8006fe6:	6023      	strmi	r3, [r4, #0]
 8006fe8:	b91d      	cbnz	r5, 8006ff2 <_printf_i+0x196>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	f023 0320 	bic.w	r3, r3, #32
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	2310      	movs	r3, #16
 8006ff4:	e7b0      	b.n	8006f58 <_printf_i+0xfc>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	f043 0320 	orr.w	r3, r3, #32
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	2378      	movs	r3, #120	; 0x78
 8007000:	4828      	ldr	r0, [pc, #160]	; (80070a4 <_printf_i+0x248>)
 8007002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007006:	e7e3      	b.n	8006fd0 <_printf_i+0x174>
 8007008:	065e      	lsls	r6, r3, #25
 800700a:	bf48      	it	mi
 800700c:	b2ad      	uxthmi	r5, r5
 800700e:	e7e6      	b.n	8006fde <_printf_i+0x182>
 8007010:	4616      	mov	r6, r2
 8007012:	e7bb      	b.n	8006f8c <_printf_i+0x130>
 8007014:	680b      	ldr	r3, [r1, #0]
 8007016:	6826      	ldr	r6, [r4, #0]
 8007018:	6960      	ldr	r0, [r4, #20]
 800701a:	1d1d      	adds	r5, r3, #4
 800701c:	600d      	str	r5, [r1, #0]
 800701e:	0635      	lsls	r5, r6, #24
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	d501      	bpl.n	8007028 <_printf_i+0x1cc>
 8007024:	6018      	str	r0, [r3, #0]
 8007026:	e002      	b.n	800702e <_printf_i+0x1d2>
 8007028:	0671      	lsls	r1, r6, #25
 800702a:	d5fb      	bpl.n	8007024 <_printf_i+0x1c8>
 800702c:	8018      	strh	r0, [r3, #0]
 800702e:	2300      	movs	r3, #0
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	4616      	mov	r6, r2
 8007034:	e7ba      	b.n	8006fac <_printf_i+0x150>
 8007036:	680b      	ldr	r3, [r1, #0]
 8007038:	1d1a      	adds	r2, r3, #4
 800703a:	600a      	str	r2, [r1, #0]
 800703c:	681e      	ldr	r6, [r3, #0]
 800703e:	6862      	ldr	r2, [r4, #4]
 8007040:	2100      	movs	r1, #0
 8007042:	4630      	mov	r0, r6
 8007044:	f7f9 f8cc 	bl	80001e0 <memchr>
 8007048:	b108      	cbz	r0, 800704e <_printf_i+0x1f2>
 800704a:	1b80      	subs	r0, r0, r6
 800704c:	6060      	str	r0, [r4, #4]
 800704e:	6863      	ldr	r3, [r4, #4]
 8007050:	6123      	str	r3, [r4, #16]
 8007052:	2300      	movs	r3, #0
 8007054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007058:	e7a8      	b.n	8006fac <_printf_i+0x150>
 800705a:	6923      	ldr	r3, [r4, #16]
 800705c:	4632      	mov	r2, r6
 800705e:	4649      	mov	r1, r9
 8007060:	4640      	mov	r0, r8
 8007062:	47d0      	blx	sl
 8007064:	3001      	adds	r0, #1
 8007066:	d0ab      	beq.n	8006fc0 <_printf_i+0x164>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	079b      	lsls	r3, r3, #30
 800706c:	d413      	bmi.n	8007096 <_printf_i+0x23a>
 800706e:	68e0      	ldr	r0, [r4, #12]
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	4298      	cmp	r0, r3
 8007074:	bfb8      	it	lt
 8007076:	4618      	movlt	r0, r3
 8007078:	e7a4      	b.n	8006fc4 <_printf_i+0x168>
 800707a:	2301      	movs	r3, #1
 800707c:	4632      	mov	r2, r6
 800707e:	4649      	mov	r1, r9
 8007080:	4640      	mov	r0, r8
 8007082:	47d0      	blx	sl
 8007084:	3001      	adds	r0, #1
 8007086:	d09b      	beq.n	8006fc0 <_printf_i+0x164>
 8007088:	3501      	adds	r5, #1
 800708a:	68e3      	ldr	r3, [r4, #12]
 800708c:	9903      	ldr	r1, [sp, #12]
 800708e:	1a5b      	subs	r3, r3, r1
 8007090:	42ab      	cmp	r3, r5
 8007092:	dcf2      	bgt.n	800707a <_printf_i+0x21e>
 8007094:	e7eb      	b.n	800706e <_printf_i+0x212>
 8007096:	2500      	movs	r5, #0
 8007098:	f104 0619 	add.w	r6, r4, #25
 800709c:	e7f5      	b.n	800708a <_printf_i+0x22e>
 800709e:	bf00      	nop
 80070a0:	08008429 	.word	0x08008429
 80070a4:	0800843a 	.word	0x0800843a

080070a8 <memcpy>:
 80070a8:	440a      	add	r2, r1
 80070aa:	4291      	cmp	r1, r2
 80070ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80070b0:	d100      	bne.n	80070b4 <memcpy+0xc>
 80070b2:	4770      	bx	lr
 80070b4:	b510      	push	{r4, lr}
 80070b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070be:	4291      	cmp	r1, r2
 80070c0:	d1f9      	bne.n	80070b6 <memcpy+0xe>
 80070c2:	bd10      	pop	{r4, pc}

080070c4 <memmove>:
 80070c4:	4288      	cmp	r0, r1
 80070c6:	b510      	push	{r4, lr}
 80070c8:	eb01 0402 	add.w	r4, r1, r2
 80070cc:	d902      	bls.n	80070d4 <memmove+0x10>
 80070ce:	4284      	cmp	r4, r0
 80070d0:	4623      	mov	r3, r4
 80070d2:	d807      	bhi.n	80070e4 <memmove+0x20>
 80070d4:	1e43      	subs	r3, r0, #1
 80070d6:	42a1      	cmp	r1, r4
 80070d8:	d008      	beq.n	80070ec <memmove+0x28>
 80070da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070e2:	e7f8      	b.n	80070d6 <memmove+0x12>
 80070e4:	4402      	add	r2, r0
 80070e6:	4601      	mov	r1, r0
 80070e8:	428a      	cmp	r2, r1
 80070ea:	d100      	bne.n	80070ee <memmove+0x2a>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070f6:	e7f7      	b.n	80070e8 <memmove+0x24>

080070f8 <_free_r>:
 80070f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070fa:	2900      	cmp	r1, #0
 80070fc:	d048      	beq.n	8007190 <_free_r+0x98>
 80070fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007102:	9001      	str	r0, [sp, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f1a1 0404 	sub.w	r4, r1, #4
 800710a:	bfb8      	it	lt
 800710c:	18e4      	addlt	r4, r4, r3
 800710e:	f000 f8d3 	bl	80072b8 <__malloc_lock>
 8007112:	4a20      	ldr	r2, [pc, #128]	; (8007194 <_free_r+0x9c>)
 8007114:	9801      	ldr	r0, [sp, #4]
 8007116:	6813      	ldr	r3, [r2, #0]
 8007118:	4615      	mov	r5, r2
 800711a:	b933      	cbnz	r3, 800712a <_free_r+0x32>
 800711c:	6063      	str	r3, [r4, #4]
 800711e:	6014      	str	r4, [r2, #0]
 8007120:	b003      	add	sp, #12
 8007122:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007126:	f000 b8cd 	b.w	80072c4 <__malloc_unlock>
 800712a:	42a3      	cmp	r3, r4
 800712c:	d90b      	bls.n	8007146 <_free_r+0x4e>
 800712e:	6821      	ldr	r1, [r4, #0]
 8007130:	1862      	adds	r2, r4, r1
 8007132:	4293      	cmp	r3, r2
 8007134:	bf04      	itt	eq
 8007136:	681a      	ldreq	r2, [r3, #0]
 8007138:	685b      	ldreq	r3, [r3, #4]
 800713a:	6063      	str	r3, [r4, #4]
 800713c:	bf04      	itt	eq
 800713e:	1852      	addeq	r2, r2, r1
 8007140:	6022      	streq	r2, [r4, #0]
 8007142:	602c      	str	r4, [r5, #0]
 8007144:	e7ec      	b.n	8007120 <_free_r+0x28>
 8007146:	461a      	mov	r2, r3
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	b10b      	cbz	r3, 8007150 <_free_r+0x58>
 800714c:	42a3      	cmp	r3, r4
 800714e:	d9fa      	bls.n	8007146 <_free_r+0x4e>
 8007150:	6811      	ldr	r1, [r2, #0]
 8007152:	1855      	adds	r5, r2, r1
 8007154:	42a5      	cmp	r5, r4
 8007156:	d10b      	bne.n	8007170 <_free_r+0x78>
 8007158:	6824      	ldr	r4, [r4, #0]
 800715a:	4421      	add	r1, r4
 800715c:	1854      	adds	r4, r2, r1
 800715e:	42a3      	cmp	r3, r4
 8007160:	6011      	str	r1, [r2, #0]
 8007162:	d1dd      	bne.n	8007120 <_free_r+0x28>
 8007164:	681c      	ldr	r4, [r3, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	6053      	str	r3, [r2, #4]
 800716a:	4421      	add	r1, r4
 800716c:	6011      	str	r1, [r2, #0]
 800716e:	e7d7      	b.n	8007120 <_free_r+0x28>
 8007170:	d902      	bls.n	8007178 <_free_r+0x80>
 8007172:	230c      	movs	r3, #12
 8007174:	6003      	str	r3, [r0, #0]
 8007176:	e7d3      	b.n	8007120 <_free_r+0x28>
 8007178:	6825      	ldr	r5, [r4, #0]
 800717a:	1961      	adds	r1, r4, r5
 800717c:	428b      	cmp	r3, r1
 800717e:	bf04      	itt	eq
 8007180:	6819      	ldreq	r1, [r3, #0]
 8007182:	685b      	ldreq	r3, [r3, #4]
 8007184:	6063      	str	r3, [r4, #4]
 8007186:	bf04      	itt	eq
 8007188:	1949      	addeq	r1, r1, r5
 800718a:	6021      	streq	r1, [r4, #0]
 800718c:	6054      	str	r4, [r2, #4]
 800718e:	e7c7      	b.n	8007120 <_free_r+0x28>
 8007190:	b003      	add	sp, #12
 8007192:	bd30      	pop	{r4, r5, pc}
 8007194:	2000020c 	.word	0x2000020c

08007198 <_malloc_r>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	1ccd      	adds	r5, r1, #3
 800719c:	f025 0503 	bic.w	r5, r5, #3
 80071a0:	3508      	adds	r5, #8
 80071a2:	2d0c      	cmp	r5, #12
 80071a4:	bf38      	it	cc
 80071a6:	250c      	movcc	r5, #12
 80071a8:	2d00      	cmp	r5, #0
 80071aa:	4606      	mov	r6, r0
 80071ac:	db01      	blt.n	80071b2 <_malloc_r+0x1a>
 80071ae:	42a9      	cmp	r1, r5
 80071b0:	d903      	bls.n	80071ba <_malloc_r+0x22>
 80071b2:	230c      	movs	r3, #12
 80071b4:	6033      	str	r3, [r6, #0]
 80071b6:	2000      	movs	r0, #0
 80071b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ba:	f000 f87d 	bl	80072b8 <__malloc_lock>
 80071be:	4921      	ldr	r1, [pc, #132]	; (8007244 <_malloc_r+0xac>)
 80071c0:	680a      	ldr	r2, [r1, #0]
 80071c2:	4614      	mov	r4, r2
 80071c4:	b99c      	cbnz	r4, 80071ee <_malloc_r+0x56>
 80071c6:	4f20      	ldr	r7, [pc, #128]	; (8007248 <_malloc_r+0xb0>)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	b923      	cbnz	r3, 80071d6 <_malloc_r+0x3e>
 80071cc:	4621      	mov	r1, r4
 80071ce:	4630      	mov	r0, r6
 80071d0:	f000 f862 	bl	8007298 <_sbrk_r>
 80071d4:	6038      	str	r0, [r7, #0]
 80071d6:	4629      	mov	r1, r5
 80071d8:	4630      	mov	r0, r6
 80071da:	f000 f85d 	bl	8007298 <_sbrk_r>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	d123      	bne.n	800722a <_malloc_r+0x92>
 80071e2:	230c      	movs	r3, #12
 80071e4:	6033      	str	r3, [r6, #0]
 80071e6:	4630      	mov	r0, r6
 80071e8:	f000 f86c 	bl	80072c4 <__malloc_unlock>
 80071ec:	e7e3      	b.n	80071b6 <_malloc_r+0x1e>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	1b5b      	subs	r3, r3, r5
 80071f2:	d417      	bmi.n	8007224 <_malloc_r+0x8c>
 80071f4:	2b0b      	cmp	r3, #11
 80071f6:	d903      	bls.n	8007200 <_malloc_r+0x68>
 80071f8:	6023      	str	r3, [r4, #0]
 80071fa:	441c      	add	r4, r3
 80071fc:	6025      	str	r5, [r4, #0]
 80071fe:	e004      	b.n	800720a <_malloc_r+0x72>
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	42a2      	cmp	r2, r4
 8007204:	bf0c      	ite	eq
 8007206:	600b      	streq	r3, [r1, #0]
 8007208:	6053      	strne	r3, [r2, #4]
 800720a:	4630      	mov	r0, r6
 800720c:	f000 f85a 	bl	80072c4 <__malloc_unlock>
 8007210:	f104 000b 	add.w	r0, r4, #11
 8007214:	1d23      	adds	r3, r4, #4
 8007216:	f020 0007 	bic.w	r0, r0, #7
 800721a:	1ac2      	subs	r2, r0, r3
 800721c:	d0cc      	beq.n	80071b8 <_malloc_r+0x20>
 800721e:	1a1b      	subs	r3, r3, r0
 8007220:	50a3      	str	r3, [r4, r2]
 8007222:	e7c9      	b.n	80071b8 <_malloc_r+0x20>
 8007224:	4622      	mov	r2, r4
 8007226:	6864      	ldr	r4, [r4, #4]
 8007228:	e7cc      	b.n	80071c4 <_malloc_r+0x2c>
 800722a:	1cc4      	adds	r4, r0, #3
 800722c:	f024 0403 	bic.w	r4, r4, #3
 8007230:	42a0      	cmp	r0, r4
 8007232:	d0e3      	beq.n	80071fc <_malloc_r+0x64>
 8007234:	1a21      	subs	r1, r4, r0
 8007236:	4630      	mov	r0, r6
 8007238:	f000 f82e 	bl	8007298 <_sbrk_r>
 800723c:	3001      	adds	r0, #1
 800723e:	d1dd      	bne.n	80071fc <_malloc_r+0x64>
 8007240:	e7cf      	b.n	80071e2 <_malloc_r+0x4a>
 8007242:	bf00      	nop
 8007244:	2000020c 	.word	0x2000020c
 8007248:	20000210 	.word	0x20000210

0800724c <_realloc_r>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	4607      	mov	r7, r0
 8007250:	4614      	mov	r4, r2
 8007252:	460e      	mov	r6, r1
 8007254:	b921      	cbnz	r1, 8007260 <_realloc_r+0x14>
 8007256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800725a:	4611      	mov	r1, r2
 800725c:	f7ff bf9c 	b.w	8007198 <_malloc_r>
 8007260:	b922      	cbnz	r2, 800726c <_realloc_r+0x20>
 8007262:	f7ff ff49 	bl	80070f8 <_free_r>
 8007266:	4625      	mov	r5, r4
 8007268:	4628      	mov	r0, r5
 800726a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800726c:	f000 f830 	bl	80072d0 <_malloc_usable_size_r>
 8007270:	42a0      	cmp	r0, r4
 8007272:	d20f      	bcs.n	8007294 <_realloc_r+0x48>
 8007274:	4621      	mov	r1, r4
 8007276:	4638      	mov	r0, r7
 8007278:	f7ff ff8e 	bl	8007198 <_malloc_r>
 800727c:	4605      	mov	r5, r0
 800727e:	2800      	cmp	r0, #0
 8007280:	d0f2      	beq.n	8007268 <_realloc_r+0x1c>
 8007282:	4631      	mov	r1, r6
 8007284:	4622      	mov	r2, r4
 8007286:	f7ff ff0f 	bl	80070a8 <memcpy>
 800728a:	4631      	mov	r1, r6
 800728c:	4638      	mov	r0, r7
 800728e:	f7ff ff33 	bl	80070f8 <_free_r>
 8007292:	e7e9      	b.n	8007268 <_realloc_r+0x1c>
 8007294:	4635      	mov	r5, r6
 8007296:	e7e7      	b.n	8007268 <_realloc_r+0x1c>

08007298 <_sbrk_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d06      	ldr	r5, [pc, #24]	; (80072b4 <_sbrk_r+0x1c>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	f7fc fa42 	bl	800372c <_sbrk>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_sbrk_r+0x1a>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_sbrk_r+0x1a>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	20000450 	.word	0x20000450

080072b8 <__malloc_lock>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__malloc_lock+0x8>)
 80072ba:	f000 b811 	b.w	80072e0 <__retarget_lock_acquire_recursive>
 80072be:	bf00      	nop
 80072c0:	20000458 	.word	0x20000458

080072c4 <__malloc_unlock>:
 80072c4:	4801      	ldr	r0, [pc, #4]	; (80072cc <__malloc_unlock+0x8>)
 80072c6:	f000 b80c 	b.w	80072e2 <__retarget_lock_release_recursive>
 80072ca:	bf00      	nop
 80072cc:	20000458 	.word	0x20000458

080072d0 <_malloc_usable_size_r>:
 80072d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d4:	1f18      	subs	r0, r3, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfbc      	itt	lt
 80072da:	580b      	ldrlt	r3, [r1, r0]
 80072dc:	18c0      	addlt	r0, r0, r3
 80072de:	4770      	bx	lr

080072e0 <__retarget_lock_acquire_recursive>:
 80072e0:	4770      	bx	lr

080072e2 <__retarget_lock_release_recursive>:
 80072e2:	4770      	bx	lr

080072e4 <pow>:
 80072e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e8:	ec59 8b10 	vmov	r8, r9, d0
 80072ec:	ec57 6b11 	vmov	r6, r7, d1
 80072f0:	f000 f8a6 	bl	8007440 <__ieee754_pow>
 80072f4:	4b4e      	ldr	r3, [pc, #312]	; (8007430 <pow+0x14c>)
 80072f6:	f993 3000 	ldrsb.w	r3, [r3]
 80072fa:	3301      	adds	r3, #1
 80072fc:	ec55 4b10 	vmov	r4, r5, d0
 8007300:	d015      	beq.n	800732e <pow+0x4a>
 8007302:	4632      	mov	r2, r6
 8007304:	463b      	mov	r3, r7
 8007306:	4630      	mov	r0, r6
 8007308:	4639      	mov	r1, r7
 800730a:	f7f9 fc0f 	bl	8000b2c <__aeabi_dcmpun>
 800730e:	b970      	cbnz	r0, 800732e <pow+0x4a>
 8007310:	4642      	mov	r2, r8
 8007312:	464b      	mov	r3, r9
 8007314:	4640      	mov	r0, r8
 8007316:	4649      	mov	r1, r9
 8007318:	f7f9 fc08 	bl	8000b2c <__aeabi_dcmpun>
 800731c:	2200      	movs	r2, #0
 800731e:	2300      	movs	r3, #0
 8007320:	b148      	cbz	r0, 8007336 <pow+0x52>
 8007322:	4630      	mov	r0, r6
 8007324:	4639      	mov	r1, r7
 8007326:	f7f9 fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800732a:	2800      	cmp	r0, #0
 800732c:	d17d      	bne.n	800742a <pow+0x146>
 800732e:	ec45 4b10 	vmov	d0, r4, r5
 8007332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007336:	4640      	mov	r0, r8
 8007338:	4649      	mov	r1, r9
 800733a:	f7f9 fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800733e:	b1e0      	cbz	r0, 800737a <pow+0x96>
 8007340:	2200      	movs	r2, #0
 8007342:	2300      	movs	r3, #0
 8007344:	4630      	mov	r0, r6
 8007346:	4639      	mov	r1, r7
 8007348:	f7f9 fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800734c:	2800      	cmp	r0, #0
 800734e:	d16c      	bne.n	800742a <pow+0x146>
 8007350:	ec47 6b10 	vmov	d0, r6, r7
 8007354:	f000 fe53 	bl	8007ffe <finite>
 8007358:	2800      	cmp	r0, #0
 800735a:	d0e8      	beq.n	800732e <pow+0x4a>
 800735c:	2200      	movs	r2, #0
 800735e:	2300      	movs	r3, #0
 8007360:	4630      	mov	r0, r6
 8007362:	4639      	mov	r1, r7
 8007364:	f7f9 fbba 	bl	8000adc <__aeabi_dcmplt>
 8007368:	2800      	cmp	r0, #0
 800736a:	d0e0      	beq.n	800732e <pow+0x4a>
 800736c:	f7ff fb00 	bl	8006970 <__errno>
 8007370:	2321      	movs	r3, #33	; 0x21
 8007372:	6003      	str	r3, [r0, #0]
 8007374:	2400      	movs	r4, #0
 8007376:	4d2f      	ldr	r5, [pc, #188]	; (8007434 <pow+0x150>)
 8007378:	e7d9      	b.n	800732e <pow+0x4a>
 800737a:	ec45 4b10 	vmov	d0, r4, r5
 800737e:	f000 fe3e 	bl	8007ffe <finite>
 8007382:	bbb8      	cbnz	r0, 80073f4 <pow+0x110>
 8007384:	ec49 8b10 	vmov	d0, r8, r9
 8007388:	f000 fe39 	bl	8007ffe <finite>
 800738c:	b390      	cbz	r0, 80073f4 <pow+0x110>
 800738e:	ec47 6b10 	vmov	d0, r6, r7
 8007392:	f000 fe34 	bl	8007ffe <finite>
 8007396:	b368      	cbz	r0, 80073f4 <pow+0x110>
 8007398:	4622      	mov	r2, r4
 800739a:	462b      	mov	r3, r5
 800739c:	4620      	mov	r0, r4
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f9 fbc4 	bl	8000b2c <__aeabi_dcmpun>
 80073a4:	b160      	cbz	r0, 80073c0 <pow+0xdc>
 80073a6:	f7ff fae3 	bl	8006970 <__errno>
 80073aa:	2321      	movs	r3, #33	; 0x21
 80073ac:	6003      	str	r3, [r0, #0]
 80073ae:	2200      	movs	r2, #0
 80073b0:	2300      	movs	r3, #0
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	f7f9 fa49 	bl	800084c <__aeabi_ddiv>
 80073ba:	4604      	mov	r4, r0
 80073bc:	460d      	mov	r5, r1
 80073be:	e7b6      	b.n	800732e <pow+0x4a>
 80073c0:	f7ff fad6 	bl	8006970 <__errno>
 80073c4:	2322      	movs	r3, #34	; 0x22
 80073c6:	6003      	str	r3, [r0, #0]
 80073c8:	2200      	movs	r2, #0
 80073ca:	2300      	movs	r3, #0
 80073cc:	4640      	mov	r0, r8
 80073ce:	4649      	mov	r1, r9
 80073d0:	f7f9 fb84 	bl	8000adc <__aeabi_dcmplt>
 80073d4:	2400      	movs	r4, #0
 80073d6:	b158      	cbz	r0, 80073f0 <pow+0x10c>
 80073d8:	ec47 6b10 	vmov	d0, r6, r7
 80073dc:	f000 fe24 	bl	8008028 <rint>
 80073e0:	4632      	mov	r2, r6
 80073e2:	ec51 0b10 	vmov	r0, r1, d0
 80073e6:	463b      	mov	r3, r7
 80073e8:	f7f9 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d0c2      	beq.n	8007376 <pow+0x92>
 80073f0:	4d11      	ldr	r5, [pc, #68]	; (8007438 <pow+0x154>)
 80073f2:	e79c      	b.n	800732e <pow+0x4a>
 80073f4:	2200      	movs	r2, #0
 80073f6:	2300      	movs	r3, #0
 80073f8:	4620      	mov	r0, r4
 80073fa:	4629      	mov	r1, r5
 80073fc:	f7f9 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8007400:	2800      	cmp	r0, #0
 8007402:	d094      	beq.n	800732e <pow+0x4a>
 8007404:	ec49 8b10 	vmov	d0, r8, r9
 8007408:	f000 fdf9 	bl	8007ffe <finite>
 800740c:	2800      	cmp	r0, #0
 800740e:	d08e      	beq.n	800732e <pow+0x4a>
 8007410:	ec47 6b10 	vmov	d0, r6, r7
 8007414:	f000 fdf3 	bl	8007ffe <finite>
 8007418:	2800      	cmp	r0, #0
 800741a:	d088      	beq.n	800732e <pow+0x4a>
 800741c:	f7ff faa8 	bl	8006970 <__errno>
 8007420:	2322      	movs	r3, #34	; 0x22
 8007422:	6003      	str	r3, [r0, #0]
 8007424:	2400      	movs	r4, #0
 8007426:	2500      	movs	r5, #0
 8007428:	e781      	b.n	800732e <pow+0x4a>
 800742a:	4d04      	ldr	r5, [pc, #16]	; (800743c <pow+0x158>)
 800742c:	2400      	movs	r4, #0
 800742e:	e77e      	b.n	800732e <pow+0x4a>
 8007430:	200001d0 	.word	0x200001d0
 8007434:	fff00000 	.word	0xfff00000
 8007438:	7ff00000 	.word	0x7ff00000
 800743c:	3ff00000 	.word	0x3ff00000

08007440 <__ieee754_pow>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	ed2d 8b06 	vpush	{d8-d10}
 8007448:	b08d      	sub	sp, #52	; 0x34
 800744a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800744e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8007452:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007456:	ea56 0100 	orrs.w	r1, r6, r0
 800745a:	ec53 2b10 	vmov	r2, r3, d0
 800745e:	f000 84d1 	beq.w	8007e04 <__ieee754_pow+0x9c4>
 8007462:	497f      	ldr	r1, [pc, #508]	; (8007660 <__ieee754_pow+0x220>)
 8007464:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007468:	428c      	cmp	r4, r1
 800746a:	ee10 8a10 	vmov	r8, s0
 800746e:	4699      	mov	r9, r3
 8007470:	dc09      	bgt.n	8007486 <__ieee754_pow+0x46>
 8007472:	d103      	bne.n	800747c <__ieee754_pow+0x3c>
 8007474:	b97a      	cbnz	r2, 8007496 <__ieee754_pow+0x56>
 8007476:	42a6      	cmp	r6, r4
 8007478:	dd02      	ble.n	8007480 <__ieee754_pow+0x40>
 800747a:	e00c      	b.n	8007496 <__ieee754_pow+0x56>
 800747c:	428e      	cmp	r6, r1
 800747e:	dc02      	bgt.n	8007486 <__ieee754_pow+0x46>
 8007480:	428e      	cmp	r6, r1
 8007482:	d110      	bne.n	80074a6 <__ieee754_pow+0x66>
 8007484:	b178      	cbz	r0, 80074a6 <__ieee754_pow+0x66>
 8007486:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800748a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800748e:	ea54 0308 	orrs.w	r3, r4, r8
 8007492:	f000 84b7 	beq.w	8007e04 <__ieee754_pow+0x9c4>
 8007496:	4873      	ldr	r0, [pc, #460]	; (8007664 <__ieee754_pow+0x224>)
 8007498:	b00d      	add	sp, #52	; 0x34
 800749a:	ecbd 8b06 	vpop	{d8-d10}
 800749e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a2:	f000 bdb9 	b.w	8008018 <nan>
 80074a6:	f1b9 0f00 	cmp.w	r9, #0
 80074aa:	da36      	bge.n	800751a <__ieee754_pow+0xda>
 80074ac:	496e      	ldr	r1, [pc, #440]	; (8007668 <__ieee754_pow+0x228>)
 80074ae:	428e      	cmp	r6, r1
 80074b0:	dc51      	bgt.n	8007556 <__ieee754_pow+0x116>
 80074b2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80074b6:	428e      	cmp	r6, r1
 80074b8:	f340 84af 	ble.w	8007e1a <__ieee754_pow+0x9da>
 80074bc:	1531      	asrs	r1, r6, #20
 80074be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80074c2:	2914      	cmp	r1, #20
 80074c4:	dd0f      	ble.n	80074e6 <__ieee754_pow+0xa6>
 80074c6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80074ca:	fa20 fc01 	lsr.w	ip, r0, r1
 80074ce:	fa0c f101 	lsl.w	r1, ip, r1
 80074d2:	4281      	cmp	r1, r0
 80074d4:	f040 84a1 	bne.w	8007e1a <__ieee754_pow+0x9da>
 80074d8:	f00c 0c01 	and.w	ip, ip, #1
 80074dc:	f1cc 0102 	rsb	r1, ip, #2
 80074e0:	9100      	str	r1, [sp, #0]
 80074e2:	b180      	cbz	r0, 8007506 <__ieee754_pow+0xc6>
 80074e4:	e059      	b.n	800759a <__ieee754_pow+0x15a>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d155      	bne.n	8007596 <__ieee754_pow+0x156>
 80074ea:	f1c1 0114 	rsb	r1, r1, #20
 80074ee:	fa46 fc01 	asr.w	ip, r6, r1
 80074f2:	fa0c f101 	lsl.w	r1, ip, r1
 80074f6:	42b1      	cmp	r1, r6
 80074f8:	f040 848c 	bne.w	8007e14 <__ieee754_pow+0x9d4>
 80074fc:	f00c 0c01 	and.w	ip, ip, #1
 8007500:	f1cc 0102 	rsb	r1, ip, #2
 8007504:	9100      	str	r1, [sp, #0]
 8007506:	4959      	ldr	r1, [pc, #356]	; (800766c <__ieee754_pow+0x22c>)
 8007508:	428e      	cmp	r6, r1
 800750a:	d12d      	bne.n	8007568 <__ieee754_pow+0x128>
 800750c:	2f00      	cmp	r7, #0
 800750e:	da79      	bge.n	8007604 <__ieee754_pow+0x1c4>
 8007510:	4956      	ldr	r1, [pc, #344]	; (800766c <__ieee754_pow+0x22c>)
 8007512:	2000      	movs	r0, #0
 8007514:	f7f9 f99a 	bl	800084c <__aeabi_ddiv>
 8007518:	e016      	b.n	8007548 <__ieee754_pow+0x108>
 800751a:	2100      	movs	r1, #0
 800751c:	9100      	str	r1, [sp, #0]
 800751e:	2800      	cmp	r0, #0
 8007520:	d13b      	bne.n	800759a <__ieee754_pow+0x15a>
 8007522:	494f      	ldr	r1, [pc, #316]	; (8007660 <__ieee754_pow+0x220>)
 8007524:	428e      	cmp	r6, r1
 8007526:	d1ee      	bne.n	8007506 <__ieee754_pow+0xc6>
 8007528:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800752c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007530:	ea53 0308 	orrs.w	r3, r3, r8
 8007534:	f000 8466 	beq.w	8007e04 <__ieee754_pow+0x9c4>
 8007538:	4b4d      	ldr	r3, [pc, #308]	; (8007670 <__ieee754_pow+0x230>)
 800753a:	429c      	cmp	r4, r3
 800753c:	dd0d      	ble.n	800755a <__ieee754_pow+0x11a>
 800753e:	2f00      	cmp	r7, #0
 8007540:	f280 8464 	bge.w	8007e0c <__ieee754_pow+0x9cc>
 8007544:	2000      	movs	r0, #0
 8007546:	2100      	movs	r1, #0
 8007548:	ec41 0b10 	vmov	d0, r0, r1
 800754c:	b00d      	add	sp, #52	; 0x34
 800754e:	ecbd 8b06 	vpop	{d8-d10}
 8007552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007556:	2102      	movs	r1, #2
 8007558:	e7e0      	b.n	800751c <__ieee754_pow+0xdc>
 800755a:	2f00      	cmp	r7, #0
 800755c:	daf2      	bge.n	8007544 <__ieee754_pow+0x104>
 800755e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8007562:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007566:	e7ef      	b.n	8007548 <__ieee754_pow+0x108>
 8007568:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800756c:	d104      	bne.n	8007578 <__ieee754_pow+0x138>
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	f7f9 f841 	bl	80005f8 <__aeabi_dmul>
 8007576:	e7e7      	b.n	8007548 <__ieee754_pow+0x108>
 8007578:	493e      	ldr	r1, [pc, #248]	; (8007674 <__ieee754_pow+0x234>)
 800757a:	428f      	cmp	r7, r1
 800757c:	d10d      	bne.n	800759a <__ieee754_pow+0x15a>
 800757e:	f1b9 0f00 	cmp.w	r9, #0
 8007582:	db0a      	blt.n	800759a <__ieee754_pow+0x15a>
 8007584:	ec43 2b10 	vmov	d0, r2, r3
 8007588:	b00d      	add	sp, #52	; 0x34
 800758a:	ecbd 8b06 	vpop	{d8-d10}
 800758e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007592:	f000 bc77 	b.w	8007e84 <__ieee754_sqrt>
 8007596:	2100      	movs	r1, #0
 8007598:	9100      	str	r1, [sp, #0]
 800759a:	ec43 2b10 	vmov	d0, r2, r3
 800759e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075a2:	f000 fd23 	bl	8007fec <fabs>
 80075a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075aa:	ec51 0b10 	vmov	r0, r1, d0
 80075ae:	f1b8 0f00 	cmp.w	r8, #0
 80075b2:	d12a      	bne.n	800760a <__ieee754_pow+0x1ca>
 80075b4:	b12c      	cbz	r4, 80075c2 <__ieee754_pow+0x182>
 80075b6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800766c <__ieee754_pow+0x22c>
 80075ba:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80075be:	45e6      	cmp	lr, ip
 80075c0:	d123      	bne.n	800760a <__ieee754_pow+0x1ca>
 80075c2:	2f00      	cmp	r7, #0
 80075c4:	da05      	bge.n	80075d2 <__ieee754_pow+0x192>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	2000      	movs	r0, #0
 80075cc:	4927      	ldr	r1, [pc, #156]	; (800766c <__ieee754_pow+0x22c>)
 80075ce:	f7f9 f93d 	bl	800084c <__aeabi_ddiv>
 80075d2:	f1b9 0f00 	cmp.w	r9, #0
 80075d6:	dab7      	bge.n	8007548 <__ieee754_pow+0x108>
 80075d8:	9b00      	ldr	r3, [sp, #0]
 80075da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80075de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80075e2:	4323      	orrs	r3, r4
 80075e4:	d108      	bne.n	80075f8 <__ieee754_pow+0x1b8>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	4610      	mov	r0, r2
 80075ec:	4619      	mov	r1, r3
 80075ee:	f7f8 fe4b 	bl	8000288 <__aeabi_dsub>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	e78d      	b.n	8007514 <__ieee754_pow+0xd4>
 80075f8:	9b00      	ldr	r3, [sp, #0]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d1a4      	bne.n	8007548 <__ieee754_pow+0x108>
 80075fe:	4602      	mov	r2, r0
 8007600:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007604:	4610      	mov	r0, r2
 8007606:	4619      	mov	r1, r3
 8007608:	e79e      	b.n	8007548 <__ieee754_pow+0x108>
 800760a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800760e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007612:	950a      	str	r5, [sp, #40]	; 0x28
 8007614:	9d00      	ldr	r5, [sp, #0]
 8007616:	46ac      	mov	ip, r5
 8007618:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800761a:	ea5c 0505 	orrs.w	r5, ip, r5
 800761e:	d0e4      	beq.n	80075ea <__ieee754_pow+0x1aa>
 8007620:	4b15      	ldr	r3, [pc, #84]	; (8007678 <__ieee754_pow+0x238>)
 8007622:	429e      	cmp	r6, r3
 8007624:	f340 80fc 	ble.w	8007820 <__ieee754_pow+0x3e0>
 8007628:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800762c:	429e      	cmp	r6, r3
 800762e:	4b10      	ldr	r3, [pc, #64]	; (8007670 <__ieee754_pow+0x230>)
 8007630:	dd07      	ble.n	8007642 <__ieee754_pow+0x202>
 8007632:	429c      	cmp	r4, r3
 8007634:	dc0a      	bgt.n	800764c <__ieee754_pow+0x20c>
 8007636:	2f00      	cmp	r7, #0
 8007638:	da84      	bge.n	8007544 <__ieee754_pow+0x104>
 800763a:	a307      	add	r3, pc, #28	; (adr r3, 8007658 <__ieee754_pow+0x218>)
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	e795      	b.n	800756e <__ieee754_pow+0x12e>
 8007642:	429c      	cmp	r4, r3
 8007644:	dbf7      	blt.n	8007636 <__ieee754_pow+0x1f6>
 8007646:	4b09      	ldr	r3, [pc, #36]	; (800766c <__ieee754_pow+0x22c>)
 8007648:	429c      	cmp	r4, r3
 800764a:	dd17      	ble.n	800767c <__ieee754_pow+0x23c>
 800764c:	2f00      	cmp	r7, #0
 800764e:	dcf4      	bgt.n	800763a <__ieee754_pow+0x1fa>
 8007650:	e778      	b.n	8007544 <__ieee754_pow+0x104>
 8007652:	bf00      	nop
 8007654:	f3af 8000 	nop.w
 8007658:	8800759c 	.word	0x8800759c
 800765c:	7e37e43c 	.word	0x7e37e43c
 8007660:	7ff00000 	.word	0x7ff00000
 8007664:	0800841d 	.word	0x0800841d
 8007668:	433fffff 	.word	0x433fffff
 800766c:	3ff00000 	.word	0x3ff00000
 8007670:	3fefffff 	.word	0x3fefffff
 8007674:	3fe00000 	.word	0x3fe00000
 8007678:	41e00000 	.word	0x41e00000
 800767c:	4b64      	ldr	r3, [pc, #400]	; (8007810 <__ieee754_pow+0x3d0>)
 800767e:	2200      	movs	r2, #0
 8007680:	f7f8 fe02 	bl	8000288 <__aeabi_dsub>
 8007684:	a356      	add	r3, pc, #344	; (adr r3, 80077e0 <__ieee754_pow+0x3a0>)
 8007686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768a:	4604      	mov	r4, r0
 800768c:	460d      	mov	r5, r1
 800768e:	f7f8 ffb3 	bl	80005f8 <__aeabi_dmul>
 8007692:	a355      	add	r3, pc, #340	; (adr r3, 80077e8 <__ieee754_pow+0x3a8>)
 8007694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007698:	4606      	mov	r6, r0
 800769a:	460f      	mov	r7, r1
 800769c:	4620      	mov	r0, r4
 800769e:	4629      	mov	r1, r5
 80076a0:	f7f8 ffaa 	bl	80005f8 <__aeabi_dmul>
 80076a4:	4b5b      	ldr	r3, [pc, #364]	; (8007814 <__ieee754_pow+0x3d4>)
 80076a6:	4682      	mov	sl, r0
 80076a8:	468b      	mov	fp, r1
 80076aa:	2200      	movs	r2, #0
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7f8 ffa2 	bl	80005f8 <__aeabi_dmul>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	a14d      	add	r1, pc, #308	; (adr r1, 80077f0 <__ieee754_pow+0x3b0>)
 80076ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076be:	f7f8 fde3 	bl	8000288 <__aeabi_dsub>
 80076c2:	4622      	mov	r2, r4
 80076c4:	462b      	mov	r3, r5
 80076c6:	f7f8 ff97 	bl	80005f8 <__aeabi_dmul>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	2000      	movs	r0, #0
 80076d0:	4951      	ldr	r1, [pc, #324]	; (8007818 <__ieee754_pow+0x3d8>)
 80076d2:	f7f8 fdd9 	bl	8000288 <__aeabi_dsub>
 80076d6:	4622      	mov	r2, r4
 80076d8:	4680      	mov	r8, r0
 80076da:	4689      	mov	r9, r1
 80076dc:	462b      	mov	r3, r5
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	f7f8 ff89 	bl	80005f8 <__aeabi_dmul>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4640      	mov	r0, r8
 80076ec:	4649      	mov	r1, r9
 80076ee:	f7f8 ff83 	bl	80005f8 <__aeabi_dmul>
 80076f2:	a341      	add	r3, pc, #260	; (adr r3, 80077f8 <__ieee754_pow+0x3b8>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f7f8 ff7e 	bl	80005f8 <__aeabi_dmul>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4650      	mov	r0, sl
 8007702:	4659      	mov	r1, fp
 8007704:	f7f8 fdc0 	bl	8000288 <__aeabi_dsub>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4680      	mov	r8, r0
 800770e:	4689      	mov	r9, r1
 8007710:	4630      	mov	r0, r6
 8007712:	4639      	mov	r1, r7
 8007714:	f7f8 fdba 	bl	800028c <__adddf3>
 8007718:	2400      	movs	r4, #0
 800771a:	4632      	mov	r2, r6
 800771c:	463b      	mov	r3, r7
 800771e:	4620      	mov	r0, r4
 8007720:	460d      	mov	r5, r1
 8007722:	f7f8 fdb1 	bl	8000288 <__aeabi_dsub>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4640      	mov	r0, r8
 800772c:	4649      	mov	r1, r9
 800772e:	f7f8 fdab 	bl	8000288 <__aeabi_dsub>
 8007732:	9b00      	ldr	r3, [sp, #0]
 8007734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007736:	3b01      	subs	r3, #1
 8007738:	4313      	orrs	r3, r2
 800773a:	4682      	mov	sl, r0
 800773c:	468b      	mov	fp, r1
 800773e:	f040 81f1 	bne.w	8007b24 <__ieee754_pow+0x6e4>
 8007742:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007800 <__ieee754_pow+0x3c0>
 8007746:	eeb0 8a47 	vmov.f32	s16, s14
 800774a:	eef0 8a67 	vmov.f32	s17, s15
 800774e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007752:	2600      	movs	r6, #0
 8007754:	4632      	mov	r2, r6
 8007756:	463b      	mov	r3, r7
 8007758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800775c:	f7f8 fd94 	bl	8000288 <__aeabi_dsub>
 8007760:	4622      	mov	r2, r4
 8007762:	462b      	mov	r3, r5
 8007764:	f7f8 ff48 	bl	80005f8 <__aeabi_dmul>
 8007768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800776c:	4680      	mov	r8, r0
 800776e:	4689      	mov	r9, r1
 8007770:	4650      	mov	r0, sl
 8007772:	4659      	mov	r1, fp
 8007774:	f7f8 ff40 	bl	80005f8 <__aeabi_dmul>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f7f8 fd84 	bl	800028c <__adddf3>
 8007784:	4632      	mov	r2, r6
 8007786:	463b      	mov	r3, r7
 8007788:	4680      	mov	r8, r0
 800778a:	4689      	mov	r9, r1
 800778c:	4620      	mov	r0, r4
 800778e:	4629      	mov	r1, r5
 8007790:	f7f8 ff32 	bl	80005f8 <__aeabi_dmul>
 8007794:	460b      	mov	r3, r1
 8007796:	4604      	mov	r4, r0
 8007798:	460d      	mov	r5, r1
 800779a:	4602      	mov	r2, r0
 800779c:	4649      	mov	r1, r9
 800779e:	4640      	mov	r0, r8
 80077a0:	f7f8 fd74 	bl	800028c <__adddf3>
 80077a4:	4b1d      	ldr	r3, [pc, #116]	; (800781c <__ieee754_pow+0x3dc>)
 80077a6:	4299      	cmp	r1, r3
 80077a8:	ec45 4b19 	vmov	d9, r4, r5
 80077ac:	4606      	mov	r6, r0
 80077ae:	460f      	mov	r7, r1
 80077b0:	468b      	mov	fp, r1
 80077b2:	f340 82fe 	ble.w	8007db2 <__ieee754_pow+0x972>
 80077b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80077ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80077be:	4303      	orrs	r3, r0
 80077c0:	f000 81f0 	beq.w	8007ba4 <__ieee754_pow+0x764>
 80077c4:	a310      	add	r3, pc, #64	; (adr r3, 8007808 <__ieee754_pow+0x3c8>)
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	ec51 0b18 	vmov	r0, r1, d8
 80077ce:	f7f8 ff13 	bl	80005f8 <__aeabi_dmul>
 80077d2:	a30d      	add	r3, pc, #52	; (adr r3, 8007808 <__ieee754_pow+0x3c8>)
 80077d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d8:	e6cb      	b.n	8007572 <__ieee754_pow+0x132>
 80077da:	bf00      	nop
 80077dc:	f3af 8000 	nop.w
 80077e0:	60000000 	.word	0x60000000
 80077e4:	3ff71547 	.word	0x3ff71547
 80077e8:	f85ddf44 	.word	0xf85ddf44
 80077ec:	3e54ae0b 	.word	0x3e54ae0b
 80077f0:	55555555 	.word	0x55555555
 80077f4:	3fd55555 	.word	0x3fd55555
 80077f8:	652b82fe 	.word	0x652b82fe
 80077fc:	3ff71547 	.word	0x3ff71547
 8007800:	00000000 	.word	0x00000000
 8007804:	bff00000 	.word	0xbff00000
 8007808:	8800759c 	.word	0x8800759c
 800780c:	7e37e43c 	.word	0x7e37e43c
 8007810:	3ff00000 	.word	0x3ff00000
 8007814:	3fd00000 	.word	0x3fd00000
 8007818:	3fe00000 	.word	0x3fe00000
 800781c:	408fffff 	.word	0x408fffff
 8007820:	4bd7      	ldr	r3, [pc, #860]	; (8007b80 <__ieee754_pow+0x740>)
 8007822:	ea03 0309 	and.w	r3, r3, r9
 8007826:	2200      	movs	r2, #0
 8007828:	b92b      	cbnz	r3, 8007836 <__ieee754_pow+0x3f6>
 800782a:	4bd6      	ldr	r3, [pc, #856]	; (8007b84 <__ieee754_pow+0x744>)
 800782c:	f7f8 fee4 	bl	80005f8 <__aeabi_dmul>
 8007830:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007834:	460c      	mov	r4, r1
 8007836:	1523      	asrs	r3, r4, #20
 8007838:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800783c:	4413      	add	r3, r2
 800783e:	9309      	str	r3, [sp, #36]	; 0x24
 8007840:	4bd1      	ldr	r3, [pc, #836]	; (8007b88 <__ieee754_pow+0x748>)
 8007842:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007846:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800784a:	429c      	cmp	r4, r3
 800784c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007850:	dd08      	ble.n	8007864 <__ieee754_pow+0x424>
 8007852:	4bce      	ldr	r3, [pc, #824]	; (8007b8c <__ieee754_pow+0x74c>)
 8007854:	429c      	cmp	r4, r3
 8007856:	f340 8163 	ble.w	8007b20 <__ieee754_pow+0x6e0>
 800785a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785c:	3301      	adds	r3, #1
 800785e:	9309      	str	r3, [sp, #36]	; 0x24
 8007860:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007864:	2400      	movs	r4, #0
 8007866:	00e3      	lsls	r3, r4, #3
 8007868:	930b      	str	r3, [sp, #44]	; 0x2c
 800786a:	4bc9      	ldr	r3, [pc, #804]	; (8007b90 <__ieee754_pow+0x750>)
 800786c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007870:	ed93 7b00 	vldr	d7, [r3]
 8007874:	4629      	mov	r1, r5
 8007876:	ec53 2b17 	vmov	r2, r3, d7
 800787a:	eeb0 8a47 	vmov.f32	s16, s14
 800787e:	eef0 8a67 	vmov.f32	s17, s15
 8007882:	4682      	mov	sl, r0
 8007884:	f7f8 fd00 	bl	8000288 <__aeabi_dsub>
 8007888:	4652      	mov	r2, sl
 800788a:	4606      	mov	r6, r0
 800788c:	460f      	mov	r7, r1
 800788e:	462b      	mov	r3, r5
 8007890:	ec51 0b18 	vmov	r0, r1, d8
 8007894:	f7f8 fcfa 	bl	800028c <__adddf3>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	2000      	movs	r0, #0
 800789e:	49bd      	ldr	r1, [pc, #756]	; (8007b94 <__ieee754_pow+0x754>)
 80078a0:	f7f8 ffd4 	bl	800084c <__aeabi_ddiv>
 80078a4:	ec41 0b19 	vmov	d9, r0, r1
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4630      	mov	r0, r6
 80078ae:	4639      	mov	r1, r7
 80078b0:	f7f8 fea2 	bl	80005f8 <__aeabi_dmul>
 80078b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80078b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078c0:	2300      	movs	r3, #0
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80078c8:	46ab      	mov	fp, r5
 80078ca:	106d      	asrs	r5, r5, #1
 80078cc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80078d0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80078d4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80078d8:	2200      	movs	r2, #0
 80078da:	4640      	mov	r0, r8
 80078dc:	4649      	mov	r1, r9
 80078de:	4614      	mov	r4, r2
 80078e0:	461d      	mov	r5, r3
 80078e2:	f7f8 fe89 	bl	80005f8 <__aeabi_dmul>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4630      	mov	r0, r6
 80078ec:	4639      	mov	r1, r7
 80078ee:	f7f8 fccb 	bl	8000288 <__aeabi_dsub>
 80078f2:	ec53 2b18 	vmov	r2, r3, d8
 80078f6:	4606      	mov	r6, r0
 80078f8:	460f      	mov	r7, r1
 80078fa:	4620      	mov	r0, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	f7f8 fcc3 	bl	8000288 <__aeabi_dsub>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4650      	mov	r0, sl
 8007908:	4659      	mov	r1, fp
 800790a:	f7f8 fcbd 	bl	8000288 <__aeabi_dsub>
 800790e:	4642      	mov	r2, r8
 8007910:	464b      	mov	r3, r9
 8007912:	f7f8 fe71 	bl	80005f8 <__aeabi_dmul>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4630      	mov	r0, r6
 800791c:	4639      	mov	r1, r7
 800791e:	f7f8 fcb3 	bl	8000288 <__aeabi_dsub>
 8007922:	ec53 2b19 	vmov	r2, r3, d9
 8007926:	f7f8 fe67 	bl	80005f8 <__aeabi_dmul>
 800792a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800792e:	ec41 0b18 	vmov	d8, r0, r1
 8007932:	4610      	mov	r0, r2
 8007934:	4619      	mov	r1, r3
 8007936:	f7f8 fe5f 	bl	80005f8 <__aeabi_dmul>
 800793a:	a37d      	add	r3, pc, #500	; (adr r3, 8007b30 <__ieee754_pow+0x6f0>)
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	4604      	mov	r4, r0
 8007942:	460d      	mov	r5, r1
 8007944:	f7f8 fe58 	bl	80005f8 <__aeabi_dmul>
 8007948:	a37b      	add	r3, pc, #492	; (adr r3, 8007b38 <__ieee754_pow+0x6f8>)
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	f7f8 fc9d 	bl	800028c <__adddf3>
 8007952:	4622      	mov	r2, r4
 8007954:	462b      	mov	r3, r5
 8007956:	f7f8 fe4f 	bl	80005f8 <__aeabi_dmul>
 800795a:	a379      	add	r3, pc, #484	; (adr r3, 8007b40 <__ieee754_pow+0x700>)
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f7f8 fc94 	bl	800028c <__adddf3>
 8007964:	4622      	mov	r2, r4
 8007966:	462b      	mov	r3, r5
 8007968:	f7f8 fe46 	bl	80005f8 <__aeabi_dmul>
 800796c:	a376      	add	r3, pc, #472	; (adr r3, 8007b48 <__ieee754_pow+0x708>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f7f8 fc8b 	bl	800028c <__adddf3>
 8007976:	4622      	mov	r2, r4
 8007978:	462b      	mov	r3, r5
 800797a:	f7f8 fe3d 	bl	80005f8 <__aeabi_dmul>
 800797e:	a374      	add	r3, pc, #464	; (adr r3, 8007b50 <__ieee754_pow+0x710>)
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f7f8 fc82 	bl	800028c <__adddf3>
 8007988:	4622      	mov	r2, r4
 800798a:	462b      	mov	r3, r5
 800798c:	f7f8 fe34 	bl	80005f8 <__aeabi_dmul>
 8007990:	a371      	add	r3, pc, #452	; (adr r3, 8007b58 <__ieee754_pow+0x718>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f7f8 fc79 	bl	800028c <__adddf3>
 800799a:	4622      	mov	r2, r4
 800799c:	4606      	mov	r6, r0
 800799e:	460f      	mov	r7, r1
 80079a0:	462b      	mov	r3, r5
 80079a2:	4620      	mov	r0, r4
 80079a4:	4629      	mov	r1, r5
 80079a6:	f7f8 fe27 	bl	80005f8 <__aeabi_dmul>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4630      	mov	r0, r6
 80079b0:	4639      	mov	r1, r7
 80079b2:	f7f8 fe21 	bl	80005f8 <__aeabi_dmul>
 80079b6:	4642      	mov	r2, r8
 80079b8:	4604      	mov	r4, r0
 80079ba:	460d      	mov	r5, r1
 80079bc:	464b      	mov	r3, r9
 80079be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079c2:	f7f8 fc63 	bl	800028c <__adddf3>
 80079c6:	ec53 2b18 	vmov	r2, r3, d8
 80079ca:	f7f8 fe15 	bl	80005f8 <__aeabi_dmul>
 80079ce:	4622      	mov	r2, r4
 80079d0:	462b      	mov	r3, r5
 80079d2:	f7f8 fc5b 	bl	800028c <__adddf3>
 80079d6:	4642      	mov	r2, r8
 80079d8:	4682      	mov	sl, r0
 80079da:	468b      	mov	fp, r1
 80079dc:	464b      	mov	r3, r9
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f8 fe09 	bl	80005f8 <__aeabi_dmul>
 80079e6:	4b6c      	ldr	r3, [pc, #432]	; (8007b98 <__ieee754_pow+0x758>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	4606      	mov	r6, r0
 80079ec:	460f      	mov	r7, r1
 80079ee:	f7f8 fc4d 	bl	800028c <__adddf3>
 80079f2:	4652      	mov	r2, sl
 80079f4:	465b      	mov	r3, fp
 80079f6:	f7f8 fc49 	bl	800028c <__adddf3>
 80079fa:	9c04      	ldr	r4, [sp, #16]
 80079fc:	460d      	mov	r5, r1
 80079fe:	4622      	mov	r2, r4
 8007a00:	460b      	mov	r3, r1
 8007a02:	4640      	mov	r0, r8
 8007a04:	4649      	mov	r1, r9
 8007a06:	f7f8 fdf7 	bl	80005f8 <__aeabi_dmul>
 8007a0a:	4b63      	ldr	r3, [pc, #396]	; (8007b98 <__ieee754_pow+0x758>)
 8007a0c:	4680      	mov	r8, r0
 8007a0e:	4689      	mov	r9, r1
 8007a10:	2200      	movs	r2, #0
 8007a12:	4620      	mov	r0, r4
 8007a14:	4629      	mov	r1, r5
 8007a16:	f7f8 fc37 	bl	8000288 <__aeabi_dsub>
 8007a1a:	4632      	mov	r2, r6
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	f7f8 fc33 	bl	8000288 <__aeabi_dsub>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4650      	mov	r0, sl
 8007a28:	4659      	mov	r1, fp
 8007a2a:	f7f8 fc2d 	bl	8000288 <__aeabi_dsub>
 8007a2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a32:	f7f8 fde1 	bl	80005f8 <__aeabi_dmul>
 8007a36:	4622      	mov	r2, r4
 8007a38:	4606      	mov	r6, r0
 8007a3a:	460f      	mov	r7, r1
 8007a3c:	462b      	mov	r3, r5
 8007a3e:	ec51 0b18 	vmov	r0, r1, d8
 8007a42:	f7f8 fdd9 	bl	80005f8 <__aeabi_dmul>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f8 fc1d 	bl	800028c <__adddf3>
 8007a52:	4606      	mov	r6, r0
 8007a54:	460f      	mov	r7, r1
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	f7f8 fc15 	bl	800028c <__adddf3>
 8007a62:	9c04      	ldr	r4, [sp, #16]
 8007a64:	a33e      	add	r3, pc, #248	; (adr r3, 8007b60 <__ieee754_pow+0x720>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	f7f8 fdc3 	bl	80005f8 <__aeabi_dmul>
 8007a72:	4642      	mov	r2, r8
 8007a74:	ec41 0b18 	vmov	d8, r0, r1
 8007a78:	464b      	mov	r3, r9
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	f7f8 fc03 	bl	8000288 <__aeabi_dsub>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4630      	mov	r0, r6
 8007a88:	4639      	mov	r1, r7
 8007a8a:	f7f8 fbfd 	bl	8000288 <__aeabi_dsub>
 8007a8e:	a336      	add	r3, pc, #216	; (adr r3, 8007b68 <__ieee754_pow+0x728>)
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f7f8 fdb0 	bl	80005f8 <__aeabi_dmul>
 8007a98:	a335      	add	r3, pc, #212	; (adr r3, 8007b70 <__ieee754_pow+0x730>)
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460f      	mov	r7, r1
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7f8 fda7 	bl	80005f8 <__aeabi_dmul>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	f7f8 fbeb 	bl	800028c <__adddf3>
 8007ab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ab8:	4b38      	ldr	r3, [pc, #224]	; (8007b9c <__ieee754_pow+0x75c>)
 8007aba:	4413      	add	r3, r2
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fbe4 	bl	800028c <__adddf3>
 8007ac4:	4682      	mov	sl, r0
 8007ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ac8:	468b      	mov	fp, r1
 8007aca:	f7f8 fd2b 	bl	8000524 <__aeabi_i2d>
 8007ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ad0:	4b33      	ldr	r3, [pc, #204]	; (8007ba0 <__ieee754_pow+0x760>)
 8007ad2:	4413      	add	r3, r2
 8007ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ad8:	4606      	mov	r6, r0
 8007ada:	460f      	mov	r7, r1
 8007adc:	4652      	mov	r2, sl
 8007ade:	465b      	mov	r3, fp
 8007ae0:	ec51 0b18 	vmov	r0, r1, d8
 8007ae4:	f7f8 fbd2 	bl	800028c <__adddf3>
 8007ae8:	4642      	mov	r2, r8
 8007aea:	464b      	mov	r3, r9
 8007aec:	f7f8 fbce 	bl	800028c <__adddf3>
 8007af0:	4632      	mov	r2, r6
 8007af2:	463b      	mov	r3, r7
 8007af4:	f7f8 fbca 	bl	800028c <__adddf3>
 8007af8:	9c04      	ldr	r4, [sp, #16]
 8007afa:	4632      	mov	r2, r6
 8007afc:	463b      	mov	r3, r7
 8007afe:	4620      	mov	r0, r4
 8007b00:	460d      	mov	r5, r1
 8007b02:	f7f8 fbc1 	bl	8000288 <__aeabi_dsub>
 8007b06:	4642      	mov	r2, r8
 8007b08:	464b      	mov	r3, r9
 8007b0a:	f7f8 fbbd 	bl	8000288 <__aeabi_dsub>
 8007b0e:	ec53 2b18 	vmov	r2, r3, d8
 8007b12:	f7f8 fbb9 	bl	8000288 <__aeabi_dsub>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4650      	mov	r0, sl
 8007b1c:	4659      	mov	r1, fp
 8007b1e:	e606      	b.n	800772e <__ieee754_pow+0x2ee>
 8007b20:	2401      	movs	r4, #1
 8007b22:	e6a0      	b.n	8007866 <__ieee754_pow+0x426>
 8007b24:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007b78 <__ieee754_pow+0x738>
 8007b28:	e60d      	b.n	8007746 <__ieee754_pow+0x306>
 8007b2a:	bf00      	nop
 8007b2c:	f3af 8000 	nop.w
 8007b30:	4a454eef 	.word	0x4a454eef
 8007b34:	3fca7e28 	.word	0x3fca7e28
 8007b38:	93c9db65 	.word	0x93c9db65
 8007b3c:	3fcd864a 	.word	0x3fcd864a
 8007b40:	a91d4101 	.word	0xa91d4101
 8007b44:	3fd17460 	.word	0x3fd17460
 8007b48:	518f264d 	.word	0x518f264d
 8007b4c:	3fd55555 	.word	0x3fd55555
 8007b50:	db6fabff 	.word	0xdb6fabff
 8007b54:	3fdb6db6 	.word	0x3fdb6db6
 8007b58:	33333303 	.word	0x33333303
 8007b5c:	3fe33333 	.word	0x3fe33333
 8007b60:	e0000000 	.word	0xe0000000
 8007b64:	3feec709 	.word	0x3feec709
 8007b68:	dc3a03fd 	.word	0xdc3a03fd
 8007b6c:	3feec709 	.word	0x3feec709
 8007b70:	145b01f5 	.word	0x145b01f5
 8007b74:	be3e2fe0 	.word	0xbe3e2fe0
 8007b78:	00000000 	.word	0x00000000
 8007b7c:	3ff00000 	.word	0x3ff00000
 8007b80:	7ff00000 	.word	0x7ff00000
 8007b84:	43400000 	.word	0x43400000
 8007b88:	0003988e 	.word	0x0003988e
 8007b8c:	000bb679 	.word	0x000bb679
 8007b90:	08008450 	.word	0x08008450
 8007b94:	3ff00000 	.word	0x3ff00000
 8007b98:	40080000 	.word	0x40080000
 8007b9c:	08008470 	.word	0x08008470
 8007ba0:	08008460 	.word	0x08008460
 8007ba4:	a3b5      	add	r3, pc, #724	; (adr r3, 8007e7c <__ieee754_pow+0xa3c>)
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f8 fb6d 	bl	800028c <__adddf3>
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	ec41 0b1a 	vmov	d10, r0, r1
 8007bb8:	462b      	mov	r3, r5
 8007bba:	4630      	mov	r0, r6
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	f7f8 fb63 	bl	8000288 <__aeabi_dsub>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	ec51 0b1a 	vmov	r0, r1, d10
 8007bca:	f7f8 ffa5 	bl	8000b18 <__aeabi_dcmpgt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f47f adf8 	bne.w	80077c4 <__ieee754_pow+0x384>
 8007bd4:	4aa4      	ldr	r2, [pc, #656]	; (8007e68 <__ieee754_pow+0xa28>)
 8007bd6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	f340 810b 	ble.w	8007df6 <__ieee754_pow+0x9b6>
 8007be0:	151b      	asrs	r3, r3, #20
 8007be2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007be6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007bea:	fa4a f303 	asr.w	r3, sl, r3
 8007bee:	445b      	add	r3, fp
 8007bf0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007bf4:	4e9d      	ldr	r6, [pc, #628]	; (8007e6c <__ieee754_pow+0xa2c>)
 8007bf6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007bfa:	4116      	asrs	r6, r2
 8007bfc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007c00:	2000      	movs	r0, #0
 8007c02:	ea23 0106 	bic.w	r1, r3, r6
 8007c06:	f1c2 0214 	rsb	r2, r2, #20
 8007c0a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007c0e:	fa4a fa02 	asr.w	sl, sl, r2
 8007c12:	f1bb 0f00 	cmp.w	fp, #0
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	bfb8      	it	lt
 8007c20:	f1ca 0a00 	rsblt	sl, sl, #0
 8007c24:	f7f8 fb30 	bl	8000288 <__aeabi_dsub>
 8007c28:	ec41 0b19 	vmov	d9, r0, r1
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	464b      	mov	r3, r9
 8007c30:	ec51 0b19 	vmov	r0, r1, d9
 8007c34:	f7f8 fb2a 	bl	800028c <__adddf3>
 8007c38:	2400      	movs	r4, #0
 8007c3a:	a379      	add	r3, pc, #484	; (adr r3, 8007e20 <__ieee754_pow+0x9e0>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	4620      	mov	r0, r4
 8007c42:	460d      	mov	r5, r1
 8007c44:	f7f8 fcd8 	bl	80005f8 <__aeabi_dmul>
 8007c48:	ec53 2b19 	vmov	r2, r3, d9
 8007c4c:	4606      	mov	r6, r0
 8007c4e:	460f      	mov	r7, r1
 8007c50:	4620      	mov	r0, r4
 8007c52:	4629      	mov	r1, r5
 8007c54:	f7f8 fb18 	bl	8000288 <__aeabi_dsub>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	4649      	mov	r1, r9
 8007c60:	f7f8 fb12 	bl	8000288 <__aeabi_dsub>
 8007c64:	a370      	add	r3, pc, #448	; (adr r3, 8007e28 <__ieee754_pow+0x9e8>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fcc5 	bl	80005f8 <__aeabi_dmul>
 8007c6e:	a370      	add	r3, pc, #448	; (adr r3, 8007e30 <__ieee754_pow+0x9f0>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	4680      	mov	r8, r0
 8007c76:	4689      	mov	r9, r1
 8007c78:	4620      	mov	r0, r4
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	f7f8 fcbc 	bl	80005f8 <__aeabi_dmul>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4640      	mov	r0, r8
 8007c86:	4649      	mov	r1, r9
 8007c88:	f7f8 fb00 	bl	800028c <__adddf3>
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	460d      	mov	r5, r1
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 faf8 	bl	800028c <__adddf3>
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	4689      	mov	r9, r1
 8007ca4:	f7f8 faf0 	bl	8000288 <__aeabi_dsub>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4620      	mov	r0, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 faea 	bl	8000288 <__aeabi_dsub>
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	460f      	mov	r7, r1
 8007cba:	464b      	mov	r3, r9
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	f7f8 fc9a 	bl	80005f8 <__aeabi_dmul>
 8007cc4:	a35c      	add	r3, pc, #368	; (adr r3, 8007e38 <__ieee754_pow+0x9f8>)
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	4604      	mov	r4, r0
 8007ccc:	460d      	mov	r5, r1
 8007cce:	f7f8 fc93 	bl	80005f8 <__aeabi_dmul>
 8007cd2:	a35b      	add	r3, pc, #364	; (adr r3, 8007e40 <__ieee754_pow+0xa00>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 fad6 	bl	8000288 <__aeabi_dsub>
 8007cdc:	4622      	mov	r2, r4
 8007cde:	462b      	mov	r3, r5
 8007ce0:	f7f8 fc8a 	bl	80005f8 <__aeabi_dmul>
 8007ce4:	a358      	add	r3, pc, #352	; (adr r3, 8007e48 <__ieee754_pow+0xa08>)
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 facf 	bl	800028c <__adddf3>
 8007cee:	4622      	mov	r2, r4
 8007cf0:	462b      	mov	r3, r5
 8007cf2:	f7f8 fc81 	bl	80005f8 <__aeabi_dmul>
 8007cf6:	a356      	add	r3, pc, #344	; (adr r3, 8007e50 <__ieee754_pow+0xa10>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	f7f8 fac4 	bl	8000288 <__aeabi_dsub>
 8007d00:	4622      	mov	r2, r4
 8007d02:	462b      	mov	r3, r5
 8007d04:	f7f8 fc78 	bl	80005f8 <__aeabi_dmul>
 8007d08:	a353      	add	r3, pc, #332	; (adr r3, 8007e58 <__ieee754_pow+0xa18>)
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	f7f8 fabd 	bl	800028c <__adddf3>
 8007d12:	4622      	mov	r2, r4
 8007d14:	462b      	mov	r3, r5
 8007d16:	f7f8 fc6f 	bl	80005f8 <__aeabi_dmul>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4640      	mov	r0, r8
 8007d20:	4649      	mov	r1, r9
 8007d22:	f7f8 fab1 	bl	8000288 <__aeabi_dsub>
 8007d26:	4604      	mov	r4, r0
 8007d28:	460d      	mov	r5, r1
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4640      	mov	r0, r8
 8007d30:	4649      	mov	r1, r9
 8007d32:	f7f8 fc61 	bl	80005f8 <__aeabi_dmul>
 8007d36:	2200      	movs	r2, #0
 8007d38:	ec41 0b19 	vmov	d9, r0, r1
 8007d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d40:	4620      	mov	r0, r4
 8007d42:	4629      	mov	r1, r5
 8007d44:	f7f8 faa0 	bl	8000288 <__aeabi_dsub>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	ec51 0b19 	vmov	r0, r1, d9
 8007d50:	f7f8 fd7c 	bl	800084c <__aeabi_ddiv>
 8007d54:	4632      	mov	r2, r6
 8007d56:	4604      	mov	r4, r0
 8007d58:	460d      	mov	r5, r1
 8007d5a:	463b      	mov	r3, r7
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	4649      	mov	r1, r9
 8007d60:	f7f8 fc4a 	bl	80005f8 <__aeabi_dmul>
 8007d64:	4632      	mov	r2, r6
 8007d66:	463b      	mov	r3, r7
 8007d68:	f7f8 fa90 	bl	800028c <__adddf3>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4620      	mov	r0, r4
 8007d72:	4629      	mov	r1, r5
 8007d74:	f7f8 fa88 	bl	8000288 <__aeabi_dsub>
 8007d78:	4642      	mov	r2, r8
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	f7f8 fa84 	bl	8000288 <__aeabi_dsub>
 8007d80:	460b      	mov	r3, r1
 8007d82:	4602      	mov	r2, r0
 8007d84:	493a      	ldr	r1, [pc, #232]	; (8007e70 <__ieee754_pow+0xa30>)
 8007d86:	2000      	movs	r0, #0
 8007d88:	f7f8 fa7e 	bl	8000288 <__aeabi_dsub>
 8007d8c:	e9cd 0100 	strd	r0, r1, [sp]
 8007d90:	9b01      	ldr	r3, [sp, #4]
 8007d92:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d9a:	da2f      	bge.n	8007dfc <__ieee754_pow+0x9bc>
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	ed9d 0b00 	vldr	d0, [sp]
 8007da2:	f000 f9cd 	bl	8008140 <scalbn>
 8007da6:	ec51 0b10 	vmov	r0, r1, d0
 8007daa:	ec53 2b18 	vmov	r2, r3, d8
 8007dae:	f7ff bbe0 	b.w	8007572 <__ieee754_pow+0x132>
 8007db2:	4b30      	ldr	r3, [pc, #192]	; (8007e74 <__ieee754_pow+0xa34>)
 8007db4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007db8:	429e      	cmp	r6, r3
 8007dba:	f77f af0b 	ble.w	8007bd4 <__ieee754_pow+0x794>
 8007dbe:	4b2e      	ldr	r3, [pc, #184]	; (8007e78 <__ieee754_pow+0xa38>)
 8007dc0:	440b      	add	r3, r1
 8007dc2:	4303      	orrs	r3, r0
 8007dc4:	d00b      	beq.n	8007dde <__ieee754_pow+0x99e>
 8007dc6:	a326      	add	r3, pc, #152	; (adr r3, 8007e60 <__ieee754_pow+0xa20>)
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	ec51 0b18 	vmov	r0, r1, d8
 8007dd0:	f7f8 fc12 	bl	80005f8 <__aeabi_dmul>
 8007dd4:	a322      	add	r3, pc, #136	; (adr r3, 8007e60 <__ieee754_pow+0xa20>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f7ff bbca 	b.w	8007572 <__ieee754_pow+0x132>
 8007dde:	4622      	mov	r2, r4
 8007de0:	462b      	mov	r3, r5
 8007de2:	f7f8 fa51 	bl	8000288 <__aeabi_dsub>
 8007de6:	4642      	mov	r2, r8
 8007de8:	464b      	mov	r3, r9
 8007dea:	f7f8 fe8b 	bl	8000b04 <__aeabi_dcmpge>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f43f aef0 	beq.w	8007bd4 <__ieee754_pow+0x794>
 8007df4:	e7e7      	b.n	8007dc6 <__ieee754_pow+0x986>
 8007df6:	f04f 0a00 	mov.w	sl, #0
 8007dfa:	e717      	b.n	8007c2c <__ieee754_pow+0x7ec>
 8007dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e00:	4619      	mov	r1, r3
 8007e02:	e7d2      	b.n	8007daa <__ieee754_pow+0x96a>
 8007e04:	491a      	ldr	r1, [pc, #104]	; (8007e70 <__ieee754_pow+0xa30>)
 8007e06:	2000      	movs	r0, #0
 8007e08:	f7ff bb9e 	b.w	8007548 <__ieee754_pow+0x108>
 8007e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e10:	f7ff bb9a 	b.w	8007548 <__ieee754_pow+0x108>
 8007e14:	9000      	str	r0, [sp, #0]
 8007e16:	f7ff bb76 	b.w	8007506 <__ieee754_pow+0xc6>
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	f7ff bb60 	b.w	80074e0 <__ieee754_pow+0xa0>
 8007e20:	00000000 	.word	0x00000000
 8007e24:	3fe62e43 	.word	0x3fe62e43
 8007e28:	fefa39ef 	.word	0xfefa39ef
 8007e2c:	3fe62e42 	.word	0x3fe62e42
 8007e30:	0ca86c39 	.word	0x0ca86c39
 8007e34:	be205c61 	.word	0xbe205c61
 8007e38:	72bea4d0 	.word	0x72bea4d0
 8007e3c:	3e663769 	.word	0x3e663769
 8007e40:	c5d26bf1 	.word	0xc5d26bf1
 8007e44:	3ebbbd41 	.word	0x3ebbbd41
 8007e48:	af25de2c 	.word	0xaf25de2c
 8007e4c:	3f11566a 	.word	0x3f11566a
 8007e50:	16bebd93 	.word	0x16bebd93
 8007e54:	3f66c16c 	.word	0x3f66c16c
 8007e58:	5555553e 	.word	0x5555553e
 8007e5c:	3fc55555 	.word	0x3fc55555
 8007e60:	c2f8f359 	.word	0xc2f8f359
 8007e64:	01a56e1f 	.word	0x01a56e1f
 8007e68:	3fe00000 	.word	0x3fe00000
 8007e6c:	000fffff 	.word	0x000fffff
 8007e70:	3ff00000 	.word	0x3ff00000
 8007e74:	4090cbff 	.word	0x4090cbff
 8007e78:	3f6f3400 	.word	0x3f6f3400
 8007e7c:	652b82fe 	.word	0x652b82fe
 8007e80:	3c971547 	.word	0x3c971547

08007e84 <__ieee754_sqrt>:
 8007e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e88:	ec55 4b10 	vmov	r4, r5, d0
 8007e8c:	4e56      	ldr	r6, [pc, #344]	; (8007fe8 <__ieee754_sqrt+0x164>)
 8007e8e:	43ae      	bics	r6, r5
 8007e90:	ee10 0a10 	vmov	r0, s0
 8007e94:	ee10 3a10 	vmov	r3, s0
 8007e98:	4629      	mov	r1, r5
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	d110      	bne.n	8007ec0 <__ieee754_sqrt+0x3c>
 8007e9e:	ee10 2a10 	vmov	r2, s0
 8007ea2:	462b      	mov	r3, r5
 8007ea4:	f7f8 fba8 	bl	80005f8 <__aeabi_dmul>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4620      	mov	r0, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 f9ec 	bl	800028c <__adddf3>
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	ec45 4b10 	vmov	d0, r4, r5
 8007ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	dc10      	bgt.n	8007ee6 <__ieee754_sqrt+0x62>
 8007ec4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ec8:	4330      	orrs	r0, r6
 8007eca:	d0f5      	beq.n	8007eb8 <__ieee754_sqrt+0x34>
 8007ecc:	b15d      	cbz	r5, 8007ee6 <__ieee754_sqrt+0x62>
 8007ece:	ee10 2a10 	vmov	r2, s0
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	ee10 0a10 	vmov	r0, s0
 8007ed8:	f7f8 f9d6 	bl	8000288 <__aeabi_dsub>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	f7f8 fcb4 	bl	800084c <__aeabi_ddiv>
 8007ee4:	e7e6      	b.n	8007eb4 <__ieee754_sqrt+0x30>
 8007ee6:	1509      	asrs	r1, r1, #20
 8007ee8:	d076      	beq.n	8007fd8 <__ieee754_sqrt+0x154>
 8007eea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007eee:	07ce      	lsls	r6, r1, #31
 8007ef0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007ef4:	bf5e      	ittt	pl
 8007ef6:	0fda      	lsrpl	r2, r3, #31
 8007ef8:	005b      	lslpl	r3, r3, #1
 8007efa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007efe:	0fda      	lsrs	r2, r3, #31
 8007f00:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007f04:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007f08:	2000      	movs	r0, #0
 8007f0a:	106d      	asrs	r5, r5, #1
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	f04f 0e16 	mov.w	lr, #22
 8007f12:	4684      	mov	ip, r0
 8007f14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f18:	eb0c 0401 	add.w	r4, ip, r1
 8007f1c:	4294      	cmp	r4, r2
 8007f1e:	bfde      	ittt	le
 8007f20:	1b12      	suble	r2, r2, r4
 8007f22:	eb04 0c01 	addle.w	ip, r4, r1
 8007f26:	1840      	addle	r0, r0, r1
 8007f28:	0052      	lsls	r2, r2, #1
 8007f2a:	f1be 0e01 	subs.w	lr, lr, #1
 8007f2e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f32:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007f36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f3a:	d1ed      	bne.n	8007f18 <__ieee754_sqrt+0x94>
 8007f3c:	4671      	mov	r1, lr
 8007f3e:	2720      	movs	r7, #32
 8007f40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f44:	4562      	cmp	r2, ip
 8007f46:	eb04 060e 	add.w	r6, r4, lr
 8007f4a:	dc02      	bgt.n	8007f52 <__ieee754_sqrt+0xce>
 8007f4c:	d113      	bne.n	8007f76 <__ieee754_sqrt+0xf2>
 8007f4e:	429e      	cmp	r6, r3
 8007f50:	d811      	bhi.n	8007f76 <__ieee754_sqrt+0xf2>
 8007f52:	2e00      	cmp	r6, #0
 8007f54:	eb06 0e04 	add.w	lr, r6, r4
 8007f58:	da43      	bge.n	8007fe2 <__ieee754_sqrt+0x15e>
 8007f5a:	f1be 0f00 	cmp.w	lr, #0
 8007f5e:	db40      	blt.n	8007fe2 <__ieee754_sqrt+0x15e>
 8007f60:	f10c 0801 	add.w	r8, ip, #1
 8007f64:	eba2 020c 	sub.w	r2, r2, ip
 8007f68:	429e      	cmp	r6, r3
 8007f6a:	bf88      	it	hi
 8007f6c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007f70:	1b9b      	subs	r3, r3, r6
 8007f72:	4421      	add	r1, r4
 8007f74:	46c4      	mov	ip, r8
 8007f76:	0052      	lsls	r2, r2, #1
 8007f78:	3f01      	subs	r7, #1
 8007f7a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007f82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f86:	d1dd      	bne.n	8007f44 <__ieee754_sqrt+0xc0>
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	d006      	beq.n	8007f9a <__ieee754_sqrt+0x116>
 8007f8c:	1c4c      	adds	r4, r1, #1
 8007f8e:	bf13      	iteet	ne
 8007f90:	3101      	addne	r1, #1
 8007f92:	3001      	addeq	r0, #1
 8007f94:	4639      	moveq	r1, r7
 8007f96:	f021 0101 	bicne.w	r1, r1, #1
 8007f9a:	1043      	asrs	r3, r0, #1
 8007f9c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007fa0:	0849      	lsrs	r1, r1, #1
 8007fa2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007fa6:	07c2      	lsls	r2, r0, #31
 8007fa8:	bf48      	it	mi
 8007faa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007fae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	463d      	mov	r5, r7
 8007fb6:	e77f      	b.n	8007eb8 <__ieee754_sqrt+0x34>
 8007fb8:	0ada      	lsrs	r2, r3, #11
 8007fba:	3815      	subs	r0, #21
 8007fbc:	055b      	lsls	r3, r3, #21
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	d0fa      	beq.n	8007fb8 <__ieee754_sqrt+0x134>
 8007fc2:	02d7      	lsls	r7, r2, #11
 8007fc4:	d50a      	bpl.n	8007fdc <__ieee754_sqrt+0x158>
 8007fc6:	f1c1 0420 	rsb	r4, r1, #32
 8007fca:	fa23 f404 	lsr.w	r4, r3, r4
 8007fce:	1e4d      	subs	r5, r1, #1
 8007fd0:	408b      	lsls	r3, r1
 8007fd2:	4322      	orrs	r2, r4
 8007fd4:	1b41      	subs	r1, r0, r5
 8007fd6:	e788      	b.n	8007eea <__ieee754_sqrt+0x66>
 8007fd8:	4608      	mov	r0, r1
 8007fda:	e7f0      	b.n	8007fbe <__ieee754_sqrt+0x13a>
 8007fdc:	0052      	lsls	r2, r2, #1
 8007fde:	3101      	adds	r1, #1
 8007fe0:	e7ef      	b.n	8007fc2 <__ieee754_sqrt+0x13e>
 8007fe2:	46e0      	mov	r8, ip
 8007fe4:	e7be      	b.n	8007f64 <__ieee754_sqrt+0xe0>
 8007fe6:	bf00      	nop
 8007fe8:	7ff00000 	.word	0x7ff00000

08007fec <fabs>:
 8007fec:	ec51 0b10 	vmov	r0, r1, d0
 8007ff0:	ee10 2a10 	vmov	r2, s0
 8007ff4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ff8:	ec43 2b10 	vmov	d0, r2, r3
 8007ffc:	4770      	bx	lr

08007ffe <finite>:
 8007ffe:	b082      	sub	sp, #8
 8008000:	ed8d 0b00 	vstr	d0, [sp]
 8008004:	9801      	ldr	r0, [sp, #4]
 8008006:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800800a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800800e:	0fc0      	lsrs	r0, r0, #31
 8008010:	b002      	add	sp, #8
 8008012:	4770      	bx	lr
 8008014:	0000      	movs	r0, r0
	...

08008018 <nan>:
 8008018:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008020 <nan+0x8>
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	00000000 	.word	0x00000000
 8008024:	7ff80000 	.word	0x7ff80000

08008028 <rint>:
 8008028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800802a:	ec51 0b10 	vmov	r0, r1, d0
 800802e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008032:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008036:	2e13      	cmp	r6, #19
 8008038:	ee10 4a10 	vmov	r4, s0
 800803c:	460b      	mov	r3, r1
 800803e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008042:	dc58      	bgt.n	80080f6 <rint+0xce>
 8008044:	2e00      	cmp	r6, #0
 8008046:	da2b      	bge.n	80080a0 <rint+0x78>
 8008048:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800804c:	4302      	orrs	r2, r0
 800804e:	d023      	beq.n	8008098 <rint+0x70>
 8008050:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008054:	4302      	orrs	r2, r0
 8008056:	4254      	negs	r4, r2
 8008058:	4314      	orrs	r4, r2
 800805a:	0c4b      	lsrs	r3, r1, #17
 800805c:	0b24      	lsrs	r4, r4, #12
 800805e:	045b      	lsls	r3, r3, #17
 8008060:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008064:	ea44 0103 	orr.w	r1, r4, r3
 8008068:	4b32      	ldr	r3, [pc, #200]	; (8008134 <rint+0x10c>)
 800806a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800806e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	4630      	mov	r0, r6
 8008078:	4639      	mov	r1, r7
 800807a:	f7f8 f907 	bl	800028c <__adddf3>
 800807e:	e9cd 0100 	strd	r0, r1, [sp]
 8008082:	463b      	mov	r3, r7
 8008084:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008088:	4632      	mov	r2, r6
 800808a:	f7f8 f8fd 	bl	8000288 <__aeabi_dsub>
 800808e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008092:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008096:	4639      	mov	r1, r7
 8008098:	ec41 0b10 	vmov	d0, r0, r1
 800809c:	b003      	add	sp, #12
 800809e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080a0:	4a25      	ldr	r2, [pc, #148]	; (8008138 <rint+0x110>)
 80080a2:	4132      	asrs	r2, r6
 80080a4:	ea01 0702 	and.w	r7, r1, r2
 80080a8:	4307      	orrs	r7, r0
 80080aa:	d0f5      	beq.n	8008098 <rint+0x70>
 80080ac:	0851      	lsrs	r1, r2, #1
 80080ae:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80080b2:	4314      	orrs	r4, r2
 80080b4:	d00c      	beq.n	80080d0 <rint+0xa8>
 80080b6:	ea23 0201 	bic.w	r2, r3, r1
 80080ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80080be:	2e13      	cmp	r6, #19
 80080c0:	fa43 f606 	asr.w	r6, r3, r6
 80080c4:	bf0c      	ite	eq
 80080c6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80080ca:	2400      	movne	r4, #0
 80080cc:	ea42 0306 	orr.w	r3, r2, r6
 80080d0:	4918      	ldr	r1, [pc, #96]	; (8008134 <rint+0x10c>)
 80080d2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80080d6:	4622      	mov	r2, r4
 80080d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080dc:	4620      	mov	r0, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	f7f8 f8d4 	bl	800028c <__adddf3>
 80080e4:	e9cd 0100 	strd	r0, r1, [sp]
 80080e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080ec:	4622      	mov	r2, r4
 80080ee:	462b      	mov	r3, r5
 80080f0:	f7f8 f8ca 	bl	8000288 <__aeabi_dsub>
 80080f4:	e7d0      	b.n	8008098 <rint+0x70>
 80080f6:	2e33      	cmp	r6, #51	; 0x33
 80080f8:	dd07      	ble.n	800810a <rint+0xe2>
 80080fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80080fe:	d1cb      	bne.n	8008098 <rint+0x70>
 8008100:	ee10 2a10 	vmov	r2, s0
 8008104:	f7f8 f8c2 	bl	800028c <__adddf3>
 8008108:	e7c6      	b.n	8008098 <rint+0x70>
 800810a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800810e:	f04f 36ff 	mov.w	r6, #4294967295
 8008112:	40d6      	lsrs	r6, r2
 8008114:	4230      	tst	r0, r6
 8008116:	d0bf      	beq.n	8008098 <rint+0x70>
 8008118:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800811c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008120:	bf1f      	itttt	ne
 8008122:	ea24 0101 	bicne.w	r1, r4, r1
 8008126:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800812a:	fa44 f202 	asrne.w	r2, r4, r2
 800812e:	ea41 0402 	orrne.w	r4, r1, r2
 8008132:	e7cd      	b.n	80080d0 <rint+0xa8>
 8008134:	08008480 	.word	0x08008480
 8008138:	000fffff 	.word	0x000fffff
 800813c:	00000000 	.word	0x00000000

08008140 <scalbn>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	ec55 4b10 	vmov	r4, r5, d0
 8008146:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800814a:	4606      	mov	r6, r0
 800814c:	462b      	mov	r3, r5
 800814e:	b99a      	cbnz	r2, 8008178 <scalbn+0x38>
 8008150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008154:	4323      	orrs	r3, r4
 8008156:	d036      	beq.n	80081c6 <scalbn+0x86>
 8008158:	4b39      	ldr	r3, [pc, #228]	; (8008240 <scalbn+0x100>)
 800815a:	4629      	mov	r1, r5
 800815c:	ee10 0a10 	vmov	r0, s0
 8008160:	2200      	movs	r2, #0
 8008162:	f7f8 fa49 	bl	80005f8 <__aeabi_dmul>
 8008166:	4b37      	ldr	r3, [pc, #220]	; (8008244 <scalbn+0x104>)
 8008168:	429e      	cmp	r6, r3
 800816a:	4604      	mov	r4, r0
 800816c:	460d      	mov	r5, r1
 800816e:	da10      	bge.n	8008192 <scalbn+0x52>
 8008170:	a32b      	add	r3, pc, #172	; (adr r3, 8008220 <scalbn+0xe0>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	e03a      	b.n	80081ee <scalbn+0xae>
 8008178:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800817c:	428a      	cmp	r2, r1
 800817e:	d10c      	bne.n	800819a <scalbn+0x5a>
 8008180:	ee10 2a10 	vmov	r2, s0
 8008184:	4620      	mov	r0, r4
 8008186:	4629      	mov	r1, r5
 8008188:	f7f8 f880 	bl	800028c <__adddf3>
 800818c:	4604      	mov	r4, r0
 800818e:	460d      	mov	r5, r1
 8008190:	e019      	b.n	80081c6 <scalbn+0x86>
 8008192:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008196:	460b      	mov	r3, r1
 8008198:	3a36      	subs	r2, #54	; 0x36
 800819a:	4432      	add	r2, r6
 800819c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80081a0:	428a      	cmp	r2, r1
 80081a2:	dd08      	ble.n	80081b6 <scalbn+0x76>
 80081a4:	2d00      	cmp	r5, #0
 80081a6:	a120      	add	r1, pc, #128	; (adr r1, 8008228 <scalbn+0xe8>)
 80081a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ac:	da1c      	bge.n	80081e8 <scalbn+0xa8>
 80081ae:	a120      	add	r1, pc, #128	; (adr r1, 8008230 <scalbn+0xf0>)
 80081b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081b4:	e018      	b.n	80081e8 <scalbn+0xa8>
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	dd08      	ble.n	80081cc <scalbn+0x8c>
 80081ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80081c6:	ec45 4b10 	vmov	d0, r4, r5
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
 80081cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80081d0:	da19      	bge.n	8008206 <scalbn+0xc6>
 80081d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80081d6:	429e      	cmp	r6, r3
 80081d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80081dc:	dd0a      	ble.n	80081f4 <scalbn+0xb4>
 80081de:	a112      	add	r1, pc, #72	; (adr r1, 8008228 <scalbn+0xe8>)
 80081e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e2      	bne.n	80081ae <scalbn+0x6e>
 80081e8:	a30f      	add	r3, pc, #60	; (adr r3, 8008228 <scalbn+0xe8>)
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	f7f8 fa03 	bl	80005f8 <__aeabi_dmul>
 80081f2:	e7cb      	b.n	800818c <scalbn+0x4c>
 80081f4:	a10a      	add	r1, pc, #40	; (adr r1, 8008220 <scalbn+0xe0>)
 80081f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0b8      	beq.n	8008170 <scalbn+0x30>
 80081fe:	a10e      	add	r1, pc, #56	; (adr r1, 8008238 <scalbn+0xf8>)
 8008200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008204:	e7b4      	b.n	8008170 <scalbn+0x30>
 8008206:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800820a:	3236      	adds	r2, #54	; 0x36
 800820c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008210:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008214:	4620      	mov	r0, r4
 8008216:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <scalbn+0x108>)
 8008218:	2200      	movs	r2, #0
 800821a:	e7e8      	b.n	80081ee <scalbn+0xae>
 800821c:	f3af 8000 	nop.w
 8008220:	c2f8f359 	.word	0xc2f8f359
 8008224:	01a56e1f 	.word	0x01a56e1f
 8008228:	8800759c 	.word	0x8800759c
 800822c:	7e37e43c 	.word	0x7e37e43c
 8008230:	8800759c 	.word	0x8800759c
 8008234:	fe37e43c 	.word	0xfe37e43c
 8008238:	c2f8f359 	.word	0xc2f8f359
 800823c:	81a56e1f 	.word	0x81a56e1f
 8008240:	43500000 	.word	0x43500000
 8008244:	ffff3cb0 	.word	0xffff3cb0
 8008248:	3c900000 	.word	0x3c900000

0800824c <_init>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	bf00      	nop
 8008250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008252:	bc08      	pop	{r3}
 8008254:	469e      	mov	lr, r3
 8008256:	4770      	bx	lr

08008258 <_fini>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr
