
Production.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08009b58  08009b58  00019b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009db8  08009db8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009db8  08009db8  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009db8  08009db8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009db8  08009db8  00019db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dbc  08009dbc  00019dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006300  200001f0  08009fac  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200064f0  08009fac  000264f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113d0  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e1  00000000  00000000  000315ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00033dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00034d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c67f  00000000  00000000  00035bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f42  00000000  00000000  00052247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a77ca  00000000  00000000  00064189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b953  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004980  00000000  00000000  0010b9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b3c 	.word	0x08009b3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009b3c 	.word	0x08009b3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <delay>:
#define timer htim2


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <delay+0x30>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000baa:	bf00      	nop
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <delay+0x30>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3f9      	bcc.n	8000bac <delay+0x14>
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	2000640c 	.word	0x2000640c

08000bcc <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	2108      	movs	r1, #8
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f004 fe58 	bl	8005898 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	08db      	lsrs	r3, r3, #3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	481c      	ldr	r0, [pc, #112]	; (8000c6c <send_to_lcd+0xa0>)
 8000bfa:	f004 fe4d 	bl	8005898 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <send_to_lcd+0xa0>)
 8000c10:	f004 fe42 	bl	8005898 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	085b      	lsrs	r3, r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	2101      	movs	r1, #1
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <send_to_lcd+0xa0>)
 8000c26:	f004 fe37 	bl	8005898 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f004 fe2d 	bl	8005898 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2120      	movs	r1, #32
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f004 fe27 	bl	8005898 <HAL_GPIO_WritePin>
	delay (10);
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f7ff ffa4 	bl	8000b98 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2120      	movs	r1, #32
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f004 fe1e 	bl	8005898 <HAL_GPIO_WritePin>
	delay (10);
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f7ff ff9b 	bl	8000b98 <delay>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	48000400 	.word	0x48000400

08000c70 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ffa1 	bl	8000bcc <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff98 	bl	8000bcc <send_to_lcd>
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff87 	bl	8000bcc <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff7e 	bl	8000bcc <send_to_lcd>
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <lcd_clear>:

void lcd_clear (void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff ffc7 	bl	8000c70 <lcd_send_cmd>
	delay(2000);
 8000ce2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ce6:	f7ff ff57 	bl	8000b98 <delay>
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}

08000cee <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
    switch (row)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <lcd_put_cur+0x18>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d005      	beq.n	8000d10 <lcd_put_cur+0x22>
 8000d04:	e009      	b.n	8000d1a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0c:	603b      	str	r3, [r7, #0]
            break;
 8000d0e:	e004      	b.n	8000d1a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d16:	603b      	str	r3, [r7, #0]
            break;
 8000d18:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ffa6 	bl	8000c70 <lcd_send_cmd>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <lcd_init>:


void lcd_init (void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	delay(5000);  // wait for >40ms
 8000d30:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d34:	f7ff ff30 	bl	8000b98 <delay>
	lcd_send_cmd (0x30);
 8000d38:	2030      	movs	r0, #48	; 0x30
 8000d3a:	f7ff ff99 	bl	8000c70 <lcd_send_cmd>
	delay(5000);  // wait for >4.1ms
 8000d3e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d42:	f7ff ff29 	bl	8000b98 <delay>
	lcd_send_cmd (0x30);
 8000d46:	2030      	movs	r0, #48	; 0x30
 8000d48:	f7ff ff92 	bl	8000c70 <lcd_send_cmd>
	delay(100);  // wait for >100us
 8000d4c:	2064      	movs	r0, #100	; 0x64
 8000d4e:	f7ff ff23 	bl	8000b98 <delay>
	lcd_send_cmd (0x30);
 8000d52:	2030      	movs	r0, #48	; 0x30
 8000d54:	f7ff ff8c 	bl	8000c70 <lcd_send_cmd>
	delay(10000);
 8000d58:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d5c:	f7ff ff1c 	bl	8000b98 <delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d60:	2020      	movs	r0, #32
 8000d62:	f7ff ff85 	bl	8000c70 <lcd_send_cmd>
	delay(10000);
 8000d66:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d6a:	f7ff ff15 	bl	8000b98 <delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d6e:	2028      	movs	r0, #40	; 0x28
 8000d70:	f7ff ff7e 	bl	8000c70 <lcd_send_cmd>
	delay(1000);
 8000d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d78:	f7ff ff0e 	bl	8000b98 <delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d7c:	2008      	movs	r0, #8
 8000d7e:	f7ff ff77 	bl	8000c70 <lcd_send_cmd>
	delay(1000);
 8000d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d86:	f7ff ff07 	bl	8000b98 <delay>
	lcd_send_cmd (0x01);  // clear display
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff ff70 	bl	8000c70 <lcd_send_cmd>
	delay(1000);
 8000d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d94:	f7ff ff00 	bl	8000b98 <delay>
	delay(1000);
 8000d98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9c:	f7ff fefc 	bl	8000b98 <delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000da0:	2006      	movs	r0, #6
 8000da2:	f7ff ff65 	bl	8000c70 <lcd_send_cmd>
	delay(1000);
 8000da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000daa:	f7ff fef5 	bl	8000b98 <delay>
	lcd_send_cmd (0x0F); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000dae:	200f      	movs	r0, #15
 8000db0:	f7ff ff5e 	bl	8000c70 <lcd_send_cmd>
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000dc0:	e006      	b.n	8000dd0 <lcd_send_string+0x18>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	1c5a      	adds	r2, r3, #1
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff6a 	bl	8000ca4 <lcd_send_data>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f4      	bne.n	8000dc2 <lcd_send_string+0xa>
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	0000      	movs	r0, r0
 8000de4:	0000      	movs	r0, r0
	...

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//Get variables from Flash Memory
	//get and store CAN IDs
	CAN_IDs=(*(__IO uint32_t *) 0x0800F800);
 8000dee:	4bb4      	ldr	r3, [pc, #720]	; (80010c0 <main+0x2d8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4bb3      	ldr	r3, [pc, #716]	; (80010c4 <main+0x2dc>)
 8000df6:	601a      	str	r2, [r3, #0]
	memcpy(id_arr, wordToBytes(CAN_IDs), 4);
 8000df8:	4bb2      	ldr	r3, [pc, #712]	; (80010c4 <main+0x2dc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f003 f9b7 	bl	8004170 <wordToBytes>
 8000e02:	4603      	mov	r3, r0
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4baf      	ldr	r3, [pc, #700]	; (80010c8 <main+0x2e0>)
 8000e0a:	601a      	str	r2, [r3, #0]
	can_id_1=id_arr[0];
 8000e0c:	4bae      	ldr	r3, [pc, #696]	; (80010c8 <main+0x2e0>)
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	4bae      	ldr	r3, [pc, #696]	; (80010cc <main+0x2e4>)
 8000e12:	701a      	strb	r2, [r3, #0]
	can_id_2=id_arr[1];
 8000e14:	4bac      	ldr	r3, [pc, #688]	; (80010c8 <main+0x2e0>)
 8000e16:	785a      	ldrb	r2, [r3, #1]
 8000e18:	4bad      	ldr	r3, [pc, #692]	; (80010d0 <main+0x2e8>)
 8000e1a:	701a      	strb	r2, [r3, #0]
	can_id_3=id_arr[2];
 8000e1c:	4baa      	ldr	r3, [pc, #680]	; (80010c8 <main+0x2e0>)
 8000e1e:	789a      	ldrb	r2, [r3, #2]
 8000e20:	4bac      	ldr	r3, [pc, #688]	; (80010d4 <main+0x2ec>)
 8000e22:	701a      	strb	r2, [r3, #0]
	//if duplicate IDs set IDs to 1, 2, and 3 respectively
	if(can_id_1==can_id_2 || can_id_1==can_id_3||can_id_2==can_id_3){
 8000e24:	4ba9      	ldr	r3, [pc, #676]	; (80010cc <main+0x2e4>)
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	4ba9      	ldr	r3, [pc, #676]	; (80010d0 <main+0x2e8>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d00b      	beq.n	8000e48 <main+0x60>
 8000e30:	4ba6      	ldr	r3, [pc, #664]	; (80010cc <main+0x2e4>)
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	4ba7      	ldr	r3, [pc, #668]	; (80010d4 <main+0x2ec>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d005      	beq.n	8000e48 <main+0x60>
 8000e3c:	4ba4      	ldr	r3, [pc, #656]	; (80010d0 <main+0x2e8>)
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	4ba4      	ldr	r3, [pc, #656]	; (80010d4 <main+0x2ec>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d108      	bne.n	8000e5a <main+0x72>
		can_id_1=1;
 8000e48:	4ba0      	ldr	r3, [pc, #640]	; (80010cc <main+0x2e4>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
		can_id_2=2;
 8000e4e:	4ba0      	ldr	r3, [pc, #640]	; (80010d0 <main+0x2e8>)
 8000e50:	2202      	movs	r2, #2
 8000e52:	701a      	strb	r2, [r3, #0]
		can_id_3=3;
 8000e54:	4b9f      	ldr	r3, [pc, #636]	; (80010d4 <main+0x2ec>)
 8000e56:	2203      	movs	r2, #3
 8000e58:	701a      	strb	r2, [r3, #0]
	}

	//get the baud rate
	baud_pos=(uint8_t)(*(__IO uint32_t *) 0x0800F804);
 8000e5a:	4b9f      	ldr	r3, [pc, #636]	; (80010d8 <main+0x2f0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	4b9e      	ldr	r3, [pc, #632]	; (80010dc <main+0x2f4>)
 8000e62:	701a      	strb	r2, [r3, #0]
	//if invalid baud rate then set to 1M
	if(baud_pos<0||baud_pos>3)
 8000e64:	4b9d      	ldr	r3, [pc, #628]	; (80010dc <main+0x2f4>)
 8000e66:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db04      	blt.n	8000e78 <main+0x90>
 8000e6e:	4b9b      	ldr	r3, [pc, #620]	; (80010dc <main+0x2f4>)
 8000e70:	f993 3000 	ldrsb.w	r3, [r3]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	dd02      	ble.n	8000e7e <main+0x96>
		baud_pos=3;
 8000e78:	4b98      	ldr	r3, [pc, #608]	; (80010dc <main+0x2f4>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	701a      	strb	r2, [r3, #0]
	PSC=pow(2,4-baud_pos);//set prescaler for CAN timer
 8000e7e:	4b97      	ldr	r3, [pc, #604]	; (80010dc <main+0x2f4>)
 8000e80:	f993 3000 	ldrsb.w	r3, [r3]
 8000e84:	f1c3 0304 	rsb	r3, r3, #4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fb4b 	bl	8000524 <__aeabi_i2d>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	ec43 2b11 	vmov	d1, r2, r3
 8000e96:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8001098 <main+0x2b0>
 8000e9a:	f007 fcdd 	bl	8008858 <pow>
 8000e9e:	ec53 2b10 	vmov	r2, r3, d0
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f7ff fe57 	bl	8000b58 <__aeabi_d2uiz>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b8c      	ldr	r3, [pc, #560]	; (80010e0 <main+0x2f8>)
 8000eb0:	701a      	strb	r2, [r3, #0]

	//get the sample rate and set it to 100sps if the values is out of the allowed range
	sample_rate=(uint16_t)(*(__IO uint32_t *) 0x0800F808);
 8000eb2:	4b8c      	ldr	r3, [pc, #560]	; (80010e4 <main+0x2fc>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b8b      	ldr	r3, [pc, #556]	; (80010e8 <main+0x300>)
 8000eba:	801a      	strh	r2, [r3, #0]
	if(sample_rate<(uint16_t)30 || sample_rate>(uint16_t)10000)
 8000ebc:	4b8a      	ldr	r3, [pc, #552]	; (80010e8 <main+0x300>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	2b1d      	cmp	r3, #29
 8000ec2:	d905      	bls.n	8000ed0 <main+0xe8>
 8000ec4:	4b88      	ldr	r3, [pc, #544]	; (80010e8 <main+0x300>)
 8000ec6:	881b      	ldrh	r3, [r3, #0]
 8000ec8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d902      	bls.n	8000ed6 <main+0xee>
		sample_rate=100;
 8000ed0:	4b85      	ldr	r3, [pc, #532]	; (80010e8 <main+0x300>)
 8000ed2:	2264      	movs	r2, #100	; 0x64
 8000ed4:	801a      	strh	r2, [r3, #0]

	// retrieve the analog enabled booleans
	enable_word=(*(__IO uint32_t *) 0x0800F80C);
 8000ed6:	4b85      	ldr	r3, [pc, #532]	; (80010ec <main+0x304>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b84      	ldr	r3, [pc, #528]	; (80010f0 <main+0x308>)
 8000ede:	601a      	str	r2, [r3, #0]
	memcpy(analog_enable_arr, wordToBytes(enable_word), 4);
 8000ee0:	4b83      	ldr	r3, [pc, #524]	; (80010f0 <main+0x308>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 f943 	bl	8004170 <wordToBytes>
 8000eea:	4603      	mov	r3, r0
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <main+0x30c>)
 8000ef2:	601a      	str	r2, [r3, #0]
	analog_1_enabled=analog_enable_arr[0];
 8000ef4:	4b7f      	ldr	r3, [pc, #508]	; (80010f4 <main+0x30c>)
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	4b7f      	ldr	r3, [pc, #508]	; (80010f8 <main+0x310>)
 8000efa:	701a      	strb	r2, [r3, #0]
	analog_2_enabled=analog_enable_arr[1];
 8000efc:	4b7d      	ldr	r3, [pc, #500]	; (80010f4 <main+0x30c>)
 8000efe:	785a      	ldrb	r2, [r3, #1]
 8000f00:	4b7e      	ldr	r3, [pc, #504]	; (80010fc <main+0x314>)
 8000f02:	701a      	strb	r2, [r3, #0]
	analog_3_enabled=analog_enable_arr[2];
 8000f04:	4b7b      	ldr	r3, [pc, #492]	; (80010f4 <main+0x30c>)
 8000f06:	789a      	ldrb	r2, [r3, #2]
 8000f08:	4b7d      	ldr	r3, [pc, #500]	; (8001100 <main+0x318>)
 8000f0a:	701a      	strb	r2, [r3, #0]

	//sample rate cap for number of channels enabled
	if(sample_rate<30||(analog_1_enabled && analog_2_enabled && analog_3_enabled && sample_rate > 3000/(log(PSC)/log(2)))||(((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))&& sample_rate>5000/(log(PSC)/log(2)))||(sample_rate>10000/(log(PSC)/log(2)))){
 8000f0c:	4b76      	ldr	r3, [pc, #472]	; (80010e8 <main+0x300>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	2b1d      	cmp	r3, #29
 8000f12:	f240 80a0 	bls.w	8001056 <main+0x26e>
 8000f16:	4b78      	ldr	r3, [pc, #480]	; (80010f8 <main+0x310>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d030      	beq.n	8000f80 <main+0x198>
 8000f1e:	4b77      	ldr	r3, [pc, #476]	; (80010fc <main+0x314>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d02c      	beq.n	8000f80 <main+0x198>
 8000f26:	4b76      	ldr	r3, [pc, #472]	; (8001100 <main+0x318>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d028      	beq.n	8000f80 <main+0x198>
 8000f2e:	4b6e      	ldr	r3, [pc, #440]	; (80010e8 <main+0x300>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff faf6 	bl	8000524 <__aeabi_i2d>
 8000f38:	4604      	mov	r4, r0
 8000f3a:	460d      	mov	r5, r1
 8000f3c:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <main+0x2f8>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fadf 	bl	8000504 <__aeabi_ui2d>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	ec43 2b10 	vmov	d0, r2, r3
 8000f4e:	f007 fc3b 	bl	80087c8 <log>
 8000f52:	ec51 0b10 	vmov	r0, r1, d0
 8000f56:	a352      	add	r3, pc, #328	; (adr r3, 80010a0 <main+0x2b8>)
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5c:	f7ff fc76 	bl	800084c <__aeabi_ddiv>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	a150      	add	r1, pc, #320	; (adr r1, 80010a8 <main+0x2c0>)
 8000f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f6a:	f7ff fc6f 	bl	800084c <__aeabi_ddiv>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4620      	mov	r0, r4
 8000f74:	4629      	mov	r1, r5
 8000f76:	f7ff fdcf 	bl	8000b18 <__aeabi_dcmpgt>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d16a      	bne.n	8001056 <main+0x26e>
 8000f80:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <main+0x310>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <main+0x1a8>
 8000f88:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <main+0x314>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10f      	bne.n	8000fb0 <main+0x1c8>
 8000f90:	4b59      	ldr	r3, [pc, #356]	; (80010f8 <main+0x310>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <main+0x1b8>
 8000f98:	4b59      	ldr	r3, [pc, #356]	; (8001100 <main+0x318>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d107      	bne.n	8000fb0 <main+0x1c8>
 8000fa0:	4b56      	ldr	r3, [pc, #344]	; (80010fc <main+0x314>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d02c      	beq.n	8001002 <main+0x21a>
 8000fa8:	4b55      	ldr	r3, [pc, #340]	; (8001100 <main+0x318>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d028      	beq.n	8001002 <main+0x21a>
 8000fb0:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <main+0x300>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fab5 	bl	8000524 <__aeabi_i2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <main+0x2f8>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fa9e 	bl	8000504 <__aeabi_ui2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	ec43 2b10 	vmov	d0, r2, r3
 8000fd0:	f007 fbfa 	bl	80087c8 <log>
 8000fd4:	ec51 0b10 	vmov	r0, r1, d0
 8000fd8:	a331      	add	r3, pc, #196	; (adr r3, 80010a0 <main+0x2b8>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fc35 	bl	800084c <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	a132      	add	r1, pc, #200	; (adr r1, 80010b0 <main+0x2c8>)
 8000fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fec:	f7ff fc2e 	bl	800084c <__aeabi_ddiv>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f7ff fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d129      	bne.n	8001056 <main+0x26e>
 8001002:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <main+0x300>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa8c 	bl	8000524 <__aeabi_i2d>
 800100c:	4604      	mov	r4, r0
 800100e:	460d      	mov	r5, r1
 8001010:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <main+0x2f8>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa75 	bl	8000504 <__aeabi_ui2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	ec43 2b10 	vmov	d0, r2, r3
 8001022:	f007 fbd1 	bl	80087c8 <log>
 8001026:	ec51 0b10 	vmov	r0, r1, d0
 800102a:	a31d      	add	r3, pc, #116	; (adr r3, 80010a0 <main+0x2b8>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fc0c 	bl	800084c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	a11f      	add	r1, pc, #124	; (adr r1, 80010b8 <main+0x2d0>)
 800103a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800103e:	f7ff fc05 	bl	800084c <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4620      	mov	r0, r4
 8001048:	4629      	mov	r1, r5
 800104a:	f7ff fd65 	bl	8000b18 <__aeabi_dcmpgt>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 808f 	beq.w	8001174 <main+0x38c>
		sample_rate=(analog_1_enabled && analog_2_enabled && analog_3_enabled)?3000:((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))?5000:10000;
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <main+0x310>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d007      	beq.n	800106e <main+0x286>
 800105e:	4b27      	ldr	r3, [pc, #156]	; (80010fc <main+0x314>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <main+0x286>
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <main+0x318>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d155      	bne.n	800111a <main+0x332>
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <main+0x310>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <main+0x296>
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <main+0x314>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d147      	bne.n	800110e <main+0x326>
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <main+0x310>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <main+0x2a6>
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <main+0x318>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d13f      	bne.n	800110e <main+0x326>
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <main+0x314>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	e036      	b.n	8001104 <main+0x31c>
 8001096:	bf00      	nop
 8001098:	00000000 	.word	0x00000000
 800109c:	40000000 	.word	0x40000000
 80010a0:	fefa39ef 	.word	0xfefa39ef
 80010a4:	3fe62e42 	.word	0x3fe62e42
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40a77000 	.word	0x40a77000
 80010b0:	00000000 	.word	0x00000000
 80010b4:	40b38800 	.word	0x40b38800
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40c38800 	.word	0x40c38800
 80010c0:	0800f800 	.word	0x0800f800
 80010c4:	20006398 	.word	0x20006398
 80010c8:	20000250 	.word	0x20000250
 80010cc:	200063f0 	.word	0x200063f0
 80010d0:	20002320 	.word	0x20002320
 80010d4:	20000244 	.word	0x20000244
 80010d8:	0800f804 	.word	0x0800f804
 80010dc:	2000016f 	.word	0x2000016f
 80010e0:	20000000 	.word	0x20000000
 80010e4:	0800f808 	.word	0x0800f808
 80010e8:	20000172 	.word	0x20000172
 80010ec:	0800f80c 	.word	0x0800f80c
 80010f0:	20002324 	.word	0x20002324
 80010f4:	200063a8 	.word	0x200063a8
 80010f8:	20000002 	.word	0x20000002
 80010fc:	20000003 	.word	0x20000003
 8001100:	20000004 	.word	0x20000004
 8001104:	d006      	beq.n	8001114 <main+0x32c>
 8001106:	4b42      	ldr	r3, [pc, #264]	; (8001210 <main+0x428>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <main+0x32c>
 800110e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001112:	e004      	b.n	800111e <main+0x336>
 8001114:	f242 7310 	movw	r3, #10000	; 0x2710
 8001118:	e001      	b.n	800111e <main+0x336>
 800111a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800111e:	4a3d      	ldr	r2, [pc, #244]	; (8001214 <main+0x42c>)
 8001120:	8013      	strh	r3, [r2, #0]
		sample_rate/=(log(PSC)/log(2));
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <main+0x430>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f9ec 	bl	8000504 <__aeabi_ui2d>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	ec43 2b10 	vmov	d0, r2, r3
 8001134:	f007 fb48 	bl	80087c8 <log>
 8001138:	ec51 0b10 	vmov	r0, r1, d0
 800113c:	a332      	add	r3, pc, #200	; (adr r3, 8001208 <main+0x420>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fb83 	bl	800084c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4614      	mov	r4, r2
 800114c:	461d      	mov	r5, r3
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <main+0x42c>)
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f9e6 	bl	8000524 <__aeabi_i2d>
 8001158:	4622      	mov	r2, r4
 800115a:	462b      	mov	r3, r5
 800115c:	f7ff fb76 	bl	800084c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fcf6 	bl	8000b58 <__aeabi_d2uiz>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <main+0x42c>)
 8001172:	801a      	strh	r2, [r3, #0]
	}

	//get the offsets
	analog_1_offset=(*(__IO uint32_t *) 0x0800F810);
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <main+0x434>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a29      	ldr	r2, [pc, #164]	; (8001220 <main+0x438>)
 800117a:	6013      	str	r3, [r2, #0]
	analog_2_offset=(*(__IO uint32_t *) 0x0800F814);
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <main+0x43c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a29      	ldr	r2, [pc, #164]	; (8001228 <main+0x440>)
 8001182:	6013      	str	r3, [r2, #0]
	analog_3_offset=(*(__IO uint32_t *) 0x0800F818);
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <main+0x444>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a29      	ldr	r2, [pc, #164]	; (8001230 <main+0x448>)
 800118a:	6013      	str	r3, [r2, #0]
	//reset offsets if the stored value is too high
	if(analog_1_offset>65534)
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <main+0x438>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001194:	4293      	cmp	r3, r2
 8001196:	d903      	bls.n	80011a0 <main+0x3b8>
		analog_1_offset=0;
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <main+0x438>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e00f      	b.n	80011c0 <main+0x3d8>
	else
		offset_scalar_1=(65535)/(float)(65535-analog_1_offset);
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <main+0x438>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80011a8:	33ff      	adds	r3, #255	; 0xff
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001234 <main+0x44c>
 80011b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <main+0x450>)
 80011bc:	edc3 7a00 	vstr	s15, [r3]
	if(analog_2_offset>65534)
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <main+0x440>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d903      	bls.n	80011d4 <main+0x3ec>
		analog_2_offset=0;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <main+0x440>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e00f      	b.n	80011f4 <main+0x40c>
	else
		offset_scalar_2=(65535)/(float)(65535-analog_2_offset);
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <main+0x440>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80011dc:	33ff      	adds	r3, #255	; 0xff
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001234 <main+0x44c>
 80011ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <main+0x454>)
 80011f0:	edc3 7a00 	vstr	s15, [r3]
	if(analog_3_offset>65534)
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <main+0x448>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d91f      	bls.n	8001240 <main+0x458>
		analog_3_offset=0;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <main+0x448>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e02b      	b.n	8001260 <main+0x478>
 8001208:	fefa39ef 	.word	0xfefa39ef
 800120c:	3fe62e42 	.word	0x3fe62e42
 8001210:	20000004 	.word	0x20000004
 8001214:	20000172 	.word	0x20000172
 8001218:	20000000 	.word	0x20000000
 800121c:	0800f810 	.word	0x0800f810
 8001220:	2000020c 	.word	0x2000020c
 8001224:	0800f814 	.word	0x0800f814
 8001228:	20000210 	.word	0x20000210
 800122c:	0800f818 	.word	0x0800f818
 8001230:	20000214 	.word	0x20000214
 8001234:	477fff00 	.word	0x477fff00
 8001238:	20000008 	.word	0x20000008
 800123c:	2000000c 	.word	0x2000000c
	else
		offset_scalar_3=(65535)/(float)(65535-analog_3_offset);
 8001240:	4bbd      	ldr	r3, [pc, #756]	; (8001538 <main+0x750>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001248:	33ff      	adds	r3, #255	; 0xff
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001252:	eddf 6aba 	vldr	s13, [pc, #744]	; 800153c <main+0x754>
 8001256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800125a:	4bb9      	ldr	r3, [pc, #740]	; (8001540 <main+0x758>)
 800125c:	edc3 7a00 	vstr	s15, [r3]

	// Set the headers for the first analog device
	headers_1.StdId = (uint32_t)can_id_1; // set the CAN ID
 8001260:	4bb8      	ldr	r3, [pc, #736]	; (8001544 <main+0x75c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4bb8      	ldr	r3, [pc, #736]	; (8001548 <main+0x760>)
 8001268:	601a      	str	r2, [r3, #0]
	headers_1.IDE = CAN_ID_STD; // use standard CAN ID (not extended)
 800126a:	4bb7      	ldr	r3, [pc, #732]	; (8001548 <main+0x760>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
	headers_1.RTR = CAN_RTR_DATA; // specify frame type
 8001270:	4bb5      	ldr	r3, [pc, #724]	; (8001548 <main+0x760>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
	headers_1.DLC = (uint32_t)2; // set the size of the data
 8001276:	4bb4      	ldr	r3, [pc, #720]	; (8001548 <main+0x760>)
 8001278:	2202      	movs	r2, #2
 800127a:	611a      	str	r2, [r3, #16]
	headers_1.TransmitGlobalTime = DISABLE; // disable transmission of time
 800127c:	4bb2      	ldr	r3, [pc, #712]	; (8001548 <main+0x760>)
 800127e:	2200      	movs	r2, #0
 8001280:	751a      	strb	r2, [r3, #20]

	// Set the headers for the second analog device
	headers_2.StdId = can_id_2; // set the CAN ID
 8001282:	4bb2      	ldr	r3, [pc, #712]	; (800154c <main+0x764>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4bb1      	ldr	r3, [pc, #708]	; (8001550 <main+0x768>)
 800128a:	601a      	str	r2, [r3, #0]
	headers_2.IDE = CAN_ID_STD; // use standard CAN ID (not extended)
 800128c:	4bb0      	ldr	r3, [pc, #704]	; (8001550 <main+0x768>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
	headers_2.RTR = CAN_RTR_DATA; // specify frame type
 8001292:	4baf      	ldr	r3, [pc, #700]	; (8001550 <main+0x768>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
	headers_2.DLC = (uint32_t)2; // set the size of the data
 8001298:	4bad      	ldr	r3, [pc, #692]	; (8001550 <main+0x768>)
 800129a:	2202      	movs	r2, #2
 800129c:	611a      	str	r2, [r3, #16]
	headers_2.TransmitGlobalTime = DISABLE; // disable transmission of time
 800129e:	4bac      	ldr	r3, [pc, #688]	; (8001550 <main+0x768>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	751a      	strb	r2, [r3, #20]

	// Set the headers for the third analog device
	headers_3.StdId = can_id_3; // set the CAN ID
 80012a4:	4bab      	ldr	r3, [pc, #684]	; (8001554 <main+0x76c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4bab      	ldr	r3, [pc, #684]	; (8001558 <main+0x770>)
 80012ac:	601a      	str	r2, [r3, #0]
	headers_3.IDE = CAN_ID_STD; // use standard CAN ID (not extended)
 80012ae:	4baa      	ldr	r3, [pc, #680]	; (8001558 <main+0x770>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
	headers_3.RTR = CAN_RTR_DATA; // specify frame type
 80012b4:	4ba8      	ldr	r3, [pc, #672]	; (8001558 <main+0x770>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
	headers_3.DLC = (uint32_t)2; // set the size of the data
 80012ba:	4ba7      	ldr	r3, [pc, #668]	; (8001558 <main+0x770>)
 80012bc:	2202      	movs	r2, #2
 80012be:	611a      	str	r2, [r3, #16]
	headers_3.TransmitGlobalTime = DISABLE; // disable transmission of time
 80012c0:	4ba5      	ldr	r3, [pc, #660]	; (8001558 <main+0x770>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	751a      	strb	r2, [r3, #20]

	//Save the stored values to the menus
	//set the baud rate
	memset(temp,0,17); // erase the temp array
 80012c6:	2211      	movs	r2, #17
 80012c8:	2100      	movs	r1, #0
 80012ca:	48a4      	ldr	r0, [pc, #656]	; (800155c <main+0x774>)
 80012cc:	f006 fdec 	bl	8007ea8 <memset>
	strncpy(temp, "Baud rate:  ",16); // copy the string to the temp array (limiting the length to 16 characters)
 80012d0:	2210      	movs	r2, #16
 80012d2:	49a3      	ldr	r1, [pc, #652]	; (8001560 <main+0x778>)
 80012d4:	48a1      	ldr	r0, [pc, #644]	; (800155c <main+0x774>)
 80012d6:	f006 fe56 	bl	8007f86 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 80012da:	4ba2      	ldr	r3, [pc, #648]	; (8001564 <main+0x77c>)
 80012dc:	f993 3000 	ldrsb.w	r3, [r3]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4aa1      	ldr	r2, [pc, #644]	; (8001568 <main+0x780>)
 80012e4:	4413      	add	r3, r2
 80012e6:	2211      	movs	r2, #17
 80012e8:	4619      	mov	r1, r3
 80012ea:	489c      	ldr	r0, [pc, #624]	; (800155c <main+0x774>)
 80012ec:	f006 fe13 	bl	8007f16 <strlcat>
	strlcpy(can_menu[1],temp,17);
 80012f0:	2211      	movs	r2, #17
 80012f2:	499a      	ldr	r1, [pc, #616]	; (800155c <main+0x774>)
 80012f4:	489d      	ldr	r0, [pc, #628]	; (800156c <main+0x784>)
 80012f6:	f006 fe31 	bl	8007f5c <strlcpy>

	//set can IDs
	memset(temp,0,17); // erase the temp array
 80012fa:	2211      	movs	r2, #17
 80012fc:	2100      	movs	r1, #0
 80012fe:	4897      	ldr	r0, [pc, #604]	; (800155c <main+0x774>)
 8001300:	f006 fdd2 	bl	8007ea8 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8001304:	2210      	movs	r2, #16
 8001306:	499a      	ldr	r1, [pc, #616]	; (8001570 <main+0x788>)
 8001308:	4894      	ldr	r0, [pc, #592]	; (800155c <main+0x774>)
 800130a:	f006 fe3c 	bl	8007f86 <strncpy>
	strcat(temp, "1:    ");
 800130e:	4893      	ldr	r0, [pc, #588]	; (800155c <main+0x774>)
 8001310:	f7fe ff5e 	bl	80001d0 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b90      	ldr	r3, [pc, #576]	; (800155c <main+0x774>)
 800131a:	4413      	add	r3, r2
 800131c:	4a95      	ldr	r2, [pc, #596]	; (8001574 <main+0x78c>)
 800131e:	6810      	ldr	r0, [r2, #0]
 8001320:	6018      	str	r0, [r3, #0]
 8001322:	8891      	ldrh	r1, [r2, #4]
 8001324:	7992      	ldrb	r2, [r2, #6]
 8001326:	8099      	strh	r1, [r3, #4]
 8001328:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 800132a:	2210      	movs	r2, #16
 800132c:	2100      	movs	r1, #0
 800132e:	4892      	ldr	r0, [pc, #584]	; (8001578 <main+0x790>)
 8001330:	f006 fdba 	bl	8007ea8 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8001334:	4b83      	ldr	r3, [pc, #524]	; (8001544 <main+0x75c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4990      	ldr	r1, [pc, #576]	; (800157c <main+0x794>)
 800133c:	488e      	ldr	r0, [pc, #568]	; (8001578 <main+0x790>)
 800133e:	f006 fdbb 	bl	8007eb8 <siprintf>
	strlcat(temp, char_arr,17);
 8001342:	2211      	movs	r2, #17
 8001344:	498c      	ldr	r1, [pc, #560]	; (8001578 <main+0x790>)
 8001346:	4885      	ldr	r0, [pc, #532]	; (800155c <main+0x774>)
 8001348:	f006 fde5 	bl	8007f16 <strlcat>
	memcpy(can_menu[2],temp,17);
 800134c:	4b8c      	ldr	r3, [pc, #560]	; (8001580 <main+0x798>)
 800134e:	4a83      	ldr	r2, [pc, #524]	; (800155c <main+0x774>)
 8001350:	3322      	adds	r3, #34	; 0x22
 8001352:	6815      	ldr	r5, [r2, #0]
 8001354:	6854      	ldr	r4, [r2, #4]
 8001356:	6890      	ldr	r0, [r2, #8]
 8001358:	68d1      	ldr	r1, [r2, #12]
 800135a:	601d      	str	r5, [r3, #0]
 800135c:	605c      	str	r4, [r3, #4]
 800135e:	6098      	str	r0, [r3, #8]
 8001360:	60d9      	str	r1, [r3, #12]
 8001362:	7c12      	ldrb	r2, [r2, #16]
 8001364:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 8001366:	2211      	movs	r2, #17
 8001368:	2100      	movs	r1, #0
 800136a:	487c      	ldr	r0, [pc, #496]	; (800155c <main+0x774>)
 800136c:	f006 fd9c 	bl	8007ea8 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8001370:	2210      	movs	r2, #16
 8001372:	497f      	ldr	r1, [pc, #508]	; (8001570 <main+0x788>)
 8001374:	4879      	ldr	r0, [pc, #484]	; (800155c <main+0x774>)
 8001376:	f006 fe06 	bl	8007f86 <strncpy>
	strcat(temp, "2:    ");
 800137a:	4878      	ldr	r0, [pc, #480]	; (800155c <main+0x774>)
 800137c:	f7fe ff28 	bl	80001d0 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b75      	ldr	r3, [pc, #468]	; (800155c <main+0x774>)
 8001386:	4413      	add	r3, r2
 8001388:	4a7e      	ldr	r2, [pc, #504]	; (8001584 <main+0x79c>)
 800138a:	6810      	ldr	r0, [r2, #0]
 800138c:	6018      	str	r0, [r3, #0]
 800138e:	8891      	ldrh	r1, [r2, #4]
 8001390:	7992      	ldrb	r2, [r2, #6]
 8001392:	8099      	strh	r1, [r3, #4]
 8001394:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8001396:	2210      	movs	r2, #16
 8001398:	2100      	movs	r1, #0
 800139a:	4877      	ldr	r0, [pc, #476]	; (8001578 <main+0x790>)
 800139c:	f006 fd84 	bl	8007ea8 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 80013a0:	4b6a      	ldr	r3, [pc, #424]	; (800154c <main+0x764>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4975      	ldr	r1, [pc, #468]	; (800157c <main+0x794>)
 80013a8:	4873      	ldr	r0, [pc, #460]	; (8001578 <main+0x790>)
 80013aa:	f006 fd85 	bl	8007eb8 <siprintf>
	strlcat(temp, char_arr,17);
 80013ae:	2211      	movs	r2, #17
 80013b0:	4971      	ldr	r1, [pc, #452]	; (8001578 <main+0x790>)
 80013b2:	486a      	ldr	r0, [pc, #424]	; (800155c <main+0x774>)
 80013b4:	f006 fdaf 	bl	8007f16 <strlcat>
	memcpy(can_menu[3],temp,17);
 80013b8:	4b71      	ldr	r3, [pc, #452]	; (8001580 <main+0x798>)
 80013ba:	4a68      	ldr	r2, [pc, #416]	; (800155c <main+0x774>)
 80013bc:	3333      	adds	r3, #51	; 0x33
 80013be:	6815      	ldr	r5, [r2, #0]
 80013c0:	6854      	ldr	r4, [r2, #4]
 80013c2:	6890      	ldr	r0, [r2, #8]
 80013c4:	68d1      	ldr	r1, [r2, #12]
 80013c6:	601d      	str	r5, [r3, #0]
 80013c8:	605c      	str	r4, [r3, #4]
 80013ca:	6098      	str	r0, [r3, #8]
 80013cc:	60d9      	str	r1, [r3, #12]
 80013ce:	7c12      	ldrb	r2, [r2, #16]
 80013d0:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 80013d2:	2211      	movs	r2, #17
 80013d4:	2100      	movs	r1, #0
 80013d6:	4861      	ldr	r0, [pc, #388]	; (800155c <main+0x774>)
 80013d8:	f006 fd66 	bl	8007ea8 <memset>
	strncpy(temp, "CAN ID ",16); // copy the string to the temp array (limiting the length to 16 characters)
 80013dc:	2210      	movs	r2, #16
 80013de:	4964      	ldr	r1, [pc, #400]	; (8001570 <main+0x788>)
 80013e0:	485e      	ldr	r0, [pc, #376]	; (800155c <main+0x774>)
 80013e2:	f006 fdd0 	bl	8007f86 <strncpy>
	strcat(temp, "3:    ");
 80013e6:	485d      	ldr	r0, [pc, #372]	; (800155c <main+0x774>)
 80013e8:	f7fe fef2 	bl	80001d0 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b5a      	ldr	r3, [pc, #360]	; (800155c <main+0x774>)
 80013f2:	4413      	add	r3, r2
 80013f4:	4a64      	ldr	r2, [pc, #400]	; (8001588 <main+0x7a0>)
 80013f6:	6810      	ldr	r0, [r2, #0]
 80013f8:	6018      	str	r0, [r3, #0]
 80013fa:	8891      	ldrh	r1, [r2, #4]
 80013fc:	7992      	ldrb	r2, [r2, #6]
 80013fe:	8099      	strh	r1, [r3, #4]
 8001400:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8001402:	2210      	movs	r2, #16
 8001404:	2100      	movs	r1, #0
 8001406:	485c      	ldr	r0, [pc, #368]	; (8001578 <main+0x790>)
 8001408:	f006 fd4e 	bl	8007ea8 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 800140c:	4b51      	ldr	r3, [pc, #324]	; (8001554 <main+0x76c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	495a      	ldr	r1, [pc, #360]	; (800157c <main+0x794>)
 8001414:	4858      	ldr	r0, [pc, #352]	; (8001578 <main+0x790>)
 8001416:	f006 fd4f 	bl	8007eb8 <siprintf>
	strlcat(temp, char_arr,17);
 800141a:	2211      	movs	r2, #17
 800141c:	4956      	ldr	r1, [pc, #344]	; (8001578 <main+0x790>)
 800141e:	484f      	ldr	r0, [pc, #316]	; (800155c <main+0x774>)
 8001420:	f006 fd79 	bl	8007f16 <strlcat>
	memcpy(can_menu[4],temp,17);
 8001424:	4b56      	ldr	r3, [pc, #344]	; (8001580 <main+0x798>)
 8001426:	4a4d      	ldr	r2, [pc, #308]	; (800155c <main+0x774>)
 8001428:	f103 0444 	add.w	r4, r3, #68	; 0x44
 800142c:	4615      	mov	r5, r2
 800142e:	6828      	ldr	r0, [r5, #0]
 8001430:	6869      	ldr	r1, [r5, #4]
 8001432:	68aa      	ldr	r2, [r5, #8]
 8001434:	68eb      	ldr	r3, [r5, #12]
 8001436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001438:	7c2b      	ldrb	r3, [r5, #16]
 800143a:	7023      	strb	r3, [r4, #0]

	//Sample rate
	memset(temp,0,17); // erase the temp array
 800143c:	2211      	movs	r2, #17
 800143e:	2100      	movs	r1, #0
 8001440:	4846      	ldr	r0, [pc, #280]	; (800155c <main+0x774>)
 8001442:	f006 fd31 	bl	8007ea8 <memset>
	strncpy(temp, "Rate:   ",16); // copy the string to the temp array (limiting the length to 16 characters)
 8001446:	2210      	movs	r2, #16
 8001448:	4950      	ldr	r1, [pc, #320]	; (800158c <main+0x7a4>)
 800144a:	4844      	ldr	r0, [pc, #272]	; (800155c <main+0x774>)
 800144c:	f006 fd9b 	bl	8007f86 <strncpy>
	memset(char_arr, 0, 16);
 8001450:	2210      	movs	r2, #16
 8001452:	2100      	movs	r1, #0
 8001454:	4848      	ldr	r0, [pc, #288]	; (8001578 <main+0x790>)
 8001456:	f006 fd27 	bl	8007ea8 <memset>
	sprintf(char_arr, "%05d", sample_rate);
 800145a:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <main+0x7a8>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	494c      	ldr	r1, [pc, #304]	; (8001594 <main+0x7ac>)
 8001462:	4845      	ldr	r0, [pc, #276]	; (8001578 <main+0x790>)
 8001464:	f006 fd28 	bl	8007eb8 <siprintf>
	strcat(temp, char_arr);
 8001468:	4943      	ldr	r1, [pc, #268]	; (8001578 <main+0x790>)
 800146a:	483c      	ldr	r0, [pc, #240]	; (800155c <main+0x774>)
 800146c:	f006 fd44 	bl	8007ef8 <strcat>
	strlcat(temp,"sps",17);
 8001470:	2211      	movs	r2, #17
 8001472:	4949      	ldr	r1, [pc, #292]	; (8001598 <main+0x7b0>)
 8001474:	4839      	ldr	r0, [pc, #228]	; (800155c <main+0x774>)
 8001476:	f006 fd4e 	bl	8007f16 <strlcat>
	memcpy(main_menu[3],temp,17);
 800147a:	4b48      	ldr	r3, [pc, #288]	; (800159c <main+0x7b4>)
 800147c:	4a37      	ldr	r2, [pc, #220]	; (800155c <main+0x774>)
 800147e:	3333      	adds	r3, #51	; 0x33
 8001480:	6815      	ldr	r5, [r2, #0]
 8001482:	6854      	ldr	r4, [r2, #4]
 8001484:	6890      	ldr	r0, [r2, #8]
 8001486:	68d1      	ldr	r1, [r2, #12]
 8001488:	601d      	str	r5, [r3, #0]
 800148a:	605c      	str	r4, [r3, #4]
 800148c:	6098      	str	r0, [r3, #8]
 800148e:	60d9      	str	r1, [r3, #12]
 8001490:	7c12      	ldrb	r2, [r2, #16]
 8001492:	741a      	strb	r2, [r3, #16]

	//Analog enabled bools
	if(!analog_1_enabled)
 8001494:	4b42      	ldr	r3, [pc, #264]	; (80015a0 <main+0x7b8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10b      	bne.n	80014b4 <main+0x6cc>
		memcpy(analog_menu[5],"Analog 1:    OFF",17);
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <main+0x7bc>)
 800149e:	4a42      	ldr	r2, [pc, #264]	; (80015a8 <main+0x7c0>)
 80014a0:	f103 0555 	add.w	r5, r3, #85	; 0x55
 80014a4:	4614      	mov	r4, r2
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	6028      	str	r0, [r5, #0]
 80014aa:	6069      	str	r1, [r5, #4]
 80014ac:	60aa      	str	r2, [r5, #8]
 80014ae:	60eb      	str	r3, [r5, #12]
 80014b0:	7823      	ldrb	r3, [r4, #0]
 80014b2:	742b      	strb	r3, [r5, #16]
	if(!analog_2_enabled)
 80014b4:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <main+0x7c4>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10b      	bne.n	80014d4 <main+0x6ec>
		memcpy(analog_menu[6],"Analog 2:    OFF",17);
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <main+0x7bc>)
 80014be:	4a3c      	ldr	r2, [pc, #240]	; (80015b0 <main+0x7c8>)
 80014c0:	f103 0566 	add.w	r5, r3, #102	; 0x66
 80014c4:	4614      	mov	r4, r2
 80014c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c8:	6028      	str	r0, [r5, #0]
 80014ca:	6069      	str	r1, [r5, #4]
 80014cc:	60aa      	str	r2, [r5, #8]
 80014ce:	60eb      	str	r3, [r5, #12]
 80014d0:	7823      	ldrb	r3, [r4, #0]
 80014d2:	742b      	strb	r3, [r5, #16]
	if(!analog_3_enabled)
 80014d4:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <main+0x7cc>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10b      	bne.n	80014f4 <main+0x70c>
		memcpy(analog_menu[7],"Analog 3:    OFF",17);
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <main+0x7bc>)
 80014de:	4a36      	ldr	r2, [pc, #216]	; (80015b8 <main+0x7d0>)
 80014e0:	f103 0577 	add.w	r5, r3, #119	; 0x77
 80014e4:	4614      	mov	r4, r2
 80014e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e8:	6028      	str	r0, [r5, #0]
 80014ea:	6069      	str	r1, [r5, #4]
 80014ec:	60aa      	str	r2, [r5, #8]
 80014ee:	60eb      	str	r3, [r5, #12]
 80014f0:	7823      	ldrb	r3, [r4, #0]
 80014f2:	742b      	strb	r3, [r5, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f4:	f003 f99c 	bl	8004830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f8:	f000 f9ba 	bl	8001870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fc:	f000 fbb0 	bl	8001c60 <MX_GPIO_Init>
  MX_CAN_Init();
 8001500:	f000 fa1a 	bl	8001938 <MX_CAN_Init>
  MX_SDADC1_Init();
 8001504:	f000 fa5e 	bl	80019c4 <MX_SDADC1_Init>
  MX_SDADC2_Init();
 8001508:	f000 fa98 	bl	8001a3c <MX_SDADC2_Init>
  MX_SDADC3_Init();
 800150c:	f000 fad2 	bl	8001ab4 <MX_SDADC3_Init>
  MX_TIM2_Init();
 8001510:	f000 fb0c 	bl	8001b2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001514:	f000 fb56 	bl	8001bc4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);//start polling timer
 8001518:	4828      	ldr	r0, [pc, #160]	; (80015bc <main+0x7d4>)
 800151a:	f006 f823 	bl	8007564 <HAL_TIM_Base_Start>

	//initialize LCD (the delays aren't necessary but I think they help to let the adcs stabilize before they're calibrated)
	lcd_init();
 800151e:	f7ff fc05 	bl	8000d2c <lcd_init>
	lcd_clear();
 8001522:	f7ff fbd9 	bl	8000cd8 <lcd_clear>
	lcd_put_cur(0,0);
 8001526:	2100      	movs	r1, #0
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fbe0 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Starting Up...");
 800152e:	4824      	ldr	r0, [pc, #144]	; (80015c0 <main+0x7d8>)
 8001530:	f7ff fc42 	bl	8000db8 <lcd_send_string>
 8001534:	e046      	b.n	80015c4 <main+0x7dc>
 8001536:	bf00      	nop
 8001538:	20000214 	.word	0x20000214
 800153c:	477fff00 	.word	0x477fff00
 8001540:	20000010 	.word	0x20000010
 8001544:	200063f0 	.word	0x200063f0
 8001548:	20002270 	.word	0x20002270
 800154c:	20002320 	.word	0x20002320
 8001550:	200063f4 	.word	0x200063f4
 8001554:	20000244 	.word	0x20000244
 8001558:	20002258 	.word	0x20002258
 800155c:	200022b4 	.word	0x200022b4
 8001560:	08009b58 	.word	0x08009b58
 8001564:	2000016f 	.word	0x2000016f
 8001568:	08009d04 	.word	0x08009d04
 800156c:	2000006d 	.word	0x2000006d
 8001570:	08009b68 	.word	0x08009b68
 8001574:	08009b70 	.word	0x08009b70
 8001578:	20006460 	.word	0x20006460
 800157c:	08009b78 	.word	0x08009b78
 8001580:	2000005c 	.word	0x2000005c
 8001584:	08009b80 	.word	0x08009b80
 8001588:	08009b88 	.word	0x08009b88
 800158c:	08009b90 	.word	0x08009b90
 8001590:	20000172 	.word	0x20000172
 8001594:	08009b9c 	.word	0x08009b9c
 8001598:	08009ba4 	.word	0x08009ba4
 800159c:	20000018 	.word	0x20000018
 80015a0:	20000002 	.word	0x20000002
 80015a4:	200000c4 	.word	0x200000c4
 80015a8:	08009ba8 	.word	0x08009ba8
 80015ac:	20000003 	.word	0x20000003
 80015b0:	08009bbc 	.word	0x08009bbc
 80015b4:	20000004 	.word	0x20000004
 80015b8:	08009bd0 	.word	0x08009bd0
 80015bc:	2000640c 	.word	0x2000640c
 80015c0:	08009be4 	.word	0x08009be4
	HAL_Delay(1000);
 80015c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c8:	f003 f998 	bl	80048fc <HAL_Delay>
	lcd_put_cur(0,0);
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fb8d 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Initializing CAN");
 80015d4:	488b      	ldr	r0, [pc, #556]	; (8001804 <main+0xa1c>)
 80015d6:	f7ff fbef 	bl	8000db8 <lcd_send_string>
	HAL_Delay(1000);
 80015da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015de:	f003 f98d 	bl	80048fc <HAL_Delay>

	//setup CAN filter
	can_filter.FilterMaskIdHigh = 0x0000;
 80015e2:	4b89      	ldr	r3, [pc, #548]	; (8001808 <main+0xa20>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 80015e8:	4b87      	ldr	r3, [pc, #540]	; (8001808 <main+0xa20>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015ee:	4b86      	ldr	r3, [pc, #536]	; (8001808 <main+0xa20>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
	can_filter.FilterBank = 0;
 80015f4:	4b84      	ldr	r3, [pc, #528]	; (8001808 <main+0xa20>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80015fa:	4b83      	ldr	r3, [pc, #524]	; (8001808 <main+0xa20>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001600:	4b81      	ldr	r3, [pc, #516]	; (8001808 <main+0xa20>)
 8001602:	2201      	movs	r2, #1
 8001604:	61da      	str	r2, [r3, #28]
	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 8001606:	4b80      	ldr	r3, [pc, #512]	; (8001808 <main+0xa20>)
 8001608:	2201      	movs	r2, #1
 800160a:	621a      	str	r2, [r3, #32]
	//check that CAN Filter was setup correctly
	if (HAL_CAN_ConfigFilter(&hcan, &can_filter) != HAL_OK)
 800160c:	497e      	ldr	r1, [pc, #504]	; (8001808 <main+0xa20>)
 800160e:	487f      	ldr	r0, [pc, #508]	; (800180c <main+0xa24>)
 8001610:	f003 fa93 	bl	8004b3a <HAL_CAN_ConfigFilter>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <main+0x836>
		Error_Handler();
 800161a:	f002 fed5 	bl	80043c8 <Error_Handler>
	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 800161e:	487b      	ldr	r0, [pc, #492]	; (800180c <main+0xa24>)
 8001620:	f003 fb55 	bl	8004cce <HAL_CAN_Start>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <main+0x846>
		Error_Handler();
 800162a:	f002 fecd 	bl	80043c8 <Error_Handler>

	//display main menu
	lcd_put_cur(0,0);
 800162e:	2100      	movs	r1, #0
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fb5c 	bl	8000cee <lcd_put_cur>
	//the string is copied to temp to remove the null character at the end of the string in the menu
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8001636:	4b76      	ldr	r3, [pc, #472]	; (8001810 <main+0xa28>)
 8001638:	f993 3000 	ldrsb.w	r3, [r3]
 800163c:	461a      	mov	r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	4413      	add	r3, r2
 8001644:	4a73      	ldr	r2, [pc, #460]	; (8001814 <main+0xa2c>)
 8001646:	4413      	add	r3, r2
 8001648:	2210      	movs	r2, #16
 800164a:	4619      	mov	r1, r3
 800164c:	4872      	ldr	r0, [pc, #456]	; (8001818 <main+0xa30>)
 800164e:	f006 fc9a 	bl	8007f86 <strncpy>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fbaf 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(1,0);
 800165a:	2100      	movs	r1, #0
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff fb46 	bl	8000cee <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 8001662:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <main+0xa28>)
 8001664:	f993 3000 	ldrsb.w	r3, [r3]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	4613      	mov	r3, r2
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	4413      	add	r3, r2
 8001670:	4a68      	ldr	r2, [pc, #416]	; (8001814 <main+0xa2c>)
 8001672:	4413      	add	r3, r2
 8001674:	2210      	movs	r2, #16
 8001676:	4619      	mov	r1, r3
 8001678:	4867      	ldr	r0, [pc, #412]	; (8001818 <main+0xa30>)
 800167a:	f006 fc84 	bl	8007f86 <strncpy>
 800167e:	4603      	mov	r3, r0
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fb99 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,0);
 8001686:	2100      	movs	r1, #0
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fb30 	bl	8000cee <lcd_put_cur>

	int display_counter=0;//counter used in updating the display
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]

	//calibrate the SDADCs
	calibrateSDADC(&hsdadc1, SDADC_CHANNEL_8);
 8001692:	4962      	ldr	r1, [pc, #392]	; (800181c <main+0xa34>)
 8001694:	4862      	ldr	r0, [pc, #392]	; (8001820 <main+0xa38>)
 8001696:	f002 fd8b 	bl	80041b0 <calibrateSDADC>
	calibrateSDADC(&hsdadc2, SDADC_CHANNEL_7);
 800169a:	4962      	ldr	r1, [pc, #392]	; (8001824 <main+0xa3c>)
 800169c:	4862      	ldr	r0, [pc, #392]	; (8001828 <main+0xa40>)
 800169e:	f002 fd87 	bl	80041b0 <calibrateSDADC>
	calibrateSDADC(&hsdadc3, SDADC_CHANNEL_8);
 80016a2:	495e      	ldr	r1, [pc, #376]	; (800181c <main+0xa34>)
 80016a4:	4861      	ldr	r0, [pc, #388]	; (800182c <main+0xa44>)
 80016a6:	f002 fd83 	bl	80041b0 <calibrateSDADC>
	HAL_Delay(300);
 80016aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016ae:	f003 f925 	bl	80048fc <HAL_Delay>

	//start ADC conversion interrupts
	if(analog_1_enabled)
 80016b2:	4b5f      	ldr	r3, [pc, #380]	; (8001830 <main+0xa48>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <main+0x8d8>
		HAL_SDADC_Start_IT(&hsdadc1);
 80016ba:	4859      	ldr	r0, [pc, #356]	; (8001820 <main+0xa38>)
 80016bc:	f005 fd6d 	bl	800719a <HAL_SDADC_Start_IT>
	if(analog_2_enabled)
 80016c0:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <main+0xa4c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <main+0x8e6>
		HAL_SDADC_Start_IT(&hsdadc2);
 80016c8:	4857      	ldr	r0, [pc, #348]	; (8001828 <main+0xa40>)
 80016ca:	f005 fd66 	bl	800719a <HAL_SDADC_Start_IT>
	if(analog_3_enabled)
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <main+0xa50>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <main+0x8f4>
		HAL_SDADC_Start_IT(&hsdadc3);
 80016d6:	4855      	ldr	r0, [pc, #340]	; (800182c <main+0xa44>)
 80016d8:	f005 fd5f 	bl	800719a <HAL_SDADC_Start_IT>


	// start can timer
	TIM3->ARR = (uint32_t)(((float)1/sample_rate)*1000000) - 1;//set the delay between interrupts
 80016dc:	4b57      	ldr	r3, [pc, #348]	; (800183c <main+0xa54>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f0:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001840 <main+0xa58>
 80016f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fc:	ee17 3a90 	vmov	r3, s15
 8001700:	4a50      	ldr	r2, [pc, #320]	; (8001844 <main+0xa5c>)
 8001702:	3b01      	subs	r3, #1
 8001704:	62d3      	str	r3, [r2, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim3);
 8001706:	4850      	ldr	r0, [pc, #320]	; (8001848 <main+0xa60>)
 8001708:	f005 ff8c 	bl	8007624 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//start ADC conversion interrupts
		if(analog_1_enabled)
 800170c:	4b48      	ldr	r3, [pc, #288]	; (8001830 <main+0xa48>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <main+0x932>
			HAL_SDADC_Start_IT(&hsdadc1);
 8001714:	4842      	ldr	r0, [pc, #264]	; (8001820 <main+0xa38>)
 8001716:	f005 fd40 	bl	800719a <HAL_SDADC_Start_IT>
		if(analog_2_enabled)
 800171a:	4b46      	ldr	r3, [pc, #280]	; (8001834 <main+0xa4c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <main+0x940>
			HAL_SDADC_Start_IT(&hsdadc2);
 8001722:	4841      	ldr	r0, [pc, #260]	; (8001828 <main+0xa40>)
 8001724:	f005 fd39 	bl	800719a <HAL_SDADC_Start_IT>
		if(analog_3_enabled)
 8001728:	4b43      	ldr	r3, [pc, #268]	; (8001838 <main+0xa50>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <main+0x94e>
			HAL_SDADC_Start_IT(&hsdadc3);
 8001730:	483e      	ldr	r0, [pc, #248]	; (800182c <main+0xa44>)
 8001732:	f005 fd32 	bl	800719a <HAL_SDADC_Start_IT>



		//Delay between counter increments
		if ((int16_t)__HAL_TIM_GET_COUNTER(&htim2) >= us){
 8001736:	4b45      	ldr	r3, [pc, #276]	; (800184c <main+0xa64>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	b21a      	sxth	r2, r3
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <main+0xa68>)
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbe1      	blt.n	800170c <main+0x924>
			__HAL_TIM_SET_COUNTER(&htim2,0); // reset timer
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <main+0xa64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	625a      	str	r2, [r3, #36]	; 0x24
			//reset display counter (waits 300ms between updates to the display in the display values menu)
			if(display_counter>3000)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001756:	4293      	cmp	r3, r2
 8001758:	dd01      	ble.n	800175e <main+0x976>
				display_counter=0;
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]

			//Display analog values on display
			if(in_main_menu && menu_pos==2 && change_value_bool && display_counter==0)
 800175e:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <main+0xa6c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00d      	beq.n	8001782 <main+0x99a>
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <main+0xa28>)
 8001768:	f993 3000 	ldrsb.w	r3, [r3]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d108      	bne.n	8001782 <main+0x99a>
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <main+0xa70>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <main+0x99a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <main+0x99a>
				displayValues();
 800177e:	f002 fb35 	bl	8003dec <displayValues>

			//unpress buttons
			if(btn_counter>debounce_delay){
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <main+0xa74>)
 8001784:	881a      	ldrh	r2, [r3, #0]
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <main+0xa78>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d92f      	bls.n	80017ee <main+0xa06>
				if(up_btn_pressed && !HAL_GPIO_ReadPin(UP_BTN_GPIO_Port, UP_BTN_Pin))
 800178e:	4b35      	ldr	r3, [pc, #212]	; (8001864 <main+0xa7c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00a      	beq.n	80017ac <main+0x9c4>
 8001796:	2104      	movs	r1, #4
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f004 f864 	bl	8005868 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <main+0x9c4>
					up_btn_pressed=0;
 80017a6:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <main+0xa7c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
				if(down_btn_pressed && !HAL_GPIO_ReadPin(DOWN_BTN_GPIO_Port, DOWN_BTN_Pin))
 80017ac:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <main+0xa80>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00a      	beq.n	80017ca <main+0x9e2>
 80017b4:	2101      	movs	r1, #1
 80017b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ba:	f004 f855 	bl	8005868 <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <main+0x9e2>
					down_btn_pressed=0;
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <main+0xa80>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
				if(sel_btn_pressed && !HAL_GPIO_ReadPin(SEL_BTN_GPIO_Port, SEL_BTN_Pin))
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <main+0xa84>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <main+0xa00>
 80017d2:	2102      	movs	r1, #2
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f004 f846 	bl	8005868 <HAL_GPIO_ReadPin>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <main+0xa00>
					sel_btn_pressed=0;
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <main+0xa84>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
				btn_counter=0;
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <main+0xa74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	801a      	strh	r2, [r3, #0]
			}

			//increment counters
			display_counter++;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3301      	adds	r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
			btn_counter++;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <main+0xa74>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <main+0xa74>)
 80017fe:	801a      	strh	r2, [r3, #0]
		if(analog_1_enabled)
 8001800:	e784      	b.n	800170c <main+0x924>
 8001802:	bf00      	nop
 8001804:	08009bf4 	.word	0x08009bf4
 8001808:	20004328 	.word	0x20004328
 800180c:	20002288 	.word	0x20002288
 8001810:	2000022b 	.word	0x2000022b
 8001814:	20000018 	.word	0x20000018
 8001818:	200022b4 	.word	0x200022b4
 800181c:	00080100 	.word	0x00080100
 8001820:	20004350 	.word	0x20004350
 8001824:	00070080 	.word	0x00070080
 8001828:	200063ac 	.word	0x200063ac
 800182c:	20006474 	.word	0x20006474
 8001830:	20000002 	.word	0x20000002
 8001834:	20000003 	.word	0x20000003
 8001838:	20000004 	.word	0x20000004
 800183c:	20000172 	.word	0x20000172
 8001840:	49742400 	.word	0x49742400
 8001844:	40000400 	.word	0x40000400
 8001848:	200022d0 	.word	0x200022d0
 800184c:	2000640c 	.word	0x2000640c
 8001850:	20000170 	.word	0x20000170
 8001854:	2000016e 	.word	0x2000016e
 8001858:	2000022e 	.word	0x2000022e
 800185c:	20000232 	.word	0x20000232
 8001860:	20000174 	.word	0x20000174
 8001864:	2000022f 	.word	0x2000022f
 8001868:	20000230 	.word	0x20000230
 800186c:	20000231 	.word	0x20000231

08001870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b09a      	sub	sp, #104	; 0x68
 8001874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001876:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800187a:	2228      	movs	r2, #40	; 0x28
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f006 fb12 	bl	8007ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001894:	463b      	mov	r3, r7
 8001896:	222c      	movs	r2, #44	; 0x2c
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f006 fb04 	bl	8007ea8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a0:	2302      	movs	r3, #2
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a4:	2301      	movs	r3, #1
 80018a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a8:	2310      	movs	r3, #16
 80018aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ac:	2302      	movs	r3, #2
 80018ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018b0:	2300      	movs	r3, #0
 80018b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80018b8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 f83a 	bl	8005938 <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80018ca:	f002 fd7d 	bl	80043c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2302      	movs	r3, #2
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e8:	2102      	movs	r1, #2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 ff2c 	bl	8006748 <HAL_RCC_ClockConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80018f6:	f002 fd67 	bl	80043c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDADC;
 80018fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018fe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV12;
 8001900:	f04f 4328 	mov.w	r3, #2818572288	; 0xa8000000
 8001904:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001906:	463b      	mov	r3, r7
 8001908:	4618      	mov	r0, r3
 800190a:	f005 f905 	bl	8006b18 <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001914:	f002 fd58 	bl	80043c8 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8001918:	f44f 7000 	mov.w	r0, #512	; 0x200
 800191c:	f003 ffec 	bl	80058f8 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG2);
 8001920:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001924:	f003 ffe8 	bl	80058f8 <HAL_PWREx_EnableSDADC>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG3);
 8001928:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800192c:	f003 ffe4 	bl	80058f8 <HAL_PWREx_EnableSDADC>
}
 8001930:	bf00      	nop
 8001932:	3768      	adds	r7, #104	; 0x68
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <MX_CAN_Init+0x80>)
 800193e:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <MX_CAN_Init+0x84>)
 8001940:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <MX_CAN_Init+0x80>)
 8001944:	2202      	movs	r2, #2
 8001946:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <MX_CAN_Init+0x80>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_CAN_Init+0x80>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_CAN_Init+0x80>)
 8001956:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800195a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_CAN_Init+0x80>)
 800195e:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8001962:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_CAN_Init+0x80>)
 8001966:	2200      	movs	r2, #0
 8001968:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <MX_CAN_Init+0x80>)
 800196c:	2200      	movs	r2, #0
 800196e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_CAN_Init+0x80>)
 8001972:	2200      	movs	r2, #0
 8001974:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <MX_CAN_Init+0x80>)
 8001978:	2200      	movs	r2, #0
 800197a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_CAN_Init+0x80>)
 800197e:	2200      	movs	r2, #0
 8001980:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <MX_CAN_Init+0x80>)
 8001984:	2200      	movs	r2, #0
 8001986:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <MX_CAN_Init+0x80>)
 800198a:	f002 ffdb 	bl	8004944 <HAL_CAN_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001994:	f002 fd18 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	//set the prescaler to the right value for the stored baud rate
	hcan.Init.Prescaler = PSC;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_CAN_Init+0x88>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_CAN_Init+0x80>)
 80019a0:	605a      	str	r2, [r3, #4]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_CAN_Init+0x80>)
 80019a4:	f002 ffce 	bl	8004944 <HAL_CAN_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_CAN_Init+0x7a>
	{
		Error_Handler();
 80019ae:	f002 fd0b 	bl	80043c8 <Error_Handler>
	}

  /* USER CODE END CAN_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20002288 	.word	0x20002288
 80019bc:	40006400 	.word	0x40006400
 80019c0:	20000000 	.word	0x20000000

080019c4 <MX_SDADC1_Init>:
  * @brief SDADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 80019ca:	463b      	mov	r3, r7
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC1_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_SDADC1_Init+0x70>)
 80019d8:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <MX_SDADC1_Init+0x74>)
 80019da:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_SDADC1_Init+0x70>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_SDADC1_Init+0x70>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_SDADC1_Init+0x70>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_SDADC1_Init+0x70>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 80019f4:	480f      	ldr	r0, [pc, #60]	; (8001a34 <MX_SDADC1_Init+0x70>)
 80019f6:	f005 fa03 	bl	8006e00 <HAL_SDADC_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_SDADC1_Init+0x40>
  {
    Error_Handler();
 8001a00:	f002 fce2 	bl	80043c8 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001a04:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001a08:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001a16:	463b      	mov	r3, r7
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_SDADC1_Init+0x70>)
 8001a1e:	f005 fa73 	bl	8006f08 <HAL_SDADC_PrepareChannelConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_SDADC1_Init+0x68>
  {
    Error_Handler();
 8001a28:	f002 fcce 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20004350 	.word	0x20004350
 8001a38:	40016000 	.word	0x40016000

08001a3c <MX_SDADC2_Init>:
  * @brief SDADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC2_Init 0 */

  /* USER CODE END SDADC2_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001a42:	463b      	mov	r3, r7
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC2_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc2.Instance = SDADC2;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_SDADC2_Init+0x70>)
 8001a50:	4a17      	ldr	r2, [pc, #92]	; (8001ab0 <MX_SDADC2_Init+0x74>)
 8001a52:	601a      	str	r2, [r3, #0]
  hsdadc2.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <MX_SDADC2_Init+0x70>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  hsdadc2.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_SDADC2_Init+0x70>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hsdadc2.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MX_SDADC2_Init+0x70>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  hsdadc2.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_SDADC2_Init+0x70>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc2) != HAL_OK)
 8001a6c:	480f      	ldr	r0, [pc, #60]	; (8001aac <MX_SDADC2_Init+0x70>)
 8001a6e:	f005 f9c7 	bl	8006e00 <HAL_SDADC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_SDADC2_Init+0x40>
  {
    Error_Handler();
 8001a78:	f002 fca6 	bl	80043c8 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001a7c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001a80:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc2, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001a8e:	463b      	mov	r3, r7
 8001a90:	461a      	mov	r2, r3
 8001a92:	2100      	movs	r1, #0
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_SDADC2_Init+0x70>)
 8001a96:	f005 fa37 	bl	8006f08 <HAL_SDADC_PrepareChannelConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_SDADC2_Init+0x68>
  {
    Error_Handler();
 8001aa0:	f002 fc92 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC2_Init 2 */

  /* USER CODE END SDADC2_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200063ac 	.word	0x200063ac
 8001ab0:	40016400 	.word	0x40016400

08001ab4 <MX_SDADC3_Init>:
  * @brief SDADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDADC3_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC3_Init 0 */

  /* USER CODE END SDADC3_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001aba:	463b      	mov	r3, r7
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]

  /* USER CODE END SDADC3_Init 1 */
  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc3.Instance = SDADC3;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <MX_SDADC3_Init+0x70>)
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <MX_SDADC3_Init+0x74>)
 8001aca:	601a      	str	r2, [r3, #0]
  hsdadc3.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <MX_SDADC3_Init+0x70>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	605a      	str	r2, [r3, #4]
  hsdadc3.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_SDADC3_Init+0x70>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  hsdadc3.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <MX_SDADC3_Init+0x70>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  hsdadc3.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_SDADC3_Init+0x70>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc3) != HAL_OK)
 8001ae4:	480f      	ldr	r0, [pc, #60]	; (8001b24 <MX_SDADC3_Init+0x70>)
 8001ae6:	f005 f98b 	bl	8006e00 <HAL_SDADC_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_SDADC3_Init+0x40>
  {
    Error_Handler();
 8001af0:	f002 fc6a 	bl	80043c8 <Error_Handler>
  }
  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8001af4:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001af8:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc3, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001b06:	463b      	mov	r3, r7
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_SDADC3_Init+0x70>)
 8001b0e:	f005 f9fb 	bl	8006f08 <HAL_SDADC_PrepareChannelConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_SDADC3_Init+0x68>
  {
    Error_Handler();
 8001b18:	f002 fc56 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC3_Init 2 */

  /* USER CODE END SDADC3_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20006474 	.word	0x20006474
 8001b28:	40016800 	.word	0x40016800

08001b2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b40:	463b      	mov	r3, r7
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <MX_TIM2_Init+0x94>)
 8001b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <MX_TIM2_Init+0x94>)
 8001b52:	223f      	movs	r2, #63	; 0x3f
 8001b54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_TIM2_Init+0x94>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <MX_TIM2_Init+0x94>)
 8001b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b64:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <MX_TIM2_Init+0x94>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_TIM2_Init+0x94>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b70:	4813      	ldr	r0, [pc, #76]	; (8001bc0 <MX_TIM2_Init+0x94>)
 8001b72:	f005 fca8 	bl	80074c6 <HAL_TIM_Base_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b7c:	f002 fc24 	bl	80043c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <MX_TIM2_Init+0x94>)
 8001b8e:	f005 feb9 	bl	8007904 <HAL_TIM_ConfigClockSource>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b98:	f002 fc16 	bl	80043c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_TIM2_Init+0x94>)
 8001baa:	f006 f8cb 	bl	8007d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bb4:	f002 fc08 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000640c 	.word	0x2000640c

08001bc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_TIM3_Init+0x94>)
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <MX_TIM3_Init+0x98>)
 8001be4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <MX_TIM3_Init+0x94>)
 8001be8:	223f      	movs	r2, #63	; 0x3f
 8001bea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_TIM3_Init+0x94>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <MX_TIM3_Init+0x94>)
 8001bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_TIM3_Init+0x94>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_TIM3_Init+0x94>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c06:	4814      	ldr	r0, [pc, #80]	; (8001c58 <MX_TIM3_Init+0x94>)
 8001c08:	f005 fc5d 	bl	80074c6 <HAL_TIM_Base_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c12:	f002 fbd9 	bl	80043c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c1c:	f107 0308 	add.w	r3, r7, #8
 8001c20:	4619      	mov	r1, r3
 8001c22:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_TIM3_Init+0x94>)
 8001c24:	f005 fe6e 	bl	8007904 <HAL_TIM_ConfigClockSource>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001c2e:	f002 fbcb 	bl	80043c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4806      	ldr	r0, [pc, #24]	; (8001c58 <MX_TIM3_Init+0x94>)
 8001c40:	f006 f880 	bl	8007d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c4a:	f002 fbbd 	bl	80043c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200022d0 	.word	0x200022d0
 8001c5c:	40000400 	.word	0x40000400

08001c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <MX_GPIO_Init+0x100>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	4a39      	ldr	r2, [pc, #228]	; (8001d60 <MX_GPIO_Init+0x100>)
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c80:	6153      	str	r3, [r2, #20]
 8001c82:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <MX_GPIO_Init+0x100>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <MX_GPIO_Init+0x100>)
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	4a33      	ldr	r2, [pc, #204]	; (8001d60 <MX_GPIO_Init+0x100>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c98:	6153      	str	r3, [r2, #20]
 8001c9a:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <MX_GPIO_Init+0x100>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <MX_GPIO_Init+0x100>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4a2d      	ldr	r2, [pc, #180]	; (8001d60 <MX_GPIO_Init+0x100>)
 8001cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cb0:	6153      	str	r3, [r2, #20]
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <MX_GPIO_Init+0x100>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RW_Pin|DISP_EN_Pin|DISP_D4_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2178      	movs	r1, #120	; 0x78
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc6:	f003 fde7 	bl	8005898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DISP_D5_Pin|DISP_D6_Pin|DISP_D7_Pin, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2107      	movs	r1, #7
 8001cce:	4825      	ldr	r0, [pc, #148]	; (8001d64 <MX_GPIO_Init+0x104>)
 8001cd0:	f003 fde2 	bl	8005898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DOWN_BTN_Pin SEL_BTN_Pin UP_BTN_Pin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|SEL_BTN_Pin|UP_BTN_Pin;
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd8:	4b23      	ldr	r3, [pc, #140]	; (8001d68 <MX_GPIO_Init+0x108>)
 8001cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cea:	f003 fc43 	bl	8005574 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_RS_Pin DISP_RW_Pin DISP_EN_Pin DISP_D4_Pin */
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RW_Pin|DISP_EN_Pin|DISP_D4_Pin;
 8001cee:	2378      	movs	r3, #120	; 0x78
 8001cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	4619      	mov	r1, r3
 8001d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d08:	f003 fc34 	bl	8005574 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_D5_Pin DISP_D6_Pin DISP_D7_Pin */
  GPIO_InitStruct.Pin = DISP_D5_Pin|DISP_D6_Pin|DISP_D7_Pin;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	4619      	mov	r1, r3
 8001d22:	4810      	ldr	r0, [pc, #64]	; (8001d64 <MX_GPIO_Init+0x104>)
 8001d24:	f003 fc26 	bl	8005574 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2103      	movs	r1, #3
 8001d2c:	2006      	movs	r0, #6
 8001d2e:	f003 fa12 	bl	8005156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d32:	2006      	movs	r0, #6
 8001d34:	f003 fa2b 	bl	800518e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	2007      	movs	r0, #7
 8001d3e:	f003 fa0a 	bl	8005156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d42:	2007      	movs	r0, #7
 8001d44:	f003 fa23 	bl	800518e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 3, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	2008      	movs	r0, #8
 8001d4e:	f003 fa02 	bl	8005156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001d52:	2008      	movs	r0, #8
 8001d54:	f003 fa1b 	bl	800518e <HAL_NVIC_EnableIRQ>

}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000400 	.word	0x48000400
 8001d68:	10110000 	.word	0x10110000

08001d6c <HAL_SDADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//read adc values
void HAL_SDADC_ConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	//get analog 1 data
	if(hsdadc==&hsdadc1){
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a5d      	ldr	r2, [pc, #372]	; (8001eec <HAL_SDADC_ConvCpltCallback+0x180>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d138      	bne.n	8001dee <HAL_SDADC_ConvCpltCallback+0x82>
		//get, convert and scale raw data for analog 1
		a_in_1=((int16_t)(HAL_SDADC_GetValue(&hsdadc1))+32768-analog_1_offset);
 8001d7c:	485b      	ldr	r0, [pc, #364]	; (8001eec <HAL_SDADC_ConvCpltCallback+0x180>)
 8001d7e:	f005 fa2f 	bl	80071e0 <HAL_SDADC_GetValue>
 8001d82:	4603      	mov	r3, r0
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <HAL_SDADC_ConvCpltCallback+0x184>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b57      	ldr	r3, [pc, #348]	; (8001ef4 <HAL_SDADC_ConvCpltCallback+0x188>)
 8001d96:	601a      	str	r2, [r3, #0]
		if(a_in_1<0)
 8001d98:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <HAL_SDADC_ConvCpltCallback+0x188>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da02      	bge.n	8001da6 <HAL_SDADC_ConvCpltCallback+0x3a>
			a_in_1=0;
 8001da0:	4b54      	ldr	r3, [pc, #336]	; (8001ef4 <HAL_SDADC_ConvCpltCallback+0x188>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
		a_data_arr_1[a_1_index%data_arr_length]=(uint16_t)(a_in_1*offset_scalar_1);//scale value
 8001da6:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_SDADC_ConvCpltCallback+0x188>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db2:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <HAL_SDADC_ConvCpltCallback+0x18c>)
 8001db4:	edd3 7a00 	vldr	s15, [r3]
 8001db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbc:	4b4f      	ldr	r3, [pc, #316]	; (8001efc <HAL_SDADC_ConvCpltCallback+0x190>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	4a4f      	ldr	r2, [pc, #316]	; (8001f00 <HAL_SDADC_ConvCpltCallback+0x194>)
 8001dc2:	8812      	ldrh	r2, [r2, #0]
 8001dc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dc8:	fb02 f201 	mul.w	r2, r2, r1
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd6:	ee17 3a90 	vmov	r3, s15
 8001dda:	b299      	uxth	r1, r3
 8001ddc:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <HAL_SDADC_ConvCpltCallback+0x198>)
 8001dde:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_1_index++;
 8001de2:	4b46      	ldr	r3, [pc, #280]	; (8001efc <HAL_SDADC_ConvCpltCallback+0x190>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	4b44      	ldr	r3, [pc, #272]	; (8001efc <HAL_SDADC_ConvCpltCallback+0x190>)
 8001dec:	801a      	strh	r2, [r3, #0]
	}


	//get analog 2 data
	if(hsdadc==&hsdadc2){
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a45      	ldr	r2, [pc, #276]	; (8001f08 <HAL_SDADC_ConvCpltCallback+0x19c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d138      	bne.n	8001e68 <HAL_SDADC_ConvCpltCallback+0xfc>
		//get, convert and scale raw data for analog 2
		a_in_2=((int16_t)(HAL_SDADC_GetValue(&hsdadc2))+32768-analog_2_offset);
 8001df6:	4844      	ldr	r0, [pc, #272]	; (8001f08 <HAL_SDADC_ConvCpltCallback+0x19c>)
 8001df8:	f005 f9f2 	bl	80071e0 <HAL_SDADC_GetValue>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b21b      	sxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_SDADC_ConvCpltCallback+0x1a0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_SDADC_ConvCpltCallback+0x1a4>)
 8001e10:	601a      	str	r2, [r3, #0]
		if(a_in_2<0)
 8001e12:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <HAL_SDADC_ConvCpltCallback+0x1a4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	da02      	bge.n	8001e20 <HAL_SDADC_ConvCpltCallback+0xb4>
			a_in_2=0;
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_SDADC_ConvCpltCallback+0x1a4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
		a_data_arr_2[a_2_index%data_arr_length]=(uint16_t)(a_in_2*offset_scalar_2);//scale value
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_SDADC_ConvCpltCallback+0x1a4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <HAL_SDADC_ConvCpltCallback+0x1a8>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e36:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <HAL_SDADC_ConvCpltCallback+0x1ac>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	4a31      	ldr	r2, [pc, #196]	; (8001f00 <HAL_SDADC_ConvCpltCallback+0x194>)
 8001e3c:	8812      	ldrh	r2, [r2, #0]
 8001e3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e42:	fb02 f201 	mul.w	r2, r2, r1
 8001e46:	1a9b      	subs	r3, r3, r2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e50:	ee17 3a90 	vmov	r3, s15
 8001e54:	b299      	uxth	r1, r3
 8001e56:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_SDADC_ConvCpltCallback+0x1b0>)
 8001e58:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_2_index++;
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_SDADC_ConvCpltCallback+0x1ac>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	4b2c      	ldr	r3, [pc, #176]	; (8001f18 <HAL_SDADC_ConvCpltCallback+0x1ac>)
 8001e66:	801a      	strh	r2, [r3, #0]
	}

	//get analog 3 data
	if(hsdadc==&hsdadc3){
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a2d      	ldr	r2, [pc, #180]	; (8001f20 <HAL_SDADC_ConvCpltCallback+0x1b4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d138      	bne.n	8001ee2 <HAL_SDADC_ConvCpltCallback+0x176>
		//get, convert and scale raw data for analog 3
		a_in_3=((int16_t)(HAL_SDADC_GetValue(&hsdadc3))+32768-analog_3_offset);
 8001e70:	482b      	ldr	r0, [pc, #172]	; (8001f20 <HAL_SDADC_ConvCpltCallback+0x1b4>)
 8001e72:	f005 f9b5 	bl	80071e0 <HAL_SDADC_GetValue>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_SDADC_ConvCpltCallback+0x1b8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_SDADC_ConvCpltCallback+0x1bc>)
 8001e8a:	601a      	str	r2, [r3, #0]
		if(a_in_3<0)
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <HAL_SDADC_ConvCpltCallback+0x1bc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	da02      	bge.n	8001e9a <HAL_SDADC_ConvCpltCallback+0x12e>
			a_in_3=0;
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_SDADC_ConvCpltCallback+0x1bc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
		a_data_arr_3[a_3_index%data_arr_length]=(uint16_t)(a_in_3*offset_scalar_3);//scale value
 8001e9a:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_SDADC_ConvCpltCallback+0x1bc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_SDADC_ConvCpltCallback+0x1c0>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_SDADC_ConvCpltCallback+0x1c4>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <HAL_SDADC_ConvCpltCallback+0x194>)
 8001eb6:	8812      	ldrh	r2, [r2, #0]
 8001eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ebc:	fb02 f201 	mul.w	r2, r2, r1
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eca:	ee17 3a90 	vmov	r3, s15
 8001ece:	b299      	uxth	r1, r3
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_SDADC_ConvCpltCallback+0x1c8>)
 8001ed2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		a_3_index++;
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_SDADC_ConvCpltCallback+0x1c4>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_SDADC_ConvCpltCallback+0x1c4>)
 8001ee0:	801a      	strh	r2, [r3, #0]
	}
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20004350 	.word	0x20004350
 8001ef0:	2000020c 	.word	0x2000020c
 8001ef4:	200063a4 	.word	0x200063a4
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	2000021a 	.word	0x2000021a
 8001f00:	20000014 	.word	0x20000014
 8001f04:	20000254 	.word	0x20000254
 8001f08:	200063ac 	.word	0x200063ac
 8001f0c:	20000210 	.word	0x20000210
 8001f10:	20000248 	.word	0x20000248
 8001f14:	2000000c 	.word	0x2000000c
 8001f18:	2000021c 	.word	0x2000021c
 8001f1c:	20002328 	.word	0x20002328
 8001f20:	20006474 	.word	0x20006474
 8001f24:	20000214 	.word	0x20000214
 8001f28:	200022b0 	.word	0x200022b0
 8001f2c:	20000010 	.word	0x20000010
 8001f30:	2000021e 	.word	0x2000021e
 8001f34:	20004398 	.word	0x20004398

08001f38 <HAL_TIM_PeriodElapsedCallback>:

//sends data over can when timer 3 interrupts
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	// Check to make sure timer 3 triggered this callback and don't try sending before the can is initialized
	if (htim == &htim3 && can_enabled)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a86      	ldr	r2, [pc, #536]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	f040 8104 	bne.w	8002152 <HAL_TIM_PeriodElapsedCallback+0x21a>
 8001f4a:	4b85      	ldr	r3, [pc, #532]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80ff 	beq.w	8002152 <HAL_TIM_PeriodElapsedCallback+0x21a>
	{
		if(analog_1_enabled){
 8001f54:	4b83      	ldr	r3, [pc, #524]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d050      	beq.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0xc6>
			//average stored values
			a_in_1=0;
 8001f5c:	4b82      	ldr	r3, [pc, #520]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
			max = (a_1_index<data_arr_length?a_1_index:data_arr_length);
 8001f62:	4b82      	ldr	r3, [pc, #520]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001f64:	881a      	ldrh	r2, [r3, #0]
 8001f66:	4b82      	ldr	r3, [pc, #520]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	bf28      	it	cs
 8001f6e:	4613      	movcs	r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b7f      	ldr	r3, [pc, #508]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001f76:	601a      	str	r2, [r3, #0]
			if(max>0){
 8001f78:	4b7e      	ldr	r3, [pc, #504]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d029      	beq.n	8001fd4 <HAL_TIM_PeriodElapsedCallback+0x9c>
				for(for_index=0; for_index<max; for_index++)
 8001f80:	4b7d      	ldr	r3, [pc, #500]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	801a      	strh	r2, [r3, #0]
 8001f86:	e011      	b.n	8001fac <HAL_TIM_PeriodElapsedCallback+0x74>
					a_in_1+=a_data_arr_1[for_index];
 8001f88:	4b7b      	ldr	r3, [pc, #492]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b7b      	ldr	r3, [pc, #492]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001f90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b74      	ldr	r3, [pc, #464]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a72      	ldr	r2, [pc, #456]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001f9e:	6013      	str	r3, [r2, #0]
				for(for_index=0; for_index<max; for_index++)
 8001fa0:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b73      	ldr	r3, [pc, #460]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001faa:	801a      	strh	r2, [r3, #0]
 8001fac:	4b72      	ldr	r3, [pc, #456]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b70      	ldr	r3, [pc, #448]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d3e6      	bcc.n	8001f88 <HAL_TIM_PeriodElapsedCallback+0x50>
				a_in_1/=max;
 8001fba:	4b6b      	ldr	r3, [pc, #428]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b6c      	ldr	r3, [pc, #432]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001fcc:	601a      	str	r2, [r3, #0]
				a_1_index=0;
 8001fce:	4b68      	ldr	r3, [pc, #416]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	801a      	strh	r2, [r3, #0]
			}

			a_in_1_avg=a_in_1;// store the average for offsets and display
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a69      	ldr	r2, [pc, #420]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001fda:	6013      	str	r3, [r2, #0]

			//put raw data into byte arrays
			a_data_1[0]=a_in_1 & 0xff;
 8001fdc:	4b62      	ldr	r3, [pc, #392]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b68      	ldr	r3, [pc, #416]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001fe4:	701a      	strb	r2, [r3, #0]
			a_data_1[1]=(a_in_1 >> 8);
 8001fe6:	4b60      	ldr	r3, [pc, #384]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	121b      	asrs	r3, r3, #8
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b65      	ldr	r3, [pc, #404]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ff0:	705a      	strb	r2, [r3, #1]
			//transmit CAN data for analog 1
			HAL_CAN_AddTxMessage(&hcan, &headers_1, a_data_1, &tx_mailbox);
 8001ff2:	4b65      	ldr	r3, [pc, #404]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001ff4:	4a63      	ldr	r2, [pc, #396]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001ff6:	4965      	ldr	r1, [pc, #404]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001ff8:	4865      	ldr	r0, [pc, #404]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001ffa:	f002 fef5 	bl	8004de8 <HAL_CAN_AddTxMessage>
			//while (HAL_CAN_IsTxMessagePending(&hcan, tx_mailbox));//wait until data is sent for analog 1 (not needed because of the time from averaging)
		}
		if(analog_2_enabled){
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d050      	beq.n	80020a8 <HAL_TIM_PeriodElapsedCallback+0x170>
			//average stored values
			a_in_2=0;
 8002006:	4b64      	ldr	r3, [pc, #400]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
			max = (a_2_index<data_arr_length?a_2_index:data_arr_length);
 800200c:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800200e:	881a      	ldrh	r2, [r3, #0]
 8002010:	4b62      	ldr	r3, [pc, #392]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	4293      	cmp	r3, r2
 8002016:	bf28      	it	cs
 8002018:	4613      	movcs	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	4b55      	ldr	r3, [pc, #340]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002020:	601a      	str	r2, [r3, #0]
			if(max>0){
 8002022:	4b54      	ldr	r3, [pc, #336]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d029      	beq.n	800207e <HAL_TIM_PeriodElapsedCallback+0x146>
				for(for_index=0; for_index<max; for_index++)
 800202a:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800202c:	2200      	movs	r2, #0
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	e011      	b.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x11e>
					a_in_2+=a_data_arr_2[for_index];
 8002032:	4b51      	ldr	r3, [pc, #324]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800203a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800203e:	461a      	mov	r2, r3
 8002040:	4b55      	ldr	r3, [pc, #340]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4413      	add	r3, r2
 8002046:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002048:	6013      	str	r3, [r2, #0]
				for(for_index=0; for_index<max; for_index++)
 800204a:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	3301      	adds	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b49      	ldr	r3, [pc, #292]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002054:	801a      	strh	r2, [r3, #0]
 8002056:	4b48      	ldr	r3, [pc, #288]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4b45      	ldr	r3, [pc, #276]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d3e6      	bcc.n	8002032 <HAL_TIM_PeriodElapsedCallback+0xfa>
				a_in_2/=max;
 8002064:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b42      	ldr	r3, [pc, #264]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	461a      	mov	r2, r3
 8002074:	4b48      	ldr	r3, [pc, #288]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002076:	601a      	str	r2, [r3, #0]
				a_2_index=0;
 8002078:	4b48      	ldr	r3, [pc, #288]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800207a:	2200      	movs	r2, #0
 800207c:	801a      	strh	r2, [r3, #0]
			}

			a_in_2_avg=a_in_2;// store the average for offsets and display
 800207e:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a48      	ldr	r2, [pc, #288]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002084:	6013      	str	r3, [r2, #0]

			//put raw data into byte arrays
			a_data_2[0]=a_in_2 & 0xff;
 8002086:	4b44      	ldr	r3, [pc, #272]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800208e:	701a      	strb	r2, [r3, #0]
			a_data_2[1]=(a_in_2 >> 8);
 8002090:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	121b      	asrs	r3, r3, #8
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800209a:	705a      	strb	r2, [r3, #1]
			//transmit CAN data for analog 2
			HAL_CAN_AddTxMessage(&hcan, &headers_2, a_data_2, &tx_mailbox);
 800209c:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800209e:	4a42      	ldr	r2, [pc, #264]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020a0:	4942      	ldr	r1, [pc, #264]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x274>)
 80020a2:	483b      	ldr	r0, [pc, #236]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80020a4:	f002 fea0 	bl	8004de8 <HAL_CAN_AddTxMessage>
			//while (HAL_CAN_IsTxMessagePending(&hcan, tx_mailbox));//wait until data is sent for analog 2
		}
		if(analog_3_enabled){
 80020a8:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d050      	beq.n	8002152 <HAL_TIM_PeriodElapsedCallback+0x21a>
			//average stored values
			a_in_3=0;
 80020b0:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
			max = (a_3_index<data_arr_length?a_3_index:data_arr_length);
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80020b8:	881a      	ldrh	r2, [r3, #0]
 80020ba:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	4293      	cmp	r3, r2
 80020c0:	bf28      	it	cs
 80020c2:	4613      	movcs	r3, r2
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80020ca:	601a      	str	r2, [r3, #0]
			if(max>0){
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d029      	beq.n	8002128 <HAL_TIM_PeriodElapsedCallback+0x1f0>
				for(for_index=0; for_index<max; for_index++)
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	801a      	strh	r2, [r3, #0]
 80020da:	e011      	b.n	8002100 <HAL_TIM_PeriodElapsedCallback+0x1c8>
					a_in_3+=a_data_arr_3[for_index];
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80020e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80020f2:	6013      	str	r3, [r2, #0]
				for(for_index=0; for_index<max; for_index++)
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80020fe:	801a      	strh	r2, [r3, #0]
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d3e6      	bcc.n	80020dc <HAL_TIM_PeriodElapsedCallback+0x1a4>
				a_in_3/=max;
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002120:	601a      	str	r2, [r3, #0]
				a_3_index=0;
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002124:	2200      	movs	r2, #0
 8002126:	801a      	strh	r2, [r3, #0]
			}

			a_in_3_avg=a_in_3;// store the average for offsets and display
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800212e:	6013      	str	r3, [r2, #0]

			//put raw data into byte arrays
			a_data_3[0]=a_in_3 & 0xff;
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002138:	701a      	strb	r2, [r3, #0]
			a_data_3[1]=(a_in_3 >> 8);
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	121b      	asrs	r3, r3, #8
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002144:	705a      	strb	r2, [r3, #1]
			//transmit CAN data for analog 3
			HAL_CAN_AddTxMessage(&hcan, &headers_3, a_data_3, &tx_mailbox);
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002148:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800214a:	491f      	ldr	r1, [pc, #124]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800214c:	4810      	ldr	r0, [pc, #64]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800214e:	f002 fe4b 	bl	8004de8 <HAL_CAN_AddTxMessage>
			//while (HAL_CAN_IsTxMessagePending(&hcan, tx_mailbox));//wait until data is sent for analog 3
		}
	}
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200022d0 	.word	0x200022d0
 8002160:	20000001 	.word	0x20000001
 8002164:	20000002 	.word	0x20000002
 8002168:	200063a4 	.word	0x200063a4
 800216c:	20000014 	.word	0x20000014
 8002170:	2000021a 	.word	0x2000021a
 8002174:	20000224 	.word	0x20000224
 8002178:	20000220 	.word	0x20000220
 800217c:	20000254 	.word	0x20000254
 8002180:	20006470 	.word	0x20006470
 8002184:	20004394 	.word	0x20004394
 8002188:	2000231c 	.word	0x2000231c
 800218c:	20002270 	.word	0x20002270
 8002190:	20002288 	.word	0x20002288
 8002194:	20000003 	.word	0x20000003
 8002198:	20000248 	.word	0x20000248
 800219c:	2000021c 	.word	0x2000021c
 80021a0:	20002328 	.word	0x20002328
 80021a4:	200022c8 	.word	0x200022c8
 80021a8:	2000639c 	.word	0x2000639c
 80021ac:	200063f4 	.word	0x200063f4
 80021b0:	20000004 	.word	0x20000004
 80021b4:	200022b0 	.word	0x200022b0
 80021b8:	2000021e 	.word	0x2000021e
 80021bc:	20004398 	.word	0x20004398
 80021c0:	20006458 	.word	0x20006458
 80021c4:	200022cc 	.word	0x200022cc
 80021c8:	20002258 	.word	0x20002258

080021cc <HAL_GPIO_EXTI_Callback>:

//handles the button interupts
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
	if(!updating_display){// don't interrupt if the display is in the middle of updating
 80021d6:	4bbe      	ldr	r3, [pc, #760]	; (80024d0 <HAL_GPIO_EXTI_Callback+0x304>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 84dd 	bne.w	8002b9a <HAL_GPIO_EXTI_Callback+0x9ce>
		//if the up button is pressed
		if(GPIO_Pin==UP_BTN_Pin && !up_btn_pressed){
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	f040 8137 	bne.w	8002456 <HAL_GPIO_EXTI_Callback+0x28a>
 80021e8:	4bba      	ldr	r3, [pc, #744]	; (80024d4 <HAL_GPIO_EXTI_Callback+0x308>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f040 8132 	bne.w	8002456 <HAL_GPIO_EXTI_Callback+0x28a>
			if(change_value_bool){//if changing a value
 80021f2:	4bb9      	ldr	r3, [pc, #740]	; (80024d8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d03a      	beq.n	8002270 <HAL_GPIO_EXTI_Callback+0xa4>
				//change the value of the selected item
				//main menu changes
				if(in_main_menu){
 80021fa:	4bb8      	ldr	r3, [pc, #736]	; (80024dc <HAL_GPIO_EXTI_Callback+0x310>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d018      	beq.n	8002234 <HAL_GPIO_EXTI_Callback+0x68>
					if(menu_pos==2)
 8002202:	4bb7      	ldr	r3, [pc, #732]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x314>)
 8002204:	f993 3000 	ldrsb.w	r3, [r3]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d10b      	bne.n	8002224 <HAL_GPIO_EXTI_Callback+0x58>
						display_scroll=(display_scroll==0)?2:(display_scroll-1);//scroll through devices in display values menu
 800220c:	4bb5      	ldr	r3, [pc, #724]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x318>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <HAL_GPIO_EXTI_Callback+0x52>
 8002214:	4bb3      	ldr	r3, [pc, #716]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x318>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	3b01      	subs	r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	e000      	b.n	8002220 <HAL_GPIO_EXTI_Callback+0x54>
 800221e:	2302      	movs	r3, #2
 8002220:	4ab0      	ldr	r2, [pc, #704]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x318>)
 8002222:	7013      	strb	r3, [r2, #0]
					if(menu_pos == 3)
 8002224:	4bae      	ldr	r3, [pc, #696]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x314>)
 8002226:	f993 3000 	ldrsb.w	r3, [r3]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d102      	bne.n	8002234 <HAL_GPIO_EXTI_Callback+0x68>
						changeDelay(1);//increment Delay
 800222e:	2001      	movs	r0, #1
 8002230:	f001 f84e 	bl	80032d0 <changeDelay>
				}
				//can menu changes
				if(in_can_menu){
 8002234:	4bac      	ldr	r3, [pc, #688]	; (80024e8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8105 	beq.w	8002448 <HAL_GPIO_EXTI_Callback+0x27c>
					if(can_pos==1)
 800223e:	4bab      	ldr	r3, [pc, #684]	; (80024ec <HAL_GPIO_EXTI_Callback+0x320>)
 8002240:	f993 3000 	ldrsb.w	r3, [r3]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d103      	bne.n	8002250 <HAL_GPIO_EXTI_Callback+0x84>
						changeBaudRate(1);//increment baud rate
 8002248:	2001      	movs	r0, #1
 800224a:	f000 fcb3 	bl	8002bb4 <changeBaudRate>
 800224e:	e0fb      	b.n	8002448 <HAL_GPIO_EXTI_Callback+0x27c>
					else if(can_pos>=2&&can_pos<=4)
 8002250:	4ba6      	ldr	r3, [pc, #664]	; (80024ec <HAL_GPIO_EXTI_Callback+0x320>)
 8002252:	f993 3000 	ldrsb.w	r3, [r3]
 8002256:	2b01      	cmp	r3, #1
 8002258:	f340 80f6 	ble.w	8002448 <HAL_GPIO_EXTI_Callback+0x27c>
 800225c:	4ba3      	ldr	r3, [pc, #652]	; (80024ec <HAL_GPIO_EXTI_Callback+0x320>)
 800225e:	f993 3000 	ldrsb.w	r3, [r3]
 8002262:	2b04      	cmp	r3, #4
 8002264:	f300 80f0 	bgt.w	8002448 <HAL_GPIO_EXTI_Callback+0x27c>
						changeCANID(1);//increment CAN ID
 8002268:	2001      	movs	r0, #1
 800226a:	f000 fe69 	bl	8002f40 <changeCANID>
 800226e:	e0eb      	b.n	8002448 <HAL_GPIO_EXTI_Callback+0x27c>
				}

			} else {
				//scroll menu up
				if(in_main_menu){
 8002270:	4b9a      	ldr	r3, [pc, #616]	; (80024dc <HAL_GPIO_EXTI_Callback+0x310>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d04a      	beq.n	800230e <HAL_GPIO_EXTI_Callback+0x142>
					menu_pos=(menu_pos==0)?main_menu_length-1:(menu_pos-1);//decrement menu position
 8002278:	4b99      	ldr	r3, [pc, #612]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x314>)
 800227a:	f993 3000 	ldrsb.w	r3, [r3]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_GPIO_EXTI_Callback+0xc2>
 8002282:	2304      	movs	r3, #4
 8002284:	b2db      	uxtb	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	b25b      	sxtb	r3, r3
 800228c:	e006      	b.n	800229c <HAL_GPIO_EXTI_Callback+0xd0>
 800228e:	4b94      	ldr	r3, [pc, #592]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x314>)
 8002290:	f993 3000 	ldrsb.w	r3, [r3]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	b25b      	sxtb	r3, r3
 800229c:	4a90      	ldr	r2, [pc, #576]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x314>)
 800229e:	7013      	strb	r3, [r2, #0]
					lcd_put_cur(0,0);
 80022a0:	2100      	movs	r1, #0
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7fe fd23 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80022a8:	4b8d      	ldr	r3, [pc, #564]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x314>)
 80022aa:	f993 3000 	ldrsb.w	r3, [r3]
 80022ae:	461a      	mov	r2, r3
 80022b0:	4613      	mov	r3, r2
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4413      	add	r3, r2
 80022b6:	4a8e      	ldr	r2, [pc, #568]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x324>)
 80022b8:	4413      	add	r3, r2
 80022ba:	2210      	movs	r2, #16
 80022bc:	4619      	mov	r1, r3
 80022be:	488d      	ldr	r0, [pc, #564]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x328>)
 80022c0:	f005 fe61 	bl	8007f86 <strncpy>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fd76 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(1,0);
 80022cc:	2100      	movs	r1, #0
 80022ce:	2001      	movs	r0, #1
 80022d0:	f7fe fd0d 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 80022d4:	4b82      	ldr	r3, [pc, #520]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x314>)
 80022d6:	f993 3000 	ldrsb.w	r3, [r3]
 80022da:	3301      	adds	r3, #1
 80022dc:	2204      	movs	r2, #4
 80022de:	fb93 f1f2 	sdiv	r1, r3, r2
 80022e2:	fb02 f201 	mul.w	r2, r2, r1
 80022e6:	1a9a      	subs	r2, r3, r2
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	4a80      	ldr	r2, [pc, #512]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x324>)
 80022f0:	4413      	add	r3, r2
 80022f2:	2210      	movs	r2, #16
 80022f4:	4619      	mov	r1, r3
 80022f6:	487f      	ldr	r0, [pc, #508]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x328>)
 80022f8:	f005 fe45 	bl	8007f86 <strncpy>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fd5a 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(0,0);
 8002304:	2100      	movs	r1, #0
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe fcf1 	bl	8000cee <lcd_put_cur>
 800230c:	e09c      	b.n	8002448 <HAL_GPIO_EXTI_Callback+0x27c>
				} else if(in_can_menu){
 800230e:	4b76      	ldr	r3, [pc, #472]	; (80024e8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d04a      	beq.n	80023ac <HAL_GPIO_EXTI_Callback+0x1e0>
					can_pos=(can_pos==0)?can_menu_length-1:(can_pos-1);//decrement menu position
 8002316:	4b75      	ldr	r3, [pc, #468]	; (80024ec <HAL_GPIO_EXTI_Callback+0x320>)
 8002318:	f993 3000 	ldrsb.w	r3, [r3]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_GPIO_EXTI_Callback+0x160>
 8002320:	2306      	movs	r3, #6
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	b25b      	sxtb	r3, r3
 800232a:	e006      	b.n	800233a <HAL_GPIO_EXTI_Callback+0x16e>
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_GPIO_EXTI_Callback+0x320>)
 800232e:	f993 3000 	ldrsb.w	r3, [r3]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	b25b      	sxtb	r3, r3
 800233a:	4a6c      	ldr	r2, [pc, #432]	; (80024ec <HAL_GPIO_EXTI_Callback+0x320>)
 800233c:	7013      	strb	r3, [r2, #0]
					lcd_put_cur(0,0);
 800233e:	2100      	movs	r1, #0
 8002340:	2000      	movs	r0, #0
 8002342:	f7fe fcd4 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 8002346:	4b69      	ldr	r3, [pc, #420]	; (80024ec <HAL_GPIO_EXTI_Callback+0x320>)
 8002348:	f993 3000 	ldrsb.w	r3, [r3]
 800234c:	461a      	mov	r2, r3
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	4413      	add	r3, r2
 8002354:	4a68      	ldr	r2, [pc, #416]	; (80024f8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002356:	4413      	add	r3, r2
 8002358:	2210      	movs	r2, #16
 800235a:	4619      	mov	r1, r3
 800235c:	4865      	ldr	r0, [pc, #404]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x328>)
 800235e:	f005 fe12 	bl	8007f86 <strncpy>
 8002362:	4603      	mov	r3, r0
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fd27 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(1,0);
 800236a:	2100      	movs	r1, #0
 800236c:	2001      	movs	r0, #1
 800236e:	f7fe fcbe 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 8002372:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <HAL_GPIO_EXTI_Callback+0x320>)
 8002374:	f993 3000 	ldrsb.w	r3, [r3]
 8002378:	3301      	adds	r3, #1
 800237a:	2206      	movs	r2, #6
 800237c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002380:	fb02 f201 	mul.w	r2, r2, r1
 8002384:	1a9a      	subs	r2, r3, r2
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	4413      	add	r3, r2
 800238c:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <HAL_GPIO_EXTI_Callback+0x32c>)
 800238e:	4413      	add	r3, r2
 8002390:	2210      	movs	r2, #16
 8002392:	4619      	mov	r1, r3
 8002394:	4857      	ldr	r0, [pc, #348]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x328>)
 8002396:	f005 fdf6 	bl	8007f86 <strncpy>
 800239a:	4603      	mov	r3, r0
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fd0b 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(0,0);
 80023a2:	2100      	movs	r1, #0
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7fe fca2 	bl	8000cee <lcd_put_cur>
 80023aa:	e04d      	b.n	8002448 <HAL_GPIO_EXTI_Callback+0x27c>
				} else if(in_analog_menu){
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_GPIO_EXTI_Callback+0x330>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d049      	beq.n	8002448 <HAL_GPIO_EXTI_Callback+0x27c>
					analog_pos=(analog_pos==0)?analog_menu_length-1:(analog_pos-1);//decrement menu position
 80023b4:	4b52      	ldr	r3, [pc, #328]	; (8002500 <HAL_GPIO_EXTI_Callback+0x334>)
 80023b6:	f993 3000 	ldrsb.w	r3, [r3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <HAL_GPIO_EXTI_Callback+0x1fe>
 80023be:	230a      	movs	r3, #10
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_EXTI_Callback+0x20c>
 80023ca:	4b4d      	ldr	r3, [pc, #308]	; (8002500 <HAL_GPIO_EXTI_Callback+0x334>)
 80023cc:	f993 3000 	ldrsb.w	r3, [r3]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	b25b      	sxtb	r3, r3
 80023d8:	4a49      	ldr	r2, [pc, #292]	; (8002500 <HAL_GPIO_EXTI_Callback+0x334>)
 80023da:	7013      	strb	r3, [r2, #0]
					lcd_put_cur(0,0);
 80023dc:	2100      	movs	r1, #0
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe fc85 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 80023e4:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_GPIO_EXTI_Callback+0x334>)
 80023e6:	f993 3000 	ldrsb.w	r3, [r3]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	4a44      	ldr	r2, [pc, #272]	; (8002504 <HAL_GPIO_EXTI_Callback+0x338>)
 80023f4:	4413      	add	r3, r2
 80023f6:	2210      	movs	r2, #16
 80023f8:	4619      	mov	r1, r3
 80023fa:	483e      	ldr	r0, [pc, #248]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x328>)
 80023fc:	f005 fdc3 	bl	8007f86 <strncpy>
 8002400:	4603      	mov	r3, r0
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fcd8 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(1,0);
 8002408:	2100      	movs	r1, #0
 800240a:	2001      	movs	r0, #1
 800240c:	f7fe fc6f 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_GPIO_EXTI_Callback+0x334>)
 8002412:	f993 3000 	ldrsb.w	r3, [r3]
 8002416:	3301      	adds	r3, #1
 8002418:	220a      	movs	r2, #10
 800241a:	fb93 f1f2 	sdiv	r1, r3, r2
 800241e:	fb02 f201 	mul.w	r2, r2, r1
 8002422:	1a9a      	subs	r2, r3, r2
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	4413      	add	r3, r2
 800242a:	4a36      	ldr	r2, [pc, #216]	; (8002504 <HAL_GPIO_EXTI_Callback+0x338>)
 800242c:	4413      	add	r3, r2
 800242e:	2210      	movs	r2, #16
 8002430:	4619      	mov	r1, r3
 8002432:	4830      	ldr	r0, [pc, #192]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x328>)
 8002434:	f005 fda7 	bl	8007f86 <strncpy>
 8002438:	4603      	mov	r3, r0
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fcbc 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(0,0);
 8002440:	2100      	movs	r1, #0
 8002442:	2000      	movs	r0, #0
 8002444:	f7fe fc53 	bl	8000cee <lcd_put_cur>
				}
			}
			btn_counter=0; // reset btn counter
 8002448:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_GPIO_EXTI_Callback+0x33c>)
 800244a:	2200      	movs	r2, #0
 800244c:	801a      	strh	r2, [r3, #0]
			up_btn_pressed=1; // set up button to pressed
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_GPIO_EXTI_Callback+0x308>)
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	e3a1      	b.n	8002b9a <HAL_GPIO_EXTI_Callback+0x9ce>
		}

		//if the down button is pressed
		else if(GPIO_Pin==DOWN_BTN_Pin && !down_btn_pressed){
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	2b01      	cmp	r3, #1
 800245a:	f040 8149 	bne.w	80026f0 <HAL_GPIO_EXTI_Callback+0x524>
 800245e:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_GPIO_EXTI_Callback+0x340>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 8144 	bne.w	80026f0 <HAL_GPIO_EXTI_Callback+0x524>
			if(change_value_bool){//if changing a value
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_GPIO_EXTI_Callback+0x30c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d061      	beq.n	8002534 <HAL_GPIO_EXTI_Callback+0x368>
				//change the value of the selected item
				//main menu changes
				if(in_main_menu){
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_GPIO_EXTI_Callback+0x310>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01c      	beq.n	80024b2 <HAL_GPIO_EXTI_Callback+0x2e6>
					if(menu_pos==2)
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x314>)
 800247a:	f993 3000 	ldrsb.w	r3, [r3]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d10e      	bne.n	80024a0 <HAL_GPIO_EXTI_Callback+0x2d4>
						display_scroll=(display_scroll+1)%3;//scroll through devices in display values menu
 8002482:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x318>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_GPIO_EXTI_Callback+0x344>)
 800248a:	fb83 3102 	smull	r3, r1, r3, r2
 800248e:	17d3      	asrs	r3, r2, #31
 8002490:	1ac9      	subs	r1, r1, r3
 8002492:	460b      	mov	r3, r1
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	440b      	add	r3, r1
 8002498:	1ad1      	subs	r1, r2, r3
 800249a:	b2ca      	uxtb	r2, r1
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x318>)
 800249e:	701a      	strb	r2, [r3, #0]
					if(menu_pos == 3)
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x314>)
 80024a2:	f993 3000 	ldrsb.w	r3, [r3]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d103      	bne.n	80024b2 <HAL_GPIO_EXTI_Callback+0x2e6>
						changeDelay(-1);//decrement Delay
 80024aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024ae:	f000 ff0f 	bl	80032d0 <changeDelay>
				}
				//can menu changes
				if(in_can_menu){
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_GPIO_EXTI_Callback+0x31c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 8113 	beq.w	80026e2 <HAL_GPIO_EXTI_Callback+0x516>
					if(can_pos==1)
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_GPIO_EXTI_Callback+0x320>)
 80024be:	f993 3000 	ldrsb.w	r3, [r3]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d126      	bne.n	8002514 <HAL_GPIO_EXTI_Callback+0x348>
						changeBaudRate(-1);//decrement baud rate
 80024c6:	20ff      	movs	r0, #255	; 0xff
 80024c8:	f000 fb74 	bl	8002bb4 <changeBaudRate>
 80024cc:	e109      	b.n	80026e2 <HAL_GPIO_EXTI_Callback+0x516>
 80024ce:	bf00      	nop
 80024d0:	20000234 	.word	0x20000234
 80024d4:	2000022f 	.word	0x2000022f
 80024d8:	2000022e 	.word	0x2000022e
 80024dc:	2000016e 	.word	0x2000016e
 80024e0:	2000022b 	.word	0x2000022b
 80024e4:	2000022a 	.word	0x2000022a
 80024e8:	20000228 	.word	0x20000228
 80024ec:	2000022c 	.word	0x2000022c
 80024f0:	20000018 	.word	0x20000018
 80024f4:	200022b4 	.word	0x200022b4
 80024f8:	2000005c 	.word	0x2000005c
 80024fc:	20000229 	.word	0x20000229
 8002500:	2000022d 	.word	0x2000022d
 8002504:	200000c4 	.word	0x200000c4
 8002508:	20000232 	.word	0x20000232
 800250c:	20000230 	.word	0x20000230
 8002510:	55555556 	.word	0x55555556
					else if(can_pos>=2&&can_pos<=4)
 8002514:	4bcc      	ldr	r3, [pc, #816]	; (8002848 <HAL_GPIO_EXTI_Callback+0x67c>)
 8002516:	f993 3000 	ldrsb.w	r3, [r3]
 800251a:	2b01      	cmp	r3, #1
 800251c:	f340 80e1 	ble.w	80026e2 <HAL_GPIO_EXTI_Callback+0x516>
 8002520:	4bc9      	ldr	r3, [pc, #804]	; (8002848 <HAL_GPIO_EXTI_Callback+0x67c>)
 8002522:	f993 3000 	ldrsb.w	r3, [r3]
 8002526:	2b04      	cmp	r3, #4
 8002528:	f300 80db 	bgt.w	80026e2 <HAL_GPIO_EXTI_Callback+0x516>
						changeCANID(-1);//decrement CAN ID
 800252c:	20ff      	movs	r0, #255	; 0xff
 800252e:	f000 fd07 	bl	8002f40 <changeCANID>
 8002532:	e0d6      	b.n	80026e2 <HAL_GPIO_EXTI_Callback+0x516>
				}
			} else {
				//scroll menu down
				if(in_main_menu){
 8002534:	4bc5      	ldr	r3, [pc, #788]	; (800284c <HAL_GPIO_EXTI_Callback+0x680>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d043      	beq.n	80025c4 <HAL_GPIO_EXTI_Callback+0x3f8>
					menu_pos = (menu_pos+1)%main_menu_length;//increment menu position
 800253c:	4bc4      	ldr	r3, [pc, #784]	; (8002850 <HAL_GPIO_EXTI_Callback+0x684>)
 800253e:	f993 3000 	ldrsb.w	r3, [r3]
 8002542:	3301      	adds	r3, #1
 8002544:	2204      	movs	r2, #4
 8002546:	fb93 f1f2 	sdiv	r1, r3, r2
 800254a:	fb02 f201 	mul.w	r2, r2, r1
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	b25a      	sxtb	r2, r3
 8002552:	4bbf      	ldr	r3, [pc, #764]	; (8002850 <HAL_GPIO_EXTI_Callback+0x684>)
 8002554:	701a      	strb	r2, [r3, #0]
					lcd_put_cur(0,0);
 8002556:	2100      	movs	r1, #0
 8002558:	2000      	movs	r0, #0
 800255a:	f7fe fbc8 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 800255e:	4bbc      	ldr	r3, [pc, #752]	; (8002850 <HAL_GPIO_EXTI_Callback+0x684>)
 8002560:	f993 3000 	ldrsb.w	r3, [r3]
 8002564:	461a      	mov	r2, r3
 8002566:	4613      	mov	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	4413      	add	r3, r2
 800256c:	4ab9      	ldr	r2, [pc, #740]	; (8002854 <HAL_GPIO_EXTI_Callback+0x688>)
 800256e:	4413      	add	r3, r2
 8002570:	2210      	movs	r2, #16
 8002572:	4619      	mov	r1, r3
 8002574:	48b8      	ldr	r0, [pc, #736]	; (8002858 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002576:	f005 fd06 	bl	8007f86 <strncpy>
 800257a:	4603      	mov	r3, r0
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe fc1b 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(1,0);
 8002582:	2100      	movs	r1, #0
 8002584:	2001      	movs	r0, #1
 8002586:	f7fe fbb2 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 800258a:	4bb1      	ldr	r3, [pc, #708]	; (8002850 <HAL_GPIO_EXTI_Callback+0x684>)
 800258c:	f993 3000 	ldrsb.w	r3, [r3]
 8002590:	3301      	adds	r3, #1
 8002592:	2204      	movs	r2, #4
 8002594:	fb93 f1f2 	sdiv	r1, r3, r2
 8002598:	fb02 f201 	mul.w	r2, r2, r1
 800259c:	1a9a      	subs	r2, r3, r2
 800259e:	4613      	mov	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4413      	add	r3, r2
 80025a4:	4aab      	ldr	r2, [pc, #684]	; (8002854 <HAL_GPIO_EXTI_Callback+0x688>)
 80025a6:	4413      	add	r3, r2
 80025a8:	2210      	movs	r2, #16
 80025aa:	4619      	mov	r1, r3
 80025ac:	48aa      	ldr	r0, [pc, #680]	; (8002858 <HAL_GPIO_EXTI_Callback+0x68c>)
 80025ae:	f005 fcea 	bl	8007f86 <strncpy>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fbff 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(0,0);
 80025ba:	2100      	movs	r1, #0
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe fb96 	bl	8000cee <lcd_put_cur>
 80025c2:	e08e      	b.n	80026e2 <HAL_GPIO_EXTI_Callback+0x516>
				} else if(in_can_menu){
 80025c4:	4ba5      	ldr	r3, [pc, #660]	; (800285c <HAL_GPIO_EXTI_Callback+0x690>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d043      	beq.n	8002654 <HAL_GPIO_EXTI_Callback+0x488>
					can_pos=(can_pos+1)%can_menu_length;//increment menu position
 80025cc:	4b9e      	ldr	r3, [pc, #632]	; (8002848 <HAL_GPIO_EXTI_Callback+0x67c>)
 80025ce:	f993 3000 	ldrsb.w	r3, [r3]
 80025d2:	3301      	adds	r3, #1
 80025d4:	2206      	movs	r2, #6
 80025d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80025da:	fb02 f201 	mul.w	r2, r2, r1
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	b25a      	sxtb	r2, r3
 80025e2:	4b99      	ldr	r3, [pc, #612]	; (8002848 <HAL_GPIO_EXTI_Callback+0x67c>)
 80025e4:	701a      	strb	r2, [r3, #0]
					lcd_put_cur(0,0);
 80025e6:	2100      	movs	r1, #0
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7fe fb80 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 80025ee:	4b96      	ldr	r3, [pc, #600]	; (8002848 <HAL_GPIO_EXTI_Callback+0x67c>)
 80025f0:	f993 3000 	ldrsb.w	r3, [r3]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	4413      	add	r3, r2
 80025fc:	4a98      	ldr	r2, [pc, #608]	; (8002860 <HAL_GPIO_EXTI_Callback+0x694>)
 80025fe:	4413      	add	r3, r2
 8002600:	2210      	movs	r2, #16
 8002602:	4619      	mov	r1, r3
 8002604:	4894      	ldr	r0, [pc, #592]	; (8002858 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002606:	f005 fcbe 	bl	8007f86 <strncpy>
 800260a:	4603      	mov	r3, r0
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fbd3 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(1,0);
 8002612:	2100      	movs	r1, #0
 8002614:	2001      	movs	r0, #1
 8002616:	f7fe fb6a 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 800261a:	4b8b      	ldr	r3, [pc, #556]	; (8002848 <HAL_GPIO_EXTI_Callback+0x67c>)
 800261c:	f993 3000 	ldrsb.w	r3, [r3]
 8002620:	3301      	adds	r3, #1
 8002622:	2206      	movs	r2, #6
 8002624:	fb93 f1f2 	sdiv	r1, r3, r2
 8002628:	fb02 f201 	mul.w	r2, r2, r1
 800262c:	1a9a      	subs	r2, r3, r2
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	4413      	add	r3, r2
 8002634:	4a8a      	ldr	r2, [pc, #552]	; (8002860 <HAL_GPIO_EXTI_Callback+0x694>)
 8002636:	4413      	add	r3, r2
 8002638:	2210      	movs	r2, #16
 800263a:	4619      	mov	r1, r3
 800263c:	4886      	ldr	r0, [pc, #536]	; (8002858 <HAL_GPIO_EXTI_Callback+0x68c>)
 800263e:	f005 fca2 	bl	8007f86 <strncpy>
 8002642:	4603      	mov	r3, r0
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fbb7 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(0,0);
 800264a:	2100      	movs	r1, #0
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe fb4e 	bl	8000cee <lcd_put_cur>
 8002652:	e046      	b.n	80026e2 <HAL_GPIO_EXTI_Callback+0x516>
				} else if(in_analog_menu){
 8002654:	4b83      	ldr	r3, [pc, #524]	; (8002864 <HAL_GPIO_EXTI_Callback+0x698>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d042      	beq.n	80026e2 <HAL_GPIO_EXTI_Callback+0x516>
					analog_pos=(analog_pos+1)%analog_menu_length;//increment menu position
 800265c:	4b82      	ldr	r3, [pc, #520]	; (8002868 <HAL_GPIO_EXTI_Callback+0x69c>)
 800265e:	f993 3000 	ldrsb.w	r3, [r3]
 8002662:	3301      	adds	r3, #1
 8002664:	220a      	movs	r2, #10
 8002666:	fb93 f1f2 	sdiv	r1, r3, r2
 800266a:	fb02 f201 	mul.w	r2, r2, r1
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	b25a      	sxtb	r2, r3
 8002672:	4b7d      	ldr	r3, [pc, #500]	; (8002868 <HAL_GPIO_EXTI_Callback+0x69c>)
 8002674:	701a      	strb	r2, [r3, #0]
					lcd_put_cur(0,0);
 8002676:	2100      	movs	r1, #0
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe fb38 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 800267e:	4b7a      	ldr	r3, [pc, #488]	; (8002868 <HAL_GPIO_EXTI_Callback+0x69c>)
 8002680:	f993 3000 	ldrsb.w	r3, [r3]
 8002684:	461a      	mov	r2, r3
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	4413      	add	r3, r2
 800268c:	4a77      	ldr	r2, [pc, #476]	; (800286c <HAL_GPIO_EXTI_Callback+0x6a0>)
 800268e:	4413      	add	r3, r2
 8002690:	2210      	movs	r2, #16
 8002692:	4619      	mov	r1, r3
 8002694:	4870      	ldr	r0, [pc, #448]	; (8002858 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002696:	f005 fc76 	bl	8007f86 <strncpy>
 800269a:	4603      	mov	r3, r0
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fb8b 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(1,0);
 80026a2:	2100      	movs	r1, #0
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7fe fb22 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 80026aa:	4b6f      	ldr	r3, [pc, #444]	; (8002868 <HAL_GPIO_EXTI_Callback+0x69c>)
 80026ac:	f993 3000 	ldrsb.w	r3, [r3]
 80026b0:	3301      	adds	r3, #1
 80026b2:	220a      	movs	r2, #10
 80026b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80026b8:	fb02 f201 	mul.w	r2, r2, r1
 80026bc:	1a9a      	subs	r2, r3, r2
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	4413      	add	r3, r2
 80026c4:	4a69      	ldr	r2, [pc, #420]	; (800286c <HAL_GPIO_EXTI_Callback+0x6a0>)
 80026c6:	4413      	add	r3, r2
 80026c8:	2210      	movs	r2, #16
 80026ca:	4619      	mov	r1, r3
 80026cc:	4862      	ldr	r0, [pc, #392]	; (8002858 <HAL_GPIO_EXTI_Callback+0x68c>)
 80026ce:	f005 fc5a 	bl	8007f86 <strncpy>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fb6f 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(0,0);
 80026da:	2100      	movs	r1, #0
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe fb06 	bl	8000cee <lcd_put_cur>
				}

			}
			btn_counter=0; // reset btn counter
 80026e2:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_GPIO_EXTI_Callback+0x6a4>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	801a      	strh	r2, [r3, #0]
			down_btn_pressed=1; // set down button to pressed
 80026e8:	4b62      	ldr	r3, [pc, #392]	; (8002874 <HAL_GPIO_EXTI_Callback+0x6a8>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e254      	b.n	8002b9a <HAL_GPIO_EXTI_Callback+0x9ce>
		}

		//if the select button is pressed
		else if(GPIO_Pin==SEL_BTN_Pin && !sel_btn_pressed){
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	f040 8251 	bne.w	8002b9a <HAL_GPIO_EXTI_Callback+0x9ce>
 80026f8:	4b5f      	ldr	r3, [pc, #380]	; (8002878 <HAL_GPIO_EXTI_Callback+0x6ac>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f040 824c 	bne.w	8002b9a <HAL_GPIO_EXTI_Callback+0x9ce>
			//set changes and reinitialize can bus
			if(!change_value_bool){
 8002702:	4b5e      	ldr	r3, [pc, #376]	; (800287c <HAL_GPIO_EXTI_Callback+0x6b0>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f040 81bd 	bne.w	8002a86 <HAL_GPIO_EXTI_Callback+0x8ba>
				if(in_main_menu){
 800270c:	4b4f      	ldr	r3, [pc, #316]	; (800284c <HAL_GPIO_EXTI_Callback+0x680>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80c9 	beq.w	80028a8 <HAL_GPIO_EXTI_Callback+0x6dc>
					if(menu_pos==0){
 8002716:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <HAL_GPIO_EXTI_Callback+0x684>)
 8002718:	f993 3000 	ldrsb.w	r3, [r3]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d146      	bne.n	80027ae <HAL_GPIO_EXTI_Callback+0x5e2>
						//display can menu
						lcd_put_cur(0,0);
 8002720:	2100      	movs	r1, #0
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe fae3 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[can_pos],16));
 8002728:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_GPIO_EXTI_Callback+0x67c>)
 800272a:	f993 3000 	ldrsb.w	r3, [r3]
 800272e:	461a      	mov	r2, r3
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	4413      	add	r3, r2
 8002736:	4a4a      	ldr	r2, [pc, #296]	; (8002860 <HAL_GPIO_EXTI_Callback+0x694>)
 8002738:	4413      	add	r3, r2
 800273a:	2210      	movs	r2, #16
 800273c:	4619      	mov	r1, r3
 800273e:	4846      	ldr	r0, [pc, #280]	; (8002858 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002740:	f005 fc21 	bl	8007f86 <strncpy>
 8002744:	4603      	mov	r3, r0
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fb36 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(1,0);
 800274c:	2100      	movs	r1, #0
 800274e:	2001      	movs	r0, #1
 8002750:	f7fe facd 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,can_menu[(can_pos+1)%can_menu_length],16));
 8002754:	4b3c      	ldr	r3, [pc, #240]	; (8002848 <HAL_GPIO_EXTI_Callback+0x67c>)
 8002756:	f993 3000 	ldrsb.w	r3, [r3]
 800275a:	3301      	adds	r3, #1
 800275c:	2206      	movs	r2, #6
 800275e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002762:	fb02 f201 	mul.w	r2, r2, r1
 8002766:	1a9a      	subs	r2, r3, r2
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	4413      	add	r3, r2
 800276e:	4a3c      	ldr	r2, [pc, #240]	; (8002860 <HAL_GPIO_EXTI_Callback+0x694>)
 8002770:	4413      	add	r3, r2
 8002772:	2210      	movs	r2, #16
 8002774:	4619      	mov	r1, r3
 8002776:	4838      	ldr	r0, [pc, #224]	; (8002858 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002778:	f005 fc05 	bl	8007f86 <strncpy>
 800277c:	4603      	mov	r3, r0
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fb1a 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,0);
 8002784:	2100      	movs	r1, #0
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe fab1 	bl	8000cee <lcd_put_cur>
						//update menu booleans
						in_can_menu=1;
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <HAL_GPIO_EXTI_Callback+0x690>)
 800278e:	2201      	movs	r2, #1
 8002790:	701a      	strb	r2, [r3, #0]
						in_main_menu=0;
 8002792:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_GPIO_EXTI_Callback+0x680>)
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
						change_value_bool=!change_value_bool;//invert change value bool
 8002798:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_GPIO_EXTI_Callback+0x6b0>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b34      	ldr	r3, [pc, #208]	; (800287c <HAL_GPIO_EXTI_Callback+0x6b0>)
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e1e4      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					} else if(menu_pos==1){
 80027ae:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_GPIO_EXTI_Callback+0x684>)
 80027b0:	f993 3000 	ldrsb.w	r3, [r3]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d163      	bne.n	8002880 <HAL_GPIO_EXTI_Callback+0x6b4>
						//display can menu
						lcd_put_cur(0,0);
 80027b8:	2100      	movs	r1, #0
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fe fa97 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[analog_pos],16));
 80027c0:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_GPIO_EXTI_Callback+0x69c>)
 80027c2:	f993 3000 	ldrsb.w	r3, [r3]
 80027c6:	461a      	mov	r2, r3
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	4413      	add	r3, r2
 80027ce:	4a27      	ldr	r2, [pc, #156]	; (800286c <HAL_GPIO_EXTI_Callback+0x6a0>)
 80027d0:	4413      	add	r3, r2
 80027d2:	2210      	movs	r2, #16
 80027d4:	4619      	mov	r1, r3
 80027d6:	4820      	ldr	r0, [pc, #128]	; (8002858 <HAL_GPIO_EXTI_Callback+0x68c>)
 80027d8:	f005 fbd5 	bl	8007f86 <strncpy>
 80027dc:	4603      	mov	r3, r0
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe faea 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(1,0);
 80027e4:	2100      	movs	r1, #0
 80027e6:	2001      	movs	r0, #1
 80027e8:	f7fe fa81 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,analog_menu[(analog_pos+1)%analog_menu_length],16));
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_GPIO_EXTI_Callback+0x69c>)
 80027ee:	f993 3000 	ldrsb.w	r3, [r3]
 80027f2:	3301      	adds	r3, #1
 80027f4:	220a      	movs	r2, #10
 80027f6:	fb93 f1f2 	sdiv	r1, r3, r2
 80027fa:	fb02 f201 	mul.w	r2, r2, r1
 80027fe:	1a9a      	subs	r2, r3, r2
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	4413      	add	r3, r2
 8002806:	4a19      	ldr	r2, [pc, #100]	; (800286c <HAL_GPIO_EXTI_Callback+0x6a0>)
 8002808:	4413      	add	r3, r2
 800280a:	2210      	movs	r2, #16
 800280c:	4619      	mov	r1, r3
 800280e:	4812      	ldr	r0, [pc, #72]	; (8002858 <HAL_GPIO_EXTI_Callback+0x68c>)
 8002810:	f005 fbb9 	bl	8007f86 <strncpy>
 8002814:	4603      	mov	r3, r0
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe face 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,0);
 800281c:	2100      	movs	r1, #0
 800281e:	2000      	movs	r0, #0
 8002820:	f7fe fa65 	bl	8000cee <lcd_put_cur>
						//update menu booleans
						in_analog_menu=1;
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <HAL_GPIO_EXTI_Callback+0x698>)
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
						in_main_menu=0;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_GPIO_EXTI_Callback+0x680>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
						change_value_bool=!change_value_bool;//invert change value bool
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_GPIO_EXTI_Callback+0x6b0>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_GPIO_EXTI_Callback+0x6b0>)
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e198      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
 8002846:	bf00      	nop
 8002848:	2000022c 	.word	0x2000022c
 800284c:	2000016e 	.word	0x2000016e
 8002850:	2000022b 	.word	0x2000022b
 8002854:	20000018 	.word	0x20000018
 8002858:	200022b4 	.word	0x200022b4
 800285c:	20000228 	.word	0x20000228
 8002860:	2000005c 	.word	0x2000005c
 8002864:	20000229 	.word	0x20000229
 8002868:	2000022d 	.word	0x2000022d
 800286c:	200000c4 	.word	0x200000c4
 8002870:	20000232 	.word	0x20000232
 8002874:	20000230 	.word	0x20000230
 8002878:	20000231 	.word	0x20000231
 800287c:	2000022e 	.word	0x2000022e
					} else if (menu_pos==2){
 8002880:	4bab      	ldr	r3, [pc, #684]	; (8002b30 <HAL_GPIO_EXTI_Callback+0x964>)
 8002882:	f993 3000 	ldrsb.w	r3, [r3]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d103      	bne.n	8002892 <HAL_GPIO_EXTI_Callback+0x6c6>
						display_scroll=0;// reset display value menu position
 800288a:	4baa      	ldr	r3, [pc, #680]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x968>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	e172      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					} else if (menu_pos==3){
 8002892:	4ba7      	ldr	r3, [pc, #668]	; (8002b30 <HAL_GPIO_EXTI_Callback+0x964>)
 8002894:	f993 3000 	ldrsb.w	r3, [r3]
 8002898:	2b03      	cmp	r3, #3
 800289a:	f040 816d 	bne.w	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
						//move cursor for delay change
						lcd_put_cur(0,13);
 800289e:	210d      	movs	r1, #13
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe fa24 	bl	8000cee <lcd_put_cur>
 80028a6:	e167      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					}
				} else if((in_can_menu&&can_pos==0)||(in_analog_menu&&analog_pos==0)){// back buttons
 80028a8:	4ba3      	ldr	r3, [pc, #652]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x96c>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <HAL_GPIO_EXTI_Callback+0x6ee>
 80028b0:	4ba2      	ldr	r3, [pc, #648]	; (8002b3c <HAL_GPIO_EXTI_Callback+0x970>)
 80028b2:	f993 3000 	ldrsb.w	r3, [r3]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <HAL_GPIO_EXTI_Callback+0x700>
 80028ba:	4ba1      	ldr	r3, [pc, #644]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x974>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d04e      	beq.n	8002960 <HAL_GPIO_EXTI_Callback+0x794>
 80028c2:	4ba0      	ldr	r3, [pc, #640]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x978>)
 80028c4:	f993 3000 	ldrsb.w	r3, [r3]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d149      	bne.n	8002960 <HAL_GPIO_EXTI_Callback+0x794>
					//display main menu
					lcd_put_cur(0,0);
 80028cc:	2100      	movs	r1, #0
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe fa0d 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 80028d4:	4b96      	ldr	r3, [pc, #600]	; (8002b30 <HAL_GPIO_EXTI_Callback+0x964>)
 80028d6:	f993 3000 	ldrsb.w	r3, [r3]
 80028da:	461a      	mov	r2, r3
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	4413      	add	r3, r2
 80028e2:	4a99      	ldr	r2, [pc, #612]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x97c>)
 80028e4:	4413      	add	r3, r2
 80028e6:	2210      	movs	r2, #16
 80028e8:	4619      	mov	r1, r3
 80028ea:	4898      	ldr	r0, [pc, #608]	; (8002b4c <HAL_GPIO_EXTI_Callback+0x980>)
 80028ec:	f005 fb4b 	bl	8007f86 <strncpy>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fa60 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(1,0);
 80028f8:	2100      	movs	r1, #0
 80028fa:	2001      	movs	r0, #1
 80028fc:	f7fe f9f7 	bl	8000cee <lcd_put_cur>
					lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8002900:	4b8b      	ldr	r3, [pc, #556]	; (8002b30 <HAL_GPIO_EXTI_Callback+0x964>)
 8002902:	f993 3000 	ldrsb.w	r3, [r3]
 8002906:	3301      	adds	r3, #1
 8002908:	2204      	movs	r2, #4
 800290a:	fb93 f1f2 	sdiv	r1, r3, r2
 800290e:	fb02 f201 	mul.w	r2, r2, r1
 8002912:	1a9a      	subs	r2, r3, r2
 8002914:	4613      	mov	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	4413      	add	r3, r2
 800291a:	4a8b      	ldr	r2, [pc, #556]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x97c>)
 800291c:	4413      	add	r3, r2
 800291e:	2210      	movs	r2, #16
 8002920:	4619      	mov	r1, r3
 8002922:	488a      	ldr	r0, [pc, #552]	; (8002b4c <HAL_GPIO_EXTI_Callback+0x980>)
 8002924:	f005 fb2f 	bl	8007f86 <strncpy>
 8002928:	4603      	mov	r3, r0
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fa44 	bl	8000db8 <lcd_send_string>
					lcd_put_cur(0,0);
 8002930:	2100      	movs	r1, #0
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe f9db 	bl	8000cee <lcd_put_cur>
					//update menu booleans
					in_can_menu=0;
 8002938:	4b7f      	ldr	r3, [pc, #508]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x96c>)
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
					in_analog_menu=0;
 800293e:	4b80      	ldr	r3, [pc, #512]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x974>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
					in_main_menu=1;
 8002944:	4b82      	ldr	r3, [pc, #520]	; (8002b50 <HAL_GPIO_EXTI_Callback+0x984>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
					change_value_bool=!change_value_bool;//invert change value bool
 800294a:	4b82      	ldr	r3, [pc, #520]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	4b7e      	ldr	r3, [pc, #504]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e10b      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
				} else if (in_analog_menu){
 8002960:	4b77      	ldr	r3, [pc, #476]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x974>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d06e      	beq.n	8002a46 <HAL_GPIO_EXTI_Callback+0x87a>
					if(analog_pos>=1 && analog_pos<=4){
 8002968:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x978>)
 800296a:	f993 3000 	ldrsb.w	r3, [r3]
 800296e:	2b00      	cmp	r3, #0
 8002970:	dd18      	ble.n	80029a4 <HAL_GPIO_EXTI_Callback+0x7d8>
 8002972:	4b74      	ldr	r3, [pc, #464]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x978>)
 8002974:	f993 3000 	ldrsb.w	r3, [r3]
 8002978:	2b04      	cmp	r3, #4
 800297a:	dc13      	bgt.n	80029a4 <HAL_GPIO_EXTI_Callback+0x7d8>
						zeroAnalog(analog_pos-1);// set the analog offsets to the current value
 800297c:	4b71      	ldr	r3, [pc, #452]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x978>)
 800297e:	f993 3000 	ldrsb.w	r3, [r3]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4618      	mov	r0, r3
 800298a:	f000 feaf 	bl	80036ec <zeroAnalog>
						change_value_bool=!change_value_bool;//invert change value bool
 800298e:	4b71      	ldr	r3, [pc, #452]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf0c      	ite	eq
 8002996:	2301      	moveq	r3, #1
 8002998:	2300      	movne	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	4b6d      	ldr	r3, [pc, #436]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e0e9      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					}else if(analog_pos>=5 && analog_pos<=7){
 80029a4:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x978>)
 80029a6:	f993 3000 	ldrsb.w	r3, [r3]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	dd18      	ble.n	80029e0 <HAL_GPIO_EXTI_Callback+0x814>
 80029ae:	4b65      	ldr	r3, [pc, #404]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x978>)
 80029b0:	f993 3000 	ldrsb.w	r3, [r3]
 80029b4:	2b07      	cmp	r3, #7
 80029b6:	dc13      	bgt.n	80029e0 <HAL_GPIO_EXTI_Callback+0x814>
						toggleAnalog(analog_pos-4);
 80029b8:	4b62      	ldr	r3, [pc, #392]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x978>)
 80029ba:	f993 3000 	ldrsb.w	r3, [r3]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3b04      	subs	r3, #4
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 ffdf 	bl	8003988 <toggleAnalog>
						change_value_bool=!change_value_bool;//invert change value bool
 80029ca:	4b62      	ldr	r3, [pc, #392]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bf0c      	ite	eq
 80029d2:	2301      	moveq	r3, #1
 80029d4:	2300      	movne	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	4b5e      	ldr	r3, [pc, #376]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e0cb      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					}else if(analog_pos==8){
 80029e0:	4b58      	ldr	r3, [pc, #352]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x978>)
 80029e2:	f993 3000 	ldrsb.w	r3, [r3]
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d10c      	bne.n	8002a04 <HAL_GPIO_EXTI_Callback+0x838>
						resetOffsets();// reset the analog offsets
 80029ea:	f000 ff91 	bl	8003910 <resetOffsets>
						change_value_bool =!change_value_bool;//invert change value bool
 80029ee:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b55      	ldr	r3, [pc, #340]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e0b9      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					}else if(analog_pos==9){
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x978>)
 8002a06:	f993 3000 	ldrsb.w	r3, [r3]
 8002a0a:	2b09      	cmp	r3, #9
 8002a0c:	f040 80b4 	bne.w	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
						store_offsets=1;
 8002a10:	4b51      	ldr	r3, [pc, #324]	; (8002b58 <HAL_GPIO_EXTI_Callback+0x98c>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
						storeInFlash();// store the analog offsets
 8002a16:	f001 fc35 	bl	8004284 <storeInFlash>
						lcd_put_cur(0,0);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fe f966 	bl	8000cee <lcd_put_cur>
						lcd_send_string("Store Successful");
 8002a22:	484e      	ldr	r0, [pc, #312]	; (8002b5c <HAL_GPIO_EXTI_Callback+0x990>)
 8002a24:	f7fe f9c8 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,15);
 8002a28:	210f      	movs	r1, #15
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7fe f95f 	bl	8000cee <lcd_put_cur>
						change_value_bool=!change_value_bool;//invert change value bool
 8002a30:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e098      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					}

				} else if (in_can_menu){
 8002a46:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x96c>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <HAL_GPIO_EXTI_Callback+0x8b0>
					if(can_pos==5){
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <HAL_GPIO_EXTI_Callback+0x970>)
 8002a50:	f993 3000 	ldrsb.w	r3, [r3]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d10c      	bne.n	8002a72 <HAL_GPIO_EXTI_Callback+0x8a6>
						resetCAN();// reset the CAN options to default
 8002a58:	f000 fc0e 	bl	8003278 <resetCAN>
						change_value_bool=!change_value_bool;//invert change value bool
 8002a5c:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_GPIO_EXTI_Callback+0x988>)
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e082      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					} else {
						//move cursor to end
						lcd_put_cur(0,15);
 8002a72:	210f      	movs	r1, #15
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7fe f93a 	bl	8000cee <lcd_put_cur>
 8002a7a:	e07d      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					}
				} else{
					//move cursor to end
					lcd_put_cur(0,15);
 8002a7c:	210f      	movs	r1, #15
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7fe f935 	bl	8000cee <lcd_put_cur>
 8002a84:	e078      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
				}

			}else{
				if(in_main_menu){
 8002a86:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_GPIO_EXTI_Callback+0x984>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d043      	beq.n	8002b16 <HAL_GPIO_EXTI_Callback+0x94a>
					if(menu_pos==2){ //display menu
 8002a8e:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <HAL_GPIO_EXTI_Callback+0x964>)
 8002a90:	f993 3000 	ldrsb.w	r3, [r3]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d136      	bne.n	8002b06 <HAL_GPIO_EXTI_Callback+0x93a>
						lcd_put_cur(0,0);
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe f927 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 8002aa0:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_GPIO_EXTI_Callback+0x964>)
 8002aa2:	f993 3000 	ldrsb.w	r3, [r3]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	4413      	add	r3, r2
 8002aae:	4a26      	ldr	r2, [pc, #152]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x97c>)
 8002ab0:	4413      	add	r3, r2
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4825      	ldr	r0, [pc, #148]	; (8002b4c <HAL_GPIO_EXTI_Callback+0x980>)
 8002ab8:	f005 fa65 	bl	8007f86 <strncpy>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe f97a 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(1,0);
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7fe f911 	bl	8000cee <lcd_put_cur>
						lcd_send_string(strncpy(temp,main_menu[(menu_pos+1)%main_menu_length],16));
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_GPIO_EXTI_Callback+0x964>)
 8002ace:	f993 3000 	ldrsb.w	r3, [r3]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ada:	fb02 f201 	mul.w	r2, r2, r1
 8002ade:	1a9a      	subs	r2, r3, r2
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x97c>)
 8002ae8:	4413      	add	r3, r2
 8002aea:	2210      	movs	r2, #16
 8002aec:	4619      	mov	r1, r3
 8002aee:	4817      	ldr	r0, [pc, #92]	; (8002b4c <HAL_GPIO_EXTI_Callback+0x980>)
 8002af0:	f005 fa49 	bl	8007f86 <strncpy>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe f95e 	bl	8000db8 <lcd_send_string>
						lcd_put_cur(0,0);
 8002afc:	2100      	movs	r1, #0
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe f8f5 	bl	8000cee <lcd_put_cur>
 8002b04:	e038      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					}
					else if(menu_pos==3)
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_GPIO_EXTI_Callback+0x964>)
 8002b08:	f993 3000 	ldrsb.w	r3, [r3]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d133      	bne.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
						setDelay();//set Delay
 8002b10:	f000 fd7e 	bl	8003610 <setDelay>
 8002b14:	e030      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
				}
				else if(in_can_menu){
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x96c>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02c      	beq.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
					if(can_pos==1)
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_GPIO_EXTI_Callback+0x970>)
 8002b20:	f993 3000 	ldrsb.w	r3, [r3]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d11b      	bne.n	8002b60 <HAL_GPIO_EXTI_Callback+0x994>
						setBaudRate(); // set and store the selected baud rate
 8002b28:	f000 f882 	bl	8002c30 <setBaudRate>
 8002b2c:	e024      	b.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
 8002b2e:	bf00      	nop
 8002b30:	2000022b 	.word	0x2000022b
 8002b34:	2000022a 	.word	0x2000022a
 8002b38:	20000228 	.word	0x20000228
 8002b3c:	2000022c 	.word	0x2000022c
 8002b40:	20000229 	.word	0x20000229
 8002b44:	2000022d 	.word	0x2000022d
 8002b48:	20000018 	.word	0x20000018
 8002b4c:	200022b4 	.word	0x200022b4
 8002b50:	2000016e 	.word	0x2000016e
 8002b54:	2000022e 	.word	0x2000022e
 8002b58:	20000218 	.word	0x20000218
 8002b5c:	08009c08 	.word	0x08009c08
					else if(can_pos>=2 && can_pos<=4)
 8002b60:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_GPIO_EXTI_Callback+0x9d8>)
 8002b62:	f993 3000 	ldrsb.w	r3, [r3]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	dd06      	ble.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <HAL_GPIO_EXTI_Callback+0x9d8>)
 8002b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	dc01      	bgt.n	8002b78 <HAL_GPIO_EXTI_Callback+0x9ac>
						setCANID(); // set and store the selected can id
 8002b74:	f000 fa98 	bl	80030a8 <setCANID>
				}

			}
			change_value_bool=!change_value_bool;//invert change value bool
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_GPIO_EXTI_Callback+0x9dc>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_GPIO_EXTI_Callback+0x9dc>)
 8002b8a:	701a      	strb	r2, [r3, #0]
			btn_counter=0; // reset btn counter
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_GPIO_EXTI_Callback+0x9e0>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	801a      	strh	r2, [r3, #0]
			sel_btn_pressed=1; // set select button to pressed
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <HAL_GPIO_EXTI_Callback+0x9e4>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002b98:	e7ff      	b.n	8002b9a <HAL_GPIO_EXTI_Callback+0x9ce>
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000022c 	.word	0x2000022c
 8002ba8:	2000022e 	.word	0x2000022e
 8002bac:	20000232 	.word	0x20000232
 8002bb0:	20000231 	.word	0x20000231

08002bb4 <changeBaudRate>:


//changes the baud rate of the CAN connection
void changeBaudRate(uint8_t direction){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
	baud_pos = ((baud_pos+direction)<0)?baud_rates_length-1:(baud_pos+direction)%baud_rates_length;//move baud rate position in given direction
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <changeBaudRate+0x70>)
 8002bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	4413      	add	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	da05      	bge.n	8002bda <changeBaudRate+0x26>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	e00c      	b.n	8002bf4 <changeBaudRate+0x40>
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <changeBaudRate+0x70>)
 8002bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8002be0:	461a      	mov	r2, r3
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4413      	add	r3, r2
 8002be6:	2204      	movs	r2, #4
 8002be8:	fb93 f1f2 	sdiv	r1, r3, r2
 8002bec:	fb02 f201 	mul.w	r2, r2, r1
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	b25b      	sxtb	r3, r3
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <changeBaudRate+0x70>)
 8002bf6:	7013      	strb	r3, [r2, #0]

	//display the selected baud rate
	lcd_put_cur(0,12);
 8002bf8:	210c      	movs	r1, #12
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fe f877 	bl	8000cee <lcd_put_cur>
	lcd_send_string(baud_rates[baud_pos]);
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <changeBaudRate+0x70>)
 8002c02:	f993 3000 	ldrsb.w	r3, [r3]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <changeBaudRate+0x74>)
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe f8d3 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,15);
 8002c12:	210f      	movs	r1, #15
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe f86a 	bl	8000cee <lcd_put_cur>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	2000016f 	.word	0x2000016f
 8002c28:	08009d04 	.word	0x08009d04
 8002c2c:	00000000 	.word	0x00000000

08002c30 <setBaudRate>:

//set the baud rate and store it
void setBaudRate(void){
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	af00      	add	r7, sp, #0
	can_enabled=0;
 8002c34:	4bb6      	ldr	r3, [pc, #728]	; (8002f10 <setBaudRate+0x2e0>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
	//stop can bus
	HAL_CAN_Stop(&hcan);
 8002c3a:	48b6      	ldr	r0, [pc, #728]	; (8002f14 <setBaudRate+0x2e4>)
 8002c3c:	f002 f88b 	bl	8004d56 <HAL_CAN_Stop>

	//set prescaler
	PSC=pow(2,4-baud_pos);
 8002c40:	4bb5      	ldr	r3, [pc, #724]	; (8002f18 <setBaudRate+0x2e8>)
 8002c42:	f993 3000 	ldrsb.w	r3, [r3]
 8002c46:	f1c3 0304 	rsb	r3, r3, #4
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fc6a 	bl	8000524 <__aeabi_i2d>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	ec43 2b11 	vmov	d1, r2, r3
 8002c58:	ed9f 0ba3 	vldr	d0, [pc, #652]	; 8002ee8 <setBaudRate+0x2b8>
 8002c5c:	f005 fdfc 	bl	8008858 <pow>
 8002c60:	ec53 2b10 	vmov	r2, r3, d0
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7fd ff76 	bl	8000b58 <__aeabi_d2uiz>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4baa      	ldr	r3, [pc, #680]	; (8002f1c <setBaudRate+0x2ec>)
 8002c72:	701a      	strb	r2, [r3, #0]

	//sample rate cap
	if(sample_rate<30||(analog_1_enabled && analog_2_enabled && analog_3_enabled && sample_rate > 3000/(log(PSC)/log(2)))||(((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))&& sample_rate>5000/(log(PSC)/log(2)))||(sample_rate>10000/(log(PSC)/log(2)))){
 8002c74:	4baa      	ldr	r3, [pc, #680]	; (8002f20 <setBaudRate+0x2f0>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	2b1d      	cmp	r3, #29
 8002c7a:	f240 809f 	bls.w	8002dbc <setBaudRate+0x18c>
 8002c7e:	4ba9      	ldr	r3, [pc, #676]	; (8002f24 <setBaudRate+0x2f4>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d030      	beq.n	8002ce8 <setBaudRate+0xb8>
 8002c86:	4ba8      	ldr	r3, [pc, #672]	; (8002f28 <setBaudRate+0x2f8>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02c      	beq.n	8002ce8 <setBaudRate+0xb8>
 8002c8e:	4ba7      	ldr	r3, [pc, #668]	; (8002f2c <setBaudRate+0x2fc>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d028      	beq.n	8002ce8 <setBaudRate+0xb8>
 8002c96:	4ba2      	ldr	r3, [pc, #648]	; (8002f20 <setBaudRate+0x2f0>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fc42 	bl	8000524 <__aeabi_i2d>
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	460d      	mov	r5, r1
 8002ca4:	4b9d      	ldr	r3, [pc, #628]	; (8002f1c <setBaudRate+0x2ec>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fc2b 	bl	8000504 <__aeabi_ui2d>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	ec43 2b10 	vmov	d0, r2, r3
 8002cb6:	f005 fd87 	bl	80087c8 <log>
 8002cba:	ec51 0b10 	vmov	r0, r1, d0
 8002cbe:	a38c      	add	r3, pc, #560	; (adr r3, 8002ef0 <setBaudRate+0x2c0>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f7fd fdc2 	bl	800084c <__aeabi_ddiv>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	a18a      	add	r1, pc, #552	; (adr r1, 8002ef8 <setBaudRate+0x2c8>)
 8002cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cd2:	f7fd fdbb 	bl	800084c <__aeabi_ddiv>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd ff1b 	bl	8000b18 <__aeabi_dcmpgt>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d169      	bne.n	8002dbc <setBaudRate+0x18c>
 8002ce8:	4b8e      	ldr	r3, [pc, #568]	; (8002f24 <setBaudRate+0x2f4>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <setBaudRate+0xc8>
 8002cf0:	4b8d      	ldr	r3, [pc, #564]	; (8002f28 <setBaudRate+0x2f8>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10f      	bne.n	8002d18 <setBaudRate+0xe8>
 8002cf8:	4b8a      	ldr	r3, [pc, #552]	; (8002f24 <setBaudRate+0x2f4>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <setBaudRate+0xd8>
 8002d00:	4b8a      	ldr	r3, [pc, #552]	; (8002f2c <setBaudRate+0x2fc>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <setBaudRate+0xe8>
 8002d08:	4b87      	ldr	r3, [pc, #540]	; (8002f28 <setBaudRate+0x2f8>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d02c      	beq.n	8002d6a <setBaudRate+0x13a>
 8002d10:	4b86      	ldr	r3, [pc, #536]	; (8002f2c <setBaudRate+0x2fc>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d028      	beq.n	8002d6a <setBaudRate+0x13a>
 8002d18:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <setBaudRate+0x2f0>)
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fc01 	bl	8000524 <__aeabi_i2d>
 8002d22:	4604      	mov	r4, r0
 8002d24:	460d      	mov	r5, r1
 8002d26:	4b7d      	ldr	r3, [pc, #500]	; (8002f1c <setBaudRate+0x2ec>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fbea 	bl	8000504 <__aeabi_ui2d>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	ec43 2b10 	vmov	d0, r2, r3
 8002d38:	f005 fd46 	bl	80087c8 <log>
 8002d3c:	ec51 0b10 	vmov	r0, r1, d0
 8002d40:	a36b      	add	r3, pc, #428	; (adr r3, 8002ef0 <setBaudRate+0x2c0>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f7fd fd81 	bl	800084c <__aeabi_ddiv>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	a16c      	add	r1, pc, #432	; (adr r1, 8002f00 <setBaudRate+0x2d0>)
 8002d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d54:	f7fd fd7a 	bl	800084c <__aeabi_ddiv>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	4629      	mov	r1, r5
 8002d60:	f7fd feda 	bl	8000b18 <__aeabi_dcmpgt>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d128      	bne.n	8002dbc <setBaudRate+0x18c>
 8002d6a:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <setBaudRate+0x2f0>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fbd8 	bl	8000524 <__aeabi_i2d>
 8002d74:	4604      	mov	r4, r0
 8002d76:	460d      	mov	r5, r1
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <setBaudRate+0x2ec>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fbc1 	bl	8000504 <__aeabi_ui2d>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	ec43 2b10 	vmov	d0, r2, r3
 8002d8a:	f005 fd1d 	bl	80087c8 <log>
 8002d8e:	ec51 0b10 	vmov	r0, r1, d0
 8002d92:	a357      	add	r3, pc, #348	; (adr r3, 8002ef0 <setBaudRate+0x2c0>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fd58 	bl	800084c <__aeabi_ddiv>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	a159      	add	r1, pc, #356	; (adr r1, 8002f08 <setBaudRate+0x2d8>)
 8002da2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002da6:	f7fd fd51 	bl	800084c <__aeabi_ddiv>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f7fd feb1 	bl	8000b18 <__aeabi_dcmpgt>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d058      	beq.n	8002e6e <setBaudRate+0x23e>
		sample_rate=(analog_1_enabled && analog_2_enabled && analog_3_enabled)?3000:((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))?5000:10000;
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <setBaudRate+0x2f4>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d007      	beq.n	8002dd4 <setBaudRate+0x1a4>
 8002dc4:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <setBaudRate+0x2f8>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <setBaudRate+0x1a4>
 8002dcc:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <setBaudRate+0x2fc>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11d      	bne.n	8002e10 <setBaudRate+0x1e0>
 8002dd4:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <setBaudRate+0x2f4>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <setBaudRate+0x1b4>
 8002ddc:	4b52      	ldr	r3, [pc, #328]	; (8002f28 <setBaudRate+0x2f8>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <setBaudRate+0x1d4>
 8002de4:	4b4f      	ldr	r3, [pc, #316]	; (8002f24 <setBaudRate+0x2f4>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <setBaudRate+0x1c4>
 8002dec:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <setBaudRate+0x2fc>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <setBaudRate+0x1d4>
 8002df4:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <setBaudRate+0x2f8>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d006      	beq.n	8002e0a <setBaudRate+0x1da>
 8002dfc:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <setBaudRate+0x2fc>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <setBaudRate+0x1da>
 8002e04:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e08:	e004      	b.n	8002e14 <setBaudRate+0x1e4>
 8002e0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e0e:	e001      	b.n	8002e14 <setBaudRate+0x1e4>
 8002e10:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002e14:	4a42      	ldr	r2, [pc, #264]	; (8002f20 <setBaudRate+0x2f0>)
 8002e16:	8013      	strh	r3, [r2, #0]
		sample_rate/=(log(PSC)/log(2));
 8002e18:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <setBaudRate+0x2ec>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb71 	bl	8000504 <__aeabi_ui2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	ec43 2b10 	vmov	d0, r2, r3
 8002e2a:	f005 fccd 	bl	80087c8 <log>
 8002e2e:	ec51 0b10 	vmov	r0, r1, d0
 8002e32:	a32f      	add	r3, pc, #188	; (adr r3, 8002ef0 <setBaudRate+0x2c0>)
 8002e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e38:	f7fd fd08 	bl	800084c <__aeabi_ddiv>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4614      	mov	r4, r2
 8002e42:	461d      	mov	r5, r3
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <setBaudRate+0x2f0>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fd fb6b 	bl	8000524 <__aeabi_i2d>
 8002e4e:	4622      	mov	r2, r4
 8002e50:	462b      	mov	r3, r5
 8002e52:	f7fd fcfb 	bl	800084c <__aeabi_ddiv>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f7fd fe7b 	bl	8000b58 <__aeabi_d2uiz>
 8002e62:	4603      	mov	r3, r0
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <setBaudRate+0x2f0>)
 8002e68:	801a      	strh	r2, [r3, #0]
		setDelay();
 8002e6a:	f000 fbd1 	bl	8003610 <setDelay>
	}

	hcan.Init.Prescaler = PSC;
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <setBaudRate+0x2ec>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <setBaudRate+0x2e4>)
 8002e76:	605a      	str	r2, [r3, #4]

	//reinitialize can
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002e78:	4826      	ldr	r0, [pc, #152]	; (8002f14 <setBaudRate+0x2e4>)
 8002e7a:	f001 fd63 	bl	8004944 <HAL_CAN_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <setBaudRate+0x258>
	{
		Error_Handler();
 8002e84:	f001 faa0 	bl	80043c8 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002e88:	4822      	ldr	r0, [pc, #136]	; (8002f14 <setBaudRate+0x2e4>)
 8002e8a:	f001 ff20 	bl	8004cce <HAL_CAN_Start>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <setBaudRate+0x268>
		Error_Handler();
 8002e94:	f001 fa98 	bl	80043c8 <Error_Handler>
	}


	//store new baud in flash
	storeInFlash();
 8002e98:	f001 f9f4 	bl	8004284 <storeInFlash>

	//save the baud rate in menu
	memset(temp,0,17); // erase the temp array
 8002e9c:	2211      	movs	r2, #17
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4823      	ldr	r0, [pc, #140]	; (8002f30 <setBaudRate+0x300>)
 8002ea2:	f005 f801 	bl	8007ea8 <memset>
	strncpy(temp, "Baud rate:  ",16);
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	4922      	ldr	r1, [pc, #136]	; (8002f34 <setBaudRate+0x304>)
 8002eaa:	4821      	ldr	r0, [pc, #132]	; (8002f30 <setBaudRate+0x300>)
 8002eac:	f005 f86b 	bl	8007f86 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <setBaudRate+0x2e8>)
 8002eb2:	f993 3000 	ldrsb.w	r3, [r3]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	; (8002f38 <setBaudRate+0x308>)
 8002eba:	4413      	add	r3, r2
 8002ebc:	2211      	movs	r2, #17
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	481b      	ldr	r0, [pc, #108]	; (8002f30 <setBaudRate+0x300>)
 8002ec2:	f005 f828 	bl	8007f16 <strlcat>
	strlcpy(can_menu[1],temp,17);
 8002ec6:	2211      	movs	r2, #17
 8002ec8:	4919      	ldr	r1, [pc, #100]	; (8002f30 <setBaudRate+0x300>)
 8002eca:	481c      	ldr	r0, [pc, #112]	; (8002f3c <setBaudRate+0x30c>)
 8002ecc:	f005 f846 	bl	8007f5c <strlcpy>
	lcd_put_cur(0,0);
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fd ff0b 	bl	8000cee <lcd_put_cur>

	can_enabled=1;
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <setBaudRate+0x2e0>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
}
 8002ede:	bf00      	nop
 8002ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	40000000 	.word	0x40000000
 8002ef0:	fefa39ef 	.word	0xfefa39ef
 8002ef4:	3fe62e42 	.word	0x3fe62e42
 8002ef8:	00000000 	.word	0x00000000
 8002efc:	40a77000 	.word	0x40a77000
 8002f00:	00000000 	.word	0x00000000
 8002f04:	40b38800 	.word	0x40b38800
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	40c38800 	.word	0x40c38800
 8002f10:	20000001 	.word	0x20000001
 8002f14:	20002288 	.word	0x20002288
 8002f18:	2000016f 	.word	0x2000016f
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000172 	.word	0x20000172
 8002f24:	20000002 	.word	0x20000002
 8002f28:	20000003 	.word	0x20000003
 8002f2c:	20000004 	.word	0x20000004
 8002f30:	200022b4 	.word	0x200022b4
 8002f34:	08009b58 	.word	0x08009b58
 8002f38:	08009d04 	.word	0x08009d04
 8002f3c:	2000006d 	.word	0x2000006d

08002f40 <changeCANID>:

//changes the ID of the selected can device
void changeCANID(uint8_t direction){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
	if(can_pos==2){//change can id 1
 8002f4a:	4b4f      	ldr	r3, [pc, #316]	; (8003088 <changeCANID+0x148>)
 8002f4c:	f993 3000 	ldrsb.w	r3, [r3]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d128      	bne.n	8002fa6 <changeCANID+0x66>
		can_id_1+=direction;
 8002f54:	4b4d      	ldr	r3, [pc, #308]	; (800308c <changeCANID+0x14c>)
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4b4b      	ldr	r3, [pc, #300]	; (800308c <changeCANID+0x14c>)
 8002f60:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 8002f62:	e006      	b.n	8002f72 <changeCANID+0x32>
			can_id_1+=direction;
 8002f64:	4b49      	ldr	r3, [pc, #292]	; (800308c <changeCANID+0x14c>)
 8002f66:	781a      	ldrb	r2, [r3, #0]
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <changeCANID+0x14c>)
 8002f70:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 8002f72:	4b46      	ldr	r3, [pc, #280]	; (800308c <changeCANID+0x14c>)
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	4b46      	ldr	r3, [pc, #280]	; (8003090 <changeCANID+0x150>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d0f2      	beq.n	8002f64 <changeCANID+0x24>
 8002f7e:	4b43      	ldr	r3, [pc, #268]	; (800308c <changeCANID+0x14c>)
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	4b44      	ldr	r3, [pc, #272]	; (8003094 <changeCANID+0x154>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d0ec      	beq.n	8002f64 <changeCANID+0x24>
		sprintf(char_arr, "%03d", can_id_1);
 8002f8a:	4b40      	ldr	r3, [pc, #256]	; (800308c <changeCANID+0x14c>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4941      	ldr	r1, [pc, #260]	; (8003098 <changeCANID+0x158>)
 8002f92:	4842      	ldr	r0, [pc, #264]	; (800309c <changeCANID+0x15c>)
 8002f94:	f004 ff90 	bl	8007eb8 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002f98:	4b41      	ldr	r3, [pc, #260]	; (80030a0 <changeCANID+0x160>)
 8002f9a:	4a40      	ldr	r2, [pc, #256]	; (800309c <changeCANID+0x15c>)
 8002f9c:	8811      	ldrh	r1, [r2, #0]
 8002f9e:	7892      	ldrb	r2, [r2, #2]
 8002fa0:	8019      	strh	r1, [r3, #0]
 8002fa2:	709a      	strb	r2, [r3, #2]
 8002fa4:	e05a      	b.n	800305c <changeCANID+0x11c>
	} else if(can_pos==3){//change can id 2
 8002fa6:	4b38      	ldr	r3, [pc, #224]	; (8003088 <changeCANID+0x148>)
 8002fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d128      	bne.n	8003002 <changeCANID+0xc2>
		can_id_2+=direction;
 8002fb0:	4b37      	ldr	r3, [pc, #220]	; (8003090 <changeCANID+0x150>)
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b35      	ldr	r3, [pc, #212]	; (8003090 <changeCANID+0x150>)
 8002fbc:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 8002fbe:	e006      	b.n	8002fce <changeCANID+0x8e>
			can_id_2+=direction;
 8002fc0:	4b33      	ldr	r3, [pc, #204]	; (8003090 <changeCANID+0x150>)
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <changeCANID+0x150>)
 8002fcc:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <changeCANID+0x150>)
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	4b2e      	ldr	r3, [pc, #184]	; (800308c <changeCANID+0x14c>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d0f2      	beq.n	8002fc0 <changeCANID+0x80>
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <changeCANID+0x150>)
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <changeCANID+0x154>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d0ec      	beq.n	8002fc0 <changeCANID+0x80>
		sprintf(char_arr, "%03d", can_id_2);
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <changeCANID+0x150>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	492a      	ldr	r1, [pc, #168]	; (8003098 <changeCANID+0x158>)
 8002fee:	482b      	ldr	r0, [pc, #172]	; (800309c <changeCANID+0x15c>)
 8002ff0:	f004 ff62 	bl	8007eb8 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002ff4:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <changeCANID+0x160>)
 8002ff6:	4a29      	ldr	r2, [pc, #164]	; (800309c <changeCANID+0x15c>)
 8002ff8:	8811      	ldrh	r1, [r2, #0]
 8002ffa:	7892      	ldrb	r2, [r2, #2]
 8002ffc:	8019      	strh	r1, [r3, #0]
 8002ffe:	709a      	strb	r2, [r3, #2]
 8003000:	e02c      	b.n	800305c <changeCANID+0x11c>
	} else if(can_pos==4){// change can id 3
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <changeCANID+0x148>)
 8003004:	f993 3000 	ldrsb.w	r3, [r3]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d127      	bne.n	800305c <changeCANID+0x11c>
		can_id_3+=direction;
 800300c:	4b21      	ldr	r3, [pc, #132]	; (8003094 <changeCANID+0x154>)
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	4413      	add	r3, r2
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <changeCANID+0x154>)
 8003018:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 800301a:	e006      	b.n	800302a <changeCANID+0xea>
			can_id_3+=direction;
 800301c:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <changeCANID+0x154>)
 800301e:	781a      	ldrb	r2, [r3, #0]
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	4413      	add	r3, r2
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <changeCANID+0x154>)
 8003028:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <changeCANID+0x154>)
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <changeCANID+0x14c>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d0f2      	beq.n	800301c <changeCANID+0xdc>
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <changeCANID+0x154>)
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <changeCANID+0x150>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d0ec      	beq.n	800301c <changeCANID+0xdc>
		sprintf(char_arr, "%03d", can_id_3);
 8003042:	4b14      	ldr	r3, [pc, #80]	; (8003094 <changeCANID+0x154>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	4913      	ldr	r1, [pc, #76]	; (8003098 <changeCANID+0x158>)
 800304a:	4814      	ldr	r0, [pc, #80]	; (800309c <changeCANID+0x15c>)
 800304c:	f004 ff34 	bl	8007eb8 <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8003050:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <changeCANID+0x160>)
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <changeCANID+0x15c>)
 8003054:	8811      	ldrh	r1, [r2, #0]
 8003056:	7892      	ldrb	r2, [r2, #2]
 8003058:	8019      	strh	r1, [r3, #0]
 800305a:	709a      	strb	r2, [r3, #2]
	}
	//display the selected CAN ID
	lcd_put_cur(0,13);
 800305c:	210d      	movs	r1, #13
 800305e:	2000      	movs	r0, #0
 8003060:	f7fd fe45 	bl	8000cee <lcd_put_cur>
	lcd_send_string("    ");
 8003064:	480f      	ldr	r0, [pc, #60]	; (80030a4 <changeCANID+0x164>)
 8003066:	f7fd fea7 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,13);
 800306a:	210d      	movs	r1, #13
 800306c:	2000      	movs	r0, #0
 800306e:	f7fd fe3e 	bl	8000cee <lcd_put_cur>
	lcd_send_string(modified_can_id);
 8003072:	480b      	ldr	r0, [pc, #44]	; (80030a0 <changeCANID+0x160>)
 8003074:	f7fd fea0 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,15);
 8003078:	210f      	movs	r1, #15
 800307a:	2000      	movs	r0, #0
 800307c:	f7fd fe37 	bl	8000cee <lcd_put_cur>
}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	2000022c 	.word	0x2000022c
 800308c:	200063f0 	.word	0x200063f0
 8003090:	20002320 	.word	0x20002320
 8003094:	20000244 	.word	0x20000244
 8003098:	08009b78 	.word	0x08009b78
 800309c:	20006460 	.word	0x20006460
 80030a0:	2000645c 	.word	0x2000645c
 80030a4:	08009c1c 	.word	0x08009c1c

080030a8 <setCANID>:

//set the can IDs
void setCANID(void){
 80030a8:	b5b0      	push	{r4, r5, r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	headers_1.StdId = can_id_1; // set CAN ID 1
 80030ac:	4b63      	ldr	r3, [pc, #396]	; (800323c <setCANID+0x194>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b63      	ldr	r3, [pc, #396]	; (8003240 <setCANID+0x198>)
 80030b4:	601a      	str	r2, [r3, #0]
	headers_2.StdId = can_id_2; // set CAN ID 2
 80030b6:	4b63      	ldr	r3, [pc, #396]	; (8003244 <setCANID+0x19c>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b62      	ldr	r3, [pc, #392]	; (8003248 <setCANID+0x1a0>)
 80030be:	601a      	str	r2, [r3, #0]
	headers_3.StdId = can_id_3; // set CAN ID 3
 80030c0:	4b62      	ldr	r3, [pc, #392]	; (800324c <setCANID+0x1a4>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b62      	ldr	r3, [pc, #392]	; (8003250 <setCANID+0x1a8>)
 80030c8:	601a      	str	r2, [r3, #0]

	//Store the CAN IDs
	id_arr[0]=can_id_1;
 80030ca:	4b5c      	ldr	r3, [pc, #368]	; (800323c <setCANID+0x194>)
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	4b61      	ldr	r3, [pc, #388]	; (8003254 <setCANID+0x1ac>)
 80030d0:	701a      	strb	r2, [r3, #0]
	id_arr[1]=can_id_2;
 80030d2:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <setCANID+0x19c>)
 80030d4:	781a      	ldrb	r2, [r3, #0]
 80030d6:	4b5f      	ldr	r3, [pc, #380]	; (8003254 <setCANID+0x1ac>)
 80030d8:	705a      	strb	r2, [r3, #1]
	id_arr[2]=can_id_3;
 80030da:	4b5c      	ldr	r3, [pc, #368]	; (800324c <setCANID+0x1a4>)
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	4b5d      	ldr	r3, [pc, #372]	; (8003254 <setCANID+0x1ac>)
 80030e0:	709a      	strb	r2, [r3, #2]
	id_arr[3]=0;
 80030e2:	4b5c      	ldr	r3, [pc, #368]	; (8003254 <setCANID+0x1ac>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	70da      	strb	r2, [r3, #3]

	storeInFlash();
 80030e8:	f001 f8cc 	bl	8004284 <storeInFlash>


	//save can IDs in menu
	//can id 1
	memset(temp,0,17); // erase the temp array
 80030ec:	2211      	movs	r2, #17
 80030ee:	2100      	movs	r1, #0
 80030f0:	4859      	ldr	r0, [pc, #356]	; (8003258 <setCANID+0x1b0>)
 80030f2:	f004 fed9 	bl	8007ea8 <memset>
	strncpy(temp, "CAN ID ",16);
 80030f6:	2210      	movs	r2, #16
 80030f8:	4958      	ldr	r1, [pc, #352]	; (800325c <setCANID+0x1b4>)
 80030fa:	4857      	ldr	r0, [pc, #348]	; (8003258 <setCANID+0x1b0>)
 80030fc:	f004 ff43 	bl	8007f86 <strncpy>
	strcat(temp, "1:    ");
 8003100:	4855      	ldr	r0, [pc, #340]	; (8003258 <setCANID+0x1b0>)
 8003102:	f7fd f865 	bl	80001d0 <strlen>
 8003106:	4603      	mov	r3, r0
 8003108:	461a      	mov	r2, r3
 800310a:	4b53      	ldr	r3, [pc, #332]	; (8003258 <setCANID+0x1b0>)
 800310c:	4413      	add	r3, r2
 800310e:	4a54      	ldr	r2, [pc, #336]	; (8003260 <setCANID+0x1b8>)
 8003110:	6810      	ldr	r0, [r2, #0]
 8003112:	6018      	str	r0, [r3, #0]
 8003114:	8891      	ldrh	r1, [r2, #4]
 8003116:	7992      	ldrb	r2, [r2, #6]
 8003118:	8099      	strh	r1, [r3, #4]
 800311a:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 800311c:	2210      	movs	r2, #16
 800311e:	2100      	movs	r1, #0
 8003120:	4850      	ldr	r0, [pc, #320]	; (8003264 <setCANID+0x1bc>)
 8003122:	f004 fec1 	bl	8007ea8 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8003126:	4b45      	ldr	r3, [pc, #276]	; (800323c <setCANID+0x194>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	494e      	ldr	r1, [pc, #312]	; (8003268 <setCANID+0x1c0>)
 800312e:	484d      	ldr	r0, [pc, #308]	; (8003264 <setCANID+0x1bc>)
 8003130:	f004 fec2 	bl	8007eb8 <siprintf>
	strlcat(temp, char_arr,17);
 8003134:	2211      	movs	r2, #17
 8003136:	494b      	ldr	r1, [pc, #300]	; (8003264 <setCANID+0x1bc>)
 8003138:	4847      	ldr	r0, [pc, #284]	; (8003258 <setCANID+0x1b0>)
 800313a:	f004 feec 	bl	8007f16 <strlcat>
	memcpy(can_menu[2],temp,17);
 800313e:	4b4b      	ldr	r3, [pc, #300]	; (800326c <setCANID+0x1c4>)
 8003140:	4a45      	ldr	r2, [pc, #276]	; (8003258 <setCANID+0x1b0>)
 8003142:	3322      	adds	r3, #34	; 0x22
 8003144:	6815      	ldr	r5, [r2, #0]
 8003146:	6854      	ldr	r4, [r2, #4]
 8003148:	6890      	ldr	r0, [r2, #8]
 800314a:	68d1      	ldr	r1, [r2, #12]
 800314c:	601d      	str	r5, [r3, #0]
 800314e:	605c      	str	r4, [r3, #4]
 8003150:	6098      	str	r0, [r3, #8]
 8003152:	60d9      	str	r1, [r3, #12]
 8003154:	7c12      	ldrb	r2, [r2, #16]
 8003156:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp,0,17); // erase the temp array
 8003158:	2211      	movs	r2, #17
 800315a:	2100      	movs	r1, #0
 800315c:	483e      	ldr	r0, [pc, #248]	; (8003258 <setCANID+0x1b0>)
 800315e:	f004 fea3 	bl	8007ea8 <memset>
	strncpy(temp, "CAN ID ",16);
 8003162:	2210      	movs	r2, #16
 8003164:	493d      	ldr	r1, [pc, #244]	; (800325c <setCANID+0x1b4>)
 8003166:	483c      	ldr	r0, [pc, #240]	; (8003258 <setCANID+0x1b0>)
 8003168:	f004 ff0d 	bl	8007f86 <strncpy>
	strcat(temp, "2:    ");
 800316c:	483a      	ldr	r0, [pc, #232]	; (8003258 <setCANID+0x1b0>)
 800316e:	f7fd f82f 	bl	80001d0 <strlen>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	4b38      	ldr	r3, [pc, #224]	; (8003258 <setCANID+0x1b0>)
 8003178:	4413      	add	r3, r2
 800317a:	4a3d      	ldr	r2, [pc, #244]	; (8003270 <setCANID+0x1c8>)
 800317c:	6810      	ldr	r0, [r2, #0]
 800317e:	6018      	str	r0, [r3, #0]
 8003180:	8891      	ldrh	r1, [r2, #4]
 8003182:	7992      	ldrb	r2, [r2, #6]
 8003184:	8099      	strh	r1, [r3, #4]
 8003186:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8003188:	2210      	movs	r2, #16
 800318a:	2100      	movs	r1, #0
 800318c:	4835      	ldr	r0, [pc, #212]	; (8003264 <setCANID+0x1bc>)
 800318e:	f004 fe8b 	bl	8007ea8 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 8003192:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <setCANID+0x19c>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	4933      	ldr	r1, [pc, #204]	; (8003268 <setCANID+0x1c0>)
 800319a:	4832      	ldr	r0, [pc, #200]	; (8003264 <setCANID+0x1bc>)
 800319c:	f004 fe8c 	bl	8007eb8 <siprintf>
	strlcat(temp, char_arr,17);
 80031a0:	2211      	movs	r2, #17
 80031a2:	4930      	ldr	r1, [pc, #192]	; (8003264 <setCANID+0x1bc>)
 80031a4:	482c      	ldr	r0, [pc, #176]	; (8003258 <setCANID+0x1b0>)
 80031a6:	f004 feb6 	bl	8007f16 <strlcat>
	memcpy(can_menu[3],temp,17);
 80031aa:	4b30      	ldr	r3, [pc, #192]	; (800326c <setCANID+0x1c4>)
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <setCANID+0x1b0>)
 80031ae:	3333      	adds	r3, #51	; 0x33
 80031b0:	6815      	ldr	r5, [r2, #0]
 80031b2:	6854      	ldr	r4, [r2, #4]
 80031b4:	6890      	ldr	r0, [r2, #8]
 80031b6:	68d1      	ldr	r1, [r2, #12]
 80031b8:	601d      	str	r5, [r3, #0]
 80031ba:	605c      	str	r4, [r3, #4]
 80031bc:	6098      	str	r0, [r3, #8]
 80031be:	60d9      	str	r1, [r3, #12]
 80031c0:	7c12      	ldrb	r2, [r2, #16]
 80031c2:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp,0,17); // erase the temp array
 80031c4:	2211      	movs	r2, #17
 80031c6:	2100      	movs	r1, #0
 80031c8:	4823      	ldr	r0, [pc, #140]	; (8003258 <setCANID+0x1b0>)
 80031ca:	f004 fe6d 	bl	8007ea8 <memset>
	strncpy(temp, "CAN ID ",16);
 80031ce:	2210      	movs	r2, #16
 80031d0:	4922      	ldr	r1, [pc, #136]	; (800325c <setCANID+0x1b4>)
 80031d2:	4821      	ldr	r0, [pc, #132]	; (8003258 <setCANID+0x1b0>)
 80031d4:	f004 fed7 	bl	8007f86 <strncpy>
	strcat(temp, "3:    ");
 80031d8:	481f      	ldr	r0, [pc, #124]	; (8003258 <setCANID+0x1b0>)
 80031da:	f7fc fff9 	bl	80001d0 <strlen>
 80031de:	4603      	mov	r3, r0
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <setCANID+0x1b0>)
 80031e4:	4413      	add	r3, r2
 80031e6:	4a23      	ldr	r2, [pc, #140]	; (8003274 <setCANID+0x1cc>)
 80031e8:	6810      	ldr	r0, [r2, #0]
 80031ea:	6018      	str	r0, [r3, #0]
 80031ec:	8891      	ldrh	r1, [r2, #4]
 80031ee:	7992      	ldrb	r2, [r2, #6]
 80031f0:	8099      	strh	r1, [r3, #4]
 80031f2:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 80031f4:	2210      	movs	r2, #16
 80031f6:	2100      	movs	r1, #0
 80031f8:	481a      	ldr	r0, [pc, #104]	; (8003264 <setCANID+0x1bc>)
 80031fa:	f004 fe55 	bl	8007ea8 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <setCANID+0x1a4>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	4918      	ldr	r1, [pc, #96]	; (8003268 <setCANID+0x1c0>)
 8003206:	4817      	ldr	r0, [pc, #92]	; (8003264 <setCANID+0x1bc>)
 8003208:	f004 fe56 	bl	8007eb8 <siprintf>
	strlcat(temp, char_arr,17);
 800320c:	2211      	movs	r2, #17
 800320e:	4915      	ldr	r1, [pc, #84]	; (8003264 <setCANID+0x1bc>)
 8003210:	4811      	ldr	r0, [pc, #68]	; (8003258 <setCANID+0x1b0>)
 8003212:	f004 fe80 	bl	8007f16 <strlcat>
	memcpy(can_menu[4],temp,17);
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <setCANID+0x1c4>)
 8003218:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <setCANID+0x1b0>)
 800321a:	f103 0444 	add.w	r4, r3, #68	; 0x44
 800321e:	4615      	mov	r5, r2
 8003220:	6828      	ldr	r0, [r5, #0]
 8003222:	6869      	ldr	r1, [r5, #4]
 8003224:	68aa      	ldr	r2, [r5, #8]
 8003226:	68eb      	ldr	r3, [r5, #12]
 8003228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800322a:	7c2b      	ldrb	r3, [r5, #16]
 800322c:	7023      	strb	r3, [r4, #0]

	lcd_put_cur(0,0);
 800322e:	2100      	movs	r1, #0
 8003230:	2000      	movs	r0, #0
 8003232:	f7fd fd5c 	bl	8000cee <lcd_put_cur>
}
 8003236:	bf00      	nop
 8003238:	bdb0      	pop	{r4, r5, r7, pc}
 800323a:	bf00      	nop
 800323c:	200063f0 	.word	0x200063f0
 8003240:	20002270 	.word	0x20002270
 8003244:	20002320 	.word	0x20002320
 8003248:	200063f4 	.word	0x200063f4
 800324c:	20000244 	.word	0x20000244
 8003250:	20002258 	.word	0x20002258
 8003254:	20000250 	.word	0x20000250
 8003258:	200022b4 	.word	0x200022b4
 800325c:	08009b68 	.word	0x08009b68
 8003260:	08009b70 	.word	0x08009b70
 8003264:	20006460 	.word	0x20006460
 8003268:	08009b78 	.word	0x08009b78
 800326c:	2000005c 	.word	0x2000005c
 8003270:	08009b80 	.word	0x08009b80
 8003274:	08009b88 	.word	0x08009b88

08003278 <resetCAN>:

//reset CAN Variables
void resetCAN(void){
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
	//reset IDs
	can_id_1=1;
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <resetCAN+0x40>)
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
	can_id_2=2;
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <resetCAN+0x44>)
 8003284:	2202      	movs	r2, #2
 8003286:	701a      	strb	r2, [r3, #0]
	can_id_3=3;
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <resetCAN+0x48>)
 800328a:	2203      	movs	r2, #3
 800328c:	701a      	strb	r2, [r3, #0]
	setCANID();
 800328e:	f7ff ff0b 	bl	80030a8 <setCANID>

	//reset baud rate to 1M
	baud_pos=3;
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <resetCAN+0x4c>)
 8003294:	2203      	movs	r2, #3
 8003296:	701a      	strb	r2, [r3, #0]
	setBaudRate();
 8003298:	f7ff fcca 	bl	8002c30 <setBaudRate>

	lcd_put_cur(0,0);
 800329c:	2100      	movs	r1, #0
 800329e:	2000      	movs	r0, #0
 80032a0:	f7fd fd25 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Reset Successful");
 80032a4:	4808      	ldr	r0, [pc, #32]	; (80032c8 <resetCAN+0x50>)
 80032a6:	f7fd fd87 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,15);
 80032aa:	210f      	movs	r1, #15
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7fd fd1e 	bl	8000cee <lcd_put_cur>
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200063f0 	.word	0x200063f0
 80032bc:	20002320 	.word	0x20002320
 80032c0:	20000244 	.word	0x20000244
 80032c4:	2000016f 	.word	0x2000016f
 80032c8:	08009c24 	.word	0x08009c24
 80032cc:	00000000 	.word	0x00000000

080032d0 <changeDelay>:

//change the number of delays between samples
void changeDelay(uint16_t direction){
 80032d0:	b5b0      	push	{r4, r5, r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	80fb      	strh	r3, [r7, #6]

	if(direction==1)
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d12a      	bne.n	8003336 <changeDelay+0x66>
		sample_rate+=(sample_rate>=1000)?direction*1000:(sample_rate>=100)?direction*100:direction*10;//move sample rate in positive direction
 80032e0:	4b9b      	ldr	r3, [pc, #620]	; (8003550 <changeDelay+0x280>)
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e8:	d308      	bcc.n	80032fc <changeDelay+0x2c>
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	461a      	mov	r2, r3
 80032ee:	0152      	lsls	r2, r2, #5
 80032f0:	1ad2      	subs	r2, r2, r3
 80032f2:	0092      	lsls	r2, r2, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	e015      	b.n	8003328 <changeDelay+0x58>
 80032fc:	4b94      	ldr	r3, [pc, #592]	; (8003550 <changeDelay+0x280>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	2b63      	cmp	r3, #99	; 0x63
 8003302:	d90b      	bls.n	800331c <changeDelay+0x4c>
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	461a      	mov	r2, r3
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	4413      	add	r3, r2
 800330c:	461a      	mov	r2, r3
 800330e:	0091      	lsls	r1, r2, #2
 8003310:	461a      	mov	r2, r3
 8003312:	460b      	mov	r3, r1
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	b29b      	uxth	r3, r3
 800331a:	e005      	b.n	8003328 <changeDelay+0x58>
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	461a      	mov	r2, r3
 8003320:	0092      	lsls	r2, r2, #2
 8003322:	4413      	add	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	b29b      	uxth	r3, r3
 8003328:	4a89      	ldr	r2, [pc, #548]	; (8003550 <changeDelay+0x280>)
 800332a:	8812      	ldrh	r2, [r2, #0]
 800332c:	4413      	add	r3, r2
 800332e:	b29a      	uxth	r2, r3
 8003330:	4b87      	ldr	r3, [pc, #540]	; (8003550 <changeDelay+0x280>)
 8003332:	801a      	strh	r2, [r3, #0]
 8003334:	e029      	b.n	800338a <changeDelay+0xba>
	else
		sample_rate+=(sample_rate>1000)?direction*1000:(sample_rate>100)?direction*100:direction*10;//move sample rate in negative direction
 8003336:	4b86      	ldr	r3, [pc, #536]	; (8003550 <changeDelay+0x280>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800333e:	d908      	bls.n	8003352 <changeDelay+0x82>
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	461a      	mov	r2, r3
 8003344:	0152      	lsls	r2, r2, #5
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	0092      	lsls	r2, r2, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	b29b      	uxth	r3, r3
 8003350:	e015      	b.n	800337e <changeDelay+0xae>
 8003352:	4b7f      	ldr	r3, [pc, #508]	; (8003550 <changeDelay+0x280>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d90b      	bls.n	8003372 <changeDelay+0xa2>
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	461a      	mov	r2, r3
 800335e:	0092      	lsls	r2, r2, #2
 8003360:	4413      	add	r3, r2
 8003362:	461a      	mov	r2, r3
 8003364:	0091      	lsls	r1, r2, #2
 8003366:	461a      	mov	r2, r3
 8003368:	460b      	mov	r3, r1
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	b29b      	uxth	r3, r3
 8003370:	e005      	b.n	800337e <changeDelay+0xae>
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	461a      	mov	r2, r3
 8003376:	0092      	lsls	r2, r2, #2
 8003378:	4413      	add	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	b29b      	uxth	r3, r3
 800337e:	4a74      	ldr	r2, [pc, #464]	; (8003550 <changeDelay+0x280>)
 8003380:	8812      	ldrh	r2, [r2, #0]
 8003382:	4413      	add	r3, r2
 8003384:	b29a      	uxth	r2, r3
 8003386:	4b72      	ldr	r3, [pc, #456]	; (8003550 <changeDelay+0x280>)
 8003388:	801a      	strh	r2, [r3, #0]
	//sample rate cap
	if((analog_1_enabled && analog_2_enabled && analog_3_enabled && sample_rate > 3000/(log(PSC)/log(2)))||(((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))&& sample_rate>5000/(log(PSC)/log(2)))||(sample_rate>10000/(log(PSC)/log(2)))){
 800338a:	4b72      	ldr	r3, [pc, #456]	; (8003554 <changeDelay+0x284>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d030      	beq.n	80033f4 <changeDelay+0x124>
 8003392:	4b71      	ldr	r3, [pc, #452]	; (8003558 <changeDelay+0x288>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d02c      	beq.n	80033f4 <changeDelay+0x124>
 800339a:	4b70      	ldr	r3, [pc, #448]	; (800355c <changeDelay+0x28c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d028      	beq.n	80033f4 <changeDelay+0x124>
 80033a2:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <changeDelay+0x280>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd f8bc 	bl	8000524 <__aeabi_i2d>
 80033ac:	4604      	mov	r4, r0
 80033ae:	460d      	mov	r5, r1
 80033b0:	4b6b      	ldr	r3, [pc, #428]	; (8003560 <changeDelay+0x290>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7fd f8a5 	bl	8000504 <__aeabi_ui2d>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	ec43 2b10 	vmov	d0, r2, r3
 80033c2:	f005 fa01 	bl	80087c8 <log>
 80033c6:	ec51 0b10 	vmov	r0, r1, d0
 80033ca:	a359      	add	r3, pc, #356	; (adr r3, 8003530 <changeDelay+0x260>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fd fa3c 	bl	800084c <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	a157      	add	r1, pc, #348	; (adr r1, 8003538 <changeDelay+0x268>)
 80033da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033de:	f7fd fa35 	bl	800084c <__aeabi_ddiv>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4620      	mov	r0, r4
 80033e8:	4629      	mov	r1, r5
 80033ea:	f7fd fb95 	bl	8000b18 <__aeabi_dcmpgt>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d169      	bne.n	80034c8 <changeDelay+0x1f8>
 80033f4:	4b57      	ldr	r3, [pc, #348]	; (8003554 <changeDelay+0x284>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <changeDelay+0x134>
 80033fc:	4b56      	ldr	r3, [pc, #344]	; (8003558 <changeDelay+0x288>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10f      	bne.n	8003424 <changeDelay+0x154>
 8003404:	4b53      	ldr	r3, [pc, #332]	; (8003554 <changeDelay+0x284>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <changeDelay+0x144>
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <changeDelay+0x28c>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <changeDelay+0x154>
 8003414:	4b50      	ldr	r3, [pc, #320]	; (8003558 <changeDelay+0x288>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d02c      	beq.n	8003476 <changeDelay+0x1a6>
 800341c:	4b4f      	ldr	r3, [pc, #316]	; (800355c <changeDelay+0x28c>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d028      	beq.n	8003476 <changeDelay+0x1a6>
 8003424:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <changeDelay+0x280>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd f87b 	bl	8000524 <__aeabi_i2d>
 800342e:	4604      	mov	r4, r0
 8003430:	460d      	mov	r5, r1
 8003432:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <changeDelay+0x290>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd f864 	bl	8000504 <__aeabi_ui2d>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	ec43 2b10 	vmov	d0, r2, r3
 8003444:	f005 f9c0 	bl	80087c8 <log>
 8003448:	ec51 0b10 	vmov	r0, r1, d0
 800344c:	a338      	add	r3, pc, #224	; (adr r3, 8003530 <changeDelay+0x260>)
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f7fd f9fb 	bl	800084c <__aeabi_ddiv>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	a139      	add	r1, pc, #228	; (adr r1, 8003540 <changeDelay+0x270>)
 800345c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003460:	f7fd f9f4 	bl	800084c <__aeabi_ddiv>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4620      	mov	r0, r4
 800346a:	4629      	mov	r1, r5
 800346c:	f7fd fb54 	bl	8000b18 <__aeabi_dcmpgt>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d128      	bne.n	80034c8 <changeDelay+0x1f8>
 8003476:	4b36      	ldr	r3, [pc, #216]	; (8003550 <changeDelay+0x280>)
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f852 	bl	8000524 <__aeabi_i2d>
 8003480:	4604      	mov	r4, r0
 8003482:	460d      	mov	r5, r1
 8003484:	4b36      	ldr	r3, [pc, #216]	; (8003560 <changeDelay+0x290>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f83b 	bl	8000504 <__aeabi_ui2d>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	ec43 2b10 	vmov	d0, r2, r3
 8003496:	f005 f997 	bl	80087c8 <log>
 800349a:	ec51 0b10 	vmov	r0, r1, d0
 800349e:	a324      	add	r3, pc, #144	; (adr r3, 8003530 <changeDelay+0x260>)
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f7fd f9d2 	bl	800084c <__aeabi_ddiv>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	a126      	add	r1, pc, #152	; (adr r1, 8003548 <changeDelay+0x278>)
 80034ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034b2:	f7fd f9cb 	bl	800084c <__aeabi_ddiv>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4620      	mov	r0, r4
 80034bc:	4629      	mov	r1, r5
 80034be:	f7fd fb2b 	bl	8000b18 <__aeabi_dcmpgt>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <changeDelay+0x200>
		sample_rate=30;
 80034c8:	4b21      	ldr	r3, [pc, #132]	; (8003550 <changeDelay+0x280>)
 80034ca:	221e      	movs	r2, #30
 80034cc:	801a      	strh	r2, [r3, #0]
 80034ce:	e076      	b.n	80035be <changeDelay+0x2ee>
	} else if(sample_rate<30){
 80034d0:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <changeDelay+0x280>)
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	2b1d      	cmp	r3, #29
 80034d6:	d872      	bhi.n	80035be <changeDelay+0x2ee>
		sample_rate=(analog_1_enabled && analog_2_enabled && analog_3_enabled)?3000:((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))?5000:10000;
 80034d8:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <changeDelay+0x284>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <changeDelay+0x220>
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <changeDelay+0x288>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <changeDelay+0x220>
 80034e8:	4b1c      	ldr	r3, [pc, #112]	; (800355c <changeDelay+0x28c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d139      	bne.n	8003564 <changeDelay+0x294>
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <changeDelay+0x284>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <changeDelay+0x230>
 80034f8:	4b17      	ldr	r3, [pc, #92]	; (8003558 <changeDelay+0x288>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10f      	bne.n	8003520 <changeDelay+0x250>
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <changeDelay+0x284>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <changeDelay+0x240>
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <changeDelay+0x28c>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d107      	bne.n	8003520 <changeDelay+0x250>
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <changeDelay+0x288>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <changeDelay+0x256>
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <changeDelay+0x28c>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <changeDelay+0x256>
 8003520:	f241 3388 	movw	r3, #5000	; 0x1388
 8003524:	e020      	b.n	8003568 <changeDelay+0x298>
 8003526:	f242 7310 	movw	r3, #10000	; 0x2710
 800352a:	e01d      	b.n	8003568 <changeDelay+0x298>
 800352c:	f3af 8000 	nop.w
 8003530:	fefa39ef 	.word	0xfefa39ef
 8003534:	3fe62e42 	.word	0x3fe62e42
 8003538:	00000000 	.word	0x00000000
 800353c:	40a77000 	.word	0x40a77000
 8003540:	00000000 	.word	0x00000000
 8003544:	40b38800 	.word	0x40b38800
 8003548:	00000000 	.word	0x00000000
 800354c:	40c38800 	.word	0x40c38800
 8003550:	20000172 	.word	0x20000172
 8003554:	20000002 	.word	0x20000002
 8003558:	20000003 	.word	0x20000003
 800355c:	20000004 	.word	0x20000004
 8003560:	20000000 	.word	0x20000000
 8003564:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003568:	4a25      	ldr	r2, [pc, #148]	; (8003600 <changeDelay+0x330>)
 800356a:	8013      	strh	r3, [r2, #0]
		sample_rate/=(log(PSC)/log(2));
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <changeDelay+0x334>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fc ffc7 	bl	8000504 <__aeabi_ui2d>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	ec43 2b10 	vmov	d0, r2, r3
 800357e:	f005 f923 	bl	80087c8 <log>
 8003582:	ec51 0b10 	vmov	r0, r1, d0
 8003586:	a31c      	add	r3, pc, #112	; (adr r3, 80035f8 <changeDelay+0x328>)
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f7fd f95e 	bl	800084c <__aeabi_ddiv>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4614      	mov	r4, r2
 8003596:	461d      	mov	r5, r3
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <changeDelay+0x330>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fc ffc1 	bl	8000524 <__aeabi_i2d>
 80035a2:	4622      	mov	r2, r4
 80035a4:	462b      	mov	r3, r5
 80035a6:	f7fd f951 	bl	800084c <__aeabi_ddiv>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4610      	mov	r0, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f7fd fad1 	bl	8000b58 <__aeabi_d2uiz>
 80035b6:	4603      	mov	r3, r0
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <changeDelay+0x330>)
 80035bc:	801a      	strh	r2, [r3, #0]
	}

	//display new sample rate
	lcd_put_cur(0,8);
 80035be:	2108      	movs	r1, #8
 80035c0:	2000      	movs	r0, #0
 80035c2:	f7fd fb94 	bl	8000cee <lcd_put_cur>
	char temp_arr[5];
	sprintf(temp_arr, "%05d", sample_rate);
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <changeDelay+0x330>)
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f107 0308 	add.w	r3, r7, #8
 80035d0:	490d      	ldr	r1, [pc, #52]	; (8003608 <changeDelay+0x338>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 fc70 	bl	8007eb8 <siprintf>
	lcd_send_string(temp_arr);
 80035d8:	f107 0308 	add.w	r3, r7, #8
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fbeb 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,13);
 80035e2:	210d      	movs	r1, #13
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7fd fb82 	bl	8000cee <lcd_put_cur>
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bdb0      	pop	{r4, r5, r7, pc}
 80035f2:	bf00      	nop
 80035f4:	f3af 8000 	nop.w
 80035f8:	fefa39ef 	.word	0xfefa39ef
 80035fc:	3fe62e42 	.word	0x3fe62e42
 8003600:	20000172 	.word	0x20000172
 8003604:	20000000 	.word	0x20000000
 8003608:	08009b9c 	.word	0x08009b9c
 800360c:	00000000 	.word	0x00000000

08003610 <setDelay>:

//change the prescaler to achieve the desired baud rate and reinitialize the can bus
void setDelay(void){
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	af00      	add	r7, sp, #0
	//sore the nmber of delays in flash
	storeInFlash();
 8003614:	f000 fe36 	bl	8004284 <storeInFlash>
	TIM3->ARR = (uint32_t)(((double)1/sample_rate)*1000000) - 1;//change CAN interrupt timer period
 8003618:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <setDelay+0xb8>)
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fc ff81 	bl	8000524 <__aeabi_i2d>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	f04f 0000 	mov.w	r0, #0
 800362a:	4928      	ldr	r1, [pc, #160]	; (80036cc <setDelay+0xbc>)
 800362c:	f7fd f90e 	bl	800084c <__aeabi_ddiv>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4610      	mov	r0, r2
 8003636:	4619      	mov	r1, r3
 8003638:	a321      	add	r3, pc, #132	; (adr r3, 80036c0 <setDelay+0xb0>)
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f7fc ffdb 	bl	80005f8 <__aeabi_dmul>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	f7fd fa85 	bl	8000b58 <__aeabi_d2uiz>
 800364e:	4603      	mov	r3, r0
 8003650:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <setDelay+0xc0>)
 8003652:	3b01      	subs	r3, #1
 8003654:	62d3      	str	r3, [r2, #44]	; 0x2c

	//save the sample rate in microseconds in menu
	memset(temp,0,17); // erase the temp array
 8003656:	2211      	movs	r2, #17
 8003658:	2100      	movs	r1, #0
 800365a:	481e      	ldr	r0, [pc, #120]	; (80036d4 <setDelay+0xc4>)
 800365c:	f004 fc24 	bl	8007ea8 <memset>
	strncpy(temp, "Rate:   ",16);
 8003660:	2210      	movs	r2, #16
 8003662:	491d      	ldr	r1, [pc, #116]	; (80036d8 <setDelay+0xc8>)
 8003664:	481b      	ldr	r0, [pc, #108]	; (80036d4 <setDelay+0xc4>)
 8003666:	f004 fc8e 	bl	8007f86 <strncpy>
	memset(char_arr, 0, 16);
 800366a:	2210      	movs	r2, #16
 800366c:	2100      	movs	r1, #0
 800366e:	481b      	ldr	r0, [pc, #108]	; (80036dc <setDelay+0xcc>)
 8003670:	f004 fc1a 	bl	8007ea8 <memset>
	sprintf(char_arr, "%05d", sample_rate);
 8003674:	4b14      	ldr	r3, [pc, #80]	; (80036c8 <setDelay+0xb8>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	4919      	ldr	r1, [pc, #100]	; (80036e0 <setDelay+0xd0>)
 800367c:	4817      	ldr	r0, [pc, #92]	; (80036dc <setDelay+0xcc>)
 800367e:	f004 fc1b 	bl	8007eb8 <siprintf>
	strcat(temp, char_arr);
 8003682:	4916      	ldr	r1, [pc, #88]	; (80036dc <setDelay+0xcc>)
 8003684:	4813      	ldr	r0, [pc, #76]	; (80036d4 <setDelay+0xc4>)
 8003686:	f004 fc37 	bl	8007ef8 <strcat>
	strlcat(temp,"sps",17);
 800368a:	2211      	movs	r2, #17
 800368c:	4915      	ldr	r1, [pc, #84]	; (80036e4 <setDelay+0xd4>)
 800368e:	4811      	ldr	r0, [pc, #68]	; (80036d4 <setDelay+0xc4>)
 8003690:	f004 fc41 	bl	8007f16 <strlcat>
	memcpy(main_menu[3],temp,17);
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <setDelay+0xd8>)
 8003696:	4a0f      	ldr	r2, [pc, #60]	; (80036d4 <setDelay+0xc4>)
 8003698:	3333      	adds	r3, #51	; 0x33
 800369a:	6815      	ldr	r5, [r2, #0]
 800369c:	6854      	ldr	r4, [r2, #4]
 800369e:	6890      	ldr	r0, [r2, #8]
 80036a0:	68d1      	ldr	r1, [r2, #12]
 80036a2:	601d      	str	r5, [r3, #0]
 80036a4:	605c      	str	r4, [r3, #4]
 80036a6:	6098      	str	r0, [r3, #8]
 80036a8:	60d9      	str	r1, [r3, #12]
 80036aa:	7c12      	ldrb	r2, [r2, #16]
 80036ac:	741a      	strb	r2, [r3, #16]
	lcd_put_cur(0,0);
 80036ae:	2100      	movs	r1, #0
 80036b0:	2000      	movs	r0, #0
 80036b2:	f7fd fb1c 	bl	8000cee <lcd_put_cur>
}
 80036b6:	bf00      	nop
 80036b8:	bdb0      	pop	{r4, r5, r7, pc}
 80036ba:	bf00      	nop
 80036bc:	f3af 8000 	nop.w
 80036c0:	00000000 	.word	0x00000000
 80036c4:	412e8480 	.word	0x412e8480
 80036c8:	20000172 	.word	0x20000172
 80036cc:	3ff00000 	.word	0x3ff00000
 80036d0:	40000400 	.word	0x40000400
 80036d4:	200022b4 	.word	0x200022b4
 80036d8:	08009b90 	.word	0x08009b90
 80036dc:	20006460 	.word	0x20006460
 80036e0:	08009b9c 	.word	0x08009b9c
 80036e4:	08009ba4 	.word	0x08009ba4
 80036e8:	20000018 	.word	0x20000018

080036ec <zeroAnalog>:

//sets an offset for the specified analog value
void zeroAnalog(uint8_t analog_id){
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
	if(analog_id==0){//zero all
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d16c      	bne.n	80037d6 <zeroAnalog+0xea>
		analog_1_offset = (uint32_t)((float)a_in_1_avg/offset_scalar_1)+analog_1_offset;
 80036fc:	4b79      	ldr	r3, [pc, #484]	; (80038e4 <zeroAnalog+0x1f8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003708:	4b77      	ldr	r3, [pc, #476]	; (80038e8 <zeroAnalog+0x1fc>)
 800370a:	ed93 7a00 	vldr	s14, [r3]
 800370e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003716:	ee17 2a90 	vmov	r2, s15
 800371a:	4b74      	ldr	r3, [pc, #464]	; (80038ec <zeroAnalog+0x200>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4413      	add	r3, r2
 8003720:	4a72      	ldr	r2, [pc, #456]	; (80038ec <zeroAnalog+0x200>)
 8003722:	6013      	str	r3, [r2, #0]
		analog_2_offset = (uint32_t)((float)a_in_2_avg/offset_scalar_2)+analog_2_offset;
 8003724:	4b72      	ldr	r3, [pc, #456]	; (80038f0 <zeroAnalog+0x204>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	ee07 3a90 	vmov	s15, r3
 800372c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003730:	4b70      	ldr	r3, [pc, #448]	; (80038f4 <zeroAnalog+0x208>)
 8003732:	ed93 7a00 	vldr	s14, [r3]
 8003736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800373a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800373e:	ee17 2a90 	vmov	r2, s15
 8003742:	4b6d      	ldr	r3, [pc, #436]	; (80038f8 <zeroAnalog+0x20c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a6b      	ldr	r2, [pc, #428]	; (80038f8 <zeroAnalog+0x20c>)
 800374a:	6013      	str	r3, [r2, #0]
		analog_3_offset = (uint32_t)((float)a_in_3_avg/offset_scalar_3)+analog_3_offset;
 800374c:	4b6b      	ldr	r3, [pc, #428]	; (80038fc <zeroAnalog+0x210>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	ee07 3a90 	vmov	s15, r3
 8003754:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003758:	4b69      	ldr	r3, [pc, #420]	; (8003900 <zeroAnalog+0x214>)
 800375a:	ed93 7a00 	vldr	s14, [r3]
 800375e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003766:	ee17 2a90 	vmov	r2, s15
 800376a:	4b66      	ldr	r3, [pc, #408]	; (8003904 <zeroAnalog+0x218>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4413      	add	r3, r2
 8003770:	4a64      	ldr	r2, [pc, #400]	; (8003904 <zeroAnalog+0x218>)
 8003772:	6013      	str	r3, [r2, #0]
		offset_scalar_1=(65535)/(float)(65535-analog_1_offset);
 8003774:	4b5d      	ldr	r3, [pc, #372]	; (80038ec <zeroAnalog+0x200>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800377c:	33ff      	adds	r3, #255	; 0xff
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003786:	eddf 6a60 	vldr	s13, [pc, #384]	; 8003908 <zeroAnalog+0x21c>
 800378a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800378e:	4b56      	ldr	r3, [pc, #344]	; (80038e8 <zeroAnalog+0x1fc>)
 8003790:	edc3 7a00 	vstr	s15, [r3]
		offset_scalar_2=(65535)/(float)(65535-analog_2_offset);
 8003794:	4b58      	ldr	r3, [pc, #352]	; (80038f8 <zeroAnalog+0x20c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800379c:	33ff      	adds	r3, #255	; 0xff
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003908 <zeroAnalog+0x21c>
 80037aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ae:	4b51      	ldr	r3, [pc, #324]	; (80038f4 <zeroAnalog+0x208>)
 80037b0:	edc3 7a00 	vstr	s15, [r3]
		offset_scalar_3=(65535)/(float)(65535-analog_3_offset);
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <zeroAnalog+0x218>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80037bc:	33ff      	adds	r3, #255	; 0xff
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037c6:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003908 <zeroAnalog+0x21c>
 80037ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ce:	4b4c      	ldr	r3, [pc, #304]	; (8003900 <zeroAnalog+0x214>)
 80037d0:	edc3 7a00 	vstr	s15, [r3]
 80037d4:	e076      	b.n	80038c4 <zeroAnalog+0x1d8>
	} else if(analog_id==1){//zero 1
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d124      	bne.n	8003826 <zeroAnalog+0x13a>
		analog_1_offset = (uint32_t)((float)a_in_1_avg/offset_scalar_1)+analog_1_offset;
 80037dc:	4b41      	ldr	r3, [pc, #260]	; (80038e4 <zeroAnalog+0x1f8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <zeroAnalog+0x1fc>)
 80037ea:	ed93 7a00 	vldr	s14, [r3]
 80037ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037f6:	ee17 2a90 	vmov	r2, s15
 80037fa:	4b3c      	ldr	r3, [pc, #240]	; (80038ec <zeroAnalog+0x200>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4413      	add	r3, r2
 8003800:	4a3a      	ldr	r2, [pc, #232]	; (80038ec <zeroAnalog+0x200>)
 8003802:	6013      	str	r3, [r2, #0]
		offset_scalar_1=(65535)/(float)(65535-analog_1_offset);
 8003804:	4b39      	ldr	r3, [pc, #228]	; (80038ec <zeroAnalog+0x200>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800380c:	33ff      	adds	r3, #255	; 0xff
 800380e:	ee07 3a90 	vmov	s15, r3
 8003812:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003816:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003908 <zeroAnalog+0x21c>
 800381a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <zeroAnalog+0x1fc>)
 8003820:	edc3 7a00 	vstr	s15, [r3]
 8003824:	e04e      	b.n	80038c4 <zeroAnalog+0x1d8>
	} else if(analog_id==2){//zero 2
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d124      	bne.n	8003876 <zeroAnalog+0x18a>
		analog_2_offset = (uint32_t)((float)a_in_2_avg/offset_scalar_2)+analog_2_offset;
 800382c:	4b30      	ldr	r3, [pc, #192]	; (80038f0 <zeroAnalog+0x204>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003838:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <zeroAnalog+0x208>)
 800383a:	ed93 7a00 	vldr	s14, [r3]
 800383e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003846:	ee17 2a90 	vmov	r2, s15
 800384a:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <zeroAnalog+0x20c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4413      	add	r3, r2
 8003850:	4a29      	ldr	r2, [pc, #164]	; (80038f8 <zeroAnalog+0x20c>)
 8003852:	6013      	str	r3, [r2, #0]
		offset_scalar_2=(65535)/(float)(65535-analog_2_offset);
 8003854:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <zeroAnalog+0x20c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800385c:	33ff      	adds	r3, #255	; 0xff
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003866:	eddf 6a28 	vldr	s13, [pc, #160]	; 8003908 <zeroAnalog+0x21c>
 800386a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386e:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <zeroAnalog+0x208>)
 8003870:	edc3 7a00 	vstr	s15, [r3]
 8003874:	e026      	b.n	80038c4 <zeroAnalog+0x1d8>
	} else if(analog_id==3){//zero 3
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d123      	bne.n	80038c4 <zeroAnalog+0x1d8>
		analog_3_offset = (uint32_t)((float)a_in_3_avg/offset_scalar_3)+analog_3_offset;
 800387c:	4b1f      	ldr	r3, [pc, #124]	; (80038fc <zeroAnalog+0x210>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	ee07 3a90 	vmov	s15, r3
 8003884:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <zeroAnalog+0x214>)
 800388a:	ed93 7a00 	vldr	s14, [r3]
 800388e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003896:	ee17 2a90 	vmov	r2, s15
 800389a:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <zeroAnalog+0x218>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4413      	add	r3, r2
 80038a0:	4a18      	ldr	r2, [pc, #96]	; (8003904 <zeroAnalog+0x218>)
 80038a2:	6013      	str	r3, [r2, #0]
		offset_scalar_3=(65535)/(float)(65535-analog_3_offset);
 80038a4:	4b17      	ldr	r3, [pc, #92]	; (8003904 <zeroAnalog+0x218>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80038ac:	33ff      	adds	r3, #255	; 0xff
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038b6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8003908 <zeroAnalog+0x21c>
 80038ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <zeroAnalog+0x214>)
 80038c0:	edc3 7a00 	vstr	s15, [r3]
	}

	lcd_put_cur(0,0);
 80038c4:	2100      	movs	r1, #0
 80038c6:	2000      	movs	r0, #0
 80038c8:	f7fd fa11 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Zero Successful ");
 80038cc:	480f      	ldr	r0, [pc, #60]	; (800390c <zeroAnalog+0x220>)
 80038ce:	f7fd fa73 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,15);
 80038d2:	210f      	movs	r1, #15
 80038d4:	2000      	movs	r0, #0
 80038d6:	f7fd fa0a 	bl	8000cee <lcd_put_cur>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20006470 	.word	0x20006470
 80038e8:	20000008 	.word	0x20000008
 80038ec:	2000020c 	.word	0x2000020c
 80038f0:	200022c8 	.word	0x200022c8
 80038f4:	2000000c 	.word	0x2000000c
 80038f8:	20000210 	.word	0x20000210
 80038fc:	20006458 	.word	0x20006458
 8003900:	20000010 	.word	0x20000010
 8003904:	20000214 	.word	0x20000214
 8003908:	477fff00 	.word	0x477fff00
 800390c:	08009c38 	.word	0x08009c38

08003910 <resetOffsets>:

//resets all analog offsets to 0 and stores it in flash
void resetOffsets(void){
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
	analog_1_offset=0;
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <resetOffsets+0x54>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
	analog_2_offset=0;
 800391a:	4b13      	ldr	r3, [pc, #76]	; (8003968 <resetOffsets+0x58>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
	analog_3_offset=0;
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <resetOffsets+0x5c>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
	offset_scalar_1=1;
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <resetOffsets+0x60>)
 8003928:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800392c:	601a      	str	r2, [r3, #0]
	offset_scalar_2=1;
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <resetOffsets+0x64>)
 8003930:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003934:	601a      	str	r2, [r3, #0]
	offset_scalar_3=1;
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <resetOffsets+0x68>)
 8003938:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800393c:	601a      	str	r2, [r3, #0]

	store_offsets=1;
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <resetOffsets+0x6c>)
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]

	storeInFlash();
 8003944:	f000 fc9e 	bl	8004284 <storeInFlash>

	lcd_put_cur(0,0);
 8003948:	2100      	movs	r1, #0
 800394a:	2000      	movs	r0, #0
 800394c:	f7fd f9cf 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Reset Successful");
 8003950:	480b      	ldr	r0, [pc, #44]	; (8003980 <resetOffsets+0x70>)
 8003952:	f7fd fa31 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,15);
 8003956:	210f      	movs	r1, #15
 8003958:	2000      	movs	r0, #0
 800395a:	f7fd f9c8 	bl	8000cee <lcd_put_cur>
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	2000020c 	.word	0x2000020c
 8003968:	20000210 	.word	0x20000210
 800396c:	20000214 	.word	0x20000214
 8003970:	20000008 	.word	0x20000008
 8003974:	2000000c 	.word	0x2000000c
 8003978:	20000010 	.word	0x20000010
 800397c:	20000218 	.word	0x20000218
 8003980:	08009c24 	.word	0x08009c24
 8003984:	00000000 	.word	0x00000000

08003988 <toggleAnalog>:

//turns the analog device on or off
void toggleAnalog(uint8_t analog_id){
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
	uint8_t enabled=0;//bool to indicate if the change enabled the device
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]
	//update state and display it
	lcd_put_cur(0,13);
 8003996:	210d      	movs	r1, #13
 8003998:	2000      	movs	r0, #0
 800399a:	f7fd f9a8 	bl	8000cee <lcd_put_cur>
	if(analog_id==1){
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d117      	bne.n	80039d4 <toggleAnalog+0x4c>
		if(analog_1_enabled)
 80039a4:	4b96      	ldr	r3, [pc, #600]	; (8003c00 <toggleAnalog+0x278>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <toggleAnalog+0x2c>
			lcd_send_string("OFF");
 80039ac:	4895      	ldr	r0, [pc, #596]	; (8003c04 <toggleAnalog+0x27c>)
 80039ae:	f7fd fa03 	bl	8000db8 <lcd_send_string>
 80039b2:	e004      	b.n	80039be <toggleAnalog+0x36>
		else{
			lcd_send_string(" ON");
 80039b4:	4894      	ldr	r0, [pc, #592]	; (8003c08 <toggleAnalog+0x280>)
 80039b6:	f7fd f9ff 	bl	8000db8 <lcd_send_string>
			enabled=1;}
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
		analog_1_enabled=!analog_1_enabled;
 80039be:	4b90      	ldr	r3, [pc, #576]	; (8003c00 <toggleAnalog+0x278>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b8c      	ldr	r3, [pc, #560]	; (8003c00 <toggleAnalog+0x278>)
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	e034      	b.n	8003a3e <toggleAnalog+0xb6>
	}else if(analog_id==2){
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d117      	bne.n	8003a0a <toggleAnalog+0x82>
		if(analog_2_enabled)
 80039da:	4b8c      	ldr	r3, [pc, #560]	; (8003c0c <toggleAnalog+0x284>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <toggleAnalog+0x62>
			lcd_send_string("OFF");
 80039e2:	4888      	ldr	r0, [pc, #544]	; (8003c04 <toggleAnalog+0x27c>)
 80039e4:	f7fd f9e8 	bl	8000db8 <lcd_send_string>
 80039e8:	e004      	b.n	80039f4 <toggleAnalog+0x6c>
		else{
			lcd_send_string(" ON");
 80039ea:	4887      	ldr	r0, [pc, #540]	; (8003c08 <toggleAnalog+0x280>)
 80039ec:	f7fd f9e4 	bl	8000db8 <lcd_send_string>
			enabled=1;}
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
		analog_2_enabled=!analog_2_enabled;
 80039f4:	4b85      	ldr	r3, [pc, #532]	; (8003c0c <toggleAnalog+0x284>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	4b81      	ldr	r3, [pc, #516]	; (8003c0c <toggleAnalog+0x284>)
 8003a06:	701a      	strb	r2, [r3, #0]
 8003a08:	e019      	b.n	8003a3e <toggleAnalog+0xb6>
	}else if(analog_id==3){
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d116      	bne.n	8003a3e <toggleAnalog+0xb6>
		if(analog_3_enabled)
 8003a10:	4b7f      	ldr	r3, [pc, #508]	; (8003c10 <toggleAnalog+0x288>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <toggleAnalog+0x98>
			lcd_send_string("OFF");
 8003a18:	487a      	ldr	r0, [pc, #488]	; (8003c04 <toggleAnalog+0x27c>)
 8003a1a:	f7fd f9cd 	bl	8000db8 <lcd_send_string>
 8003a1e:	e004      	b.n	8003a2a <toggleAnalog+0xa2>
		else{
			lcd_send_string(" ON");enabled=1;}
 8003a20:	4879      	ldr	r0, [pc, #484]	; (8003c08 <toggleAnalog+0x280>)
 8003a22:	f7fd f9c9 	bl	8000db8 <lcd_send_string>
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
		analog_3_enabled=!analog_3_enabled;
 8003a2a:	4b79      	ldr	r3, [pc, #484]	; (8003c10 <toggleAnalog+0x288>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b75      	ldr	r3, [pc, #468]	; (8003c10 <toggleAnalog+0x288>)
 8003a3c:	701a      	strb	r2, [r3, #0]
	}

	//sample rate cap
	if(sample_rate<30||(analog_1_enabled && analog_2_enabled && analog_3_enabled && sample_rate > 3000/(log(PSC)/log(2)))||(((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))&& sample_rate>5000/(log(PSC)/log(2)))||(sample_rate>10000/(log(PSC)/log(2)))){
 8003a3e:	4b75      	ldr	r3, [pc, #468]	; (8003c14 <toggleAnalog+0x28c>)
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	2b1d      	cmp	r3, #29
 8003a44:	f240 809f 	bls.w	8003b86 <toggleAnalog+0x1fe>
 8003a48:	4b6d      	ldr	r3, [pc, #436]	; (8003c00 <toggleAnalog+0x278>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d030      	beq.n	8003ab2 <toggleAnalog+0x12a>
 8003a50:	4b6e      	ldr	r3, [pc, #440]	; (8003c0c <toggleAnalog+0x284>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02c      	beq.n	8003ab2 <toggleAnalog+0x12a>
 8003a58:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <toggleAnalog+0x288>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d028      	beq.n	8003ab2 <toggleAnalog+0x12a>
 8003a60:	4b6c      	ldr	r3, [pc, #432]	; (8003c14 <toggleAnalog+0x28c>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fc fd5d 	bl	8000524 <__aeabi_i2d>
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	460d      	mov	r5, r1
 8003a6e:	4b6a      	ldr	r3, [pc, #424]	; (8003c18 <toggleAnalog+0x290>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fd46 	bl	8000504 <__aeabi_ui2d>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	ec43 2b10 	vmov	d0, r2, r3
 8003a80:	f004 fea2 	bl	80087c8 <log>
 8003a84:	ec51 0b10 	vmov	r0, r1, d0
 8003a88:	a355      	add	r3, pc, #340	; (adr r3, 8003be0 <toggleAnalog+0x258>)
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f7fc fedd 	bl	800084c <__aeabi_ddiv>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	a154      	add	r1, pc, #336	; (adr r1, 8003be8 <toggleAnalog+0x260>)
 8003a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a9c:	f7fc fed6 	bl	800084c <__aeabi_ddiv>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	f7fd f836 	bl	8000b18 <__aeabi_dcmpgt>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d169      	bne.n	8003b86 <toggleAnalog+0x1fe>
 8003ab2:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <toggleAnalog+0x278>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <toggleAnalog+0x13a>
 8003aba:	4b54      	ldr	r3, [pc, #336]	; (8003c0c <toggleAnalog+0x284>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10f      	bne.n	8003ae2 <toggleAnalog+0x15a>
 8003ac2:	4b4f      	ldr	r3, [pc, #316]	; (8003c00 <toggleAnalog+0x278>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <toggleAnalog+0x14a>
 8003aca:	4b51      	ldr	r3, [pc, #324]	; (8003c10 <toggleAnalog+0x288>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <toggleAnalog+0x15a>
 8003ad2:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <toggleAnalog+0x284>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d02c      	beq.n	8003b34 <toggleAnalog+0x1ac>
 8003ada:	4b4d      	ldr	r3, [pc, #308]	; (8003c10 <toggleAnalog+0x288>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d028      	beq.n	8003b34 <toggleAnalog+0x1ac>
 8003ae2:	4b4c      	ldr	r3, [pc, #304]	; (8003c14 <toggleAnalog+0x28c>)
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fc fd1c 	bl	8000524 <__aeabi_i2d>
 8003aec:	4604      	mov	r4, r0
 8003aee:	460d      	mov	r5, r1
 8003af0:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <toggleAnalog+0x290>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fc fd05 	bl	8000504 <__aeabi_ui2d>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	ec43 2b10 	vmov	d0, r2, r3
 8003b02:	f004 fe61 	bl	80087c8 <log>
 8003b06:	ec51 0b10 	vmov	r0, r1, d0
 8003b0a:	a335      	add	r3, pc, #212	; (adr r3, 8003be0 <toggleAnalog+0x258>)
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f7fc fe9c 	bl	800084c <__aeabi_ddiv>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	a135      	add	r1, pc, #212	; (adr r1, 8003bf0 <toggleAnalog+0x268>)
 8003b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b1e:	f7fc fe95 	bl	800084c <__aeabi_ddiv>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f7fc fff5 	bl	8000b18 <__aeabi_dcmpgt>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d128      	bne.n	8003b86 <toggleAnalog+0x1fe>
 8003b34:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <toggleAnalog+0x28c>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fcf3 	bl	8000524 <__aeabi_i2d>
 8003b3e:	4604      	mov	r4, r0
 8003b40:	460d      	mov	r5, r1
 8003b42:	4b35      	ldr	r3, [pc, #212]	; (8003c18 <toggleAnalog+0x290>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fc fcdc 	bl	8000504 <__aeabi_ui2d>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	ec43 2b10 	vmov	d0, r2, r3
 8003b54:	f004 fe38 	bl	80087c8 <log>
 8003b58:	ec51 0b10 	vmov	r0, r1, d0
 8003b5c:	a320      	add	r3, pc, #128	; (adr r3, 8003be0 <toggleAnalog+0x258>)
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f7fc fe73 	bl	800084c <__aeabi_ddiv>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	a123      	add	r1, pc, #140	; (adr r1, 8003bf8 <toggleAnalog+0x270>)
 8003b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b70:	f7fc fe6c 	bl	800084c <__aeabi_ddiv>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4620      	mov	r0, r4
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	f7fc ffcc 	bl	8000b18 <__aeabi_dcmpgt>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d079      	beq.n	8003c7a <toggleAnalog+0x2f2>
		sample_rate=(analog_1_enabled && analog_2_enabled && analog_3_enabled)?3000:((analog_1_enabled&&analog_2_enabled)||(analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled))?5000:10000;
 8003b86:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <toggleAnalog+0x278>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <toggleAnalog+0x216>
 8003b8e:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <toggleAnalog+0x284>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <toggleAnalog+0x216>
 8003b96:	4b1e      	ldr	r3, [pc, #120]	; (8003c10 <toggleAnalog+0x288>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d13e      	bne.n	8003c1c <toggleAnalog+0x294>
 8003b9e:	4b18      	ldr	r3, [pc, #96]	; (8003c00 <toggleAnalog+0x278>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <toggleAnalog+0x226>
 8003ba6:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <toggleAnalog+0x284>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10f      	bne.n	8003bce <toggleAnalog+0x246>
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <toggleAnalog+0x278>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <toggleAnalog+0x236>
 8003bb6:	4b16      	ldr	r3, [pc, #88]	; (8003c10 <toggleAnalog+0x288>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d107      	bne.n	8003bce <toggleAnalog+0x246>
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <toggleAnalog+0x284>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <toggleAnalog+0x24c>
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <toggleAnalog+0x288>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <toggleAnalog+0x24c>
 8003bce:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bd2:	e025      	b.n	8003c20 <toggleAnalog+0x298>
 8003bd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8003bd8:	e022      	b.n	8003c20 <toggleAnalog+0x298>
 8003bda:	bf00      	nop
 8003bdc:	f3af 8000 	nop.w
 8003be0:	fefa39ef 	.word	0xfefa39ef
 8003be4:	3fe62e42 	.word	0x3fe62e42
 8003be8:	00000000 	.word	0x00000000
 8003bec:	40a77000 	.word	0x40a77000
 8003bf0:	00000000 	.word	0x00000000
 8003bf4:	40b38800 	.word	0x40b38800
 8003bf8:	00000000 	.word	0x00000000
 8003bfc:	40c38800 	.word	0x40c38800
 8003c00:	20000002 	.word	0x20000002
 8003c04:	08009c4c 	.word	0x08009c4c
 8003c08:	08009c50 	.word	0x08009c50
 8003c0c:	20000003 	.word	0x20000003
 8003c10:	20000004 	.word	0x20000004
 8003c14:	20000172 	.word	0x20000172
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003c20:	4a63      	ldr	r2, [pc, #396]	; (8003db0 <toggleAnalog+0x428>)
 8003c22:	8013      	strh	r3, [r2, #0]
		sample_rate/=(log(PSC)/log(2));
 8003c24:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <toggleAnalog+0x42c>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fc fc6b 	bl	8000504 <__aeabi_ui2d>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	ec43 2b10 	vmov	d0, r2, r3
 8003c36:	f004 fdc7 	bl	80087c8 <log>
 8003c3a:	ec51 0b10 	vmov	r0, r1, d0
 8003c3e:	a35a      	add	r3, pc, #360	; (adr r3, 8003da8 <toggleAnalog+0x420>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f7fc fe02 	bl	800084c <__aeabi_ddiv>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	461d      	mov	r5, r3
 8003c50:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <toggleAnalog+0x428>)
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc fc65 	bl	8000524 <__aeabi_i2d>
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	f7fc fdf5 	bl	800084c <__aeabi_ddiv>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f7fc ff75 	bl	8000b58 <__aeabi_d2uiz>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	4b4f      	ldr	r3, [pc, #316]	; (8003db0 <toggleAnalog+0x428>)
 8003c74:	801a      	strh	r2, [r3, #0]
		setDelay();
 8003c76:	f7ff fccb 	bl	8003610 <setDelay>
	}


	//store the state in the menu
	if(enabled){
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d03e      	beq.n	8003cfe <toggleAnalog+0x376>
		memset(temp,0,17); // erase the temp array
 8003c80:	2211      	movs	r2, #17
 8003c82:	2100      	movs	r1, #0
 8003c84:	484c      	ldr	r0, [pc, #304]	; (8003db8 <toggleAnalog+0x430>)
 8003c86:	f004 f90f 	bl	8007ea8 <memset>
		strncpy(temp, "Analog ",16);
 8003c8a:	2210      	movs	r2, #16
 8003c8c:	494b      	ldr	r1, [pc, #300]	; (8003dbc <toggleAnalog+0x434>)
 8003c8e:	484a      	ldr	r0, [pc, #296]	; (8003db8 <toggleAnalog+0x430>)
 8003c90:	f004 f979 	bl	8007f86 <strncpy>
		memset(char_arr, 0, 16);
 8003c94:	2210      	movs	r2, #16
 8003c96:	2100      	movs	r1, #0
 8003c98:	4849      	ldr	r0, [pc, #292]	; (8003dc0 <toggleAnalog+0x438>)
 8003c9a:	f004 f905 	bl	8007ea8 <memset>
		sprintf(char_arr, "%01d", analog_id);
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4948      	ldr	r1, [pc, #288]	; (8003dc4 <toggleAnalog+0x43c>)
 8003ca4:	4846      	ldr	r0, [pc, #280]	; (8003dc0 <toggleAnalog+0x438>)
 8003ca6:	f004 f907 	bl	8007eb8 <siprintf>
		strcat(temp, char_arr);
 8003caa:	4945      	ldr	r1, [pc, #276]	; (8003dc0 <toggleAnalog+0x438>)
 8003cac:	4842      	ldr	r0, [pc, #264]	; (8003db8 <toggleAnalog+0x430>)
 8003cae:	f004 f923 	bl	8007ef8 <strcat>
		strcat(temp,":     ");
 8003cb2:	4841      	ldr	r0, [pc, #260]	; (8003db8 <toggleAnalog+0x430>)
 8003cb4:	f7fc fa8c 	bl	80001d0 <strlen>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b3e      	ldr	r3, [pc, #248]	; (8003db8 <toggleAnalog+0x430>)
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4a41      	ldr	r2, [pc, #260]	; (8003dc8 <toggleAnalog+0x440>)
 8003cc2:	6810      	ldr	r0, [r2, #0]
 8003cc4:	6018      	str	r0, [r3, #0]
 8003cc6:	8891      	ldrh	r1, [r2, #4]
 8003cc8:	7992      	ldrb	r2, [r2, #6]
 8003cca:	8099      	strh	r1, [r3, #4]
 8003ccc:	719a      	strb	r2, [r3, #6]
		strlcat(temp, "ON",17);
 8003cce:	2211      	movs	r2, #17
 8003cd0:	493e      	ldr	r1, [pc, #248]	; (8003dcc <toggleAnalog+0x444>)
 8003cd2:	4839      	ldr	r0, [pc, #228]	; (8003db8 <toggleAnalog+0x430>)
 8003cd4:	f004 f91f 	bl	8007f16 <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	1d1a      	adds	r2, r3, #4
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	4413      	add	r3, r2
 8003ce2:	4a3b      	ldr	r2, [pc, #236]	; (8003dd0 <toggleAnalog+0x448>)
 8003ce4:	4413      	add	r3, r2
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <toggleAnalog+0x430>)
 8003ce8:	6815      	ldr	r5, [r2, #0]
 8003cea:	6854      	ldr	r4, [r2, #4]
 8003cec:	6890      	ldr	r0, [r2, #8]
 8003cee:	68d1      	ldr	r1, [r2, #12]
 8003cf0:	601d      	str	r5, [r3, #0]
 8003cf2:	605c      	str	r4, [r3, #4]
 8003cf4:	6098      	str	r0, [r3, #8]
 8003cf6:	60d9      	str	r1, [r3, #12]
 8003cf8:	7c12      	ldrb	r2, [r2, #16]
 8003cfa:	741a      	strb	r2, [r3, #16]
 8003cfc:	e03b      	b.n	8003d76 <toggleAnalog+0x3ee>
	}else{
		memset(temp,0,17); // erase the temp array
 8003cfe:	2211      	movs	r2, #17
 8003d00:	2100      	movs	r1, #0
 8003d02:	482d      	ldr	r0, [pc, #180]	; (8003db8 <toggleAnalog+0x430>)
 8003d04:	f004 f8d0 	bl	8007ea8 <memset>
		strncpy(temp, "Analog ",16);
 8003d08:	2210      	movs	r2, #16
 8003d0a:	492c      	ldr	r1, [pc, #176]	; (8003dbc <toggleAnalog+0x434>)
 8003d0c:	482a      	ldr	r0, [pc, #168]	; (8003db8 <toggleAnalog+0x430>)
 8003d0e:	f004 f93a 	bl	8007f86 <strncpy>
		memset(char_arr, 0, 16);
 8003d12:	2210      	movs	r2, #16
 8003d14:	2100      	movs	r1, #0
 8003d16:	482a      	ldr	r0, [pc, #168]	; (8003dc0 <toggleAnalog+0x438>)
 8003d18:	f004 f8c6 	bl	8007ea8 <memset>
		sprintf(char_arr, "%01d", analog_id);
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4928      	ldr	r1, [pc, #160]	; (8003dc4 <toggleAnalog+0x43c>)
 8003d22:	4827      	ldr	r0, [pc, #156]	; (8003dc0 <toggleAnalog+0x438>)
 8003d24:	f004 f8c8 	bl	8007eb8 <siprintf>
		strcat(temp, char_arr);
 8003d28:	4925      	ldr	r1, [pc, #148]	; (8003dc0 <toggleAnalog+0x438>)
 8003d2a:	4823      	ldr	r0, [pc, #140]	; (8003db8 <toggleAnalog+0x430>)
 8003d2c:	f004 f8e4 	bl	8007ef8 <strcat>
		strcat(temp,":    ");
 8003d30:	4821      	ldr	r0, [pc, #132]	; (8003db8 <toggleAnalog+0x430>)
 8003d32:	f7fc fa4d 	bl	80001d0 <strlen>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b1f      	ldr	r3, [pc, #124]	; (8003db8 <toggleAnalog+0x430>)
 8003d3c:	4413      	add	r3, r2
 8003d3e:	4a25      	ldr	r2, [pc, #148]	; (8003dd4 <toggleAnalog+0x44c>)
 8003d40:	6810      	ldr	r0, [r2, #0]
 8003d42:	6018      	str	r0, [r3, #0]
 8003d44:	8892      	ldrh	r2, [r2, #4]
 8003d46:	809a      	strh	r2, [r3, #4]
		strlcat(temp, "OFF",17);
 8003d48:	2211      	movs	r2, #17
 8003d4a:	4923      	ldr	r1, [pc, #140]	; (8003dd8 <toggleAnalog+0x450>)
 8003d4c:	481a      	ldr	r0, [pc, #104]	; (8003db8 <toggleAnalog+0x430>)
 8003d4e:	f004 f8e2 	bl	8007f16 <strlcat>
		memcpy(analog_menu[analog_id+4],temp,17);}
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	4413      	add	r3, r2
 8003d5c:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <toggleAnalog+0x448>)
 8003d5e:	4413      	add	r3, r2
 8003d60:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <toggleAnalog+0x430>)
 8003d62:	6815      	ldr	r5, [r2, #0]
 8003d64:	6854      	ldr	r4, [r2, #4]
 8003d66:	6890      	ldr	r0, [r2, #8]
 8003d68:	68d1      	ldr	r1, [r2, #12]
 8003d6a:	601d      	str	r5, [r3, #0]
 8003d6c:	605c      	str	r4, [r3, #4]
 8003d6e:	6098      	str	r0, [r3, #8]
 8003d70:	60d9      	str	r1, [r3, #12]
 8003d72:	7c12      	ldrb	r2, [r2, #16]
 8003d74:	741a      	strb	r2, [r3, #16]

	//store the values in an array
	analog_enable_arr[0]=analog_1_enabled;
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <toggleAnalog+0x454>)
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <toggleAnalog+0x458>)
 8003d7c:	701a      	strb	r2, [r3, #0]
	analog_enable_arr[1]=analog_2_enabled;
 8003d7e:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <toggleAnalog+0x45c>)
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	4b17      	ldr	r3, [pc, #92]	; (8003de0 <toggleAnalog+0x458>)
 8003d84:	705a      	strb	r2, [r3, #1]
	analog_enable_arr[2]=analog_3_enabled;
 8003d86:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <toggleAnalog+0x460>)
 8003d88:	781a      	ldrb	r2, [r3, #0]
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <toggleAnalog+0x458>)
 8003d8c:	709a      	strb	r2, [r3, #2]

	storeInFlash();
 8003d8e:	f000 fa79 	bl	8004284 <storeInFlash>

	//reset cursor on display
	lcd_put_cur(0,0);
 8003d92:	2100      	movs	r1, #0
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7fc ffaa 	bl	8000cee <lcd_put_cur>

}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bdb0      	pop	{r4, r5, r7, pc}
 8003da2:	bf00      	nop
 8003da4:	f3af 8000 	nop.w
 8003da8:	fefa39ef 	.word	0xfefa39ef
 8003dac:	3fe62e42 	.word	0x3fe62e42
 8003db0:	20000172 	.word	0x20000172
 8003db4:	20000000 	.word	0x20000000
 8003db8:	200022b4 	.word	0x200022b4
 8003dbc:	08009c54 	.word	0x08009c54
 8003dc0:	20006460 	.word	0x20006460
 8003dc4:	08009c5c 	.word	0x08009c5c
 8003dc8:	08009c64 	.word	0x08009c64
 8003dcc:	08009c6c 	.word	0x08009c6c
 8003dd0:	200000c4 	.word	0x200000c4
 8003dd4:	08009c70 	.word	0x08009c70
 8003dd8:	08009c4c 	.word	0x08009c4c
 8003ddc:	20000002 	.word	0x20000002
 8003de0:	200063a8 	.word	0x200063a8
 8003de4:	20000003 	.word	0x20000003
 8003de8:	20000004 	.word	0x20000004

08003dec <displayValues>:

//display the analog values on the display
void displayValues(void){
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
	updating_display=1;
 8003df0:	4bbb      	ldr	r3, [pc, #748]	; (80040e0 <displayValues+0x2f4>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
	lcd_put_cur(0,0);
 8003df6:	2100      	movs	r1, #0
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f7fc ff78 	bl	8000cee <lcd_put_cur>
	if(analog_1_enabled&&analog_2_enabled&&analog_3_enabled){//all 3 devices are enabled
 8003dfe:	4bb9      	ldr	r3, [pc, #740]	; (80040e4 <displayValues+0x2f8>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80a5 	beq.w	8003f52 <displayValues+0x166>
 8003e08:	4bb7      	ldr	r3, [pc, #732]	; (80040e8 <displayValues+0x2fc>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80a0 	beq.w	8003f52 <displayValues+0x166>
 8003e12:	4bb6      	ldr	r3, [pc, #728]	; (80040ec <displayValues+0x300>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 809b 	beq.w	8003f52 <displayValues+0x166>
		if(display_scroll==0){//position 1
 8003e1c:	4bb4      	ldr	r3, [pc, #720]	; (80040f0 <displayValues+0x304>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d130      	bne.n	8003e86 <displayValues+0x9a>
			lcd_send_string("Analog 1:       ");
 8003e24:	48b3      	ldr	r0, [pc, #716]	; (80040f4 <displayValues+0x308>)
 8003e26:	f7fc ffc7 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003e2a:	210b      	movs	r1, #11
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f7fc ff5e 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003e32:	2210      	movs	r2, #16
 8003e34:	2100      	movs	r1, #0
 8003e36:	48b0      	ldr	r0, [pc, #704]	; (80040f8 <displayValues+0x30c>)
 8003e38:	f004 f836 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_1_avg);
 8003e3c:	4baf      	ldr	r3, [pc, #700]	; (80040fc <displayValues+0x310>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	49af      	ldr	r1, [pc, #700]	; (8004100 <displayValues+0x314>)
 8003e44:	48ac      	ldr	r0, [pc, #688]	; (80040f8 <displayValues+0x30c>)
 8003e46:	f004 f837 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 8003e4a:	48ab      	ldr	r0, [pc, #684]	; (80040f8 <displayValues+0x30c>)
 8003e4c:	f7fc ffb4 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003e50:	2100      	movs	r1, #0
 8003e52:	2001      	movs	r0, #1
 8003e54:	f7fc ff4b 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 8003e58:	48aa      	ldr	r0, [pc, #680]	; (8004104 <displayValues+0x318>)
 8003e5a:	f7fc ffad 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,11);
 8003e5e:	210b      	movs	r1, #11
 8003e60:	2001      	movs	r0, #1
 8003e62:	f7fc ff44 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003e66:	2210      	movs	r2, #16
 8003e68:	2100      	movs	r1, #0
 8003e6a:	48a3      	ldr	r0, [pc, #652]	; (80040f8 <displayValues+0x30c>)
 8003e6c:	f004 f81c 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_2_avg);
 8003e70:	4ba5      	ldr	r3, [pc, #660]	; (8004108 <displayValues+0x31c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	49a2      	ldr	r1, [pc, #648]	; (8004100 <displayValues+0x314>)
 8003e78:	489f      	ldr	r0, [pc, #636]	; (80040f8 <displayValues+0x30c>)
 8003e7a:	f004 f81d 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 8003e7e:	489e      	ldr	r0, [pc, #632]	; (80040f8 <displayValues+0x30c>)
 8003e80:	f7fc ff9a 	bl	8000db8 <lcd_send_string>
		if(display_scroll==0){//position 1
 8003e84:	e126      	b.n	80040d4 <displayValues+0x2e8>
		}else if(display_scroll==1){//position 2
 8003e86:	4b9a      	ldr	r3, [pc, #616]	; (80040f0 <displayValues+0x304>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d130      	bne.n	8003ef0 <displayValues+0x104>
			lcd_send_string("Analog 2:       ");
 8003e8e:	489d      	ldr	r0, [pc, #628]	; (8004104 <displayValues+0x318>)
 8003e90:	f7fc ff92 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003e94:	210b      	movs	r1, #11
 8003e96:	2000      	movs	r0, #0
 8003e98:	f7fc ff29 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4895      	ldr	r0, [pc, #596]	; (80040f8 <displayValues+0x30c>)
 8003ea2:	f004 f801 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_2_avg);
 8003ea6:	4b98      	ldr	r3, [pc, #608]	; (8004108 <displayValues+0x31c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4994      	ldr	r1, [pc, #592]	; (8004100 <displayValues+0x314>)
 8003eae:	4892      	ldr	r0, [pc, #584]	; (80040f8 <displayValues+0x30c>)
 8003eb0:	f004 f802 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 8003eb4:	4890      	ldr	r0, [pc, #576]	; (80040f8 <displayValues+0x30c>)
 8003eb6:	f7fc ff7f 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f7fc ff16 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 8003ec2:	4892      	ldr	r0, [pc, #584]	; (800410c <displayValues+0x320>)
 8003ec4:	f7fc ff78 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,11);
 8003ec8:	210b      	movs	r1, #11
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f7fc ff0f 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4888      	ldr	r0, [pc, #544]	; (80040f8 <displayValues+0x30c>)
 8003ed6:	f003 ffe7 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_3_avg);
 8003eda:	4b8d      	ldr	r3, [pc, #564]	; (8004110 <displayValues+0x324>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4987      	ldr	r1, [pc, #540]	; (8004100 <displayValues+0x314>)
 8003ee2:	4885      	ldr	r0, [pc, #532]	; (80040f8 <displayValues+0x30c>)
 8003ee4:	f003 ffe8 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 8003ee8:	4883      	ldr	r0, [pc, #524]	; (80040f8 <displayValues+0x30c>)
 8003eea:	f7fc ff65 	bl	8000db8 <lcd_send_string>
		if(display_scroll==0){//position 1
 8003eee:	e0f1      	b.n	80040d4 <displayValues+0x2e8>
		}else {//position 3
			lcd_send_string("Analog 3:       ");
 8003ef0:	4886      	ldr	r0, [pc, #536]	; (800410c <displayValues+0x320>)
 8003ef2:	f7fc ff61 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003ef6:	210b      	movs	r1, #11
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fc fef8 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003efe:	2210      	movs	r2, #16
 8003f00:	2100      	movs	r1, #0
 8003f02:	487d      	ldr	r0, [pc, #500]	; (80040f8 <displayValues+0x30c>)
 8003f04:	f003 ffd0 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_3_avg);
 8003f08:	4b81      	ldr	r3, [pc, #516]	; (8004110 <displayValues+0x324>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	497c      	ldr	r1, [pc, #496]	; (8004100 <displayValues+0x314>)
 8003f10:	4879      	ldr	r0, [pc, #484]	; (80040f8 <displayValues+0x30c>)
 8003f12:	f003 ffd1 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 8003f16:	4878      	ldr	r0, [pc, #480]	; (80040f8 <displayValues+0x30c>)
 8003f18:	f7fc ff4e 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f7fc fee5 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Analog 1:       ");
 8003f24:	4873      	ldr	r0, [pc, #460]	; (80040f4 <displayValues+0x308>)
 8003f26:	f7fc ff47 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,11);
 8003f2a:	210b      	movs	r1, #11
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	f7fc fede 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003f32:	2210      	movs	r2, #16
 8003f34:	2100      	movs	r1, #0
 8003f36:	4870      	ldr	r0, [pc, #448]	; (80040f8 <displayValues+0x30c>)
 8003f38:	f003 ffb6 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_1_avg);
 8003f3c:	4b6f      	ldr	r3, [pc, #444]	; (80040fc <displayValues+0x310>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	496f      	ldr	r1, [pc, #444]	; (8004100 <displayValues+0x314>)
 8003f44:	486c      	ldr	r0, [pc, #432]	; (80040f8 <displayValues+0x30c>)
 8003f46:	f003 ffb7 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 8003f4a:	486b      	ldr	r0, [pc, #428]	; (80040f8 <displayValues+0x30c>)
 8003f4c:	f7fc ff34 	bl	8000db8 <lcd_send_string>
		if(display_scroll==0){//position 1
 8003f50:	e0c0      	b.n	80040d4 <displayValues+0x2e8>
		}

	}else{//less than 3 are enabled
		if(analog_1_enabled){//display device 1 on first line
 8003f52:	4b64      	ldr	r3, [pc, #400]	; (80040e4 <displayValues+0x2f8>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01d      	beq.n	8003f96 <displayValues+0x1aa>
			lcd_send_string("Analog 1:       ");
 8003f5a:	4866      	ldr	r0, [pc, #408]	; (80040f4 <displayValues+0x308>)
 8003f5c:	f7fc ff2c 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003f60:	210b      	movs	r1, #11
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7fc fec3 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003f68:	2210      	movs	r2, #16
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4862      	ldr	r0, [pc, #392]	; (80040f8 <displayValues+0x30c>)
 8003f6e:	f003 ff9b 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_1_avg);
 8003f72:	4b62      	ldr	r3, [pc, #392]	; (80040fc <displayValues+0x310>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	4961      	ldr	r1, [pc, #388]	; (8004100 <displayValues+0x314>)
 8003f7a:	485f      	ldr	r0, [pc, #380]	; (80040f8 <displayValues+0x30c>)
 8003f7c:	f003 ff9c 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 8003f80:	485d      	ldr	r0, [pc, #372]	; (80040f8 <displayValues+0x30c>)
 8003f82:	f7fc ff19 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003f86:	2100      	movs	r1, #0
 8003f88:	2001      	movs	r0, #1
 8003f8a:	f7fc feb0 	bl	8000cee <lcd_put_cur>
			lcd_send_string("                ");
 8003f8e:	4861      	ldr	r0, [pc, #388]	; (8004114 <displayValues+0x328>)
 8003f90:	f7fc ff12 	bl	8000db8 <lcd_send_string>
 8003f94:	e051      	b.n	800403a <displayValues+0x24e>
		} else if(analog_2_enabled){//display device 2 on first line
 8003f96:	4b54      	ldr	r3, [pc, #336]	; (80040e8 <displayValues+0x2fc>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01d      	beq.n	8003fda <displayValues+0x1ee>
			lcd_send_string("Analog 2:       ");
 8003f9e:	4859      	ldr	r0, [pc, #356]	; (8004104 <displayValues+0x318>)
 8003fa0:	f7fc ff0a 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003fa4:	210b      	movs	r1, #11
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	f7fc fea1 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003fac:	2210      	movs	r2, #16
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4851      	ldr	r0, [pc, #324]	; (80040f8 <displayValues+0x30c>)
 8003fb2:	f003 ff79 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_2_avg);
 8003fb6:	4b54      	ldr	r3, [pc, #336]	; (8004108 <displayValues+0x31c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4950      	ldr	r1, [pc, #320]	; (8004100 <displayValues+0x314>)
 8003fbe:	484e      	ldr	r0, [pc, #312]	; (80040f8 <displayValues+0x30c>)
 8003fc0:	f003 ff7a 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 8003fc4:	484c      	ldr	r0, [pc, #304]	; (80040f8 <displayValues+0x30c>)
 8003fc6:	f7fc fef7 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8003fca:	2100      	movs	r1, #0
 8003fcc:	2001      	movs	r0, #1
 8003fce:	f7fc fe8e 	bl	8000cee <lcd_put_cur>
			lcd_send_string("                ");
 8003fd2:	4850      	ldr	r0, [pc, #320]	; (8004114 <displayValues+0x328>)
 8003fd4:	f7fc fef0 	bl	8000db8 <lcd_send_string>
 8003fd8:	e02f      	b.n	800403a <displayValues+0x24e>
		} else if(analog_3_enabled){//display device 3 on first line
 8003fda:	4b44      	ldr	r3, [pc, #272]	; (80040ec <displayValues+0x300>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01d      	beq.n	800401e <displayValues+0x232>
			lcd_send_string("Analog 3:       ");
 8003fe2:	484a      	ldr	r0, [pc, #296]	; (800410c <displayValues+0x320>)
 8003fe4:	f7fc fee8 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(0,11);
 8003fe8:	210b      	movs	r1, #11
 8003fea:	2000      	movs	r0, #0
 8003fec:	f7fc fe7f 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4840      	ldr	r0, [pc, #256]	; (80040f8 <displayValues+0x30c>)
 8003ff6:	f003 ff57 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_3_avg);
 8003ffa:	4b45      	ldr	r3, [pc, #276]	; (8004110 <displayValues+0x324>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	493f      	ldr	r1, [pc, #252]	; (8004100 <displayValues+0x314>)
 8004002:	483d      	ldr	r0, [pc, #244]	; (80040f8 <displayValues+0x30c>)
 8004004:	f003 ff58 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 8004008:	483b      	ldr	r0, [pc, #236]	; (80040f8 <displayValues+0x30c>)
 800400a:	f7fc fed5 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 800400e:	2100      	movs	r1, #0
 8004010:	2001      	movs	r0, #1
 8004012:	f7fc fe6c 	bl	8000cee <lcd_put_cur>
			lcd_send_string("                ");
 8004016:	483f      	ldr	r0, [pc, #252]	; (8004114 <displayValues+0x328>)
 8004018:	f7fc fece 	bl	8000db8 <lcd_send_string>
 800401c:	e00d      	b.n	800403a <displayValues+0x24e>
		} else{//display no devices enabled
			lcd_send_string("No Devices      ");
 800401e:	483e      	ldr	r0, [pc, #248]	; (8004118 <displayValues+0x32c>)
 8004020:	f7fc feca 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,0);
 8004024:	2100      	movs	r1, #0
 8004026:	2001      	movs	r0, #1
 8004028:	f7fc fe61 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Enabled         ");
 800402c:	483b      	ldr	r0, [pc, #236]	; (800411c <displayValues+0x330>)
 800402e:	f7fc fec3 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,15);
 8004032:	210f      	movs	r1, #15
 8004034:	2001      	movs	r0, #1
 8004036:	f7fc fe5a 	bl	8000cee <lcd_put_cur>
		}

		if(analog_1_enabled&&analog_2_enabled){//display device 2 on second line
 800403a:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <displayValues+0x2f8>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01e      	beq.n	8004080 <displayValues+0x294>
 8004042:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <displayValues+0x2fc>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01a      	beq.n	8004080 <displayValues+0x294>
			lcd_put_cur(1,0);
 800404a:	2100      	movs	r1, #0
 800404c:	2001      	movs	r0, #1
 800404e:	f7fc fe4e 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Analog 2:       ");
 8004052:	482c      	ldr	r0, [pc, #176]	; (8004104 <displayValues+0x318>)
 8004054:	f7fc feb0 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,11);
 8004058:	210b      	movs	r1, #11
 800405a:	2001      	movs	r0, #1
 800405c:	f7fc fe47 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 8004060:	2210      	movs	r2, #16
 8004062:	2100      	movs	r1, #0
 8004064:	4824      	ldr	r0, [pc, #144]	; (80040f8 <displayValues+0x30c>)
 8004066:	f003 ff1f 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_2_avg);
 800406a:	4b27      	ldr	r3, [pc, #156]	; (8004108 <displayValues+0x31c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	4923      	ldr	r1, [pc, #140]	; (8004100 <displayValues+0x314>)
 8004072:	4821      	ldr	r0, [pc, #132]	; (80040f8 <displayValues+0x30c>)
 8004074:	f003 ff20 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 8004078:	481f      	ldr	r0, [pc, #124]	; (80040f8 <displayValues+0x30c>)
 800407a:	f7fc fe9d 	bl	8000db8 <lcd_send_string>
 800407e:	e029      	b.n	80040d4 <displayValues+0x2e8>
		} else if((analog_1_enabled&&analog_3_enabled)||(analog_2_enabled&&analog_3_enabled)){//display device 3 on second line
 8004080:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <displayValues+0x2f8>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <displayValues+0x2a4>
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <displayValues+0x300>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d107      	bne.n	80040a0 <displayValues+0x2b4>
 8004090:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <displayValues+0x2fc>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01d      	beq.n	80040d4 <displayValues+0x2e8>
 8004098:	4b14      	ldr	r3, [pc, #80]	; (80040ec <displayValues+0x300>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d019      	beq.n	80040d4 <displayValues+0x2e8>
			lcd_put_cur(1,0);
 80040a0:	2100      	movs	r1, #0
 80040a2:	2001      	movs	r0, #1
 80040a4:	f7fc fe23 	bl	8000cee <lcd_put_cur>
			lcd_send_string("Analog 3:       ");
 80040a8:	4818      	ldr	r0, [pc, #96]	; (800410c <displayValues+0x320>)
 80040aa:	f7fc fe85 	bl	8000db8 <lcd_send_string>
			lcd_put_cur(1,11);
 80040ae:	210b      	movs	r1, #11
 80040b0:	2001      	movs	r0, #1
 80040b2:	f7fc fe1c 	bl	8000cee <lcd_put_cur>
			memset(char_arr, 0, 16);
 80040b6:	2210      	movs	r2, #16
 80040b8:	2100      	movs	r1, #0
 80040ba:	480f      	ldr	r0, [pc, #60]	; (80040f8 <displayValues+0x30c>)
 80040bc:	f003 fef4 	bl	8007ea8 <memset>
			sprintf(char_arr, "%05d", a_in_3_avg);
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <displayValues+0x324>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	490e      	ldr	r1, [pc, #56]	; (8004100 <displayValues+0x314>)
 80040c8:	480b      	ldr	r0, [pc, #44]	; (80040f8 <displayValues+0x30c>)
 80040ca:	f003 fef5 	bl	8007eb8 <siprintf>
			lcd_send_string(char_arr);
 80040ce:	480a      	ldr	r0, [pc, #40]	; (80040f8 <displayValues+0x30c>)
 80040d0:	f7fc fe72 	bl	8000db8 <lcd_send_string>
		}
	}
	updating_display=0;
 80040d4:	4b02      	ldr	r3, [pc, #8]	; (80040e0 <displayValues+0x2f4>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000234 	.word	0x20000234
 80040e4:	20000002 	.word	0x20000002
 80040e8:	20000003 	.word	0x20000003
 80040ec:	20000004 	.word	0x20000004
 80040f0:	2000022a 	.word	0x2000022a
 80040f4:	08009c78 	.word	0x08009c78
 80040f8:	20006460 	.word	0x20006460
 80040fc:	20006470 	.word	0x20006470
 8004100:	08009b9c 	.word	0x08009b9c
 8004104:	08009c8c 	.word	0x08009c8c
 8004108:	200022c8 	.word	0x200022c8
 800410c:	08009ca0 	.word	0x08009ca0
 8004110:	20006458 	.word	0x20006458
 8004114:	08009cb4 	.word	0x08009cb4
 8004118:	08009cc8 	.word	0x08009cc8
 800411c:	08009cdc 	.word	0x08009cdc

08004120 <bytesToWord>:


//convert a 4 byte array to a word (unsigned long int)
uint32_t bytesToWord(uint8_t* arr) {
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	uint32_t value = arr[0] & 0xFF;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]
	value |= (arr[1] << 8) & 0xFFFF;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3301      	adds	r3, #1
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	b29b      	uxth	r3, r3
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
	value |= (arr[2] << 16) & 0xFFFFFF;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3302      	adds	r3, #2
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
	value |= (arr[3] << 24) & 0xFFFFFFFF;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3303      	adds	r3, #3
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	061b      	lsls	r3, r3, #24
 8004158:	461a      	mov	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
	return value;
 8004160:	68fb      	ldr	r3, [r7, #12]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <wordToBytes>:

//convert a word (unsigned long int) to a 4 byte array
uint8_t* wordToBytes(uint32_t value){
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	byte_arr[3] = (value >> 24) & 0xFF;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	0e1b      	lsrs	r3, r3, #24
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <wordToBytes+0x3c>)
 8004180:	70da      	strb	r2, [r3, #3]
	byte_arr[2] = (value >> 16) & 0xFF;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	b2da      	uxtb	r2, r3
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <wordToBytes+0x3c>)
 800418a:	709a      	strb	r2, [r3, #2]
	byte_arr[1] = (value >> 8) & 0xFF;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <wordToBytes+0x3c>)
 8004194:	705a      	strb	r2, [r3, #1]
	byte_arr[0] = value & 0xFF;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	4b04      	ldr	r3, [pc, #16]	; (80041ac <wordToBytes+0x3c>)
 800419c:	701a      	strb	r2, [r3, #0]
	return byte_arr;
 800419e:	4b03      	ldr	r3, [pc, #12]	; (80041ac <wordToBytes+0x3c>)
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	200064b8 	.word	0x200064b8

080041b0 <calibrateSDADC>:

//calibrate the given sdadc for the given channel
void calibrateSDADC(SDADC_HandleTypeDef* adc, uint32_t channel){
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
	//Display Calibrating
	lcd_put_cur(0,0);
 80041ba:	2100      	movs	r1, #0
 80041bc:	2000      	movs	r0, #0
 80041be:	f7fc fd96 	bl	8000cee <lcd_put_cur>
	lcd_send_string("Calibrating ADC ");
 80041c2:	482b      	ldr	r0, [pc, #172]	; (8004270 <calibrateSDADC+0xc0>)
 80041c4:	f7fc fdf8 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(1,0);
 80041c8:	2100      	movs	r1, #0
 80041ca:	2001      	movs	r0, #1
 80041cc:	f7fc fd8f 	bl	8000cee <lcd_put_cur>
	lcd_send_string("                ");
 80041d0:	4828      	ldr	r0, [pc, #160]	; (8004274 <calibrateSDADC+0xc4>)
 80041d2:	f7fc fdf1 	bl	8000db8 <lcd_send_string>

	//Run Calibration Sequence
	HAL_SDADC_AssociateChannelConfig(adc, channel, SDADC_CONF_INDEX_0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f002 fed0 	bl	8006f80 <HAL_SDADC_AssociateChannelConfig>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_OFF);
 80041e0:	2200      	movs	r2, #0
 80041e2:	6839      	ldr	r1, [r7, #0]
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f002 ff1b 	bl	8007020 <HAL_SDADC_ConfigChannel>
	HAL_SDADC_CalibrationStart(adc, SDADC_CALIBRATION_SEQ_1);
 80041ea:	2100      	movs	r1, #0
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f002 ff5b 	bl	80070a8 <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(adc, HAL_MAX_DELAY);
 80041f2:	f04f 31ff 	mov.w	r1, #4294967295
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f002 ff96 	bl	8007128 <HAL_SDADC_PollForCalibEvent>
	HAL_SDADC_ConfigChannel(adc, channel, SDADC_CONTINUOUS_CONV_ON);
 80041fc:	2201      	movs	r2, #1
 80041fe:	6839      	ldr	r1, [r7, #0]
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f002 ff0d 	bl	8007020 <HAL_SDADC_ConfigChannel>

	//Display Menu
	lcd_put_cur(0,0);
 8004206:	2100      	movs	r1, #0
 8004208:	2000      	movs	r0, #0
 800420a:	f7fc fd70 	bl	8000cee <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos],16));
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <calibrateSDADC+0xc8>)
 8004210:	f993 3000 	ldrsb.w	r3, [r3]
 8004214:	461a      	mov	r2, r3
 8004216:	4613      	mov	r3, r2
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	4413      	add	r3, r2
 800421c:	4a17      	ldr	r2, [pc, #92]	; (800427c <calibrateSDADC+0xcc>)
 800421e:	4413      	add	r3, r2
 8004220:	2210      	movs	r2, #16
 8004222:	4619      	mov	r1, r3
 8004224:	4816      	ldr	r0, [pc, #88]	; (8004280 <calibrateSDADC+0xd0>)
 8004226:	f003 feae 	bl	8007f86 <strncpy>
 800422a:	4603      	mov	r3, r0
 800422c:	4618      	mov	r0, r3
 800422e:	f7fc fdc3 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(1,0);
 8004232:	2100      	movs	r1, #0
 8004234:	2001      	movs	r0, #1
 8004236:	f7fc fd5a 	bl	8000cee <lcd_put_cur>
	lcd_send_string(strncpy(temp,main_menu[menu_pos+1],16));
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <calibrateSDADC+0xc8>)
 800423c:	f993 3000 	ldrsb.w	r3, [r3]
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	4613      	mov	r3, r2
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	4413      	add	r3, r2
 8004248:	4a0c      	ldr	r2, [pc, #48]	; (800427c <calibrateSDADC+0xcc>)
 800424a:	4413      	add	r3, r2
 800424c:	2210      	movs	r2, #16
 800424e:	4619      	mov	r1, r3
 8004250:	480b      	ldr	r0, [pc, #44]	; (8004280 <calibrateSDADC+0xd0>)
 8004252:	f003 fe98 	bl	8007f86 <strncpy>
 8004256:	4603      	mov	r3, r0
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc fdad 	bl	8000db8 <lcd_send_string>
	lcd_put_cur(0,0);
 800425e:	2100      	movs	r1, #0
 8004260:	2000      	movs	r0, #0
 8004262:	f7fc fd44 	bl	8000cee <lcd_put_cur>
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	08009cf0 	.word	0x08009cf0
 8004274:	08009cb4 	.word	0x08009cb4
 8004278:	2000022b 	.word	0x2000022b
 800427c:	20000018 	.word	0x20000018
 8004280:	200022b4 	.word	0x200022b4

08004284 <storeInFlash>:

//store all saved values in flash memory
void storeInFlash(void){
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
	//Unlock the Flash Program Erase controller
	HAL_FLASH_Unlock();
 800428a:	f001 f80b 	bl	80052a4 <HAL_FLASH_Unlock>

	//Erase page
	FLASH_EraseInitTypeDef eraseParams;
	eraseParams.TypeErase = FLASH_TYPEERASE_PAGES;
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
	eraseParams.PageAddress = 0x0800F800;
 8004292:	4b3e      	ldr	r3, [pc, #248]	; (800438c <storeInFlash+0x108>)
 8004294:	60bb      	str	r3, [r7, #8]
	eraseParams.NbPages=1;
 8004296:	2301      	movs	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
	uint32_t eraseError=0;
 800429a:	2300      	movs	r3, #0
 800429c:	603b      	str	r3, [r7, #0]
	HAL_FLASHEx_Erase(&eraseParams, &eraseError);
 800429e:	463a      	mov	r2, r7
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f001 f8c1 	bl	800542c <HAL_FLASHEx_Erase>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80042aa:	f04f 30ff 	mov.w	r0, #4294967295
 80042ae:	f001 f84b 	bl	8005348 <FLASH_WaitForLastOperation>

	//Store values
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F800, bytesToWord(id_arr));//store can ids
 80042b2:	4837      	ldr	r0, [pc, #220]	; (8004390 <storeInFlash+0x10c>)
 80042b4:	f7ff ff34 	bl	8004120 <bytesToWord>
 80042b8:	4603      	mov	r3, r0
 80042ba:	461a      	mov	r2, r3
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	4932      	ldr	r1, [pc, #200]	; (800438c <storeInFlash+0x108>)
 80042c2:	2002      	movs	r0, #2
 80042c4:	f000 ff7e 	bl	80051c4 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80042c8:	f04f 30ff 	mov.w	r0, #4294967295
 80042cc:	f001 f83c 	bl	8005348 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F804, (uint32_t)baud_pos); //store baud rate
 80042d0:	4b30      	ldr	r3, [pc, #192]	; (8004394 <storeInFlash+0x110>)
 80042d2:	f993 3000 	ldrsb.w	r3, [r3]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	492e      	ldr	r1, [pc, #184]	; (8004398 <storeInFlash+0x114>)
 80042de:	2002      	movs	r0, #2
 80042e0:	f000 ff70 	bl	80051c4 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80042e4:	f04f 30ff 	mov.w	r0, #4294967295
 80042e8:	f001 f82e 	bl	8005348 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F808, (uint32_t)sample_rate); // store number of delays
 80042ec:	4b2b      	ldr	r3, [pc, #172]	; (800439c <storeInFlash+0x118>)
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	492a      	ldr	r1, [pc, #168]	; (80043a0 <storeInFlash+0x11c>)
 80042f8:	2002      	movs	r0, #2
 80042fa:	f000 ff63 	bl	80051c4 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80042fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004302:	f001 f821 	bl	8005348 <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F80C, bytesToWord(analog_enable_arr)); // store device enable bools
 8004306:	4827      	ldr	r0, [pc, #156]	; (80043a4 <storeInFlash+0x120>)
 8004308:	f7ff ff0a 	bl	8004120 <bytesToWord>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	4924      	ldr	r1, [pc, #144]	; (80043a8 <storeInFlash+0x124>)
 8004316:	2002      	movs	r0, #2
 8004318:	f000 ff54 	bl	80051c4 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	f001 f812 	bl	8005348 <FLASH_WaitForLastOperation>
	if(store_offsets){
 8004324:	4b21      	ldr	r3, [pc, #132]	; (80043ac <storeInFlash+0x128>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d029      	beq.n	8004380 <storeInFlash+0xfc>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F810, analog_1_offset); // store analog 1 offset
 800432c:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <storeInFlash+0x12c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	491f      	ldr	r1, [pc, #124]	; (80043b4 <storeInFlash+0x130>)
 8004338:	2002      	movs	r0, #2
 800433a:	f000 ff43 	bl	80051c4 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800433e:	f04f 30ff 	mov.w	r0, #4294967295
 8004342:	f001 f801 	bl	8005348 <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F814, analog_2_offset); // store analog 2 offset
 8004346:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <storeInFlash+0x134>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	491a      	ldr	r1, [pc, #104]	; (80043bc <storeInFlash+0x138>)
 8004352:	2002      	movs	r0, #2
 8004354:	f000 ff36 	bl	80051c4 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	f000 fff4 	bl	8005348 <FLASH_WaitForLastOperation>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x0800F818, analog_3_offset); // store analog 3 offset
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <storeInFlash+0x13c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	4916      	ldr	r1, [pc, #88]	; (80043c4 <storeInFlash+0x140>)
 800436c:	2002      	movs	r0, #2
 800436e:	f000 ff29 	bl	80051c4 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8004372:	f04f 30ff 	mov.w	r0, #4294967295
 8004376:	f000 ffe7 	bl	8005348 <FLASH_WaitForLastOperation>
		store_offsets=0;
 800437a:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <storeInFlash+0x128>)
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
	}


	//Lock the Flash Program Erase controller
	HAL_FLASH_Lock();
 8004380:	f000 ffb6 	bl	80052f0 <HAL_FLASH_Lock>
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	0800f800 	.word	0x0800f800
 8004390:	20000250 	.word	0x20000250
 8004394:	2000016f 	.word	0x2000016f
 8004398:	0800f804 	.word	0x0800f804
 800439c:	20000172 	.word	0x20000172
 80043a0:	0800f808 	.word	0x0800f808
 80043a4:	200063a8 	.word	0x200063a8
 80043a8:	0800f80c 	.word	0x0800f80c
 80043ac:	20000218 	.word	0x20000218
 80043b0:	2000020c 	.word	0x2000020c
 80043b4:	0800f810 	.word	0x0800f810
 80043b8:	20000210 	.word	0x20000210
 80043bc:	0800f814 	.word	0x0800f814
 80043c0:	20000214 	.word	0x20000214
 80043c4:	0800f818 	.word	0x0800f818

080043c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043cc:	b672      	cpsid	i
}
 80043ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80043d0:	e7fe      	b.n	80043d0 <Error_Handler+0x8>
	...

080043d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043da:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <HAL_MspInit+0x44>)
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <HAL_MspInit+0x44>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	6193      	str	r3, [r2, #24]
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <HAL_MspInit+0x44>)
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_MspInit+0x44>)
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	4a08      	ldr	r2, [pc, #32]	; (8004418 <HAL_MspInit+0x44>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fc:	61d3      	str	r3, [r2, #28]
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_MspInit+0x44>)
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000

0800441c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004424:	f107 0314 	add.w	r3, r7, #20
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	60da      	str	r2, [r3, #12]
 8004432:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a18      	ldr	r2, [pc, #96]	; (800449c <HAL_CAN_MspInit+0x80>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d129      	bne.n	8004492 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800443e:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <HAL_CAN_MspInit+0x84>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <HAL_CAN_MspInit+0x84>)
 8004444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004448:	61d3      	str	r3, [r2, #28]
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <HAL_CAN_MspInit+0x84>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <HAL_CAN_MspInit+0x84>)
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <HAL_CAN_MspInit+0x84>)
 800445c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004460:	6153      	str	r3, [r2, #20]
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <HAL_CAN_MspInit+0x84>)
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800446e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004474:	2302      	movs	r3, #2
 8004476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800447c:	2303      	movs	r3, #3
 800447e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8004480:	2309      	movs	r3, #9
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004484:	f107 0314 	add.w	r3, r7, #20
 8004488:	4619      	mov	r1, r3
 800448a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800448e:	f001 f871 	bl	8005574 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8004492:	bf00      	nop
 8004494:	3728      	adds	r7, #40	; 0x28
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40006400 	.word	0x40006400
 80044a0:	40021000 	.word	0x40021000

080044a4 <HAL_SDADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hsdadc: SDADC handle pointer
* @retval None
*/
void HAL_SDADC_MspInit(SDADC_HandleTypeDef* hsdadc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08e      	sub	sp, #56	; 0x38
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	611a      	str	r2, [r3, #16]
  if(hsdadc->Instance==SDADC1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a4c      	ldr	r2, [pc, #304]	; (80045f4 <HAL_SDADC_MspInit+0x150>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d12d      	bne.n	8004522 <HAL_SDADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 80044c6:	4b4c      	ldr	r3, [pc, #304]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	4a4b      	ldr	r2, [pc, #300]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 80044cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d0:	6193      	str	r3, [r2, #24]
 80044d2:	4b49      	ldr	r3, [pc, #292]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044de:	4b46      	ldr	r3, [pc, #280]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4a45      	ldr	r2, [pc, #276]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 80044e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044e8:	6153      	str	r3, [r2, #20]
 80044ea:	4b43      	ldr	r3, [pc, #268]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	69fb      	ldr	r3, [r7, #28]
    /**SDADC1 GPIO Configuration
    PE8     ------> SDADC1_AIN8P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044fc:	2303      	movs	r3, #3
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004500:	2300      	movs	r3, #0
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004508:	4619      	mov	r1, r3
 800450a:	483c      	ldr	r0, [pc, #240]	; (80045fc <HAL_SDADC_MspInit+0x158>)
 800450c:	f001 f832 	bl	8005574 <HAL_GPIO_Init>

    /* SDADC1 interrupt Init */
    HAL_NVIC_SetPriority(SDADC1_IRQn, 2, 0);
 8004510:	2200      	movs	r2, #0
 8004512:	2102      	movs	r1, #2
 8004514:	203d      	movs	r0, #61	; 0x3d
 8004516:	f000 fe1e 	bl	8005156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 800451a:	203d      	movs	r0, #61	; 0x3d
 800451c:	f000 fe37 	bl	800518e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDADC3_MspInit 1 */

  /* USER CODE END SDADC3_MspInit 1 */
  }

}
 8004520:	e064      	b.n	80045ec <HAL_SDADC_MspInit+0x148>
  else if(hsdadc->Instance==SDADC2)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a36      	ldr	r2, [pc, #216]	; (8004600 <HAL_SDADC_MspInit+0x15c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d12d      	bne.n	8004588 <HAL_SDADC_MspInit+0xe4>
    __HAL_RCC_SDADC2_CLK_ENABLE();
 800452c:	4b32      	ldr	r3, [pc, #200]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	4a31      	ldr	r2, [pc, #196]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 8004532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004536:	6193      	str	r3, [r2, #24]
 8004538:	4b2f      	ldr	r3, [pc, #188]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004544:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	4a2b      	ldr	r2, [pc, #172]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 800454a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800454e:	6153      	str	r3, [r2, #20]
 8004550:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800455c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004562:	2303      	movs	r3, #3
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800456a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800456e:	4619      	mov	r1, r3
 8004570:	4822      	ldr	r0, [pc, #136]	; (80045fc <HAL_SDADC_MspInit+0x158>)
 8004572:	f000 ffff 	bl	8005574 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC2_IRQn, 2, 0);
 8004576:	2200      	movs	r2, #0
 8004578:	2102      	movs	r1, #2
 800457a:	203e      	movs	r0, #62	; 0x3e
 800457c:	f000 fdeb 	bl	8005156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC2_IRQn);
 8004580:	203e      	movs	r0, #62	; 0x3e
 8004582:	f000 fe04 	bl	800518e <HAL_NVIC_EnableIRQ>
}
 8004586:	e031      	b.n	80045ec <HAL_SDADC_MspInit+0x148>
  else if(hsdadc->Instance==SDADC3)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <HAL_SDADC_MspInit+0x160>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d12c      	bne.n	80045ec <HAL_SDADC_MspInit+0x148>
    __HAL_RCC_SDADC3_CLK_ENABLE();
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 8004598:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800459c:	6193      	str	r3, [r2, #24]
 800459e:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045aa:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	4a12      	ldr	r2, [pc, #72]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 80045b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b4:	6153      	str	r3, [r2, #20]
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <HAL_SDADC_MspInit+0x154>)
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80045c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045c8:	2303      	movs	r3, #3
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045d4:	4619      	mov	r1, r3
 80045d6:	480c      	ldr	r0, [pc, #48]	; (8004608 <HAL_SDADC_MspInit+0x164>)
 80045d8:	f000 ffcc 	bl	8005574 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC3_IRQn, 2, 0);
 80045dc:	2200      	movs	r2, #0
 80045de:	2102      	movs	r1, #2
 80045e0:	203f      	movs	r0, #63	; 0x3f
 80045e2:	f000 fdb8 	bl	8005156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC3_IRQn);
 80045e6:	203f      	movs	r0, #63	; 0x3f
 80045e8:	f000 fdd1 	bl	800518e <HAL_NVIC_EnableIRQ>
}
 80045ec:	bf00      	nop
 80045ee:	3738      	adds	r7, #56	; 0x38
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40016000 	.word	0x40016000
 80045f8:	40021000 	.word	0x40021000
 80045fc:	48001000 	.word	0x48001000
 8004600:	40016400 	.word	0x40016400
 8004604:	40016800 	.word	0x40016800
 8004608:	48000400 	.word	0x48000400

0800460c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461c:	d10c      	bne.n	8004638 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <HAL_TIM_Base_MspInit+0x68>)
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	4a14      	ldr	r2, [pc, #80]	; (8004674 <HAL_TIM_Base_MspInit+0x68>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	61d3      	str	r3, [r2, #28]
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <HAL_TIM_Base_MspInit+0x68>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004636:	e018      	b.n	800466a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <HAL_TIM_Base_MspInit+0x6c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d113      	bne.n	800466a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <HAL_TIM_Base_MspInit+0x68>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	4a0b      	ldr	r2, [pc, #44]	; (8004674 <HAL_TIM_Base_MspInit+0x68>)
 8004648:	f043 0302 	orr.w	r3, r3, #2
 800464c:	61d3      	str	r3, [r2, #28]
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_TIM_Base_MspInit+0x68>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800465a:	2200      	movs	r2, #0
 800465c:	2100      	movs	r1, #0
 800465e:	201d      	movs	r0, #29
 8004660:	f000 fd79 	bl	8005156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004664:	201d      	movs	r0, #29
 8004666:	f000 fd92 	bl	800518e <HAL_NVIC_EnableIRQ>
}
 800466a:	bf00      	nop
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	40000400 	.word	0x40000400

0800467c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004680:	e7fe      	b.n	8004680 <NMI_Handler+0x4>

08004682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004686:	e7fe      	b.n	8004686 <HardFault_Handler+0x4>

08004688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800468c:	e7fe      	b.n	800468c <MemManage_Handler+0x4>

0800468e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004692:	e7fe      	b.n	8004692 <BusFault_Handler+0x4>

08004694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004698:	e7fe      	b.n	8004698 <UsageFault_Handler+0x4>

0800469a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046b6:	b480      	push	{r7}
 80046b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046c8:	f000 f8f8 	bl	80048bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046cc:	bf00      	nop
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80046d4:	2001      	movs	r0, #1
 80046d6:	f001 f8f7 	bl	80058c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}

080046de <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80046e2:	2002      	movs	r0, #2
 80046e4:	f001 f8f0 	bl	80058c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80046e8:	bf00      	nop
 80046ea:	bd80      	pop	{r7, pc}

080046ec <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt and touch sense controller interrupt.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80046f0:	2004      	movs	r0, #4
 80046f2:	f001 f8e9 	bl	80058c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004700:	4802      	ldr	r0, [pc, #8]	; (800470c <TIM3_IRQHandler+0x10>)
 8004702:	f002 fff7 	bl	80076f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004706:	bf00      	nop
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	200022d0 	.word	0x200022d0

08004710 <SDADC1_IRQHandler>:

/**
  * @brief This function handles SDADC1 global interrupt.
  */
void SDADC1_IRQHandler(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC1_IRQn 0 */

  /* USER CODE END SDADC1_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc1);
 8004714:	4802      	ldr	r0, [pc, #8]	; (8004720 <SDADC1_IRQHandler+0x10>)
 8004716:	f002 fd70 	bl	80071fa <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC1_IRQn 1 */

  /* USER CODE END SDADC1_IRQn 1 */
}
 800471a:	bf00      	nop
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20004350 	.word	0x20004350

08004724 <SDADC2_IRQHandler>:

/**
  * @brief This function handles SDADC2 global interrupt.
  */
void SDADC2_IRQHandler(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC2_IRQn 0 */

  /* USER CODE END SDADC2_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc2);
 8004728:	4802      	ldr	r0, [pc, #8]	; (8004734 <SDADC2_IRQHandler+0x10>)
 800472a:	f002 fd66 	bl	80071fa <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC2_IRQn 1 */

  /* USER CODE END SDADC2_IRQn 1 */
}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	200063ac 	.word	0x200063ac

08004738 <SDADC3_IRQHandler>:

/**
  * @brief This function handles SDADC3 global interrupt.
  */
void SDADC3_IRQHandler(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC3_IRQn 0 */

  /* USER CODE END SDADC3_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc3);
 800473c:	4802      	ldr	r0, [pc, #8]	; (8004748 <SDADC3_IRQHandler+0x10>)
 800473e:	f002 fd5c 	bl	80071fa <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC3_IRQn 1 */

  /* USER CODE END SDADC3_IRQn 1 */
}
 8004742:	bf00      	nop
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20006474 	.word	0x20006474

0800474c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004754:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <_sbrk+0x5c>)
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <_sbrk+0x60>)
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004760:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <_sbrk+0x64>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004768:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <_sbrk+0x64>)
 800476a:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <_sbrk+0x68>)
 800476c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <_sbrk+0x64>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4413      	add	r3, r2
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	429a      	cmp	r2, r3
 800477a:	d207      	bcs.n	800478c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800477c:	f003 fb6a 	bl	8007e54 <__errno>
 8004780:	4603      	mov	r3, r0
 8004782:	220c      	movs	r2, #12
 8004784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004786:	f04f 33ff 	mov.w	r3, #4294967295
 800478a:	e009      	b.n	80047a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <_sbrk+0x64>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <_sbrk+0x64>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <_sbrk+0x64>)
 800479c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800479e:	68fb      	ldr	r3, [r7, #12]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20008000 	.word	0x20008000
 80047ac:	00000400 	.word	0x00000400
 80047b0:	20000238 	.word	0x20000238
 80047b4:	200064f0 	.word	0x200064f0

080047b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <SystemInit+0x20>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	4a05      	ldr	r2, [pc, #20]	; (80047d8 <SystemInit+0x20>)
 80047c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80047dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004814 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047e0:	480d      	ldr	r0, [pc, #52]	; (8004818 <LoopForever+0x6>)
  ldr r1, =_edata
 80047e2:	490e      	ldr	r1, [pc, #56]	; (800481c <LoopForever+0xa>)
  ldr r2, =_sidata
 80047e4:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <LoopForever+0xe>)
  movs r3, #0
 80047e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047e8:	e002      	b.n	80047f0 <LoopCopyDataInit>

080047ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ee:	3304      	adds	r3, #4

080047f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047f4:	d3f9      	bcc.n	80047ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047f6:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047f8:	4c0b      	ldr	r4, [pc, #44]	; (8004828 <LoopForever+0x16>)
  movs r3, #0
 80047fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047fc:	e001      	b.n	8004802 <LoopFillZerobss>

080047fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004800:	3204      	adds	r2, #4

08004802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004804:	d3fb      	bcc.n	80047fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004806:	f7ff ffd7 	bl	80047b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800480a:	f003 fb29 	bl	8007e60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800480e:	f7fc faeb 	bl	8000de8 <main>

08004812 <LoopForever>:

LoopForever:
    b LoopForever
 8004812:	e7fe      	b.n	8004812 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004814:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800481c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004820:	08009dc0 	.word	0x08009dc0
  ldr r2, =_sbss
 8004824:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004828:	200064f0 	.word	0x200064f0

0800482c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800482c:	e7fe      	b.n	800482c <ADC1_IRQHandler>
	...

08004830 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <HAL_Init+0x28>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a07      	ldr	r2, [pc, #28]	; (8004858 <HAL_Init+0x28>)
 800483a:	f043 0310 	orr.w	r3, r3, #16
 800483e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004840:	2003      	movs	r0, #3
 8004842:	f000 fc7d 	bl	8005140 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004846:	2000      	movs	r0, #0
 8004848:	f000 f808 	bl	800485c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800484c:	f7ff fdc2 	bl	80043d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40022000 	.word	0x40022000

0800485c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004864:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_InitTick+0x54>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <HAL_InitTick+0x58>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	4619      	mov	r1, r3
 800486e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004872:	fbb3 f3f1 	udiv	r3, r3, r1
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fc95 	bl	80051aa <HAL_SYSTICK_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e00e      	b.n	80048a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b0f      	cmp	r3, #15
 800488e:	d80a      	bhi.n	80048a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004890:	2200      	movs	r2, #0
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	f000 fc5d 	bl	8005156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800489c:	4a06      	ldr	r2, [pc, #24]	; (80048b8 <HAL_InitTick+0x5c>)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e000      	b.n	80048a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000178 	.word	0x20000178
 80048b4:	20000180 	.word	0x20000180
 80048b8:	2000017c 	.word	0x2000017c

080048bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048c0:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_IncTick+0x20>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_IncTick+0x24>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4413      	add	r3, r2
 80048cc:	4a04      	ldr	r2, [pc, #16]	; (80048e0 <HAL_IncTick+0x24>)
 80048ce:	6013      	str	r3, [r2, #0]
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000180 	.word	0x20000180
 80048e0:	200064bc 	.word	0x200064bc

080048e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80048e8:	4b03      	ldr	r3, [pc, #12]	; (80048f8 <HAL_GetTick+0x14>)
 80048ea:	681b      	ldr	r3, [r3, #0]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	200064bc 	.word	0x200064bc

080048fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004904:	f7ff ffee 	bl	80048e4 <HAL_GetTick>
 8004908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d005      	beq.n	8004922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <HAL_Delay+0x44>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004922:	bf00      	nop
 8004924:	f7ff ffde 	bl	80048e4 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	429a      	cmp	r2, r3
 8004932:	d8f7      	bhi.n	8004924 <HAL_Delay+0x28>
  {
  }
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000180 	.word	0x20000180

08004944 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e0ed      	b.n	8004b32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff fd5a 	bl	800441c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0202 	bic.w	r2, r2, #2
 8004976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004978:	f7ff ffb4 	bl	80048e4 <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800497e:	e012      	b.n	80049a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004980:	f7ff ffb0 	bl	80048e4 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b0a      	cmp	r3, #10
 800498c:	d90b      	bls.n	80049a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2205      	movs	r2, #5
 800499e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e0c5      	b.n	8004b32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e5      	bne.n	8004980 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049c4:	f7ff ff8e 	bl	80048e4 <HAL_GetTick>
 80049c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049ca:	e012      	b.n	80049f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049cc:	f7ff ff8a 	bl	80048e4 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b0a      	cmp	r3, #10
 80049d8:	d90b      	bls.n	80049f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2205      	movs	r2, #5
 80049ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e09f      	b.n	8004b32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0e5      	beq.n	80049cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	7e1b      	ldrb	r3, [r3, #24]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d108      	bne.n	8004a1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	e007      	b.n	8004a2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	7e5b      	ldrb	r3, [r3, #25]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d108      	bne.n	8004a44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e007      	b.n	8004a54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7e9b      	ldrb	r3, [r3, #26]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d108      	bne.n	8004a6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0220 	orr.w	r2, r2, #32
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e007      	b.n	8004a7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0220 	bic.w	r2, r2, #32
 8004a7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	7edb      	ldrb	r3, [r3, #27]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d108      	bne.n	8004a98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0210 	bic.w	r2, r2, #16
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e007      	b.n	8004aa8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0210 	orr.w	r2, r2, #16
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7f1b      	ldrb	r3, [r3, #28]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d108      	bne.n	8004ac2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0208 	orr.w	r2, r2, #8
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e007      	b.n	8004ad2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0208 	bic.w	r2, r2, #8
 8004ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	7f5b      	ldrb	r3, [r3, #29]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d108      	bne.n	8004aec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0204 	orr.w	r2, r2, #4
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	e007      	b.n	8004afc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0204 	bic.w	r2, r2, #4
 8004afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	ea42 0103 	orr.w	r1, r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	1e5a      	subs	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b087      	sub	sp, #28
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b50:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d003      	beq.n	8004b60 <HAL_CAN_ConfigFilter+0x26>
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	f040 80aa 	bne.w	8004cb4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b66:	f043 0201 	orr.w	r2, r3, #1
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	2201      	movs	r2, #1
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d123      	bne.n	8004be2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	401a      	ands	r2, r3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004bbc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	3248      	adds	r2, #72	; 0x48
 8004bc2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004bd6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004bd8:	6979      	ldr	r1, [r7, #20]
 8004bda:	3348      	adds	r3, #72	; 0x48
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	440b      	add	r3, r1
 8004be0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d122      	bne.n	8004c30 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c0a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3248      	adds	r2, #72	; 0x48
 8004c10:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c24:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c26:	6979      	ldr	r1, [r7, #20]
 8004c28:	3348      	adds	r3, #72	; 0x48
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	440b      	add	r3, r1
 8004c2e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d109      	bne.n	8004c4c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	401a      	ands	r2, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004c4a:	e007      	b.n	8004c5c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	401a      	ands	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004c76:	e007      	b.n	8004c88 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ca6:	f023 0201 	bic.w	r2, r3, #1
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e006      	b.n	8004cc2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d12e      	bne.n	8004d40 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cfa:	f7ff fdf3 	bl	80048e4 <HAL_GetTick>
 8004cfe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d00:	e012      	b.n	8004d28 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d02:	f7ff fdef 	bl	80048e4 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b0a      	cmp	r3, #10
 8004d0e:	d90b      	bls.n	8004d28 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2205      	movs	r2, #5
 8004d20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e012      	b.n	8004d4e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e006      	b.n	8004d4e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d133      	bne.n	8004dd2 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0201 	orr.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d7a:	f7ff fdb3 	bl	80048e4 <HAL_GetTick>
 8004d7e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d80:	e012      	b.n	8004da8 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d82:	f7ff fdaf 	bl	80048e4 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b0a      	cmp	r3, #10
 8004d8e:	d90b      	bls.n	8004da8 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2205      	movs	r2, #5
 8004da0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e01b      	b.n	8004de0 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0e5      	beq.n	8004d82 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0202 	bic.w	r2, r2, #2
 8004dc4:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e006      	b.n	8004de0 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
  }
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b089      	sub	sp, #36	; 0x24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dfc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e06:	7ffb      	ldrb	r3, [r7, #31]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d003      	beq.n	8004e14 <HAL_CAN_AddTxMessage+0x2c>
 8004e0c:	7ffb      	ldrb	r3, [r7, #31]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	f040 80b8 	bne.w	8004f84 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 80a0 	beq.w	8004f74 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	0e1b      	lsrs	r3, r3, #24
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d907      	bls.n	8004e54 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e09e      	b.n	8004f92 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e54:	2201      	movs	r2, #1
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10d      	bne.n	8004e82 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	6809      	ldr	r1, [r1, #0]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	3318      	adds	r3, #24
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	440b      	add	r3, r1
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e00f      	b.n	8004ea2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004e96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	440b      	add	r3, r1
 8004ea0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	3318      	adds	r3, #24
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	7d1b      	ldrb	r3, [r3, #20]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d111      	bne.n	8004ee2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	3318      	adds	r3, #24
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	4413      	add	r3, r2
 8004eca:	3304      	adds	r3, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	6811      	ldr	r1, [r2, #0]
 8004ed2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	3318      	adds	r3, #24
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	440b      	add	r3, r1
 8004ede:	3304      	adds	r3, #4
 8004ee0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3307      	adds	r3, #7
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	061a      	lsls	r2, r3, #24
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3306      	adds	r3, #6
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3305      	adds	r3, #5
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	4313      	orrs	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	3204      	adds	r2, #4
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	4610      	mov	r0, r2
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	6811      	ldr	r1, [r2, #0]
 8004f0a:	ea43 0200 	orr.w	r2, r3, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	440b      	add	r3, r1
 8004f14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004f18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3303      	adds	r3, #3
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	061a      	lsls	r2, r3, #24
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3302      	adds	r3, #2
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	041b      	lsls	r3, r3, #16
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	4313      	orrs	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	7812      	ldrb	r2, [r2, #0]
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	6811      	ldr	r1, [r2, #0]
 8004f40:	ea43 0200 	orr.w	r2, r3, r0
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	440b      	add	r3, r1
 8004f4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004f4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	3318      	adds	r3, #24
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	4413      	add	r3, r2
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	6811      	ldr	r1, [r2, #0]
 8004f62:	f043 0201 	orr.w	r2, r3, #1
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	3318      	adds	r3, #24
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	440b      	add	r3, r1
 8004f6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	e00e      	b.n	8004f92 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e006      	b.n	8004f92 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3724      	adds	r7, #36	; 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fd2:	4a04      	ldr	r2, [pc, #16]	; (8004fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	60d3      	str	r3, [r2, #12]
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	e000ed00 	.word	0xe000ed00

08004fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fec:	4b04      	ldr	r3, [pc, #16]	; (8005000 <__NVIC_GetPriorityGrouping+0x18>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	0a1b      	lsrs	r3, r3, #8
 8004ff2:	f003 0307 	and.w	r3, r3, #7
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	e000ed00 	.word	0xe000ed00

08005004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800500e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005012:	2b00      	cmp	r3, #0
 8005014:	db0b      	blt.n	800502e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	f003 021f 	and.w	r2, r3, #31
 800501c:	4907      	ldr	r1, [pc, #28]	; (800503c <__NVIC_EnableIRQ+0x38>)
 800501e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	2001      	movs	r0, #1
 8005026:	fa00 f202 	lsl.w	r2, r0, r2
 800502a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	e000e100 	.word	0xe000e100

08005040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	6039      	str	r1, [r7, #0]
 800504a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800504c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005050:	2b00      	cmp	r3, #0
 8005052:	db0a      	blt.n	800506a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	b2da      	uxtb	r2, r3
 8005058:	490c      	ldr	r1, [pc, #48]	; (800508c <__NVIC_SetPriority+0x4c>)
 800505a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505e:	0112      	lsls	r2, r2, #4
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	440b      	add	r3, r1
 8005064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005068:	e00a      	b.n	8005080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	4908      	ldr	r1, [pc, #32]	; (8005090 <__NVIC_SetPriority+0x50>)
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	3b04      	subs	r3, #4
 8005078:	0112      	lsls	r2, r2, #4
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	440b      	add	r3, r1
 800507e:	761a      	strb	r2, [r3, #24]
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	e000e100 	.word	0xe000e100
 8005090:	e000ed00 	.word	0xe000ed00

08005094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005094:	b480      	push	{r7}
 8005096:	b089      	sub	sp, #36	; 0x24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f1c3 0307 	rsb	r3, r3, #7
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	bf28      	it	cs
 80050b2:	2304      	movcs	r3, #4
 80050b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3304      	adds	r3, #4
 80050ba:	2b06      	cmp	r3, #6
 80050bc:	d902      	bls.n	80050c4 <NVIC_EncodePriority+0x30>
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3b03      	subs	r3, #3
 80050c2:	e000      	b.n	80050c6 <NVIC_EncodePriority+0x32>
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050c8:	f04f 32ff 	mov.w	r2, #4294967295
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43da      	mvns	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	401a      	ands	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050dc:	f04f 31ff 	mov.w	r1, #4294967295
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	fa01 f303 	lsl.w	r3, r1, r3
 80050e6:	43d9      	mvns	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ec:	4313      	orrs	r3, r2
         );
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3724      	adds	r7, #36	; 0x24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3b01      	subs	r3, #1
 8005108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800510c:	d301      	bcc.n	8005112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800510e:	2301      	movs	r3, #1
 8005110:	e00f      	b.n	8005132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <SysTick_Config+0x40>)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3b01      	subs	r3, #1
 8005118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800511a:	210f      	movs	r1, #15
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	f7ff ff8e 	bl	8005040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <SysTick_Config+0x40>)
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800512a:	4b04      	ldr	r3, [pc, #16]	; (800513c <SysTick_Config+0x40>)
 800512c:	2207      	movs	r2, #7
 800512e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	e000e010 	.word	0xe000e010

08005140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ff29 	bl	8004fa0 <__NVIC_SetPriorityGrouping>
}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b086      	sub	sp, #24
 800515a:	af00      	add	r7, sp, #0
 800515c:	4603      	mov	r3, r0
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005168:	f7ff ff3e 	bl	8004fe8 <__NVIC_GetPriorityGrouping>
 800516c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	6978      	ldr	r0, [r7, #20]
 8005174:	f7ff ff8e 	bl	8005094 <NVIC_EncodePriority>
 8005178:	4602      	mov	r2, r0
 800517a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800517e:	4611      	mov	r1, r2
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff ff5d 	bl	8005040 <__NVIC_SetPriority>
}
 8005186:	bf00      	nop
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	4603      	mov	r3, r0
 8005196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff ff31 	bl	8005004 <__NVIC_EnableIRQ>
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff ffa2 	bl	80050fc <SysTick_Config>
 80051b8:	4603      	mov	r3, r0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80051c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80051de:	4b2f      	ldr	r3, [pc, #188]	; (800529c <HAL_FLASH_Program+0xd8>)
 80051e0:	7e1b      	ldrb	r3, [r3, #24]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_FLASH_Program+0x26>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e054      	b.n	8005294 <HAL_FLASH_Program+0xd0>
 80051ea:	4b2c      	ldr	r3, [pc, #176]	; (800529c <HAL_FLASH_Program+0xd8>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80051f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051f4:	f000 f8a8 	bl	8005348 <FLASH_WaitForLastOperation>
 80051f8:	4603      	mov	r3, r0
 80051fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d144      	bne.n	800528c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d102      	bne.n	800520e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005208:	2301      	movs	r3, #1
 800520a:	757b      	strb	r3, [r7, #21]
 800520c:	e007      	b.n	800521e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d102      	bne.n	800521a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005214:	2302      	movs	r3, #2
 8005216:	757b      	strb	r3, [r7, #21]
 8005218:	e001      	b.n	800521e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800521a:	2304      	movs	r3, #4
 800521c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800521e:	2300      	movs	r3, #0
 8005220:	75bb      	strb	r3, [r7, #22]
 8005222:	e02d      	b.n	8005280 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005224:	7dbb      	ldrb	r3, [r7, #22]
 8005226:	005a      	lsls	r2, r3, #1
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	eb02 0c03 	add.w	ip, r2, r3
 800522e:	7dbb      	ldrb	r3, [r7, #22]
 8005230:	0119      	lsls	r1, r3, #4
 8005232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005236:	f1c1 0620 	rsb	r6, r1, #32
 800523a:	f1a1 0020 	sub.w	r0, r1, #32
 800523e:	fa22 f401 	lsr.w	r4, r2, r1
 8005242:	fa03 f606 	lsl.w	r6, r3, r6
 8005246:	4334      	orrs	r4, r6
 8005248:	fa23 f000 	lsr.w	r0, r3, r0
 800524c:	4304      	orrs	r4, r0
 800524e:	fa23 f501 	lsr.w	r5, r3, r1
 8005252:	b2a3      	uxth	r3, r4
 8005254:	4619      	mov	r1, r3
 8005256:	4660      	mov	r0, ip
 8005258:	f000 f85a 	bl	8005310 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800525c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005260:	f000 f872 	bl	8005348 <FLASH_WaitForLastOperation>
 8005264:	4603      	mov	r3, r0
 8005266:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005268:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <HAL_FLASH_Program+0xdc>)
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	4a0c      	ldr	r2, [pc, #48]	; (80052a0 <HAL_FLASH_Program+0xdc>)
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8005274:	7dfb      	ldrb	r3, [r7, #23]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d107      	bne.n	800528a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800527a:	7dbb      	ldrb	r3, [r7, #22]
 800527c:	3301      	adds	r3, #1
 800527e:	75bb      	strb	r3, [r7, #22]
 8005280:	7dba      	ldrb	r2, [r7, #22]
 8005282:	7d7b      	ldrb	r3, [r7, #21]
 8005284:	429a      	cmp	r2, r3
 8005286:	d3cd      	bcc.n	8005224 <HAL_FLASH_Program+0x60>
 8005288:	e000      	b.n	800528c <HAL_FLASH_Program+0xc8>
      {
        break;
 800528a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <HAL_FLASH_Program+0xd8>)
 800528e:	2200      	movs	r2, #0
 8005290:	761a      	strb	r2, [r3, #24]

  return status;
 8005292:	7dfb      	ldrb	r3, [r7, #23]
}
 8005294:	4618      	mov	r0, r3
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800529c:	200064c0 	.word	0x200064c0
 80052a0:	40022000 	.word	0x40022000

080052a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <HAL_FLASH_Unlock+0x40>)
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <HAL_FLASH_Unlock+0x40>)
 80052bc:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <HAL_FLASH_Unlock+0x44>)
 80052be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80052c0:	4b08      	ldr	r3, [pc, #32]	; (80052e4 <HAL_FLASH_Unlock+0x40>)
 80052c2:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <HAL_FLASH_Unlock+0x48>)
 80052c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80052c6:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <HAL_FLASH_Unlock+0x40>)
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80052d6:	79fb      	ldrb	r3, [r7, #7]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	40022000 	.word	0x40022000
 80052e8:	45670123 	.word	0x45670123
 80052ec:	cdef89ab 	.word	0xcdef89ab

080052f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_FLASH_Lock+0x1c>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	4a04      	ldr	r2, [pc, #16]	; (800530c <HAL_FLASH_Lock+0x1c>)
 80052fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40022000 	.word	0x40022000

08005310 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800531c:	4b08      	ldr	r3, [pc, #32]	; (8005340 <FLASH_Program_HalfWord+0x30>)
 800531e:	2200      	movs	r2, #0
 8005320:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <FLASH_Program_HalfWord+0x34>)
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	4a07      	ldr	r2, [pc, #28]	; (8005344 <FLASH_Program_HalfWord+0x34>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	887a      	ldrh	r2, [r7, #2]
 8005332:	801a      	strh	r2, [r3, #0]
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	200064c0 	.word	0x200064c0
 8005344:	40022000 	.word	0x40022000

08005348 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005350:	f7ff fac8 	bl	80048e4 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005356:	e010      	b.n	800537a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d00c      	beq.n	800537a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <FLASH_WaitForLastOperation+0x2e>
 8005366:	f7ff fabd 	bl	80048e4 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	429a      	cmp	r2, r3
 8005374:	d201      	bcs.n	800537a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e01f      	b.n	80053ba <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800537a:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <FLASH_WaitForLastOperation+0x7c>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	d0e8      	beq.n	8005358 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <FLASH_WaitForLastOperation+0x7c>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b20      	cmp	r3, #32
 8005390:	d102      	bne.n	8005398 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005392:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <FLASH_WaitForLastOperation+0x7c>)
 8005394:	2220      	movs	r2, #32
 8005396:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005398:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <FLASH_WaitForLastOperation+0x7c>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d005      	beq.n	80053b0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80053a4:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <FLASH_WaitForLastOperation+0x7c>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d103      	bne.n	80053b8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80053b0:	f000 f80a 	bl	80053c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40022000 	.word	0x40022000

080053c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80053d2:	4b14      	ldr	r3, [pc, #80]	; (8005424 <FLASH_SetErrorCode+0x5c>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f003 0310 	and.w	r3, r3, #16
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d109      	bne.n	80053f2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80053de:	4b12      	ldr	r3, [pc, #72]	; (8005428 <FLASH_SetErrorCode+0x60>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f043 0302 	orr.w	r3, r3, #2
 80053e6:	4a10      	ldr	r2, [pc, #64]	; (8005428 <FLASH_SetErrorCode+0x60>)
 80053e8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f043 0310 	orr.w	r3, r3, #16
 80053f0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80053f2:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <FLASH_SetErrorCode+0x5c>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d109      	bne.n	8005412 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <FLASH_SetErrorCode+0x60>)
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	4a08      	ldr	r2, [pc, #32]	; (8005428 <FLASH_SetErrorCode+0x60>)
 8005408:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005412:	4a04      	ldr	r2, [pc, #16]	; (8005424 <FLASH_SetErrorCode+0x5c>)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60d3      	str	r3, [r2, #12]
}  
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40022000 	.word	0x40022000
 8005428:	200064c0 	.word	0x200064c0

0800542c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800543e:	4b2e      	ldr	r3, [pc, #184]	; (80054f8 <HAL_FLASHEx_Erase+0xcc>)
 8005440:	7e1b      	ldrb	r3, [r3, #24]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_FLASHEx_Erase+0x1e>
 8005446:	2302      	movs	r3, #2
 8005448:	e052      	b.n	80054f0 <HAL_FLASHEx_Erase+0xc4>
 800544a:	4b2b      	ldr	r3, [pc, #172]	; (80054f8 <HAL_FLASHEx_Erase+0xcc>)
 800544c:	2201      	movs	r2, #1
 800544e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d115      	bne.n	8005484 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005458:	f24c 3050 	movw	r0, #50000	; 0xc350
 800545c:	f7ff ff74 	bl	8005348 <FLASH_WaitForLastOperation>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d140      	bne.n	80054e8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8005466:	f000 f84b 	bl	8005500 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800546a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800546e:	f7ff ff6b 	bl	8005348 <FLASH_WaitForLastOperation>
 8005472:	4603      	mov	r3, r0
 8005474:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005476:	4b21      	ldr	r3, [pc, #132]	; (80054fc <HAL_FLASHEx_Erase+0xd0>)
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	4a20      	ldr	r2, [pc, #128]	; (80054fc <HAL_FLASHEx_Erase+0xd0>)
 800547c:	f023 0304 	bic.w	r3, r3, #4
 8005480:	6113      	str	r3, [r2, #16]
 8005482:	e031      	b.n	80054e8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005484:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005488:	f7ff ff5e 	bl	8005348 <FLASH_WaitForLastOperation>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d12a      	bne.n	80054e8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f04f 32ff 	mov.w	r2, #4294967295
 8005498:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60bb      	str	r3, [r7, #8]
 80054a0:	e019      	b.n	80054d6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80054a2:	68b8      	ldr	r0, [r7, #8]
 80054a4:	f000 f846 	bl	8005534 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80054a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80054ac:	f7ff ff4c 	bl	8005348 <FLASH_WaitForLastOperation>
 80054b0:	4603      	mov	r3, r0
 80054b2:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80054b4:	4b11      	ldr	r3, [pc, #68]	; (80054fc <HAL_FLASHEx_Erase+0xd0>)
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	4a10      	ldr	r2, [pc, #64]	; (80054fc <HAL_FLASHEx_Erase+0xd0>)
 80054ba:	f023 0302 	bic.w	r3, r3, #2
 80054be:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	601a      	str	r2, [r3, #0]
            break;
 80054cc:	e00c      	b.n	80054e8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	02da      	lsls	r2, r3, #11
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d3dc      	bcc.n	80054a2 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80054e8:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <HAL_FLASHEx_Erase+0xcc>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	761a      	strb	r2, [r3, #24]

  return status;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	200064c0 	.word	0x200064c0
 80054fc:	40022000 	.word	0x40022000

08005500 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005504:	4b09      	ldr	r3, [pc, #36]	; (800552c <FLASH_MassErase+0x2c>)
 8005506:	2200      	movs	r2, #0
 8005508:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <FLASH_MassErase+0x30>)
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	4a08      	ldr	r2, [pc, #32]	; (8005530 <FLASH_MassErase+0x30>)
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005516:	4b06      	ldr	r3, [pc, #24]	; (8005530 <FLASH_MassErase+0x30>)
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	4a05      	ldr	r2, [pc, #20]	; (8005530 <FLASH_MassErase+0x30>)
 800551c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005520:	6113      	str	r3, [r2, #16]
}
 8005522:	bf00      	nop
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	200064c0 	.word	0x200064c0
 8005530:	40022000 	.word	0x40022000

08005534 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <FLASH_PageErase+0x38>)
 800553e:	2200      	movs	r2, #0
 8005540:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <FLASH_PageErase+0x3c>)
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	4a0a      	ldr	r2, [pc, #40]	; (8005570 <FLASH_PageErase+0x3c>)
 8005548:	f043 0302 	orr.w	r3, r3, #2
 800554c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800554e:	4a08      	ldr	r2, [pc, #32]	; (8005570 <FLASH_PageErase+0x3c>)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <FLASH_PageErase+0x3c>)
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	4a05      	ldr	r2, [pc, #20]	; (8005570 <FLASH_PageErase+0x3c>)
 800555a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555e:	6113      	str	r3, [r2, #16]
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	200064c0 	.word	0x200064c0
 8005570:	40022000 	.word	0x40022000

08005574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005582:	e154      	b.n	800582e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	2101      	movs	r1, #1
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	fa01 f303 	lsl.w	r3, r1, r3
 8005590:	4013      	ands	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8146 	beq.w	8005828 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d00b      	beq.n	80055bc <HAL_GPIO_Init+0x48>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d007      	beq.n	80055bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055b0:	2b11      	cmp	r3, #17
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b12      	cmp	r3, #18
 80055ba:	d130      	bne.n	800561e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	2203      	movs	r2, #3
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4013      	ands	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055f2:	2201      	movs	r2, #1
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	f003 0201 	and.w	r2, r3, #1
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	2203      	movs	r2, #3
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4013      	ands	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d003      	beq.n	800565e <HAL_GPIO_Init+0xea>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b12      	cmp	r3, #18
 800565c:	d123      	bne.n	80056a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	08da      	lsrs	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3208      	adds	r2, #8
 8005666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	220f      	movs	r2, #15
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4013      	ands	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	08da      	lsrs	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3208      	adds	r2, #8
 80056a0:	6939      	ldr	r1, [r7, #16]
 80056a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	2203      	movs	r2, #3
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4013      	ands	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f003 0203 	and.w	r2, r3, #3
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 80a0 	beq.w	8005828 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056e8:	4b58      	ldr	r3, [pc, #352]	; (800584c <HAL_GPIO_Init+0x2d8>)
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	4a57      	ldr	r2, [pc, #348]	; (800584c <HAL_GPIO_Init+0x2d8>)
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	6193      	str	r3, [r2, #24]
 80056f4:	4b55      	ldr	r3, [pc, #340]	; (800584c <HAL_GPIO_Init+0x2d8>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005700:	4a53      	ldr	r2, [pc, #332]	; (8005850 <HAL_GPIO_Init+0x2dc>)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	3302      	adds	r3, #2
 8005708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	220f      	movs	r2, #15
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4013      	ands	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800572a:	d019      	beq.n	8005760 <HAL_GPIO_Init+0x1ec>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a49      	ldr	r2, [pc, #292]	; (8005854 <HAL_GPIO_Init+0x2e0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_GPIO_Init+0x1e8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a48      	ldr	r2, [pc, #288]	; (8005858 <HAL_GPIO_Init+0x2e4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00d      	beq.n	8005758 <HAL_GPIO_Init+0x1e4>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a47      	ldr	r2, [pc, #284]	; (800585c <HAL_GPIO_Init+0x2e8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d007      	beq.n	8005754 <HAL_GPIO_Init+0x1e0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a46      	ldr	r2, [pc, #280]	; (8005860 <HAL_GPIO_Init+0x2ec>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d101      	bne.n	8005750 <HAL_GPIO_Init+0x1dc>
 800574c:	2304      	movs	r3, #4
 800574e:	e008      	b.n	8005762 <HAL_GPIO_Init+0x1ee>
 8005750:	2305      	movs	r3, #5
 8005752:	e006      	b.n	8005762 <HAL_GPIO_Init+0x1ee>
 8005754:	2303      	movs	r3, #3
 8005756:	e004      	b.n	8005762 <HAL_GPIO_Init+0x1ee>
 8005758:	2302      	movs	r3, #2
 800575a:	e002      	b.n	8005762 <HAL_GPIO_Init+0x1ee>
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_GPIO_Init+0x1ee>
 8005760:	2300      	movs	r3, #0
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	f002 0203 	and.w	r2, r2, #3
 8005768:	0092      	lsls	r2, r2, #2
 800576a:	4093      	lsls	r3, r2
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005772:	4937      	ldr	r1, [pc, #220]	; (8005850 <HAL_GPIO_Init+0x2dc>)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	3302      	adds	r3, #2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005780:	4b38      	ldr	r3, [pc, #224]	; (8005864 <HAL_GPIO_Init+0x2f0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	43db      	mvns	r3, r3
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4013      	ands	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80057a4:	4a2f      	ldr	r2, [pc, #188]	; (8005864 <HAL_GPIO_Init+0x2f0>)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80057aa:	4b2e      	ldr	r3, [pc, #184]	; (8005864 <HAL_GPIO_Init+0x2f0>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	43db      	mvns	r3, r3
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4013      	ands	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80057ce:	4a25      	ldr	r2, [pc, #148]	; (8005864 <HAL_GPIO_Init+0x2f0>)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057d4:	4b23      	ldr	r3, [pc, #140]	; (8005864 <HAL_GPIO_Init+0x2f0>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	43db      	mvns	r3, r3
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4013      	ands	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80057f8:	4a1a      	ldr	r2, [pc, #104]	; (8005864 <HAL_GPIO_Init+0x2f0>)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057fe:	4b19      	ldr	r3, [pc, #100]	; (8005864 <HAL_GPIO_Init+0x2f0>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	43db      	mvns	r3, r3
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4013      	ands	r3, r2
 800580c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005822:	4a10      	ldr	r2, [pc, #64]	; (8005864 <HAL_GPIO_Init+0x2f0>)
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	3301      	adds	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	f47f aea3 	bne.w	8005584 <HAL_GPIO_Init+0x10>
  }
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	40021000 	.word	0x40021000
 8005850:	40010000 	.word	0x40010000
 8005854:	48000400 	.word	0x48000400
 8005858:	48000800 	.word	0x48000800
 800585c:	48000c00 	.word	0x48000c00
 8005860:	48001000 	.word	0x48001000
 8005864:	40010400 	.word	0x40010400

08005868 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	887b      	ldrh	r3, [r7, #2]
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005880:	2301      	movs	r3, #1
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e001      	b.n	800588a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800588a:	7bfb      	ldrb	r3, [r7, #15]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	807b      	strh	r3, [r7, #2]
 80058a4:	4613      	mov	r3, r2
 80058a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058a8:	787b      	ldrb	r3, [r7, #1]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058ae:	887a      	ldrh	r2, [r7, #2]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058b4:	e002      	b.n	80058bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058b6:	887a      	ldrh	r2, [r7, #2]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058d2:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	88fb      	ldrh	r3, [r7, #6]
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058de:	4a05      	ldr	r2, [pc, #20]	; (80058f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058e0:	88fb      	ldrh	r3, [r7, #6]
 80058e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fc fc70 	bl	80021cc <HAL_GPIO_EXTI_Callback>
  }
}
 80058ec:	bf00      	nop
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40010400 	.word	0x40010400

080058f8 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <HAL_PWREx_EnableSDADC+0x38>)
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <HAL_PWREx_EnableSDADC+0x38>)
 8005906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590a:	61d3      	str	r3, [r2, #28]
 800590c:	4b08      	ldr	r3, [pc, #32]	; (8005930 <HAL_PWREx_EnableSDADC+0x38>)
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <HAL_PWREx_EnableSDADC+0x3c>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	4905      	ldr	r1, [pc, #20]	; (8005934 <HAL_PWREx_EnableSDADC+0x3c>)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4313      	orrs	r3, r2
 8005922:	600b      	str	r3, [r1, #0]
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40021000 	.word	0x40021000
 8005934:	40007000 	.word	0x40007000

08005938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800593e:	af00      	add	r7, sp, #0
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005944:	1d3b      	adds	r3, r7, #4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	f000 bef4 	b.w	800673a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005952:	1d3b      	adds	r3, r7, #4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 816a 	beq.w	8005c36 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005962:	4bb3      	ldr	r3, [pc, #716]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b04      	cmp	r3, #4
 800596c:	d00c      	beq.n	8005988 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800596e:	4bb0      	ldr	r3, [pc, #704]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b08      	cmp	r3, #8
 8005978:	d159      	bne.n	8005a2e <HAL_RCC_OscConfig+0xf6>
 800597a:	4bad      	ldr	r3, [pc, #692]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005986:	d152      	bne.n	8005a2e <HAL_RCC_OscConfig+0xf6>
 8005988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800598c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005990:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005994:	fa93 f3a3 	rbit	r3, r3
 8005998:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800599c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a0:	fab3 f383 	clz	r3, r3
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d102      	bne.n	80059ba <HAL_RCC_OscConfig+0x82>
 80059b4:	4b9e      	ldr	r3, [pc, #632]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	e015      	b.n	80059e6 <HAL_RCC_OscConfig+0xae>
 80059ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059be:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80059ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059d2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80059d6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80059e2:	4b93      	ldr	r3, [pc, #588]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059ea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80059ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80059f2:	fa92 f2a2 	rbit	r2, r2
 80059f6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80059fa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80059fe:	fab2 f282 	clz	r2, r2
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	f042 0220 	orr.w	r2, r2, #32
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	f002 021f 	and.w	r2, r2, #31
 8005a0e:	2101      	movs	r1, #1
 8005a10:	fa01 f202 	lsl.w	r2, r1, r2
 8005a14:	4013      	ands	r3, r2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 810c 	beq.w	8005c34 <HAL_RCC_OscConfig+0x2fc>
 8005a1c:	1d3b      	adds	r3, r7, #4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f040 8106 	bne.w	8005c34 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f000 be86 	b.w	800673a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a2e:	1d3b      	adds	r3, r7, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a38:	d106      	bne.n	8005a48 <HAL_RCC_OscConfig+0x110>
 8005a3a:	4b7d      	ldr	r3, [pc, #500]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a7c      	ldr	r2, [pc, #496]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	e030      	b.n	8005aaa <HAL_RCC_OscConfig+0x172>
 8005a48:	1d3b      	adds	r3, r7, #4
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10c      	bne.n	8005a6c <HAL_RCC_OscConfig+0x134>
 8005a52:	4b77      	ldr	r3, [pc, #476]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a76      	ldr	r2, [pc, #472]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	4b74      	ldr	r3, [pc, #464]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a73      	ldr	r2, [pc, #460]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a68:	6013      	str	r3, [r2, #0]
 8005a6a:	e01e      	b.n	8005aaa <HAL_RCC_OscConfig+0x172>
 8005a6c:	1d3b      	adds	r3, r7, #4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a76:	d10c      	bne.n	8005a92 <HAL_RCC_OscConfig+0x15a>
 8005a78:	4b6d      	ldr	r3, [pc, #436]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a6c      	ldr	r2, [pc, #432]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	4b6a      	ldr	r3, [pc, #424]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a69      	ldr	r2, [pc, #420]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e00b      	b.n	8005aaa <HAL_RCC_OscConfig+0x172>
 8005a92:	4b67      	ldr	r3, [pc, #412]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a66      	ldr	r2, [pc, #408]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	4b64      	ldr	r3, [pc, #400]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a63      	ldr	r2, [pc, #396]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aa8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005aaa:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	f023 020f 	bic.w	r2, r3, #15
 8005ab2:	1d3b      	adds	r3, r7, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	495d      	ldr	r1, [pc, #372]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d059      	beq.n	8005b7c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fe ff0c 	bl	80048e4 <HAL_GetTick>
 8005acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad0:	e00a      	b.n	8005ae8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad2:	f7fe ff07 	bl	80048e4 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b64      	cmp	r3, #100	; 0x64
 8005ae0:	d902      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	f000 be29 	b.w	800673a <HAL_RCC_OscConfig+0xe02>
 8005ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005af4:	fa93 f3a3 	rbit	r3, r3
 8005af8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005afc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b00:	fab3 f383 	clz	r3, r3
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d102      	bne.n	8005b1a <HAL_RCC_OscConfig+0x1e2>
 8005b14:	4b46      	ldr	r3, [pc, #280]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	e015      	b.n	8005b46 <HAL_RCC_OscConfig+0x20e>
 8005b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b1e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b22:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005b26:	fa93 f3a3 	rbit	r3, r3
 8005b2a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b32:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005b36:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005b3a:	fa93 f3a3 	rbit	r3, r3
 8005b3e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005b42:	4b3b      	ldr	r3, [pc, #236]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b4a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005b4e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005b52:	fa92 f2a2 	rbit	r2, r2
 8005b56:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005b5a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005b5e:	fab2 f282 	clz	r2, r2
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	f042 0220 	orr.w	r2, r2, #32
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	f002 021f 	and.w	r2, r2, #31
 8005b6e:	2101      	movs	r1, #1
 8005b70:	fa01 f202 	lsl.w	r2, r1, r2
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0ab      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x19a>
 8005b7a:	e05c      	b.n	8005c36 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7c:	f7fe feb2 	bl	80048e4 <HAL_GetTick>
 8005b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b84:	e00a      	b.n	8005b9c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b86:	f7fe fead 	bl	80048e4 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b64      	cmp	r3, #100	; 0x64
 8005b94:	d902      	bls.n	8005b9c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	f000 bdcf 	b.w	800673a <HAL_RCC_OscConfig+0xe02>
 8005b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ba0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005ba8:	fa93 f3a3 	rbit	r3, r3
 8005bac:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005bb0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb4:	fab3 f383 	clz	r3, r3
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d102      	bne.n	8005bce <HAL_RCC_OscConfig+0x296>
 8005bc8:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	e015      	b.n	8005bfa <HAL_RCC_OscConfig+0x2c2>
 8005bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bd2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bd6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005bda:	fa93 f3a3 	rbit	r3, r3
 8005bde:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005be6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005bea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005bee:	fa93 f3a3 	rbit	r3, r3
 8005bf2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005bf6:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <HAL_RCC_OscConfig+0x2f8>)
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bfe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005c02:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005c06:	fa92 f2a2 	rbit	r2, r2
 8005c0a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005c0e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005c12:	fab2 f282 	clz	r2, r2
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	f042 0220 	orr.w	r2, r2, #32
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	f002 021f 	and.w	r2, r2, #31
 8005c22:	2101      	movs	r1, #1
 8005c24:	fa01 f202 	lsl.w	r2, r1, r2
 8005c28:	4013      	ands	r3, r2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1ab      	bne.n	8005b86 <HAL_RCC_OscConfig+0x24e>
 8005c2e:	e002      	b.n	8005c36 <HAL_RCC_OscConfig+0x2fe>
 8005c30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c36:	1d3b      	adds	r3, r7, #4
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 816f 	beq.w	8005f24 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005c46:	4bd0      	ldr	r3, [pc, #832]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f003 030c 	and.w	r3, r3, #12
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005c52:	4bcd      	ldr	r3, [pc, #820]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f003 030c 	and.w	r3, r3, #12
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d16c      	bne.n	8005d38 <HAL_RCC_OscConfig+0x400>
 8005c5e:	4bca      	ldr	r3, [pc, #808]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d166      	bne.n	8005d38 <HAL_RCC_OscConfig+0x400>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c70:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005c74:	fa93 f3a3 	rbit	r3, r3
 8005c78:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005c7c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c80:	fab3 f383 	clz	r3, r3
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d102      	bne.n	8005c9a <HAL_RCC_OscConfig+0x362>
 8005c94:	4bbc      	ldr	r3, [pc, #752]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	e013      	b.n	8005cc2 <HAL_RCC_OscConfig+0x38a>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005ca4:	fa93 f3a3 	rbit	r3, r3
 8005ca8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005cac:	2302      	movs	r3, #2
 8005cae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005cb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005cb6:	fa93 f3a3 	rbit	r3, r3
 8005cba:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005cbe:	4bb2      	ldr	r3, [pc, #712]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005cc8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005ccc:	fa92 f2a2 	rbit	r2, r2
 8005cd0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005cd4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005cd8:	fab2 f282 	clz	r2, r2
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	f042 0220 	orr.w	r2, r2, #32
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	f002 021f 	and.w	r2, r2, #31
 8005ce8:	2101      	movs	r1, #1
 8005cea:	fa01 f202 	lsl.w	r2, r1, r2
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <HAL_RCC_OscConfig+0x3cc>
 8005cf4:	1d3b      	adds	r3, r7, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d002      	beq.n	8005d04 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f000 bd1b 	b.w	800673a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d04:	4ba0      	ldr	r3, [pc, #640]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d0c:	1d3b      	adds	r3, r7, #4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	21f8      	movs	r1, #248	; 0xf8
 8005d14:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d18:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005d1c:	fa91 f1a1 	rbit	r1, r1
 8005d20:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005d24:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005d28:	fab1 f181 	clz	r1, r1
 8005d2c:	b2c9      	uxtb	r1, r1
 8005d2e:	408b      	lsls	r3, r1
 8005d30:	4995      	ldr	r1, [pc, #596]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d36:	e0f5      	b.n	8005f24 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d38:	1d3b      	adds	r3, r7, #4
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 8085 	beq.w	8005e4e <HAL_RCC_OscConfig+0x516>
 8005d44:	2301      	movs	r3, #1
 8005d46:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005d4e:	fa93 f3a3 	rbit	r3, r3
 8005d52:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005d56:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d5a:	fab3 f383 	clz	r3, r3
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005d64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d70:	f7fe fdb8 	bl	80048e4 <HAL_GetTick>
 8005d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d78:	e00a      	b.n	8005d90 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d7a:	f7fe fdb3 	bl	80048e4 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d902      	bls.n	8005d90 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	f000 bcd5 	b.w	800673a <HAL_RCC_OscConfig+0xe02>
 8005d90:	2302      	movs	r3, #2
 8005d92:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d96:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005d9a:	fa93 f3a3 	rbit	r3, r3
 8005d9e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005da2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da6:	fab3 f383 	clz	r3, r3
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d102      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x488>
 8005dba:	4b73      	ldr	r3, [pc, #460]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	e013      	b.n	8005de8 <HAL_RCC_OscConfig+0x4b0>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005dca:	fa93 f3a3 	rbit	r3, r3
 8005dce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005dd8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005ddc:	fa93 f3a3 	rbit	r3, r3
 8005de0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005de4:	4b68      	ldr	r3, [pc, #416]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2202      	movs	r2, #2
 8005dea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005dee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005df2:	fa92 f2a2 	rbit	r2, r2
 8005df6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005dfa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005dfe:	fab2 f282 	clz	r2, r2
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	f042 0220 	orr.w	r2, r2, #32
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	f002 021f 	and.w	r2, r2, #31
 8005e0e:	2101      	movs	r1, #1
 8005e10:	fa01 f202 	lsl.w	r2, r1, r2
 8005e14:	4013      	ands	r3, r2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0af      	beq.n	8005d7a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1a:	4b5b      	ldr	r3, [pc, #364]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e22:	1d3b      	adds	r3, r7, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	21f8      	movs	r1, #248	; 0xf8
 8005e2a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005e32:	fa91 f1a1 	rbit	r1, r1
 8005e36:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005e3a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005e3e:	fab1 f181 	clz	r1, r1
 8005e42:	b2c9      	uxtb	r1, r1
 8005e44:	408b      	lsls	r3, r1
 8005e46:	4950      	ldr	r1, [pc, #320]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	600b      	str	r3, [r1, #0]
 8005e4c:	e06a      	b.n	8005f24 <HAL_RCC_OscConfig+0x5ec>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005e58:	fa93 f3a3 	rbit	r3, r3
 8005e5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005e60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e64:	fab3 f383 	clz	r3, r3
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	461a      	mov	r2, r3
 8005e76:	2300      	movs	r3, #0
 8005e78:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7a:	f7fe fd33 	bl	80048e4 <HAL_GetTick>
 8005e7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e84:	f7fe fd2e 	bl	80048e4 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d902      	bls.n	8005e9a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	f000 bc50 	b.w	800673a <HAL_RCC_OscConfig+0xe02>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ea4:	fa93 f3a3 	rbit	r3, r3
 8005ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb0:	fab3 f383 	clz	r3, r3
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d102      	bne.n	8005eca <HAL_RCC_OscConfig+0x592>
 8005ec4:	4b30      	ldr	r3, [pc, #192]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	e013      	b.n	8005ef2 <HAL_RCC_OscConfig+0x5ba>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ed4:	fa93 f3a3 	rbit	r3, r3
 8005ed8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005edc:	2302      	movs	r3, #2
 8005ede:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ee2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ee6:	fa93 f3a3 	rbit	r3, r3
 8005eea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005eee:	4b26      	ldr	r3, [pc, #152]	; (8005f88 <HAL_RCC_OscConfig+0x650>)
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005ef8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005efc:	fa92 f2a2 	rbit	r2, r2
 8005f00:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005f04:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005f08:	fab2 f282 	clz	r2, r2
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	f042 0220 	orr.w	r2, r2, #32
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	f002 021f 	and.w	r2, r2, #31
 8005f18:	2101      	movs	r1, #1
 8005f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1af      	bne.n	8005e84 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f24:	1d3b      	adds	r3, r7, #4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80da 	beq.w	80060e8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d069      	beq.n	8006012 <HAL_RCC_OscConfig+0x6da>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f48:	fa93 f3a3 	rbit	r3, r3
 8005f4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f54:	fab3 f383 	clz	r3, r3
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <HAL_RCC_OscConfig+0x654>)
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	461a      	mov	r2, r3
 8005f64:	2301      	movs	r3, #1
 8005f66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f68:	f7fe fcbc 	bl	80048e4 <HAL_GetTick>
 8005f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f70:	e00e      	b.n	8005f90 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f72:	f7fe fcb7 	bl	80048e4 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d906      	bls.n	8005f90 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e3d9      	b.n	800673a <HAL_RCC_OscConfig+0xe02>
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	10908120 	.word	0x10908120
 8005f90:	2302      	movs	r3, #2
 8005f92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f9a:	fa93 f3a3 	rbit	r3, r3
 8005f9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005fa2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	fa93 f2a3 	rbit	r2, r3
 8005fb4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	fa93 f2a3 	rbit	r2, r3
 8005fcc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005fd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd2:	4ba5      	ldr	r3, [pc, #660]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 8005fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005fda:	2102      	movs	r1, #2
 8005fdc:	6019      	str	r1, [r3, #0]
 8005fde:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	fa93 f1a3 	rbit	r1, r3
 8005fe8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005fec:	6019      	str	r1, [r3, #0]
  return result;
 8005fee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	fab3 f383 	clz	r3, r3
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	2101      	movs	r1, #1
 8006006:	fa01 f303 	lsl.w	r3, r1, r3
 800600a:	4013      	ands	r3, r2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0b0      	beq.n	8005f72 <HAL_RCC_OscConfig+0x63a>
 8006010:	e06a      	b.n	80060e8 <HAL_RCC_OscConfig+0x7b0>
 8006012:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	fa93 f2a3 	rbit	r2, r3
 8006024:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006028:	601a      	str	r2, [r3, #0]
  return result;
 800602a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800602e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006030:	fab3 f383 	clz	r3, r3
 8006034:	b2db      	uxtb	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	4b8c      	ldr	r3, [pc, #560]	; (800626c <HAL_RCC_OscConfig+0x934>)
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	461a      	mov	r2, r3
 8006040:	2300      	movs	r3, #0
 8006042:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006044:	f7fe fc4e 	bl	80048e4 <HAL_GetTick>
 8006048:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800604c:	e009      	b.n	8006062 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800604e:	f7fe fc49 	bl	80048e4 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e36b      	b.n	800673a <HAL_RCC_OscConfig+0xe02>
 8006062:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006066:	2202      	movs	r2, #2
 8006068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	fa93 f2a3 	rbit	r2, r3
 8006074:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800607e:	2202      	movs	r2, #2
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	fa93 f2a3 	rbit	r2, r3
 800608c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006096:	2202      	movs	r2, #2
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	fa93 f2a3 	rbit	r2, r3
 80060a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80060a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060aa:	4b6f      	ldr	r3, [pc, #444]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80060ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80060b2:	2102      	movs	r1, #2
 80060b4:	6019      	str	r1, [r3, #0]
 80060b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	fa93 f1a3 	rbit	r1, r3
 80060c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80060c4:	6019      	str	r1, [r3, #0]
  return result;
 80060c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	fab3 f383 	clz	r3, r3
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f303 	lsl.w	r3, r1, r3
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1b2      	bne.n	800604e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060e8:	1d3b      	adds	r3, r7, #4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 8158 	beq.w	80063a8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060fe:	4b5a      	ldr	r3, [pc, #360]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d112      	bne.n	8006130 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800610a:	4b57      	ldr	r3, [pc, #348]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	4a56      	ldr	r2, [pc, #344]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 8006110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006114:	61d3      	str	r3, [r2, #28]
 8006116:	4b54      	ldr	r3, [pc, #336]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800611e:	f107 0308 	add.w	r3, r7, #8
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	f107 0308 	add.w	r3, r7, #8
 8006128:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006130:	4b4f      	ldr	r3, [pc, #316]	; (8006270 <HAL_RCC_OscConfig+0x938>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d11a      	bne.n	8006172 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800613c:	4b4c      	ldr	r3, [pc, #304]	; (8006270 <HAL_RCC_OscConfig+0x938>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a4b      	ldr	r2, [pc, #300]	; (8006270 <HAL_RCC_OscConfig+0x938>)
 8006142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006146:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006148:	f7fe fbcc 	bl	80048e4 <HAL_GetTick>
 800614c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006150:	e009      	b.n	8006166 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006152:	f7fe fbc7 	bl	80048e4 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	; 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e2e9      	b.n	800673a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006166:	4b42      	ldr	r3, [pc, #264]	; (8006270 <HAL_RCC_OscConfig+0x938>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0ef      	beq.n	8006152 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006172:	1d3b      	adds	r3, r7, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d106      	bne.n	800618a <HAL_RCC_OscConfig+0x852>
 800617c:	4b3a      	ldr	r3, [pc, #232]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	4a39      	ldr	r2, [pc, #228]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	6213      	str	r3, [r2, #32]
 8006188:	e02f      	b.n	80061ea <HAL_RCC_OscConfig+0x8b2>
 800618a:	1d3b      	adds	r3, r7, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10c      	bne.n	80061ae <HAL_RCC_OscConfig+0x876>
 8006194:	4b34      	ldr	r3, [pc, #208]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	4a33      	ldr	r2, [pc, #204]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 800619a:	f023 0301 	bic.w	r3, r3, #1
 800619e:	6213      	str	r3, [r2, #32]
 80061a0:	4b31      	ldr	r3, [pc, #196]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	4a30      	ldr	r2, [pc, #192]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80061a6:	f023 0304 	bic.w	r3, r3, #4
 80061aa:	6213      	str	r3, [r2, #32]
 80061ac:	e01d      	b.n	80061ea <HAL_RCC_OscConfig+0x8b2>
 80061ae:	1d3b      	adds	r3, r7, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	2b05      	cmp	r3, #5
 80061b6:	d10c      	bne.n	80061d2 <HAL_RCC_OscConfig+0x89a>
 80061b8:	4b2b      	ldr	r3, [pc, #172]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	4a2a      	ldr	r2, [pc, #168]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80061be:	f043 0304 	orr.w	r3, r3, #4
 80061c2:	6213      	str	r3, [r2, #32]
 80061c4:	4b28      	ldr	r3, [pc, #160]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	4a27      	ldr	r2, [pc, #156]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	6213      	str	r3, [r2, #32]
 80061d0:	e00b      	b.n	80061ea <HAL_RCC_OscConfig+0x8b2>
 80061d2:	4b25      	ldr	r3, [pc, #148]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	4a24      	ldr	r2, [pc, #144]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80061d8:	f023 0301 	bic.w	r3, r3, #1
 80061dc:	6213      	str	r3, [r2, #32]
 80061de:	4b22      	ldr	r3, [pc, #136]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	4a21      	ldr	r2, [pc, #132]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 80061e4:	f023 0304 	bic.w	r3, r3, #4
 80061e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061ea:	1d3b      	adds	r3, r7, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d06b      	beq.n	80062cc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061f4:	f7fe fb76 	bl	80048e4 <HAL_GetTick>
 80061f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fc:	e00b      	b.n	8006216 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061fe:	f7fe fb71 	bl	80048e4 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	f241 3288 	movw	r2, #5000	; 0x1388
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e291      	b.n	800673a <HAL_RCC_OscConfig+0xe02>
 8006216:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800621a:	2202      	movs	r2, #2
 800621c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	fa93 f2a3 	rbit	r2, r3
 8006228:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006232:	2202      	movs	r2, #2
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	fa93 f2a3 	rbit	r2, r3
 8006240:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006244:	601a      	str	r2, [r3, #0]
  return result;
 8006246:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800624a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624c:	fab3 f383 	clz	r3, r3
 8006250:	b2db      	uxtb	r3, r3
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f043 0302 	orr.w	r3, r3, #2
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d109      	bne.n	8006274 <HAL_RCC_OscConfig+0x93c>
 8006260:	4b01      	ldr	r3, [pc, #4]	; (8006268 <HAL_RCC_OscConfig+0x930>)
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	e014      	b.n	8006290 <HAL_RCC_OscConfig+0x958>
 8006266:	bf00      	nop
 8006268:	40021000 	.word	0x40021000
 800626c:	10908120 	.word	0x10908120
 8006270:	40007000 	.word	0x40007000
 8006274:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006278:	2202      	movs	r2, #2
 800627a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	fa93 f2a3 	rbit	r2, r3
 8006286:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	4bbb      	ldr	r3, [pc, #748]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006294:	2102      	movs	r1, #2
 8006296:	6011      	str	r1, [r2, #0]
 8006298:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	fa92 f1a2 	rbit	r1, r2
 80062a2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80062a6:	6011      	str	r1, [r2, #0]
  return result;
 80062a8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	fab2 f282 	clz	r2, r2
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	f002 021f 	and.w	r2, r2, #31
 80062be:	2101      	movs	r1, #1
 80062c0:	fa01 f202 	lsl.w	r2, r1, r2
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d099      	beq.n	80061fe <HAL_RCC_OscConfig+0x8c6>
 80062ca:	e063      	b.n	8006394 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062cc:	f7fe fb0a 	bl	80048e4 <HAL_GetTick>
 80062d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062d4:	e00b      	b.n	80062ee <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d6:	f7fe fb05 	bl	80048e4 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e225      	b.n	800673a <HAL_RCC_OscConfig+0xe02>
 80062ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80062f2:	2202      	movs	r2, #2
 80062f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	fa93 f2a3 	rbit	r2, r3
 8006300:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800630a:	2202      	movs	r2, #2
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	fa93 f2a3 	rbit	r2, r3
 8006318:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800631c:	601a      	str	r2, [r3, #0]
  return result;
 800631e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006322:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006324:	fab3 f383 	clz	r3, r3
 8006328:	b2db      	uxtb	r3, r3
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f043 0302 	orr.w	r3, r3, #2
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d102      	bne.n	800633e <HAL_RCC_OscConfig+0xa06>
 8006338:	4b90      	ldr	r3, [pc, #576]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	e00d      	b.n	800635a <HAL_RCC_OscConfig+0xa22>
 800633e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006342:	2202      	movs	r2, #2
 8006344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006346:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	fa93 f2a3 	rbit	r2, r3
 8006350:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	4b89      	ldr	r3, [pc, #548]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800635e:	2102      	movs	r1, #2
 8006360:	6011      	str	r1, [r2, #0]
 8006362:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	fa92 f1a2 	rbit	r1, r2
 800636c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006370:	6011      	str	r1, [r2, #0]
  return result;
 8006372:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	fab2 f282 	clz	r2, r2
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	f002 021f 	and.w	r2, r2, #31
 8006388:	2101      	movs	r1, #1
 800638a:	fa01 f202 	lsl.w	r2, r1, r2
 800638e:	4013      	ands	r3, r2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1a0      	bne.n	80062d6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006394:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006398:	2b01      	cmp	r3, #1
 800639a:	d105      	bne.n	80063a8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800639c:	4b77      	ldr	r3, [pc, #476]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	4a76      	ldr	r2, [pc, #472]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 80063a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063a8:	1d3b      	adds	r3, r7, #4
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 81c2 	beq.w	8006738 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063b4:	4b71      	ldr	r3, [pc, #452]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f003 030c 	and.w	r3, r3, #12
 80063bc:	2b08      	cmp	r3, #8
 80063be:	f000 819c 	beq.w	80066fa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	f040 8114 	bne.w	80065f6 <HAL_RCC_OscConfig+0xcbe>
 80063ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80063d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	fa93 f2a3 	rbit	r2, r3
 80063e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80063e6:	601a      	str	r2, [r3, #0]
  return result;
 80063e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80063ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ee:	fab3 f383 	clz	r3, r3
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	461a      	mov	r2, r3
 8006400:	2300      	movs	r3, #0
 8006402:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006404:	f7fe fa6e 	bl	80048e4 <HAL_GetTick>
 8006408:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800640c:	e009      	b.n	8006422 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800640e:	f7fe fa69 	bl	80048e4 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e18b      	b.n	800673a <HAL_RCC_OscConfig+0xe02>
 8006422:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006426:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800642a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	fa93 f2a3 	rbit	r2, r3
 8006436:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800643a:	601a      	str	r2, [r3, #0]
  return result;
 800643c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006440:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006442:	fab3 f383 	clz	r3, r3
 8006446:	b2db      	uxtb	r3, r3
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f043 0301 	orr.w	r3, r3, #1
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b01      	cmp	r3, #1
 8006454:	d102      	bne.n	800645c <HAL_RCC_OscConfig+0xb24>
 8006456:	4b49      	ldr	r3, [pc, #292]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	e01b      	b.n	8006494 <HAL_RCC_OscConfig+0xb5c>
 800645c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006460:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006464:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006466:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	fa93 f2a3 	rbit	r2, r3
 8006470:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800647a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	fa93 f2a3 	rbit	r2, r3
 800648a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	4b3a      	ldr	r3, [pc, #232]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006498:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800649c:	6011      	str	r1, [r2, #0]
 800649e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	fa92 f1a2 	rbit	r1, r2
 80064a8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80064ac:	6011      	str	r1, [r2, #0]
  return result;
 80064ae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	fab2 f282 	clz	r2, r2
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	f042 0220 	orr.w	r2, r2, #32
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	f002 021f 	and.w	r2, r2, #31
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f202 	lsl.w	r2, r1, r2
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d19e      	bne.n	800640e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064d0:	4b2a      	ldr	r3, [pc, #168]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80064d8:	1d3b      	adds	r3, r7, #4
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80064de:	1d3b      	adds	r3, r7, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	430b      	orrs	r3, r1
 80064e6:	4925      	ldr	r1, [pc, #148]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]
 80064ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	fa93 f2a3 	rbit	r2, r3
 8006500:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006504:	601a      	str	r2, [r3, #0]
  return result;
 8006506:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800650a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800650c:	fab3 f383 	clz	r3, r3
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006516:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	461a      	mov	r2, r3
 800651e:	2301      	movs	r3, #1
 8006520:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006522:	f7fe f9df 	bl	80048e4 <HAL_GetTick>
 8006526:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800652a:	e009      	b.n	8006540 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800652c:	f7fe f9da 	bl	80048e4 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e0fc      	b.n	800673a <HAL_RCC_OscConfig+0xe02>
 8006540:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006544:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	fa93 f2a3 	rbit	r2, r3
 8006554:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006558:	601a      	str	r2, [r3, #0]
  return result;
 800655a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800655e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006560:	fab3 f383 	clz	r3, r3
 8006564:	b2db      	uxtb	r3, r3
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	b2db      	uxtb	r3, r3
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b01      	cmp	r3, #1
 8006572:	d105      	bne.n	8006580 <HAL_RCC_OscConfig+0xc48>
 8006574:	4b01      	ldr	r3, [pc, #4]	; (800657c <HAL_RCC_OscConfig+0xc44>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	e01e      	b.n	80065b8 <HAL_RCC_OscConfig+0xc80>
 800657a:	bf00      	nop
 800657c:	40021000 	.word	0x40021000
 8006580:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800658a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	fa93 f2a3 	rbit	r2, r3
 8006594:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800659e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	fa93 f2a3 	rbit	r2, r3
 80065ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	4b63      	ldr	r3, [pc, #396]	; (8006744 <HAL_RCC_OscConfig+0xe0c>)
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80065bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80065c6:	6812      	ldr	r2, [r2, #0]
 80065c8:	fa92 f1a2 	rbit	r1, r2
 80065cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80065d0:	6011      	str	r1, [r2, #0]
  return result;
 80065d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	fab2 f282 	clz	r2, r2
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	f042 0220 	orr.w	r2, r2, #32
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	f002 021f 	and.w	r2, r2, #31
 80065e8:	2101      	movs	r1, #1
 80065ea:	fa01 f202 	lsl.w	r2, r1, r2
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d09b      	beq.n	800652c <HAL_RCC_OscConfig+0xbf4>
 80065f4:	e0a0      	b.n	8006738 <HAL_RCC_OscConfig+0xe00>
 80065f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	fa93 f2a3 	rbit	r2, r3
 800660a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800660e:	601a      	str	r2, [r3, #0]
  return result;
 8006610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006614:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006616:	fab3 f383 	clz	r3, r3
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006620:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800662c:	f7fe f95a 	bl	80048e4 <HAL_GetTick>
 8006630:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006634:	e009      	b.n	800664a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006636:	f7fe f955 	bl	80048e4 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e077      	b.n	800673a <HAL_RCC_OscConfig+0xe02>
 800664a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800664e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	fa93 f2a3 	rbit	r2, r3
 800665e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006662:	601a      	str	r2, [r3, #0]
  return result;
 8006664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006668:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800666a:	fab3 f383 	clz	r3, r3
 800666e:	b2db      	uxtb	r3, r3
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b01      	cmp	r3, #1
 800667c:	d102      	bne.n	8006684 <HAL_RCC_OscConfig+0xd4c>
 800667e:	4b31      	ldr	r3, [pc, #196]	; (8006744 <HAL_RCC_OscConfig+0xe0c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	e01b      	b.n	80066bc <HAL_RCC_OscConfig+0xd84>
 8006684:	f107 0320 	add.w	r3, r7, #32
 8006688:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800668c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668e:	f107 0320 	add.w	r3, r7, #32
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	fa93 f2a3 	rbit	r2, r3
 8006698:	f107 031c 	add.w	r3, r7, #28
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	f107 0318 	add.w	r3, r7, #24
 80066a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	f107 0318 	add.w	r3, r7, #24
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	fa93 f2a3 	rbit	r2, r3
 80066b2:	f107 0314 	add.w	r3, r7, #20
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	4b22      	ldr	r3, [pc, #136]	; (8006744 <HAL_RCC_OscConfig+0xe0c>)
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	f107 0210 	add.w	r2, r7, #16
 80066c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80066c4:	6011      	str	r1, [r2, #0]
 80066c6:	f107 0210 	add.w	r2, r7, #16
 80066ca:	6812      	ldr	r2, [r2, #0]
 80066cc:	fa92 f1a2 	rbit	r1, r2
 80066d0:	f107 020c 	add.w	r2, r7, #12
 80066d4:	6011      	str	r1, [r2, #0]
  return result;
 80066d6:	f107 020c 	add.w	r2, r7, #12
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	fab2 f282 	clz	r2, r2
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	f042 0220 	orr.w	r2, r2, #32
 80066e6:	b2d2      	uxtb	r2, r2
 80066e8:	f002 021f 	and.w	r2, r2, #31
 80066ec:	2101      	movs	r1, #1
 80066ee:	fa01 f202 	lsl.w	r2, r1, r2
 80066f2:	4013      	ands	r3, r2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d19e      	bne.n	8006636 <HAL_RCC_OscConfig+0xcfe>
 80066f8:	e01e      	b.n	8006738 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066fa:	1d3b      	adds	r3, r7, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e018      	b.n	800673a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006708:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <HAL_RCC_OscConfig+0xe0c>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006710:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006714:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006718:	1d3b      	adds	r3, r7, #4
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	429a      	cmp	r2, r3
 8006720:	d108      	bne.n	8006734 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006722:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006730:	429a      	cmp	r2, r3
 8006732:	d001      	beq.n	8006738 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40021000 	.word	0x40021000

08006748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b09e      	sub	sp, #120	; 0x78
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e162      	b.n	8006a26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006760:	4b90      	ldr	r3, [pc, #576]	; (80069a4 <HAL_RCC_ClockConfig+0x25c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d910      	bls.n	8006790 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676e:	4b8d      	ldr	r3, [pc, #564]	; (80069a4 <HAL_RCC_ClockConfig+0x25c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f023 0207 	bic.w	r2, r3, #7
 8006776:	498b      	ldr	r1, [pc, #556]	; (80069a4 <HAL_RCC_ClockConfig+0x25c>)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	4313      	orrs	r3, r2
 800677c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800677e:	4b89      	ldr	r3, [pc, #548]	; (80069a4 <HAL_RCC_ClockConfig+0x25c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d001      	beq.n	8006790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e14a      	b.n	8006a26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800679c:	4b82      	ldr	r3, [pc, #520]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	497f      	ldr	r1, [pc, #508]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80dc 	beq.w	8006974 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d13c      	bne.n	800683e <HAL_RCC_ClockConfig+0xf6>
 80067c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067cc:	fa93 f3a3 	rbit	r3, r3
 80067d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80067d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067d4:	fab3 f383 	clz	r3, r3
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	f043 0301 	orr.w	r3, r3, #1
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d102      	bne.n	80067ee <HAL_RCC_ClockConfig+0xa6>
 80067e8:	4b6f      	ldr	r3, [pc, #444]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	e00f      	b.n	800680e <HAL_RCC_ClockConfig+0xc6>
 80067ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067f6:	fa93 f3a3 	rbit	r3, r3
 80067fa:	667b      	str	r3, [r7, #100]	; 0x64
 80067fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006800:	663b      	str	r3, [r7, #96]	; 0x60
 8006802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006804:	fa93 f3a3 	rbit	r3, r3
 8006808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800680a:	4b67      	ldr	r3, [pc, #412]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006812:	65ba      	str	r2, [r7, #88]	; 0x58
 8006814:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006816:	fa92 f2a2 	rbit	r2, r2
 800681a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800681c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800681e:	fab2 f282 	clz	r2, r2
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	f042 0220 	orr.w	r2, r2, #32
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	f002 021f 	and.w	r2, r2, #31
 800682e:	2101      	movs	r1, #1
 8006830:	fa01 f202 	lsl.w	r2, r1, r2
 8006834:	4013      	ands	r3, r2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d17b      	bne.n	8006932 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e0f3      	b.n	8006a26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d13c      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x178>
 8006846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800684a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800684c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800684e:	fa93 f3a3 	rbit	r3, r3
 8006852:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006856:	fab3 f383 	clz	r3, r3
 800685a:	b2db      	uxtb	r3, r3
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f043 0301 	orr.w	r3, r3, #1
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b01      	cmp	r3, #1
 8006868:	d102      	bne.n	8006870 <HAL_RCC_ClockConfig+0x128>
 800686a:	4b4f      	ldr	r3, [pc, #316]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	e00f      	b.n	8006890 <HAL_RCC_ClockConfig+0x148>
 8006870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006874:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006878:	fa93 f3a3 	rbit	r3, r3
 800687c:	647b      	str	r3, [r7, #68]	; 0x44
 800687e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006882:	643b      	str	r3, [r7, #64]	; 0x40
 8006884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006886:	fa93 f3a3 	rbit	r3, r3
 800688a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688c:	4b46      	ldr	r3, [pc, #280]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006894:	63ba      	str	r2, [r7, #56]	; 0x38
 8006896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006898:	fa92 f2a2 	rbit	r2, r2
 800689c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800689e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a0:	fab2 f282 	clz	r2, r2
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	f042 0220 	orr.w	r2, r2, #32
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	f002 021f 	and.w	r2, r2, #31
 80068b0:	2101      	movs	r1, #1
 80068b2:	fa01 f202 	lsl.w	r2, r1, r2
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d13a      	bne.n	8006932 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0b2      	b.n	8006a26 <HAL_RCC_ClockConfig+0x2de>
 80068c0:	2302      	movs	r3, #2
 80068c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	fa93 f3a3 	rbit	r3, r3
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ce:	fab3 f383 	clz	r3, r3
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	095b      	lsrs	r3, r3, #5
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d102      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
 80068e2:	4b31      	ldr	r3, [pc, #196]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	e00d      	b.n	8006904 <HAL_RCC_ClockConfig+0x1bc>
 80068e8:	2302      	movs	r3, #2
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	fa93 f3a3 	rbit	r3, r3
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
 80068f4:	2302      	movs	r3, #2
 80068f6:	623b      	str	r3, [r7, #32]
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	fa93 f3a3 	rbit	r3, r3
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	2202      	movs	r2, #2
 8006906:	61ba      	str	r2, [r7, #24]
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	fa92 f2a2 	rbit	r2, r2
 800690e:	617a      	str	r2, [r7, #20]
  return result;
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	fab2 f282 	clz	r2, r2
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	f042 0220 	orr.w	r2, r2, #32
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	f002 021f 	and.w	r2, r2, #31
 8006922:	2101      	movs	r1, #1
 8006924:	fa01 f202 	lsl.w	r2, r1, r2
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e079      	b.n	8006a26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006932:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f023 0203 	bic.w	r2, r3, #3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	491a      	ldr	r1, [pc, #104]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 8006940:	4313      	orrs	r3, r2
 8006942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006944:	f7fd ffce 	bl	80048e4 <HAL_GetTick>
 8006948:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	e00a      	b.n	8006962 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800694c:	f7fd ffca 	bl	80048e4 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	; 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e061      	b.n	8006a26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006962:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <HAL_RCC_ClockConfig+0x260>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f003 020c 	and.w	r2, r3, #12
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	429a      	cmp	r2, r3
 8006972:	d1eb      	bne.n	800694c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006974:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <HAL_RCC_ClockConfig+0x25c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d214      	bcs.n	80069ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006982:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <HAL_RCC_ClockConfig+0x25c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 0207 	bic.w	r2, r3, #7
 800698a:	4906      	ldr	r1, [pc, #24]	; (80069a4 <HAL_RCC_ClockConfig+0x25c>)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	4313      	orrs	r3, r2
 8006990:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006992:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <HAL_RCC_ClockConfig+0x25c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d005      	beq.n	80069ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e040      	b.n	8006a26 <HAL_RCC_ClockConfig+0x2de>
 80069a4:	40022000 	.word	0x40022000
 80069a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b8:	4b1d      	ldr	r3, [pc, #116]	; (8006a30 <HAL_RCC_ClockConfig+0x2e8>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	491a      	ldr	r1, [pc, #104]	; (8006a30 <HAL_RCC_ClockConfig+0x2e8>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d6:	4b16      	ldr	r3, [pc, #88]	; (8006a30 <HAL_RCC_ClockConfig+0x2e8>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4912      	ldr	r1, [pc, #72]	; (8006a30 <HAL_RCC_ClockConfig+0x2e8>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80069ea:	f000 f829 	bl	8006a40 <HAL_RCC_GetSysClockFreq>
 80069ee:	4601      	mov	r1, r0
 80069f0:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <HAL_RCC_ClockConfig+0x2e8>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f8:	22f0      	movs	r2, #240	; 0xf0
 80069fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	fa92 f2a2 	rbit	r2, r2
 8006a02:	60fa      	str	r2, [r7, #12]
  return result;
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	fab2 f282 	clz	r2, r2
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	40d3      	lsrs	r3, r2
 8006a0e:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <HAL_RCC_ClockConfig+0x2ec>)
 8006a10:	5cd3      	ldrb	r3, [r2, r3]
 8006a12:	fa21 f303 	lsr.w	r3, r1, r3
 8006a16:	4a08      	ldr	r2, [pc, #32]	; (8006a38 <HAL_RCC_ClockConfig+0x2f0>)
 8006a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <HAL_RCC_ClockConfig+0x2f4>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fd ff1c 	bl	800485c <HAL_InitTick>
  
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3778      	adds	r7, #120	; 0x78
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40021000 	.word	0x40021000
 8006a34:	08009d14 	.word	0x08009d14
 8006a38:	20000178 	.word	0x20000178
 8006a3c:	2000017c 	.word	0x2000017c

08006a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b08b      	sub	sp, #44	; 0x2c
 8006a44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
 8006a52:	2300      	movs	r3, #0
 8006a54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006a5a:	4b29      	ldr	r3, [pc, #164]	; (8006b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f003 030c 	and.w	r3, r3, #12
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d002      	beq.n	8006a70 <HAL_RCC_GetSysClockFreq+0x30>
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d003      	beq.n	8006a76 <HAL_RCC_GetSysClockFreq+0x36>
 8006a6e:	e03c      	b.n	8006aea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a70:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a72:	623b      	str	r3, [r7, #32]
      break;
 8006a74:	e03c      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006a7c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006a80:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	fa92 f2a2 	rbit	r2, r2
 8006a88:	607a      	str	r2, [r7, #4]
  return result;
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	fab2 f282 	clz	r2, r2
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	40d3      	lsrs	r3, r2
 8006a94:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006a96:	5cd3      	ldrb	r3, [r2, r3]
 8006a98:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006a9a:	4b19      	ldr	r3, [pc, #100]	; (8006b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	220f      	movs	r2, #15
 8006aa4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	fa92 f2a2 	rbit	r2, r2
 8006aac:	60fa      	str	r2, [r7, #12]
  return result;
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	fab2 f282 	clz	r2, r2
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	40d3      	lsrs	r3, r2
 8006ab8:	4a14      	ldr	r2, [pc, #80]	; (8006b0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006aba:	5cd3      	ldrb	r3, [r2, r3]
 8006abc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d008      	beq.n	8006ada <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006ac8:	4a0e      	ldr	r2, [pc, #56]	; (8006b04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	fb02 f303 	mul.w	r3, r2, r3
 8006ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad8:	e004      	b.n	8006ae4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	4a0c      	ldr	r2, [pc, #48]	; (8006b10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ade:	fb02 f303 	mul.w	r3, r2, r3
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	623b      	str	r3, [r7, #32]
      break;
 8006ae8:	e002      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006aea:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006aec:	623b      	str	r3, [r7, #32]
      break;
 8006aee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006af0:	6a3b      	ldr	r3, [r7, #32]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	372c      	adds	r7, #44	; 0x2c
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40021000 	.word	0x40021000
 8006b04:	00f42400 	.word	0x00f42400
 8006b08:	08009d24 	.word	0x08009d24
 8006b0c:	08009d34 	.word	0x08009d34
 8006b10:	003d0900 	.word	0x003d0900
 8006b14:	007a1200 	.word	0x007a1200

08006b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b092      	sub	sp, #72	; 0x48
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80d4 	beq.w	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b3c:	4b4e      	ldr	r3, [pc, #312]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10e      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b48:	4b4b      	ldr	r3, [pc, #300]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	4a4a      	ldr	r2, [pc, #296]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b52:	61d3      	str	r3, [r2, #28]
 8006b54:	4b48      	ldr	r3, [pc, #288]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b5c:	60bb      	str	r3, [r7, #8]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b66:	4b45      	ldr	r3, [pc, #276]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d118      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b72:	4b42      	ldr	r3, [pc, #264]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a41      	ldr	r2, [pc, #260]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b7e:	f7fd feb1 	bl	80048e4 <HAL_GetTick>
 8006b82:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b84:	e008      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b86:	f7fd fead 	bl	80048e4 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b64      	cmp	r3, #100	; 0x64
 8006b92:	d901      	bls.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e12d      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b98:	4b38      	ldr	r3, [pc, #224]	; (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0f0      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ba4:	4b34      	ldr	r3, [pc, #208]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8084 	beq.w	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d07c      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bc4:	4b2c      	ldr	r3, [pc, #176]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	fa93 f3a3 	rbit	r3, r3
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bde:	fab3 f383 	clz	r3, r3
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	4b26      	ldr	r3, [pc, #152]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	461a      	mov	r2, r3
 8006bee:	2301      	movs	r3, #1
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	fa93 f3a3 	rbit	r3, r3
 8006bfe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c02:	fab3 f383 	clz	r3, r3
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	461a      	mov	r2, r3
 8006c12:	2300      	movs	r3, #0
 8006c14:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d04b      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c26:	f7fd fe5d 	bl	80048e4 <HAL_GetTick>
 8006c2a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2c:	e00a      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c2e:	f7fd fe59 	bl	80048e4 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e0d7      	b.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006c44:	2302      	movs	r3, #2
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	fa93 f3a3 	rbit	r3, r3
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c50:	2302      	movs	r3, #2
 8006c52:	623b      	str	r3, [r7, #32]
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	fa93 f3a3 	rbit	r3, r3
 8006c5a:	61fb      	str	r3, [r7, #28]
  return result;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c5e:	fab3 f383 	clz	r3, r3
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f043 0302 	orr.w	r3, r3, #2
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d108      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006c72:	4b01      	ldr	r3, [pc, #4]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	e00d      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	40007000 	.word	0x40007000
 8006c80:	10908100 	.word	0x10908100
 8006c84:	2302      	movs	r3, #2
 8006c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	fa93 f3a3 	rbit	r3, r3
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	4b5a      	ldr	r3, [pc, #360]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	2202      	movs	r2, #2
 8006c96:	613a      	str	r2, [r7, #16]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	fa92 f2a2 	rbit	r2, r2
 8006c9e:	60fa      	str	r2, [r7, #12]
  return result;
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	fab2 f282 	clz	r2, r2
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	f002 021f 	and.w	r2, r2, #31
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0b7      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006cbe:	4b4f      	ldr	r3, [pc, #316]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	494c      	ldr	r1, [pc, #304]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006cd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d105      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cd8:	4b48      	ldr	r3, [pc, #288]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	4a47      	ldr	r2, [pc, #284]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cf0:	4b42      	ldr	r3, [pc, #264]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	f023 0203 	bic.w	r2, r3, #3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	493f      	ldr	r1, [pc, #252]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d008      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d0e:	4b3b      	ldr	r3, [pc, #236]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	4938      	ldr	r1, [pc, #224]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d008      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d2c:	4b33      	ldr	r3, [pc, #204]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	4930      	ldr	r1, [pc, #192]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d008      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d4a:	4b2c      	ldr	r3, [pc, #176]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	f023 0210 	bic.w	r2, r3, #16
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	4929      	ldr	r1, [pc, #164]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006d68:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	4921      	ldr	r1, [pc, #132]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d008      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d86:	4b1d      	ldr	r3, [pc, #116]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	f023 0220 	bic.w	r2, r3, #32
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	491a      	ldr	r1, [pc, #104]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d008      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	4912      	ldr	r1, [pc, #72]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d008      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8006dc2:	4b0e      	ldr	r3, [pc, #56]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	490b      	ldr	r1, [pc, #44]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006de0:	4b06      	ldr	r3, [pc, #24]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	4903      	ldr	r1, [pc, #12]	; (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3748      	adds	r7, #72	; 0x48
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40021000 	.word	0x40021000

08006e00 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e073      	b.n	8006efa <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fd fb27 	bl	80044a4 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8006e64:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6819      	ldr	r1, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006e8c:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8006ea0:	4b18      	ldr	r3, [pc, #96]	; (8006f04 <HAL_SDADC_Init+0x104>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d00f      	beq.n	8006ed0 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8006eb0:	4b14      	ldr	r3, [pc, #80]	; (8006f04 <HAL_SDADC_Init+0x104>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a13      	ldr	r2, [pc, #76]	; (8006f04 <HAL_SDADC_Init+0x104>)
 8006eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eba:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8006ebc:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <HAL_SDADC_Init+0x104>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	490f      	ldr	r1, [pc, #60]	; (8006f04 <HAL_SDADC_Init+0x104>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8006eca:	2002      	movs	r0, #2
 8006ecc:	f7fd fd16 	bl	80048fc <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0201 	orr.w	r2, r2, #1
 8006ede:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8006ee0:	bf00      	nop
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1f8      	bne.n	8006ee2 <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40016000 	.word	0x40016000

08006f08 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d002      	beq.n	8006f28 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
 8006f26:	e025      	b.n	8006f74 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fa59 	bl	80073e0 <SDADC_EnterInitMode>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d006      	beq.n	8006f42 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	22ff      	movs	r2, #255	; 0xff
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	75fb      	strb	r3, [r7, #23]
 8006f40:	e018      	b.n	8006f74 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8006f4c:	4413      	add	r3, r2
 8006f4e:	3320      	adds	r3, #32
 8006f50:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006f5a:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8006f60:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006f68:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8006f6a:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006f6c:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 fa59 	bl	8007426 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d002      	beq.n	8006fa0 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	75fb      	strb	r3, [r7, #23]
 8006f9e:	e037      	b.n	8007010 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 fa1d 	bl	80073e0 <SDADC_EnterInitMode>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d006      	beq.n	8006fba <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	22ff      	movs	r2, #255	; 0xff
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	75fb      	strb	r3, [r7, #23]
 8006fb8:	e02a      	b.n	8007010 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4a17      	ldr	r2, [pc, #92]	; (800701c <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01f      	beq.n	8007002 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	0c1b      	lsrs	r3, r3, #16
 8006fc6:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	f003 031f 	and.w	r3, r3, #31
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fdc:	43da      	mvns	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	400a      	ands	r2, r1
 8006fe4:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	f003 031f 	and.w	r3, r3, #31
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	409a      	lsls	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40
 8007000:	e003      	b.n	800700a <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	645a      	str	r2, [r3, #68]	; 0x44
      }      
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 fa0b 	bl	8007426 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	00080100 	.word	0x00080100

08007020 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d02a      	beq.n	8007090 <HAL_SDADC_ConfigChannel+0x70>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007040:	2bff      	cmp	r3, #255	; 0xff
 8007042:	d025      	beq.n	8007090 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 8007052:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d10c      	bne.n	8007074 <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);    
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <HAL_SDADC_ConfigChannel+0x84>)
 8007064:	400b      	ands	r3, r1
 8007066:	431a      	orrs	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007070:	605a      	str	r2, [r3, #4]
 8007072:	e009      	b.n	8007088 <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));    
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6859      	ldr	r1, [r3, #4]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	0c1b      	lsrs	r3, r3, #16
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	430b      	orrs	r3, r1
 8007086:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	619a      	str	r2, [r3, #24]
 800708e:	e001      	b.n	8007094 <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
}
 8007096:	4618      	mov	r0, r3
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	ffbf0000 	.word	0xffbf0000

080070a8 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d12c      	bne.n	800711a <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f98d 	bl	80073e0 <SDADC_EnterInitMode>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d006      	beq.n	80070da <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	22ff      	movs	r2, #255	; 0xff
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	73fb      	strb	r3, [r7, #15]
 80070d8:	e021      	b.n	800711e <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0206 	bic.w	r2, r2, #6
 80070e8:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6859      	ldr	r1, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f993 	bl	8007426 <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0210 	orr.w	r2, r2, #16
 800710e:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007118:	e001      	b.n	800711e <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007138:	2b02      	cmp	r3, #2
 800713a:	d001      	beq.n	8007140 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e028      	b.n	8007192 <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 8007140:	f7fd fbd0 	bl	80048e4 <HAL_GetTick>
 8007144:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8007146:	e010      	b.n	800716a <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714e:	d00c      	beq.n	800716a <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8007150:	f7fd fbc8 	bl	80048e4 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d302      	bcc.n	8007166 <HAL_SDADC_PollForCalibEvent+0x3e>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e013      	b.n	8007192 <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b01      	cmp	r3, #1
 8007176:	d1e7      	bne.n	8007148 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 8007190:	2300      	movs	r3, #0
  }
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_SDADC_Start_IT>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start_IT(SDADC_HandleTypeDef *hsdadc)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d004      	beq.n	80071b6 <HAL_SDADC_Start_IT+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d10d      	bne.n	80071d2 <HAL_SDADC_Start_IT+0x38>
  {
    /* Set REOCIE and ROVRIE bits in SDADC_CR1 register */
    hsdadc->Instance->CR1 |= (uint32_t) (SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0218 	orr.w	r2, r2, #24
 80071c4:	601a      	str	r2, [r3, #0]

    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f93f 	bl	800744a <SDADC_RegConvStart>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73fb      	strb	r3, [r7, #15]
 80071d0:	e001      	b.n	80071d6 <HAL_SDADC_Start_IT+0x3c>
  }
  else
  {
    status = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <HAL_SDADC_IRQHandler>:
  * @brief  This function handles the SDADC interrupts.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
void HAL_SDADC_IRQHandler(SDADC_HandleTypeDef* hsdadc)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	60fb      	str	r3, [r7, #12]
    
  /* Check if end of regular conversion */
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0308 	and.w	r3, r3, #8
 8007214:	2b08      	cmp	r3, #8
 8007216:	d125      	bne.n	8007264 <HAL_SDADC_IRQHandler+0x6a>
     ((tmp_isr & SDADC_ISR_REOCF) == SDADC_ISR_REOCF))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 0308 	and.w	r3, r3, #8
  if(((hsdadc->Instance->CR1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 800721e:	2b00      	cmp	r3, #0
 8007220:	d020      	beq.n	8007264 <HAL_SDADC_IRQHandler+0x6a>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ConvCpltCallback(hsdadc);
#else
    HAL_SDADC_ConvCpltCallback(hsdadc);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fa fda2 	bl	8001d6c <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* End of conversion if mode is not continuous and software trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f040 80b1 	bne.w	8007394 <HAL_SDADC_IRQHandler+0x19a>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8007236:	2b00      	cmp	r3, #0
 8007238:	f040 80ac 	bne.w	8007394 <HAL_SDADC_IRQHandler+0x19a>
    {
      /* Clear REOCIE and ROVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0218 	bic.w	r2, r2, #24
 800724a:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8007252:	2b03      	cmp	r3, #3
 8007254:	d101      	bne.n	800725a <HAL_SDADC_IRQHandler+0x60>
 8007256:	2201      	movs	r2, #1
 8007258:	e000      	b.n	800725c <HAL_SDADC_IRQHandler+0x62>
 800725a:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8007262:	e097      	b.n	8007394 <HAL_SDADC_IRQHandler+0x19a>
    }
  }
  /* Check if end of injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b02      	cmp	r3, #2
 8007270:	d136      	bne.n	80072e0 <HAL_SDADC_IRQHandler+0xe6>
          ((tmp_isr & SDADC_ISR_JEOCF) == SDADC_ISR_JEOCF))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f003 0302 	and.w	r3, r3, #2
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8007278:	2b00      	cmp	r3, #0
 800727a:	d031      	beq.n	80072e0 <HAL_SDADC_IRQHandler+0xe6>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->InjectedConvCpltCallback(hsdadc);
#else
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f89b 	bl	80073b8 <HAL_SDADC_InjectedConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	1e5a      	subs	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	625a      	str	r2, [r3, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	2b00      	cmp	r3, #0
 8007292:	d103      	bne.n	800729c <HAL_SDADC_IRQHandler+0xa2>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1a      	ldr	r2, [r3, #32]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* End of conversion if mode is not continuous, software trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d179      	bne.n	8007398 <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d175      	bne.n	8007398 <HAL_SDADC_IRQHandler+0x19e>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d16f      	bne.n	8007398 <HAL_SDADC_IRQHandler+0x19e>
    {
      /* Clear JEOCIE and JOVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0206 	bic.w	r2, r2, #6
 80072c6:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d101      	bne.n	80072d6 <HAL_SDADC_IRQHandler+0xdc>
 80072d2:	2201      	movs	r2, #1
 80072d4:	e000      	b.n	80072d8 <HAL_SDADC_IRQHandler+0xde>
 80072d6:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 80072de:	e05b      	b.n	8007398 <HAL_SDADC_IRQHandler+0x19e>
    }
  }
  /* Check if end of calibration */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d11c      	bne.n	8007328 <HAL_SDADC_IRQHandler+0x12e>
          ((tmp_isr & SDADC_ISR_EOCALF) == SDADC_ISR_EOCALF))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f003 0301 	and.w	r3, r3, #1
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d017      	beq.n	8007328 <HAL_SDADC_IRQHandler+0x12e>
  {
    /* Clear EOCALIE bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0201 	bic.w	r2, r2, #1
 8007306:	601a      	str	r2, [r3, #0]

    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	60da      	str	r2, [r3, #12]

    /* Call calibration callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->CalibrationCpltCallback(hsdadc);
#else
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f843 	bl	80073a4 <HAL_SDADC_CalibrationCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update SDADC state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007326:	e038      	b.n	800739a <HAL_SDADC_IRQHandler+0x1a0>
  }
  /* Check if overrun occurs during regular conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	2b10      	cmp	r3, #16
 8007334:	d113      	bne.n	800735e <HAL_SDADC_IRQHandler+0x164>
          ((tmp_isr & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 0310 	and.w	r3, r3, #16
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 800733c:	2b00      	cmp	r3, #0
 800733e:	d00e      	beq.n	800735e <HAL_SDADC_IRQHandler+0x164>
  {
    /* Set CLRROVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0210 	orr.w	r2, r2, #16
 800734e:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f838 	bl	80073cc <HAL_SDADC_ErrorCallback>
 800735c:	e01d      	b.n	800739a <HAL_SDADC_IRQHandler+0x1a0>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  }
  /* Check if overrun occurs during injected conversion */
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b04      	cmp	r3, #4
 800736a:	d117      	bne.n	800739c <HAL_SDADC_IRQHandler+0x1a2>
          ((tmp_isr & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f003 0304 	and.w	r3, r3, #4
  else if(((hsdadc->Instance->CR1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8007372:	2b00      	cmp	r3, #0
 8007374:	d012      	beq.n	800739c <HAL_SDADC_IRQHandler+0x1a2>
  {
    /* Set CLRJOVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0204 	orr.w	r2, r2, #4
 8007384:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2202      	movs	r2, #2
 800738a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f81d 	bl	80073cc <HAL_SDADC_ErrorCallback>
  else
  {
    /* No additional IRQ source */
  }
  
  return;
 8007392:	e002      	b.n	800739a <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8007394:	bf00      	nop
 8007396:	e000      	b.n	800739a <HAL_SDADC_IRQHandler+0x1a0>
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8007398:	bf00      	nop
  return;
 800739a:	bf00      	nop
 800739c:	bf00      	nop
}
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_SDADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_CalibrationCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_CalibrationCpltCallback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_SDADC_InjectedConvCpltCallback>:
            using HAL_SDADC_InjectedGetValue or HAL_SDADC_InjectedMultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_InjectedConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_InjectedConvCpltCallback could be implemented in the user file.
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80073f6:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 80073f8:	f7fd fa74 	bl	80048e4 <HAL_GetTick>
 80073fc:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80073fe:	e008      	b.n	8007412 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8007400:	f7fd fa70 	bl	80048e4 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2bc8      	cmp	r3, #200	; 0xc8
 800740c:	d901      	bls.n	8007412 <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e005      	b.n	800741e <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	daf1      	bge.n	8007400 <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800743c:	601a      	str	r2, [r3, #0]
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d108      	bne.n	8007470 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	e017      	b.n	80074a0 <SDADC_RegConvStart+0x56>
  }
  else /* synchronuous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff ffb5 	bl	80073e0 <SDADC_EnterInitMode>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d006      	beq.n	800748a <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	22ff      	movs	r2, #255	; 0xff
 8007480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	73fb      	strb	r3, [r7, #15]
 8007488:	e00a      	b.n	80074a0 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007498:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff ffc3 	bl	8007426 <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <SDADC_RegConvStart+0x6a>
 80074b0:	2203      	movs	r2, #3
 80074b2:	e000      	b.n	80074b6 <SDADC_RegConvStart+0x6c>
 80074b4:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e041      	b.n	800755c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d106      	bne.n	80074f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7fd f88d 	bl	800460c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2202      	movs	r2, #2
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3304      	adds	r3, #4
 8007502:	4619      	mov	r1, r3
 8007504:	4610      	mov	r0, r2
 8007506:	f000 fae9 	bl	8007adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	d001      	beq.n	800757c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e041      	b.n	8007600 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758c:	d01d      	beq.n	80075ca <HAL_TIM_Base_Start+0x66>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1e      	ldr	r2, [pc, #120]	; (800760c <HAL_TIM_Base_Start+0xa8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d018      	beq.n	80075ca <HAL_TIM_Base_Start+0x66>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1c      	ldr	r2, [pc, #112]	; (8007610 <HAL_TIM_Base_Start+0xac>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <HAL_TIM_Base_Start+0x66>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1b      	ldr	r2, [pc, #108]	; (8007614 <HAL_TIM_Base_Start+0xb0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00e      	beq.n	80075ca <HAL_TIM_Base_Start+0x66>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a19      	ldr	r2, [pc, #100]	; (8007618 <HAL_TIM_Base_Start+0xb4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d009      	beq.n	80075ca <HAL_TIM_Base_Start+0x66>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a18      	ldr	r2, [pc, #96]	; (800761c <HAL_TIM_Base_Start+0xb8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d004      	beq.n	80075ca <HAL_TIM_Base_Start+0x66>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a16      	ldr	r2, [pc, #88]	; (8007620 <HAL_TIM_Base_Start+0xbc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d111      	bne.n	80075ee <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b06      	cmp	r3, #6
 80075da:	d010      	beq.n	80075fe <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f042 0201 	orr.w	r2, r2, #1
 80075ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ec:	e007      	b.n	80075fe <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0201 	orr.w	r2, r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	40000400 	.word	0x40000400
 8007610:	40000800 	.word	0x40000800
 8007614:	40000c00 	.word	0x40000c00
 8007618:	40001800 	.word	0x40001800
 800761c:	40014000 	.word	0x40014000
 8007620:	40015c00 	.word	0x40015c00

08007624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d001      	beq.n	800763c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e049      	b.n	80076d0 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0201 	orr.w	r2, r2, #1
 8007652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765c:	d01d      	beq.n	800769a <HAL_TIM_Base_Start_IT+0x76>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1e      	ldr	r2, [pc, #120]	; (80076dc <HAL_TIM_Base_Start_IT+0xb8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d018      	beq.n	800769a <HAL_TIM_Base_Start_IT+0x76>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a1c      	ldr	r2, [pc, #112]	; (80076e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d013      	beq.n	800769a <HAL_TIM_Base_Start_IT+0x76>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a1b      	ldr	r2, [pc, #108]	; (80076e4 <HAL_TIM_Base_Start_IT+0xc0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00e      	beq.n	800769a <HAL_TIM_Base_Start_IT+0x76>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a19      	ldr	r2, [pc, #100]	; (80076e8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d009      	beq.n	800769a <HAL_TIM_Base_Start_IT+0x76>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a18      	ldr	r2, [pc, #96]	; (80076ec <HAL_TIM_Base_Start_IT+0xc8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d004      	beq.n	800769a <HAL_TIM_Base_Start_IT+0x76>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a16      	ldr	r2, [pc, #88]	; (80076f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d111      	bne.n	80076be <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b06      	cmp	r3, #6
 80076aa:	d010      	beq.n	80076ce <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0201 	orr.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076bc:	e007      	b.n	80076ce <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0201 	orr.w	r2, r2, #1
 80076cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	40000400 	.word	0x40000400
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40000c00 	.word	0x40000c00
 80076e8:	40001800 	.word	0x40001800
 80076ec:	40014000 	.word	0x40014000
 80076f0:	40015c00 	.word	0x40015c00

080076f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b02      	cmp	r3, #2
 8007708:	d122      	bne.n	8007750 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b02      	cmp	r3, #2
 8007716:	d11b      	bne.n	8007750 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0202 	mvn.w	r2, #2
 8007720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f9b2 	bl	8007aa0 <HAL_TIM_IC_CaptureCallback>
 800773c:	e005      	b.n	800774a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f9a4 	bl	8007a8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f9b5 	bl	8007ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b04      	cmp	r3, #4
 800775c:	d122      	bne.n	80077a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b04      	cmp	r3, #4
 800776a:	d11b      	bne.n	80077a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0204 	mvn.w	r2, #4
 8007774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2202      	movs	r2, #2
 800777a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f988 	bl	8007aa0 <HAL_TIM_IC_CaptureCallback>
 8007790:	e005      	b.n	800779e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f97a 	bl	8007a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f98b 	bl	8007ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0308 	and.w	r3, r3, #8
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d122      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d11b      	bne.n	80077f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f06f 0208 	mvn.w	r2, #8
 80077c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2204      	movs	r2, #4
 80077ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f95e 	bl	8007aa0 <HAL_TIM_IC_CaptureCallback>
 80077e4:	e005      	b.n	80077f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f950 	bl	8007a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f961 	bl	8007ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0310 	and.w	r3, r3, #16
 8007802:	2b10      	cmp	r3, #16
 8007804:	d122      	bne.n	800784c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f003 0310 	and.w	r3, r3, #16
 8007810:	2b10      	cmp	r3, #16
 8007812:	d11b      	bne.n	800784c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0210 	mvn.w	r2, #16
 800781c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2208      	movs	r2, #8
 8007822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f934 	bl	8007aa0 <HAL_TIM_IC_CaptureCallback>
 8007838:	e005      	b.n	8007846 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f926 	bl	8007a8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f937 	bl	8007ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b01      	cmp	r3, #1
 8007858:	d10e      	bne.n	8007878 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b01      	cmp	r3, #1
 8007866:	d107      	bne.n	8007878 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0201 	mvn.w	r2, #1
 8007870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fa fb60 	bl	8001f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007882:	2b80      	cmp	r3, #128	; 0x80
 8007884:	d10e      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007890:	2b80      	cmp	r3, #128	; 0x80
 8007892:	d107      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800789c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 face 	bl	8007e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ae:	2b40      	cmp	r3, #64	; 0x40
 80078b0:	d10e      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d107      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f8fc 	bl	8007ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b20      	cmp	r3, #32
 80078dc:	d10e      	bne.n	80078fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	2b20      	cmp	r3, #32
 80078ea:	d107      	bne.n	80078fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f06f 0220 	mvn.w	r2, #32
 80078f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa98 	bl	8007e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_TIM_ConfigClockSource+0x18>
 8007918:	2302      	movs	r3, #2
 800791a:	e0b3      	b.n	8007a84 <HAL_TIM_ConfigClockSource+0x180>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800793a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007942:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007954:	d03e      	beq.n	80079d4 <HAL_TIM_ConfigClockSource+0xd0>
 8007956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800795a:	f200 8087 	bhi.w	8007a6c <HAL_TIM_ConfigClockSource+0x168>
 800795e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007962:	f000 8085 	beq.w	8007a70 <HAL_TIM_ConfigClockSource+0x16c>
 8007966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796a:	d87f      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x168>
 800796c:	2b70      	cmp	r3, #112	; 0x70
 800796e:	d01a      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0xa2>
 8007970:	2b70      	cmp	r3, #112	; 0x70
 8007972:	d87b      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x168>
 8007974:	2b60      	cmp	r3, #96	; 0x60
 8007976:	d050      	beq.n	8007a1a <HAL_TIM_ConfigClockSource+0x116>
 8007978:	2b60      	cmp	r3, #96	; 0x60
 800797a:	d877      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x168>
 800797c:	2b50      	cmp	r3, #80	; 0x50
 800797e:	d03c      	beq.n	80079fa <HAL_TIM_ConfigClockSource+0xf6>
 8007980:	2b50      	cmp	r3, #80	; 0x50
 8007982:	d873      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x168>
 8007984:	2b40      	cmp	r3, #64	; 0x40
 8007986:	d058      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x136>
 8007988:	2b40      	cmp	r3, #64	; 0x40
 800798a:	d86f      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x168>
 800798c:	2b30      	cmp	r3, #48	; 0x30
 800798e:	d064      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x156>
 8007990:	2b30      	cmp	r3, #48	; 0x30
 8007992:	d86b      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x168>
 8007994:	2b20      	cmp	r3, #32
 8007996:	d060      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x156>
 8007998:	2b20      	cmp	r3, #32
 800799a:	d867      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x168>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d05c      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x156>
 80079a0:	2b10      	cmp	r3, #16
 80079a2:	d05a      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80079a4:	e062      	b.n	8007a6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6899      	ldr	r1, [r3, #8]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f000 f9a5 	bl	8007d04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	609a      	str	r2, [r3, #8]
      break;
 80079d2:	e04e      	b.n	8007a72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6818      	ldr	r0, [r3, #0]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	6899      	ldr	r1, [r3, #8]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f000 f98e 	bl	8007d04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f6:	609a      	str	r2, [r3, #8]
      break;
 80079f8:	e03b      	b.n	8007a72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6818      	ldr	r0, [r3, #0]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	6859      	ldr	r1, [r3, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f000 f902 	bl	8007c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2150      	movs	r1, #80	; 0x50
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 f95b 	bl	8007cce <TIM_ITRx_SetConfig>
      break;
 8007a18:	e02b      	b.n	8007a72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	6859      	ldr	r1, [r3, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f000 f921 	bl	8007c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2160      	movs	r1, #96	; 0x60
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 f94b 	bl	8007cce <TIM_ITRx_SetConfig>
      break;
 8007a38:	e01b      	b.n	8007a72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	6859      	ldr	r1, [r3, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f000 f8e2 	bl	8007c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2140      	movs	r1, #64	; 0x40
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f93b 	bl	8007cce <TIM_ITRx_SetConfig>
      break;
 8007a58:	e00b      	b.n	8007a72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	4610      	mov	r0, r2
 8007a66:	f000 f932 	bl	8007cce <TIM_ITRx_SetConfig>
        break;
 8007a6a:	e002      	b.n	8007a72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007a6c:	bf00      	nop
 8007a6e:	e000      	b.n	8007a72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007a70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af2:	d00f      	beq.n	8007b14 <TIM_Base_SetConfig+0x38>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a3c      	ldr	r2, [pc, #240]	; (8007be8 <TIM_Base_SetConfig+0x10c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00b      	beq.n	8007b14 <TIM_Base_SetConfig+0x38>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a3b      	ldr	r2, [pc, #236]	; (8007bec <TIM_Base_SetConfig+0x110>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d007      	beq.n	8007b14 <TIM_Base_SetConfig+0x38>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a3a      	ldr	r2, [pc, #232]	; (8007bf0 <TIM_Base_SetConfig+0x114>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_Base_SetConfig+0x38>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a39      	ldr	r2, [pc, #228]	; (8007bf4 <TIM_Base_SetConfig+0x118>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d108      	bne.n	8007b26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b2c:	d027      	beq.n	8007b7e <TIM_Base_SetConfig+0xa2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a2d      	ldr	r2, [pc, #180]	; (8007be8 <TIM_Base_SetConfig+0x10c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d023      	beq.n	8007b7e <TIM_Base_SetConfig+0xa2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2c      	ldr	r2, [pc, #176]	; (8007bec <TIM_Base_SetConfig+0x110>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d01f      	beq.n	8007b7e <TIM_Base_SetConfig+0xa2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a2b      	ldr	r2, [pc, #172]	; (8007bf0 <TIM_Base_SetConfig+0x114>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d01b      	beq.n	8007b7e <TIM_Base_SetConfig+0xa2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a2b      	ldr	r2, [pc, #172]	; (8007bf8 <TIM_Base_SetConfig+0x11c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d017      	beq.n	8007b7e <TIM_Base_SetConfig+0xa2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a2a      	ldr	r2, [pc, #168]	; (8007bfc <TIM_Base_SetConfig+0x120>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d013      	beq.n	8007b7e <TIM_Base_SetConfig+0xa2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a29      	ldr	r2, [pc, #164]	; (8007c00 <TIM_Base_SetConfig+0x124>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00f      	beq.n	8007b7e <TIM_Base_SetConfig+0xa2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a28      	ldr	r2, [pc, #160]	; (8007c04 <TIM_Base_SetConfig+0x128>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00b      	beq.n	8007b7e <TIM_Base_SetConfig+0xa2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a27      	ldr	r2, [pc, #156]	; (8007c08 <TIM_Base_SetConfig+0x12c>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d007      	beq.n	8007b7e <TIM_Base_SetConfig+0xa2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a26      	ldr	r2, [pc, #152]	; (8007c0c <TIM_Base_SetConfig+0x130>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d003      	beq.n	8007b7e <TIM_Base_SetConfig+0xa2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a1e      	ldr	r2, [pc, #120]	; (8007bf4 <TIM_Base_SetConfig+0x118>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d108      	bne.n	8007b90 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a13      	ldr	r2, [pc, #76]	; (8007c04 <TIM_Base_SetConfig+0x128>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d007      	beq.n	8007bcc <TIM_Base_SetConfig+0xf0>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a12      	ldr	r2, [pc, #72]	; (8007c08 <TIM_Base_SetConfig+0x12c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <TIM_Base_SetConfig+0xf0>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <TIM_Base_SetConfig+0x130>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d103      	bne.n	8007bd4 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	615a      	str	r2, [r3, #20]
}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40000400 	.word	0x40000400
 8007bec:	40000800 	.word	0x40000800
 8007bf0:	40000c00 	.word	0x40000c00
 8007bf4:	40015c00 	.word	0x40015c00
 8007bf8:	40001800 	.word	0x40001800
 8007bfc:	40001c00 	.word	0x40001c00
 8007c00:	40002000 	.word	0x40002000
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40014400 	.word	0x40014400
 8007c0c:	40014800 	.word	0x40014800

08007c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	f023 0201 	bic.w	r2, r3, #1
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f023 030a 	bic.w	r3, r3, #10
 8007c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	621a      	str	r2, [r3, #32]
}
 8007c62:	bf00      	nop
 8007c64:	371c      	adds	r7, #28
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b087      	sub	sp, #28
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f023 0210 	bic.w	r2, r3, #16
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	031b      	lsls	r3, r3, #12
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007caa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	621a      	str	r2, [r3, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	371c      	adds	r7, #28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f043 0307 	orr.w	r3, r3, #7
 8007cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	609a      	str	r2, [r3, #8]
}
 8007cf8:	bf00      	nop
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	021a      	lsls	r2, r3, #8
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	609a      	str	r2, [r3, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e055      	b.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9e:	d01d      	beq.n	8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a1b      	ldr	r2, [pc, #108]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d018      	beq.n	8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a1a      	ldr	r2, [pc, #104]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d013      	beq.n	8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a18      	ldr	r2, [pc, #96]	; (8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d00e      	beq.n	8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a17      	ldr	r2, [pc, #92]	; (8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d009      	beq.n	8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a15      	ldr	r2, [pc, #84]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d004      	beq.n	8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a14      	ldr	r2, [pc, #80]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d10c      	bne.n	8007df6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007de2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	40000400 	.word	0x40000400
 8007e18:	40000800 	.word	0x40000800
 8007e1c:	40000c00 	.word	0x40000c00
 8007e20:	40001800 	.word	0x40001800
 8007e24:	40014000 	.word	0x40014000
 8007e28:	40015c00 	.word	0x40015c00

08007e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <__errno>:
 8007e54:	4b01      	ldr	r3, [pc, #4]	; (8007e5c <__errno+0x8>)
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	20000184 	.word	0x20000184

08007e60 <__libc_init_array>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	4d0d      	ldr	r5, [pc, #52]	; (8007e98 <__libc_init_array+0x38>)
 8007e64:	4c0d      	ldr	r4, [pc, #52]	; (8007e9c <__libc_init_array+0x3c>)
 8007e66:	1b64      	subs	r4, r4, r5
 8007e68:	10a4      	asrs	r4, r4, #2
 8007e6a:	2600      	movs	r6, #0
 8007e6c:	42a6      	cmp	r6, r4
 8007e6e:	d109      	bne.n	8007e84 <__libc_init_array+0x24>
 8007e70:	4d0b      	ldr	r5, [pc, #44]	; (8007ea0 <__libc_init_array+0x40>)
 8007e72:	4c0c      	ldr	r4, [pc, #48]	; (8007ea4 <__libc_init_array+0x44>)
 8007e74:	f001 fe62 	bl	8009b3c <_init>
 8007e78:	1b64      	subs	r4, r4, r5
 8007e7a:	10a4      	asrs	r4, r4, #2
 8007e7c:	2600      	movs	r6, #0
 8007e7e:	42a6      	cmp	r6, r4
 8007e80:	d105      	bne.n	8007e8e <__libc_init_array+0x2e>
 8007e82:	bd70      	pop	{r4, r5, r6, pc}
 8007e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e88:	4798      	blx	r3
 8007e8a:	3601      	adds	r6, #1
 8007e8c:	e7ee      	b.n	8007e6c <__libc_init_array+0xc>
 8007e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e92:	4798      	blx	r3
 8007e94:	3601      	adds	r6, #1
 8007e96:	e7f2      	b.n	8007e7e <__libc_init_array+0x1e>
 8007e98:	08009db8 	.word	0x08009db8
 8007e9c:	08009db8 	.word	0x08009db8
 8007ea0:	08009db8 	.word	0x08009db8
 8007ea4:	08009dbc 	.word	0x08009dbc

08007ea8 <memset>:
 8007ea8:	4402      	add	r2, r0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d100      	bne.n	8007eb2 <memset+0xa>
 8007eb0:	4770      	bx	lr
 8007eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007eb6:	e7f9      	b.n	8007eac <memset+0x4>

08007eb8 <siprintf>:
 8007eb8:	b40e      	push	{r1, r2, r3}
 8007eba:	b500      	push	{lr}
 8007ebc:	b09c      	sub	sp, #112	; 0x70
 8007ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8007ec0:	9002      	str	r0, [sp, #8]
 8007ec2:	9006      	str	r0, [sp, #24]
 8007ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ec8:	4809      	ldr	r0, [pc, #36]	; (8007ef0 <siprintf+0x38>)
 8007eca:	9107      	str	r1, [sp, #28]
 8007ecc:	9104      	str	r1, [sp, #16]
 8007ece:	4909      	ldr	r1, [pc, #36]	; (8007ef4 <siprintf+0x3c>)
 8007ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed4:	9105      	str	r1, [sp, #20]
 8007ed6:	6800      	ldr	r0, [r0, #0]
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	a902      	add	r1, sp, #8
 8007edc:	f000 f8c2 	bl	8008064 <_svfiprintf_r>
 8007ee0:	9b02      	ldr	r3, [sp, #8]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	701a      	strb	r2, [r3, #0]
 8007ee6:	b01c      	add	sp, #112	; 0x70
 8007ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eec:	b003      	add	sp, #12
 8007eee:	4770      	bx	lr
 8007ef0:	20000184 	.word	0x20000184
 8007ef4:	ffff0208 	.word	0xffff0208

08007ef8 <strcat>:
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	4602      	mov	r2, r0
 8007efc:	7814      	ldrb	r4, [r2, #0]
 8007efe:	4613      	mov	r3, r2
 8007f00:	3201      	adds	r2, #1
 8007f02:	2c00      	cmp	r4, #0
 8007f04:	d1fa      	bne.n	8007efc <strcat+0x4>
 8007f06:	3b01      	subs	r3, #1
 8007f08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f10:	2a00      	cmp	r2, #0
 8007f12:	d1f9      	bne.n	8007f08 <strcat+0x10>
 8007f14:	bd10      	pop	{r4, pc}

08007f16 <strlcat>:
 8007f16:	b570      	push	{r4, r5, r6, lr}
 8007f18:	4604      	mov	r4, r0
 8007f1a:	1916      	adds	r6, r2, r4
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4621      	mov	r1, r4
 8007f20:	42b1      	cmp	r1, r6
 8007f22:	460b      	mov	r3, r1
 8007f24:	d106      	bne.n	8007f34 <strlcat+0x1e>
 8007f26:	1b1c      	subs	r4, r3, r4
 8007f28:	1b12      	subs	r2, r2, r4
 8007f2a:	d108      	bne.n	8007f3e <strlcat+0x28>
 8007f2c:	f7f8 f950 	bl	80001d0 <strlen>
 8007f30:	4420      	add	r0, r4
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	781d      	ldrb	r5, [r3, #0]
 8007f36:	3101      	adds	r1, #1
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	d1f1      	bne.n	8007f20 <strlcat+0xa>
 8007f3c:	e7f3      	b.n	8007f26 <strlcat+0x10>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	4631      	mov	r1, r6
 8007f42:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007f46:	b915      	cbnz	r5, 8007f4e <strlcat+0x38>
 8007f48:	701d      	strb	r5, [r3, #0]
 8007f4a:	1a08      	subs	r0, r1, r0
 8007f4c:	e7f0      	b.n	8007f30 <strlcat+0x1a>
 8007f4e:	2a01      	cmp	r2, #1
 8007f50:	bf1c      	itt	ne
 8007f52:	f803 5b01 	strbne.w	r5, [r3], #1
 8007f56:	f102 32ff 	addne.w	r2, r2, #4294967295
 8007f5a:	e7f1      	b.n	8007f40 <strlcat+0x2a>

08007f5c <strlcpy>:
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	460b      	mov	r3, r1
 8007f60:	b162      	cbz	r2, 8007f7c <strlcpy+0x20>
 8007f62:	3a01      	subs	r2, #1
 8007f64:	d008      	beq.n	8007f78 <strlcpy+0x1c>
 8007f66:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007f6a:	f800 4b01 	strb.w	r4, [r0], #1
 8007f6e:	2c00      	cmp	r4, #0
 8007f70:	d1f7      	bne.n	8007f62 <strlcpy+0x6>
 8007f72:	1a58      	subs	r0, r3, r1
 8007f74:	3801      	subs	r0, #1
 8007f76:	bd10      	pop	{r4, pc}
 8007f78:	2200      	movs	r2, #0
 8007f7a:	7002      	strb	r2, [r0, #0]
 8007f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	d1fb      	bne.n	8007f7c <strlcpy+0x20>
 8007f84:	e7f5      	b.n	8007f72 <strlcpy+0x16>

08007f86 <strncpy>:
 8007f86:	b510      	push	{r4, lr}
 8007f88:	3901      	subs	r1, #1
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	b132      	cbz	r2, 8007f9c <strncpy+0x16>
 8007f8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007f92:	f803 4b01 	strb.w	r4, [r3], #1
 8007f96:	3a01      	subs	r2, #1
 8007f98:	2c00      	cmp	r4, #0
 8007f9a:	d1f7      	bne.n	8007f8c <strncpy+0x6>
 8007f9c:	441a      	add	r2, r3
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d100      	bne.n	8007fa6 <strncpy+0x20>
 8007fa4:	bd10      	pop	{r4, pc}
 8007fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8007faa:	e7f9      	b.n	8007fa0 <strncpy+0x1a>

08007fac <__ssputs_r>:
 8007fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	688e      	ldr	r6, [r1, #8]
 8007fb2:	429e      	cmp	r6, r3
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	4690      	mov	r8, r2
 8007fba:	461f      	mov	r7, r3
 8007fbc:	d838      	bhi.n	8008030 <__ssputs_r+0x84>
 8007fbe:	898a      	ldrh	r2, [r1, #12]
 8007fc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fc4:	d032      	beq.n	800802c <__ssputs_r+0x80>
 8007fc6:	6825      	ldr	r5, [r4, #0]
 8007fc8:	6909      	ldr	r1, [r1, #16]
 8007fca:	eba5 0901 	sub.w	r9, r5, r1
 8007fce:	6965      	ldr	r5, [r4, #20]
 8007fd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fd8:	3301      	adds	r3, #1
 8007fda:	444b      	add	r3, r9
 8007fdc:	106d      	asrs	r5, r5, #1
 8007fde:	429d      	cmp	r5, r3
 8007fe0:	bf38      	it	cc
 8007fe2:	461d      	movcc	r5, r3
 8007fe4:	0553      	lsls	r3, r2, #21
 8007fe6:	d531      	bpl.n	800804c <__ssputs_r+0xa0>
 8007fe8:	4629      	mov	r1, r5
 8007fea:	f000 fb47 	bl	800867c <_malloc_r>
 8007fee:	4606      	mov	r6, r0
 8007ff0:	b950      	cbnz	r0, 8008008 <__ssputs_r+0x5c>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	f8ca 3000 	str.w	r3, [sl]
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ffe:	81a3      	strh	r3, [r4, #12]
 8008000:	f04f 30ff 	mov.w	r0, #4294967295
 8008004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008008:	6921      	ldr	r1, [r4, #16]
 800800a:	464a      	mov	r2, r9
 800800c:	f000 fabe 	bl	800858c <memcpy>
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801a:	81a3      	strh	r3, [r4, #12]
 800801c:	6126      	str	r6, [r4, #16]
 800801e:	6165      	str	r5, [r4, #20]
 8008020:	444e      	add	r6, r9
 8008022:	eba5 0509 	sub.w	r5, r5, r9
 8008026:	6026      	str	r6, [r4, #0]
 8008028:	60a5      	str	r5, [r4, #8]
 800802a:	463e      	mov	r6, r7
 800802c:	42be      	cmp	r6, r7
 800802e:	d900      	bls.n	8008032 <__ssputs_r+0x86>
 8008030:	463e      	mov	r6, r7
 8008032:	4632      	mov	r2, r6
 8008034:	6820      	ldr	r0, [r4, #0]
 8008036:	4641      	mov	r1, r8
 8008038:	f000 fab6 	bl	80085a8 <memmove>
 800803c:	68a3      	ldr	r3, [r4, #8]
 800803e:	6822      	ldr	r2, [r4, #0]
 8008040:	1b9b      	subs	r3, r3, r6
 8008042:	4432      	add	r2, r6
 8008044:	60a3      	str	r3, [r4, #8]
 8008046:	6022      	str	r2, [r4, #0]
 8008048:	2000      	movs	r0, #0
 800804a:	e7db      	b.n	8008004 <__ssputs_r+0x58>
 800804c:	462a      	mov	r2, r5
 800804e:	f000 fb6f 	bl	8008730 <_realloc_r>
 8008052:	4606      	mov	r6, r0
 8008054:	2800      	cmp	r0, #0
 8008056:	d1e1      	bne.n	800801c <__ssputs_r+0x70>
 8008058:	6921      	ldr	r1, [r4, #16]
 800805a:	4650      	mov	r0, sl
 800805c:	f000 fabe 	bl	80085dc <_free_r>
 8008060:	e7c7      	b.n	8007ff2 <__ssputs_r+0x46>
	...

08008064 <_svfiprintf_r>:
 8008064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	4698      	mov	r8, r3
 800806a:	898b      	ldrh	r3, [r1, #12]
 800806c:	061b      	lsls	r3, r3, #24
 800806e:	b09d      	sub	sp, #116	; 0x74
 8008070:	4607      	mov	r7, r0
 8008072:	460d      	mov	r5, r1
 8008074:	4614      	mov	r4, r2
 8008076:	d50e      	bpl.n	8008096 <_svfiprintf_r+0x32>
 8008078:	690b      	ldr	r3, [r1, #16]
 800807a:	b963      	cbnz	r3, 8008096 <_svfiprintf_r+0x32>
 800807c:	2140      	movs	r1, #64	; 0x40
 800807e:	f000 fafd 	bl	800867c <_malloc_r>
 8008082:	6028      	str	r0, [r5, #0]
 8008084:	6128      	str	r0, [r5, #16]
 8008086:	b920      	cbnz	r0, 8008092 <_svfiprintf_r+0x2e>
 8008088:	230c      	movs	r3, #12
 800808a:	603b      	str	r3, [r7, #0]
 800808c:	f04f 30ff 	mov.w	r0, #4294967295
 8008090:	e0d1      	b.n	8008236 <_svfiprintf_r+0x1d2>
 8008092:	2340      	movs	r3, #64	; 0x40
 8008094:	616b      	str	r3, [r5, #20]
 8008096:	2300      	movs	r3, #0
 8008098:	9309      	str	r3, [sp, #36]	; 0x24
 800809a:	2320      	movs	r3, #32
 800809c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80080a4:	2330      	movs	r3, #48	; 0x30
 80080a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008250 <_svfiprintf_r+0x1ec>
 80080aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ae:	f04f 0901 	mov.w	r9, #1
 80080b2:	4623      	mov	r3, r4
 80080b4:	469a      	mov	sl, r3
 80080b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ba:	b10a      	cbz	r2, 80080c0 <_svfiprintf_r+0x5c>
 80080bc:	2a25      	cmp	r2, #37	; 0x25
 80080be:	d1f9      	bne.n	80080b4 <_svfiprintf_r+0x50>
 80080c0:	ebba 0b04 	subs.w	fp, sl, r4
 80080c4:	d00b      	beq.n	80080de <_svfiprintf_r+0x7a>
 80080c6:	465b      	mov	r3, fp
 80080c8:	4622      	mov	r2, r4
 80080ca:	4629      	mov	r1, r5
 80080cc:	4638      	mov	r0, r7
 80080ce:	f7ff ff6d 	bl	8007fac <__ssputs_r>
 80080d2:	3001      	adds	r0, #1
 80080d4:	f000 80aa 	beq.w	800822c <_svfiprintf_r+0x1c8>
 80080d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080da:	445a      	add	r2, fp
 80080dc:	9209      	str	r2, [sp, #36]	; 0x24
 80080de:	f89a 3000 	ldrb.w	r3, [sl]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 80a2 	beq.w	800822c <_svfiprintf_r+0x1c8>
 80080e8:	2300      	movs	r3, #0
 80080ea:	f04f 32ff 	mov.w	r2, #4294967295
 80080ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080f2:	f10a 0a01 	add.w	sl, sl, #1
 80080f6:	9304      	str	r3, [sp, #16]
 80080f8:	9307      	str	r3, [sp, #28]
 80080fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008100:	4654      	mov	r4, sl
 8008102:	2205      	movs	r2, #5
 8008104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008108:	4851      	ldr	r0, [pc, #324]	; (8008250 <_svfiprintf_r+0x1ec>)
 800810a:	f7f8 f869 	bl	80001e0 <memchr>
 800810e:	9a04      	ldr	r2, [sp, #16]
 8008110:	b9d8      	cbnz	r0, 800814a <_svfiprintf_r+0xe6>
 8008112:	06d0      	lsls	r0, r2, #27
 8008114:	bf44      	itt	mi
 8008116:	2320      	movmi	r3, #32
 8008118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800811c:	0711      	lsls	r1, r2, #28
 800811e:	bf44      	itt	mi
 8008120:	232b      	movmi	r3, #43	; 0x2b
 8008122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008126:	f89a 3000 	ldrb.w	r3, [sl]
 800812a:	2b2a      	cmp	r3, #42	; 0x2a
 800812c:	d015      	beq.n	800815a <_svfiprintf_r+0xf6>
 800812e:	9a07      	ldr	r2, [sp, #28]
 8008130:	4654      	mov	r4, sl
 8008132:	2000      	movs	r0, #0
 8008134:	f04f 0c0a 	mov.w	ip, #10
 8008138:	4621      	mov	r1, r4
 800813a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800813e:	3b30      	subs	r3, #48	; 0x30
 8008140:	2b09      	cmp	r3, #9
 8008142:	d94e      	bls.n	80081e2 <_svfiprintf_r+0x17e>
 8008144:	b1b0      	cbz	r0, 8008174 <_svfiprintf_r+0x110>
 8008146:	9207      	str	r2, [sp, #28]
 8008148:	e014      	b.n	8008174 <_svfiprintf_r+0x110>
 800814a:	eba0 0308 	sub.w	r3, r0, r8
 800814e:	fa09 f303 	lsl.w	r3, r9, r3
 8008152:	4313      	orrs	r3, r2
 8008154:	9304      	str	r3, [sp, #16]
 8008156:	46a2      	mov	sl, r4
 8008158:	e7d2      	b.n	8008100 <_svfiprintf_r+0x9c>
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	1d19      	adds	r1, r3, #4
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	9103      	str	r1, [sp, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	bfbb      	ittet	lt
 8008166:	425b      	neglt	r3, r3
 8008168:	f042 0202 	orrlt.w	r2, r2, #2
 800816c:	9307      	strge	r3, [sp, #28]
 800816e:	9307      	strlt	r3, [sp, #28]
 8008170:	bfb8      	it	lt
 8008172:	9204      	strlt	r2, [sp, #16]
 8008174:	7823      	ldrb	r3, [r4, #0]
 8008176:	2b2e      	cmp	r3, #46	; 0x2e
 8008178:	d10c      	bne.n	8008194 <_svfiprintf_r+0x130>
 800817a:	7863      	ldrb	r3, [r4, #1]
 800817c:	2b2a      	cmp	r3, #42	; 0x2a
 800817e:	d135      	bne.n	80081ec <_svfiprintf_r+0x188>
 8008180:	9b03      	ldr	r3, [sp, #12]
 8008182:	1d1a      	adds	r2, r3, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	9203      	str	r2, [sp, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	bfb8      	it	lt
 800818c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008190:	3402      	adds	r4, #2
 8008192:	9305      	str	r3, [sp, #20]
 8008194:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008260 <_svfiprintf_r+0x1fc>
 8008198:	7821      	ldrb	r1, [r4, #0]
 800819a:	2203      	movs	r2, #3
 800819c:	4650      	mov	r0, sl
 800819e:	f7f8 f81f 	bl	80001e0 <memchr>
 80081a2:	b140      	cbz	r0, 80081b6 <_svfiprintf_r+0x152>
 80081a4:	2340      	movs	r3, #64	; 0x40
 80081a6:	eba0 000a 	sub.w	r0, r0, sl
 80081aa:	fa03 f000 	lsl.w	r0, r3, r0
 80081ae:	9b04      	ldr	r3, [sp, #16]
 80081b0:	4303      	orrs	r3, r0
 80081b2:	3401      	adds	r4, #1
 80081b4:	9304      	str	r3, [sp, #16]
 80081b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ba:	4826      	ldr	r0, [pc, #152]	; (8008254 <_svfiprintf_r+0x1f0>)
 80081bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081c0:	2206      	movs	r2, #6
 80081c2:	f7f8 f80d 	bl	80001e0 <memchr>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d038      	beq.n	800823c <_svfiprintf_r+0x1d8>
 80081ca:	4b23      	ldr	r3, [pc, #140]	; (8008258 <_svfiprintf_r+0x1f4>)
 80081cc:	bb1b      	cbnz	r3, 8008216 <_svfiprintf_r+0x1b2>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	3307      	adds	r3, #7
 80081d2:	f023 0307 	bic.w	r3, r3, #7
 80081d6:	3308      	adds	r3, #8
 80081d8:	9303      	str	r3, [sp, #12]
 80081da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081dc:	4433      	add	r3, r6
 80081de:	9309      	str	r3, [sp, #36]	; 0x24
 80081e0:	e767      	b.n	80080b2 <_svfiprintf_r+0x4e>
 80081e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081e6:	460c      	mov	r4, r1
 80081e8:	2001      	movs	r0, #1
 80081ea:	e7a5      	b.n	8008138 <_svfiprintf_r+0xd4>
 80081ec:	2300      	movs	r3, #0
 80081ee:	3401      	adds	r4, #1
 80081f0:	9305      	str	r3, [sp, #20]
 80081f2:	4619      	mov	r1, r3
 80081f4:	f04f 0c0a 	mov.w	ip, #10
 80081f8:	4620      	mov	r0, r4
 80081fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081fe:	3a30      	subs	r2, #48	; 0x30
 8008200:	2a09      	cmp	r2, #9
 8008202:	d903      	bls.n	800820c <_svfiprintf_r+0x1a8>
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0c5      	beq.n	8008194 <_svfiprintf_r+0x130>
 8008208:	9105      	str	r1, [sp, #20]
 800820a:	e7c3      	b.n	8008194 <_svfiprintf_r+0x130>
 800820c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008210:	4604      	mov	r4, r0
 8008212:	2301      	movs	r3, #1
 8008214:	e7f0      	b.n	80081f8 <_svfiprintf_r+0x194>
 8008216:	ab03      	add	r3, sp, #12
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	462a      	mov	r2, r5
 800821c:	4b0f      	ldr	r3, [pc, #60]	; (800825c <_svfiprintf_r+0x1f8>)
 800821e:	a904      	add	r1, sp, #16
 8008220:	4638      	mov	r0, r7
 8008222:	f3af 8000 	nop.w
 8008226:	1c42      	adds	r2, r0, #1
 8008228:	4606      	mov	r6, r0
 800822a:	d1d6      	bne.n	80081da <_svfiprintf_r+0x176>
 800822c:	89ab      	ldrh	r3, [r5, #12]
 800822e:	065b      	lsls	r3, r3, #25
 8008230:	f53f af2c 	bmi.w	800808c <_svfiprintf_r+0x28>
 8008234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008236:	b01d      	add	sp, #116	; 0x74
 8008238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823c:	ab03      	add	r3, sp, #12
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	462a      	mov	r2, r5
 8008242:	4b06      	ldr	r3, [pc, #24]	; (800825c <_svfiprintf_r+0x1f8>)
 8008244:	a904      	add	r1, sp, #16
 8008246:	4638      	mov	r0, r7
 8008248:	f000 f87a 	bl	8008340 <_printf_i>
 800824c:	e7eb      	b.n	8008226 <_svfiprintf_r+0x1c2>
 800824e:	bf00      	nop
 8008250:	08009d44 	.word	0x08009d44
 8008254:	08009d4e 	.word	0x08009d4e
 8008258:	00000000 	.word	0x00000000
 800825c:	08007fad 	.word	0x08007fad
 8008260:	08009d4a 	.word	0x08009d4a

08008264 <_printf_common>:
 8008264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008268:	4616      	mov	r6, r2
 800826a:	4699      	mov	r9, r3
 800826c:	688a      	ldr	r2, [r1, #8]
 800826e:	690b      	ldr	r3, [r1, #16]
 8008270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008274:	4293      	cmp	r3, r2
 8008276:	bfb8      	it	lt
 8008278:	4613      	movlt	r3, r2
 800827a:	6033      	str	r3, [r6, #0]
 800827c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008280:	4607      	mov	r7, r0
 8008282:	460c      	mov	r4, r1
 8008284:	b10a      	cbz	r2, 800828a <_printf_common+0x26>
 8008286:	3301      	adds	r3, #1
 8008288:	6033      	str	r3, [r6, #0]
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	0699      	lsls	r1, r3, #26
 800828e:	bf42      	ittt	mi
 8008290:	6833      	ldrmi	r3, [r6, #0]
 8008292:	3302      	addmi	r3, #2
 8008294:	6033      	strmi	r3, [r6, #0]
 8008296:	6825      	ldr	r5, [r4, #0]
 8008298:	f015 0506 	ands.w	r5, r5, #6
 800829c:	d106      	bne.n	80082ac <_printf_common+0x48>
 800829e:	f104 0a19 	add.w	sl, r4, #25
 80082a2:	68e3      	ldr	r3, [r4, #12]
 80082a4:	6832      	ldr	r2, [r6, #0]
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	42ab      	cmp	r3, r5
 80082aa:	dc26      	bgt.n	80082fa <_printf_common+0x96>
 80082ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082b0:	1e13      	subs	r3, r2, #0
 80082b2:	6822      	ldr	r2, [r4, #0]
 80082b4:	bf18      	it	ne
 80082b6:	2301      	movne	r3, #1
 80082b8:	0692      	lsls	r2, r2, #26
 80082ba:	d42b      	bmi.n	8008314 <_printf_common+0xb0>
 80082bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082c0:	4649      	mov	r1, r9
 80082c2:	4638      	mov	r0, r7
 80082c4:	47c0      	blx	r8
 80082c6:	3001      	adds	r0, #1
 80082c8:	d01e      	beq.n	8008308 <_printf_common+0xa4>
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	68e5      	ldr	r5, [r4, #12]
 80082ce:	6832      	ldr	r2, [r6, #0]
 80082d0:	f003 0306 	and.w	r3, r3, #6
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	bf08      	it	eq
 80082d8:	1aad      	subeq	r5, r5, r2
 80082da:	68a3      	ldr	r3, [r4, #8]
 80082dc:	6922      	ldr	r2, [r4, #16]
 80082de:	bf0c      	ite	eq
 80082e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082e4:	2500      	movne	r5, #0
 80082e6:	4293      	cmp	r3, r2
 80082e8:	bfc4      	itt	gt
 80082ea:	1a9b      	subgt	r3, r3, r2
 80082ec:	18ed      	addgt	r5, r5, r3
 80082ee:	2600      	movs	r6, #0
 80082f0:	341a      	adds	r4, #26
 80082f2:	42b5      	cmp	r5, r6
 80082f4:	d11a      	bne.n	800832c <_printf_common+0xc8>
 80082f6:	2000      	movs	r0, #0
 80082f8:	e008      	b.n	800830c <_printf_common+0xa8>
 80082fa:	2301      	movs	r3, #1
 80082fc:	4652      	mov	r2, sl
 80082fe:	4649      	mov	r1, r9
 8008300:	4638      	mov	r0, r7
 8008302:	47c0      	blx	r8
 8008304:	3001      	adds	r0, #1
 8008306:	d103      	bne.n	8008310 <_printf_common+0xac>
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008310:	3501      	adds	r5, #1
 8008312:	e7c6      	b.n	80082a2 <_printf_common+0x3e>
 8008314:	18e1      	adds	r1, r4, r3
 8008316:	1c5a      	adds	r2, r3, #1
 8008318:	2030      	movs	r0, #48	; 0x30
 800831a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800831e:	4422      	add	r2, r4
 8008320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008328:	3302      	adds	r3, #2
 800832a:	e7c7      	b.n	80082bc <_printf_common+0x58>
 800832c:	2301      	movs	r3, #1
 800832e:	4622      	mov	r2, r4
 8008330:	4649      	mov	r1, r9
 8008332:	4638      	mov	r0, r7
 8008334:	47c0      	blx	r8
 8008336:	3001      	adds	r0, #1
 8008338:	d0e6      	beq.n	8008308 <_printf_common+0xa4>
 800833a:	3601      	adds	r6, #1
 800833c:	e7d9      	b.n	80082f2 <_printf_common+0x8e>
	...

08008340 <_printf_i>:
 8008340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	460c      	mov	r4, r1
 8008346:	4691      	mov	r9, r2
 8008348:	7e27      	ldrb	r7, [r4, #24]
 800834a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800834c:	2f78      	cmp	r7, #120	; 0x78
 800834e:	4680      	mov	r8, r0
 8008350:	469a      	mov	sl, r3
 8008352:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008356:	d807      	bhi.n	8008368 <_printf_i+0x28>
 8008358:	2f62      	cmp	r7, #98	; 0x62
 800835a:	d80a      	bhi.n	8008372 <_printf_i+0x32>
 800835c:	2f00      	cmp	r7, #0
 800835e:	f000 80d8 	beq.w	8008512 <_printf_i+0x1d2>
 8008362:	2f58      	cmp	r7, #88	; 0x58
 8008364:	f000 80a3 	beq.w	80084ae <_printf_i+0x16e>
 8008368:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800836c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008370:	e03a      	b.n	80083e8 <_printf_i+0xa8>
 8008372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008376:	2b15      	cmp	r3, #21
 8008378:	d8f6      	bhi.n	8008368 <_printf_i+0x28>
 800837a:	a001      	add	r0, pc, #4	; (adr r0, 8008380 <_printf_i+0x40>)
 800837c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008380:	080083d9 	.word	0x080083d9
 8008384:	080083ed 	.word	0x080083ed
 8008388:	08008369 	.word	0x08008369
 800838c:	08008369 	.word	0x08008369
 8008390:	08008369 	.word	0x08008369
 8008394:	08008369 	.word	0x08008369
 8008398:	080083ed 	.word	0x080083ed
 800839c:	08008369 	.word	0x08008369
 80083a0:	08008369 	.word	0x08008369
 80083a4:	08008369 	.word	0x08008369
 80083a8:	08008369 	.word	0x08008369
 80083ac:	080084f9 	.word	0x080084f9
 80083b0:	0800841d 	.word	0x0800841d
 80083b4:	080084db 	.word	0x080084db
 80083b8:	08008369 	.word	0x08008369
 80083bc:	08008369 	.word	0x08008369
 80083c0:	0800851b 	.word	0x0800851b
 80083c4:	08008369 	.word	0x08008369
 80083c8:	0800841d 	.word	0x0800841d
 80083cc:	08008369 	.word	0x08008369
 80083d0:	08008369 	.word	0x08008369
 80083d4:	080084e3 	.word	0x080084e3
 80083d8:	680b      	ldr	r3, [r1, #0]
 80083da:	1d1a      	adds	r2, r3, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	600a      	str	r2, [r1, #0]
 80083e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083e8:	2301      	movs	r3, #1
 80083ea:	e0a3      	b.n	8008534 <_printf_i+0x1f4>
 80083ec:	6825      	ldr	r5, [r4, #0]
 80083ee:	6808      	ldr	r0, [r1, #0]
 80083f0:	062e      	lsls	r6, r5, #24
 80083f2:	f100 0304 	add.w	r3, r0, #4
 80083f6:	d50a      	bpl.n	800840e <_printf_i+0xce>
 80083f8:	6805      	ldr	r5, [r0, #0]
 80083fa:	600b      	str	r3, [r1, #0]
 80083fc:	2d00      	cmp	r5, #0
 80083fe:	da03      	bge.n	8008408 <_printf_i+0xc8>
 8008400:	232d      	movs	r3, #45	; 0x2d
 8008402:	426d      	negs	r5, r5
 8008404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008408:	485e      	ldr	r0, [pc, #376]	; (8008584 <_printf_i+0x244>)
 800840a:	230a      	movs	r3, #10
 800840c:	e019      	b.n	8008442 <_printf_i+0x102>
 800840e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008412:	6805      	ldr	r5, [r0, #0]
 8008414:	600b      	str	r3, [r1, #0]
 8008416:	bf18      	it	ne
 8008418:	b22d      	sxthne	r5, r5
 800841a:	e7ef      	b.n	80083fc <_printf_i+0xbc>
 800841c:	680b      	ldr	r3, [r1, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	1d18      	adds	r0, r3, #4
 8008422:	6008      	str	r0, [r1, #0]
 8008424:	0628      	lsls	r0, r5, #24
 8008426:	d501      	bpl.n	800842c <_printf_i+0xec>
 8008428:	681d      	ldr	r5, [r3, #0]
 800842a:	e002      	b.n	8008432 <_printf_i+0xf2>
 800842c:	0669      	lsls	r1, r5, #25
 800842e:	d5fb      	bpl.n	8008428 <_printf_i+0xe8>
 8008430:	881d      	ldrh	r5, [r3, #0]
 8008432:	4854      	ldr	r0, [pc, #336]	; (8008584 <_printf_i+0x244>)
 8008434:	2f6f      	cmp	r7, #111	; 0x6f
 8008436:	bf0c      	ite	eq
 8008438:	2308      	moveq	r3, #8
 800843a:	230a      	movne	r3, #10
 800843c:	2100      	movs	r1, #0
 800843e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008442:	6866      	ldr	r6, [r4, #4]
 8008444:	60a6      	str	r6, [r4, #8]
 8008446:	2e00      	cmp	r6, #0
 8008448:	bfa2      	ittt	ge
 800844a:	6821      	ldrge	r1, [r4, #0]
 800844c:	f021 0104 	bicge.w	r1, r1, #4
 8008450:	6021      	strge	r1, [r4, #0]
 8008452:	b90d      	cbnz	r5, 8008458 <_printf_i+0x118>
 8008454:	2e00      	cmp	r6, #0
 8008456:	d04d      	beq.n	80084f4 <_printf_i+0x1b4>
 8008458:	4616      	mov	r6, r2
 800845a:	fbb5 f1f3 	udiv	r1, r5, r3
 800845e:	fb03 5711 	mls	r7, r3, r1, r5
 8008462:	5dc7      	ldrb	r7, [r0, r7]
 8008464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008468:	462f      	mov	r7, r5
 800846a:	42bb      	cmp	r3, r7
 800846c:	460d      	mov	r5, r1
 800846e:	d9f4      	bls.n	800845a <_printf_i+0x11a>
 8008470:	2b08      	cmp	r3, #8
 8008472:	d10b      	bne.n	800848c <_printf_i+0x14c>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	07df      	lsls	r7, r3, #31
 8008478:	d508      	bpl.n	800848c <_printf_i+0x14c>
 800847a:	6923      	ldr	r3, [r4, #16]
 800847c:	6861      	ldr	r1, [r4, #4]
 800847e:	4299      	cmp	r1, r3
 8008480:	bfde      	ittt	le
 8008482:	2330      	movle	r3, #48	; 0x30
 8008484:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800848c:	1b92      	subs	r2, r2, r6
 800848e:	6122      	str	r2, [r4, #16]
 8008490:	f8cd a000 	str.w	sl, [sp]
 8008494:	464b      	mov	r3, r9
 8008496:	aa03      	add	r2, sp, #12
 8008498:	4621      	mov	r1, r4
 800849a:	4640      	mov	r0, r8
 800849c:	f7ff fee2 	bl	8008264 <_printf_common>
 80084a0:	3001      	adds	r0, #1
 80084a2:	d14c      	bne.n	800853e <_printf_i+0x1fe>
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	b004      	add	sp, #16
 80084aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ae:	4835      	ldr	r0, [pc, #212]	; (8008584 <_printf_i+0x244>)
 80084b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	680e      	ldr	r6, [r1, #0]
 80084b8:	061f      	lsls	r7, r3, #24
 80084ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80084be:	600e      	str	r6, [r1, #0]
 80084c0:	d514      	bpl.n	80084ec <_printf_i+0x1ac>
 80084c2:	07d9      	lsls	r1, r3, #31
 80084c4:	bf44      	itt	mi
 80084c6:	f043 0320 	orrmi.w	r3, r3, #32
 80084ca:	6023      	strmi	r3, [r4, #0]
 80084cc:	b91d      	cbnz	r5, 80084d6 <_printf_i+0x196>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	f023 0320 	bic.w	r3, r3, #32
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	2310      	movs	r3, #16
 80084d8:	e7b0      	b.n	800843c <_printf_i+0xfc>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	f043 0320 	orr.w	r3, r3, #32
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	2378      	movs	r3, #120	; 0x78
 80084e4:	4828      	ldr	r0, [pc, #160]	; (8008588 <_printf_i+0x248>)
 80084e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084ea:	e7e3      	b.n	80084b4 <_printf_i+0x174>
 80084ec:	065e      	lsls	r6, r3, #25
 80084ee:	bf48      	it	mi
 80084f0:	b2ad      	uxthmi	r5, r5
 80084f2:	e7e6      	b.n	80084c2 <_printf_i+0x182>
 80084f4:	4616      	mov	r6, r2
 80084f6:	e7bb      	b.n	8008470 <_printf_i+0x130>
 80084f8:	680b      	ldr	r3, [r1, #0]
 80084fa:	6826      	ldr	r6, [r4, #0]
 80084fc:	6960      	ldr	r0, [r4, #20]
 80084fe:	1d1d      	adds	r5, r3, #4
 8008500:	600d      	str	r5, [r1, #0]
 8008502:	0635      	lsls	r5, r6, #24
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	d501      	bpl.n	800850c <_printf_i+0x1cc>
 8008508:	6018      	str	r0, [r3, #0]
 800850a:	e002      	b.n	8008512 <_printf_i+0x1d2>
 800850c:	0671      	lsls	r1, r6, #25
 800850e:	d5fb      	bpl.n	8008508 <_printf_i+0x1c8>
 8008510:	8018      	strh	r0, [r3, #0]
 8008512:	2300      	movs	r3, #0
 8008514:	6123      	str	r3, [r4, #16]
 8008516:	4616      	mov	r6, r2
 8008518:	e7ba      	b.n	8008490 <_printf_i+0x150>
 800851a:	680b      	ldr	r3, [r1, #0]
 800851c:	1d1a      	adds	r2, r3, #4
 800851e:	600a      	str	r2, [r1, #0]
 8008520:	681e      	ldr	r6, [r3, #0]
 8008522:	6862      	ldr	r2, [r4, #4]
 8008524:	2100      	movs	r1, #0
 8008526:	4630      	mov	r0, r6
 8008528:	f7f7 fe5a 	bl	80001e0 <memchr>
 800852c:	b108      	cbz	r0, 8008532 <_printf_i+0x1f2>
 800852e:	1b80      	subs	r0, r0, r6
 8008530:	6060      	str	r0, [r4, #4]
 8008532:	6863      	ldr	r3, [r4, #4]
 8008534:	6123      	str	r3, [r4, #16]
 8008536:	2300      	movs	r3, #0
 8008538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800853c:	e7a8      	b.n	8008490 <_printf_i+0x150>
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	4632      	mov	r2, r6
 8008542:	4649      	mov	r1, r9
 8008544:	4640      	mov	r0, r8
 8008546:	47d0      	blx	sl
 8008548:	3001      	adds	r0, #1
 800854a:	d0ab      	beq.n	80084a4 <_printf_i+0x164>
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	079b      	lsls	r3, r3, #30
 8008550:	d413      	bmi.n	800857a <_printf_i+0x23a>
 8008552:	68e0      	ldr	r0, [r4, #12]
 8008554:	9b03      	ldr	r3, [sp, #12]
 8008556:	4298      	cmp	r0, r3
 8008558:	bfb8      	it	lt
 800855a:	4618      	movlt	r0, r3
 800855c:	e7a4      	b.n	80084a8 <_printf_i+0x168>
 800855e:	2301      	movs	r3, #1
 8008560:	4632      	mov	r2, r6
 8008562:	4649      	mov	r1, r9
 8008564:	4640      	mov	r0, r8
 8008566:	47d0      	blx	sl
 8008568:	3001      	adds	r0, #1
 800856a:	d09b      	beq.n	80084a4 <_printf_i+0x164>
 800856c:	3501      	adds	r5, #1
 800856e:	68e3      	ldr	r3, [r4, #12]
 8008570:	9903      	ldr	r1, [sp, #12]
 8008572:	1a5b      	subs	r3, r3, r1
 8008574:	42ab      	cmp	r3, r5
 8008576:	dcf2      	bgt.n	800855e <_printf_i+0x21e>
 8008578:	e7eb      	b.n	8008552 <_printf_i+0x212>
 800857a:	2500      	movs	r5, #0
 800857c:	f104 0619 	add.w	r6, r4, #25
 8008580:	e7f5      	b.n	800856e <_printf_i+0x22e>
 8008582:	bf00      	nop
 8008584:	08009d55 	.word	0x08009d55
 8008588:	08009d66 	.word	0x08009d66

0800858c <memcpy>:
 800858c:	440a      	add	r2, r1
 800858e:	4291      	cmp	r1, r2
 8008590:	f100 33ff 	add.w	r3, r0, #4294967295
 8008594:	d100      	bne.n	8008598 <memcpy+0xc>
 8008596:	4770      	bx	lr
 8008598:	b510      	push	{r4, lr}
 800859a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085a2:	4291      	cmp	r1, r2
 80085a4:	d1f9      	bne.n	800859a <memcpy+0xe>
 80085a6:	bd10      	pop	{r4, pc}

080085a8 <memmove>:
 80085a8:	4288      	cmp	r0, r1
 80085aa:	b510      	push	{r4, lr}
 80085ac:	eb01 0402 	add.w	r4, r1, r2
 80085b0:	d902      	bls.n	80085b8 <memmove+0x10>
 80085b2:	4284      	cmp	r4, r0
 80085b4:	4623      	mov	r3, r4
 80085b6:	d807      	bhi.n	80085c8 <memmove+0x20>
 80085b8:	1e43      	subs	r3, r0, #1
 80085ba:	42a1      	cmp	r1, r4
 80085bc:	d008      	beq.n	80085d0 <memmove+0x28>
 80085be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085c6:	e7f8      	b.n	80085ba <memmove+0x12>
 80085c8:	4402      	add	r2, r0
 80085ca:	4601      	mov	r1, r0
 80085cc:	428a      	cmp	r2, r1
 80085ce:	d100      	bne.n	80085d2 <memmove+0x2a>
 80085d0:	bd10      	pop	{r4, pc}
 80085d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085da:	e7f7      	b.n	80085cc <memmove+0x24>

080085dc <_free_r>:
 80085dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085de:	2900      	cmp	r1, #0
 80085e0:	d048      	beq.n	8008674 <_free_r+0x98>
 80085e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e6:	9001      	str	r0, [sp, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f1a1 0404 	sub.w	r4, r1, #4
 80085ee:	bfb8      	it	lt
 80085f0:	18e4      	addlt	r4, r4, r3
 80085f2:	f000 f8d3 	bl	800879c <__malloc_lock>
 80085f6:	4a20      	ldr	r2, [pc, #128]	; (8008678 <_free_r+0x9c>)
 80085f8:	9801      	ldr	r0, [sp, #4]
 80085fa:	6813      	ldr	r3, [r2, #0]
 80085fc:	4615      	mov	r5, r2
 80085fe:	b933      	cbnz	r3, 800860e <_free_r+0x32>
 8008600:	6063      	str	r3, [r4, #4]
 8008602:	6014      	str	r4, [r2, #0]
 8008604:	b003      	add	sp, #12
 8008606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800860a:	f000 b8cd 	b.w	80087a8 <__malloc_unlock>
 800860e:	42a3      	cmp	r3, r4
 8008610:	d90b      	bls.n	800862a <_free_r+0x4e>
 8008612:	6821      	ldr	r1, [r4, #0]
 8008614:	1862      	adds	r2, r4, r1
 8008616:	4293      	cmp	r3, r2
 8008618:	bf04      	itt	eq
 800861a:	681a      	ldreq	r2, [r3, #0]
 800861c:	685b      	ldreq	r3, [r3, #4]
 800861e:	6063      	str	r3, [r4, #4]
 8008620:	bf04      	itt	eq
 8008622:	1852      	addeq	r2, r2, r1
 8008624:	6022      	streq	r2, [r4, #0]
 8008626:	602c      	str	r4, [r5, #0]
 8008628:	e7ec      	b.n	8008604 <_free_r+0x28>
 800862a:	461a      	mov	r2, r3
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	b10b      	cbz	r3, 8008634 <_free_r+0x58>
 8008630:	42a3      	cmp	r3, r4
 8008632:	d9fa      	bls.n	800862a <_free_r+0x4e>
 8008634:	6811      	ldr	r1, [r2, #0]
 8008636:	1855      	adds	r5, r2, r1
 8008638:	42a5      	cmp	r5, r4
 800863a:	d10b      	bne.n	8008654 <_free_r+0x78>
 800863c:	6824      	ldr	r4, [r4, #0]
 800863e:	4421      	add	r1, r4
 8008640:	1854      	adds	r4, r2, r1
 8008642:	42a3      	cmp	r3, r4
 8008644:	6011      	str	r1, [r2, #0]
 8008646:	d1dd      	bne.n	8008604 <_free_r+0x28>
 8008648:	681c      	ldr	r4, [r3, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	6053      	str	r3, [r2, #4]
 800864e:	4421      	add	r1, r4
 8008650:	6011      	str	r1, [r2, #0]
 8008652:	e7d7      	b.n	8008604 <_free_r+0x28>
 8008654:	d902      	bls.n	800865c <_free_r+0x80>
 8008656:	230c      	movs	r3, #12
 8008658:	6003      	str	r3, [r0, #0]
 800865a:	e7d3      	b.n	8008604 <_free_r+0x28>
 800865c:	6825      	ldr	r5, [r4, #0]
 800865e:	1961      	adds	r1, r4, r5
 8008660:	428b      	cmp	r3, r1
 8008662:	bf04      	itt	eq
 8008664:	6819      	ldreq	r1, [r3, #0]
 8008666:	685b      	ldreq	r3, [r3, #4]
 8008668:	6063      	str	r3, [r4, #4]
 800866a:	bf04      	itt	eq
 800866c:	1949      	addeq	r1, r1, r5
 800866e:	6021      	streq	r1, [r4, #0]
 8008670:	6054      	str	r4, [r2, #4]
 8008672:	e7c7      	b.n	8008604 <_free_r+0x28>
 8008674:	b003      	add	sp, #12
 8008676:	bd30      	pop	{r4, r5, pc}
 8008678:	2000023c 	.word	0x2000023c

0800867c <_malloc_r>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	1ccd      	adds	r5, r1, #3
 8008680:	f025 0503 	bic.w	r5, r5, #3
 8008684:	3508      	adds	r5, #8
 8008686:	2d0c      	cmp	r5, #12
 8008688:	bf38      	it	cc
 800868a:	250c      	movcc	r5, #12
 800868c:	2d00      	cmp	r5, #0
 800868e:	4606      	mov	r6, r0
 8008690:	db01      	blt.n	8008696 <_malloc_r+0x1a>
 8008692:	42a9      	cmp	r1, r5
 8008694:	d903      	bls.n	800869e <_malloc_r+0x22>
 8008696:	230c      	movs	r3, #12
 8008698:	6033      	str	r3, [r6, #0]
 800869a:	2000      	movs	r0, #0
 800869c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800869e:	f000 f87d 	bl	800879c <__malloc_lock>
 80086a2:	4921      	ldr	r1, [pc, #132]	; (8008728 <_malloc_r+0xac>)
 80086a4:	680a      	ldr	r2, [r1, #0]
 80086a6:	4614      	mov	r4, r2
 80086a8:	b99c      	cbnz	r4, 80086d2 <_malloc_r+0x56>
 80086aa:	4f20      	ldr	r7, [pc, #128]	; (800872c <_malloc_r+0xb0>)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	b923      	cbnz	r3, 80086ba <_malloc_r+0x3e>
 80086b0:	4621      	mov	r1, r4
 80086b2:	4630      	mov	r0, r6
 80086b4:	f000 f862 	bl	800877c <_sbrk_r>
 80086b8:	6038      	str	r0, [r7, #0]
 80086ba:	4629      	mov	r1, r5
 80086bc:	4630      	mov	r0, r6
 80086be:	f000 f85d 	bl	800877c <_sbrk_r>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	d123      	bne.n	800870e <_malloc_r+0x92>
 80086c6:	230c      	movs	r3, #12
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	4630      	mov	r0, r6
 80086cc:	f000 f86c 	bl	80087a8 <__malloc_unlock>
 80086d0:	e7e3      	b.n	800869a <_malloc_r+0x1e>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	1b5b      	subs	r3, r3, r5
 80086d6:	d417      	bmi.n	8008708 <_malloc_r+0x8c>
 80086d8:	2b0b      	cmp	r3, #11
 80086da:	d903      	bls.n	80086e4 <_malloc_r+0x68>
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	441c      	add	r4, r3
 80086e0:	6025      	str	r5, [r4, #0]
 80086e2:	e004      	b.n	80086ee <_malloc_r+0x72>
 80086e4:	6863      	ldr	r3, [r4, #4]
 80086e6:	42a2      	cmp	r2, r4
 80086e8:	bf0c      	ite	eq
 80086ea:	600b      	streq	r3, [r1, #0]
 80086ec:	6053      	strne	r3, [r2, #4]
 80086ee:	4630      	mov	r0, r6
 80086f0:	f000 f85a 	bl	80087a8 <__malloc_unlock>
 80086f4:	f104 000b 	add.w	r0, r4, #11
 80086f8:	1d23      	adds	r3, r4, #4
 80086fa:	f020 0007 	bic.w	r0, r0, #7
 80086fe:	1ac2      	subs	r2, r0, r3
 8008700:	d0cc      	beq.n	800869c <_malloc_r+0x20>
 8008702:	1a1b      	subs	r3, r3, r0
 8008704:	50a3      	str	r3, [r4, r2]
 8008706:	e7c9      	b.n	800869c <_malloc_r+0x20>
 8008708:	4622      	mov	r2, r4
 800870a:	6864      	ldr	r4, [r4, #4]
 800870c:	e7cc      	b.n	80086a8 <_malloc_r+0x2c>
 800870e:	1cc4      	adds	r4, r0, #3
 8008710:	f024 0403 	bic.w	r4, r4, #3
 8008714:	42a0      	cmp	r0, r4
 8008716:	d0e3      	beq.n	80086e0 <_malloc_r+0x64>
 8008718:	1a21      	subs	r1, r4, r0
 800871a:	4630      	mov	r0, r6
 800871c:	f000 f82e 	bl	800877c <_sbrk_r>
 8008720:	3001      	adds	r0, #1
 8008722:	d1dd      	bne.n	80086e0 <_malloc_r+0x64>
 8008724:	e7cf      	b.n	80086c6 <_malloc_r+0x4a>
 8008726:	bf00      	nop
 8008728:	2000023c 	.word	0x2000023c
 800872c:	20000240 	.word	0x20000240

08008730 <_realloc_r>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	4607      	mov	r7, r0
 8008734:	4614      	mov	r4, r2
 8008736:	460e      	mov	r6, r1
 8008738:	b921      	cbnz	r1, 8008744 <_realloc_r+0x14>
 800873a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800873e:	4611      	mov	r1, r2
 8008740:	f7ff bf9c 	b.w	800867c <_malloc_r>
 8008744:	b922      	cbnz	r2, 8008750 <_realloc_r+0x20>
 8008746:	f7ff ff49 	bl	80085dc <_free_r>
 800874a:	4625      	mov	r5, r4
 800874c:	4628      	mov	r0, r5
 800874e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008750:	f000 f830 	bl	80087b4 <_malloc_usable_size_r>
 8008754:	42a0      	cmp	r0, r4
 8008756:	d20f      	bcs.n	8008778 <_realloc_r+0x48>
 8008758:	4621      	mov	r1, r4
 800875a:	4638      	mov	r0, r7
 800875c:	f7ff ff8e 	bl	800867c <_malloc_r>
 8008760:	4605      	mov	r5, r0
 8008762:	2800      	cmp	r0, #0
 8008764:	d0f2      	beq.n	800874c <_realloc_r+0x1c>
 8008766:	4631      	mov	r1, r6
 8008768:	4622      	mov	r2, r4
 800876a:	f7ff ff0f 	bl	800858c <memcpy>
 800876e:	4631      	mov	r1, r6
 8008770:	4638      	mov	r0, r7
 8008772:	f7ff ff33 	bl	80085dc <_free_r>
 8008776:	e7e9      	b.n	800874c <_realloc_r+0x1c>
 8008778:	4635      	mov	r5, r6
 800877a:	e7e7      	b.n	800874c <_realloc_r+0x1c>

0800877c <_sbrk_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d06      	ldr	r5, [pc, #24]	; (8008798 <_sbrk_r+0x1c>)
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7fb ffe0 	bl	800474c <_sbrk>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_sbrk_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_sbrk_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	200064e0 	.word	0x200064e0

0800879c <__malloc_lock>:
 800879c:	4801      	ldr	r0, [pc, #4]	; (80087a4 <__malloc_lock+0x8>)
 800879e:	f000 b811 	b.w	80087c4 <__retarget_lock_acquire_recursive>
 80087a2:	bf00      	nop
 80087a4:	200064e8 	.word	0x200064e8

080087a8 <__malloc_unlock>:
 80087a8:	4801      	ldr	r0, [pc, #4]	; (80087b0 <__malloc_unlock+0x8>)
 80087aa:	f000 b80c 	b.w	80087c6 <__retarget_lock_release_recursive>
 80087ae:	bf00      	nop
 80087b0:	200064e8 	.word	0x200064e8

080087b4 <_malloc_usable_size_r>:
 80087b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087b8:	1f18      	subs	r0, r3, #4
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bfbc      	itt	lt
 80087be:	580b      	ldrlt	r3, [r1, r0]
 80087c0:	18c0      	addlt	r0, r0, r3
 80087c2:	4770      	bx	lr

080087c4 <__retarget_lock_acquire_recursive>:
 80087c4:	4770      	bx	lr

080087c6 <__retarget_lock_release_recursive>:
 80087c6:	4770      	bx	lr

080087c8 <log>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	ed2d 8b02 	vpush	{d8}
 80087ce:	ec55 4b10 	vmov	r4, r5, d0
 80087d2:	f000 f8f1 	bl	80089b8 <__ieee754_log>
 80087d6:	4b1e      	ldr	r3, [pc, #120]	; (8008850 <log+0x88>)
 80087d8:	eeb0 8a40 	vmov.f32	s16, s0
 80087dc:	eef0 8a60 	vmov.f32	s17, s1
 80087e0:	f993 3000 	ldrsb.w	r3, [r3]
 80087e4:	3301      	adds	r3, #1
 80087e6:	d01a      	beq.n	800881e <log+0x56>
 80087e8:	4622      	mov	r2, r4
 80087ea:	462b      	mov	r3, r5
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	f7f8 f99c 	bl	8000b2c <__aeabi_dcmpun>
 80087f4:	b998      	cbnz	r0, 800881e <log+0x56>
 80087f6:	2200      	movs	r2, #0
 80087f8:	2300      	movs	r3, #0
 80087fa:	4620      	mov	r0, r4
 80087fc:	4629      	mov	r1, r5
 80087fe:	f7f8 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 8008802:	b960      	cbnz	r0, 800881e <log+0x56>
 8008804:	2200      	movs	r2, #0
 8008806:	2300      	movs	r3, #0
 8008808:	4620      	mov	r0, r4
 800880a:	4629      	mov	r1, r5
 800880c:	f7f8 f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008810:	b160      	cbz	r0, 800882c <log+0x64>
 8008812:	f7ff fb1f 	bl	8007e54 <__errno>
 8008816:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8008848 <log+0x80>
 800881a:	2322      	movs	r3, #34	; 0x22
 800881c:	6003      	str	r3, [r0, #0]
 800881e:	eeb0 0a48 	vmov.f32	s0, s16
 8008822:	eef0 0a68 	vmov.f32	s1, s17
 8008826:	ecbd 8b02 	vpop	{d8}
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	f7ff fb12 	bl	8007e54 <__errno>
 8008830:	ecbd 8b02 	vpop	{d8}
 8008834:	2321      	movs	r3, #33	; 0x21
 8008836:	6003      	str	r3, [r0, #0]
 8008838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800883c:	4805      	ldr	r0, [pc, #20]	; (8008854 <log+0x8c>)
 800883e:	f001 b863 	b.w	8009908 <nan>
 8008842:	bf00      	nop
 8008844:	f3af 8000 	nop.w
 8008848:	00000000 	.word	0x00000000
 800884c:	fff00000 	.word	0xfff00000
 8008850:	200001e8 	.word	0x200001e8
 8008854:	08009d49 	.word	0x08009d49

08008858 <pow>:
 8008858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800885c:	ec59 8b10 	vmov	r8, r9, d0
 8008860:	ec57 6b11 	vmov	r6, r7, d1
 8008864:	f000 fa64 	bl	8008d30 <__ieee754_pow>
 8008868:	4b4e      	ldr	r3, [pc, #312]	; (80089a4 <pow+0x14c>)
 800886a:	f993 3000 	ldrsb.w	r3, [r3]
 800886e:	3301      	adds	r3, #1
 8008870:	ec55 4b10 	vmov	r4, r5, d0
 8008874:	d015      	beq.n	80088a2 <pow+0x4a>
 8008876:	4632      	mov	r2, r6
 8008878:	463b      	mov	r3, r7
 800887a:	4630      	mov	r0, r6
 800887c:	4639      	mov	r1, r7
 800887e:	f7f8 f955 	bl	8000b2c <__aeabi_dcmpun>
 8008882:	b970      	cbnz	r0, 80088a2 <pow+0x4a>
 8008884:	4642      	mov	r2, r8
 8008886:	464b      	mov	r3, r9
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	f7f8 f94e 	bl	8000b2c <__aeabi_dcmpun>
 8008890:	2200      	movs	r2, #0
 8008892:	2300      	movs	r3, #0
 8008894:	b148      	cbz	r0, 80088aa <pow+0x52>
 8008896:	4630      	mov	r0, r6
 8008898:	4639      	mov	r1, r7
 800889a:	f7f8 f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d17d      	bne.n	800899e <pow+0x146>
 80088a2:	ec45 4b10 	vmov	d0, r4, r5
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	4640      	mov	r0, r8
 80088ac:	4649      	mov	r1, r9
 80088ae:	f7f8 f90b 	bl	8000ac8 <__aeabi_dcmpeq>
 80088b2:	b1e0      	cbz	r0, 80088ee <pow+0x96>
 80088b4:	2200      	movs	r2, #0
 80088b6:	2300      	movs	r3, #0
 80088b8:	4630      	mov	r0, r6
 80088ba:	4639      	mov	r1, r7
 80088bc:	f7f8 f904 	bl	8000ac8 <__aeabi_dcmpeq>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d16c      	bne.n	800899e <pow+0x146>
 80088c4:	ec47 6b10 	vmov	d0, r6, r7
 80088c8:	f001 f811 	bl	80098ee <finite>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d0e8      	beq.n	80088a2 <pow+0x4a>
 80088d0:	2200      	movs	r2, #0
 80088d2:	2300      	movs	r3, #0
 80088d4:	4630      	mov	r0, r6
 80088d6:	4639      	mov	r1, r7
 80088d8:	f7f8 f900 	bl	8000adc <__aeabi_dcmplt>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d0e0      	beq.n	80088a2 <pow+0x4a>
 80088e0:	f7ff fab8 	bl	8007e54 <__errno>
 80088e4:	2321      	movs	r3, #33	; 0x21
 80088e6:	6003      	str	r3, [r0, #0]
 80088e8:	2400      	movs	r4, #0
 80088ea:	4d2f      	ldr	r5, [pc, #188]	; (80089a8 <pow+0x150>)
 80088ec:	e7d9      	b.n	80088a2 <pow+0x4a>
 80088ee:	ec45 4b10 	vmov	d0, r4, r5
 80088f2:	f000 fffc 	bl	80098ee <finite>
 80088f6:	bbb8      	cbnz	r0, 8008968 <pow+0x110>
 80088f8:	ec49 8b10 	vmov	d0, r8, r9
 80088fc:	f000 fff7 	bl	80098ee <finite>
 8008900:	b390      	cbz	r0, 8008968 <pow+0x110>
 8008902:	ec47 6b10 	vmov	d0, r6, r7
 8008906:	f000 fff2 	bl	80098ee <finite>
 800890a:	b368      	cbz	r0, 8008968 <pow+0x110>
 800890c:	4622      	mov	r2, r4
 800890e:	462b      	mov	r3, r5
 8008910:	4620      	mov	r0, r4
 8008912:	4629      	mov	r1, r5
 8008914:	f7f8 f90a 	bl	8000b2c <__aeabi_dcmpun>
 8008918:	b160      	cbz	r0, 8008934 <pow+0xdc>
 800891a:	f7ff fa9b 	bl	8007e54 <__errno>
 800891e:	2321      	movs	r3, #33	; 0x21
 8008920:	6003      	str	r3, [r0, #0]
 8008922:	2200      	movs	r2, #0
 8008924:	2300      	movs	r3, #0
 8008926:	4610      	mov	r0, r2
 8008928:	4619      	mov	r1, r3
 800892a:	f7f7 ff8f 	bl	800084c <__aeabi_ddiv>
 800892e:	4604      	mov	r4, r0
 8008930:	460d      	mov	r5, r1
 8008932:	e7b6      	b.n	80088a2 <pow+0x4a>
 8008934:	f7ff fa8e 	bl	8007e54 <__errno>
 8008938:	2322      	movs	r3, #34	; 0x22
 800893a:	6003      	str	r3, [r0, #0]
 800893c:	2200      	movs	r2, #0
 800893e:	2300      	movs	r3, #0
 8008940:	4640      	mov	r0, r8
 8008942:	4649      	mov	r1, r9
 8008944:	f7f8 f8ca 	bl	8000adc <__aeabi_dcmplt>
 8008948:	2400      	movs	r4, #0
 800894a:	b158      	cbz	r0, 8008964 <pow+0x10c>
 800894c:	ec47 6b10 	vmov	d0, r6, r7
 8008950:	f000 ffe2 	bl	8009918 <rint>
 8008954:	4632      	mov	r2, r6
 8008956:	ec51 0b10 	vmov	r0, r1, d0
 800895a:	463b      	mov	r3, r7
 800895c:	f7f8 f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008960:	2800      	cmp	r0, #0
 8008962:	d0c2      	beq.n	80088ea <pow+0x92>
 8008964:	4d11      	ldr	r5, [pc, #68]	; (80089ac <pow+0x154>)
 8008966:	e79c      	b.n	80088a2 <pow+0x4a>
 8008968:	2200      	movs	r2, #0
 800896a:	2300      	movs	r3, #0
 800896c:	4620      	mov	r0, r4
 800896e:	4629      	mov	r1, r5
 8008970:	f7f8 f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008974:	2800      	cmp	r0, #0
 8008976:	d094      	beq.n	80088a2 <pow+0x4a>
 8008978:	ec49 8b10 	vmov	d0, r8, r9
 800897c:	f000 ffb7 	bl	80098ee <finite>
 8008980:	2800      	cmp	r0, #0
 8008982:	d08e      	beq.n	80088a2 <pow+0x4a>
 8008984:	ec47 6b10 	vmov	d0, r6, r7
 8008988:	f000 ffb1 	bl	80098ee <finite>
 800898c:	2800      	cmp	r0, #0
 800898e:	d088      	beq.n	80088a2 <pow+0x4a>
 8008990:	f7ff fa60 	bl	8007e54 <__errno>
 8008994:	2322      	movs	r3, #34	; 0x22
 8008996:	6003      	str	r3, [r0, #0]
 8008998:	2400      	movs	r4, #0
 800899a:	2500      	movs	r5, #0
 800899c:	e781      	b.n	80088a2 <pow+0x4a>
 800899e:	4d04      	ldr	r5, [pc, #16]	; (80089b0 <pow+0x158>)
 80089a0:	2400      	movs	r4, #0
 80089a2:	e77e      	b.n	80088a2 <pow+0x4a>
 80089a4:	200001e8 	.word	0x200001e8
 80089a8:	fff00000 	.word	0xfff00000
 80089ac:	7ff00000 	.word	0x7ff00000
 80089b0:	3ff00000 	.word	0x3ff00000
 80089b4:	00000000 	.word	0x00000000

080089b8 <__ieee754_log>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	ec51 0b10 	vmov	r0, r1, d0
 80089c0:	ed2d 8b04 	vpush	{d8-d9}
 80089c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80089c8:	b083      	sub	sp, #12
 80089ca:	460d      	mov	r5, r1
 80089cc:	da29      	bge.n	8008a22 <__ieee754_log+0x6a>
 80089ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089d2:	4303      	orrs	r3, r0
 80089d4:	ee10 2a10 	vmov	r2, s0
 80089d8:	d10c      	bne.n	80089f4 <__ieee754_log+0x3c>
 80089da:	49cf      	ldr	r1, [pc, #828]	; (8008d18 <__ieee754_log+0x360>)
 80089dc:	2200      	movs	r2, #0
 80089de:	2300      	movs	r3, #0
 80089e0:	2000      	movs	r0, #0
 80089e2:	f7f7 ff33 	bl	800084c <__aeabi_ddiv>
 80089e6:	ec41 0b10 	vmov	d0, r0, r1
 80089ea:	b003      	add	sp, #12
 80089ec:	ecbd 8b04 	vpop	{d8-d9}
 80089f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f4:	2900      	cmp	r1, #0
 80089f6:	da05      	bge.n	8008a04 <__ieee754_log+0x4c>
 80089f8:	460b      	mov	r3, r1
 80089fa:	f7f7 fc45 	bl	8000288 <__aeabi_dsub>
 80089fe:	2200      	movs	r2, #0
 8008a00:	2300      	movs	r3, #0
 8008a02:	e7ee      	b.n	80089e2 <__ieee754_log+0x2a>
 8008a04:	4bc5      	ldr	r3, [pc, #788]	; (8008d1c <__ieee754_log+0x364>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	f7f7 fdf6 	bl	80005f8 <__aeabi_dmul>
 8008a0c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008a10:	460d      	mov	r5, r1
 8008a12:	4ac3      	ldr	r2, [pc, #780]	; (8008d20 <__ieee754_log+0x368>)
 8008a14:	4295      	cmp	r5, r2
 8008a16:	dd06      	ble.n	8008a26 <__ieee754_log+0x6e>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	f7f7 fc36 	bl	800028c <__adddf3>
 8008a20:	e7e1      	b.n	80089e6 <__ieee754_log+0x2e>
 8008a22:	2300      	movs	r3, #0
 8008a24:	e7f5      	b.n	8008a12 <__ieee754_log+0x5a>
 8008a26:	152c      	asrs	r4, r5, #20
 8008a28:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a2c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008a30:	441c      	add	r4, r3
 8008a32:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008a36:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a3e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008a42:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008a46:	ea42 0105 	orr.w	r1, r2, r5
 8008a4a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008a4e:	2200      	movs	r2, #0
 8008a50:	4bb4      	ldr	r3, [pc, #720]	; (8008d24 <__ieee754_log+0x36c>)
 8008a52:	f7f7 fc19 	bl	8000288 <__aeabi_dsub>
 8008a56:	1cab      	adds	r3, r5, #2
 8008a58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	4682      	mov	sl, r0
 8008a60:	468b      	mov	fp, r1
 8008a62:	f04f 0200 	mov.w	r2, #0
 8008a66:	dc53      	bgt.n	8008b10 <__ieee754_log+0x158>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f7f8 f82d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a6e:	b1d0      	cbz	r0, 8008aa6 <__ieee754_log+0xee>
 8008a70:	2c00      	cmp	r4, #0
 8008a72:	f000 8122 	beq.w	8008cba <__ieee754_log+0x302>
 8008a76:	4620      	mov	r0, r4
 8008a78:	f7f7 fd54 	bl	8000524 <__aeabi_i2d>
 8008a7c:	a390      	add	r3, pc, #576	; (adr r3, 8008cc0 <__ieee754_log+0x308>)
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	4606      	mov	r6, r0
 8008a84:	460f      	mov	r7, r1
 8008a86:	f7f7 fdb7 	bl	80005f8 <__aeabi_dmul>
 8008a8a:	a38f      	add	r3, pc, #572	; (adr r3, 8008cc8 <__ieee754_log+0x310>)
 8008a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a90:	4604      	mov	r4, r0
 8008a92:	460d      	mov	r5, r1
 8008a94:	4630      	mov	r0, r6
 8008a96:	4639      	mov	r1, r7
 8008a98:	f7f7 fdae 	bl	80005f8 <__aeabi_dmul>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	e7ba      	b.n	8008a1c <__ieee754_log+0x64>
 8008aa6:	a38a      	add	r3, pc, #552	; (adr r3, 8008cd0 <__ieee754_log+0x318>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	4650      	mov	r0, sl
 8008aae:	4659      	mov	r1, fp
 8008ab0:	f7f7 fda2 	bl	80005f8 <__aeabi_dmul>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	2000      	movs	r0, #0
 8008aba:	499b      	ldr	r1, [pc, #620]	; (8008d28 <__ieee754_log+0x370>)
 8008abc:	f7f7 fbe4 	bl	8000288 <__aeabi_dsub>
 8008ac0:	4652      	mov	r2, sl
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	465b      	mov	r3, fp
 8008ac8:	4650      	mov	r0, sl
 8008aca:	4659      	mov	r1, fp
 8008acc:	f7f7 fd94 	bl	80005f8 <__aeabi_dmul>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	f7f7 fd8e 	bl	80005f8 <__aeabi_dmul>
 8008adc:	4606      	mov	r6, r0
 8008ade:	460f      	mov	r7, r1
 8008ae0:	b914      	cbnz	r4, 8008ae8 <__ieee754_log+0x130>
 8008ae2:	4632      	mov	r2, r6
 8008ae4:	463b      	mov	r3, r7
 8008ae6:	e0a2      	b.n	8008c2e <__ieee754_log+0x276>
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f7f7 fd1b 	bl	8000524 <__aeabi_i2d>
 8008aee:	a374      	add	r3, pc, #464	; (adr r3, 8008cc0 <__ieee754_log+0x308>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	4680      	mov	r8, r0
 8008af6:	4689      	mov	r9, r1
 8008af8:	f7f7 fd7e 	bl	80005f8 <__aeabi_dmul>
 8008afc:	a372      	add	r3, pc, #456	; (adr r3, 8008cc8 <__ieee754_log+0x310>)
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	4604      	mov	r4, r0
 8008b04:	460d      	mov	r5, r1
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f7 fd75 	bl	80005f8 <__aeabi_dmul>
 8008b0e:	e0a7      	b.n	8008c60 <__ieee754_log+0x2a8>
 8008b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b14:	f7f7 fbba 	bl	800028c <__adddf3>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4650      	mov	r0, sl
 8008b1e:	4659      	mov	r1, fp
 8008b20:	f7f7 fe94 	bl	800084c <__aeabi_ddiv>
 8008b24:	ec41 0b18 	vmov	d8, r0, r1
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f7f7 fcfb 	bl	8000524 <__aeabi_i2d>
 8008b2e:	ec53 2b18 	vmov	r2, r3, d8
 8008b32:	ec41 0b19 	vmov	d9, r0, r1
 8008b36:	ec51 0b18 	vmov	r0, r1, d8
 8008b3a:	f7f7 fd5d 	bl	80005f8 <__aeabi_dmul>
 8008b3e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008b42:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	4689      	mov	r9, r1
 8008b50:	f7f7 fd52 	bl	80005f8 <__aeabi_dmul>
 8008b54:	a360      	add	r3, pc, #384	; (adr r3, 8008cd8 <__ieee754_log+0x320>)
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	460f      	mov	r7, r1
 8008b5e:	f7f7 fd4b 	bl	80005f8 <__aeabi_dmul>
 8008b62:	a35f      	add	r3, pc, #380	; (adr r3, 8008ce0 <__ieee754_log+0x328>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	f7f7 fb90 	bl	800028c <__adddf3>
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	f7f7 fd42 	bl	80005f8 <__aeabi_dmul>
 8008b74:	a35c      	add	r3, pc, #368	; (adr r3, 8008ce8 <__ieee754_log+0x330>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f7f7 fb87 	bl	800028c <__adddf3>
 8008b7e:	4632      	mov	r2, r6
 8008b80:	463b      	mov	r3, r7
 8008b82:	f7f7 fd39 	bl	80005f8 <__aeabi_dmul>
 8008b86:	a35a      	add	r3, pc, #360	; (adr r3, 8008cf0 <__ieee754_log+0x338>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f7f7 fb7e 	bl	800028c <__adddf3>
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	f7f7 fd30 	bl	80005f8 <__aeabi_dmul>
 8008b98:	a357      	add	r3, pc, #348	; (adr r3, 8008cf8 <__ieee754_log+0x340>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	4680      	mov	r8, r0
 8008ba0:	4689      	mov	r9, r1
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	4639      	mov	r1, r7
 8008ba6:	f7f7 fd27 	bl	80005f8 <__aeabi_dmul>
 8008baa:	a355      	add	r3, pc, #340	; (adr r3, 8008d00 <__ieee754_log+0x348>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fb6c 	bl	800028c <__adddf3>
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	f7f7 fd1e 	bl	80005f8 <__aeabi_dmul>
 8008bbc:	a352      	add	r3, pc, #328	; (adr r3, 8008d08 <__ieee754_log+0x350>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f7 fb63 	bl	800028c <__adddf3>
 8008bc6:	4632      	mov	r2, r6
 8008bc8:	463b      	mov	r3, r7
 8008bca:	f7f7 fd15 	bl	80005f8 <__aeabi_dmul>
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	4640      	mov	r0, r8
 8008bd6:	f7f7 fb59 	bl	800028c <__adddf3>
 8008bda:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008bde:	9b01      	ldr	r3, [sp, #4]
 8008be0:	3551      	adds	r5, #81	; 0x51
 8008be2:	431d      	orrs	r5, r3
 8008be4:	2d00      	cmp	r5, #0
 8008be6:	4680      	mov	r8, r0
 8008be8:	4689      	mov	r9, r1
 8008bea:	dd48      	ble.n	8008c7e <__ieee754_log+0x2c6>
 8008bec:	4b4e      	ldr	r3, [pc, #312]	; (8008d28 <__ieee754_log+0x370>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	f7f7 fd00 	bl	80005f8 <__aeabi_dmul>
 8008bf8:	4652      	mov	r2, sl
 8008bfa:	465b      	mov	r3, fp
 8008bfc:	f7f7 fcfc 	bl	80005f8 <__aeabi_dmul>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4606      	mov	r6, r0
 8008c06:	460f      	mov	r7, r1
 8008c08:	4640      	mov	r0, r8
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	f7f7 fb3e 	bl	800028c <__adddf3>
 8008c10:	ec53 2b18 	vmov	r2, r3, d8
 8008c14:	f7f7 fcf0 	bl	80005f8 <__aeabi_dmul>
 8008c18:	4680      	mov	r8, r0
 8008c1a:	4689      	mov	r9, r1
 8008c1c:	b964      	cbnz	r4, 8008c38 <__ieee754_log+0x280>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4630      	mov	r0, r6
 8008c24:	4639      	mov	r1, r7
 8008c26:	f7f7 fb2f 	bl	8000288 <__aeabi_dsub>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4650      	mov	r0, sl
 8008c30:	4659      	mov	r1, fp
 8008c32:	f7f7 fb29 	bl	8000288 <__aeabi_dsub>
 8008c36:	e6d6      	b.n	80089e6 <__ieee754_log+0x2e>
 8008c38:	a321      	add	r3, pc, #132	; (adr r3, 8008cc0 <__ieee754_log+0x308>)
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	ec51 0b19 	vmov	r0, r1, d9
 8008c42:	f7f7 fcd9 	bl	80005f8 <__aeabi_dmul>
 8008c46:	a320      	add	r3, pc, #128	; (adr r3, 8008cc8 <__ieee754_log+0x310>)
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	460d      	mov	r5, r1
 8008c50:	ec51 0b19 	vmov	r0, r1, d9
 8008c54:	f7f7 fcd0 	bl	80005f8 <__aeabi_dmul>
 8008c58:	4642      	mov	r2, r8
 8008c5a:	464b      	mov	r3, r9
 8008c5c:	f7f7 fb16 	bl	800028c <__adddf3>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	4630      	mov	r0, r6
 8008c66:	4639      	mov	r1, r7
 8008c68:	f7f7 fb0e 	bl	8000288 <__aeabi_dsub>
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	465b      	mov	r3, fp
 8008c70:	f7f7 fb0a 	bl	8000288 <__aeabi_dsub>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4620      	mov	r0, r4
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	e7d9      	b.n	8008c32 <__ieee754_log+0x27a>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4650      	mov	r0, sl
 8008c84:	4659      	mov	r1, fp
 8008c86:	f7f7 faff 	bl	8000288 <__aeabi_dsub>
 8008c8a:	ec53 2b18 	vmov	r2, r3, d8
 8008c8e:	f7f7 fcb3 	bl	80005f8 <__aeabi_dmul>
 8008c92:	4606      	mov	r6, r0
 8008c94:	460f      	mov	r7, r1
 8008c96:	2c00      	cmp	r4, #0
 8008c98:	f43f af23 	beq.w	8008ae2 <__ieee754_log+0x12a>
 8008c9c:	a308      	add	r3, pc, #32	; (adr r3, 8008cc0 <__ieee754_log+0x308>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	ec51 0b19 	vmov	r0, r1, d9
 8008ca6:	f7f7 fca7 	bl	80005f8 <__aeabi_dmul>
 8008caa:	a307      	add	r3, pc, #28	; (adr r3, 8008cc8 <__ieee754_log+0x310>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	ec51 0b19 	vmov	r0, r1, d9
 8008cb8:	e727      	b.n	8008b0a <__ieee754_log+0x152>
 8008cba:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8008d10 <__ieee754_log+0x358>
 8008cbe:	e694      	b.n	80089ea <__ieee754_log+0x32>
 8008cc0:	fee00000 	.word	0xfee00000
 8008cc4:	3fe62e42 	.word	0x3fe62e42
 8008cc8:	35793c76 	.word	0x35793c76
 8008ccc:	3dea39ef 	.word	0x3dea39ef
 8008cd0:	55555555 	.word	0x55555555
 8008cd4:	3fd55555 	.word	0x3fd55555
 8008cd8:	df3e5244 	.word	0xdf3e5244
 8008cdc:	3fc2f112 	.word	0x3fc2f112
 8008ce0:	96cb03de 	.word	0x96cb03de
 8008ce4:	3fc74664 	.word	0x3fc74664
 8008ce8:	94229359 	.word	0x94229359
 8008cec:	3fd24924 	.word	0x3fd24924
 8008cf0:	55555593 	.word	0x55555593
 8008cf4:	3fe55555 	.word	0x3fe55555
 8008cf8:	d078c69f 	.word	0xd078c69f
 8008cfc:	3fc39a09 	.word	0x3fc39a09
 8008d00:	1d8e78af 	.word	0x1d8e78af
 8008d04:	3fcc71c5 	.word	0x3fcc71c5
 8008d08:	9997fa04 	.word	0x9997fa04
 8008d0c:	3fd99999 	.word	0x3fd99999
	...
 8008d18:	c3500000 	.word	0xc3500000
 8008d1c:	43500000 	.word	0x43500000
 8008d20:	7fefffff 	.word	0x7fefffff
 8008d24:	3ff00000 	.word	0x3ff00000
 8008d28:	3fe00000 	.word	0x3fe00000
 8008d2c:	00000000 	.word	0x00000000

08008d30 <__ieee754_pow>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	ed2d 8b06 	vpush	{d8-d10}
 8008d38:	b08d      	sub	sp, #52	; 0x34
 8008d3a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008d3e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8008d42:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008d46:	ea56 0100 	orrs.w	r1, r6, r0
 8008d4a:	ec53 2b10 	vmov	r2, r3, d0
 8008d4e:	f000 84d1 	beq.w	80096f4 <__ieee754_pow+0x9c4>
 8008d52:	497f      	ldr	r1, [pc, #508]	; (8008f50 <__ieee754_pow+0x220>)
 8008d54:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008d58:	428c      	cmp	r4, r1
 8008d5a:	ee10 8a10 	vmov	r8, s0
 8008d5e:	4699      	mov	r9, r3
 8008d60:	dc09      	bgt.n	8008d76 <__ieee754_pow+0x46>
 8008d62:	d103      	bne.n	8008d6c <__ieee754_pow+0x3c>
 8008d64:	b97a      	cbnz	r2, 8008d86 <__ieee754_pow+0x56>
 8008d66:	42a6      	cmp	r6, r4
 8008d68:	dd02      	ble.n	8008d70 <__ieee754_pow+0x40>
 8008d6a:	e00c      	b.n	8008d86 <__ieee754_pow+0x56>
 8008d6c:	428e      	cmp	r6, r1
 8008d6e:	dc02      	bgt.n	8008d76 <__ieee754_pow+0x46>
 8008d70:	428e      	cmp	r6, r1
 8008d72:	d110      	bne.n	8008d96 <__ieee754_pow+0x66>
 8008d74:	b178      	cbz	r0, 8008d96 <__ieee754_pow+0x66>
 8008d76:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d7a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d7e:	ea54 0308 	orrs.w	r3, r4, r8
 8008d82:	f000 84b7 	beq.w	80096f4 <__ieee754_pow+0x9c4>
 8008d86:	4873      	ldr	r0, [pc, #460]	; (8008f54 <__ieee754_pow+0x224>)
 8008d88:	b00d      	add	sp, #52	; 0x34
 8008d8a:	ecbd 8b06 	vpop	{d8-d10}
 8008d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d92:	f000 bdb9 	b.w	8009908 <nan>
 8008d96:	f1b9 0f00 	cmp.w	r9, #0
 8008d9a:	da36      	bge.n	8008e0a <__ieee754_pow+0xda>
 8008d9c:	496e      	ldr	r1, [pc, #440]	; (8008f58 <__ieee754_pow+0x228>)
 8008d9e:	428e      	cmp	r6, r1
 8008da0:	dc51      	bgt.n	8008e46 <__ieee754_pow+0x116>
 8008da2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8008da6:	428e      	cmp	r6, r1
 8008da8:	f340 84af 	ble.w	800970a <__ieee754_pow+0x9da>
 8008dac:	1531      	asrs	r1, r6, #20
 8008dae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008db2:	2914      	cmp	r1, #20
 8008db4:	dd0f      	ble.n	8008dd6 <__ieee754_pow+0xa6>
 8008db6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008dba:	fa20 fc01 	lsr.w	ip, r0, r1
 8008dbe:	fa0c f101 	lsl.w	r1, ip, r1
 8008dc2:	4281      	cmp	r1, r0
 8008dc4:	f040 84a1 	bne.w	800970a <__ieee754_pow+0x9da>
 8008dc8:	f00c 0c01 	and.w	ip, ip, #1
 8008dcc:	f1cc 0102 	rsb	r1, ip, #2
 8008dd0:	9100      	str	r1, [sp, #0]
 8008dd2:	b180      	cbz	r0, 8008df6 <__ieee754_pow+0xc6>
 8008dd4:	e059      	b.n	8008e8a <__ieee754_pow+0x15a>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d155      	bne.n	8008e86 <__ieee754_pow+0x156>
 8008dda:	f1c1 0114 	rsb	r1, r1, #20
 8008dde:	fa46 fc01 	asr.w	ip, r6, r1
 8008de2:	fa0c f101 	lsl.w	r1, ip, r1
 8008de6:	42b1      	cmp	r1, r6
 8008de8:	f040 848c 	bne.w	8009704 <__ieee754_pow+0x9d4>
 8008dec:	f00c 0c01 	and.w	ip, ip, #1
 8008df0:	f1cc 0102 	rsb	r1, ip, #2
 8008df4:	9100      	str	r1, [sp, #0]
 8008df6:	4959      	ldr	r1, [pc, #356]	; (8008f5c <__ieee754_pow+0x22c>)
 8008df8:	428e      	cmp	r6, r1
 8008dfa:	d12d      	bne.n	8008e58 <__ieee754_pow+0x128>
 8008dfc:	2f00      	cmp	r7, #0
 8008dfe:	da79      	bge.n	8008ef4 <__ieee754_pow+0x1c4>
 8008e00:	4956      	ldr	r1, [pc, #344]	; (8008f5c <__ieee754_pow+0x22c>)
 8008e02:	2000      	movs	r0, #0
 8008e04:	f7f7 fd22 	bl	800084c <__aeabi_ddiv>
 8008e08:	e016      	b.n	8008e38 <__ieee754_pow+0x108>
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	9100      	str	r1, [sp, #0]
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d13b      	bne.n	8008e8a <__ieee754_pow+0x15a>
 8008e12:	494f      	ldr	r1, [pc, #316]	; (8008f50 <__ieee754_pow+0x220>)
 8008e14:	428e      	cmp	r6, r1
 8008e16:	d1ee      	bne.n	8008df6 <__ieee754_pow+0xc6>
 8008e18:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008e1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008e20:	ea53 0308 	orrs.w	r3, r3, r8
 8008e24:	f000 8466 	beq.w	80096f4 <__ieee754_pow+0x9c4>
 8008e28:	4b4d      	ldr	r3, [pc, #308]	; (8008f60 <__ieee754_pow+0x230>)
 8008e2a:	429c      	cmp	r4, r3
 8008e2c:	dd0d      	ble.n	8008e4a <__ieee754_pow+0x11a>
 8008e2e:	2f00      	cmp	r7, #0
 8008e30:	f280 8464 	bge.w	80096fc <__ieee754_pow+0x9cc>
 8008e34:	2000      	movs	r0, #0
 8008e36:	2100      	movs	r1, #0
 8008e38:	ec41 0b10 	vmov	d0, r0, r1
 8008e3c:	b00d      	add	sp, #52	; 0x34
 8008e3e:	ecbd 8b06 	vpop	{d8-d10}
 8008e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e46:	2102      	movs	r1, #2
 8008e48:	e7e0      	b.n	8008e0c <__ieee754_pow+0xdc>
 8008e4a:	2f00      	cmp	r7, #0
 8008e4c:	daf2      	bge.n	8008e34 <__ieee754_pow+0x104>
 8008e4e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8008e52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008e56:	e7ef      	b.n	8008e38 <__ieee754_pow+0x108>
 8008e58:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008e5c:	d104      	bne.n	8008e68 <__ieee754_pow+0x138>
 8008e5e:	4610      	mov	r0, r2
 8008e60:	4619      	mov	r1, r3
 8008e62:	f7f7 fbc9 	bl	80005f8 <__aeabi_dmul>
 8008e66:	e7e7      	b.n	8008e38 <__ieee754_pow+0x108>
 8008e68:	493e      	ldr	r1, [pc, #248]	; (8008f64 <__ieee754_pow+0x234>)
 8008e6a:	428f      	cmp	r7, r1
 8008e6c:	d10d      	bne.n	8008e8a <__ieee754_pow+0x15a>
 8008e6e:	f1b9 0f00 	cmp.w	r9, #0
 8008e72:	db0a      	blt.n	8008e8a <__ieee754_pow+0x15a>
 8008e74:	ec43 2b10 	vmov	d0, r2, r3
 8008e78:	b00d      	add	sp, #52	; 0x34
 8008e7a:	ecbd 8b06 	vpop	{d8-d10}
 8008e7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e82:	f000 bc77 	b.w	8009774 <__ieee754_sqrt>
 8008e86:	2100      	movs	r1, #0
 8008e88:	9100      	str	r1, [sp, #0]
 8008e8a:	ec43 2b10 	vmov	d0, r2, r3
 8008e8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e92:	f000 fd23 	bl	80098dc <fabs>
 8008e96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e9a:	ec51 0b10 	vmov	r0, r1, d0
 8008e9e:	f1b8 0f00 	cmp.w	r8, #0
 8008ea2:	d12a      	bne.n	8008efa <__ieee754_pow+0x1ca>
 8008ea4:	b12c      	cbz	r4, 8008eb2 <__ieee754_pow+0x182>
 8008ea6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008f5c <__ieee754_pow+0x22c>
 8008eaa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008eae:	45e6      	cmp	lr, ip
 8008eb0:	d123      	bne.n	8008efa <__ieee754_pow+0x1ca>
 8008eb2:	2f00      	cmp	r7, #0
 8008eb4:	da05      	bge.n	8008ec2 <__ieee754_pow+0x192>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	2000      	movs	r0, #0
 8008ebc:	4927      	ldr	r1, [pc, #156]	; (8008f5c <__ieee754_pow+0x22c>)
 8008ebe:	f7f7 fcc5 	bl	800084c <__aeabi_ddiv>
 8008ec2:	f1b9 0f00 	cmp.w	r9, #0
 8008ec6:	dab7      	bge.n	8008e38 <__ieee754_pow+0x108>
 8008ec8:	9b00      	ldr	r3, [sp, #0]
 8008eca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008ece:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008ed2:	4323      	orrs	r3, r4
 8008ed4:	d108      	bne.n	8008ee8 <__ieee754_pow+0x1b8>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4610      	mov	r0, r2
 8008edc:	4619      	mov	r1, r3
 8008ede:	f7f7 f9d3 	bl	8000288 <__aeabi_dsub>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	e78d      	b.n	8008e04 <__ieee754_pow+0xd4>
 8008ee8:	9b00      	ldr	r3, [sp, #0]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d1a4      	bne.n	8008e38 <__ieee754_pow+0x108>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	e79e      	b.n	8008e38 <__ieee754_pow+0x108>
 8008efa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008efe:	f10c 35ff 	add.w	r5, ip, #4294967295
 8008f02:	950a      	str	r5, [sp, #40]	; 0x28
 8008f04:	9d00      	ldr	r5, [sp, #0]
 8008f06:	46ac      	mov	ip, r5
 8008f08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008f0a:	ea5c 0505 	orrs.w	r5, ip, r5
 8008f0e:	d0e4      	beq.n	8008eda <__ieee754_pow+0x1aa>
 8008f10:	4b15      	ldr	r3, [pc, #84]	; (8008f68 <__ieee754_pow+0x238>)
 8008f12:	429e      	cmp	r6, r3
 8008f14:	f340 80fc 	ble.w	8009110 <__ieee754_pow+0x3e0>
 8008f18:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008f1c:	429e      	cmp	r6, r3
 8008f1e:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <__ieee754_pow+0x230>)
 8008f20:	dd07      	ble.n	8008f32 <__ieee754_pow+0x202>
 8008f22:	429c      	cmp	r4, r3
 8008f24:	dc0a      	bgt.n	8008f3c <__ieee754_pow+0x20c>
 8008f26:	2f00      	cmp	r7, #0
 8008f28:	da84      	bge.n	8008e34 <__ieee754_pow+0x104>
 8008f2a:	a307      	add	r3, pc, #28	; (adr r3, 8008f48 <__ieee754_pow+0x218>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	e795      	b.n	8008e5e <__ieee754_pow+0x12e>
 8008f32:	429c      	cmp	r4, r3
 8008f34:	dbf7      	blt.n	8008f26 <__ieee754_pow+0x1f6>
 8008f36:	4b09      	ldr	r3, [pc, #36]	; (8008f5c <__ieee754_pow+0x22c>)
 8008f38:	429c      	cmp	r4, r3
 8008f3a:	dd17      	ble.n	8008f6c <__ieee754_pow+0x23c>
 8008f3c:	2f00      	cmp	r7, #0
 8008f3e:	dcf4      	bgt.n	8008f2a <__ieee754_pow+0x1fa>
 8008f40:	e778      	b.n	8008e34 <__ieee754_pow+0x104>
 8008f42:	bf00      	nop
 8008f44:	f3af 8000 	nop.w
 8008f48:	8800759c 	.word	0x8800759c
 8008f4c:	7e37e43c 	.word	0x7e37e43c
 8008f50:	7ff00000 	.word	0x7ff00000
 8008f54:	08009d49 	.word	0x08009d49
 8008f58:	433fffff 	.word	0x433fffff
 8008f5c:	3ff00000 	.word	0x3ff00000
 8008f60:	3fefffff 	.word	0x3fefffff
 8008f64:	3fe00000 	.word	0x3fe00000
 8008f68:	41e00000 	.word	0x41e00000
 8008f6c:	4b64      	ldr	r3, [pc, #400]	; (8009100 <__ieee754_pow+0x3d0>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f7f7 f98a 	bl	8000288 <__aeabi_dsub>
 8008f74:	a356      	add	r3, pc, #344	; (adr r3, 80090d0 <__ieee754_pow+0x3a0>)
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	f7f7 fb3b 	bl	80005f8 <__aeabi_dmul>
 8008f82:	a355      	add	r3, pc, #340	; (adr r3, 80090d8 <__ieee754_pow+0x3a8>)
 8008f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f88:	4606      	mov	r6, r0
 8008f8a:	460f      	mov	r7, r1
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	4629      	mov	r1, r5
 8008f90:	f7f7 fb32 	bl	80005f8 <__aeabi_dmul>
 8008f94:	4b5b      	ldr	r3, [pc, #364]	; (8009104 <__ieee754_pow+0x3d4>)
 8008f96:	4682      	mov	sl, r0
 8008f98:	468b      	mov	fp, r1
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	f7f7 fb2a 	bl	80005f8 <__aeabi_dmul>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	a14d      	add	r1, pc, #308	; (adr r1, 80090e0 <__ieee754_pow+0x3b0>)
 8008faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fae:	f7f7 f96b 	bl	8000288 <__aeabi_dsub>
 8008fb2:	4622      	mov	r2, r4
 8008fb4:	462b      	mov	r3, r5
 8008fb6:	f7f7 fb1f 	bl	80005f8 <__aeabi_dmul>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	4951      	ldr	r1, [pc, #324]	; (8009108 <__ieee754_pow+0x3d8>)
 8008fc2:	f7f7 f961 	bl	8000288 <__aeabi_dsub>
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4680      	mov	r8, r0
 8008fca:	4689      	mov	r9, r1
 8008fcc:	462b      	mov	r3, r5
 8008fce:	4620      	mov	r0, r4
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	f7f7 fb11 	bl	80005f8 <__aeabi_dmul>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4640      	mov	r0, r8
 8008fdc:	4649      	mov	r1, r9
 8008fde:	f7f7 fb0b 	bl	80005f8 <__aeabi_dmul>
 8008fe2:	a341      	add	r3, pc, #260	; (adr r3, 80090e8 <__ieee754_pow+0x3b8>)
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4650      	mov	r0, sl
 8008ff2:	4659      	mov	r1, fp
 8008ff4:	f7f7 f948 	bl	8000288 <__aeabi_dsub>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	4680      	mov	r8, r0
 8008ffe:	4689      	mov	r9, r1
 8009000:	4630      	mov	r0, r6
 8009002:	4639      	mov	r1, r7
 8009004:	f7f7 f942 	bl	800028c <__adddf3>
 8009008:	2400      	movs	r4, #0
 800900a:	4632      	mov	r2, r6
 800900c:	463b      	mov	r3, r7
 800900e:	4620      	mov	r0, r4
 8009010:	460d      	mov	r5, r1
 8009012:	f7f7 f939 	bl	8000288 <__aeabi_dsub>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4640      	mov	r0, r8
 800901c:	4649      	mov	r1, r9
 800901e:	f7f7 f933 	bl	8000288 <__aeabi_dsub>
 8009022:	9b00      	ldr	r3, [sp, #0]
 8009024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009026:	3b01      	subs	r3, #1
 8009028:	4313      	orrs	r3, r2
 800902a:	4682      	mov	sl, r0
 800902c:	468b      	mov	fp, r1
 800902e:	f040 81f1 	bne.w	8009414 <__ieee754_pow+0x6e4>
 8009032:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80090f0 <__ieee754_pow+0x3c0>
 8009036:	eeb0 8a47 	vmov.f32	s16, s14
 800903a:	eef0 8a67 	vmov.f32	s17, s15
 800903e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009042:	2600      	movs	r6, #0
 8009044:	4632      	mov	r2, r6
 8009046:	463b      	mov	r3, r7
 8009048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800904c:	f7f7 f91c 	bl	8000288 <__aeabi_dsub>
 8009050:	4622      	mov	r2, r4
 8009052:	462b      	mov	r3, r5
 8009054:	f7f7 fad0 	bl	80005f8 <__aeabi_dmul>
 8009058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800905c:	4680      	mov	r8, r0
 800905e:	4689      	mov	r9, r1
 8009060:	4650      	mov	r0, sl
 8009062:	4659      	mov	r1, fp
 8009064:	f7f7 fac8 	bl	80005f8 <__aeabi_dmul>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	4640      	mov	r0, r8
 800906e:	4649      	mov	r1, r9
 8009070:	f7f7 f90c 	bl	800028c <__adddf3>
 8009074:	4632      	mov	r2, r6
 8009076:	463b      	mov	r3, r7
 8009078:	4680      	mov	r8, r0
 800907a:	4689      	mov	r9, r1
 800907c:	4620      	mov	r0, r4
 800907e:	4629      	mov	r1, r5
 8009080:	f7f7 faba 	bl	80005f8 <__aeabi_dmul>
 8009084:	460b      	mov	r3, r1
 8009086:	4604      	mov	r4, r0
 8009088:	460d      	mov	r5, r1
 800908a:	4602      	mov	r2, r0
 800908c:	4649      	mov	r1, r9
 800908e:	4640      	mov	r0, r8
 8009090:	f7f7 f8fc 	bl	800028c <__adddf3>
 8009094:	4b1d      	ldr	r3, [pc, #116]	; (800910c <__ieee754_pow+0x3dc>)
 8009096:	4299      	cmp	r1, r3
 8009098:	ec45 4b19 	vmov	d9, r4, r5
 800909c:	4606      	mov	r6, r0
 800909e:	460f      	mov	r7, r1
 80090a0:	468b      	mov	fp, r1
 80090a2:	f340 82fe 	ble.w	80096a2 <__ieee754_pow+0x972>
 80090a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80090aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80090ae:	4303      	orrs	r3, r0
 80090b0:	f000 81f0 	beq.w	8009494 <__ieee754_pow+0x764>
 80090b4:	a310      	add	r3, pc, #64	; (adr r3, 80090f8 <__ieee754_pow+0x3c8>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	ec51 0b18 	vmov	r0, r1, d8
 80090be:	f7f7 fa9b 	bl	80005f8 <__aeabi_dmul>
 80090c2:	a30d      	add	r3, pc, #52	; (adr r3, 80090f8 <__ieee754_pow+0x3c8>)
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	e6cb      	b.n	8008e62 <__ieee754_pow+0x132>
 80090ca:	bf00      	nop
 80090cc:	f3af 8000 	nop.w
 80090d0:	60000000 	.word	0x60000000
 80090d4:	3ff71547 	.word	0x3ff71547
 80090d8:	f85ddf44 	.word	0xf85ddf44
 80090dc:	3e54ae0b 	.word	0x3e54ae0b
 80090e0:	55555555 	.word	0x55555555
 80090e4:	3fd55555 	.word	0x3fd55555
 80090e8:	652b82fe 	.word	0x652b82fe
 80090ec:	3ff71547 	.word	0x3ff71547
 80090f0:	00000000 	.word	0x00000000
 80090f4:	bff00000 	.word	0xbff00000
 80090f8:	8800759c 	.word	0x8800759c
 80090fc:	7e37e43c 	.word	0x7e37e43c
 8009100:	3ff00000 	.word	0x3ff00000
 8009104:	3fd00000 	.word	0x3fd00000
 8009108:	3fe00000 	.word	0x3fe00000
 800910c:	408fffff 	.word	0x408fffff
 8009110:	4bd7      	ldr	r3, [pc, #860]	; (8009470 <__ieee754_pow+0x740>)
 8009112:	ea03 0309 	and.w	r3, r3, r9
 8009116:	2200      	movs	r2, #0
 8009118:	b92b      	cbnz	r3, 8009126 <__ieee754_pow+0x3f6>
 800911a:	4bd6      	ldr	r3, [pc, #856]	; (8009474 <__ieee754_pow+0x744>)
 800911c:	f7f7 fa6c 	bl	80005f8 <__aeabi_dmul>
 8009120:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009124:	460c      	mov	r4, r1
 8009126:	1523      	asrs	r3, r4, #20
 8009128:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800912c:	4413      	add	r3, r2
 800912e:	9309      	str	r3, [sp, #36]	; 0x24
 8009130:	4bd1      	ldr	r3, [pc, #836]	; (8009478 <__ieee754_pow+0x748>)
 8009132:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009136:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800913a:	429c      	cmp	r4, r3
 800913c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009140:	dd08      	ble.n	8009154 <__ieee754_pow+0x424>
 8009142:	4bce      	ldr	r3, [pc, #824]	; (800947c <__ieee754_pow+0x74c>)
 8009144:	429c      	cmp	r4, r3
 8009146:	f340 8163 	ble.w	8009410 <__ieee754_pow+0x6e0>
 800914a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914c:	3301      	adds	r3, #1
 800914e:	9309      	str	r3, [sp, #36]	; 0x24
 8009150:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009154:	2400      	movs	r4, #0
 8009156:	00e3      	lsls	r3, r4, #3
 8009158:	930b      	str	r3, [sp, #44]	; 0x2c
 800915a:	4bc9      	ldr	r3, [pc, #804]	; (8009480 <__ieee754_pow+0x750>)
 800915c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009160:	ed93 7b00 	vldr	d7, [r3]
 8009164:	4629      	mov	r1, r5
 8009166:	ec53 2b17 	vmov	r2, r3, d7
 800916a:	eeb0 8a47 	vmov.f32	s16, s14
 800916e:	eef0 8a67 	vmov.f32	s17, s15
 8009172:	4682      	mov	sl, r0
 8009174:	f7f7 f888 	bl	8000288 <__aeabi_dsub>
 8009178:	4652      	mov	r2, sl
 800917a:	4606      	mov	r6, r0
 800917c:	460f      	mov	r7, r1
 800917e:	462b      	mov	r3, r5
 8009180:	ec51 0b18 	vmov	r0, r1, d8
 8009184:	f7f7 f882 	bl	800028c <__adddf3>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	2000      	movs	r0, #0
 800918e:	49bd      	ldr	r1, [pc, #756]	; (8009484 <__ieee754_pow+0x754>)
 8009190:	f7f7 fb5c 	bl	800084c <__aeabi_ddiv>
 8009194:	ec41 0b19 	vmov	d9, r0, r1
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4630      	mov	r0, r6
 800919e:	4639      	mov	r1, r7
 80091a0:	f7f7 fa2a 	bl	80005f8 <__aeabi_dmul>
 80091a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091b0:	2300      	movs	r3, #0
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80091b8:	46ab      	mov	fp, r5
 80091ba:	106d      	asrs	r5, r5, #1
 80091bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80091c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80091c4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80091c8:	2200      	movs	r2, #0
 80091ca:	4640      	mov	r0, r8
 80091cc:	4649      	mov	r1, r9
 80091ce:	4614      	mov	r4, r2
 80091d0:	461d      	mov	r5, r3
 80091d2:	f7f7 fa11 	bl	80005f8 <__aeabi_dmul>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4630      	mov	r0, r6
 80091dc:	4639      	mov	r1, r7
 80091de:	f7f7 f853 	bl	8000288 <__aeabi_dsub>
 80091e2:	ec53 2b18 	vmov	r2, r3, d8
 80091e6:	4606      	mov	r6, r0
 80091e8:	460f      	mov	r7, r1
 80091ea:	4620      	mov	r0, r4
 80091ec:	4629      	mov	r1, r5
 80091ee:	f7f7 f84b 	bl	8000288 <__aeabi_dsub>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4650      	mov	r0, sl
 80091f8:	4659      	mov	r1, fp
 80091fa:	f7f7 f845 	bl	8000288 <__aeabi_dsub>
 80091fe:	4642      	mov	r2, r8
 8009200:	464b      	mov	r3, r9
 8009202:	f7f7 f9f9 	bl	80005f8 <__aeabi_dmul>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4630      	mov	r0, r6
 800920c:	4639      	mov	r1, r7
 800920e:	f7f7 f83b 	bl	8000288 <__aeabi_dsub>
 8009212:	ec53 2b19 	vmov	r2, r3, d9
 8009216:	f7f7 f9ef 	bl	80005f8 <__aeabi_dmul>
 800921a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800921e:	ec41 0b18 	vmov	d8, r0, r1
 8009222:	4610      	mov	r0, r2
 8009224:	4619      	mov	r1, r3
 8009226:	f7f7 f9e7 	bl	80005f8 <__aeabi_dmul>
 800922a:	a37d      	add	r3, pc, #500	; (adr r3, 8009420 <__ieee754_pow+0x6f0>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	4604      	mov	r4, r0
 8009232:	460d      	mov	r5, r1
 8009234:	f7f7 f9e0 	bl	80005f8 <__aeabi_dmul>
 8009238:	a37b      	add	r3, pc, #492	; (adr r3, 8009428 <__ieee754_pow+0x6f8>)
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	f7f7 f825 	bl	800028c <__adddf3>
 8009242:	4622      	mov	r2, r4
 8009244:	462b      	mov	r3, r5
 8009246:	f7f7 f9d7 	bl	80005f8 <__aeabi_dmul>
 800924a:	a379      	add	r3, pc, #484	; (adr r3, 8009430 <__ieee754_pow+0x700>)
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f7 f81c 	bl	800028c <__adddf3>
 8009254:	4622      	mov	r2, r4
 8009256:	462b      	mov	r3, r5
 8009258:	f7f7 f9ce 	bl	80005f8 <__aeabi_dmul>
 800925c:	a376      	add	r3, pc, #472	; (adr r3, 8009438 <__ieee754_pow+0x708>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f7 f813 	bl	800028c <__adddf3>
 8009266:	4622      	mov	r2, r4
 8009268:	462b      	mov	r3, r5
 800926a:	f7f7 f9c5 	bl	80005f8 <__aeabi_dmul>
 800926e:	a374      	add	r3, pc, #464	; (adr r3, 8009440 <__ieee754_pow+0x710>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f7 f80a 	bl	800028c <__adddf3>
 8009278:	4622      	mov	r2, r4
 800927a:	462b      	mov	r3, r5
 800927c:	f7f7 f9bc 	bl	80005f8 <__aeabi_dmul>
 8009280:	a371      	add	r3, pc, #452	; (adr r3, 8009448 <__ieee754_pow+0x718>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f7f7 f801 	bl	800028c <__adddf3>
 800928a:	4622      	mov	r2, r4
 800928c:	4606      	mov	r6, r0
 800928e:	460f      	mov	r7, r1
 8009290:	462b      	mov	r3, r5
 8009292:	4620      	mov	r0, r4
 8009294:	4629      	mov	r1, r5
 8009296:	f7f7 f9af 	bl	80005f8 <__aeabi_dmul>
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	4630      	mov	r0, r6
 80092a0:	4639      	mov	r1, r7
 80092a2:	f7f7 f9a9 	bl	80005f8 <__aeabi_dmul>
 80092a6:	4642      	mov	r2, r8
 80092a8:	4604      	mov	r4, r0
 80092aa:	460d      	mov	r5, r1
 80092ac:	464b      	mov	r3, r9
 80092ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092b2:	f7f6 ffeb 	bl	800028c <__adddf3>
 80092b6:	ec53 2b18 	vmov	r2, r3, d8
 80092ba:	f7f7 f99d 	bl	80005f8 <__aeabi_dmul>
 80092be:	4622      	mov	r2, r4
 80092c0:	462b      	mov	r3, r5
 80092c2:	f7f6 ffe3 	bl	800028c <__adddf3>
 80092c6:	4642      	mov	r2, r8
 80092c8:	4682      	mov	sl, r0
 80092ca:	468b      	mov	fp, r1
 80092cc:	464b      	mov	r3, r9
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f7 f991 	bl	80005f8 <__aeabi_dmul>
 80092d6:	4b6c      	ldr	r3, [pc, #432]	; (8009488 <__ieee754_pow+0x758>)
 80092d8:	2200      	movs	r2, #0
 80092da:	4606      	mov	r6, r0
 80092dc:	460f      	mov	r7, r1
 80092de:	f7f6 ffd5 	bl	800028c <__adddf3>
 80092e2:	4652      	mov	r2, sl
 80092e4:	465b      	mov	r3, fp
 80092e6:	f7f6 ffd1 	bl	800028c <__adddf3>
 80092ea:	9c04      	ldr	r4, [sp, #16]
 80092ec:	460d      	mov	r5, r1
 80092ee:	4622      	mov	r2, r4
 80092f0:	460b      	mov	r3, r1
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f7 f97f 	bl	80005f8 <__aeabi_dmul>
 80092fa:	4b63      	ldr	r3, [pc, #396]	; (8009488 <__ieee754_pow+0x758>)
 80092fc:	4680      	mov	r8, r0
 80092fe:	4689      	mov	r9, r1
 8009300:	2200      	movs	r2, #0
 8009302:	4620      	mov	r0, r4
 8009304:	4629      	mov	r1, r5
 8009306:	f7f6 ffbf 	bl	8000288 <__aeabi_dsub>
 800930a:	4632      	mov	r2, r6
 800930c:	463b      	mov	r3, r7
 800930e:	f7f6 ffbb 	bl	8000288 <__aeabi_dsub>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4650      	mov	r0, sl
 8009318:	4659      	mov	r1, fp
 800931a:	f7f6 ffb5 	bl	8000288 <__aeabi_dsub>
 800931e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009322:	f7f7 f969 	bl	80005f8 <__aeabi_dmul>
 8009326:	4622      	mov	r2, r4
 8009328:	4606      	mov	r6, r0
 800932a:	460f      	mov	r7, r1
 800932c:	462b      	mov	r3, r5
 800932e:	ec51 0b18 	vmov	r0, r1, d8
 8009332:	f7f7 f961 	bl	80005f8 <__aeabi_dmul>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	4630      	mov	r0, r6
 800933c:	4639      	mov	r1, r7
 800933e:	f7f6 ffa5 	bl	800028c <__adddf3>
 8009342:	4606      	mov	r6, r0
 8009344:	460f      	mov	r7, r1
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f6 ff9d 	bl	800028c <__adddf3>
 8009352:	9c04      	ldr	r4, [sp, #16]
 8009354:	a33e      	add	r3, pc, #248	; (adr r3, 8009450 <__ieee754_pow+0x720>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	4620      	mov	r0, r4
 800935c:	460d      	mov	r5, r1
 800935e:	f7f7 f94b 	bl	80005f8 <__aeabi_dmul>
 8009362:	4642      	mov	r2, r8
 8009364:	ec41 0b18 	vmov	d8, r0, r1
 8009368:	464b      	mov	r3, r9
 800936a:	4620      	mov	r0, r4
 800936c:	4629      	mov	r1, r5
 800936e:	f7f6 ff8b 	bl	8000288 <__aeabi_dsub>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4630      	mov	r0, r6
 8009378:	4639      	mov	r1, r7
 800937a:	f7f6 ff85 	bl	8000288 <__aeabi_dsub>
 800937e:	a336      	add	r3, pc, #216	; (adr r3, 8009458 <__ieee754_pow+0x728>)
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	f7f7 f938 	bl	80005f8 <__aeabi_dmul>
 8009388:	a335      	add	r3, pc, #212	; (adr r3, 8009460 <__ieee754_pow+0x730>)
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	4606      	mov	r6, r0
 8009390:	460f      	mov	r7, r1
 8009392:	4620      	mov	r0, r4
 8009394:	4629      	mov	r1, r5
 8009396:	f7f7 f92f 	bl	80005f8 <__aeabi_dmul>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4630      	mov	r0, r6
 80093a0:	4639      	mov	r1, r7
 80093a2:	f7f6 ff73 	bl	800028c <__adddf3>
 80093a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093a8:	4b38      	ldr	r3, [pc, #224]	; (800948c <__ieee754_pow+0x75c>)
 80093aa:	4413      	add	r3, r2
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f6 ff6c 	bl	800028c <__adddf3>
 80093b4:	4682      	mov	sl, r0
 80093b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093b8:	468b      	mov	fp, r1
 80093ba:	f7f7 f8b3 	bl	8000524 <__aeabi_i2d>
 80093be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093c0:	4b33      	ldr	r3, [pc, #204]	; (8009490 <__ieee754_pow+0x760>)
 80093c2:	4413      	add	r3, r2
 80093c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093c8:	4606      	mov	r6, r0
 80093ca:	460f      	mov	r7, r1
 80093cc:	4652      	mov	r2, sl
 80093ce:	465b      	mov	r3, fp
 80093d0:	ec51 0b18 	vmov	r0, r1, d8
 80093d4:	f7f6 ff5a 	bl	800028c <__adddf3>
 80093d8:	4642      	mov	r2, r8
 80093da:	464b      	mov	r3, r9
 80093dc:	f7f6 ff56 	bl	800028c <__adddf3>
 80093e0:	4632      	mov	r2, r6
 80093e2:	463b      	mov	r3, r7
 80093e4:	f7f6 ff52 	bl	800028c <__adddf3>
 80093e8:	9c04      	ldr	r4, [sp, #16]
 80093ea:	4632      	mov	r2, r6
 80093ec:	463b      	mov	r3, r7
 80093ee:	4620      	mov	r0, r4
 80093f0:	460d      	mov	r5, r1
 80093f2:	f7f6 ff49 	bl	8000288 <__aeabi_dsub>
 80093f6:	4642      	mov	r2, r8
 80093f8:	464b      	mov	r3, r9
 80093fa:	f7f6 ff45 	bl	8000288 <__aeabi_dsub>
 80093fe:	ec53 2b18 	vmov	r2, r3, d8
 8009402:	f7f6 ff41 	bl	8000288 <__aeabi_dsub>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4650      	mov	r0, sl
 800940c:	4659      	mov	r1, fp
 800940e:	e606      	b.n	800901e <__ieee754_pow+0x2ee>
 8009410:	2401      	movs	r4, #1
 8009412:	e6a0      	b.n	8009156 <__ieee754_pow+0x426>
 8009414:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009468 <__ieee754_pow+0x738>
 8009418:	e60d      	b.n	8009036 <__ieee754_pow+0x306>
 800941a:	bf00      	nop
 800941c:	f3af 8000 	nop.w
 8009420:	4a454eef 	.word	0x4a454eef
 8009424:	3fca7e28 	.word	0x3fca7e28
 8009428:	93c9db65 	.word	0x93c9db65
 800942c:	3fcd864a 	.word	0x3fcd864a
 8009430:	a91d4101 	.word	0xa91d4101
 8009434:	3fd17460 	.word	0x3fd17460
 8009438:	518f264d 	.word	0x518f264d
 800943c:	3fd55555 	.word	0x3fd55555
 8009440:	db6fabff 	.word	0xdb6fabff
 8009444:	3fdb6db6 	.word	0x3fdb6db6
 8009448:	33333303 	.word	0x33333303
 800944c:	3fe33333 	.word	0x3fe33333
 8009450:	e0000000 	.word	0xe0000000
 8009454:	3feec709 	.word	0x3feec709
 8009458:	dc3a03fd 	.word	0xdc3a03fd
 800945c:	3feec709 	.word	0x3feec709
 8009460:	145b01f5 	.word	0x145b01f5
 8009464:	be3e2fe0 	.word	0xbe3e2fe0
 8009468:	00000000 	.word	0x00000000
 800946c:	3ff00000 	.word	0x3ff00000
 8009470:	7ff00000 	.word	0x7ff00000
 8009474:	43400000 	.word	0x43400000
 8009478:	0003988e 	.word	0x0003988e
 800947c:	000bb679 	.word	0x000bb679
 8009480:	08009d78 	.word	0x08009d78
 8009484:	3ff00000 	.word	0x3ff00000
 8009488:	40080000 	.word	0x40080000
 800948c:	08009d98 	.word	0x08009d98
 8009490:	08009d88 	.word	0x08009d88
 8009494:	a3b5      	add	r3, pc, #724	; (adr r3, 800976c <__ieee754_pow+0xa3c>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	4640      	mov	r0, r8
 800949c:	4649      	mov	r1, r9
 800949e:	f7f6 fef5 	bl	800028c <__adddf3>
 80094a2:	4622      	mov	r2, r4
 80094a4:	ec41 0b1a 	vmov	d10, r0, r1
 80094a8:	462b      	mov	r3, r5
 80094aa:	4630      	mov	r0, r6
 80094ac:	4639      	mov	r1, r7
 80094ae:	f7f6 feeb 	bl	8000288 <__aeabi_dsub>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	ec51 0b1a 	vmov	r0, r1, d10
 80094ba:	f7f7 fb2d 	bl	8000b18 <__aeabi_dcmpgt>
 80094be:	2800      	cmp	r0, #0
 80094c0:	f47f adf8 	bne.w	80090b4 <__ieee754_pow+0x384>
 80094c4:	4aa4      	ldr	r2, [pc, #656]	; (8009758 <__ieee754_pow+0xa28>)
 80094c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094ca:	4293      	cmp	r3, r2
 80094cc:	f340 810b 	ble.w	80096e6 <__ieee754_pow+0x9b6>
 80094d0:	151b      	asrs	r3, r3, #20
 80094d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80094d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80094da:	fa4a f303 	asr.w	r3, sl, r3
 80094de:	445b      	add	r3, fp
 80094e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80094e4:	4e9d      	ldr	r6, [pc, #628]	; (800975c <__ieee754_pow+0xa2c>)
 80094e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80094ea:	4116      	asrs	r6, r2
 80094ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80094f0:	2000      	movs	r0, #0
 80094f2:	ea23 0106 	bic.w	r1, r3, r6
 80094f6:	f1c2 0214 	rsb	r2, r2, #20
 80094fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80094fe:	fa4a fa02 	asr.w	sl, sl, r2
 8009502:	f1bb 0f00 	cmp.w	fp, #0
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4620      	mov	r0, r4
 800950c:	4629      	mov	r1, r5
 800950e:	bfb8      	it	lt
 8009510:	f1ca 0a00 	rsblt	sl, sl, #0
 8009514:	f7f6 feb8 	bl	8000288 <__aeabi_dsub>
 8009518:	ec41 0b19 	vmov	d9, r0, r1
 800951c:	4642      	mov	r2, r8
 800951e:	464b      	mov	r3, r9
 8009520:	ec51 0b19 	vmov	r0, r1, d9
 8009524:	f7f6 feb2 	bl	800028c <__adddf3>
 8009528:	2400      	movs	r4, #0
 800952a:	a379      	add	r3, pc, #484	; (adr r3, 8009710 <__ieee754_pow+0x9e0>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	4620      	mov	r0, r4
 8009532:	460d      	mov	r5, r1
 8009534:	f7f7 f860 	bl	80005f8 <__aeabi_dmul>
 8009538:	ec53 2b19 	vmov	r2, r3, d9
 800953c:	4606      	mov	r6, r0
 800953e:	460f      	mov	r7, r1
 8009540:	4620      	mov	r0, r4
 8009542:	4629      	mov	r1, r5
 8009544:	f7f6 fea0 	bl	8000288 <__aeabi_dsub>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4640      	mov	r0, r8
 800954e:	4649      	mov	r1, r9
 8009550:	f7f6 fe9a 	bl	8000288 <__aeabi_dsub>
 8009554:	a370      	add	r3, pc, #448	; (adr r3, 8009718 <__ieee754_pow+0x9e8>)
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	f7f7 f84d 	bl	80005f8 <__aeabi_dmul>
 800955e:	a370      	add	r3, pc, #448	; (adr r3, 8009720 <__ieee754_pow+0x9f0>)
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	4680      	mov	r8, r0
 8009566:	4689      	mov	r9, r1
 8009568:	4620      	mov	r0, r4
 800956a:	4629      	mov	r1, r5
 800956c:	f7f7 f844 	bl	80005f8 <__aeabi_dmul>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4640      	mov	r0, r8
 8009576:	4649      	mov	r1, r9
 8009578:	f7f6 fe88 	bl	800028c <__adddf3>
 800957c:	4604      	mov	r4, r0
 800957e:	460d      	mov	r5, r1
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4630      	mov	r0, r6
 8009586:	4639      	mov	r1, r7
 8009588:	f7f6 fe80 	bl	800028c <__adddf3>
 800958c:	4632      	mov	r2, r6
 800958e:	463b      	mov	r3, r7
 8009590:	4680      	mov	r8, r0
 8009592:	4689      	mov	r9, r1
 8009594:	f7f6 fe78 	bl	8000288 <__aeabi_dsub>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4620      	mov	r0, r4
 800959e:	4629      	mov	r1, r5
 80095a0:	f7f6 fe72 	bl	8000288 <__aeabi_dsub>
 80095a4:	4642      	mov	r2, r8
 80095a6:	4606      	mov	r6, r0
 80095a8:	460f      	mov	r7, r1
 80095aa:	464b      	mov	r3, r9
 80095ac:	4640      	mov	r0, r8
 80095ae:	4649      	mov	r1, r9
 80095b0:	f7f7 f822 	bl	80005f8 <__aeabi_dmul>
 80095b4:	a35c      	add	r3, pc, #368	; (adr r3, 8009728 <__ieee754_pow+0x9f8>)
 80095b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ba:	4604      	mov	r4, r0
 80095bc:	460d      	mov	r5, r1
 80095be:	f7f7 f81b 	bl	80005f8 <__aeabi_dmul>
 80095c2:	a35b      	add	r3, pc, #364	; (adr r3, 8009730 <__ieee754_pow+0xa00>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f7f6 fe5e 	bl	8000288 <__aeabi_dsub>
 80095cc:	4622      	mov	r2, r4
 80095ce:	462b      	mov	r3, r5
 80095d0:	f7f7 f812 	bl	80005f8 <__aeabi_dmul>
 80095d4:	a358      	add	r3, pc, #352	; (adr r3, 8009738 <__ieee754_pow+0xa08>)
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	f7f6 fe57 	bl	800028c <__adddf3>
 80095de:	4622      	mov	r2, r4
 80095e0:	462b      	mov	r3, r5
 80095e2:	f7f7 f809 	bl	80005f8 <__aeabi_dmul>
 80095e6:	a356      	add	r3, pc, #344	; (adr r3, 8009740 <__ieee754_pow+0xa10>)
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	f7f6 fe4c 	bl	8000288 <__aeabi_dsub>
 80095f0:	4622      	mov	r2, r4
 80095f2:	462b      	mov	r3, r5
 80095f4:	f7f7 f800 	bl	80005f8 <__aeabi_dmul>
 80095f8:	a353      	add	r3, pc, #332	; (adr r3, 8009748 <__ieee754_pow+0xa18>)
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	f7f6 fe45 	bl	800028c <__adddf3>
 8009602:	4622      	mov	r2, r4
 8009604:	462b      	mov	r3, r5
 8009606:	f7f6 fff7 	bl	80005f8 <__aeabi_dmul>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4640      	mov	r0, r8
 8009610:	4649      	mov	r1, r9
 8009612:	f7f6 fe39 	bl	8000288 <__aeabi_dsub>
 8009616:	4604      	mov	r4, r0
 8009618:	460d      	mov	r5, r1
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	4640      	mov	r0, r8
 8009620:	4649      	mov	r1, r9
 8009622:	f7f6 ffe9 	bl	80005f8 <__aeabi_dmul>
 8009626:	2200      	movs	r2, #0
 8009628:	ec41 0b19 	vmov	d9, r0, r1
 800962c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009630:	4620      	mov	r0, r4
 8009632:	4629      	mov	r1, r5
 8009634:	f7f6 fe28 	bl	8000288 <__aeabi_dsub>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	ec51 0b19 	vmov	r0, r1, d9
 8009640:	f7f7 f904 	bl	800084c <__aeabi_ddiv>
 8009644:	4632      	mov	r2, r6
 8009646:	4604      	mov	r4, r0
 8009648:	460d      	mov	r5, r1
 800964a:	463b      	mov	r3, r7
 800964c:	4640      	mov	r0, r8
 800964e:	4649      	mov	r1, r9
 8009650:	f7f6 ffd2 	bl	80005f8 <__aeabi_dmul>
 8009654:	4632      	mov	r2, r6
 8009656:	463b      	mov	r3, r7
 8009658:	f7f6 fe18 	bl	800028c <__adddf3>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4620      	mov	r0, r4
 8009662:	4629      	mov	r1, r5
 8009664:	f7f6 fe10 	bl	8000288 <__aeabi_dsub>
 8009668:	4642      	mov	r2, r8
 800966a:	464b      	mov	r3, r9
 800966c:	f7f6 fe0c 	bl	8000288 <__aeabi_dsub>
 8009670:	460b      	mov	r3, r1
 8009672:	4602      	mov	r2, r0
 8009674:	493a      	ldr	r1, [pc, #232]	; (8009760 <__ieee754_pow+0xa30>)
 8009676:	2000      	movs	r0, #0
 8009678:	f7f6 fe06 	bl	8000288 <__aeabi_dsub>
 800967c:	e9cd 0100 	strd	r0, r1, [sp]
 8009680:	9b01      	ldr	r3, [sp, #4]
 8009682:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800968a:	da2f      	bge.n	80096ec <__ieee754_pow+0x9bc>
 800968c:	4650      	mov	r0, sl
 800968e:	ed9d 0b00 	vldr	d0, [sp]
 8009692:	f000 f9cd 	bl	8009a30 <scalbn>
 8009696:	ec51 0b10 	vmov	r0, r1, d0
 800969a:	ec53 2b18 	vmov	r2, r3, d8
 800969e:	f7ff bbe0 	b.w	8008e62 <__ieee754_pow+0x132>
 80096a2:	4b30      	ldr	r3, [pc, #192]	; (8009764 <__ieee754_pow+0xa34>)
 80096a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80096a8:	429e      	cmp	r6, r3
 80096aa:	f77f af0b 	ble.w	80094c4 <__ieee754_pow+0x794>
 80096ae:	4b2e      	ldr	r3, [pc, #184]	; (8009768 <__ieee754_pow+0xa38>)
 80096b0:	440b      	add	r3, r1
 80096b2:	4303      	orrs	r3, r0
 80096b4:	d00b      	beq.n	80096ce <__ieee754_pow+0x99e>
 80096b6:	a326      	add	r3, pc, #152	; (adr r3, 8009750 <__ieee754_pow+0xa20>)
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	ec51 0b18 	vmov	r0, r1, d8
 80096c0:	f7f6 ff9a 	bl	80005f8 <__aeabi_dmul>
 80096c4:	a322      	add	r3, pc, #136	; (adr r3, 8009750 <__ieee754_pow+0xa20>)
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	f7ff bbca 	b.w	8008e62 <__ieee754_pow+0x132>
 80096ce:	4622      	mov	r2, r4
 80096d0:	462b      	mov	r3, r5
 80096d2:	f7f6 fdd9 	bl	8000288 <__aeabi_dsub>
 80096d6:	4642      	mov	r2, r8
 80096d8:	464b      	mov	r3, r9
 80096da:	f7f7 fa13 	bl	8000b04 <__aeabi_dcmpge>
 80096de:	2800      	cmp	r0, #0
 80096e0:	f43f aef0 	beq.w	80094c4 <__ieee754_pow+0x794>
 80096e4:	e7e7      	b.n	80096b6 <__ieee754_pow+0x986>
 80096e6:	f04f 0a00 	mov.w	sl, #0
 80096ea:	e717      	b.n	800951c <__ieee754_pow+0x7ec>
 80096ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096f0:	4619      	mov	r1, r3
 80096f2:	e7d2      	b.n	800969a <__ieee754_pow+0x96a>
 80096f4:	491a      	ldr	r1, [pc, #104]	; (8009760 <__ieee754_pow+0xa30>)
 80096f6:	2000      	movs	r0, #0
 80096f8:	f7ff bb9e 	b.w	8008e38 <__ieee754_pow+0x108>
 80096fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009700:	f7ff bb9a 	b.w	8008e38 <__ieee754_pow+0x108>
 8009704:	9000      	str	r0, [sp, #0]
 8009706:	f7ff bb76 	b.w	8008df6 <__ieee754_pow+0xc6>
 800970a:	2100      	movs	r1, #0
 800970c:	f7ff bb60 	b.w	8008dd0 <__ieee754_pow+0xa0>
 8009710:	00000000 	.word	0x00000000
 8009714:	3fe62e43 	.word	0x3fe62e43
 8009718:	fefa39ef 	.word	0xfefa39ef
 800971c:	3fe62e42 	.word	0x3fe62e42
 8009720:	0ca86c39 	.word	0x0ca86c39
 8009724:	be205c61 	.word	0xbe205c61
 8009728:	72bea4d0 	.word	0x72bea4d0
 800972c:	3e663769 	.word	0x3e663769
 8009730:	c5d26bf1 	.word	0xc5d26bf1
 8009734:	3ebbbd41 	.word	0x3ebbbd41
 8009738:	af25de2c 	.word	0xaf25de2c
 800973c:	3f11566a 	.word	0x3f11566a
 8009740:	16bebd93 	.word	0x16bebd93
 8009744:	3f66c16c 	.word	0x3f66c16c
 8009748:	5555553e 	.word	0x5555553e
 800974c:	3fc55555 	.word	0x3fc55555
 8009750:	c2f8f359 	.word	0xc2f8f359
 8009754:	01a56e1f 	.word	0x01a56e1f
 8009758:	3fe00000 	.word	0x3fe00000
 800975c:	000fffff 	.word	0x000fffff
 8009760:	3ff00000 	.word	0x3ff00000
 8009764:	4090cbff 	.word	0x4090cbff
 8009768:	3f6f3400 	.word	0x3f6f3400
 800976c:	652b82fe 	.word	0x652b82fe
 8009770:	3c971547 	.word	0x3c971547

08009774 <__ieee754_sqrt>:
 8009774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009778:	ec55 4b10 	vmov	r4, r5, d0
 800977c:	4e56      	ldr	r6, [pc, #344]	; (80098d8 <__ieee754_sqrt+0x164>)
 800977e:	43ae      	bics	r6, r5
 8009780:	ee10 0a10 	vmov	r0, s0
 8009784:	ee10 3a10 	vmov	r3, s0
 8009788:	4629      	mov	r1, r5
 800978a:	462a      	mov	r2, r5
 800978c:	d110      	bne.n	80097b0 <__ieee754_sqrt+0x3c>
 800978e:	ee10 2a10 	vmov	r2, s0
 8009792:	462b      	mov	r3, r5
 8009794:	f7f6 ff30 	bl	80005f8 <__aeabi_dmul>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4620      	mov	r0, r4
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f6 fd74 	bl	800028c <__adddf3>
 80097a4:	4604      	mov	r4, r0
 80097a6:	460d      	mov	r5, r1
 80097a8:	ec45 4b10 	vmov	d0, r4, r5
 80097ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b0:	2d00      	cmp	r5, #0
 80097b2:	dc10      	bgt.n	80097d6 <__ieee754_sqrt+0x62>
 80097b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80097b8:	4330      	orrs	r0, r6
 80097ba:	d0f5      	beq.n	80097a8 <__ieee754_sqrt+0x34>
 80097bc:	b15d      	cbz	r5, 80097d6 <__ieee754_sqrt+0x62>
 80097be:	ee10 2a10 	vmov	r2, s0
 80097c2:	462b      	mov	r3, r5
 80097c4:	ee10 0a10 	vmov	r0, s0
 80097c8:	f7f6 fd5e 	bl	8000288 <__aeabi_dsub>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	f7f7 f83c 	bl	800084c <__aeabi_ddiv>
 80097d4:	e7e6      	b.n	80097a4 <__ieee754_sqrt+0x30>
 80097d6:	1509      	asrs	r1, r1, #20
 80097d8:	d076      	beq.n	80098c8 <__ieee754_sqrt+0x154>
 80097da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80097de:	07ce      	lsls	r6, r1, #31
 80097e0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80097e4:	bf5e      	ittt	pl
 80097e6:	0fda      	lsrpl	r2, r3, #31
 80097e8:	005b      	lslpl	r3, r3, #1
 80097ea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80097ee:	0fda      	lsrs	r2, r3, #31
 80097f0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80097f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80097f8:	2000      	movs	r0, #0
 80097fa:	106d      	asrs	r5, r5, #1
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	f04f 0e16 	mov.w	lr, #22
 8009802:	4684      	mov	ip, r0
 8009804:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009808:	eb0c 0401 	add.w	r4, ip, r1
 800980c:	4294      	cmp	r4, r2
 800980e:	bfde      	ittt	le
 8009810:	1b12      	suble	r2, r2, r4
 8009812:	eb04 0c01 	addle.w	ip, r4, r1
 8009816:	1840      	addle	r0, r0, r1
 8009818:	0052      	lsls	r2, r2, #1
 800981a:	f1be 0e01 	subs.w	lr, lr, #1
 800981e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009822:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009826:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800982a:	d1ed      	bne.n	8009808 <__ieee754_sqrt+0x94>
 800982c:	4671      	mov	r1, lr
 800982e:	2720      	movs	r7, #32
 8009830:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009834:	4562      	cmp	r2, ip
 8009836:	eb04 060e 	add.w	r6, r4, lr
 800983a:	dc02      	bgt.n	8009842 <__ieee754_sqrt+0xce>
 800983c:	d113      	bne.n	8009866 <__ieee754_sqrt+0xf2>
 800983e:	429e      	cmp	r6, r3
 8009840:	d811      	bhi.n	8009866 <__ieee754_sqrt+0xf2>
 8009842:	2e00      	cmp	r6, #0
 8009844:	eb06 0e04 	add.w	lr, r6, r4
 8009848:	da43      	bge.n	80098d2 <__ieee754_sqrt+0x15e>
 800984a:	f1be 0f00 	cmp.w	lr, #0
 800984e:	db40      	blt.n	80098d2 <__ieee754_sqrt+0x15e>
 8009850:	f10c 0801 	add.w	r8, ip, #1
 8009854:	eba2 020c 	sub.w	r2, r2, ip
 8009858:	429e      	cmp	r6, r3
 800985a:	bf88      	it	hi
 800985c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009860:	1b9b      	subs	r3, r3, r6
 8009862:	4421      	add	r1, r4
 8009864:	46c4      	mov	ip, r8
 8009866:	0052      	lsls	r2, r2, #1
 8009868:	3f01      	subs	r7, #1
 800986a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800986e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009872:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009876:	d1dd      	bne.n	8009834 <__ieee754_sqrt+0xc0>
 8009878:	4313      	orrs	r3, r2
 800987a:	d006      	beq.n	800988a <__ieee754_sqrt+0x116>
 800987c:	1c4c      	adds	r4, r1, #1
 800987e:	bf13      	iteet	ne
 8009880:	3101      	addne	r1, #1
 8009882:	3001      	addeq	r0, #1
 8009884:	4639      	moveq	r1, r7
 8009886:	f021 0101 	bicne.w	r1, r1, #1
 800988a:	1043      	asrs	r3, r0, #1
 800988c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009890:	0849      	lsrs	r1, r1, #1
 8009892:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009896:	07c2      	lsls	r2, r0, #31
 8009898:	bf48      	it	mi
 800989a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800989e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80098a2:	460c      	mov	r4, r1
 80098a4:	463d      	mov	r5, r7
 80098a6:	e77f      	b.n	80097a8 <__ieee754_sqrt+0x34>
 80098a8:	0ada      	lsrs	r2, r3, #11
 80098aa:	3815      	subs	r0, #21
 80098ac:	055b      	lsls	r3, r3, #21
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	d0fa      	beq.n	80098a8 <__ieee754_sqrt+0x134>
 80098b2:	02d7      	lsls	r7, r2, #11
 80098b4:	d50a      	bpl.n	80098cc <__ieee754_sqrt+0x158>
 80098b6:	f1c1 0420 	rsb	r4, r1, #32
 80098ba:	fa23 f404 	lsr.w	r4, r3, r4
 80098be:	1e4d      	subs	r5, r1, #1
 80098c0:	408b      	lsls	r3, r1
 80098c2:	4322      	orrs	r2, r4
 80098c4:	1b41      	subs	r1, r0, r5
 80098c6:	e788      	b.n	80097da <__ieee754_sqrt+0x66>
 80098c8:	4608      	mov	r0, r1
 80098ca:	e7f0      	b.n	80098ae <__ieee754_sqrt+0x13a>
 80098cc:	0052      	lsls	r2, r2, #1
 80098ce:	3101      	adds	r1, #1
 80098d0:	e7ef      	b.n	80098b2 <__ieee754_sqrt+0x13e>
 80098d2:	46e0      	mov	r8, ip
 80098d4:	e7be      	b.n	8009854 <__ieee754_sqrt+0xe0>
 80098d6:	bf00      	nop
 80098d8:	7ff00000 	.word	0x7ff00000

080098dc <fabs>:
 80098dc:	ec51 0b10 	vmov	r0, r1, d0
 80098e0:	ee10 2a10 	vmov	r2, s0
 80098e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098e8:	ec43 2b10 	vmov	d0, r2, r3
 80098ec:	4770      	bx	lr

080098ee <finite>:
 80098ee:	b082      	sub	sp, #8
 80098f0:	ed8d 0b00 	vstr	d0, [sp]
 80098f4:	9801      	ldr	r0, [sp, #4]
 80098f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80098fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80098fe:	0fc0      	lsrs	r0, r0, #31
 8009900:	b002      	add	sp, #8
 8009902:	4770      	bx	lr
 8009904:	0000      	movs	r0, r0
	...

08009908 <nan>:
 8009908:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009910 <nan+0x8>
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	00000000 	.word	0x00000000
 8009914:	7ff80000 	.word	0x7ff80000

08009918 <rint>:
 8009918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800991a:	ec51 0b10 	vmov	r0, r1, d0
 800991e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009922:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009926:	2e13      	cmp	r6, #19
 8009928:	ee10 4a10 	vmov	r4, s0
 800992c:	460b      	mov	r3, r1
 800992e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009932:	dc58      	bgt.n	80099e6 <rint+0xce>
 8009934:	2e00      	cmp	r6, #0
 8009936:	da2b      	bge.n	8009990 <rint+0x78>
 8009938:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800993c:	4302      	orrs	r2, r0
 800993e:	d023      	beq.n	8009988 <rint+0x70>
 8009940:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009944:	4302      	orrs	r2, r0
 8009946:	4254      	negs	r4, r2
 8009948:	4314      	orrs	r4, r2
 800994a:	0c4b      	lsrs	r3, r1, #17
 800994c:	0b24      	lsrs	r4, r4, #12
 800994e:	045b      	lsls	r3, r3, #17
 8009950:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009954:	ea44 0103 	orr.w	r1, r4, r3
 8009958:	4b32      	ldr	r3, [pc, #200]	; (8009a24 <rint+0x10c>)
 800995a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800995e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	4630      	mov	r0, r6
 8009968:	4639      	mov	r1, r7
 800996a:	f7f6 fc8f 	bl	800028c <__adddf3>
 800996e:	e9cd 0100 	strd	r0, r1, [sp]
 8009972:	463b      	mov	r3, r7
 8009974:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009978:	4632      	mov	r2, r6
 800997a:	f7f6 fc85 	bl	8000288 <__aeabi_dsub>
 800997e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009982:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009986:	4639      	mov	r1, r7
 8009988:	ec41 0b10 	vmov	d0, r0, r1
 800998c:	b003      	add	sp, #12
 800998e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009990:	4a25      	ldr	r2, [pc, #148]	; (8009a28 <rint+0x110>)
 8009992:	4132      	asrs	r2, r6
 8009994:	ea01 0702 	and.w	r7, r1, r2
 8009998:	4307      	orrs	r7, r0
 800999a:	d0f5      	beq.n	8009988 <rint+0x70>
 800999c:	0851      	lsrs	r1, r2, #1
 800999e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80099a2:	4314      	orrs	r4, r2
 80099a4:	d00c      	beq.n	80099c0 <rint+0xa8>
 80099a6:	ea23 0201 	bic.w	r2, r3, r1
 80099aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80099ae:	2e13      	cmp	r6, #19
 80099b0:	fa43 f606 	asr.w	r6, r3, r6
 80099b4:	bf0c      	ite	eq
 80099b6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80099ba:	2400      	movne	r4, #0
 80099bc:	ea42 0306 	orr.w	r3, r2, r6
 80099c0:	4918      	ldr	r1, [pc, #96]	; (8009a24 <rint+0x10c>)
 80099c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80099c6:	4622      	mov	r2, r4
 80099c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	f7f6 fc5c 	bl	800028c <__adddf3>
 80099d4:	e9cd 0100 	strd	r0, r1, [sp]
 80099d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099dc:	4622      	mov	r2, r4
 80099de:	462b      	mov	r3, r5
 80099e0:	f7f6 fc52 	bl	8000288 <__aeabi_dsub>
 80099e4:	e7d0      	b.n	8009988 <rint+0x70>
 80099e6:	2e33      	cmp	r6, #51	; 0x33
 80099e8:	dd07      	ble.n	80099fa <rint+0xe2>
 80099ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80099ee:	d1cb      	bne.n	8009988 <rint+0x70>
 80099f0:	ee10 2a10 	vmov	r2, s0
 80099f4:	f7f6 fc4a 	bl	800028c <__adddf3>
 80099f8:	e7c6      	b.n	8009988 <rint+0x70>
 80099fa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80099fe:	f04f 36ff 	mov.w	r6, #4294967295
 8009a02:	40d6      	lsrs	r6, r2
 8009a04:	4230      	tst	r0, r6
 8009a06:	d0bf      	beq.n	8009988 <rint+0x70>
 8009a08:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009a0c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009a10:	bf1f      	itttt	ne
 8009a12:	ea24 0101 	bicne.w	r1, r4, r1
 8009a16:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009a1a:	fa44 f202 	asrne.w	r2, r4, r2
 8009a1e:	ea41 0402 	orrne.w	r4, r1, r2
 8009a22:	e7cd      	b.n	80099c0 <rint+0xa8>
 8009a24:	08009da8 	.word	0x08009da8
 8009a28:	000fffff 	.word	0x000fffff
 8009a2c:	00000000 	.word	0x00000000

08009a30 <scalbn>:
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	ec55 4b10 	vmov	r4, r5, d0
 8009a36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	b99a      	cbnz	r2, 8009a68 <scalbn+0x38>
 8009a40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009a44:	4323      	orrs	r3, r4
 8009a46:	d036      	beq.n	8009ab6 <scalbn+0x86>
 8009a48:	4b39      	ldr	r3, [pc, #228]	; (8009b30 <scalbn+0x100>)
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	ee10 0a10 	vmov	r0, s0
 8009a50:	2200      	movs	r2, #0
 8009a52:	f7f6 fdd1 	bl	80005f8 <__aeabi_dmul>
 8009a56:	4b37      	ldr	r3, [pc, #220]	; (8009b34 <scalbn+0x104>)
 8009a58:	429e      	cmp	r6, r3
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	da10      	bge.n	8009a82 <scalbn+0x52>
 8009a60:	a32b      	add	r3, pc, #172	; (adr r3, 8009b10 <scalbn+0xe0>)
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	e03a      	b.n	8009ade <scalbn+0xae>
 8009a68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009a6c:	428a      	cmp	r2, r1
 8009a6e:	d10c      	bne.n	8009a8a <scalbn+0x5a>
 8009a70:	ee10 2a10 	vmov	r2, s0
 8009a74:	4620      	mov	r0, r4
 8009a76:	4629      	mov	r1, r5
 8009a78:	f7f6 fc08 	bl	800028c <__adddf3>
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	460d      	mov	r5, r1
 8009a80:	e019      	b.n	8009ab6 <scalbn+0x86>
 8009a82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009a86:	460b      	mov	r3, r1
 8009a88:	3a36      	subs	r2, #54	; 0x36
 8009a8a:	4432      	add	r2, r6
 8009a8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009a90:	428a      	cmp	r2, r1
 8009a92:	dd08      	ble.n	8009aa6 <scalbn+0x76>
 8009a94:	2d00      	cmp	r5, #0
 8009a96:	a120      	add	r1, pc, #128	; (adr r1, 8009b18 <scalbn+0xe8>)
 8009a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a9c:	da1c      	bge.n	8009ad8 <scalbn+0xa8>
 8009a9e:	a120      	add	r1, pc, #128	; (adr r1, 8009b20 <scalbn+0xf0>)
 8009aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009aa4:	e018      	b.n	8009ad8 <scalbn+0xa8>
 8009aa6:	2a00      	cmp	r2, #0
 8009aa8:	dd08      	ble.n	8009abc <scalbn+0x8c>
 8009aaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009aae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ab2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ab6:	ec45 4b10 	vmov	d0, r4, r5
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009ac0:	da19      	bge.n	8009af6 <scalbn+0xc6>
 8009ac2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009ac6:	429e      	cmp	r6, r3
 8009ac8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009acc:	dd0a      	ble.n	8009ae4 <scalbn+0xb4>
 8009ace:	a112      	add	r1, pc, #72	; (adr r1, 8009b18 <scalbn+0xe8>)
 8009ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e2      	bne.n	8009a9e <scalbn+0x6e>
 8009ad8:	a30f      	add	r3, pc, #60	; (adr r3, 8009b18 <scalbn+0xe8>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f7f6 fd8b 	bl	80005f8 <__aeabi_dmul>
 8009ae2:	e7cb      	b.n	8009a7c <scalbn+0x4c>
 8009ae4:	a10a      	add	r1, pc, #40	; (adr r1, 8009b10 <scalbn+0xe0>)
 8009ae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0b8      	beq.n	8009a60 <scalbn+0x30>
 8009aee:	a10e      	add	r1, pc, #56	; (adr r1, 8009b28 <scalbn+0xf8>)
 8009af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009af4:	e7b4      	b.n	8009a60 <scalbn+0x30>
 8009af6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009afa:	3236      	adds	r2, #54	; 0x36
 8009afc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009b00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009b04:	4620      	mov	r0, r4
 8009b06:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <scalbn+0x108>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	e7e8      	b.n	8009ade <scalbn+0xae>
 8009b0c:	f3af 8000 	nop.w
 8009b10:	c2f8f359 	.word	0xc2f8f359
 8009b14:	01a56e1f 	.word	0x01a56e1f
 8009b18:	8800759c 	.word	0x8800759c
 8009b1c:	7e37e43c 	.word	0x7e37e43c
 8009b20:	8800759c 	.word	0x8800759c
 8009b24:	fe37e43c 	.word	0xfe37e43c
 8009b28:	c2f8f359 	.word	0xc2f8f359
 8009b2c:	81a56e1f 	.word	0x81a56e1f
 8009b30:	43500000 	.word	0x43500000
 8009b34:	ffff3cb0 	.word	0xffff3cb0
 8009b38:	3c900000 	.word	0x3c900000

08009b3c <_init>:
 8009b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3e:	bf00      	nop
 8009b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b42:	bc08      	pop	{r3}
 8009b44:	469e      	mov	lr, r3
 8009b46:	4770      	bx	lr

08009b48 <_fini>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	bf00      	nop
 8009b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4e:	bc08      	pop	{r3}
 8009b50:	469e      	mov	lr, r3
 8009b52:	4770      	bx	lr
