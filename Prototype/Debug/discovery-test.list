
discovery-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c634  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800c7c8  0800c7c8  0001c7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c930  0800c930  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800c930  0800c930  0001c930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c938  0800c938  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c938  0800c938  0001c938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c93c  0800c93c  0001c93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800c940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  20000148  0800ca88  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a84  0800ca88  00020a84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4c9  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047a2  00000000  00000000  0003f641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00043de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  00045400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bcd  00000000  00000000  00046840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd03  00000000  00000000  0006d40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df755  00000000  00000000  00089110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168865  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e4  00000000  00000000  001688b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000148 	.word	0x20000148
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7ac 	.word	0x0800c7ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	0800c7ac 	.word	0x0800c7ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <delay+0x30>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000ea2:	bf00      	nop
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <delay+0x30>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d3f9      	bcc.n	8000ea4 <delay+0x14>
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000288 	.word	0x20000288

08000ec4 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eda:	4823      	ldr	r0, [pc, #140]	; (8000f68 <send_to_lcd+0xa4>)
 8000edc:	f003 fb9a 	bl	8004614 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	08db      	lsrs	r3, r3, #3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <send_to_lcd+0xa8>)
 8000ef4:	f003 fb8e 	bl	8004614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	089b      	lsrs	r3, r3, #2
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	4818      	ldr	r0, [pc, #96]	; (8000f6c <send_to_lcd+0xa8>)
 8000f0c:	f003 fb82 	bl	8004614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f22:	4812      	ldr	r0, [pc, #72]	; (8000f6c <send_to_lcd+0xa8>)
 8000f24:	f003 fb76 	bl	8004614 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <send_to_lcd+0xa8>)
 8000f38:	f003 fb6c 	bl	8004614 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f42:	4809      	ldr	r0, [pc, #36]	; (8000f68 <send_to_lcd+0xa4>)
 8000f44:	f003 fb66 	bl	8004614 <HAL_GPIO_WritePin>
	delay (40);
 8000f48:	2028      	movs	r0, #40	; 0x28
 8000f4a:	f7ff ffa1 	bl	8000e90 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <send_to_lcd+0xa4>)
 8000f56:	f003 fb5d 	bl	8004614 <HAL_GPIO_WritePin>
	delay (40);
 8000f5a:	2028      	movs	r0, #40	; 0x28
 8000f5c:	f7ff ff98 	bl	8000e90 <delay>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40020400 	.word	0x40020400

08000f70 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff9d 	bl	8000ec4 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff94 	bl	8000ec4 <send_to_lcd>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff83 	bl	8000ec4 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 030f 	and.w	r3, r3, #15
 8000fc4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff7a 	bl	8000ec4 <send_to_lcd>
}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <lcd_put_cur>:
	lcd_send_cmd(0x01);
	HAL_Delay(2);
}

void lcd_put_cur(int row, int col)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <lcd_put_cur+0x18>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d005      	beq.n	8000ffa <lcd_put_cur+0x22>
 8000fee:	e009      	b.n	8001004 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff6:	603b      	str	r3, [r7, #0]
            break;
 8000ff8:	e004      	b.n	8001004 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001000:	603b      	str	r3, [r7, #0]
            break;
 8001002:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffb1 	bl	8000f70 <lcd_send_cmd>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <lcd_init>:


void lcd_init (void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800101a:	2032      	movs	r0, #50	; 0x32
 800101c:	f001 fede 	bl	8002ddc <HAL_Delay>
	lcd_send_cmd (0x30);
 8001020:	2030      	movs	r0, #48	; 0x30
 8001022:	f7ff ffa5 	bl	8000f70 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001026:	2005      	movs	r0, #5
 8001028:	f001 fed8 	bl	8002ddc <HAL_Delay>
	lcd_send_cmd (0x30);
 800102c:	2030      	movs	r0, #48	; 0x30
 800102e:	f7ff ff9f 	bl	8000f70 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001032:	2001      	movs	r0, #1
 8001034:	f001 fed2 	bl	8002ddc <HAL_Delay>
	lcd_send_cmd (0x30);
 8001038:	2030      	movs	r0, #48	; 0x30
 800103a:	f7ff ff99 	bl	8000f70 <lcd_send_cmd>
	HAL_Delay(10);
 800103e:	200a      	movs	r0, #10
 8001040:	f001 fecc 	bl	8002ddc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001044:	2020      	movs	r0, #32
 8001046:	f7ff ff93 	bl	8000f70 <lcd_send_cmd>
	HAL_Delay(10);
 800104a:	200a      	movs	r0, #10
 800104c:	f001 fec6 	bl	8002ddc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001050:	2028      	movs	r0, #40	; 0x28
 8001052:	f7ff ff8d 	bl	8000f70 <lcd_send_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f001 fec0 	bl	8002ddc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800105c:	2008      	movs	r0, #8
 800105e:	f7ff ff87 	bl	8000f70 <lcd_send_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f001 feba 	bl	8002ddc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff ff81 	bl	8000f70 <lcd_send_cmd>
	HAL_Delay(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f001 feb4 	bl	8002ddc <HAL_Delay>
	HAL_Delay(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f001 feb1 	bl	8002ddc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800107a:	2006      	movs	r0, #6
 800107c:	f7ff ff78 	bl	8000f70 <lcd_send_cmd>
	HAL_Delay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f001 feab 	bl	8002ddc <HAL_Delay>
	lcd_send_cmd (0x0F); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001086:	200f      	movs	r0, #15
 8001088:	f7ff ff72 	bl	8000f70 <lcd_send_cmd>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}

08001090 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001098:	e006      	b.n	80010a8 <lcd_send_string+0x18>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff7e 	bl	8000fa4 <lcd_send_data>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f4      	bne.n	800109a <lcd_send_string+0xa>
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <getUInt32>:
char* intToString(int number, uint8_t digits)
{
	sprintf(char_arr, "%d", number);
	return char_arr;
}
uint32_t getUInt32(uint8_t* arr) {
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
	uint32_t value = arr[0] & 0xFF;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	60fb      	str	r3, [r7, #12]
	value |= (arr[1] << 8) & 0xFFFF;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3301      	adds	r3, #1
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
	value |= (arr[2] << 16) & 0xFFFFFF;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3302      	adds	r3, #2
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
	value |= (arr[3] << 24) & 0xFFFFFFFF;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3303      	adds	r3, #3
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	061b      	lsls	r3, r3, #24
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
	return value;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <wordToBytes>:
void wordToBytes(uint32_t value){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	id_arr[3] = (value >> 24) & 0xFF;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	0e1b      	lsrs	r3, r3, #24
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <wordToBytes+0x3c>)
 8001118:	70da      	strb	r2, [r3, #3]
	id_arr[2] = (value >> 16) & 0xFF;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	0c1b      	lsrs	r3, r3, #16
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <wordToBytes+0x3c>)
 8001122:	709a      	strb	r2, [r3, #2]
	id_arr[1] = (value >> 8) & 0xFF;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	0a1b      	lsrs	r3, r3, #8
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <wordToBytes+0x3c>)
 800112c:	705a      	strb	r2, [r3, #1]
	id_arr[0] = value & 0xFF;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <wordToBytes+0x3c>)
 8001134:	701a      	strb	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000184 	.word	0x20000184

08001148 <storeInFlash>:
void storeInFlash(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	//Unlock the Flash Program Erase controller
	HAL_FLASH_Unlock();
 800114c:	f002 ff04 	bl	8003f58 <HAL_FLASH_Unlock>

	//Erase sector
	FLASH_Erase_Sector(FLASH_SECTOR_11, FLASH_VOLTAGE_RANGE_3);
 8001150:	2102      	movs	r1, #2
 8001152:	200b      	movs	r0, #11
 8001154:	f003 f862 	bl	800421c <FLASH_Erase_Sector>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f002 ff2e 	bl	8003fbc <FLASH_WaitForLastOperation>

	//Store the CAN IDs
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x080E0000, getUInt32(id_arr));
 8001160:	4816      	ldr	r0, [pc, #88]	; (80011bc <storeInFlash+0x74>)
 8001162:	f7ff ffaa 	bl	80010ba <getUInt32>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	4914      	ldr	r1, [pc, #80]	; (80011c0 <storeInFlash+0x78>)
 8001170:	2002      	movs	r0, #2
 8001172:	f002 fe9d 	bl	8003eb0 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8001176:	f04f 30ff 	mov.w	r0, #4294967295
 800117a:	f002 ff1f 	bl	8003fbc <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x080E0004, (uint32_t)baud_pos);
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <storeInFlash+0x7c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	490f      	ldr	r1, [pc, #60]	; (80011c8 <storeInFlash+0x80>)
 800118a:	2002      	movs	r0, #2
 800118c:	f002 fe90 	bl	8003eb0 <HAL_FLASH_Program>
	FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f002 ff12 	bl	8003fbc <FLASH_WaitForLastOperation>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x080E0008, (uint32_t)us);
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <storeInFlash+0x84>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	b29a      	uxth	r2, r3
 800119e:	f04f 0300 	mov.w	r3, #0
 80011a2:	490b      	ldr	r1, [pc, #44]	; (80011d0 <storeInFlash+0x88>)
 80011a4:	2002      	movs	r0, #2
 80011a6:	f002 fe83 	bl	8003eb0 <HAL_FLASH_Program>
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295
 80011ae:	f002 ff05 	bl	8003fbc <FLASH_WaitForLastOperation>

	//Lock the Flash Program Erase controller
	HAL_FLASH_Lock();
 80011b2:	f002 fef3 	bl	8003f9c <HAL_FLASH_Lock>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000184 	.word	0x20000184
 80011c0:	080e0000 	.word	0x080e0000
 80011c4:	200000b0 	.word	0x200000b0
 80011c8:	080e0004 	.word	0x080e0004
 80011cc:	20000002 	.word	0x20000002
 80011d0:	080e0008 	.word	0x080e0008
 80011d4:	00000000 	.word	0x00000000

080011d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011d8:	b5b0      	push	{r4, r5, r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t up_val = 0; // up button value
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t down_val = 0; // down button value
 80011e4:	2300      	movs	r3, #0
 80011e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t sel_val = 0; // select button value
 80011ea:	2300      	movs	r3, #0
 80011ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t change_value_bool = 0; //boolean for changing the value the selected item
 80011f0:	2300      	movs	r3, #0
 80011f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint16_t raw_1, raw_2, raw_3; //raw analog data from the sensors
	uint8_t a_data_1[2], a_data_2[2], a_data_3[2]; //analog data in a byte array



	CAN_IDs=(*(__IO uint32_t *) 0x080E0000);
 80011f6:	4bae      	ldr	r3, [pc, #696]	; (80014b0 <main+0x2d8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	4bad      	ldr	r3, [pc, #692]	; (80014b4 <main+0x2dc>)
 80011fe:	601a      	str	r2, [r3, #0]
	wordToBytes(CAN_IDs);
 8001200:	4bac      	ldr	r3, [pc, #688]	; (80014b4 <main+0x2dc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff7f 	bl	8001108 <wordToBytes>
	can_id_1=id_arr[0];
 800120a:	4bab      	ldr	r3, [pc, #684]	; (80014b8 <main+0x2e0>)
 800120c:	781a      	ldrb	r2, [r3, #0]
 800120e:	4bab      	ldr	r3, [pc, #684]	; (80014bc <main+0x2e4>)
 8001210:	701a      	strb	r2, [r3, #0]
	can_id_2=id_arr[1];
 8001212:	4ba9      	ldr	r3, [pc, #676]	; (80014b8 <main+0x2e0>)
 8001214:	785a      	ldrb	r2, [r3, #1]
 8001216:	4baa      	ldr	r3, [pc, #680]	; (80014c0 <main+0x2e8>)
 8001218:	701a      	strb	r2, [r3, #0]
	can_id_3=id_arr[2];
 800121a:	4ba7      	ldr	r3, [pc, #668]	; (80014b8 <main+0x2e0>)
 800121c:	789a      	ldrb	r2, [r3, #2]
 800121e:	4ba9      	ldr	r3, [pc, #676]	; (80014c4 <main+0x2ec>)
 8001220:	701a      	strb	r2, [r3, #0]
	device_id=id_arr[3];
 8001222:	4ba5      	ldr	r3, [pc, #660]	; (80014b8 <main+0x2e0>)
 8001224:	78da      	ldrb	r2, [r3, #3]
 8001226:	4ba8      	ldr	r3, [pc, #672]	; (80014c8 <main+0x2f0>)
 8001228:	701a      	strb	r2, [r3, #0]

	if(can_id_1==can_id_2||can_id_1==can_id_3||can_id_2==can_id_3){
 800122a:	4ba4      	ldr	r3, [pc, #656]	; (80014bc <main+0x2e4>)
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	4ba4      	ldr	r3, [pc, #656]	; (80014c0 <main+0x2e8>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d00b      	beq.n	800124e <main+0x76>
 8001236:	4ba1      	ldr	r3, [pc, #644]	; (80014bc <main+0x2e4>)
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	4ba2      	ldr	r3, [pc, #648]	; (80014c4 <main+0x2ec>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d005      	beq.n	800124e <main+0x76>
 8001242:	4b9f      	ldr	r3, [pc, #636]	; (80014c0 <main+0x2e8>)
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	4b9f      	ldr	r3, [pc, #636]	; (80014c4 <main+0x2ec>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d108      	bne.n	8001260 <main+0x88>
		can_id_1=1;
 800124e:	4b9b      	ldr	r3, [pc, #620]	; (80014bc <main+0x2e4>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
		can_id_2=2;
 8001254:	4b9a      	ldr	r3, [pc, #616]	; (80014c0 <main+0x2e8>)
 8001256:	2202      	movs	r2, #2
 8001258:	701a      	strb	r2, [r3, #0]
		can_id_3=3;
 800125a:	4b9a      	ldr	r3, [pc, #616]	; (80014c4 <main+0x2ec>)
 800125c:	2203      	movs	r2, #3
 800125e:	701a      	strb	r2, [r3, #0]
	}
	if(device_id!=1&&device_id!=0){
 8001260:	4b99      	ldr	r3, [pc, #612]	; (80014c8 <main+0x2f0>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d006      	beq.n	8001276 <main+0x9e>
 8001268:	4b97      	ldr	r3, [pc, #604]	; (80014c8 <main+0x2f0>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <main+0x9e>
		device_id=0;
 8001270:	4b95      	ldr	r3, [pc, #596]	; (80014c8 <main+0x2f0>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
	}
	device_pos=device_id;
 8001276:	4b94      	ldr	r3, [pc, #592]	; (80014c8 <main+0x2f0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b93      	ldr	r3, [pc, #588]	; (80014cc <main+0x2f4>)
 800127e:	601a      	str	r2, [r3, #0]

	baud_pos=(uint8_t)(*(__IO uint32_t *) 0x080E0004);
 8001280:	4b93      	ldr	r3, [pc, #588]	; (80014d0 <main+0x2f8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	4b92      	ldr	r3, [pc, #584]	; (80014d4 <main+0x2fc>)
 800128a:	601a      	str	r2, [r3, #0]
	if(baud_pos<0||baud_pos>3)
 800128c:	4b91      	ldr	r3, [pc, #580]	; (80014d4 <main+0x2fc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db03      	blt.n	800129c <main+0xc4>
 8001294:	4b8f      	ldr	r3, [pc, #572]	; (80014d4 <main+0x2fc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b03      	cmp	r3, #3
 800129a:	dd02      	ble.n	80012a2 <main+0xca>
		baud_pos=3;
 800129c:	4b8d      	ldr	r3, [pc, #564]	; (80014d4 <main+0x2fc>)
 800129e:	2203      	movs	r2, #3
 80012a0:	601a      	str	r2, [r3, #0]
	PSC=pow(2,4-baud_pos);
 80012a2:	4b8c      	ldr	r3, [pc, #560]	; (80014d4 <main+0x2fc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f1c3 0304 	rsb	r3, r3, #4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f93a 	bl	8000524 <__aeabi_i2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ec43 2b11 	vmov	d1, r2, r3
 80012b8:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 80014a8 <main+0x2d0>
 80012bc:	f00a fac0 	bl	800b840 <pow>
 80012c0:	ec53 2b10 	vmov	r2, r3, d0
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc46 	bl	8000b58 <__aeabi_d2uiz>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <main+0x300>)
 80012d2:	701a      	strb	r2, [r3, #0]

	us=(uint16_t)(*(__IO uint32_t *) 0x080E0008);
 80012d4:	4b81      	ldr	r3, [pc, #516]	; (80014dc <main+0x304>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <main+0x308>)
 80012dc:	801a      	strh	r2, [r3, #0]
	if(us>1000)
 80012de:	4b80      	ldr	r3, [pc, #512]	; (80014e0 <main+0x308>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e6:	d90e      	bls.n	8001306 <main+0x12e>
		us=150*(4-baud_pos);
 80012e8:	4b7a      	ldr	r3, [pc, #488]	; (80014d4 <main+0x2fc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f1c3 0304 	rsb	r3, r3, #4
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	461a      	mov	r2, r3
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	b29a      	uxth	r2, r3
 8001302:	4b77      	ldr	r3, [pc, #476]	; (80014e0 <main+0x308>)
 8001304:	801a      	strh	r2, [r3, #0]




	// Set the headers for the first analog signal
	headers_1.StdId = can_id_1; // set the CAN ID
 8001306:	4b6d      	ldr	r3, [pc, #436]	; (80014bc <main+0x2e4>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	4b75      	ldr	r3, [pc, #468]	; (80014e4 <main+0x30c>)
 800130e:	601a      	str	r2, [r3, #0]
	headers_1.IDE = CAN_ID_STD;
 8001310:	4b74      	ldr	r3, [pc, #464]	; (80014e4 <main+0x30c>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
	headers_1.RTR = CAN_RTR_DATA;
 8001316:	4b73      	ldr	r3, [pc, #460]	; (80014e4 <main+0x30c>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
	headers_1.DLC = sizeof(a_data_1); // set the size of the data
 800131c:	4b71      	ldr	r3, [pc, #452]	; (80014e4 <main+0x30c>)
 800131e:	2202      	movs	r2, #2
 8001320:	611a      	str	r2, [r3, #16]
	headers_1.TransmitGlobalTime = DISABLE; // disable transmission of time
 8001322:	4b70      	ldr	r3, [pc, #448]	; (80014e4 <main+0x30c>)
 8001324:	2200      	movs	r2, #0
 8001326:	751a      	strb	r2, [r3, #20]

	// Set the headers for the second analog signal
	headers_2.StdId = can_id_2; // set the CAN ID
 8001328:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <main+0x2e8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b6e      	ldr	r3, [pc, #440]	; (80014e8 <main+0x310>)
 8001330:	601a      	str	r2, [r3, #0]
	headers_2.IDE = CAN_ID_STD;
 8001332:	4b6d      	ldr	r3, [pc, #436]	; (80014e8 <main+0x310>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
	headers_2.RTR = CAN_RTR_DATA;
 8001338:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <main+0x310>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
	headers_2.DLC = sizeof(a_data_2); // set the size of the data
 800133e:	4b6a      	ldr	r3, [pc, #424]	; (80014e8 <main+0x310>)
 8001340:	2202      	movs	r2, #2
 8001342:	611a      	str	r2, [r3, #16]
	headers_2.TransmitGlobalTime = DISABLE; // disable transmission of time
 8001344:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <main+0x310>)
 8001346:	2200      	movs	r2, #0
 8001348:	751a      	strb	r2, [r3, #20]

	// Set the headers for the third analog signal
	headers_3.StdId = can_id_3; // set the CAN ID
 800134a:	4b5e      	ldr	r3, [pc, #376]	; (80014c4 <main+0x2ec>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b66      	ldr	r3, [pc, #408]	; (80014ec <main+0x314>)
 8001352:	601a      	str	r2, [r3, #0]
	headers_3.IDE = CAN_ID_STD;
 8001354:	4b65      	ldr	r3, [pc, #404]	; (80014ec <main+0x314>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
	headers_3.RTR = CAN_RTR_DATA;
 800135a:	4b64      	ldr	r3, [pc, #400]	; (80014ec <main+0x314>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
	headers_3.DLC = sizeof(a_data_3); // set the size of the data
 8001360:	4b62      	ldr	r3, [pc, #392]	; (80014ec <main+0x314>)
 8001362:	2202      	movs	r2, #2
 8001364:	611a      	str	r2, [r3, #16]
	headers_3.TransmitGlobalTime = DISABLE; // disable transmission of time
 8001366:	4b61      	ldr	r3, [pc, #388]	; (80014ec <main+0x314>)
 8001368:	2200      	movs	r2, #0
 800136a:	751a      	strb	r2, [r3, #20]

	//add options to menu
	//set the baud rate
	memset(temp,0,17);
 800136c:	2211      	movs	r2, #17
 800136e:	2100      	movs	r1, #0
 8001370:	485f      	ldr	r0, [pc, #380]	; (80014f0 <main+0x318>)
 8001372:	f009 fdc1 	bl	800aef8 <memset>
	strncpy(temp, baud_str,16);
 8001376:	2210      	movs	r2, #16
 8001378:	495e      	ldr	r1, [pc, #376]	; (80014f4 <main+0x31c>)
 800137a:	485d      	ldr	r0, [pc, #372]	; (80014f0 <main+0x318>)
 800137c:	f009 fef8 	bl	800b170 <strncpy>
	strlcat(temp,baud_rates[baud_pos],17);
 8001380:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <main+0x2fc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <main+0x320>)
 8001388:	4413      	add	r3, r2
 800138a:	2211      	movs	r2, #17
 800138c:	4619      	mov	r1, r3
 800138e:	4858      	ldr	r0, [pc, #352]	; (80014f0 <main+0x318>)
 8001390:	f009 fea3 	bl	800b0da <strlcat>
	strlcpy(display_rows[0],temp,17);
 8001394:	2211      	movs	r2, #17
 8001396:	4956      	ldr	r1, [pc, #344]	; (80014f0 <main+0x318>)
 8001398:	4858      	ldr	r0, [pc, #352]	; (80014fc <main+0x324>)
 800139a:	f009 fec1 	bl	800b120 <strlcpy>
	//set the device
	memset(temp,0,17);
 800139e:	2211      	movs	r2, #17
 80013a0:	2100      	movs	r1, #0
 80013a2:	4853      	ldr	r0, [pc, #332]	; (80014f0 <main+0x318>)
 80013a4:	f009 fda8 	bl	800aef8 <memset>
	strncpy(temp, device_str,16);
 80013a8:	2210      	movs	r2, #16
 80013aa:	4955      	ldr	r1, [pc, #340]	; (8001500 <main+0x328>)
 80013ac:	4850      	ldr	r0, [pc, #320]	; (80014f0 <main+0x318>)
 80013ae:	f009 fedf 	bl	800b170 <strncpy>
	strlcat(temp, device_options[device_pos],17);
 80013b2:	4b46      	ldr	r3, [pc, #280]	; (80014cc <main+0x2f4>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	4a51      	ldr	r2, [pc, #324]	; (8001504 <main+0x32c>)
 80013be:	4413      	add	r3, r2
 80013c0:	2211      	movs	r2, #17
 80013c2:	4619      	mov	r1, r3
 80013c4:	484a      	ldr	r0, [pc, #296]	; (80014f0 <main+0x318>)
 80013c6:	f009 fe88 	bl	800b0da <strlcat>
	strlcpy(display_rows[8],temp,17);
 80013ca:	2211      	movs	r2, #17
 80013cc:	4948      	ldr	r1, [pc, #288]	; (80014f0 <main+0x318>)
 80013ce:	484e      	ldr	r0, [pc, #312]	; (8001508 <main+0x330>)
 80013d0:	f009 fea6 	bl	800b120 <strlcpy>
	//set can IDs

	memset(temp, 0, 17);
 80013d4:	2211      	movs	r2, #17
 80013d6:	2100      	movs	r1, #0
 80013d8:	4845      	ldr	r0, [pc, #276]	; (80014f0 <main+0x318>)
 80013da:	f009 fd8d 	bl	800aef8 <memset>
	strncpy(temp, can_id_str,16);
 80013de:	2210      	movs	r2, #16
 80013e0:	494a      	ldr	r1, [pc, #296]	; (800150c <main+0x334>)
 80013e2:	4843      	ldr	r0, [pc, #268]	; (80014f0 <main+0x318>)
 80013e4:	f009 fec4 	bl	800b170 <strncpy>
	strcat(temp, "1:    ");
 80013e8:	4841      	ldr	r0, [pc, #260]	; (80014f0 <main+0x318>)
 80013ea:	f7fe fef1 	bl	80001d0 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <main+0x318>)
 80013f4:	4413      	add	r3, r2
 80013f6:	4a46      	ldr	r2, [pc, #280]	; (8001510 <main+0x338>)
 80013f8:	6810      	ldr	r0, [r2, #0]
 80013fa:	6018      	str	r0, [r3, #0]
 80013fc:	8891      	ldrh	r1, [r2, #4]
 80013fe:	7992      	ldrb	r2, [r2, #6]
 8001400:	8099      	strh	r1, [r3, #4]
 8001402:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8001404:	2210      	movs	r2, #16
 8001406:	2100      	movs	r1, #0
 8001408:	4842      	ldr	r0, [pc, #264]	; (8001514 <main+0x33c>)
 800140a:	f009 fd75 	bl	800aef8 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <main+0x2e4>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4940      	ldr	r1, [pc, #256]	; (8001518 <main+0x340>)
 8001416:	483f      	ldr	r0, [pc, #252]	; (8001514 <main+0x33c>)
 8001418:	f009 fe30 	bl	800b07c <siprintf>
	strlcat(temp, char_arr,17);
 800141c:	2211      	movs	r2, #17
 800141e:	493d      	ldr	r1, [pc, #244]	; (8001514 <main+0x33c>)
 8001420:	4833      	ldr	r0, [pc, #204]	; (80014f0 <main+0x318>)
 8001422:	f009 fe5a 	bl	800b0da <strlcat>
	memcpy(display_rows[1],temp,17);
 8001426:	4b35      	ldr	r3, [pc, #212]	; (80014fc <main+0x324>)
 8001428:	4a31      	ldr	r2, [pc, #196]	; (80014f0 <main+0x318>)
 800142a:	3311      	adds	r3, #17
 800142c:	6815      	ldr	r5, [r2, #0]
 800142e:	6854      	ldr	r4, [r2, #4]
 8001430:	6890      	ldr	r0, [r2, #8]
 8001432:	68d1      	ldr	r1, [r2, #12]
 8001434:	601d      	str	r5, [r3, #0]
 8001436:	605c      	str	r4, [r3, #4]
 8001438:	6098      	str	r0, [r3, #8]
 800143a:	60d9      	str	r1, [r3, #12]
 800143c:	7c12      	ldrb	r2, [r2, #16]
 800143e:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp, 0, 17);
 8001440:	2211      	movs	r2, #17
 8001442:	2100      	movs	r1, #0
 8001444:	482a      	ldr	r0, [pc, #168]	; (80014f0 <main+0x318>)
 8001446:	f009 fd57 	bl	800aef8 <memset>
	strncpy(temp, can_id_str,16);
 800144a:	2210      	movs	r2, #16
 800144c:	492f      	ldr	r1, [pc, #188]	; (800150c <main+0x334>)
 800144e:	4828      	ldr	r0, [pc, #160]	; (80014f0 <main+0x318>)
 8001450:	f009 fe8e 	bl	800b170 <strncpy>
	strcat(temp, "2:    ");
 8001454:	4826      	ldr	r0, [pc, #152]	; (80014f0 <main+0x318>)
 8001456:	f7fe febb 	bl	80001d0 <strlen>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <main+0x318>)
 8001460:	4413      	add	r3, r2
 8001462:	4a2e      	ldr	r2, [pc, #184]	; (800151c <main+0x344>)
 8001464:	6810      	ldr	r0, [r2, #0]
 8001466:	6018      	str	r0, [r3, #0]
 8001468:	8891      	ldrh	r1, [r2, #4]
 800146a:	7992      	ldrb	r2, [r2, #6]
 800146c:	8099      	strh	r1, [r3, #4]
 800146e:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8001470:	2210      	movs	r2, #16
 8001472:	2100      	movs	r1, #0
 8001474:	4827      	ldr	r0, [pc, #156]	; (8001514 <main+0x33c>)
 8001476:	f009 fd3f 	bl	800aef8 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <main+0x2e8>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	4925      	ldr	r1, [pc, #148]	; (8001518 <main+0x340>)
 8001482:	4824      	ldr	r0, [pc, #144]	; (8001514 <main+0x33c>)
 8001484:	f009 fdfa 	bl	800b07c <siprintf>
	strlcat(temp, char_arr,17);
 8001488:	2211      	movs	r2, #17
 800148a:	4922      	ldr	r1, [pc, #136]	; (8001514 <main+0x33c>)
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <main+0x318>)
 800148e:	f009 fe24 	bl	800b0da <strlcat>
	memcpy(display_rows[2],temp,17);
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <main+0x324>)
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <main+0x318>)
 8001496:	3322      	adds	r3, #34	; 0x22
 8001498:	6815      	ldr	r5, [r2, #0]
 800149a:	6854      	ldr	r4, [r2, #4]
 800149c:	6890      	ldr	r0, [r2, #8]
 800149e:	68d1      	ldr	r1, [r2, #12]
 80014a0:	e03e      	b.n	8001520 <main+0x348>
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	00000000 	.word	0x00000000
 80014ac:	40000000 	.word	0x40000000
 80014b0:	080e0000 	.word	0x080e0000
 80014b4:	20000284 	.word	0x20000284
 80014b8:	20000184 	.word	0x20000184
 80014bc:	200002d0 	.word	0x200002d0
 80014c0:	20000211 	.word	0x20000211
 80014c4:	20000180 	.word	0x20000180
 80014c8:	20000164 	.word	0x20000164
 80014cc:	2000016c 	.word	0x2000016c
 80014d0:	080e0004 	.word	0x080e0004
 80014d4:	200000b0 	.word	0x200000b0
 80014d8:	20000000 	.word	0x20000000
 80014dc:	080e0008 	.word	0x080e0008
 80014e0:	20000002 	.word	0x20000002
 80014e4:	200001e8 	.word	0x200001e8
 80014e8:	200002d4 	.word	0x200002d4
 80014ec:	20000188 	.word	0x20000188
 80014f0:	20000200 	.word	0x20000200
 80014f4:	0800c87c 	.word	0x0800c87c
 80014f8:	0800c85c 	.word	0x0800c85c
 80014fc:	20000004 	.word	0x20000004
 8001500:	0800c86c 	.word	0x0800c86c
 8001504:	0800c850 	.word	0x0800c850
 8001508:	2000008c 	.word	0x2000008c
 800150c:	0800c88c 	.word	0x0800c88c
 8001510:	0800c7cc 	.word	0x0800c7cc
 8001514:	20000318 	.word	0x20000318
 8001518:	0800c7d4 	.word	0x0800c7d4
 800151c:	0800c7dc 	.word	0x0800c7dc
 8001520:	601d      	str	r5, [r3, #0]
 8001522:	605c      	str	r4, [r3, #4]
 8001524:	6098      	str	r0, [r3, #8]
 8001526:	60d9      	str	r1, [r3, #12]
 8001528:	7c12      	ldrb	r2, [r2, #16]
 800152a:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp, 0, 17);
 800152c:	2211      	movs	r2, #17
 800152e:	2100      	movs	r1, #0
 8001530:	48c4      	ldr	r0, [pc, #784]	; (8001844 <main+0x66c>)
 8001532:	f009 fce1 	bl	800aef8 <memset>
	strncpy(temp, can_id_str,16);
 8001536:	2210      	movs	r2, #16
 8001538:	49c3      	ldr	r1, [pc, #780]	; (8001848 <main+0x670>)
 800153a:	48c2      	ldr	r0, [pc, #776]	; (8001844 <main+0x66c>)
 800153c:	f009 fe18 	bl	800b170 <strncpy>
	strcat(temp, "3:    ");
 8001540:	48c0      	ldr	r0, [pc, #768]	; (8001844 <main+0x66c>)
 8001542:	f7fe fe45 	bl	80001d0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	4bbe      	ldr	r3, [pc, #760]	; (8001844 <main+0x66c>)
 800154c:	4413      	add	r3, r2
 800154e:	4abf      	ldr	r2, [pc, #764]	; (800184c <main+0x674>)
 8001550:	6810      	ldr	r0, [r2, #0]
 8001552:	6018      	str	r0, [r3, #0]
 8001554:	8891      	ldrh	r1, [r2, #4]
 8001556:	7992      	ldrb	r2, [r2, #6]
 8001558:	8099      	strh	r1, [r3, #4]
 800155a:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 800155c:	2210      	movs	r2, #16
 800155e:	2100      	movs	r1, #0
 8001560:	48bb      	ldr	r0, [pc, #748]	; (8001850 <main+0x678>)
 8001562:	f009 fcc9 	bl	800aef8 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 8001566:	4bbb      	ldr	r3, [pc, #748]	; (8001854 <main+0x67c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	49ba      	ldr	r1, [pc, #744]	; (8001858 <main+0x680>)
 800156e:	48b8      	ldr	r0, [pc, #736]	; (8001850 <main+0x678>)
 8001570:	f009 fd84 	bl	800b07c <siprintf>
	strlcat(temp, char_arr,17);
 8001574:	2211      	movs	r2, #17
 8001576:	49b6      	ldr	r1, [pc, #728]	; (8001850 <main+0x678>)
 8001578:	48b2      	ldr	r0, [pc, #712]	; (8001844 <main+0x66c>)
 800157a:	f009 fdae 	bl	800b0da <strlcat>
	memcpy(display_rows[3],temp,17);
 800157e:	4bb7      	ldr	r3, [pc, #732]	; (800185c <main+0x684>)
 8001580:	4ab0      	ldr	r2, [pc, #704]	; (8001844 <main+0x66c>)
 8001582:	3333      	adds	r3, #51	; 0x33
 8001584:	6815      	ldr	r5, [r2, #0]
 8001586:	6854      	ldr	r4, [r2, #4]
 8001588:	6890      	ldr	r0, [r2, #8]
 800158a:	68d1      	ldr	r1, [r2, #12]
 800158c:	601d      	str	r5, [r3, #0]
 800158e:	605c      	str	r4, [r3, #4]
 8001590:	6098      	str	r0, [r3, #8]
 8001592:	60d9      	str	r1, [r3, #12]
 8001594:	7c12      	ldrb	r2, [r2, #16]
 8001596:	741a      	strb	r2, [r3, #16]

	//Delay
	memset(temp, 0, 17);
 8001598:	2211      	movs	r2, #17
 800159a:	2100      	movs	r1, #0
 800159c:	48a9      	ldr	r0, [pc, #676]	; (8001844 <main+0x66c>)
 800159e:	f009 fcab 	bl	800aef8 <memset>
	strncpy(temp, delay_str,16);
 80015a2:	2210      	movs	r2, #16
 80015a4:	49ae      	ldr	r1, [pc, #696]	; (8001860 <main+0x688>)
 80015a6:	48a7      	ldr	r0, [pc, #668]	; (8001844 <main+0x66c>)
 80015a8:	f009 fde2 	bl	800b170 <strncpy>
	memset(char_arr, 0, 16);
 80015ac:	2210      	movs	r2, #16
 80015ae:	2100      	movs	r1, #0
 80015b0:	48a7      	ldr	r0, [pc, #668]	; (8001850 <main+0x678>)
 80015b2:	f009 fca1 	bl	800aef8 <memset>
	sprintf(char_arr, "%05d", us);
 80015b6:	4bab      	ldr	r3, [pc, #684]	; (8001864 <main+0x68c>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	49aa      	ldr	r1, [pc, #680]	; (8001868 <main+0x690>)
 80015be:	48a4      	ldr	r0, [pc, #656]	; (8001850 <main+0x678>)
 80015c0:	f009 fd5c 	bl	800b07c <siprintf>
	strcat(temp, char_arr);
 80015c4:	49a2      	ldr	r1, [pc, #648]	; (8001850 <main+0x678>)
 80015c6:	489f      	ldr	r0, [pc, #636]	; (8001844 <main+0x66c>)
 80015c8:	f009 fd78 	bl	800b0bc <strcat>
	strlcat(temp,"us",17);
 80015cc:	2211      	movs	r2, #17
 80015ce:	49a7      	ldr	r1, [pc, #668]	; (800186c <main+0x694>)
 80015d0:	489c      	ldr	r0, [pc, #624]	; (8001844 <main+0x66c>)
 80015d2:	f009 fd82 	bl	800b0da <strlcat>
	memcpy(display_rows[9],temp,17);
 80015d6:	4ba1      	ldr	r3, [pc, #644]	; (800185c <main+0x684>)
 80015d8:	4a9a      	ldr	r2, [pc, #616]	; (8001844 <main+0x66c>)
 80015da:	3399      	adds	r3, #153	; 0x99
 80015dc:	6815      	ldr	r5, [r2, #0]
 80015de:	6854      	ldr	r4, [r2, #4]
 80015e0:	6890      	ldr	r0, [r2, #8]
 80015e2:	68d1      	ldr	r1, [r2, #12]
 80015e4:	601d      	str	r5, [r3, #0]
 80015e6:	605c      	str	r4, [r3, #4]
 80015e8:	6098      	str	r0, [r3, #8]
 80015ea:	60d9      	str	r1, [r3, #12]
 80015ec:	7c12      	ldrb	r2, [r2, #16]
 80015ee:	741a      	strb	r2, [r3, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015f0:	f001 fb82 	bl	8002cf8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80015f4:	f000 fb16 	bl	8001c24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015f8:	f000 fcf4 	bl	8001fe4 <MX_GPIO_Init>
	MX_I2S3_Init();
 80015fc:	f000 fc72 	bl	8001ee4 <MX_I2S3_Init>
	MX_USB_HOST_Init();
 8001600:	f009 f938 	bl	800a874 <MX_USB_HOST_Init>
	MX_ADC1_Init();
 8001604:	f000 fb90 	bl	8001d28 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001608:	f000 fbe0 	bl	8001dcc <MX_ADC2_Init>
	MX_CAN1_Init();
 800160c:	f000 fc30 	bl	8001e70 <MX_CAN1_Init>
	MX_TIM1_Init();
 8001610:	f000 fc98 	bl	8001f44 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */


	HAL_TIM_Base_Start(&htim1);
 8001614:	4896      	ldr	r0, [pc, #600]	; (8001870 <main+0x698>)
 8001616:	f005 ffeb 	bl	80075f0 <HAL_TIM_Base_Start>

	lcd_init();
 800161a:	f7ff fcfc 	bl	8001016 <lcd_init>
	lcd_put_cur(0,0);
 800161e:	2100      	movs	r1, #0
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fcd9 	bl	8000fd8 <lcd_put_cur>
	lcd_send_string("Starting Up...");
 8001626:	4893      	ldr	r0, [pc, #588]	; (8001874 <main+0x69c>)
 8001628:	f7ff fd32 	bl	8001090 <lcd_send_string>
	HAL_Delay(1000);
 800162c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001630:	f001 fbd4 	bl	8002ddc <HAL_Delay>
	lcd_put_cur(0,0);
 8001634:	2100      	movs	r1, #0
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fcce 	bl	8000fd8 <lcd_put_cur>
	lcd_send_string("Initializing CAN");
 800163c:	488e      	ldr	r0, [pc, #568]	; (8001878 <main+0x6a0>)
 800163e:	f7ff fd27 	bl	8001090 <lcd_send_string>
	HAL_Delay(1000);
 8001642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001646:	f001 fbc9 	bl	8002ddc <HAL_Delay>

	//setup CAN filter
	can_filter.FilterMaskIdHigh = 0x0000;
 800164a:	4b8c      	ldr	r3, [pc, #560]	; (800187c <main+0x6a4>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8001650:	4b8a      	ldr	r3, [pc, #552]	; (800187c <main+0x6a4>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001656:	4b89      	ldr	r3, [pc, #548]	; (800187c <main+0x6a4>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
	can_filter.FilterBank = 0;
 800165c:	4b87      	ldr	r3, [pc, #540]	; (800187c <main+0x6a4>)
 800165e:	2200      	movs	r2, #0
 8001660:	615a      	str	r2, [r3, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001662:	4b86      	ldr	r3, [pc, #536]	; (800187c <main+0x6a4>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001668:	4b84      	ldr	r3, [pc, #528]	; (800187c <main+0x6a4>)
 800166a:	2201      	movs	r2, #1
 800166c:	61da      	str	r2, [r3, #28]
	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 800166e:	4b83      	ldr	r3, [pc, #524]	; (800187c <main+0x6a4>)
 8001670:	2201      	movs	r2, #1
 8001672:	621a      	str	r2, [r3, #32]

	//check that CAN Filter was setup correctly
	if (HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK) {
 8001674:	4981      	ldr	r1, [pc, #516]	; (800187c <main+0x6a4>)
 8001676:	4882      	ldr	r0, [pc, #520]	; (8001880 <main+0x6a8>)
 8001678:	f002 f89c 	bl	80037b4 <HAL_CAN_ConfigFilter>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <main+0x4ae>
		Error_Handler();
 8001682:	f001 f91f 	bl	80028c4 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001686:	487e      	ldr	r0, [pc, #504]	; (8001880 <main+0x6a8>)
 8001688:	f002 f974 	bl	8003974 <HAL_CAN_Start>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <main+0x4be>
		Error_Handler();
 8001692:	f001 f917 	bl	80028c4 <Error_Handler>
	}
	char hee[16];

	//display start menu
	lcd_put_cur(0,0);
 8001696:	2100      	movs	r1, #0
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fc9d 	bl	8000fd8 <lcd_put_cur>
	lcd_send_string(strncpy(hee,display_rows[menu_pos],16));
 800169e:	4b79      	ldr	r3, [pc, #484]	; (8001884 <main+0x6ac>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4613      	mov	r3, r2
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	4413      	add	r3, r2
 80016a8:	4a6c      	ldr	r2, [pc, #432]	; (800185c <main+0x684>)
 80016aa:	1899      	adds	r1, r3, r2
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2210      	movs	r2, #16
 80016b0:	4618      	mov	r0, r3
 80016b2:	f009 fd5d 	bl	800b170 <strncpy>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fce9 	bl	8001090 <lcd_send_string>
	lcd_put_cur(1,0);
 80016be:	2100      	movs	r1, #0
 80016c0:	2001      	movs	r0, #1
 80016c2:	f7ff fc89 	bl	8000fd8 <lcd_put_cur>
	lcd_send_string(strncpy(hee,display_rows[menu_pos+1],16));
 80016c6:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <main+0x6ac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	4613      	mov	r3, r2
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	4a62      	ldr	r2, [pc, #392]	; (800185c <main+0x684>)
 80016d4:	1899      	adds	r1, r3, r2
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2210      	movs	r2, #16
 80016da:	4618      	mov	r0, r3
 80016dc:	f009 fd48 	bl	800b170 <strncpy>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fcd4 	bl	8001090 <lcd_send_string>
	lcd_put_cur(0,0);
 80016e8:	2100      	movs	r1, #0
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fc74 	bl	8000fd8 <lcd_put_cur>

	int counter =0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
	int btn_counter=0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		__HAL_TIM_SET_COUNTER(&htim1,0);
 80016f8:	4b5d      	ldr	r3, [pc, #372]	; (8001870 <main+0x698>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
		if(counter>1000)
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001706:	dd01      	ble.n	800170c <main+0x534>
			counter=0;
 8001708:	2300      	movs	r3, #0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28




		//get raw data for analog 1
		HAL_ADC_Start(&hadc1);
 800170c:	485e      	ldr	r0, [pc, #376]	; (8001888 <main+0x6b0>)
 800170e:	f001 fbcd 	bl	8002eac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001712:	f04f 31ff 	mov.w	r1, #4294967295
 8001716:	485c      	ldr	r0, [pc, #368]	; (8001888 <main+0x6b0>)
 8001718:	f001 fc9a 	bl	8003050 <HAL_ADC_PollForConversion>
		raw_1 = HAL_ADC_GetValue(&hadc1);
 800171c:	485a      	ldr	r0, [pc, #360]	; (8001888 <main+0x6b0>)
 800171e:	f001 fd22 	bl	8003166 <HAL_ADC_GetValue>
 8001722:	4603      	mov	r3, r0
 8001724:	847b      	strh	r3, [r7, #34]	; 0x22

		//get raw data for analog 2
		HAL_ADC_Start(&hadc2);
 8001726:	4859      	ldr	r0, [pc, #356]	; (800188c <main+0x6b4>)
 8001728:	f001 fbc0 	bl	8002eac <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	4856      	ldr	r0, [pc, #344]	; (800188c <main+0x6b4>)
 8001732:	f001 fc8d 	bl	8003050 <HAL_ADC_PollForConversion>
		raw_2 = HAL_ADC_GetValue(&hadc2);
 8001736:	4855      	ldr	r0, [pc, #340]	; (800188c <main+0x6b4>)
 8001738:	f001 fd15 	bl	8003166 <HAL_ADC_GetValue>
 800173c:	4603      	mov	r3, r0
 800173e:	843b      	strh	r3, [r7, #32]


		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	4852      	ldr	r0, [pc, #328]	; (8001890 <main+0x6b8>)
 8001748:	f002 ff64 	bl	8004614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001752:	484f      	ldr	r0, [pc, #316]	; (8001890 <main+0x6b8>)
 8001754:	f002 ff5e 	bl	8004614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175e:	484c      	ldr	r0, [pc, #304]	; (8001890 <main+0x6b8>)
 8001760:	f002 ff58 	bl	8004614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800176a:	4849      	ldr	r0, [pc, #292]	; (8001890 <main+0x6b8>)
 800176c:	f002 ff52 	bl	8004614 <HAL_GPIO_WritePin>
		//		if(raw_1<2000)
		//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
		//		if(raw_1<1000)
		//			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8001770:	2101      	movs	r1, #1
 8001772:	4848      	ldr	r0, [pc, #288]	; (8001894 <main+0x6bc>)
 8001774:	f002 ff36 	bl	80045e4 <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <main+0x5b2>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800177e:	2201      	movs	r2, #1
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001784:	4842      	ldr	r0, [pc, #264]	; (8001890 <main+0x6b8>)
 8001786:	f002 ff45 	bl	8004614 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 800178a:	2102      	movs	r1, #2
 800178c:	4841      	ldr	r0, [pc, #260]	; (8001894 <main+0x6bc>)
 800178e:	f002 ff29 	bl	80045e4 <HAL_GPIO_ReadPin>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <main+0x5cc>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800179e:	483c      	ldr	r0, [pc, #240]	; (8001890 <main+0x6b8>)
 80017a0:	f002 ff38 	bl	8004614 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2))
 80017a4:	2104      	movs	r1, #4
 80017a6:	483b      	ldr	r0, [pc, #236]	; (8001894 <main+0x6bc>)
 80017a8:	f002 ff1c 	bl	80045e4 <HAL_GPIO_ReadPin>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <main+0x5e6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b8:	4835      	ldr	r0, [pc, #212]	; (8001890 <main+0x6b8>)
 80017ba:	f002 ff2b 	bl	8004614 <HAL_GPIO_WritePin>


		//put raw data into byte arrays
		a_data_1[0]=raw_1 & 0xff;
 80017be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	773b      	strb	r3, [r7, #28]
		a_data_1[1]=(raw_1 >> 8);
 80017c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	777b      	strb	r3, [r7, #29]

		a_data_2[0]=raw_2 & 0xff;
 80017ce:	8c3b      	ldrh	r3, [r7, #32]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	763b      	strb	r3, [r7, #24]
		a_data_2[1]=(raw_2 >> 8);
 80017d4:	8c3b      	ldrh	r3, [r7, #32]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	767b      	strb	r3, [r7, #25]



		HAL_CAN_AddTxMessage(&hcan1, &headers_1, a_data_1, p_tx_mailbox);//transmit CAN data for analog 1
 80017de:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <main+0x6c0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f107 021c 	add.w	r2, r7, #28
 80017e6:	492d      	ldr	r1, [pc, #180]	; (800189c <main+0x6c4>)
 80017e8:	4825      	ldr	r0, [pc, #148]	; (8001880 <main+0x6a8>)
 80017ea:	f002 f950 	bl	8003a8e <HAL_CAN_AddTxMessage>
		while (HAL_CAN_IsTxMessagePending(&hcan1,  p_tx_mailbox));//wait until data is sent for analog 1
 80017ee:	bf00      	nop
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <main+0x6c0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4822      	ldr	r0, [pc, #136]	; (8001880 <main+0x6a8>)
 80017f8:	f002 fa24 	bl	8003c44 <HAL_CAN_IsTxMessagePending>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f6      	bne.n	80017f0 <main+0x618>
		HAL_CAN_AddTxMessage(&hcan1, &headers_2, a_data_2, p_tx_mailbox);//transmit CAN data for analog 2
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <main+0x6c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f107 0218 	add.w	r2, r7, #24
 800180a:	4925      	ldr	r1, [pc, #148]	; (80018a0 <main+0x6c8>)
 800180c:	481c      	ldr	r0, [pc, #112]	; (8001880 <main+0x6a8>)
 800180e:	f002 f93e 	bl	8003a8e <HAL_CAN_AddTxMessage>
		while (HAL_CAN_IsTxMessagePending(&hcan1,  p_tx_mailbox));//wait until data is sent for analog 2
 8001812:	bf00      	nop
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <main+0x6c0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	4819      	ldr	r0, [pc, #100]	; (8001880 <main+0x6a8>)
 800181c:	f002 fa12 	bl	8003c44 <HAL_CAN_IsTxMessagePending>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f6      	bne.n	8001814 <main+0x63c>

		//if the up button is pressed
		if(up_val==0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)&&btn_counter>1000){
 8001826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 80a7 	bne.w	800197e <main+0x7a6>
 8001830:	2101      	movs	r1, #1
 8001832:	4818      	ldr	r0, [pc, #96]	; (8001894 <main+0x6bc>)
 8001834:	f002 fed6 	bl	80045e4 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 809f 	beq.w	800197e <main+0x7a6>
 8001840:	e030      	b.n	80018a4 <main+0x6cc>
 8001842:	bf00      	nop
 8001844:	20000200 	.word	0x20000200
 8001848:	0800c88c 	.word	0x0800c88c
 800184c:	0800c7e4 	.word	0x0800c7e4
 8001850:	20000318 	.word	0x20000318
 8001854:	20000180 	.word	0x20000180
 8001858:	0800c7d4 	.word	0x0800c7d4
 800185c:	20000004 	.word	0x20000004
 8001860:	0800c89c 	.word	0x0800c89c
 8001864:	20000002 	.word	0x20000002
 8001868:	0800c7ec 	.word	0x0800c7ec
 800186c:	0800c7f4 	.word	0x0800c7f4
 8001870:	20000288 	.word	0x20000288
 8001874:	0800c7f8 	.word	0x0800c7f8
 8001878:	0800c808 	.word	0x0800c808
 800187c:	2000025c 	.word	0x2000025c
 8001880:	200002ec 	.word	0x200002ec
 8001884:	20000168 	.word	0x20000168
 8001888:	20000214 	.word	0x20000214
 800188c:	200001a0 	.word	0x200001a0
 8001890:	40020c00 	.word	0x40020c00
 8001894:	40020400 	.word	0x40020400
 8001898:	20000328 	.word	0x20000328
 800189c:	200001e8 	.word	0x200001e8
 80018a0:	200002d4 	.word	0x200002d4
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018aa:	dd68      	ble.n	800197e <main+0x7a6>
			if(change_value_bool){
 80018ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d01f      	beq.n	80018f4 <main+0x71c>
				//change the value of the selected item
				if(menu_pos==0)
 80018b4:	4ba0      	ldr	r3, [pc, #640]	; (8001b38 <main+0x960>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d103      	bne.n	80018c4 <main+0x6ec>
					changeBaudRate(1);//increment baud rate
 80018bc:	2001      	movs	r0, #1
 80018be:	f000 fcc7 	bl	8002250 <changeBaudRate>
 80018c2:	e056      	b.n	8001972 <main+0x79a>
				else if(menu_pos < 4)
 80018c4:	4b9c      	ldr	r3, [pc, #624]	; (8001b38 <main+0x960>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	dc03      	bgt.n	80018d4 <main+0x6fc>
					changeCANID(1);//increment CAN ID
 80018cc:	2001      	movs	r0, #1
 80018ce:	f000 fdd5 	bl	800247c <changeCANID>
 80018d2:	e04e      	b.n	8001972 <main+0x79a>
				else if(menu_pos == 8)
 80018d4:	4b98      	ldr	r3, [pc, #608]	; (8001b38 <main+0x960>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d103      	bne.n	80018e4 <main+0x70c>
					changeDevice(1);//increment Device ID
 80018dc:	2001      	movs	r0, #1
 80018de:	f000 fd5d 	bl	800239c <changeDevice>
 80018e2:	e046      	b.n	8001972 <main+0x79a>
				else if(menu_pos == 9)
 80018e4:	4b94      	ldr	r3, [pc, #592]	; (8001b38 <main+0x960>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b09      	cmp	r3, #9
 80018ea:	d142      	bne.n	8001972 <main+0x79a>
					changeDelay(1);//increment Delay
 80018ec:	2001      	movs	r0, #1
 80018ee:	f000 ff5d 	bl	80027ac <changeDelay>
 80018f2:	e03e      	b.n	8001972 <main+0x79a>
			} else {
				//						scroll menu up

				menu_pos=(menu_pos==0)?display_rows_length-1:(menu_pos-1);//decrement menu position
 80018f4:	4b90      	ldr	r3, [pc, #576]	; (8001b38 <main+0x960>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <main+0x72a>
 80018fc:	230a      	movs	r3, #10
 80018fe:	3b01      	subs	r3, #1
 8001900:	e002      	b.n	8001908 <main+0x730>
 8001902:	4b8d      	ldr	r3, [pc, #564]	; (8001b38 <main+0x960>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3b01      	subs	r3, #1
 8001908:	4a8b      	ldr	r2, [pc, #556]	; (8001b38 <main+0x960>)
 800190a:	6013      	str	r3, [r2, #0]
				lcd_put_cur(0,0);
 800190c:	2100      	movs	r1, #0
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fb62 	bl	8000fd8 <lcd_put_cur>
				lcd_send_string(strncpy(hee,display_rows[menu_pos],16));
 8001914:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <main+0x960>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	4413      	add	r3, r2
 800191e:	4a87      	ldr	r2, [pc, #540]	; (8001b3c <main+0x964>)
 8001920:	1899      	adds	r1, r3, r2
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2210      	movs	r2, #16
 8001926:	4618      	mov	r0, r3
 8001928:	f009 fc22 	bl	800b170 <strncpy>
 800192c:	4603      	mov	r3, r0
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fbae 	bl	8001090 <lcd_send_string>
				lcd_put_cur(1,0);
 8001934:	2100      	movs	r1, #0
 8001936:	2001      	movs	r0, #1
 8001938:	f7ff fb4e 	bl	8000fd8 <lcd_put_cur>
				lcd_send_string(strncpy(hee,display_rows[(menu_pos+1)%display_rows_length],16));
 800193c:	4b7e      	ldr	r3, [pc, #504]	; (8001b38 <main+0x960>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	220a      	movs	r2, #10
 8001944:	fb93 f1f2 	sdiv	r1, r3, r2
 8001948:	fb02 f201 	mul.w	r2, r2, r1
 800194c:	1a9a      	subs	r2, r3, r2
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	4a79      	ldr	r2, [pc, #484]	; (8001b3c <main+0x964>)
 8001956:	1899      	adds	r1, r3, r2
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2210      	movs	r2, #16
 800195c:	4618      	mov	r0, r3
 800195e:	f009 fc07 	bl	800b170 <strncpy>
 8001962:	4603      	mov	r3, r0
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fb93 	bl	8001090 <lcd_send_string>
				lcd_put_cur(0,0);
 800196a:	2100      	movs	r1, #0
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fb33 	bl	8000fd8 <lcd_put_cur>

			}
			up_val = 1; // set button value to pressed
 8001972:	2301      	movs	r3, #1
 8001974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			btn_counter=0;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
 800197c:	e010      	b.n	80019a0 <main+0x7c8>
		} else if (up_val==1 && !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)&&btn_counter>100){
 800197e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001982:	2b01      	cmp	r3, #1
 8001984:	d10c      	bne.n	80019a0 <main+0x7c8>
 8001986:	2101      	movs	r1, #1
 8001988:	486d      	ldr	r0, [pc, #436]	; (8001b40 <main+0x968>)
 800198a:	f002 fe2b 	bl	80045e4 <HAL_GPIO_ReadPin>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d105      	bne.n	80019a0 <main+0x7c8>
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	dd02      	ble.n	80019a0 <main+0x7c8>
			up_val = 0; // reset up button value
 800199a:	2300      	movs	r3, #0
 800199c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		//if the down button is pressed
		if(down_val==0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)&&btn_counter>1000){
 80019a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d173      	bne.n	8001a90 <main+0x8b8>
 80019a8:	2102      	movs	r1, #2
 80019aa:	4865      	ldr	r0, [pc, #404]	; (8001b40 <main+0x968>)
 80019ac:	f002 fe1a 	bl	80045e4 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06c      	beq.n	8001a90 <main+0x8b8>
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019bc:	dd68      	ble.n	8001a90 <main+0x8b8>
			if(change_value_bool){
 80019be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d020      	beq.n	8001a08 <main+0x830>
				//change the value of the selected item
				if(menu_pos==0)
 80019c6:	4b5c      	ldr	r3, [pc, #368]	; (8001b38 <main+0x960>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d103      	bne.n	80019d6 <main+0x7fe>
					changeBaudRate(-1);//decrement baud rate
 80019ce:	20ff      	movs	r0, #255	; 0xff
 80019d0:	f000 fc3e 	bl	8002250 <changeBaudRate>
 80019d4:	e056      	b.n	8001a84 <main+0x8ac>
				else if(menu_pos < 4)
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <main+0x960>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	dc03      	bgt.n	80019e6 <main+0x80e>
					changeCANID(-1);//decrement CAN ID
 80019de:	20ff      	movs	r0, #255	; 0xff
 80019e0:	f000 fd4c 	bl	800247c <changeCANID>
 80019e4:	e04e      	b.n	8001a84 <main+0x8ac>
				else if(menu_pos == 8)
 80019e6:	4b54      	ldr	r3, [pc, #336]	; (8001b38 <main+0x960>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d103      	bne.n	80019f6 <main+0x81e>
					changeDevice(-1);//decrement Device ID
 80019ee:	20ff      	movs	r0, #255	; 0xff
 80019f0:	f000 fcd4 	bl	800239c <changeDevice>
 80019f4:	e046      	b.n	8001a84 <main+0x8ac>
				else if(menu_pos == 9)
 80019f6:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <main+0x960>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b09      	cmp	r3, #9
 80019fc:	d142      	bne.n	8001a84 <main+0x8ac>
					changeDelay(-1);//decrement Delay
 80019fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001a02:	f000 fed3 	bl	80027ac <changeDelay>
 8001a06:	e03d      	b.n	8001a84 <main+0x8ac>
			} else {
				//scroll menu down
				menu_pos = (menu_pos+1)%display_rows_length;//increment menu position
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <main+0x960>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	220a      	movs	r2, #10
 8001a10:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a14:	fb02 f201 	mul.w	r2, r2, r1
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	4a47      	ldr	r2, [pc, #284]	; (8001b38 <main+0x960>)
 8001a1c:	6013      	str	r3, [r2, #0]
				lcd_put_cur(0,0);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fad9 	bl	8000fd8 <lcd_put_cur>
				lcd_send_string(strncpy(hee,display_rows[menu_pos],16));
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <main+0x960>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a42      	ldr	r2, [pc, #264]	; (8001b3c <main+0x964>)
 8001a32:	1899      	adds	r1, r3, r2
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2210      	movs	r2, #16
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f009 fb99 	bl	800b170 <strncpy>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fb25 	bl	8001090 <lcd_send_string>
				lcd_put_cur(1,0);
 8001a46:	2100      	movs	r1, #0
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f7ff fac5 	bl	8000fd8 <lcd_put_cur>
				lcd_send_string(strncpy(hee,display_rows[(menu_pos+1)%display_rows_length],16));
 8001a4e:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <main+0x960>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	220a      	movs	r2, #10
 8001a56:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a5a:	fb02 f201 	mul.w	r2, r2, r1
 8001a5e:	1a9a      	subs	r2, r3, r2
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	4413      	add	r3, r2
 8001a66:	4a35      	ldr	r2, [pc, #212]	; (8001b3c <main+0x964>)
 8001a68:	1899      	adds	r1, r3, r2
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f009 fb7e 	bl	800b170 <strncpy>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fb0a 	bl	8001090 <lcd_send_string>
				lcd_put_cur(0,0);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff faaa 	bl	8000fd8 <lcd_put_cur>

			}
			down_val = 1; // set button value to pressed
 8001a84:	2301      	movs	r3, #1
 8001a86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			btn_counter=0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8e:	e010      	b.n	8001ab2 <main+0x8da>
		} else if (down_val==1 && !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)&&btn_counter>100){
 8001a90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10c      	bne.n	8001ab2 <main+0x8da>
 8001a98:	2102      	movs	r1, #2
 8001a9a:	4829      	ldr	r0, [pc, #164]	; (8001b40 <main+0x968>)
 8001a9c:	f002 fda2 	bl	80045e4 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <main+0x8da>
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	2b64      	cmp	r3, #100	; 0x64
 8001aaa:	dd02      	ble.n	8001ab2 <main+0x8da>
			down_val = 0; // reset up button value
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}

		//if the select button is pressed
		if(sel_val==0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)&&btn_counter>1000){
 8001ab2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d144      	bne.n	8001b44 <main+0x96c>
 8001aba:	2104      	movs	r1, #4
 8001abc:	4820      	ldr	r0, [pc, #128]	; (8001b40 <main+0x968>)
 8001abe:	f002 fd91 	bl	80045e4 <HAL_GPIO_ReadPin>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d03d      	beq.n	8001b44 <main+0x96c>
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ace:	dd39      	ble.n	8001b44 <main+0x96c>
			//set changes and reinitialize can bus
			if(change_value_bool){
 8001ad0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01b      	beq.n	8001b10 <main+0x938>
				if(menu_pos==0)
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <main+0x960>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <main+0x90e>
					setBaudRate();
 8001ae0:	f000 fbea 	bl	80022b8 <setBaudRate>
 8001ae4:	e018      	b.n	8001b18 <main+0x940>
				else if(menu_pos< 4)
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <main+0x960>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	dc02      	bgt.n	8001af4 <main+0x91c>
					setCANID();
 8001aee:	f000 fd77 	bl	80025e0 <setCANID>
 8001af2:	e011      	b.n	8001b18 <main+0x940>
				//							calibrateSDADC(&hsdadc1, SDADC_CHANNEL_1);
				//						else if(menu_pos==5)
				//							calibrateSDADC(&hsdadc2, SDADC_CHANNEL_0);
				//						else if(menu_pos==6)
				//							calibrateSDADC(&hsdadc3, SDADC_CHANNEL_4);
				else if(menu_pos==8)
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <main+0x960>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d102      	bne.n	8001b02 <main+0x92a>
					setDeviceID();
 8001afc:	f000 fc78 	bl	80023f0 <setDeviceID>
 8001b00:	e00a      	b.n	8001b18 <main+0x940>
				else if(menu_pos == 9)
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <main+0x960>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b09      	cmp	r3, #9
 8001b08:	d106      	bne.n	8001b18 <main+0x940>
					setDelay();//set Delay
 8001b0a:	f000 fe97 	bl	800283c <setDelay>
 8001b0e:	e003      	b.n	8001b18 <main+0x940>
			}else{
				lcd_put_cur(0,15);
 8001b10:	210f      	movs	r1, #15
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fa60 	bl	8000fd8 <lcd_put_cur>
			}
			change_value_bool=!change_value_bool;
 8001b18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf0c      	ite	eq
 8001b20:	2301      	moveq	r3, #1
 8001b22:	2300      	movne	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			sel_val=1;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			btn_counter=0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	e017      	b.n	8001b66 <main+0x98e>
 8001b36:	bf00      	nop
 8001b38:	20000168 	.word	0x20000168
 8001b3c:	20000004 	.word	0x20000004
 8001b40:	40020400 	.word	0x40020400
		} else if (sel_val==1 && !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2)&&btn_counter>100){
 8001b44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d10c      	bne.n	8001b66 <main+0x98e>
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	482d      	ldr	r0, [pc, #180]	; (8001c04 <main+0xa2c>)
 8001b50:	f002 fd48 	bl	80045e4 <HAL_GPIO_ReadPin>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <main+0x98e>
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	2b64      	cmp	r3, #100	; 0x64
 8001b5e:	dd02      	ble.n	8001b66 <main+0x98e>

			sel_val = 0; // reset up button value
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		}

		//Display values on display
		if(menu_pos==7 && change_value_bool && counter==0){
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <main+0xa30>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d138      	bne.n	8001be0 <main+0xa08>
 8001b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d034      	beq.n	8001be0 <main+0xa08>
 8001b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d131      	bne.n	8001be0 <main+0xa08>
			lcd_put_cur(0,0);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff fa2a 	bl	8000fd8 <lcd_put_cur>
			lcd_send_string("Ang Pos:        ");
 8001b84:	4821      	ldr	r0, [pc, #132]	; (8001c0c <main+0xa34>)
 8001b86:	f7ff fa83 	bl	8001090 <lcd_send_string>
			lcd_put_cur(0,11);
 8001b8a:	210b      	movs	r1, #11
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7ff fa23 	bl	8000fd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8001b92:	2210      	movs	r2, #16
 8001b94:	2100      	movs	r1, #0
 8001b96:	481e      	ldr	r0, [pc, #120]	; (8001c10 <main+0xa38>)
 8001b98:	f009 f9ae 	bl	800aef8 <memset>
			sprintf(char_arr, "%05d", raw_1);
 8001b9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	491c      	ldr	r1, [pc, #112]	; (8001c14 <main+0xa3c>)
 8001ba2:	481b      	ldr	r0, [pc, #108]	; (8001c10 <main+0xa38>)
 8001ba4:	f009 fa6a 	bl	800b07c <siprintf>
			lcd_send_string(char_arr);
 8001ba8:	4819      	ldr	r0, [pc, #100]	; (8001c10 <main+0xa38>)
 8001baa:	f7ff fa71 	bl	8001090 <lcd_send_string>
			lcd_put_cur(1,0);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff fa11 	bl	8000fd8 <lcd_put_cur>
			lcd_send_string("Ang Vel:        ");
 8001bb6:	4818      	ldr	r0, [pc, #96]	; (8001c18 <main+0xa40>)
 8001bb8:	f7ff fa6a 	bl	8001090 <lcd_send_string>
			lcd_put_cur(1,11);
 8001bbc:	210b      	movs	r1, #11
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f7ff fa0a 	bl	8000fd8 <lcd_put_cur>
			memset(char_arr, 0, 16);
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4811      	ldr	r0, [pc, #68]	; (8001c10 <main+0xa38>)
 8001bca:	f009 f995 	bl	800aef8 <memset>
			sprintf(char_arr, "%05d", raw_2);
 8001bce:	8c3b      	ldrh	r3, [r7, #32]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4910      	ldr	r1, [pc, #64]	; (8001c14 <main+0xa3c>)
 8001bd4:	480e      	ldr	r0, [pc, #56]	; (8001c10 <main+0xa38>)
 8001bd6:	f009 fa51 	bl	800b07c <siprintf>
			lcd_send_string(char_arr);
 8001bda:	480d      	ldr	r0, [pc, #52]	; (8001c10 <main+0xa38>)
 8001bdc:	f7ff fa58 	bl	8001090 <lcd_send_string>

		}

		counter++;
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	3301      	adds	r3, #1
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
		btn_counter++;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	3301      	adds	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24

		while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
 8001bec:	bf00      	nop
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <main+0xa44>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <main+0xa48>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d3f7      	bcc.n	8001bee <main+0xa16>
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8001bfe:	f008 fe5f 	bl	800a8c0 <MX_USB_HOST_Process>
		__HAL_TIM_SET_COUNTER(&htim1,0);
 8001c02:	e579      	b.n	80016f8 <main+0x520>
 8001c04:	40020400 	.word	0x40020400
 8001c08:	20000168 	.word	0x20000168
 8001c0c:	0800c81c 	.word	0x0800c81c
 8001c10:	20000318 	.word	0x20000318
 8001c14:	0800c7ec 	.word	0x0800c7ec
 8001c18:	0800c830 	.word	0x0800c830
 8001c1c:	20000288 	.word	0x20000288
 8001c20:	20000002 	.word	0x20000002

08001c24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b098      	sub	sp, #96	; 0x60
 8001c28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c2e:	2230      	movs	r2, #48	; 0x30
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f009 f960 	bl	800aef8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <SystemClock_Config+0xfc>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a30      	ldr	r2, [pc, #192]	; (8001d20 <SystemClock_Config+0xfc>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <SystemClock_Config+0xfc>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <SystemClock_Config+0x100>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <SystemClock_Config+0x100>)
 8001c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <SystemClock_Config+0x100>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001ca6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001caa:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 fec9 	bl	8006a50 <HAL_RCC_OscConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8001cc4:	f000 fdfe 	bl	80028c4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc8:	230f      	movs	r3, #15
 8001cca:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	2105      	movs	r1, #5
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f005 f92a 	bl	8006f40 <HAL_RCC_ClockConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8001cf2:	f000 fde7 	bl	80028c4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001cfa:	23c0      	movs	r3, #192	; 0xc0
 8001cfc:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 fae2 	bl	80072d0 <HAL_RCCEx_PeriphCLKConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 8001d12:	f000 fdd7 	bl	80028c4 <Error_Handler>
	}
}
 8001d16:	bf00      	nop
 8001d18:	3760      	adds	r7, #96	; 0x60
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40007000 	.word	0x40007000

08001d28 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d3c:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <MX_ADC1_Init+0x9c>)
 8001d3e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d46:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <MX_ADC1_Init+0xa0>)
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d88:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001d8a:	f001 f84b 	bl	8002e24 <HAL_ADC_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001d94:	f000 fd96 	bl	80028c4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da4:	463b      	mov	r3, r7
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_ADC1_Init+0x98>)
 8001daa:	f001 f9e9 	bl	8003180 <HAL_ADC_ConfigChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001db4:	f000 fd86 	bl	80028c4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000214 	.word	0x20000214
 8001dc4:	40012000 	.word	0x40012000
 8001dc8:	0f000001 	.word	0x0f000001

08001dcc <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001de0:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <MX_ADC2_Init+0x9c>)
 8001de2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dea:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <MX_ADC2_Init+0xa0>)
 8001e10:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001e2e:	f000 fff9 	bl	8002e24 <HAL_ADC_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 8001e38:	f000 fd44 	bl	80028c4 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001e40:	2301      	movs	r3, #1
 8001e42:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001e48:	463b      	mov	r3, r7
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	; (8001e64 <MX_ADC2_Init+0x98>)
 8001e4e:	f001 f997 	bl	8003180 <HAL_ADC_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 8001e58:	f000 fd34 	bl	80028c4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200001a0 	.word	0x200001a0
 8001e68:	40012100 	.word	0x40012100
 8001e6c:	0f000001 	.word	0x0f000001

08001e70 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001e76:	4a19      	ldr	r2, [pc, #100]	; (8001edc <MX_CAN1_Init+0x6c>)
 8001e78:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler=PSC;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <MX_CAN1_Init+0x70>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001e82:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001e92:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001e96:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001e9a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001e9e:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <MX_CAN1_Init+0x68>)
 8001ec6:	f001 fb79 	bl	80035bc <HAL_CAN_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_CAN1_Init+0x64>
	{
		Error_Handler();
 8001ed0:	f000 fcf8 	bl	80028c4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200002ec 	.word	0x200002ec
 8001edc:	40006400 	.word	0x40006400
 8001ee0:	20000000 	.word	0x20000000

08001ee4 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_I2S3_Init+0x54>)
 8001eea:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <MX_I2S3_Init+0x58>)
 8001eec:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MX_I2S3_Init+0x54>)
 8001ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef4:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_I2S3_Init+0x54>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_I2S3_Init+0x54>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <MX_I2S3_Init+0x54>)
 8001f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f08:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MX_I2S3_Init+0x54>)
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <MX_I2S3_Init+0x5c>)
 8001f0e:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_I2S3_Init+0x54>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <MX_I2S3_Init+0x54>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_I2S3_Init+0x54>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_I2S3_Init+0x54>)
 8001f24:	f004 f8f4 	bl	8006110 <HAL_I2S_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 8001f2e:	f000 fcc9 	bl	80028c4 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000032c 	.word	0x2000032c
 8001f3c:	40003c00 	.word	0x40003c00
 8001f40:	00017700 	.word	0x00017700

08001f44 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <MX_TIM1_Init+0x98>)
 8001f62:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <MX_TIM1_Init+0x9c>)
 8001f64:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 168-1;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <MX_TIM1_Init+0x98>)
 8001f68:	22a7      	movs	r2, #167	; 0xa7
 8001f6a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <MX_TIM1_Init+0x98>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff-1;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <MX_TIM1_Init+0x98>)
 8001f74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f78:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_TIM1_Init+0x98>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <MX_TIM1_Init+0x98>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_TIM1_Init+0x98>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f8c:	4813      	ldr	r0, [pc, #76]	; (8001fdc <MX_TIM1_Init+0x98>)
 8001f8e:	f005 fadf 	bl	8007550 <HAL_TIM_Base_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8001f98:	f000 fc94 	bl	80028c4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <MX_TIM1_Init+0x98>)
 8001faa:	f005 fb89 	bl	80076c0 <HAL_TIM_ConfigClockSource>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8001fb4:	f000 fc86 	bl	80028c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_TIM1_Init+0x98>)
 8001fc6:	f005 fd79 	bl	8007abc <HAL_TIMEx_MasterConfigSynchronization>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001fd0:	f000 fc78 	bl	80028c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000288 	.word	0x20000288
 8001fe0:	40010000 	.word	0x40010000

08001fe4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	; 0x30
 8001fe8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	4b8d      	ldr	r3, [pc, #564]	; (8002234 <MX_GPIO_Init+0x250>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a8c      	ldr	r2, [pc, #560]	; (8002234 <MX_GPIO_Init+0x250>)
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b8a      	ldr	r3, [pc, #552]	; (8002234 <MX_GPIO_Init+0x250>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	4b86      	ldr	r3, [pc, #536]	; (8002234 <MX_GPIO_Init+0x250>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a85      	ldr	r2, [pc, #532]	; (8002234 <MX_GPIO_Init+0x250>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b83      	ldr	r3, [pc, #524]	; (8002234 <MX_GPIO_Init+0x250>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b7f      	ldr	r3, [pc, #508]	; (8002234 <MX_GPIO_Init+0x250>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a7e      	ldr	r2, [pc, #504]	; (8002234 <MX_GPIO_Init+0x250>)
 800203c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b7c      	ldr	r3, [pc, #496]	; (8002234 <MX_GPIO_Init+0x250>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b78      	ldr	r3, [pc, #480]	; (8002234 <MX_GPIO_Init+0x250>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a77      	ldr	r2, [pc, #476]	; (8002234 <MX_GPIO_Init+0x250>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b75      	ldr	r3, [pc, #468]	; (8002234 <MX_GPIO_Init+0x250>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	4b71      	ldr	r3, [pc, #452]	; (8002234 <MX_GPIO_Init+0x250>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a70      	ldr	r2, [pc, #448]	; (8002234 <MX_GPIO_Init+0x250>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b6e      	ldr	r3, [pc, #440]	; (8002234 <MX_GPIO_Init+0x250>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <MX_GPIO_Init+0x250>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a69      	ldr	r2, [pc, #420]	; (8002234 <MX_GPIO_Init+0x250>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <MX_GPIO_Init+0x250>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f643 0108 	movw	r1, #14344	; 0x3808
 80020a8:	4863      	ldr	r0, [pc, #396]	; (8002238 <MX_GPIO_Init+0x254>)
 80020aa:	f002 fab3 	bl	8004614 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	2101      	movs	r1, #1
 80020b2:	4862      	ldr	r0, [pc, #392]	; (800223c <MX_GPIO_Init+0x258>)
 80020b4:	f002 faae 	bl	8004614 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 80020be:	4860      	ldr	r0, [pc, #384]	; (8002240 <MX_GPIO_Init+0x25c>)
 80020c0:	f002 faa8 	bl	8004614 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80020c4:	2200      	movs	r2, #0
 80020c6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80020ca:	485e      	ldr	r0, [pc, #376]	; (8002244 <MX_GPIO_Init+0x260>)
 80020cc:	f002 faa2 	bl	8004614 <HAL_GPIO_WritePin>
			|Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : PE3 PE11 PE12 PE13 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80020d0:	f643 0308 	movw	r3, #14344	; 0x3808
 80020d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	4619      	mov	r1, r3
 80020e8:	4853      	ldr	r0, [pc, #332]	; (8002238 <MX_GPIO_Init+0x254>)
 80020ea:	f002 f8df 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	484d      	ldr	r0, [pc, #308]	; (800223c <MX_GPIO_Init+0x258>)
 8002106:	f002 f8d1 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800210a:	2308      	movs	r3, #8
 800210c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800211a:	2305      	movs	r3, #5
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 031c 	add.w	r3, r7, #28
 8002122:	4619      	mov	r1, r3
 8002124:	4845      	ldr	r0, [pc, #276]	; (800223c <MX_GPIO_Init+0x258>)
 8002126:	f002 f8c1 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800212a:	2301      	movs	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800212e:	4b46      	ldr	r3, [pc, #280]	; (8002248 <MX_GPIO_Init+0x264>)
 8002130:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	4843      	ldr	r0, [pc, #268]	; (800224c <MX_GPIO_Init+0x268>)
 800213e:	f002 f8b5 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002142:	23e0      	movs	r3, #224	; 0xe0
 8002144:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002152:	2305      	movs	r3, #5
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	4619      	mov	r1, r3
 800215c:	483b      	ldr	r0, [pc, #236]	; (800224c <MX_GPIO_Init+0x268>)
 800215e:	f002 f8a5 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002162:	2307      	movs	r3, #7
 8002164:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	4619      	mov	r1, r3
 8002174:	4832      	ldr	r0, [pc, #200]	; (8002240 <MX_GPIO_Init+0x25c>)
 8002176:	f002 f899 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 800217a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800217e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800218c:	2305      	movs	r3, #5
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	4619      	mov	r1, r3
 8002196:	482a      	ldr	r0, [pc, #168]	; (8002240 <MX_GPIO_Init+0x25c>)
 8002198:	f002 f888 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pins : PB11 PB12 PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800219c:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80021a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4822      	ldr	r0, [pc, #136]	; (8002240 <MX_GPIO_Init+0x25c>)
 80021b6:	f002 f879 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80021ba:	f24f 0310 	movw	r3, #61456	; 0xf010
 80021be:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	481c      	ldr	r0, [pc, #112]	; (8002244 <MX_GPIO_Init+0x260>)
 80021d4:	f002 f86a 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80021d8:	2320      	movs	r3, #32
 80021da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	4816      	ldr	r0, [pc, #88]	; (8002244 <MX_GPIO_Init+0x260>)
 80021ec:	f002 f85e 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80021f0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80021f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f6:	2312      	movs	r3, #18
 80021f8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002202:	2304      	movs	r3, #4
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <MX_GPIO_Init+0x25c>)
 800220e:	f002 f84d 	bl	80042ac <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002212:	2302      	movs	r3, #2
 8002214:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_GPIO_Init+0x264>)
 8002218:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 031c 	add.w	r3, r7, #28
 8002222:	4619      	mov	r1, r3
 8002224:	4804      	ldr	r0, [pc, #16]	; (8002238 <MX_GPIO_Init+0x254>)
 8002226:	f002 f841 	bl	80042ac <HAL_GPIO_Init>

}
 800222a:	bf00      	nop
 800222c:	3730      	adds	r7, #48	; 0x30
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40021000 	.word	0x40021000
 800223c:	40020800 	.word	0x40020800
 8002240:	40020400 	.word	0x40020400
 8002244:	40020c00 	.word	0x40020c00
 8002248:	10120000 	.word	0x10120000
 800224c:	40020000 	.word	0x40020000

08002250 <changeBaudRate>:

/* USER CODE BEGIN 4 */
void changeBaudRate(uint8_t direction){
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
	baud_pos = ((baud_pos+direction)<0)?baud_rates_length-1:(baud_pos+direction)%baud_rates_length;//move baud rate position in given direction
 800225a:	79fa      	ldrb	r2, [r7, #7]
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <changeBaudRate+0x5c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4413      	add	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	da02      	bge.n	800226c <changeBaudRate+0x1c>
 8002266:	2304      	movs	r3, #4
 8002268:	3b01      	subs	r3, #1
 800226a:	e009      	b.n	8002280 <changeBaudRate+0x30>
 800226c:	79fa      	ldrb	r2, [r7, #7]
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <changeBaudRate+0x5c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	2204      	movs	r2, #4
 8002276:	fb93 f1f2 	sdiv	r1, r3, r2
 800227a:	fb02 f201 	mul.w	r2, r2, r1
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <changeBaudRate+0x5c>)
 8002282:	6013      	str	r3, [r2, #0]
	lcd_put_cur(0,12);
 8002284:	210c      	movs	r1, #12
 8002286:	2000      	movs	r0, #0
 8002288:	f7fe fea6 	bl	8000fd8 <lcd_put_cur>
	lcd_send_string(baud_rates[baud_pos]);
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <changeBaudRate+0x5c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4a07      	ldr	r2, [pc, #28]	; (80022b0 <changeBaudRate+0x60>)
 8002294:	4413      	add	r3, r2
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fefa 	bl	8001090 <lcd_send_string>
	lcd_put_cur(0,15);
 800229c:	210f      	movs	r1, #15
 800229e:	2000      	movs	r0, #0
 80022a0:	f7fe fe9a 	bl	8000fd8 <lcd_put_cur>
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200000b0 	.word	0x200000b0
 80022b0:	0800c85c 	.word	0x0800c85c
 80022b4:	00000000 	.word	0x00000000

080022b8 <setBaudRate>:

//change the prescaler to achieve the desired baud rate and reinitialize the can bus
void setBaudRate(void){
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
	//stop can bus
	HAL_CAN_Stop(&hcan1);
 80022be:	4830      	ldr	r0, [pc, #192]	; (8002380 <setBaudRate+0xc8>)
 80022c0:	f001 fb9c 	bl	80039fc <HAL_CAN_Stop>

	//set prescaler
	PSC=pow(2,4-baud_pos);
 80022c4:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <setBaudRate+0xcc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1c3 0304 	rsb	r3, r3, #4
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f929 	bl	8000524 <__aeabi_i2d>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	ec43 2b11 	vmov	d1, r2, r3
 80022da:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8002378 <setBaudRate+0xc0>
 80022de:	f009 faaf 	bl	800b840 <pow>
 80022e2:	ec53 2b10 	vmov	r2, r3, d0
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	f7fe fc35 	bl	8000b58 <__aeabi_d2uiz>
 80022ee:	4603      	mov	r3, r0
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b25      	ldr	r3, [pc, #148]	; (8002388 <setBaudRate+0xd0>)
 80022f4:	701a      	strb	r2, [r3, #0]
	hcan1.Init.Prescaler = PSC;
 80022f6:	4b24      	ldr	r3, [pc, #144]	; (8002388 <setBaudRate+0xd0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b20      	ldr	r3, [pc, #128]	; (8002380 <setBaudRate+0xc8>)
 80022fe:	605a      	str	r2, [r3, #4]

	//reinitialize
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002300:	481f      	ldr	r0, [pc, #124]	; (8002380 <setBaudRate+0xc8>)
 8002302:	f001 f95b 	bl	80035bc <HAL_CAN_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <setBaudRate+0x58>
	{
		Error_Handler();
 800230c:	f000 fada 	bl	80028c4 <Error_Handler>
	}

	//start the can protocol and verify that it has started
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8002310:	481b      	ldr	r0, [pc, #108]	; (8002380 <setBaudRate+0xc8>)
 8002312:	f001 fb2f 	bl	8003974 <HAL_CAN_Start>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <setBaudRate+0x68>
		Error_Handler();
 800231c:	f000 fad2 	bl	80028c4 <Error_Handler>
	}

	storeInFlash();
 8002320:	f7fe ff12 	bl	8001148 <storeInFlash>


	//set the baud rate in menu

	char hee[5];
	memset(temp,0,17);
 8002324:	2211      	movs	r2, #17
 8002326:	2100      	movs	r1, #0
 8002328:	4818      	ldr	r0, [pc, #96]	; (800238c <setBaudRate+0xd4>)
 800232a:	f008 fde5 	bl	800aef8 <memset>
	strncpy(temp, baud_str,16);
 800232e:	2210      	movs	r2, #16
 8002330:	4917      	ldr	r1, [pc, #92]	; (8002390 <setBaudRate+0xd8>)
 8002332:	4816      	ldr	r0, [pc, #88]	; (800238c <setBaudRate+0xd4>)
 8002334:	f008 ff1c 	bl	800b170 <strncpy>
	strlcpy(hee, baud_rates[baud_pos],5);
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <setBaudRate+0xcc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <setBaudRate+0xdc>)
 8002340:	1899      	adds	r1, r3, r2
 8002342:	463b      	mov	r3, r7
 8002344:	2205      	movs	r2, #5
 8002346:	4618      	mov	r0, r3
 8002348:	f008 feea 	bl	800b120 <strlcpy>
	strlcpy(display_rows[0],strcat(temp, hee),17);
 800234c:	463b      	mov	r3, r7
 800234e:	4619      	mov	r1, r3
 8002350:	480e      	ldr	r0, [pc, #56]	; (800238c <setBaudRate+0xd4>)
 8002352:	f008 feb3 	bl	800b0bc <strcat>
 8002356:	4603      	mov	r3, r0
 8002358:	2211      	movs	r2, #17
 800235a:	4619      	mov	r1, r3
 800235c:	480e      	ldr	r0, [pc, #56]	; (8002398 <setBaudRate+0xe0>)
 800235e:	f008 fedf 	bl	800b120 <strlcpy>
	lcd_put_cur(0,0);
 8002362:	2100      	movs	r1, #0
 8002364:	2000      	movs	r0, #0
 8002366:	f7fe fe37 	bl	8000fd8 <lcd_put_cur>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	f3af 8000 	nop.w
 8002378:	00000000 	.word	0x00000000
 800237c:	40000000 	.word	0x40000000
 8002380:	200002ec 	.word	0x200002ec
 8002384:	200000b0 	.word	0x200000b0
 8002388:	20000000 	.word	0x20000000
 800238c:	20000200 	.word	0x20000200
 8002390:	0800c87c 	.word	0x0800c87c
 8002394:	0800c85c 	.word	0x0800c85c
 8002398:	20000004 	.word	0x20000004

0800239c <changeDevice>:

//changes the device connected to the can module
void changeDevice(uint8_t direction){
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
	device_pos = !device_pos;//move baud rate position in given direction
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <changeDevice+0x4c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <changeDevice+0x4c>)
 80023b8:	601a      	str	r2, [r3, #0]
	lcd_put_cur(0,11);
 80023ba:	210b      	movs	r1, #11
 80023bc:	2000      	movs	r0, #0
 80023be:	f7fe fe0b 	bl	8000fd8 <lcd_put_cur>
	lcd_send_string(device_options[device_pos]);
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <changeDevice+0x4c>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	4a07      	ldr	r2, [pc, #28]	; (80023ec <changeDevice+0x50>)
 80023ce:	4413      	add	r3, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe fe5d 	bl	8001090 <lcd_send_string>
	lcd_put_cur(0,15);
 80023d6:	210f      	movs	r1, #15
 80023d8:	2000      	movs	r0, #0
 80023da:	f7fe fdfd 	bl	8000fd8 <lcd_put_cur>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000016c 	.word	0x2000016c
 80023ec:	0800c850 	.word	0x0800c850

080023f0 <setDeviceID>:

//set the device ID
void setDeviceID(void){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
	device_id=device_pos;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <setDeviceID+0x70>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <setDeviceID+0x74>)
 80023fe:	701a      	strb	r2, [r3, #0]

	//Store the id
	id_arr[3]=device_id;
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <setDeviceID+0x74>)
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <setDeviceID+0x78>)
 8002406:	70da      	strb	r2, [r3, #3]

	storeInFlash();
 8002408:	f7fe fe9e 	bl	8001148 <storeInFlash>

	//save device to menu
	char hee[5];
	memset(temp,0,17);
 800240c:	2211      	movs	r2, #17
 800240e:	2100      	movs	r1, #0
 8002410:	4816      	ldr	r0, [pc, #88]	; (800246c <setDeviceID+0x7c>)
 8002412:	f008 fd71 	bl	800aef8 <memset>
	strncpy(temp, device_str,16);
 8002416:	2210      	movs	r2, #16
 8002418:	4915      	ldr	r1, [pc, #84]	; (8002470 <setDeviceID+0x80>)
 800241a:	4814      	ldr	r0, [pc, #80]	; (800246c <setDeviceID+0x7c>)
 800241c:	f008 fea8 	bl	800b170 <strncpy>
	strlcpy(display_rows[8],strncat(temp, strncpy(hee, device_options[device_pos],5),16),17);
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <setDeviceID+0x70>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <setDeviceID+0x84>)
 800242c:	1899      	adds	r1, r3, r2
 800242e:	463b      	mov	r3, r7
 8002430:	2205      	movs	r2, #5
 8002432:	4618      	mov	r0, r3
 8002434:	f008 fe9c 	bl	800b170 <strncpy>
 8002438:	4603      	mov	r3, r0
 800243a:	2210      	movs	r2, #16
 800243c:	4619      	mov	r1, r3
 800243e:	480b      	ldr	r0, [pc, #44]	; (800246c <setDeviceID+0x7c>)
 8002440:	f008 fe83 	bl	800b14a <strncat>
 8002444:	4603      	mov	r3, r0
 8002446:	2211      	movs	r2, #17
 8002448:	4619      	mov	r1, r3
 800244a:	480b      	ldr	r0, [pc, #44]	; (8002478 <setDeviceID+0x88>)
 800244c:	f008 fe68 	bl	800b120 <strlcpy>
	lcd_put_cur(0,0);
 8002450:	2100      	movs	r1, #0
 8002452:	2000      	movs	r0, #0
 8002454:	f7fe fdc0 	bl	8000fd8 <lcd_put_cur>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2000016c 	.word	0x2000016c
 8002464:	20000164 	.word	0x20000164
 8002468:	20000184 	.word	0x20000184
 800246c:	20000200 	.word	0x20000200
 8002470:	0800c86c 	.word	0x0800c86c
 8002474:	0800c850 	.word	0x0800c850
 8002478:	2000008c 	.word	0x2000008c

0800247c <changeCANID>:

//changes the ID of the selected can device
void changeCANID(uint8_t direction){
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
	if(menu_pos==1){
 8002486:	4b4e      	ldr	r3, [pc, #312]	; (80025c0 <changeCANID+0x144>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d128      	bne.n	80024e0 <changeCANID+0x64>
		can_id_1+=direction;
 800248e:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <changeCANID+0x148>)
 8002490:	781a      	ldrb	r2, [r3, #0]
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4413      	add	r3, r2
 8002496:	b2da      	uxtb	r2, r3
 8002498:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <changeCANID+0x148>)
 800249a:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 800249c:	e006      	b.n	80024ac <changeCANID+0x30>
			can_id_1+=direction;
 800249e:	4b49      	ldr	r3, [pc, #292]	; (80025c4 <changeCANID+0x148>)
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4413      	add	r3, r2
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <changeCANID+0x148>)
 80024aa:	701a      	strb	r2, [r3, #0]
		while(can_id_1==can_id_2 || can_id_1==can_id_3)//avoid conflicting IDs
 80024ac:	4b45      	ldr	r3, [pc, #276]	; (80025c4 <changeCANID+0x148>)
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	4b45      	ldr	r3, [pc, #276]	; (80025c8 <changeCANID+0x14c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d0f2      	beq.n	800249e <changeCANID+0x22>
 80024b8:	4b42      	ldr	r3, [pc, #264]	; (80025c4 <changeCANID+0x148>)
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	4b43      	ldr	r3, [pc, #268]	; (80025cc <changeCANID+0x150>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d0ec      	beq.n	800249e <changeCANID+0x22>
		sprintf(char_arr, "%03d", can_id_1);
 80024c4:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <changeCANID+0x148>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4941      	ldr	r1, [pc, #260]	; (80025d0 <changeCANID+0x154>)
 80024cc:	4841      	ldr	r0, [pc, #260]	; (80025d4 <changeCANID+0x158>)
 80024ce:	f008 fdd5 	bl	800b07c <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 80024d2:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <changeCANID+0x15c>)
 80024d4:	4a3f      	ldr	r2, [pc, #252]	; (80025d4 <changeCANID+0x158>)
 80024d6:	8811      	ldrh	r1, [r2, #0]
 80024d8:	7892      	ldrb	r2, [r2, #2]
 80024da:	8019      	strh	r1, [r3, #0]
 80024dc:	709a      	strb	r2, [r3, #2]
 80024de:	e058      	b.n	8002592 <changeCANID+0x116>
	} else if(menu_pos==2){
 80024e0:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <changeCANID+0x144>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d128      	bne.n	800253a <changeCANID+0xbe>
		can_id_2+=direction;
 80024e8:	4b37      	ldr	r3, [pc, #220]	; (80025c8 <changeCANID+0x14c>)
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	4413      	add	r3, r2
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <changeCANID+0x14c>)
 80024f4:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 80024f6:	e006      	b.n	8002506 <changeCANID+0x8a>
			can_id_2+=direction;
 80024f8:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <changeCANID+0x14c>)
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4413      	add	r3, r2
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <changeCANID+0x14c>)
 8002504:	701a      	strb	r2, [r3, #0]
		while(can_id_2==can_id_1 || can_id_2==can_id_3)//avoid conflicting IDs
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <changeCANID+0x14c>)
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <changeCANID+0x148>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d0f2      	beq.n	80024f8 <changeCANID+0x7c>
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <changeCANID+0x14c>)
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <changeCANID+0x150>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d0ec      	beq.n	80024f8 <changeCANID+0x7c>
		sprintf(char_arr, "%03d", can_id_2);
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <changeCANID+0x14c>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	492a      	ldr	r1, [pc, #168]	; (80025d0 <changeCANID+0x154>)
 8002526:	482b      	ldr	r0, [pc, #172]	; (80025d4 <changeCANID+0x158>)
 8002528:	f008 fda8 	bl	800b07c <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 800252c:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <changeCANID+0x15c>)
 800252e:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <changeCANID+0x158>)
 8002530:	8811      	ldrh	r1, [r2, #0]
 8002532:	7892      	ldrb	r2, [r2, #2]
 8002534:	8019      	strh	r1, [r3, #0]
 8002536:	709a      	strb	r2, [r3, #2]
 8002538:	e02b      	b.n	8002592 <changeCANID+0x116>
	} else if(menu_pos==3){
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <changeCANID+0x144>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d127      	bne.n	8002592 <changeCANID+0x116>
		can_id_3+=direction;
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <changeCANID+0x150>)
 8002544:	781a      	ldrb	r2, [r3, #0]
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	4413      	add	r3, r2
 800254a:	b2da      	uxtb	r2, r3
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <changeCANID+0x150>)
 800254e:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 8002550:	e006      	b.n	8002560 <changeCANID+0xe4>
			can_id_3+=direction;
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <changeCANID+0x150>)
 8002554:	781a      	ldrb	r2, [r3, #0]
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	4413      	add	r3, r2
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <changeCANID+0x150>)
 800255e:	701a      	strb	r2, [r3, #0]
		while(can_id_3==can_id_1 || can_id_3==can_id_2)//avoid conflicting IDs
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <changeCANID+0x150>)
 8002562:	781a      	ldrb	r2, [r3, #0]
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <changeCANID+0x148>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d0f2      	beq.n	8002552 <changeCANID+0xd6>
 800256c:	4b17      	ldr	r3, [pc, #92]	; (80025cc <changeCANID+0x150>)
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <changeCANID+0x14c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d0ec      	beq.n	8002552 <changeCANID+0xd6>
		sprintf(char_arr, "%03d", can_id_3);
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <changeCANID+0x150>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4914      	ldr	r1, [pc, #80]	; (80025d0 <changeCANID+0x154>)
 8002580:	4814      	ldr	r0, [pc, #80]	; (80025d4 <changeCANID+0x158>)
 8002582:	f008 fd7b 	bl	800b07c <siprintf>
		memcpy(modified_can_id, char_arr, 3);//store new can id in modified_can_id
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <changeCANID+0x15c>)
 8002588:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <changeCANID+0x158>)
 800258a:	8811      	ldrh	r1, [r2, #0]
 800258c:	7892      	ldrb	r2, [r2, #2]
 800258e:	8019      	strh	r1, [r3, #0]
 8002590:	709a      	strb	r2, [r3, #2]
	}
	lcd_put_cur(0,13);
 8002592:	210d      	movs	r1, #13
 8002594:	2000      	movs	r0, #0
 8002596:	f7fe fd1f 	bl	8000fd8 <lcd_put_cur>
	lcd_send_string("    ");
 800259a:	4810      	ldr	r0, [pc, #64]	; (80025dc <changeCANID+0x160>)
 800259c:	f7fe fd78 	bl	8001090 <lcd_send_string>
	lcd_put_cur(0,13);
 80025a0:	210d      	movs	r1, #13
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7fe fd18 	bl	8000fd8 <lcd_put_cur>
	lcd_send_string(modified_can_id);
 80025a8:	480b      	ldr	r0, [pc, #44]	; (80025d8 <changeCANID+0x15c>)
 80025aa:	f7fe fd71 	bl	8001090 <lcd_send_string>
	lcd_put_cur(0,15);
 80025ae:	210f      	movs	r1, #15
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe fd11 	bl	8000fd8 <lcd_put_cur>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000168 	.word	0x20000168
 80025c4:	200002d0 	.word	0x200002d0
 80025c8:	20000211 	.word	0x20000211
 80025cc:	20000180 	.word	0x20000180
 80025d0:	0800c7d4 	.word	0x0800c7d4
 80025d4:	20000318 	.word	0x20000318
 80025d8:	20000314 	.word	0x20000314
 80025dc:	0800c844 	.word	0x0800c844

080025e0 <setCANID>:

//set the can IDs
void setCANID(void){
 80025e0:	b5b0      	push	{r4, r5, r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	headers_1.StdId = can_id_1; // set CAN ID 1
 80025e4:	4b62      	ldr	r3, [pc, #392]	; (8002770 <setCANID+0x190>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b62      	ldr	r3, [pc, #392]	; (8002774 <setCANID+0x194>)
 80025ec:	601a      	str	r2, [r3, #0]
	headers_2.StdId = can_id_2; // set CAN ID 2
 80025ee:	4b62      	ldr	r3, [pc, #392]	; (8002778 <setCANID+0x198>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b61      	ldr	r3, [pc, #388]	; (800277c <setCANID+0x19c>)
 80025f6:	601a      	str	r2, [r3, #0]
	headers_3.StdId = can_id_3; // set CAN ID 3
 80025f8:	4b61      	ldr	r3, [pc, #388]	; (8002780 <setCANID+0x1a0>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b61      	ldr	r3, [pc, #388]	; (8002784 <setCANID+0x1a4>)
 8002600:	601a      	str	r2, [r3, #0]

	//Store the CAN IDs
	id_arr[0]=can_id_1;
 8002602:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <setCANID+0x190>)
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	4b60      	ldr	r3, [pc, #384]	; (8002788 <setCANID+0x1a8>)
 8002608:	701a      	strb	r2, [r3, #0]
	id_arr[1]=can_id_2;
 800260a:	4b5b      	ldr	r3, [pc, #364]	; (8002778 <setCANID+0x198>)
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <setCANID+0x1a8>)
 8002610:	705a      	strb	r2, [r3, #1]
	id_arr[2]=can_id_3;
 8002612:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <setCANID+0x1a0>)
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <setCANID+0x1a8>)
 8002618:	709a      	strb	r2, [r3, #2]

	storeInFlash();
 800261a:	f7fe fd95 	bl	8001148 <storeInFlash>




	//set can IDs in menu
	memset(temp, 0, 17);
 800261e:	2211      	movs	r2, #17
 8002620:	2100      	movs	r1, #0
 8002622:	485a      	ldr	r0, [pc, #360]	; (800278c <setCANID+0x1ac>)
 8002624:	f008 fc68 	bl	800aef8 <memset>
	strncpy(temp, can_id_str,16);
 8002628:	2210      	movs	r2, #16
 800262a:	4959      	ldr	r1, [pc, #356]	; (8002790 <setCANID+0x1b0>)
 800262c:	4857      	ldr	r0, [pc, #348]	; (800278c <setCANID+0x1ac>)
 800262e:	f008 fd9f 	bl	800b170 <strncpy>
	strcat(temp, "1:    ");
 8002632:	4856      	ldr	r0, [pc, #344]	; (800278c <setCANID+0x1ac>)
 8002634:	f7fd fdcc 	bl	80001d0 <strlen>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <setCANID+0x1ac>)
 800263e:	4413      	add	r3, r2
 8002640:	4a54      	ldr	r2, [pc, #336]	; (8002794 <setCANID+0x1b4>)
 8002642:	6810      	ldr	r0, [r2, #0]
 8002644:	6018      	str	r0, [r3, #0]
 8002646:	8891      	ldrh	r1, [r2, #4]
 8002648:	7992      	ldrb	r2, [r2, #6]
 800264a:	8099      	strh	r1, [r3, #4]
 800264c:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 800264e:	2210      	movs	r2, #16
 8002650:	2100      	movs	r1, #0
 8002652:	4851      	ldr	r0, [pc, #324]	; (8002798 <setCANID+0x1b8>)
 8002654:	f008 fc50 	bl	800aef8 <memset>
	sprintf(char_arr, "%03d", can_id_1);
 8002658:	4b45      	ldr	r3, [pc, #276]	; (8002770 <setCANID+0x190>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	494f      	ldr	r1, [pc, #316]	; (800279c <setCANID+0x1bc>)
 8002660:	484d      	ldr	r0, [pc, #308]	; (8002798 <setCANID+0x1b8>)
 8002662:	f008 fd0b 	bl	800b07c <siprintf>
	strlcat(temp, char_arr,17);
 8002666:	2211      	movs	r2, #17
 8002668:	494b      	ldr	r1, [pc, #300]	; (8002798 <setCANID+0x1b8>)
 800266a:	4848      	ldr	r0, [pc, #288]	; (800278c <setCANID+0x1ac>)
 800266c:	f008 fd35 	bl	800b0da <strlcat>
	memcpy(display_rows[1],temp,17);
 8002670:	4b4b      	ldr	r3, [pc, #300]	; (80027a0 <setCANID+0x1c0>)
 8002672:	4a46      	ldr	r2, [pc, #280]	; (800278c <setCANID+0x1ac>)
 8002674:	3311      	adds	r3, #17
 8002676:	6815      	ldr	r5, [r2, #0]
 8002678:	6854      	ldr	r4, [r2, #4]
 800267a:	6890      	ldr	r0, [r2, #8]
 800267c:	68d1      	ldr	r1, [r2, #12]
 800267e:	601d      	str	r5, [r3, #0]
 8002680:	605c      	str	r4, [r3, #4]
 8002682:	6098      	str	r0, [r3, #8]
 8002684:	60d9      	str	r1, [r3, #12]
 8002686:	7c12      	ldrb	r2, [r2, #16]
 8002688:	741a      	strb	r2, [r3, #16]
	//can id 2
	memset(temp, 0, 17);
 800268a:	2211      	movs	r2, #17
 800268c:	2100      	movs	r1, #0
 800268e:	483f      	ldr	r0, [pc, #252]	; (800278c <setCANID+0x1ac>)
 8002690:	f008 fc32 	bl	800aef8 <memset>
	strncpy(temp, can_id_str,16);
 8002694:	2210      	movs	r2, #16
 8002696:	493e      	ldr	r1, [pc, #248]	; (8002790 <setCANID+0x1b0>)
 8002698:	483c      	ldr	r0, [pc, #240]	; (800278c <setCANID+0x1ac>)
 800269a:	f008 fd69 	bl	800b170 <strncpy>
	strcat(temp, "2:    ");
 800269e:	483b      	ldr	r0, [pc, #236]	; (800278c <setCANID+0x1ac>)
 80026a0:	f7fd fd96 	bl	80001d0 <strlen>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b38      	ldr	r3, [pc, #224]	; (800278c <setCANID+0x1ac>)
 80026aa:	4413      	add	r3, r2
 80026ac:	4a3d      	ldr	r2, [pc, #244]	; (80027a4 <setCANID+0x1c4>)
 80026ae:	6810      	ldr	r0, [r2, #0]
 80026b0:	6018      	str	r0, [r3, #0]
 80026b2:	8891      	ldrh	r1, [r2, #4]
 80026b4:	7992      	ldrb	r2, [r2, #6]
 80026b6:	8099      	strh	r1, [r3, #4]
 80026b8:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 80026ba:	2210      	movs	r2, #16
 80026bc:	2100      	movs	r1, #0
 80026be:	4836      	ldr	r0, [pc, #216]	; (8002798 <setCANID+0x1b8>)
 80026c0:	f008 fc1a 	bl	800aef8 <memset>
	sprintf(char_arr, "%03d", can_id_2);
 80026c4:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <setCANID+0x198>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4934      	ldr	r1, [pc, #208]	; (800279c <setCANID+0x1bc>)
 80026cc:	4832      	ldr	r0, [pc, #200]	; (8002798 <setCANID+0x1b8>)
 80026ce:	f008 fcd5 	bl	800b07c <siprintf>
	strlcat(temp, char_arr,17);
 80026d2:	2211      	movs	r2, #17
 80026d4:	4930      	ldr	r1, [pc, #192]	; (8002798 <setCANID+0x1b8>)
 80026d6:	482d      	ldr	r0, [pc, #180]	; (800278c <setCANID+0x1ac>)
 80026d8:	f008 fcff 	bl	800b0da <strlcat>
	memcpy(display_rows[2],temp,17);
 80026dc:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <setCANID+0x1c0>)
 80026de:	4a2b      	ldr	r2, [pc, #172]	; (800278c <setCANID+0x1ac>)
 80026e0:	3322      	adds	r3, #34	; 0x22
 80026e2:	6815      	ldr	r5, [r2, #0]
 80026e4:	6854      	ldr	r4, [r2, #4]
 80026e6:	6890      	ldr	r0, [r2, #8]
 80026e8:	68d1      	ldr	r1, [r2, #12]
 80026ea:	601d      	str	r5, [r3, #0]
 80026ec:	605c      	str	r4, [r3, #4]
 80026ee:	6098      	str	r0, [r3, #8]
 80026f0:	60d9      	str	r1, [r3, #12]
 80026f2:	7c12      	ldrb	r2, [r2, #16]
 80026f4:	741a      	strb	r2, [r3, #16]
	//can id 3
	memset(temp, 0, 17);
 80026f6:	2211      	movs	r2, #17
 80026f8:	2100      	movs	r1, #0
 80026fa:	4824      	ldr	r0, [pc, #144]	; (800278c <setCANID+0x1ac>)
 80026fc:	f008 fbfc 	bl	800aef8 <memset>
	strncpy(temp, can_id_str,16);
 8002700:	2210      	movs	r2, #16
 8002702:	4923      	ldr	r1, [pc, #140]	; (8002790 <setCANID+0x1b0>)
 8002704:	4821      	ldr	r0, [pc, #132]	; (800278c <setCANID+0x1ac>)
 8002706:	f008 fd33 	bl	800b170 <strncpy>
	strcat(temp, "3:    ");
 800270a:	4820      	ldr	r0, [pc, #128]	; (800278c <setCANID+0x1ac>)
 800270c:	f7fd fd60 	bl	80001d0 <strlen>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <setCANID+0x1ac>)
 8002716:	4413      	add	r3, r2
 8002718:	4a23      	ldr	r2, [pc, #140]	; (80027a8 <setCANID+0x1c8>)
 800271a:	6810      	ldr	r0, [r2, #0]
 800271c:	6018      	str	r0, [r3, #0]
 800271e:	8891      	ldrh	r1, [r2, #4]
 8002720:	7992      	ldrb	r2, [r2, #6]
 8002722:	8099      	strh	r1, [r3, #4]
 8002724:	719a      	strb	r2, [r3, #6]
	memset(char_arr, 0, 16);
 8002726:	2210      	movs	r2, #16
 8002728:	2100      	movs	r1, #0
 800272a:	481b      	ldr	r0, [pc, #108]	; (8002798 <setCANID+0x1b8>)
 800272c:	f008 fbe4 	bl	800aef8 <memset>
	sprintf(char_arr, "%03d", can_id_3);
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <setCANID+0x1a0>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4919      	ldr	r1, [pc, #100]	; (800279c <setCANID+0x1bc>)
 8002738:	4817      	ldr	r0, [pc, #92]	; (8002798 <setCANID+0x1b8>)
 800273a:	f008 fc9f 	bl	800b07c <siprintf>
	strlcat(temp, char_arr,17);
 800273e:	2211      	movs	r2, #17
 8002740:	4915      	ldr	r1, [pc, #84]	; (8002798 <setCANID+0x1b8>)
 8002742:	4812      	ldr	r0, [pc, #72]	; (800278c <setCANID+0x1ac>)
 8002744:	f008 fcc9 	bl	800b0da <strlcat>
	memcpy(display_rows[3],temp,17);
 8002748:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <setCANID+0x1c0>)
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <setCANID+0x1ac>)
 800274c:	3333      	adds	r3, #51	; 0x33
 800274e:	6815      	ldr	r5, [r2, #0]
 8002750:	6854      	ldr	r4, [r2, #4]
 8002752:	6890      	ldr	r0, [r2, #8]
 8002754:	68d1      	ldr	r1, [r2, #12]
 8002756:	601d      	str	r5, [r3, #0]
 8002758:	605c      	str	r4, [r3, #4]
 800275a:	6098      	str	r0, [r3, #8]
 800275c:	60d9      	str	r1, [r3, #12]
 800275e:	7c12      	ldrb	r2, [r2, #16]
 8002760:	741a      	strb	r2, [r3, #16]


	lcd_put_cur(0,0);
 8002762:	2100      	movs	r1, #0
 8002764:	2000      	movs	r0, #0
 8002766:	f7fe fc37 	bl	8000fd8 <lcd_put_cur>
}
 800276a:	bf00      	nop
 800276c:	bdb0      	pop	{r4, r5, r7, pc}
 800276e:	bf00      	nop
 8002770:	200002d0 	.word	0x200002d0
 8002774:	200001e8 	.word	0x200001e8
 8002778:	20000211 	.word	0x20000211
 800277c:	200002d4 	.word	0x200002d4
 8002780:	20000180 	.word	0x20000180
 8002784:	20000188 	.word	0x20000188
 8002788:	20000184 	.word	0x20000184
 800278c:	20000200 	.word	0x20000200
 8002790:	0800c88c 	.word	0x0800c88c
 8002794:	0800c7cc 	.word	0x0800c7cc
 8002798:	20000318 	.word	0x20000318
 800279c:	0800c7d4 	.word	0x0800c7d4
 80027a0:	20000004 	.word	0x20000004
 80027a4:	0800c7dc 	.word	0x0800c7dc
 80027a8:	0800c7e4 	.word	0x0800c7e4

080027ac <changeDelay>:

void changeDelay(uint16_t direction){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
	us+=direction*50;//move baud rate position in given direction
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	461a      	mov	r2, r3
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	4413      	add	r3, r2
 80027be:	461a      	mov	r2, r3
 80027c0:	0091      	lsls	r1, r2, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	460b      	mov	r3, r1
 80027c6:	4413      	add	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <changeDelay+0x88>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <changeDelay+0x88>)
 80027d6:	801a      	strh	r2, [r3, #0]
	if(us==65486)
 80027d8:	4b16      	ldr	r3, [pc, #88]	; (8002834 <changeDelay+0x88>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	f64f 72ce 	movw	r2, #65486	; 0xffce
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d104      	bne.n	80027ee <changeDelay+0x42>
		us=1000;
 80027e4:	4b13      	ldr	r3, [pc, #76]	; (8002834 <changeDelay+0x88>)
 80027e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	e007      	b.n	80027fe <changeDelay+0x52>
	else if(us>1000)
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <changeDelay+0x88>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027f6:	d902      	bls.n	80027fe <changeDelay+0x52>
		us=0;
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <changeDelay+0x88>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	801a      	strh	r2, [r3, #0]
	lcd_put_cur(0,9);
 80027fe:	2109      	movs	r1, #9
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fbe9 	bl	8000fd8 <lcd_put_cur>
	char hee[5];
	sprintf(hee, "%05d", us);
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <changeDelay+0x88>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	4909      	ldr	r1, [pc, #36]	; (8002838 <changeDelay+0x8c>)
 8002812:	4618      	mov	r0, r3
 8002814:	f008 fc32 	bl	800b07c <siprintf>
	lcd_send_string(hee);
 8002818:	f107 0308 	add.w	r3, r7, #8
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fc37 	bl	8001090 <lcd_send_string>
	lcd_put_cur(0,13);
 8002822:	210d      	movs	r1, #13
 8002824:	2000      	movs	r0, #0
 8002826:	f7fe fbd7 	bl	8000fd8 <lcd_put_cur>
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000002 	.word	0x20000002
 8002838:	0800c7ec 	.word	0x0800c7ec

0800283c <setDelay>:

//change the prescaler to achieve the desired baud rate and reinitialize the can bus
void setDelay(void){
 800283c:	b5b0      	push	{r4, r5, r7, lr}
 800283e:	af00      	add	r7, sp, #0
	storeInFlash();
 8002840:	f7fe fc82 	bl	8001148 <storeInFlash>

	//set the baud rate in menu
	memset(temp, 0, 17);
 8002844:	2211      	movs	r2, #17
 8002846:	2100      	movs	r1, #0
 8002848:	4817      	ldr	r0, [pc, #92]	; (80028a8 <setDelay+0x6c>)
 800284a:	f008 fb55 	bl	800aef8 <memset>
	strncpy(temp, delay_str,16);
 800284e:	2210      	movs	r2, #16
 8002850:	4916      	ldr	r1, [pc, #88]	; (80028ac <setDelay+0x70>)
 8002852:	4815      	ldr	r0, [pc, #84]	; (80028a8 <setDelay+0x6c>)
 8002854:	f008 fc8c 	bl	800b170 <strncpy>
	memset(char_arr, 0, 16);
 8002858:	2210      	movs	r2, #16
 800285a:	2100      	movs	r1, #0
 800285c:	4814      	ldr	r0, [pc, #80]	; (80028b0 <setDelay+0x74>)
 800285e:	f008 fb4b 	bl	800aef8 <memset>
	sprintf(char_arr, "%05d", us);
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <setDelay+0x78>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	4913      	ldr	r1, [pc, #76]	; (80028b8 <setDelay+0x7c>)
 800286a:	4811      	ldr	r0, [pc, #68]	; (80028b0 <setDelay+0x74>)
 800286c:	f008 fc06 	bl	800b07c <siprintf>
	strcat(temp, char_arr);
 8002870:	490f      	ldr	r1, [pc, #60]	; (80028b0 <setDelay+0x74>)
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <setDelay+0x6c>)
 8002874:	f008 fc22 	bl	800b0bc <strcat>
	strlcat(temp,"us",17);
 8002878:	2211      	movs	r2, #17
 800287a:	4910      	ldr	r1, [pc, #64]	; (80028bc <setDelay+0x80>)
 800287c:	480a      	ldr	r0, [pc, #40]	; (80028a8 <setDelay+0x6c>)
 800287e:	f008 fc2c 	bl	800b0da <strlcat>
	memcpy(display_rows[9],temp,17);
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <setDelay+0x84>)
 8002884:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <setDelay+0x6c>)
 8002886:	3399      	adds	r3, #153	; 0x99
 8002888:	6815      	ldr	r5, [r2, #0]
 800288a:	6854      	ldr	r4, [r2, #4]
 800288c:	6890      	ldr	r0, [r2, #8]
 800288e:	68d1      	ldr	r1, [r2, #12]
 8002890:	601d      	str	r5, [r3, #0]
 8002892:	605c      	str	r4, [r3, #4]
 8002894:	6098      	str	r0, [r3, #8]
 8002896:	60d9      	str	r1, [r3, #12]
 8002898:	7c12      	ldrb	r2, [r2, #16]
 800289a:	741a      	strb	r2, [r3, #16]
	lcd_put_cur(0,0);
 800289c:	2100      	movs	r1, #0
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe fb9a 	bl	8000fd8 <lcd_put_cur>
}
 80028a4:	bf00      	nop
 80028a6:	bdb0      	pop	{r4, r5, r7, pc}
 80028a8:	20000200 	.word	0x20000200
 80028ac:	0800c89c 	.word	0x0800c89c
 80028b0:	20000318 	.word	0x20000318
 80028b4:	20000002 	.word	0x20000002
 80028b8:	0800c7ec 	.word	0x0800c7ec
 80028bc:	0800c7f4 	.word	0x0800c7f4
 80028c0:	20000004 	.word	0x20000004

080028c4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c8:	b672      	cpsid	i
}
 80028ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80028cc:	e7fe      	b.n	80028cc <Error_Handler+0x8>
	...

080028d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_MspInit+0x4c>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a0f      	ldr	r2, [pc, #60]	; (800291c <HAL_MspInit+0x4c>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <HAL_MspInit+0x4c>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_MspInit+0x4c>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_MspInit+0x4c>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_MspInit+0x4c>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800290e:	2007      	movs	r0, #7
 8002910:	f001 fa8c 	bl	8003e2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800

08002920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	; 0x30
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <HAL_ADC_MspInit+0xd8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d128      	bne.n	8002994 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	4a2c      	ldr	r2, [pc, #176]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6453      	str	r3, [r2, #68]	; 0x44
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a25      	ldr	r2, [pc, #148]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b23      	ldr	r3, [pc, #140]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800297a:	2302      	movs	r3, #2
 800297c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800297e:	2303      	movs	r3, #3
 8002980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002986:	f107 031c 	add.w	r3, r7, #28
 800298a:	4619      	mov	r1, r3
 800298c:	481c      	ldr	r0, [pc, #112]	; (8002a00 <HAL_ADC_MspInit+0xe0>)
 800298e:	f001 fc8d 	bl	80042ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002992:	e02c      	b.n	80029ee <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1a      	ldr	r2, [pc, #104]	; (8002a04 <HAL_ADC_MspInit+0xe4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d127      	bne.n	80029ee <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a15      	ldr	r2, [pc, #84]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 80029a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <HAL_ADC_MspInit+0xdc>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029d6:	2308      	movs	r3, #8
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029da:	2303      	movs	r3, #3
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 031c 	add.w	r3, r7, #28
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	; (8002a00 <HAL_ADC_MspInit+0xe0>)
 80029ea:	f001 fc5f 	bl	80042ac <HAL_GPIO_Init>
}
 80029ee:	bf00      	nop
 80029f0:	3730      	adds	r7, #48	; 0x30
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40012000 	.word	0x40012000
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020000 	.word	0x40020000
 8002a04:	40012100 	.word	0x40012100

08002a08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_CAN_MspInit+0x84>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d12b      	bne.n	8002a82 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_CAN_MspInit+0x88>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_CAN_MspInit+0x88>)
 8002a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_CAN_MspInit+0x88>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_CAN_MspInit+0x88>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_CAN_MspInit+0x88>)
 8002a50:	f043 0308 	orr.w	r3, r3, #8
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_CAN_MspInit+0x88>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a62:	2303      	movs	r3, #3
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a72:	2309      	movs	r3, #9
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4805      	ldr	r0, [pc, #20]	; (8002a94 <HAL_CAN_MspInit+0x8c>)
 8002a7e:	f001 fc15 	bl	80042ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40006400 	.word	0x40006400
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020c00 	.word	0x40020c00

08002a98 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a28      	ldr	r2, [pc, #160]	; (8002b58 <HAL_I2S_MspInit+0xc0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d14a      	bne.n	8002b50 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <HAL_I2S_MspInit+0xc4>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <HAL_I2S_MspInit+0xc4>)
 8002ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_I2S_MspInit+0xc4>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_I2S_MspInit+0xc4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_I2S_MspInit+0xc4>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_I2S_MspInit+0xc4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_I2S_MspInit+0xc4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <HAL_I2S_MspInit+0xc4>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_I2S_MspInit+0xc4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002b0e:	2310      	movs	r3, #16
 8002b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b1e:	2306      	movs	r3, #6
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002b22:	f107 0314 	add.w	r3, r7, #20
 8002b26:	4619      	mov	r1, r3
 8002b28:	480d      	ldr	r0, [pc, #52]	; (8002b60 <HAL_I2S_MspInit+0xc8>)
 8002b2a:	f001 fbbf 	bl	80042ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002b2e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b40:	2306      	movs	r3, #6
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4806      	ldr	r0, [pc, #24]	; (8002b64 <HAL_I2S_MspInit+0xcc>)
 8002b4c:	f001 fbae 	bl	80042ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002b50:	bf00      	nop
 8002b52:	3728      	adds	r7, #40	; 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40003c00 	.word	0x40003c00
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020000 	.word	0x40020000
 8002b64:	40020800 	.word	0x40020800

08002b68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <HAL_TIM_Base_MspInit+0x3c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10d      	bne.n	8002b96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <HAL_TIM_Base_MspInit+0x40>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <HAL_TIM_Base_MspInit+0x40>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <HAL_TIM_Base_MspInit+0x40>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	40023800 	.word	0x40023800

08002bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <NMI_Handler+0x4>

08002bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <HardFault_Handler+0x4>

08002bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <MemManage_Handler+0x4>

08002bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf8:	f000 f8d0 	bl	8002d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <OTG_FS_IRQHandler+0x10>)
 8002c06:	f001 ff89 	bl	8004b1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000770 	.word	0x20000770

08002c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c1c:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <_sbrk+0x5c>)
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <_sbrk+0x60>)
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <_sbrk+0x64>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <_sbrk+0x64>)
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <_sbrk+0x68>)
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <_sbrk+0x64>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d207      	bcs.n	8002c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c44:	f008 f91e 	bl	800ae84 <__errno>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	220c      	movs	r2, #12
 8002c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	e009      	b.n	8002c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <_sbrk+0x64>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <_sbrk+0x64>)
 8002c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20020000 	.word	0x20020000
 8002c74:	00000400 	.word	0x00000400
 8002c78:	20000170 	.word	0x20000170
 8002c7c:	20000a88 	.word	0x20000a88

08002c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <SystemInit+0x20>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <SystemInit+0x20>)
 8002c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ca8:	480d      	ldr	r0, [pc, #52]	; (8002ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002caa:	490e      	ldr	r1, [pc, #56]	; (8002ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cac:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb0:	e002      	b.n	8002cb8 <LoopCopyDataInit>

08002cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cb6:	3304      	adds	r3, #4

08002cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cbc:	d3f9      	bcc.n	8002cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cc0:	4c0b      	ldr	r4, [pc, #44]	; (8002cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc4:	e001      	b.n	8002cca <LoopFillZerobss>

08002cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc8:	3204      	adds	r2, #4

08002cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ccc:	d3fb      	bcc.n	8002cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cce:	f7ff ffd7 	bl	8002c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cd2:	f008 f8dd 	bl	800ae90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd6:	f7fe fa7f 	bl	80011d8 <main>
  bx  lr    
 8002cda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce4:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8002ce8:	0800c940 	.word	0x0800c940
  ldr r2, =_sbss
 8002cec:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8002cf0:	20000a84 	.word	0x20000a84

08002cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf4:	e7fe      	b.n	8002cf4 <ADC_IRQHandler>
	...

08002cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_Init+0x40>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <HAL_Init+0x40>)
 8002d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_Init+0x40>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <HAL_Init+0x40>)
 8002d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <HAL_Init+0x40>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d20:	2003      	movs	r0, #3
 8002d22:	f001 f883 	bl	8003e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d26:	2000      	movs	r0, #0
 8002d28:	f000 f808 	bl	8002d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d2c:	f7ff fdd0 	bl	80028d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023c00 	.word	0x40023c00

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_InitTick+0x54>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x58>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 f89b 	bl	8003e96 <HAL_SYSTICK_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00e      	b.n	8002d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d80a      	bhi.n	8002d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f001 f863 	bl	8003e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d7c:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <HAL_InitTick+0x5c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200000b4 	.word	0x200000b4
 8002d94:	200000bc 	.word	0x200000bc
 8002d98:	200000b8 	.word	0x200000b8

08002d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_IncTick+0x20>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x24>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <HAL_IncTick+0x24>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	200000bc 	.word	0x200000bc
 8002dc0:	20000374 	.word	0x20000374

08002dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_GetTick+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000374 	.word	0x20000374

08002ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff ffee 	bl	8002dc4 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d005      	beq.n	8002e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_Delay+0x44>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e02:	bf00      	nop
 8002e04:	f7ff ffde 	bl	8002dc4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d8f7      	bhi.n	8002e04 <HAL_Delay+0x28>
  {
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200000bc 	.word	0x200000bc

08002e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e033      	b.n	8002ea2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fd6c 	bl	8002920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d118      	bne.n	8002e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e6a:	f023 0302 	bic.w	r3, r3, #2
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 faa4 	bl	80033c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f023 0303 	bic.w	r3, r3, #3
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
 8002e92:	e001      	b.n	8002e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_Start+0x1a>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0b2      	b.n	800302c <HAL_ADC_Start+0x180>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d018      	beq.n	8002f0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002eec:	4b52      	ldr	r3, [pc, #328]	; (8003038 <HAL_ADC_Start+0x18c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_ADC_Start+0x190>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9a      	lsrs	r2, r3, #18
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f00:	e002      	b.n	8002f08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f9      	bne.n	8002f02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d17a      	bne.n	8003012 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d106      	bne.n	8002f6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	f023 0206 	bic.w	r2, r3, #6
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
 8002f68:	e002      	b.n	8002f70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_ADC_Start+0x194>)
 8002f7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d12a      	bne.n	8002fe8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2b      	ldr	r2, [pc, #172]	; (8003044 <HAL_ADC_Start+0x198>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d015      	beq.n	8002fc8 <HAL_ADC_Start+0x11c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_ADC_Start+0x19c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d105      	bne.n	8002fb2 <HAL_ADC_Start+0x106>
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <HAL_ADC_Start+0x194>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a25      	ldr	r2, [pc, #148]	; (800304c <HAL_ADC_Start+0x1a0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d136      	bne.n	800302a <HAL_ADC_Start+0x17e>
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_ADC_Start+0x194>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d130      	bne.n	800302a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d129      	bne.n	800302a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	e020      	b.n	800302a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_ADC_Start+0x198>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d11b      	bne.n	800302a <HAL_ADC_Start+0x17e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d114      	bne.n	800302a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	e00b      	b.n	800302a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f043 0210 	orr.w	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	200000b4 	.word	0x200000b4
 800303c:	431bde83 	.word	0x431bde83
 8003040:	40012300 	.word	0x40012300
 8003044:	40012000 	.word	0x40012000
 8003048:	40012100 	.word	0x40012100
 800304c:	40012200 	.word	0x40012200

08003050 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306c:	d113      	bne.n	8003096 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307c:	d10b      	bne.n	8003096 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f043 0220 	orr.w	r2, r3, #32
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e063      	b.n	800315e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003096:	f7ff fe95 	bl	8002dc4 <HAL_GetTick>
 800309a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800309c:	e021      	b.n	80030e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d01d      	beq.n	80030e2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_ADC_PollForConversion+0x6c>
 80030ac:	f7ff fe8a 	bl	8002dc4 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d212      	bcs.n	80030e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d00b      	beq.n	80030e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0204 	orr.w	r2, r3, #4
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e03d      	b.n	800315e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d1d6      	bne.n	800309e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0212 	mvn.w	r2, #18
 80030f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d123      	bne.n	800315c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11f      	bne.n	800315c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003134:	2b00      	cmp	r3, #0
 8003136:	d111      	bne.n	800315c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d105      	bne.n	800315c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_ADC_ConfigChannel+0x1c>
 8003198:	2302      	movs	r3, #2
 800319a:	e105      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x228>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b09      	cmp	r3, #9
 80031aa:	d925      	bls.n	80031f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68d9      	ldr	r1, [r3, #12]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	3b1e      	subs	r3, #30
 80031c2:	2207      	movs	r2, #7
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43da      	mvns	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	400a      	ands	r2, r1
 80031d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68d9      	ldr	r1, [r3, #12]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	4603      	mov	r3, r0
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4403      	add	r3, r0
 80031ea:	3b1e      	subs	r3, #30
 80031ec:	409a      	lsls	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	e022      	b.n	800323e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6919      	ldr	r1, [r3, #16]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	2207      	movs	r2, #7
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	400a      	ands	r2, r1
 800321a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6919      	ldr	r1, [r3, #16]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	4603      	mov	r3, r0
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4403      	add	r3, r0
 8003234:	409a      	lsls	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b06      	cmp	r3, #6
 8003244:	d824      	bhi.n	8003290 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	3b05      	subs	r3, #5
 8003258:	221f      	movs	r2, #31
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	400a      	ands	r2, r1
 8003266:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	4618      	mov	r0, r3
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	3b05      	subs	r3, #5
 8003282:	fa00 f203 	lsl.w	r2, r0, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	635a      	str	r2, [r3, #52]	; 0x34
 800328e:	e04c      	b.n	800332a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b0c      	cmp	r3, #12
 8003296:	d824      	bhi.n	80032e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	3b23      	subs	r3, #35	; 0x23
 80032aa:	221f      	movs	r2, #31
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43da      	mvns	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	400a      	ands	r2, r1
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4618      	mov	r0, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	3b23      	subs	r3, #35	; 0x23
 80032d4:	fa00 f203 	lsl.w	r2, r0, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
 80032e0:	e023      	b.n	800332a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	3b41      	subs	r3, #65	; 0x41
 80032f4:	221f      	movs	r2, #31
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	400a      	ands	r2, r1
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	4618      	mov	r0, r3
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	3b41      	subs	r3, #65	; 0x41
 800331e:	fa00 f203 	lsl.w	r2, r0, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800332a:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <HAL_ADC_ConfigChannel+0x234>)
 800332c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a21      	ldr	r2, [pc, #132]	; (80033b8 <HAL_ADC_ConfigChannel+0x238>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d109      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1cc>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b12      	cmp	r3, #18
 800333e:	d105      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_ADC_ConfigChannel+0x238>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d123      	bne.n	800339e <HAL_ADC_ConfigChannel+0x21e>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b10      	cmp	r3, #16
 800335c:	d003      	beq.n	8003366 <HAL_ADC_ConfigChannel+0x1e6>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b11      	cmp	r3, #17
 8003364:	d11b      	bne.n	800339e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d111      	bne.n	800339e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_ADC_ConfigChannel+0x23c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_ADC_ConfigChannel+0x240>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	0c9a      	lsrs	r2, r3, #18
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003390:	e002      	b.n	8003398 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	3b01      	subs	r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f9      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40012300 	.word	0x40012300
 80033b8:	40012000 	.word	0x40012000
 80033bc:	200000b4 	.word	0x200000b4
 80033c0:	431bde83 	.word	0x431bde83

080033c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033cc:	4b79      	ldr	r3, [pc, #484]	; (80035b4 <ADC_Init+0x1f0>)
 80033ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800341c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800343e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6899      	ldr	r1, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	4a58      	ldr	r2, [pc, #352]	; (80035b8 <ADC_Init+0x1f4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d022      	beq.n	80034a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800346a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800348c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	e00f      	b.n	80034c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0202 	bic.w	r2, r2, #2
 80034d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7e1b      	ldrb	r3, [r3, #24]
 80034dc:	005a      	lsls	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01b      	beq.n	8003528 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800350e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	3b01      	subs	r3, #1
 800351c:	035a      	lsls	r2, r3, #13
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	e007      	b.n	8003538 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003536:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	3b01      	subs	r3, #1
 8003554:	051a      	lsls	r2, r3, #20
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800356c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800357a:	025a      	lsls	r2, r3, #9
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6899      	ldr	r1, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	029a      	lsls	r2, r3, #10
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40012300 	.word	0x40012300
 80035b8:	0f000001 	.word	0x0f000001

080035bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0ed      	b.n	80037aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fa14 	bl	8002a08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0202 	bic.w	r2, r2, #2
 80035ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035f0:	f7ff fbe8 	bl	8002dc4 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035f6:	e012      	b.n	800361e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035f8:	f7ff fbe4 	bl	8002dc4 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b0a      	cmp	r3, #10
 8003604:	d90b      	bls.n	800361e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2205      	movs	r2, #5
 8003616:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e0c5      	b.n	80037aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e5      	bne.n	80035f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800363c:	f7ff fbc2 	bl	8002dc4 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003642:	e012      	b.n	800366a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003644:	f7ff fbbe 	bl	8002dc4 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b0a      	cmp	r3, #10
 8003650:	d90b      	bls.n	800366a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2205      	movs	r2, #5
 8003662:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e09f      	b.n	80037aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0e5      	beq.n	8003644 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7e1b      	ldrb	r3, [r3, #24]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d108      	bne.n	8003692 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e007      	b.n	80036a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7e5b      	ldrb	r3, [r3, #25]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d108      	bne.n	80036bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	e007      	b.n	80036cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7e9b      	ldrb	r3, [r3, #26]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d108      	bne.n	80036e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0220 	orr.w	r2, r2, #32
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e007      	b.n	80036f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0220 	bic.w	r2, r2, #32
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	7edb      	ldrb	r3, [r3, #27]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d108      	bne.n	8003710 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0210 	bic.w	r2, r2, #16
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e007      	b.n	8003720 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0210 	orr.w	r2, r2, #16
 800371e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	7f1b      	ldrb	r3, [r3, #28]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d108      	bne.n	800373a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	e007      	b.n	800374a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0208 	bic.w	r2, r2, #8
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7f5b      	ldrb	r3, [r3, #29]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d108      	bne.n	8003764 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0204 	orr.w	r2, r2, #4
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e007      	b.n	8003774 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0204 	bic.w	r2, r2, #4
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	ea42 0103 	orr.w	r1, r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	1e5a      	subs	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d003      	beq.n	80037da <HAL_CAN_ConfigFilter+0x26>
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	f040 80be 	bne.w	8003956 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80037da:	4b65      	ldr	r3, [pc, #404]	; (8003970 <HAL_CAN_ConfigFilter+0x1bc>)
 80037dc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	431a      	orrs	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2201      	movs	r2, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	401a      	ands	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d123      	bne.n	8003884 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	43db      	mvns	r3, r3
 8003846:	401a      	ands	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800385e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	3248      	adds	r2, #72	; 0x48
 8003864:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003878:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	3348      	adds	r3, #72	; 0x48
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	440b      	add	r3, r1
 8003882:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d122      	bne.n	80038d2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	431a      	orrs	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	3248      	adds	r2, #72	; 0x48
 80038b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038c8:	6979      	ldr	r1, [r7, #20]
 80038ca:	3348      	adds	r3, #72	; 0x48
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	401a      	ands	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80038ec:	e007      	b.n	80038fe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	43db      	mvns	r3, r3
 8003910:	401a      	ands	r2, r3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003918:	e007      	b.n	800392a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	431a      	orrs	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d107      	bne.n	8003942 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	431a      	orrs	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003948:	f023 0201 	bic.w	r2, r3, #1
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e006      	b.n	8003964 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40006400 	.word	0x40006400

08003974 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d12e      	bne.n	80039e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039a0:	f7ff fa10 	bl	8002dc4 <HAL_GetTick>
 80039a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039a6:	e012      	b.n	80039ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039a8:	f7ff fa0c 	bl	8002dc4 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b0a      	cmp	r3, #10
 80039b4:	d90b      	bls.n	80039ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2205      	movs	r2, #5
 80039c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e012      	b.n	80039f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e5      	bne.n	80039a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e006      	b.n	80039f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d133      	bne.n	8003a78 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a20:	f7ff f9d0 	bl	8002dc4 <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a26:	e012      	b.n	8003a4e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a28:	f7ff f9cc 	bl	8002dc4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b0a      	cmp	r3, #10
 8003a34:	d90b      	bls.n	8003a4e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2205      	movs	r2, #5
 8003a46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e01b      	b.n	8003a86 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0e5      	beq.n	8003a28 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0202 	bic.w	r2, r2, #2
 8003a6a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	e006      	b.n	8003a86 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b089      	sub	sp, #36	; 0x24
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	607a      	str	r2, [r7, #4]
 8003a9a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003aac:	7ffb      	ldrb	r3, [r7, #31]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d003      	beq.n	8003aba <HAL_CAN_AddTxMessage+0x2c>
 8003ab2:	7ffb      	ldrb	r3, [r7, #31]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	f040 80b8 	bne.w	8003c2a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d105      	bne.n	8003ada <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80a0 	beq.w	8003c1a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d907      	bls.n	8003afa <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e09e      	b.n	8003c38 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003afa:	2201      	movs	r2, #1
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	409a      	lsls	r2, r3
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10d      	bne.n	8003b28 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b16:	68f9      	ldr	r1, [r7, #12]
 8003b18:	6809      	ldr	r1, [r1, #0]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	3318      	adds	r3, #24
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	440b      	add	r3, r1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e00f      	b.n	8003b48 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b32:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003b3c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3318      	adds	r3, #24
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	440b      	add	r3, r1
 8003b46:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6819      	ldr	r1, [r3, #0]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3318      	adds	r3, #24
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	440b      	add	r3, r1
 8003b58:	3304      	adds	r3, #4
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	7d1b      	ldrb	r3, [r3, #20]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d111      	bne.n	8003b88 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3318      	adds	r3, #24
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	4413      	add	r3, r2
 8003b70:	3304      	adds	r3, #4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	6811      	ldr	r1, [r2, #0]
 8003b78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3318      	adds	r3, #24
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	440b      	add	r3, r1
 8003b84:	3304      	adds	r3, #4
 8003b86:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3307      	adds	r3, #7
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	061a      	lsls	r2, r3, #24
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3306      	adds	r3, #6
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	041b      	lsls	r3, r3, #16
 8003b98:	431a      	orrs	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3305      	adds	r3, #5
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	3204      	adds	r2, #4
 8003ba8:	7812      	ldrb	r2, [r2, #0]
 8003baa:	4610      	mov	r0, r2
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	6811      	ldr	r1, [r2, #0]
 8003bb0:	ea43 0200 	orr.w	r2, r3, r0
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	440b      	add	r3, r1
 8003bba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003bbe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3303      	adds	r3, #3
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	061a      	lsls	r2, r3, #24
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3302      	adds	r3, #2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	7812      	ldrb	r2, [r2, #0]
 8003be0:	4610      	mov	r0, r2
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	6811      	ldr	r1, [r2, #0]
 8003be6:	ea43 0200 	orr.w	r2, r3, r0
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	440b      	add	r3, r1
 8003bf0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003bf4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	3318      	adds	r3, #24
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	4413      	add	r3, r2
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	6811      	ldr	r1, [r2, #0]
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3318      	adds	r3, #24
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	440b      	add	r3, r1
 8003c14:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e00e      	b.n	8003c38 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e006      	b.n	8003c38 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3724      	adds	r7, #36	; 0x24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c58:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d002      	beq.n	8003c66 <HAL_CAN_IsTxMessagePending+0x22>
 8003c60:	7afb      	ldrb	r3, [r7, #11]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d10b      	bne.n	8003c7e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	069b      	lsls	r3, r3, #26
 8003c70:	401a      	ands	r2, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	069b      	lsls	r3, r3, #26
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d001      	beq.n	8003c7e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cbe:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	60d3      	str	r3, [r2, #12]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <__NVIC_GetPriorityGrouping+0x18>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	f003 0307 	and.w	r3, r3, #7
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	db0b      	blt.n	8003d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	f003 021f 	and.w	r2, r3, #31
 8003d08:	4907      	ldr	r1, [pc, #28]	; (8003d28 <__NVIC_EnableIRQ+0x38>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2001      	movs	r0, #1
 8003d12:	fa00 f202 	lsl.w	r2, r0, r2
 8003d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	e000e100 	.word	0xe000e100

08003d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db0a      	blt.n	8003d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	490c      	ldr	r1, [pc, #48]	; (8003d78 <__NVIC_SetPriority+0x4c>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	440b      	add	r3, r1
 8003d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d54:	e00a      	b.n	8003d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4908      	ldr	r1, [pc, #32]	; (8003d7c <__NVIC_SetPriority+0x50>)
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	3b04      	subs	r3, #4
 8003d64:	0112      	lsls	r2, r2, #4
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	440b      	add	r3, r1
 8003d6a:	761a      	strb	r2, [r3, #24]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000e100 	.word	0xe000e100
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	; 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f1c3 0307 	rsb	r3, r3, #7
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	bf28      	it	cs
 8003d9e:	2304      	movcs	r3, #4
 8003da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d902      	bls.n	8003db0 <NVIC_EncodePriority+0x30>
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3b03      	subs	r3, #3
 8003dae:	e000      	b.n	8003db2 <NVIC_EncodePriority+0x32>
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	43d9      	mvns	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd8:	4313      	orrs	r3, r2
         );
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3724      	adds	r7, #36	; 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df8:	d301      	bcc.n	8003dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e00f      	b.n	8003e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dfe:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <SysTick_Config+0x40>)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e06:	210f      	movs	r1, #15
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	f7ff ff8e 	bl	8003d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <SysTick_Config+0x40>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e16:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <SysTick_Config+0x40>)
 8003e18:	2207      	movs	r2, #7
 8003e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	e000e010 	.word	0xe000e010

08003e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff ff29 	bl	8003c8c <__NVIC_SetPriorityGrouping>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e54:	f7ff ff3e 	bl	8003cd4 <__NVIC_GetPriorityGrouping>
 8003e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	6978      	ldr	r0, [r7, #20]
 8003e60:	f7ff ff8e 	bl	8003d80 <NVIC_EncodePriority>
 8003e64:	4602      	mov	r2, r0
 8003e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff5d 	bl	8003d2c <__NVIC_SetPriority>
}
 8003e72:	bf00      	nop
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	4603      	mov	r3, r0
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff31 	bl	8003cf0 <__NVIC_EnableIRQ>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ffa2 	bl	8003de8 <SysTick_Config>
 8003ea4:	4603      	mov	r3, r0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ec2:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <HAL_FLASH_Program+0xa0>)
 8003ec4:	7e1b      	ldrb	r3, [r3, #24]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_FLASH_Program+0x1e>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e03b      	b.n	8003f46 <HAL_FLASH_Program+0x96>
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_FLASH_Program+0xa0>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ed4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ed8:	f000 f870 	bl	8003fbc <FLASH_WaitForLastOperation>
 8003edc:	4603      	mov	r3, r0
 8003ede:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d12b      	bne.n	8003f3e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003eec:	783b      	ldrb	r3, [r7, #0]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	68b8      	ldr	r0, [r7, #8]
 8003ef2:	f000 f91b 	bl	800412c <FLASH_Program_Byte>
 8003ef6:	e016      	b.n	8003f26 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d105      	bne.n	8003f0a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003efe:	883b      	ldrh	r3, [r7, #0]
 8003f00:	4619      	mov	r1, r3
 8003f02:	68b8      	ldr	r0, [r7, #8]
 8003f04:	f000 f8ee 	bl	80040e4 <FLASH_Program_HalfWord>
 8003f08:	e00d      	b.n	8003f26 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d105      	bne.n	8003f1c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	68b8      	ldr	r0, [r7, #8]
 8003f16:	f000 f8c3 	bl	80040a0 <FLASH_Program_Word>
 8003f1a:	e004      	b.n	8003f26 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f20:	68b8      	ldr	r0, [r7, #8]
 8003f22:	f000 f88b 	bl	800403c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f26:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f2a:	f000 f847 	bl	8003fbc <FLASH_WaitForLastOperation>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_FLASH_Program+0xa4>)
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <HAL_FLASH_Program+0xa4>)
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <HAL_FLASH_Program+0xa0>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000378 	.word	0x20000378
 8003f54:	40023c00 	.word	0x40023c00

08003f58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_FLASH_Unlock+0x38>)
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da0b      	bge.n	8003f82 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_FLASH_Unlock+0x38>)
 8003f6c:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <HAL_FLASH_Unlock+0x3c>)
 8003f6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f70:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <HAL_FLASH_Unlock+0x38>)
 8003f72:	4a09      	ldr	r2, [pc, #36]	; (8003f98 <HAL_FLASH_Unlock+0x40>)
 8003f74:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_FLASH_Unlock+0x38>)
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da01      	bge.n	8003f82 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003f82:	79fb      	ldrb	r3, [r7, #7]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40023c00 	.word	0x40023c00
 8003f94:	45670123 	.word	0x45670123
 8003f98:	cdef89ab 	.word	0xcdef89ab

08003f9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_FLASH_Lock+0x1c>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	4a04      	ldr	r2, [pc, #16]	; (8003fb8 <HAL_FLASH_Lock+0x1c>)
 8003fa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003faa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	40023c00 	.word	0x40023c00

08003fbc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <FLASH_WaitForLastOperation+0x78>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003fce:	f7fe fef9 	bl	8002dc4 <HAL_GetTick>
 8003fd2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003fd4:	e010      	b.n	8003ff8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d00c      	beq.n	8003ff8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <FLASH_WaitForLastOperation+0x38>
 8003fe4:	f7fe feee 	bl	8002dc4 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d201      	bcs.n	8003ff8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e019      	b.n	800402c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <FLASH_WaitForLastOperation+0x7c>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e8      	bne.n	8003fd6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <FLASH_WaitForLastOperation+0x7c>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <FLASH_WaitForLastOperation+0x7c>)
 8004012:	2201      	movs	r2, #1
 8004014:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <FLASH_WaitForLastOperation+0x7c>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004022:	f000 f8a5 	bl	8004170 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
  
}  
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000378 	.word	0x20000378
 8004038:	40023c00 	.word	0x40023c00

0800403c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <FLASH_Program_DoubleWord+0x60>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	4a13      	ldr	r2, [pc, #76]	; (800409c <FLASH_Program_DoubleWord+0x60>)
 800404e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004052:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <FLASH_Program_DoubleWord+0x60>)
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	4a10      	ldr	r2, [pc, #64]	; (800409c <FLASH_Program_DoubleWord+0x60>)
 800405a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800405e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004060:	4b0e      	ldr	r3, [pc, #56]	; (800409c <FLASH_Program_DoubleWord+0x60>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	4a0d      	ldr	r2, [pc, #52]	; (800409c <FLASH_Program_DoubleWord+0x60>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004072:	f3bf 8f6f 	isb	sy
}
 8004076:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	000a      	movs	r2, r1
 8004086:	2300      	movs	r3, #0
 8004088:	68f9      	ldr	r1, [r7, #12]
 800408a:	3104      	adds	r1, #4
 800408c:	4613      	mov	r3, r2
 800408e:	600b      	str	r3, [r1, #0]
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40023c00 	.word	0x40023c00

080040a0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <FLASH_Program_Word+0x40>)
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <FLASH_Program_Word+0x40>)
 80040b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80040b6:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <FLASH_Program_Word+0x40>)
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <FLASH_Program_Word+0x40>)
 80040bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040c2:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <FLASH_Program_Word+0x40>)
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	4a06      	ldr	r2, [pc, #24]	; (80040e0 <FLASH_Program_Word+0x40>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	601a      	str	r2, [r3, #0]
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40023c00 	.word	0x40023c00

080040e4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <FLASH_Program_HalfWord+0x44>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	4a0c      	ldr	r2, [pc, #48]	; (8004128 <FLASH_Program_HalfWord+0x44>)
 80040f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <FLASH_Program_HalfWord+0x44>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	4a09      	ldr	r2, [pc, #36]	; (8004128 <FLASH_Program_HalfWord+0x44>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004106:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004108:	4b07      	ldr	r3, [pc, #28]	; (8004128 <FLASH_Program_HalfWord+0x44>)
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	4a06      	ldr	r2, [pc, #24]	; (8004128 <FLASH_Program_HalfWord+0x44>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	801a      	strh	r2, [r3, #0]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40023c00 	.word	0x40023c00

0800412c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <FLASH_Program_Byte+0x40>)
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	4a0b      	ldr	r2, [pc, #44]	; (800416c <FLASH_Program_Byte+0x40>)
 800413e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004142:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004144:	4b09      	ldr	r3, [pc, #36]	; (800416c <FLASH_Program_Byte+0x40>)
 8004146:	4a09      	ldr	r2, [pc, #36]	; (800416c <FLASH_Program_Byte+0x40>)
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <FLASH_Program_Byte+0x40>)
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	4a06      	ldr	r2, [pc, #24]	; (800416c <FLASH_Program_Byte+0x40>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	701a      	strb	r2, [r3, #0]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00

08004170 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004174:	4b27      	ldr	r3, [pc, #156]	; (8004214 <FLASH_SetErrorCode+0xa4>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004180:	4b25      	ldr	r3, [pc, #148]	; (8004218 <FLASH_SetErrorCode+0xa8>)
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f043 0310 	orr.w	r3, r3, #16
 8004188:	4a23      	ldr	r2, [pc, #140]	; (8004218 <FLASH_SetErrorCode+0xa8>)
 800418a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800418c:	4b21      	ldr	r3, [pc, #132]	; (8004214 <FLASH_SetErrorCode+0xa4>)
 800418e:	2210      	movs	r2, #16
 8004190:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <FLASH_SetErrorCode+0xa4>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800419e:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <FLASH_SetErrorCode+0xa8>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f043 0308 	orr.w	r3, r3, #8
 80041a6:	4a1c      	ldr	r2, [pc, #112]	; (8004218 <FLASH_SetErrorCode+0xa8>)
 80041a8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80041aa:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <FLASH_SetErrorCode+0xa4>)
 80041ac:	2220      	movs	r2, #32
 80041ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80041b0:	4b18      	ldr	r3, [pc, #96]	; (8004214 <FLASH_SetErrorCode+0xa4>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <FLASH_SetErrorCode+0xa8>)
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <FLASH_SetErrorCode+0xa8>)
 80041c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <FLASH_SetErrorCode+0xa4>)
 80041ca:	2240      	movs	r2, #64	; 0x40
 80041cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <FLASH_SetErrorCode+0xa4>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <FLASH_SetErrorCode+0xa8>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f043 0302 	orr.w	r3, r3, #2
 80041e2:	4a0d      	ldr	r2, [pc, #52]	; (8004218 <FLASH_SetErrorCode+0xa8>)
 80041e4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <FLASH_SetErrorCode+0xa4>)
 80041e8:	2280      	movs	r2, #128	; 0x80
 80041ea:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <FLASH_SetErrorCode+0xa4>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <FLASH_SetErrorCode+0xa8>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f043 0320 	orr.w	r3, r3, #32
 8004200:	4a05      	ldr	r2, [pc, #20]	; (8004218 <FLASH_SetErrorCode+0xa8>)
 8004202:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <FLASH_SetErrorCode+0xa4>)
 8004206:	2202      	movs	r2, #2
 8004208:	60da      	str	r2, [r3, #12]
  }
}
 800420a:	bf00      	nop
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40023c00 	.word	0x40023c00
 8004218:	20000378 	.word	0x20000378

0800421c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	e010      	b.n	800425a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d103      	bne.n	8004246 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800423e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e009      	b.n	800425a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d103      	bne.n	8004254 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800424c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	e002      	b.n	800425a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004254:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004258:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800425a:	4b13      	ldr	r3, [pc, #76]	; (80042a8 <FLASH_Erase_Sector+0x8c>)
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <FLASH_Erase_Sector+0x8c>)
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <FLASH_Erase_Sector+0x8c>)
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	490f      	ldr	r1, [pc, #60]	; (80042a8 <FLASH_Erase_Sector+0x8c>)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004272:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <FLASH_Erase_Sector+0x8c>)
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	4a0c      	ldr	r2, [pc, #48]	; (80042a8 <FLASH_Erase_Sector+0x8c>)
 8004278:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800427c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800427e:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <FLASH_Erase_Sector+0x8c>)
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4313      	orrs	r3, r2
 8004288:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <FLASH_Erase_Sector+0x8c>)
 800428a:	f043 0302 	orr.w	r3, r3, #2
 800428e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <FLASH_Erase_Sector+0x8c>)
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <FLASH_Erase_Sector+0x8c>)
 8004296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429a:	6113      	str	r3, [r2, #16]
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40023c00 	.word	0x40023c00

080042ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	; 0x24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	e16b      	b.n	80045a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042c8:	2201      	movs	r2, #1
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4013      	ands	r3, r2
 80042da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	f040 815a 	bne.w	800459a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d005      	beq.n	80042fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d130      	bne.n	8004360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	2203      	movs	r2, #3
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4013      	ands	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4313      	orrs	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004334:	2201      	movs	r2, #1
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 0201 	and.w	r2, r3, #1
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b03      	cmp	r3, #3
 800436a:	d017      	beq.n	800439c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	2203      	movs	r2, #3
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4313      	orrs	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 0303 	and.w	r3, r3, #3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d123      	bne.n	80043f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	08da      	lsrs	r2, r3, #3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3208      	adds	r2, #8
 80043b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	220f      	movs	r2, #15
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	08da      	lsrs	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3208      	adds	r2, #8
 80043ea:	69b9      	ldr	r1, [r7, #24]
 80043ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	2203      	movs	r2, #3
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0203 	and.w	r2, r3, #3
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4313      	orrs	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80b4 	beq.w	800459a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	4b60      	ldr	r3, [pc, #384]	; (80045b8 <HAL_GPIO_Init+0x30c>)
 8004438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443a:	4a5f      	ldr	r2, [pc, #380]	; (80045b8 <HAL_GPIO_Init+0x30c>)
 800443c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004440:	6453      	str	r3, [r2, #68]	; 0x44
 8004442:	4b5d      	ldr	r3, [pc, #372]	; (80045b8 <HAL_GPIO_Init+0x30c>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800444e:	4a5b      	ldr	r2, [pc, #364]	; (80045bc <HAL_GPIO_Init+0x310>)
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	089b      	lsrs	r3, r3, #2
 8004454:	3302      	adds	r3, #2
 8004456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	220f      	movs	r2, #15
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a52      	ldr	r2, [pc, #328]	; (80045c0 <HAL_GPIO_Init+0x314>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d02b      	beq.n	80044d2 <HAL_GPIO_Init+0x226>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a51      	ldr	r2, [pc, #324]	; (80045c4 <HAL_GPIO_Init+0x318>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d025      	beq.n	80044ce <HAL_GPIO_Init+0x222>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a50      	ldr	r2, [pc, #320]	; (80045c8 <HAL_GPIO_Init+0x31c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01f      	beq.n	80044ca <HAL_GPIO_Init+0x21e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a4f      	ldr	r2, [pc, #316]	; (80045cc <HAL_GPIO_Init+0x320>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d019      	beq.n	80044c6 <HAL_GPIO_Init+0x21a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a4e      	ldr	r2, [pc, #312]	; (80045d0 <HAL_GPIO_Init+0x324>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <HAL_GPIO_Init+0x216>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a4d      	ldr	r2, [pc, #308]	; (80045d4 <HAL_GPIO_Init+0x328>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00d      	beq.n	80044be <HAL_GPIO_Init+0x212>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a4c      	ldr	r2, [pc, #304]	; (80045d8 <HAL_GPIO_Init+0x32c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <HAL_GPIO_Init+0x20e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a4b      	ldr	r2, [pc, #300]	; (80045dc <HAL_GPIO_Init+0x330>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <HAL_GPIO_Init+0x20a>
 80044b2:	2307      	movs	r3, #7
 80044b4:	e00e      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044b6:	2308      	movs	r3, #8
 80044b8:	e00c      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044ba:	2306      	movs	r3, #6
 80044bc:	e00a      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044be:	2305      	movs	r3, #5
 80044c0:	e008      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044c2:	2304      	movs	r3, #4
 80044c4:	e006      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044c6:	2303      	movs	r3, #3
 80044c8:	e004      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e002      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <HAL_GPIO_Init+0x228>
 80044d2:	2300      	movs	r3, #0
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	f002 0203 	and.w	r2, r2, #3
 80044da:	0092      	lsls	r2, r2, #2
 80044dc:	4093      	lsls	r3, r2
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044e4:	4935      	ldr	r1, [pc, #212]	; (80045bc <HAL_GPIO_Init+0x310>)
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	3302      	adds	r3, #2
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044f2:	4b3b      	ldr	r3, [pc, #236]	; (80045e0 <HAL_GPIO_Init+0x334>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004516:	4a32      	ldr	r2, [pc, #200]	; (80045e0 <HAL_GPIO_Init+0x334>)
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800451c:	4b30      	ldr	r3, [pc, #192]	; (80045e0 <HAL_GPIO_Init+0x334>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004540:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <HAL_GPIO_Init+0x334>)
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004546:	4b26      	ldr	r3, [pc, #152]	; (80045e0 <HAL_GPIO_Init+0x334>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800456a:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <HAL_GPIO_Init+0x334>)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <HAL_GPIO_Init+0x334>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004594:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <HAL_GPIO_Init+0x334>)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3301      	adds	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2b0f      	cmp	r3, #15
 80045a4:	f67f ae90 	bls.w	80042c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40013800 	.word	0x40013800
 80045c0:	40020000 	.word	0x40020000
 80045c4:	40020400 	.word	0x40020400
 80045c8:	40020800 	.word	0x40020800
 80045cc:	40020c00 	.word	0x40020c00
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40021400 	.word	0x40021400
 80045d8:	40021800 	.word	0x40021800
 80045dc:	40021c00 	.word	0x40021c00
 80045e0:	40013c00 	.word	0x40013c00

080045e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	887b      	ldrh	r3, [r7, #2]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
 8004600:	e001      	b.n	8004606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004606:	7bfb      	ldrb	r3, [r7, #15]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
 8004620:	4613      	mov	r3, r2
 8004622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004624:	787b      	ldrb	r3, [r7, #1]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004630:	e003      	b.n	800463a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004632:	887b      	ldrh	r3, [r7, #2]
 8004634:	041a      	lsls	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	619a      	str	r2, [r3, #24]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004646:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004648:	b08f      	sub	sp, #60	; 0x3c
 800464a:	af0a      	add	r7, sp, #40	; 0x28
 800464c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e054      	b.n	8004702 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f006 f95c 	bl	800a930 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2203      	movs	r2, #3
 800467c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f003 fafe 	bl	8007c98 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	687e      	ldr	r6, [r7, #4]
 80046a4:	466d      	mov	r5, sp
 80046a6:	f106 0410 	add.w	r4, r6, #16
 80046aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80046ba:	1d33      	adds	r3, r6, #4
 80046bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046be:	6838      	ldr	r0, [r7, #0]
 80046c0:	f003 fa78 	bl	8007bb4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	4618      	mov	r0, r3
 80046cc:	f003 faf5 	bl	8007cba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	687e      	ldr	r6, [r7, #4]
 80046d8:	466d      	mov	r5, sp
 80046da:	f106 0410 	add.w	r4, r6, #16
 80046de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80046ee:	1d33      	adds	r3, r6, #4
 80046f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046f2:	6838      	ldr	r0, [r7, #0]
 80046f4:	f003 fc08 	bl	8007f08 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800470a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800470a:	b590      	push	{r4, r7, lr}
 800470c:	b089      	sub	sp, #36	; 0x24
 800470e:	af04      	add	r7, sp, #16
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	4608      	mov	r0, r1
 8004714:	4611      	mov	r1, r2
 8004716:	461a      	mov	r2, r3
 8004718:	4603      	mov	r3, r0
 800471a:	70fb      	strb	r3, [r7, #3]
 800471c:	460b      	mov	r3, r1
 800471e:	70bb      	strb	r3, [r7, #2]
 8004720:	4613      	mov	r3, r2
 8004722:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_HCD_HC_Init+0x28>
 800472e:	2302      	movs	r3, #2
 8004730:	e076      	b.n	8004820 <HAL_HCD_HC_Init+0x116>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	212c      	movs	r1, #44	; 0x2c
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	333d      	adds	r3, #61	; 0x3d
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	212c      	movs	r1, #44	; 0x2c
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	4413      	add	r3, r2
 8004758:	3338      	adds	r3, #56	; 0x38
 800475a:	787a      	ldrb	r2, [r7, #1]
 800475c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	212c      	movs	r1, #44	; 0x2c
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	4413      	add	r3, r2
 800476a:	3340      	adds	r3, #64	; 0x40
 800476c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800476e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	212c      	movs	r1, #44	; 0x2c
 8004776:	fb01 f303 	mul.w	r3, r1, r3
 800477a:	4413      	add	r3, r2
 800477c:	3339      	adds	r3, #57	; 0x39
 800477e:	78fa      	ldrb	r2, [r7, #3]
 8004780:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	212c      	movs	r1, #44	; 0x2c
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	4413      	add	r3, r2
 800478e:	333f      	adds	r3, #63	; 0x3f
 8004790:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004794:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	78ba      	ldrb	r2, [r7, #2]
 800479a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800479e:	b2d0      	uxtb	r0, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	212c      	movs	r1, #44	; 0x2c
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	333a      	adds	r3, #58	; 0x3a
 80047ac:	4602      	mov	r2, r0
 80047ae:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80047b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	da09      	bge.n	80047cc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	333b      	adds	r3, #59	; 0x3b
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e008      	b.n	80047de <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	212c      	movs	r1, #44	; 0x2c
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	333b      	adds	r3, #59	; 0x3b
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	212c      	movs	r1, #44	; 0x2c
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	4413      	add	r3, r2
 80047ea:	333c      	adds	r3, #60	; 0x3c
 80047ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80047f0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	787c      	ldrb	r4, [r7, #1]
 80047f8:	78ba      	ldrb	r2, [r7, #2]
 80047fa:	78f9      	ldrb	r1, [r7, #3]
 80047fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80047fe:	9302      	str	r3, [sp, #8]
 8004800:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	f897 3020 	ldrb.w	r3, [r7, #32]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	4623      	mov	r3, r4
 800480e:	f003 fcfd 	bl	800820c <USB_HC_Init>
 8004812:	4603      	mov	r3, r0
 8004814:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	bd90      	pop	{r4, r7, pc}

08004828 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_HCD_HC_Halt+0x1e>
 8004842:	2302      	movs	r3, #2
 8004844:	e00f      	b.n	8004866 <HAL_HCD_HC_Halt+0x3e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f003 ff39 	bl	80086ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004864:	7bfb      	ldrb	r3, [r7, #15]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	4608      	mov	r0, r1
 800487a:	4611      	mov	r1, r2
 800487c:	461a      	mov	r2, r3
 800487e:	4603      	mov	r3, r0
 8004880:	70fb      	strb	r3, [r7, #3]
 8004882:	460b      	mov	r3, r1
 8004884:	70bb      	strb	r3, [r7, #2]
 8004886:	4613      	mov	r3, r2
 8004888:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	212c      	movs	r1, #44	; 0x2c
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	333b      	adds	r3, #59	; 0x3b
 8004898:	78ba      	ldrb	r2, [r7, #2]
 800489a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	212c      	movs	r1, #44	; 0x2c
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	333f      	adds	r3, #63	; 0x3f
 80048aa:	787a      	ldrb	r2, [r7, #1]
 80048ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80048ae:	7c3b      	ldrb	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d112      	bne.n	80048da <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	212c      	movs	r1, #44	; 0x2c
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	4413      	add	r3, r2
 80048c0:	3342      	adds	r3, #66	; 0x42
 80048c2:	2203      	movs	r2, #3
 80048c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	212c      	movs	r1, #44	; 0x2c
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	333d      	adds	r3, #61	; 0x3d
 80048d4:	7f3a      	ldrb	r2, [r7, #28]
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e008      	b.n	80048ec <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	212c      	movs	r1, #44	; 0x2c
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	3342      	adds	r3, #66	; 0x42
 80048e8:	2202      	movs	r2, #2
 80048ea:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80048ec:	787b      	ldrb	r3, [r7, #1]
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	f200 80c6 	bhi.w	8004a80 <HAL_HCD_HC_SubmitRequest+0x210>
 80048f4:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	0800490d 	.word	0x0800490d
 8004900:	08004a6d 	.word	0x08004a6d
 8004904:	08004971 	.word	0x08004971
 8004908:	080049ef 	.word	0x080049ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800490c:	7c3b      	ldrb	r3, [r7, #16]
 800490e:	2b01      	cmp	r3, #1
 8004910:	f040 80b8 	bne.w	8004a84 <HAL_HCD_HC_SubmitRequest+0x214>
 8004914:	78bb      	ldrb	r3, [r7, #2]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f040 80b4 	bne.w	8004a84 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800491c:	8b3b      	ldrh	r3, [r7, #24]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d108      	bne.n	8004934 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	212c      	movs	r1, #44	; 0x2c
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	4413      	add	r3, r2
 800492e:	3355      	adds	r3, #85	; 0x55
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	212c      	movs	r1, #44	; 0x2c
 800493a:	fb01 f303 	mul.w	r3, r1, r3
 800493e:	4413      	add	r3, r2
 8004940:	3355      	adds	r3, #85	; 0x55
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	212c      	movs	r1, #44	; 0x2c
 800494e:	fb01 f303 	mul.w	r3, r1, r3
 8004952:	4413      	add	r3, r2
 8004954:	3342      	adds	r3, #66	; 0x42
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800495a:	e093      	b.n	8004a84 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	212c      	movs	r1, #44	; 0x2c
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	4413      	add	r3, r2
 8004968:	3342      	adds	r3, #66	; 0x42
 800496a:	2202      	movs	r2, #2
 800496c:	701a      	strb	r2, [r3, #0]
      break;
 800496e:	e089      	b.n	8004a84 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004970:	78bb      	ldrb	r3, [r7, #2]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11d      	bne.n	80049b2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	3355      	adds	r3, #85	; 0x55
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	212c      	movs	r1, #44	; 0x2c
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	3342      	adds	r3, #66	; 0x42
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800499c:	e073      	b.n	8004a86 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	3342      	adds	r3, #66	; 0x42
 80049ac:	2202      	movs	r2, #2
 80049ae:	701a      	strb	r2, [r3, #0]
      break;
 80049b0:	e069      	b.n	8004a86 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	212c      	movs	r1, #44	; 0x2c
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	4413      	add	r3, r2
 80049be:	3354      	adds	r3, #84	; 0x54
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d109      	bne.n	80049da <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	212c      	movs	r1, #44	; 0x2c
 80049cc:	fb01 f303 	mul.w	r3, r1, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	3342      	adds	r3, #66	; 0x42
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
      break;
 80049d8:	e055      	b.n	8004a86 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	212c      	movs	r1, #44	; 0x2c
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	3342      	adds	r3, #66	; 0x42
 80049e8:	2202      	movs	r2, #2
 80049ea:	701a      	strb	r2, [r3, #0]
      break;
 80049ec:	e04b      	b.n	8004a86 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80049ee:	78bb      	ldrb	r3, [r7, #2]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11d      	bne.n	8004a30 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	212c      	movs	r1, #44	; 0x2c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	3355      	adds	r3, #85	; 0x55
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	212c      	movs	r1, #44	; 0x2c
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	3342      	adds	r3, #66	; 0x42
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004a1a:	e034      	b.n	8004a86 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	212c      	movs	r1, #44	; 0x2c
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	3342      	adds	r3, #66	; 0x42
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	701a      	strb	r2, [r3, #0]
      break;
 8004a2e:	e02a      	b.n	8004a86 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	212c      	movs	r1, #44	; 0x2c
 8004a36:	fb01 f303 	mul.w	r3, r1, r3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3354      	adds	r3, #84	; 0x54
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d109      	bne.n	8004a58 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	212c      	movs	r1, #44	; 0x2c
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	3342      	adds	r3, #66	; 0x42
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
      break;
 8004a56:	e016      	b.n	8004a86 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	212c      	movs	r1, #44	; 0x2c
 8004a5e:	fb01 f303 	mul.w	r3, r1, r3
 8004a62:	4413      	add	r3, r2
 8004a64:	3342      	adds	r3, #66	; 0x42
 8004a66:	2202      	movs	r2, #2
 8004a68:	701a      	strb	r2, [r3, #0]
      break;
 8004a6a:	e00c      	b.n	8004a86 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	212c      	movs	r1, #44	; 0x2c
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	3342      	adds	r3, #66	; 0x42
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	701a      	strb	r2, [r3, #0]
      break;
 8004a7e:	e002      	b.n	8004a86 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004a80:	bf00      	nop
 8004a82:	e000      	b.n	8004a86 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004a84:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	212c      	movs	r1, #44	; 0x2c
 8004a8c:	fb01 f303 	mul.w	r3, r1, r3
 8004a90:	4413      	add	r3, r2
 8004a92:	3344      	adds	r3, #68	; 0x44
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	8b3a      	ldrh	r2, [r7, #24]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	202c      	movs	r0, #44	; 0x2c
 8004aa0:	fb00 f303 	mul.w	r3, r0, r3
 8004aa4:	440b      	add	r3, r1
 8004aa6:	334c      	adds	r3, #76	; 0x4c
 8004aa8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	212c      	movs	r1, #44	; 0x2c
 8004ab0:	fb01 f303 	mul.w	r3, r1, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3360      	adds	r3, #96	; 0x60
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	212c      	movs	r1, #44	; 0x2c
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3350      	adds	r3, #80	; 0x50
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	212c      	movs	r1, #44	; 0x2c
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	3339      	adds	r3, #57	; 0x39
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3361      	adds	r3, #97	; 0x61
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	222c      	movs	r2, #44	; 0x2c
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	3338      	adds	r3, #56	; 0x38
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	18d1      	adds	r1, r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f003 fc8c 	bl	8008428 <USB_HC_StartXfer>
 8004b10:	4603      	mov	r3, r0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop

08004b1c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f003 f9a5 	bl	8007e82 <USB_GetMode>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	f040 80ef 	bne.w	8004d1e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f003 f989 	bl	8007e5c <USB_ReadInterrupts>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80e5 	beq.w	8004d1c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f003 f980 	bl	8007e5c <USB_ReadInterrupts>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b66:	d104      	bne.n	8004b72 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f003 f970 	bl	8007e5c <USB_ReadInterrupts>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b86:	d104      	bne.n	8004b92 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f003 f960 	bl	8007e5c <USB_ReadInterrupts>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ba6:	d104      	bne.n	8004bb2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004bb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f003 f950 	bl	8007e5c <USB_ReadInterrupts>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d103      	bne.n	8004bce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 f942 	bl	8007e5c <USB_ReadInterrupts>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be2:	d115      	bne.n	8004c10 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004bec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d108      	bne.n	8004c10 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f005 ff14 	bl	800aa2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2101      	movs	r1, #1
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f003 fa38 	bl	8008080 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f003 f921 	bl	8007e5c <USB_ReadInterrupts>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c24:	d102      	bne.n	8004c2c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f001 f9ff 	bl	800602a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f003 f913 	bl	8007e5c <USB_ReadInterrupts>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d106      	bne.n	8004c4e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f005 fed7 	bl	800a9f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f003 f902 	bl	8007e5c <USB_ReadInterrupts>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d101      	bne.n	8004c66 <HAL_HCD_IRQHandler+0x14a>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <HAL_HCD_IRQHandler+0x14c>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d012      	beq.n	8004c92 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0210 	bic.w	r2, r2, #16
 8004c7a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f001 f902 	bl	8005e86 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0210 	orr.w	r2, r2, #16
 8004c90:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f003 f8e0 	bl	8007e5c <USB_ReadInterrupts>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ca6:	d13a      	bne.n	8004d1e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f003 fcfd 	bl	80086ac <USB_HC_ReadInterrupt>
 8004cb2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	e025      	b.n	8004d06 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d018      	beq.n	8004d00 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce4:	d106      	bne.n	8004cf4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f8ab 	bl	8004e48 <HCD_HC_IN_IRQHandler>
 8004cf2:	e005      	b.n	8004d00 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fcc6 	bl	800568c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	3301      	adds	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d3d4      	bcc.n	8004cba <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d18:	615a      	str	r2, [r3, #20]
 8004d1a:	e000      	b.n	8004d1e <HAL_HCD_IRQHandler+0x202>
      return;
 8004d1c:	bf00      	nop
    }
  }
}
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_HCD_Start+0x16>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e013      	b.n	8004d62 <HAL_HCD_Start+0x3e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f002 ff95 	bl	8007c76 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2101      	movs	r1, #1
 8004d52:	4618      	mov	r0, r3
 8004d54:	f003 f9f8 	bl	8008148 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_HCD_Stop+0x16>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e00d      	b.n	8004d9c <HAL_HCD_Stop+0x32>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f003 fdf7 	bl	8008980 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f003 f99f 	bl	80080f4 <USB_ResetPort>
 8004db6:	4603      	mov	r3, r0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3708      	adds	r7, #8
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	212c      	movs	r1, #44	; 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3360      	adds	r3, #96	; 0x60
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	212c      	movs	r1, #44	; 0x2c
 8004dfa:	fb01 f303 	mul.w	r3, r1, r3
 8004dfe:	4413      	add	r3, r2
 8004e00:	3350      	adds	r3, #80	; 0x50
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f003 f9e3 	bl	80081e8 <USB_GetCurrentFrame>
 8004e22:	4603      	mov	r3, r0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f003 f9be 	bl	80081ba <USB_GetHostSpeed>
 8004e3e:	4603      	mov	r3, r0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d119      	bne.n	8004eac <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e84:	461a      	mov	r2, r3
 8004e86:	2304      	movs	r3, #4
 8004e88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea4:	f043 0302 	orr.w	r3, r3, #2
 8004ea8:	60d3      	str	r3, [r2, #12]
 8004eaa:	e101      	b.n	80050b0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec2:	d12b      	bne.n	8004f1c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ed6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	212c      	movs	r1, #44	; 0x2c
 8004ede:	fb01 f303 	mul.w	r3, r1, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3361      	adds	r3, #97	; 0x61
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f04:	f043 0302 	orr.w	r3, r3, #2
 8004f08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f003 fbda 	bl	80086ce <USB_HC_Halt>
 8004f1a:	e0c9      	b.n	80050b0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d109      	bne.n	8004f46 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3e:	461a      	mov	r2, r3
 8004f40:	2320      	movs	r3, #32
 8004f42:	6093      	str	r3, [r2, #8]
 8004f44:	e0b4      	b.n	80050b0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d133      	bne.n	8004fc4 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f76:	f043 0302 	orr.w	r3, r3, #2
 8004f7a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	212c      	movs	r1, #44	; 0x2c
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	3361      	adds	r3, #97	; 0x61
 8004f8a:	2205      	movs	r2, #5
 8004f8c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fac:	461a      	mov	r2, r3
 8004fae:	2308      	movs	r3, #8
 8004fb0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f003 fb86 	bl	80086ce <USB_HC_Halt>
 8004fc2:	e075      	b.n	80050b0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d134      	bne.n	8005046 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff6:	f043 0302 	orr.w	r3, r3, #2
 8004ffa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	212c      	movs	r1, #44	; 0x2c
 8005002:	fb01 f303 	mul.w	r3, r1, r3
 8005006:	4413      	add	r3, r2
 8005008:	3361      	adds	r3, #97	; 0x61
 800500a:	2208      	movs	r2, #8
 800500c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	461a      	mov	r2, r3
 800501c:	2310      	movs	r3, #16
 800501e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502c:	461a      	mov	r2, r3
 800502e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005032:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	4611      	mov	r1, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f003 fb45 	bl	80086ce <USB_HC_Halt>
 8005044:	e034      	b.n	80050b0 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4413      	add	r3, r2
 800504e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	2b80      	cmp	r3, #128	; 0x80
 800505a:	d129      	bne.n	80050b0 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	440a      	add	r2, r1
 8005072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005076:	f043 0302 	orr.w	r3, r3, #2
 800507a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	212c      	movs	r1, #44	; 0x2c
 8005082:	fb01 f303 	mul.w	r3, r1, r3
 8005086:	4413      	add	r3, r2
 8005088:	3361      	adds	r3, #97	; 0x61
 800508a:	2206      	movs	r2, #6
 800508c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	4611      	mov	r1, r2
 8005098:	4618      	mov	r0, r3
 800509a:	f003 fb18 	bl	80086ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050aa:	461a      	mov	r2, r3
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c6:	d122      	bne.n	800510e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e2:	f043 0302 	orr.w	r3, r3, #2
 80050e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f003 faeb 	bl	80086ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005104:	461a      	mov	r2, r3
 8005106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800510a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800510c:	e2ba      	b.n	8005684 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b01      	cmp	r3, #1
 8005122:	f040 811b 	bne.w	800535c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d019      	beq.n	8005162 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	212c      	movs	r1, #44	; 0x2c
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	4413      	add	r3, r2
 800513a:	3348      	adds	r3, #72	; 0x48
 800513c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	0159      	lsls	r1, r3, #5
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	440b      	add	r3, r1
 8005146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005150:	1ad2      	subs	r2, r2, r3
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	202c      	movs	r0, #44	; 0x2c
 8005158:	fb00 f303 	mul.w	r3, r0, r3
 800515c:	440b      	add	r3, r1
 800515e:	3350      	adds	r3, #80	; 0x50
 8005160:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	212c      	movs	r1, #44	; 0x2c
 8005168:	fb01 f303 	mul.w	r3, r1, r3
 800516c:	4413      	add	r3, r2
 800516e:	3361      	adds	r3, #97	; 0x61
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	335c      	adds	r3, #92	; 0x5c
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005192:	461a      	mov	r2, r3
 8005194:	2301      	movs	r3, #1
 8005196:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	212c      	movs	r1, #44	; 0x2c
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	4413      	add	r3, r2
 80051a4:	333f      	adds	r3, #63	; 0x3f
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d009      	beq.n	80051c0 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	212c      	movs	r1, #44	; 0x2c
 80051b2:	fb01 f303 	mul.w	r3, r1, r3
 80051b6:	4413      	add	r3, r2
 80051b8:	333f      	adds	r3, #63	; 0x3f
 80051ba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d121      	bne.n	8005204 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051da:	f043 0302 	orr.w	r3, r3, #2
 80051de:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	4611      	mov	r1, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f003 fa6f 	bl	80086ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fc:	461a      	mov	r2, r3
 80051fe:	2310      	movs	r3, #16
 8005200:	6093      	str	r3, [r2, #8]
 8005202:	e066      	b.n	80052d2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	212c      	movs	r1, #44	; 0x2c
 800520a:	fb01 f303 	mul.w	r3, r1, r3
 800520e:	4413      	add	r3, r2
 8005210:	333f      	adds	r3, #63	; 0x3f
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b03      	cmp	r3, #3
 8005216:	d127      	bne.n	8005268 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	4413      	add	r3, r2
 8005220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	440a      	add	r2, r1
 800522e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005232:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005236:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	212c      	movs	r1, #44	; 0x2c
 800523e:	fb01 f303 	mul.w	r3, r1, r3
 8005242:	4413      	add	r3, r2
 8005244:	3360      	adds	r3, #96	; 0x60
 8005246:	2201      	movs	r2, #1
 8005248:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	b2d9      	uxtb	r1, r3
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	202c      	movs	r0, #44	; 0x2c
 8005254:	fb00 f303 	mul.w	r3, r0, r3
 8005258:	4413      	add	r3, r2
 800525a:	3360      	adds	r3, #96	; 0x60
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f005 fbf1 	bl	800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005266:	e034      	b.n	80052d2 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	212c      	movs	r1, #44	; 0x2c
 800526e:	fb01 f303 	mul.w	r3, r1, r3
 8005272:	4413      	add	r3, r2
 8005274:	333f      	adds	r3, #63	; 0x3f
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d12a      	bne.n	80052d2 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	212c      	movs	r1, #44	; 0x2c
 8005282:	fb01 f303 	mul.w	r3, r1, r3
 8005286:	4413      	add	r3, r2
 8005288:	3360      	adds	r3, #96	; 0x60
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	212c      	movs	r1, #44	; 0x2c
 8005294:	fb01 f303 	mul.w	r3, r1, r3
 8005298:	4413      	add	r3, r2
 800529a:	3354      	adds	r3, #84	; 0x54
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	f083 0301 	eor.w	r3, r3, #1
 80052a2:	b2d8      	uxtb	r0, r3
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	212c      	movs	r1, #44	; 0x2c
 80052aa:	fb01 f303 	mul.w	r3, r1, r3
 80052ae:	4413      	add	r3, r2
 80052b0:	3354      	adds	r3, #84	; 0x54
 80052b2:	4602      	mov	r2, r0
 80052b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	b2d9      	uxtb	r1, r3
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	202c      	movs	r0, #44	; 0x2c
 80052c0:	fb00 f303 	mul.w	r3, r0, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	3360      	adds	r3, #96	; 0x60
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f005 fbbb 	bl	800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d12b      	bne.n	8005332 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	212c      	movs	r1, #44	; 0x2c
 80052e0:	fb01 f303 	mul.w	r3, r1, r3
 80052e4:	4413      	add	r3, r2
 80052e6:	3348      	adds	r3, #72	; 0x48
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	202c      	movs	r0, #44	; 0x2c
 80052f0:	fb00 f202 	mul.w	r2, r0, r2
 80052f4:	440a      	add	r2, r1
 80052f6:	3240      	adds	r2, #64	; 0x40
 80052f8:	8812      	ldrh	r2, [r2, #0]
 80052fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 81be 	beq.w	8005684 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	212c      	movs	r1, #44	; 0x2c
 800530e:	fb01 f303 	mul.w	r3, r1, r3
 8005312:	4413      	add	r3, r2
 8005314:	3354      	adds	r3, #84	; 0x54
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	f083 0301 	eor.w	r3, r3, #1
 800531c:	b2d8      	uxtb	r0, r3
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	212c      	movs	r1, #44	; 0x2c
 8005324:	fb01 f303 	mul.w	r3, r1, r3
 8005328:	4413      	add	r3, r2
 800532a:	3354      	adds	r3, #84	; 0x54
 800532c:	4602      	mov	r2, r0
 800532e:	701a      	strb	r2, [r3, #0]
}
 8005330:	e1a8      	b.n	8005684 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	212c      	movs	r1, #44	; 0x2c
 8005338:	fb01 f303 	mul.w	r3, r1, r3
 800533c:	4413      	add	r3, r2
 800533e:	3354      	adds	r3, #84	; 0x54
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	f083 0301 	eor.w	r3, r3, #1
 8005346:	b2d8      	uxtb	r0, r3
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	212c      	movs	r1, #44	; 0x2c
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	4413      	add	r3, r2
 8005354:	3354      	adds	r3, #84	; 0x54
 8005356:	4602      	mov	r2, r0
 8005358:	701a      	strb	r2, [r3, #0]
}
 800535a:	e193      	b.n	8005684 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b02      	cmp	r3, #2
 8005370:	f040 8106 	bne.w	8005580 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4413      	add	r3, r2
 800537c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	440a      	add	r2, r1
 800538a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800538e:	f023 0302 	bic.w	r3, r3, #2
 8005392:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	212c      	movs	r1, #44	; 0x2c
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	4413      	add	r3, r2
 80053a0:	3361      	adds	r3, #97	; 0x61
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d109      	bne.n	80053bc <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	212c      	movs	r1, #44	; 0x2c
 80053ae:	fb01 f303 	mul.w	r3, r1, r3
 80053b2:	4413      	add	r3, r2
 80053b4:	3360      	adds	r3, #96	; 0x60
 80053b6:	2201      	movs	r2, #1
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e0c9      	b.n	8005550 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	212c      	movs	r1, #44	; 0x2c
 80053c2:	fb01 f303 	mul.w	r3, r1, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	3361      	adds	r3, #97	; 0x61
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b05      	cmp	r3, #5
 80053ce:	d109      	bne.n	80053e4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	212c      	movs	r1, #44	; 0x2c
 80053d6:	fb01 f303 	mul.w	r3, r1, r3
 80053da:	4413      	add	r3, r2
 80053dc:	3360      	adds	r3, #96	; 0x60
 80053de:	2205      	movs	r2, #5
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e0b5      	b.n	8005550 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	212c      	movs	r1, #44	; 0x2c
 80053ea:	fb01 f303 	mul.w	r3, r1, r3
 80053ee:	4413      	add	r3, r2
 80053f0:	3361      	adds	r3, #97	; 0x61
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b06      	cmp	r3, #6
 80053f6:	d009      	beq.n	800540c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	212c      	movs	r1, #44	; 0x2c
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	4413      	add	r3, r2
 8005404:	3361      	adds	r3, #97	; 0x61
 8005406:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005408:	2b08      	cmp	r3, #8
 800540a:	d150      	bne.n	80054ae <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	212c      	movs	r1, #44	; 0x2c
 8005412:	fb01 f303 	mul.w	r3, r1, r3
 8005416:	4413      	add	r3, r2
 8005418:	335c      	adds	r3, #92	; 0x5c
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	202c      	movs	r0, #44	; 0x2c
 8005424:	fb00 f303 	mul.w	r3, r0, r3
 8005428:	440b      	add	r3, r1
 800542a:	335c      	adds	r3, #92	; 0x5c
 800542c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	212c      	movs	r1, #44	; 0x2c
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	4413      	add	r3, r2
 800543a:	335c      	adds	r3, #92	; 0x5c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d912      	bls.n	8005468 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	212c      	movs	r1, #44	; 0x2c
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	335c      	adds	r3, #92	; 0x5c
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	212c      	movs	r1, #44	; 0x2c
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	4413      	add	r3, r2
 8005460:	3360      	adds	r3, #96	; 0x60
 8005462:	2204      	movs	r2, #4
 8005464:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005466:	e073      	b.n	8005550 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	212c      	movs	r1, #44	; 0x2c
 800546e:	fb01 f303 	mul.w	r3, r1, r3
 8005472:	4413      	add	r3, r2
 8005474:	3360      	adds	r3, #96	; 0x60
 8005476:	2202      	movs	r2, #2
 8005478:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005490:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005498:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	461a      	mov	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054ac:	e050      	b.n	8005550 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	212c      	movs	r1, #44	; 0x2c
 80054b4:	fb01 f303 	mul.w	r3, r1, r3
 80054b8:	4413      	add	r3, r2
 80054ba:	3361      	adds	r3, #97	; 0x61
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d122      	bne.n	8005508 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	212c      	movs	r1, #44	; 0x2c
 80054c8:	fb01 f303 	mul.w	r3, r1, r3
 80054cc:	4413      	add	r3, r2
 80054ce:	3360      	adds	r3, #96	; 0x60
 80054d0:	2202      	movs	r2, #2
 80054d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005500:	461a      	mov	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	e023      	b.n	8005550 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	3361      	adds	r3, #97	; 0x61
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b07      	cmp	r3, #7
 800551a:	d119      	bne.n	8005550 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	212c      	movs	r1, #44	; 0x2c
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	4413      	add	r3, r2
 8005528:	335c      	adds	r3, #92	; 0x5c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	202c      	movs	r0, #44	; 0x2c
 8005534:	fb00 f303 	mul.w	r3, r0, r3
 8005538:	440b      	add	r3, r1
 800553a:	335c      	adds	r3, #92	; 0x5c
 800553c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	212c      	movs	r1, #44	; 0x2c
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	4413      	add	r3, r2
 800554a:	3360      	adds	r3, #96	; 0x60
 800554c:	2204      	movs	r2, #4
 800554e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4413      	add	r3, r2
 8005558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555c:	461a      	mov	r2, r3
 800555e:	2302      	movs	r3, #2
 8005560:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	b2d9      	uxtb	r1, r3
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	202c      	movs	r0, #44	; 0x2c
 800556c:	fb00 f303 	mul.w	r3, r0, r3
 8005570:	4413      	add	r3, r2
 8005572:	3360      	adds	r3, #96	; 0x60
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f005 fa65 	bl	800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800557e:	e081      	b.n	8005684 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	4413      	add	r3, r2
 8005588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 0310 	and.w	r3, r3, #16
 8005592:	2b10      	cmp	r3, #16
 8005594:	d176      	bne.n	8005684 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	212c      	movs	r1, #44	; 0x2c
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	333f      	adds	r3, #63	; 0x3f
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d121      	bne.n	80055ee <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	212c      	movs	r1, #44	; 0x2c
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	335c      	adds	r3, #92	; 0x5c
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d6:	f043 0302 	orr.w	r3, r3, #2
 80055da:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f003 f871 	bl	80086ce <USB_HC_Halt>
 80055ec:	e041      	b.n	8005672 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	212c      	movs	r1, #44	; 0x2c
 80055f4:	fb01 f303 	mul.w	r3, r1, r3
 80055f8:	4413      	add	r3, r2
 80055fa:	333f      	adds	r3, #63	; 0x3f
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	212c      	movs	r1, #44	; 0x2c
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	4413      	add	r3, r2
 800560e:	333f      	adds	r3, #63	; 0x3f
 8005610:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005612:	2b02      	cmp	r3, #2
 8005614:	d12d      	bne.n	8005672 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	212c      	movs	r1, #44	; 0x2c
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	4413      	add	r3, r2
 8005622:	335c      	adds	r3, #92	; 0x5c
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d120      	bne.n	8005672 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	212c      	movs	r1, #44	; 0x2c
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	4413      	add	r3, r2
 800563c:	3361      	adds	r3, #97	; 0x61
 800563e:	2203      	movs	r2, #3
 8005640:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	440a      	add	r2, r1
 8005658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800565c:	f043 0302 	orr.w	r3, r3, #2
 8005660:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	4611      	mov	r1, r2
 800566c:	4618      	mov	r0, r3
 800566e:	f003 f82e 	bl	80086ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4413      	add	r3, r2
 800567a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567e:	461a      	mov	r2, r3
 8005680:	2310      	movs	r3, #16
 8005682:	6093      	str	r3, [r2, #8]
}
 8005684:	bf00      	nop
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d119      	bne.n	80056f0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c8:	461a      	mov	r2, r3
 80056ca:	2304      	movs	r3, #4
 80056cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80056ee:	e3c6      	b.n	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b20      	cmp	r3, #32
 8005704:	d13e      	bne.n	8005784 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	461a      	mov	r2, r3
 8005714:	2320      	movs	r3, #32
 8005716:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	212c      	movs	r1, #44	; 0x2c
 800571e:	fb01 f303 	mul.w	r3, r1, r3
 8005722:	4413      	add	r3, r2
 8005724:	333d      	adds	r3, #61	; 0x3d
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b01      	cmp	r3, #1
 800572a:	f040 83a8 	bne.w	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	212c      	movs	r1, #44	; 0x2c
 8005734:	fb01 f303 	mul.w	r3, r1, r3
 8005738:	4413      	add	r3, r2
 800573a:	333d      	adds	r3, #61	; 0x3d
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	212c      	movs	r1, #44	; 0x2c
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	4413      	add	r3, r2
 800574c:	3360      	adds	r3, #96	; 0x60
 800574e:	2202      	movs	r2, #2
 8005750:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	4413      	add	r3, r2
 800575a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	440a      	add	r2, r1
 8005768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800576c:	f043 0302 	orr.w	r3, r3, #2
 8005770:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	4611      	mov	r1, r2
 800577c:	4618      	mov	r0, r3
 800577e:	f002 ffa6 	bl	80086ce <USB_HC_Halt>
}
 8005782:	e37c      	b.n	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579a:	d122      	bne.n	80057e2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057b6:	f043 0302 	orr.w	r3, r3, #2
 80057ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	4611      	mov	r1, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f002 ff81 	bl	80086ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d8:	461a      	mov	r2, r3
 80057da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057de:	6093      	str	r3, [r2, #8]
}
 80057e0:	e34d      	b.n	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d150      	bne.n	800589a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	212c      	movs	r1, #44	; 0x2c
 80057fe:	fb01 f303 	mul.w	r3, r1, r3
 8005802:	4413      	add	r3, r2
 8005804:	335c      	adds	r3, #92	; 0x5c
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	4413      	add	r3, r2
 8005812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d111      	bne.n	8005844 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	212c      	movs	r1, #44	; 0x2c
 8005826:	fb01 f303 	mul.w	r3, r1, r3
 800582a:	4413      	add	r3, r2
 800582c:	333d      	adds	r3, #61	; 0x3d
 800582e:	2201      	movs	r2, #1
 8005830:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	461a      	mov	r2, r3
 8005840:	2340      	movs	r3, #64	; 0x40
 8005842:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	440a      	add	r2, r1
 800585a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800585e:	f043 0302 	orr.w	r3, r3, #2
 8005862:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f002 ff2d 	bl	80086ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	461a      	mov	r2, r3
 8005882:	2301      	movs	r3, #1
 8005884:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	212c      	movs	r1, #44	; 0x2c
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	3361      	adds	r3, #97	; 0x61
 8005894:	2201      	movs	r2, #1
 8005896:	701a      	strb	r2, [r3, #0]
}
 8005898:	e2f1      	b.n	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d13c      	bne.n	800592a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	212c      	movs	r1, #44	; 0x2c
 80058b6:	fb01 f303 	mul.w	r3, r1, r3
 80058ba:	4413      	add	r3, r2
 80058bc:	3361      	adds	r3, #97	; 0x61
 80058be:	2204      	movs	r2, #4
 80058c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	212c      	movs	r1, #44	; 0x2c
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	4413      	add	r3, r2
 80058ce:	333d      	adds	r3, #61	; 0x3d
 80058d0:	2201      	movs	r2, #1
 80058d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	212c      	movs	r1, #44	; 0x2c
 80058da:	fb01 f303 	mul.w	r3, r1, r3
 80058de:	4413      	add	r3, r2
 80058e0:	335c      	adds	r3, #92	; 0x5c
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005900:	f043 0302 	orr.w	r3, r3, #2
 8005904:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f002 fedc 	bl	80086ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	461a      	mov	r2, r3
 8005924:	2340      	movs	r3, #64	; 0x40
 8005926:	6093      	str	r3, [r2, #8]
}
 8005928:	e2a9      	b.n	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0308 	and.w	r3, r3, #8
 800593c:	2b08      	cmp	r3, #8
 800593e:	d12a      	bne.n	8005996 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	4413      	add	r3, r2
 8005948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594c:	461a      	mov	r2, r3
 800594e:	2308      	movs	r3, #8
 8005950:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	440a      	add	r2, r1
 8005968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596c:	f043 0302 	orr.w	r3, r3, #2
 8005970:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	4611      	mov	r1, r2
 800597c:	4618      	mov	r0, r3
 800597e:	f002 fea6 	bl	80086ce <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	212c      	movs	r1, #44	; 0x2c
 8005988:	fb01 f303 	mul.w	r3, r1, r3
 800598c:	4413      	add	r3, r2
 800598e:	3361      	adds	r3, #97	; 0x61
 8005990:	2205      	movs	r2, #5
 8005992:	701a      	strb	r2, [r3, #0]
}
 8005994:	e273      	b.n	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d150      	bne.n	8005a4e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	212c      	movs	r1, #44	; 0x2c
 80059b2:	fb01 f303 	mul.w	r3, r1, r3
 80059b6:	4413      	add	r3, r2
 80059b8:	335c      	adds	r3, #92	; 0x5c
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	212c      	movs	r1, #44	; 0x2c
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	3361      	adds	r3, #97	; 0x61
 80059cc:	2203      	movs	r2, #3
 80059ce:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	212c      	movs	r1, #44	; 0x2c
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	4413      	add	r3, r2
 80059dc:	333d      	adds	r3, #61	; 0x3d
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d112      	bne.n	8005a0a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	212c      	movs	r1, #44	; 0x2c
 80059ea:	fb01 f303 	mul.w	r3, r1, r3
 80059ee:	4413      	add	r3, r2
 80059f0:	333c      	adds	r3, #60	; 0x3c
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d108      	bne.n	8005a0a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	212c      	movs	r1, #44	; 0x2c
 80059fe:	fb01 f303 	mul.w	r3, r1, r3
 8005a02:	4413      	add	r3, r2
 8005a04:	333d      	adds	r3, #61	; 0x3d
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a24:	f043 0302 	orr.w	r3, r3, #2
 8005a28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	4611      	mov	r1, r2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f002 fe4a 	bl	80086ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a46:	461a      	mov	r2, r3
 8005a48:	2310      	movs	r3, #16
 8005a4a:	6093      	str	r3, [r2, #8]
}
 8005a4c:	e217      	b.n	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d174      	bne.n	8005b4e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d121      	bne.n	8005ab0 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	212c      	movs	r1, #44	; 0x2c
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	3361      	adds	r3, #97	; 0x61
 8005a7a:	2206      	movs	r2, #6
 8005a7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a98:	f043 0302 	orr.w	r3, r3, #2
 8005a9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f002 fe10 	bl	80086ce <USB_HC_Halt>
 8005aae:	e044      	b.n	8005b3a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	212c      	movs	r1, #44	; 0x2c
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	335c      	adds	r3, #92	; 0x5c
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	202c      	movs	r0, #44	; 0x2c
 8005ac8:	fb00 f303 	mul.w	r3, r0, r3
 8005acc:	440b      	add	r3, r1
 8005ace:	335c      	adds	r3, #92	; 0x5c
 8005ad0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	212c      	movs	r1, #44	; 0x2c
 8005ad8:	fb01 f303 	mul.w	r3, r1, r3
 8005adc:	4413      	add	r3, r2
 8005ade:	335c      	adds	r3, #92	; 0x5c
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d920      	bls.n	8005b28 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	212c      	movs	r1, #44	; 0x2c
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	4413      	add	r3, r2
 8005af2:	335c      	adds	r3, #92	; 0x5c
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	212c      	movs	r1, #44	; 0x2c
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
 8005b02:	4413      	add	r3, r2
 8005b04:	3360      	adds	r3, #96	; 0x60
 8005b06:	2204      	movs	r2, #4
 8005b08:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	b2d9      	uxtb	r1, r3
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	202c      	movs	r0, #44	; 0x2c
 8005b14:	fb00 f303 	mul.w	r3, r0, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	3360      	adds	r3, #96	; 0x60
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f004 ff91 	bl	800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b26:	e008      	b.n	8005b3a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	212c      	movs	r1, #44	; 0x2c
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	3360      	adds	r3, #96	; 0x60
 8005b36:	2202      	movs	r2, #2
 8005b38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b46:	461a      	mov	r2, r3
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	6093      	str	r3, [r2, #8]
}
 8005b4c:	e197      	b.n	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b64:	d134      	bne.n	8005bd0 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b80:	f043 0302 	orr.w	r3, r3, #2
 8005b84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f002 fd9c 	bl	80086ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	212c      	movs	r1, #44	; 0x2c
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3361      	adds	r3, #97	; 0x61
 8005bca:	2208      	movs	r2, #8
 8005bcc:	701a      	strb	r2, [r3, #0]
}
 8005bce:	e156      	b.n	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	f040 814b 	bne.w	8005e7e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c02:	f023 0302 	bic.w	r3, r3, #2
 8005c06:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	212c      	movs	r1, #44	; 0x2c
 8005c0e:	fb01 f303 	mul.w	r3, r1, r3
 8005c12:	4413      	add	r3, r2
 8005c14:	3361      	adds	r3, #97	; 0x61
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d179      	bne.n	8005d10 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	212c      	movs	r1, #44	; 0x2c
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	3360      	adds	r3, #96	; 0x60
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	212c      	movs	r1, #44	; 0x2c
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	4413      	add	r3, r2
 8005c3a:	333f      	adds	r3, #63	; 0x3f
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d00a      	beq.n	8005c58 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	212c      	movs	r1, #44	; 0x2c
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	333f      	adds	r3, #63	; 0x3f
 8005c50:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	f040 80fc 	bne.w	8005e50 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d142      	bne.n	8005ce6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	212c      	movs	r1, #44	; 0x2c
 8005c66:	fb01 f303 	mul.w	r3, r1, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	334c      	adds	r3, #76	; 0x4c
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 80ed 	beq.w	8005e50 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	212c      	movs	r1, #44	; 0x2c
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	4413      	add	r3, r2
 8005c82:	334c      	adds	r3, #76	; 0x4c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	202c      	movs	r0, #44	; 0x2c
 8005c8c:	fb00 f202 	mul.w	r2, r0, r2
 8005c90:	440a      	add	r2, r1
 8005c92:	3240      	adds	r2, #64	; 0x40
 8005c94:	8812      	ldrh	r2, [r2, #0]
 8005c96:	4413      	add	r3, r2
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	6879      	ldr	r1, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	202c      	movs	r0, #44	; 0x2c
 8005ca0:	fb00 f202 	mul.w	r2, r0, r2
 8005ca4:	440a      	add	r2, r1
 8005ca6:	3240      	adds	r2, #64	; 0x40
 8005ca8:	8812      	ldrh	r2, [r2, #0]
 8005caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 80ca 	beq.w	8005e50 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	212c      	movs	r1, #44	; 0x2c
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3355      	adds	r3, #85	; 0x55
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f083 0301 	eor.w	r3, r3, #1
 8005cd0:	b2d8      	uxtb	r0, r3
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	212c      	movs	r1, #44	; 0x2c
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	4413      	add	r3, r2
 8005cde:	3355      	adds	r3, #85	; 0x55
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	e0b4      	b.n	8005e50 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	212c      	movs	r1, #44	; 0x2c
 8005cec:	fb01 f303 	mul.w	r3, r1, r3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3355      	adds	r3, #85	; 0x55
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f083 0301 	eor.w	r3, r3, #1
 8005cfa:	b2d8      	uxtb	r0, r3
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	212c      	movs	r1, #44	; 0x2c
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	4413      	add	r3, r2
 8005d08:	3355      	adds	r3, #85	; 0x55
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e09f      	b.n	8005e50 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	212c      	movs	r1, #44	; 0x2c
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3361      	adds	r3, #97	; 0x61
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d109      	bne.n	8005d38 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	212c      	movs	r1, #44	; 0x2c
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	3360      	adds	r3, #96	; 0x60
 8005d32:	2202      	movs	r2, #2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e08b      	b.n	8005e50 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	212c      	movs	r1, #44	; 0x2c
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	3361      	adds	r3, #97	; 0x61
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d109      	bne.n	8005d60 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	212c      	movs	r1, #44	; 0x2c
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	3360      	adds	r3, #96	; 0x60
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e077      	b.n	8005e50 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	212c      	movs	r1, #44	; 0x2c
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3361      	adds	r3, #97	; 0x61
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b05      	cmp	r3, #5
 8005d72:	d109      	bne.n	8005d88 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	212c      	movs	r1, #44	; 0x2c
 8005d7a:	fb01 f303 	mul.w	r3, r1, r3
 8005d7e:	4413      	add	r3, r2
 8005d80:	3360      	adds	r3, #96	; 0x60
 8005d82:	2205      	movs	r2, #5
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	e063      	b.n	8005e50 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	212c      	movs	r1, #44	; 0x2c
 8005d8e:	fb01 f303 	mul.w	r3, r1, r3
 8005d92:	4413      	add	r3, r2
 8005d94:	3361      	adds	r3, #97	; 0x61
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b06      	cmp	r3, #6
 8005d9a:	d009      	beq.n	8005db0 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	212c      	movs	r1, #44	; 0x2c
 8005da2:	fb01 f303 	mul.w	r3, r1, r3
 8005da6:	4413      	add	r3, r2
 8005da8:	3361      	adds	r3, #97	; 0x61
 8005daa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d14f      	bne.n	8005e50 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	212c      	movs	r1, #44	; 0x2c
 8005db6:	fb01 f303 	mul.w	r3, r1, r3
 8005dba:	4413      	add	r3, r2
 8005dbc:	335c      	adds	r3, #92	; 0x5c
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	202c      	movs	r0, #44	; 0x2c
 8005dc8:	fb00 f303 	mul.w	r3, r0, r3
 8005dcc:	440b      	add	r3, r1
 8005dce:	335c      	adds	r3, #92	; 0x5c
 8005dd0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	212c      	movs	r1, #44	; 0x2c
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	4413      	add	r3, r2
 8005dde:	335c      	adds	r3, #92	; 0x5c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d912      	bls.n	8005e0c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	212c      	movs	r1, #44	; 0x2c
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	4413      	add	r3, r2
 8005df2:	335c      	adds	r3, #92	; 0x5c
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	212c      	movs	r1, #44	; 0x2c
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	4413      	add	r3, r2
 8005e04:	3360      	adds	r3, #96	; 0x60
 8005e06:	2204      	movs	r2, #4
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	e021      	b.n	8005e50 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	212c      	movs	r1, #44	; 0x2c
 8005e12:	fb01 f303 	mul.w	r3, r1, r3
 8005e16:	4413      	add	r3, r2
 8005e18:	3360      	adds	r3, #96	; 0x60
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e34:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e3c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2302      	movs	r3, #2
 8005e60:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	b2d9      	uxtb	r1, r3
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	202c      	movs	r0, #44	; 0x2c
 8005e6c:	fb00 f303 	mul.w	r3, r0, r3
 8005e70:	4413      	add	r3, r2
 8005e72:	3360      	adds	r3, #96	; 0x60
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f004 fde5 	bl	800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005e7e:	bf00      	nop
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b08a      	sub	sp, #40	; 0x28
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	0c5b      	lsrs	r3, r3, #17
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d004      	beq.n	8005ecc <HCD_RXQLVL_IRQHandler+0x46>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	f000 80a9 	beq.w	800601c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005eca:	e0aa      	b.n	8006022 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80a6 	beq.w	8006020 <HCD_RXQLVL_IRQHandler+0x19a>
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	212c      	movs	r1, #44	; 0x2c
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	3344      	adds	r3, #68	; 0x44
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 809b 	beq.w	8006020 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	212c      	movs	r1, #44	; 0x2c
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3350      	adds	r3, #80	; 0x50
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	441a      	add	r2, r3
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	202c      	movs	r0, #44	; 0x2c
 8005f04:	fb00 f303 	mul.w	r3, r0, r3
 8005f08:	440b      	add	r3, r1
 8005f0a:	334c      	adds	r3, #76	; 0x4c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d87a      	bhi.n	8006008 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	212c      	movs	r1, #44	; 0x2c
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	4413      	add	r3, r2
 8005f22:	3344      	adds	r3, #68	; 0x44
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	b292      	uxth	r2, r2
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	f001 ff6d 	bl	8007e0a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	212c      	movs	r1, #44	; 0x2c
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3344      	adds	r3, #68	; 0x44
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	441a      	add	r2, r3
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	202c      	movs	r0, #44	; 0x2c
 8005f4a:	fb00 f303 	mul.w	r3, r0, r3
 8005f4e:	440b      	add	r3, r1
 8005f50:	3344      	adds	r3, #68	; 0x44
 8005f52:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	212c      	movs	r1, #44	; 0x2c
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	4413      	add	r3, r2
 8005f60:	3350      	adds	r3, #80	; 0x50
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	441a      	add	r2, r3
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	202c      	movs	r0, #44	; 0x2c
 8005f6e:	fb00 f303 	mul.w	r3, r0, r3
 8005f72:	440b      	add	r3, r1
 8005f74:	3350      	adds	r3, #80	; 0x50
 8005f76:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	0cdb      	lsrs	r3, r3, #19
 8005f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f8c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	212c      	movs	r1, #44	; 0x2c
 8005f94:	fb01 f303 	mul.w	r3, r1, r3
 8005f98:	4413      	add	r3, r2
 8005f9a:	3340      	adds	r3, #64	; 0x40
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d13c      	bne.n	8006020 <HCD_RXQLVL_IRQHandler+0x19a>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d039      	beq.n	8006020 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fc2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fca:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	212c      	movs	r1, #44	; 0x2c
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	4413      	add	r3, r2
 8005fea:	3354      	adds	r3, #84	; 0x54
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	f083 0301 	eor.w	r3, r3, #1
 8005ff2:	b2d8      	uxtb	r0, r3
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	212c      	movs	r1, #44	; 0x2c
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	3354      	adds	r3, #84	; 0x54
 8006002:	4602      	mov	r2, r0
 8006004:	701a      	strb	r2, [r3, #0]
      break;
 8006006:	e00b      	b.n	8006020 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	212c      	movs	r1, #44	; 0x2c
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	3360      	adds	r3, #96	; 0x60
 8006016:	2204      	movs	r2, #4
 8006018:	701a      	strb	r2, [r3, #0]
      break;
 800601a:	e001      	b.n	8006020 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800601c:	bf00      	nop
 800601e:	e000      	b.n	8006022 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006020:	bf00      	nop
  }
}
 8006022:	bf00      	nop
 8006024:	3728      	adds	r7, #40	; 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b086      	sub	sp, #24
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006056:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b02      	cmp	r3, #2
 8006060:	d10b      	bne.n	800607a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b01      	cmp	r3, #1
 800606a:	d102      	bne.n	8006072 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f004 fccf 	bl	800aa10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f043 0302 	orr.w	r3, r3, #2
 8006078:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b08      	cmp	r3, #8
 8006082:	d132      	bne.n	80060ea <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f043 0308 	orr.w	r3, r3, #8
 800608a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 0304 	and.w	r3, r3, #4
 8006092:	2b04      	cmp	r3, #4
 8006094:	d126      	bne.n	80060e4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d113      	bne.n	80060c6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060a8:	d106      	bne.n	80060b8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2102      	movs	r1, #2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 ffe5 	bl	8008080 <USB_InitFSLSPClkSel>
 80060b6:	e011      	b.n	80060dc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2101      	movs	r1, #1
 80060be:	4618      	mov	r0, r3
 80060c0:	f001 ffde 	bl	8008080 <USB_InitFSLSPClkSel>
 80060c4:	e00a      	b.n	80060dc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d106      	bne.n	80060dc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d4:	461a      	mov	r2, r3
 80060d6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80060da:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f004 fcc1 	bl	800aa64 <HAL_HCD_PortEnabled_Callback>
 80060e2:	e002      	b.n	80060ea <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f004 fccb 	bl	800aa80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d103      	bne.n	80060fc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f043 0320 	orr.w	r3, r3, #32
 80060fa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006102:	461a      	mov	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6013      	str	r3, [r2, #0]
}
 8006108:	bf00      	nop
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e128      	b.n	8006374 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a90      	ldr	r2, [pc, #576]	; (800637c <HAL_I2S_Init+0x26c>)
 800613a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fc fcab 	bl	8002a98 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2202      	movs	r2, #2
 8006146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006158:	f023 030f 	bic.w	r3, r3, #15
 800615c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2202      	movs	r2, #2
 8006164:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d060      	beq.n	8006230 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d102      	bne.n	800617c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006176:	2310      	movs	r3, #16
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	e001      	b.n	8006180 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800617c:	2320      	movs	r3, #32
 800617e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b20      	cmp	r3, #32
 8006186:	d802      	bhi.n	800618e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800618e:	2001      	movs	r0, #1
 8006190:	f001 f980 	bl	8007494 <HAL_RCCEx_GetPeriphCLKFreq>
 8006194:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619e:	d125      	bne.n	80061ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d010      	beq.n	80061ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	461a      	mov	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	3305      	adds	r3, #5
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	e01f      	b.n	800620a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80061d4:	4613      	mov	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	461a      	mov	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e6:	3305      	adds	r3, #5
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	e00e      	b.n	800620a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	461a      	mov	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	fbb2 f3f3 	udiv	r3, r2, r3
 8006206:	3305      	adds	r3, #5
 8006208:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4a5c      	ldr	r2, [pc, #368]	; (8006380 <HAL_I2S_Init+0x270>)
 800620e:	fba2 2303 	umull	r2, r3, r2, r3
 8006212:	08db      	lsrs	r3, r3, #3
 8006214:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	e003      	b.n	8006238 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006230:	2302      	movs	r3, #2
 8006232:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d902      	bls.n	8006244 <HAL_I2S_Init+0x134>
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2bff      	cmp	r3, #255	; 0xff
 8006242:	d907      	bls.n	8006254 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006248:	f043 0210 	orr.w	r2, r3, #16
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e08f      	b.n	8006374 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	ea42 0103 	orr.w	r1, r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	430a      	orrs	r2, r1
 8006266:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006272:	f023 030f 	bic.w	r3, r3, #15
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6851      	ldr	r1, [r2, #4]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6892      	ldr	r2, [r2, #8]
 800627e:	4311      	orrs	r1, r2
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68d2      	ldr	r2, [r2, #12]
 8006284:	4311      	orrs	r1, r2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6992      	ldr	r2, [r2, #24]
 800628a:	430a      	orrs	r2, r1
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006296:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d161      	bne.n	8006364 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a38      	ldr	r2, [pc, #224]	; (8006384 <HAL_I2S_Init+0x274>)
 80062a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a37      	ldr	r2, [pc, #220]	; (8006388 <HAL_I2S_Init+0x278>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d101      	bne.n	80062b4 <HAL_I2S_Init+0x1a4>
 80062b0:	4b36      	ldr	r3, [pc, #216]	; (800638c <HAL_I2S_Init+0x27c>)
 80062b2:	e001      	b.n	80062b8 <HAL_I2S_Init+0x1a8>
 80062b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	4932      	ldr	r1, [pc, #200]	; (8006388 <HAL_I2S_Init+0x278>)
 80062c0:	428a      	cmp	r2, r1
 80062c2:	d101      	bne.n	80062c8 <HAL_I2S_Init+0x1b8>
 80062c4:	4a31      	ldr	r2, [pc, #196]	; (800638c <HAL_I2S_Init+0x27c>)
 80062c6:	e001      	b.n	80062cc <HAL_I2S_Init+0x1bc>
 80062c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80062cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80062d0:	f023 030f 	bic.w	r3, r3, #15
 80062d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a2b      	ldr	r2, [pc, #172]	; (8006388 <HAL_I2S_Init+0x278>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d101      	bne.n	80062e4 <HAL_I2S_Init+0x1d4>
 80062e0:	4b2a      	ldr	r3, [pc, #168]	; (800638c <HAL_I2S_Init+0x27c>)
 80062e2:	e001      	b.n	80062e8 <HAL_I2S_Init+0x1d8>
 80062e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062e8:	2202      	movs	r2, #2
 80062ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a25      	ldr	r2, [pc, #148]	; (8006388 <HAL_I2S_Init+0x278>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <HAL_I2S_Init+0x1ea>
 80062f6:	4b25      	ldr	r3, [pc, #148]	; (800638c <HAL_I2S_Init+0x27c>)
 80062f8:	e001      	b.n	80062fe <HAL_I2S_Init+0x1ee>
 80062fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800630a:	d003      	beq.n	8006314 <HAL_I2S_Init+0x204>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d103      	bne.n	800631c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006318:	613b      	str	r3, [r7, #16]
 800631a:	e001      	b.n	8006320 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800631c:	2300      	movs	r3, #0
 800631e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800632a:	4313      	orrs	r3, r2
 800632c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006334:	4313      	orrs	r3, r2
 8006336:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800633e:	4313      	orrs	r3, r2
 8006340:	b29a      	uxth	r2, r3
 8006342:	897b      	ldrh	r3, [r7, #10]
 8006344:	4313      	orrs	r3, r2
 8006346:	b29b      	uxth	r3, r3
 8006348:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800634c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a0d      	ldr	r2, [pc, #52]	; (8006388 <HAL_I2S_Init+0x278>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d101      	bne.n	800635c <HAL_I2S_Init+0x24c>
 8006358:	4b0c      	ldr	r3, [pc, #48]	; (800638c <HAL_I2S_Init+0x27c>)
 800635a:	e001      	b.n	8006360 <HAL_I2S_Init+0x250>
 800635c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006360:	897a      	ldrh	r2, [r7, #10]
 8006362:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3720      	adds	r7, #32
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	08006487 	.word	0x08006487
 8006380:	cccccccd 	.word	0xcccccccd
 8006384:	0800659d 	.word	0x0800659d
 8006388:	40003800 	.word	0x40003800
 800638c:	40003400 	.word	0x40003400

08006390 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	881a      	ldrh	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	1c9a      	adds	r2, r3, #2
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10e      	bne.n	8006420 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006410:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff ffb8 	bl	8006390 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	b292      	uxth	r2, r2
 800643c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006442:	1c9a      	adds	r2, r3, #2
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10e      	bne.n	800647e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800646e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff ff93 	bl	80063a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b086      	sub	sp, #24
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d13a      	bne.n	8006518 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d109      	bne.n	80064c0 <I2S_IRQHandler+0x3a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	d102      	bne.n	80064c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff ffb4 	bl	8006428 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c6:	2b40      	cmp	r3, #64	; 0x40
 80064c8:	d126      	bne.n	8006518 <I2S_IRQHandler+0x92>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d11f      	bne.n	8006518 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650a:	f043 0202 	orr.w	r2, r3, #2
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ff50 	bl	80063b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b03      	cmp	r3, #3
 8006522:	d136      	bne.n	8006592 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b02      	cmp	r3, #2
 800652c:	d109      	bne.n	8006542 <I2S_IRQHandler+0xbc>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d102      	bne.n	8006542 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff ff45 	bl	80063cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b08      	cmp	r3, #8
 800654a:	d122      	bne.n	8006592 <I2S_IRQHandler+0x10c>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b20      	cmp	r3, #32
 8006558:	d11b      	bne.n	8006592 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006568:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006584:	f043 0204 	orr.w	r2, r3, #4
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ff13 	bl	80063b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006592:	bf00      	nop
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4aa2      	ldr	r2, [pc, #648]	; (800683c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d101      	bne.n	80065ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80065b6:	4ba2      	ldr	r3, [pc, #648]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065b8:	e001      	b.n	80065be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80065ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a9b      	ldr	r2, [pc, #620]	; (800683c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d101      	bne.n	80065d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80065d4:	4b9a      	ldr	r3, [pc, #616]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065d6:	e001      	b.n	80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80065d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e8:	d004      	beq.n	80065f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f040 8099 	bne.w	8006726 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d107      	bne.n	800660e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f925 	bl	8006858 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	d107      	bne.n	8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f9c8 	bl	80069b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662e:	2b40      	cmp	r3, #64	; 0x40
 8006630:	d13a      	bne.n	80066a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d035      	beq.n	80066a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a7e      	ldr	r2, [pc, #504]	; (800683c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d101      	bne.n	800664a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006646:	4b7e      	ldr	r3, [pc, #504]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006648:	e001      	b.n	800664e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800664a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4979      	ldr	r1, [pc, #484]	; (800683c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006656:	428b      	cmp	r3, r1
 8006658:	d101      	bne.n	800665e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800665a:	4b79      	ldr	r3, [pc, #484]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800665c:	e001      	b.n	8006662 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800665e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006666:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006676:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	f043 0202 	orr.w	r2, r3, #2
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff fe88 	bl	80063b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	f040 80be 	bne.w	8006830 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 80b8 	beq.w	8006830 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a59      	ldr	r2, [pc, #356]	; (800683c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d101      	bne.n	80066de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80066da:	4b59      	ldr	r3, [pc, #356]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066dc:	e001      	b.n	80066e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80066de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4954      	ldr	r1, [pc, #336]	; (800683c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066ea:	428b      	cmp	r3, r1
 80066ec:	d101      	bne.n	80066f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80066ee:	4b54      	ldr	r3, [pc, #336]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066f0:	e001      	b.n	80066f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80066f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80066fc:	2300      	movs	r3, #0
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	60bb      	str	r3, [r7, #8]
 8006708:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006716:	f043 0204 	orr.w	r2, r3, #4
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f7ff fe4a 	bl	80063b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006724:	e084      	b.n	8006830 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b02      	cmp	r3, #2
 800672e:	d107      	bne.n	8006740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8be 	bl	80068bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b01      	cmp	r3, #1
 8006748:	d107      	bne.n	800675a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f8fd 	bl	8006954 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d12f      	bne.n	80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d02a      	beq.n	80067c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800677c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a2e      	ldr	r2, [pc, #184]	; (800683c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d101      	bne.n	800678c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006788:	4b2d      	ldr	r3, [pc, #180]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800678a:	e001      	b.n	8006790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800678c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4929      	ldr	r1, [pc, #164]	; (800683c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006798:	428b      	cmp	r3, r1
 800679a:	d101      	bne.n	80067a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800679c:	4b28      	ldr	r3, [pc, #160]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800679e:	e001      	b.n	80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80067a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	f043 0202 	orr.w	r2, r3, #2
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff fdfa 	bl	80063b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d131      	bne.n	8006832 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02c      	beq.n	8006832 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a17      	ldr	r2, [pc, #92]	; (800683c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d101      	bne.n	80067e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80067e2:	4b17      	ldr	r3, [pc, #92]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067e4:	e001      	b.n	80067ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80067e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4912      	ldr	r1, [pc, #72]	; (800683c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067f2:	428b      	cmp	r3, r1
 80067f4:	d101      	bne.n	80067fa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80067f6:	4b12      	ldr	r3, [pc, #72]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067f8:	e001      	b.n	80067fe <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80067fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006802:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006812:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006820:	f043 0204 	orr.w	r2, r3, #4
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff fdc5 	bl	80063b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800682e:	e000      	b.n	8006832 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006830:	bf00      	nop
}
 8006832:	bf00      	nop
 8006834:	3720      	adds	r7, #32
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	40003800 	.word	0x40003800
 8006840:	40003400 	.word	0x40003400

08006844 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	1c99      	adds	r1, r3, #2
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6251      	str	r1, [r2, #36]	; 0x24
 800686a:	881a      	ldrh	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d113      	bne.n	80068b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006898:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff ffc9 	bl	8006844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	1c99      	adds	r1, r3, #2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6251      	str	r1, [r2, #36]	; 0x24
 80068ce:	8819      	ldrh	r1, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1d      	ldr	r2, [pc, #116]	; (800694c <I2SEx_TxISR_I2SExt+0x90>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d101      	bne.n	80068de <I2SEx_TxISR_I2SExt+0x22>
 80068da:	4b1d      	ldr	r3, [pc, #116]	; (8006950 <I2SEx_TxISR_I2SExt+0x94>)
 80068dc:	e001      	b.n	80068e2 <I2SEx_TxISR_I2SExt+0x26>
 80068de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068e2:	460a      	mov	r2, r1
 80068e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d121      	bne.n	8006942 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a12      	ldr	r2, [pc, #72]	; (800694c <I2SEx_TxISR_I2SExt+0x90>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d101      	bne.n	800690c <I2SEx_TxISR_I2SExt+0x50>
 8006908:	4b11      	ldr	r3, [pc, #68]	; (8006950 <I2SEx_TxISR_I2SExt+0x94>)
 800690a:	e001      	b.n	8006910 <I2SEx_TxISR_I2SExt+0x54>
 800690c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	490d      	ldr	r1, [pc, #52]	; (800694c <I2SEx_TxISR_I2SExt+0x90>)
 8006918:	428b      	cmp	r3, r1
 800691a:	d101      	bne.n	8006920 <I2SEx_TxISR_I2SExt+0x64>
 800691c:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <I2SEx_TxISR_I2SExt+0x94>)
 800691e:	e001      	b.n	8006924 <I2SEx_TxISR_I2SExt+0x68>
 8006920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006924:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006928:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff ff81 	bl	8006844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40003800 	.word	0x40003800
 8006950:	40003400 	.word	0x40003400

08006954 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68d8      	ldr	r0, [r3, #12]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	1c99      	adds	r1, r3, #2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800696c:	b282      	uxth	r2, r0
 800696e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006982:	b29b      	uxth	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d113      	bne.n	80069b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006996:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff ff4a 	bl	8006844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a20      	ldr	r2, [pc, #128]	; (8006a48 <I2SEx_RxISR_I2SExt+0x90>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d101      	bne.n	80069ce <I2SEx_RxISR_I2SExt+0x16>
 80069ca:	4b20      	ldr	r3, [pc, #128]	; (8006a4c <I2SEx_RxISR_I2SExt+0x94>)
 80069cc:	e001      	b.n	80069d2 <I2SEx_RxISR_I2SExt+0x1a>
 80069ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069d2:	68d8      	ldr	r0, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	1c99      	adds	r1, r3, #2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80069de:	b282      	uxth	r2, r0
 80069e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d121      	bne.n	8006a3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a12      	ldr	r2, [pc, #72]	; (8006a48 <I2SEx_RxISR_I2SExt+0x90>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d101      	bne.n	8006a08 <I2SEx_RxISR_I2SExt+0x50>
 8006a04:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <I2SEx_RxISR_I2SExt+0x94>)
 8006a06:	e001      	b.n	8006a0c <I2SEx_RxISR_I2SExt+0x54>
 8006a08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	490d      	ldr	r1, [pc, #52]	; (8006a48 <I2SEx_RxISR_I2SExt+0x90>)
 8006a14:	428b      	cmp	r3, r1
 8006a16:	d101      	bne.n	8006a1c <I2SEx_RxISR_I2SExt+0x64>
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <I2SEx_RxISR_I2SExt+0x94>)
 8006a1a:	e001      	b.n	8006a20 <I2SEx_RxISR_I2SExt+0x68>
 8006a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff ff03 	bl	8006844 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a3e:	bf00      	nop
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40003800 	.word	0x40003800
 8006a4c:	40003400 	.word	0x40003400

08006a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e264      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d075      	beq.n	8006b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a6e:	4ba3      	ldr	r3, [pc, #652]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d00c      	beq.n	8006a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a7a:	4ba0      	ldr	r3, [pc, #640]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d112      	bne.n	8006aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a86:	4b9d      	ldr	r3, [pc, #628]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a92:	d10b      	bne.n	8006aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a94:	4b99      	ldr	r3, [pc, #612]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05b      	beq.n	8006b58 <HAL_RCC_OscConfig+0x108>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d157      	bne.n	8006b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e23f      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab4:	d106      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x74>
 8006ab6:	4b91      	ldr	r3, [pc, #580]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a90      	ldr	r2, [pc, #576]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e01d      	b.n	8006b00 <HAL_RCC_OscConfig+0xb0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006acc:	d10c      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x98>
 8006ace:	4b8b      	ldr	r3, [pc, #556]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a8a      	ldr	r2, [pc, #552]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	4b88      	ldr	r3, [pc, #544]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a87      	ldr	r2, [pc, #540]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e00b      	b.n	8006b00 <HAL_RCC_OscConfig+0xb0>
 8006ae8:	4b84      	ldr	r3, [pc, #528]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a83      	ldr	r2, [pc, #524]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	4b81      	ldr	r3, [pc, #516]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a80      	ldr	r2, [pc, #512]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d013      	beq.n	8006b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b08:	f7fc f95c 	bl	8002dc4 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b10:	f7fc f958 	bl	8002dc4 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b64      	cmp	r3, #100	; 0x64
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e204      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b22:	4b76      	ldr	r3, [pc, #472]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f0      	beq.n	8006b10 <HAL_RCC_OscConfig+0xc0>
 8006b2e:	e014      	b.n	8006b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b30:	f7fc f948 	bl	8002dc4 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b38:	f7fc f944 	bl	8002dc4 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b64      	cmp	r3, #100	; 0x64
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e1f0      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4a:	4b6c      	ldr	r3, [pc, #432]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f0      	bne.n	8006b38 <HAL_RCC_OscConfig+0xe8>
 8006b56:	e000      	b.n	8006b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d063      	beq.n	8006c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b66:	4b65      	ldr	r3, [pc, #404]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b72:	4b62      	ldr	r3, [pc, #392]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d11c      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b7e:	4b5f      	ldr	r3, [pc, #380]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d116      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8a:	4b5c      	ldr	r3, [pc, #368]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x152>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d001      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e1c4      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba2:	4b56      	ldr	r3, [pc, #344]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	4952      	ldr	r1, [pc, #328]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bb6:	e03a      	b.n	8006c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d020      	beq.n	8006c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc0:	4b4f      	ldr	r3, [pc, #316]	; (8006d00 <HAL_RCC_OscConfig+0x2b0>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc6:	f7fc f8fd 	bl	8002dc4 <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bce:	f7fc f8f9 	bl	8002dc4 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e1a5      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be0:	4b46      	ldr	r3, [pc, #280]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0f0      	beq.n	8006bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bec:	4b43      	ldr	r3, [pc, #268]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	4940      	ldr	r1, [pc, #256]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]
 8006c00:	e015      	b.n	8006c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c02:	4b3f      	ldr	r3, [pc, #252]	; (8006d00 <HAL_RCC_OscConfig+0x2b0>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fc f8dc 	bl	8002dc4 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c10:	f7fc f8d8 	bl	8002dc4 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e184      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c22:	4b36      	ldr	r3, [pc, #216]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f0      	bne.n	8006c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d030      	beq.n	8006c9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d016      	beq.n	8006c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c42:	4b30      	ldr	r3, [pc, #192]	; (8006d04 <HAL_RCC_OscConfig+0x2b4>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c48:	f7fc f8bc 	bl	8002dc4 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c50:	f7fc f8b8 	bl	8002dc4 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e164      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c62:	4b26      	ldr	r3, [pc, #152]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0x200>
 8006c6e:	e015      	b.n	8006c9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c70:	4b24      	ldr	r3, [pc, #144]	; (8006d04 <HAL_RCC_OscConfig+0x2b4>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c76:	f7fc f8a5 	bl	8002dc4 <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c7e:	f7fc f8a1 	bl	8002dc4 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e14d      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c90:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f0      	bne.n	8006c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80a0 	beq.w	8006dea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006caa:	2300      	movs	r3, #0
 8006cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10f      	bne.n	8006cda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	4a0e      	ldr	r2, [pc, #56]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cca:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <HAL_RCC_OscConfig+0x2ac>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cd2:	60bb      	str	r3, [r7, #8]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <HAL_RCC_OscConfig+0x2b8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d121      	bne.n	8006d2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <HAL_RCC_OscConfig+0x2b8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a07      	ldr	r2, [pc, #28]	; (8006d08 <HAL_RCC_OscConfig+0x2b8>)
 8006cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cf2:	f7fc f867 	bl	8002dc4 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf8:	e011      	b.n	8006d1e <HAL_RCC_OscConfig+0x2ce>
 8006cfa:	bf00      	nop
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	42470000 	.word	0x42470000
 8006d04:	42470e80 	.word	0x42470e80
 8006d08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0c:	f7fc f85a 	bl	8002dc4 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e106      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1e:	4b85      	ldr	r3, [pc, #532]	; (8006f34 <HAL_RCC_OscConfig+0x4e4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0f0      	beq.n	8006d0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d106      	bne.n	8006d40 <HAL_RCC_OscConfig+0x2f0>
 8006d32:	4b81      	ldr	r3, [pc, #516]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	4a80      	ldr	r2, [pc, #512]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3e:	e01c      	b.n	8006d7a <HAL_RCC_OscConfig+0x32a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b05      	cmp	r3, #5
 8006d46:	d10c      	bne.n	8006d62 <HAL_RCC_OscConfig+0x312>
 8006d48:	4b7b      	ldr	r3, [pc, #492]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4c:	4a7a      	ldr	r2, [pc, #488]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d4e:	f043 0304 	orr.w	r3, r3, #4
 8006d52:	6713      	str	r3, [r2, #112]	; 0x70
 8006d54:	4b78      	ldr	r3, [pc, #480]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d58:	4a77      	ldr	r2, [pc, #476]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d5a:	f043 0301 	orr.w	r3, r3, #1
 8006d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d60:	e00b      	b.n	8006d7a <HAL_RCC_OscConfig+0x32a>
 8006d62:	4b75      	ldr	r3, [pc, #468]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	4a74      	ldr	r2, [pc, #464]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6e:	4b72      	ldr	r3, [pc, #456]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	4a71      	ldr	r2, [pc, #452]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006d74:	f023 0304 	bic.w	r3, r3, #4
 8006d78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d015      	beq.n	8006dae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d82:	f7fc f81f 	bl	8002dc4 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d88:	e00a      	b.n	8006da0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d8a:	f7fc f81b 	bl	8002dc4 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e0c5      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da0:	4b65      	ldr	r3, [pc, #404]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0ee      	beq.n	8006d8a <HAL_RCC_OscConfig+0x33a>
 8006dac:	e014      	b.n	8006dd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dae:	f7fc f809 	bl	8002dc4 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db4:	e00a      	b.n	8006dcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db6:	f7fc f805 	bl	8002dc4 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e0af      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dcc:	4b5a      	ldr	r3, [pc, #360]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1ee      	bne.n	8006db6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d105      	bne.n	8006dea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dde:	4b56      	ldr	r3, [pc, #344]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	4a55      	ldr	r2, [pc, #340]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 809b 	beq.w	8006f2a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006df4:	4b50      	ldr	r3, [pc, #320]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 030c 	and.w	r3, r3, #12
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d05c      	beq.n	8006eba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d141      	bne.n	8006e8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e08:	4b4c      	ldr	r3, [pc, #304]	; (8006f3c <HAL_RCC_OscConfig+0x4ec>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0e:	f7fb ffd9 	bl	8002dc4 <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e16:	f7fb ffd5 	bl	8002dc4 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e081      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e28:	4b43      	ldr	r3, [pc, #268]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f0      	bne.n	8006e16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	019b      	lsls	r3, r3, #6
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	041b      	lsls	r3, r3, #16
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	061b      	lsls	r3, r3, #24
 8006e58:	4937      	ldr	r1, [pc, #220]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5e:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <HAL_RCC_OscConfig+0x4ec>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e64:	f7fb ffae 	bl	8002dc4 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fb ffaa 	bl	8002dc4 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e056      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7e:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0x41c>
 8006e8a:	e04e      	b.n	8006f2a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8c:	4b2b      	ldr	r3, [pc, #172]	; (8006f3c <HAL_RCC_OscConfig+0x4ec>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e92:	f7fb ff97 	bl	8002dc4 <HAL_GetTick>
 8006e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e98:	e008      	b.n	8006eac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e9a:	f7fb ff93 	bl	8002dc4 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e03f      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eac:	4b22      	ldr	r3, [pc, #136]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1f0      	bne.n	8006e9a <HAL_RCC_OscConfig+0x44a>
 8006eb8:	e037      	b.n	8006f2a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e032      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ec6:	4b1c      	ldr	r3, [pc, #112]	; (8006f38 <HAL_RCC_OscConfig+0x4e8>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d028      	beq.n	8006f26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d121      	bne.n	8006f26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d11a      	bne.n	8006f26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006efc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d111      	bne.n	8006f26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d107      	bne.n	8006f26 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d001      	beq.n	8006f2a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40007000 	.word	0x40007000
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	42470060 	.word	0x42470060

08006f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0cc      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f54:	4b68      	ldr	r3, [pc, #416]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d90c      	bls.n	8006f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f62:	4b65      	ldr	r3, [pc, #404]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6a:	4b63      	ldr	r3, [pc, #396]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d001      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0b8      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d020      	beq.n	8006fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d005      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f94:	4b59      	ldr	r3, [pc, #356]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	4a58      	ldr	r2, [pc, #352]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fac:	4b53      	ldr	r3, [pc, #332]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	4a52      	ldr	r2, [pc, #328]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fb8:	4b50      	ldr	r3, [pc, #320]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	494d      	ldr	r1, [pc, #308]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d044      	beq.n	8007060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d107      	bne.n	8006fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fde:	4b47      	ldr	r3, [pc, #284]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d119      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e07f      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d003      	beq.n	8006ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d107      	bne.n	800700e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ffe:	4b3f      	ldr	r3, [pc, #252]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e06f      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800700e:	4b3b      	ldr	r3, [pc, #236]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e067      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800701e:	4b37      	ldr	r3, [pc, #220]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f023 0203 	bic.w	r2, r3, #3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4934      	ldr	r1, [pc, #208]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 800702c:	4313      	orrs	r3, r2
 800702e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007030:	f7fb fec8 	bl	8002dc4 <HAL_GetTick>
 8007034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007036:	e00a      	b.n	800704e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007038:	f7fb fec4 	bl	8002dc4 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	f241 3288 	movw	r2, #5000	; 0x1388
 8007046:	4293      	cmp	r3, r2
 8007048:	d901      	bls.n	800704e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e04f      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800704e:	4b2b      	ldr	r3, [pc, #172]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 020c 	and.w	r2, r3, #12
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	429a      	cmp	r2, r3
 800705e:	d1eb      	bne.n	8007038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007060:	4b25      	ldr	r3, [pc, #148]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d20c      	bcs.n	8007088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800706e:	4b22      	ldr	r3, [pc, #136]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007076:	4b20      	ldr	r3, [pc, #128]	; (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d001      	beq.n	8007088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e032      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007094:	4b19      	ldr	r3, [pc, #100]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	4916      	ldr	r1, [pc, #88]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	490e      	ldr	r1, [pc, #56]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070c6:	f000 f821 	bl	800710c <HAL_RCC_GetSysClockFreq>
 80070ca:	4602      	mov	r2, r0
 80070cc:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	490a      	ldr	r1, [pc, #40]	; (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 80070d8:	5ccb      	ldrb	r3, [r1, r3]
 80070da:	fa22 f303 	lsr.w	r3, r2, r3
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 80070e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070e2:	4b09      	ldr	r3, [pc, #36]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fb fe28 	bl	8002d3c <HAL_InitTick>

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40023c00 	.word	0x40023c00
 80070fc:	40023800 	.word	0x40023800
 8007100:	0800c8ac 	.word	0x0800c8ac
 8007104:	200000b4 	.word	0x200000b4
 8007108:	200000b8 	.word	0x200000b8

0800710c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800710c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	607b      	str	r3, [r7, #4]
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	2300      	movs	r3, #0
 800711e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007124:	4b67      	ldr	r3, [pc, #412]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 030c 	and.w	r3, r3, #12
 800712c:	2b08      	cmp	r3, #8
 800712e:	d00d      	beq.n	800714c <HAL_RCC_GetSysClockFreq+0x40>
 8007130:	2b08      	cmp	r3, #8
 8007132:	f200 80bd 	bhi.w	80072b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_RCC_GetSysClockFreq+0x34>
 800713a:	2b04      	cmp	r3, #4
 800713c:	d003      	beq.n	8007146 <HAL_RCC_GetSysClockFreq+0x3a>
 800713e:	e0b7      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007140:	4b61      	ldr	r3, [pc, #388]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007142:	60bb      	str	r3, [r7, #8]
       break;
 8007144:	e0b7      	b.n	80072b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007146:	4b61      	ldr	r3, [pc, #388]	; (80072cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007148:	60bb      	str	r3, [r7, #8]
      break;
 800714a:	e0b4      	b.n	80072b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800714c:	4b5d      	ldr	r3, [pc, #372]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007154:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007156:	4b5b      	ldr	r3, [pc, #364]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d04d      	beq.n	80071fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007162:	4b58      	ldr	r3, [pc, #352]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	099b      	lsrs	r3, r3, #6
 8007168:	461a      	mov	r2, r3
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007172:	f04f 0100 	mov.w	r1, #0
 8007176:	ea02 0800 	and.w	r8, r2, r0
 800717a:	ea03 0901 	and.w	r9, r3, r1
 800717e:	4640      	mov	r0, r8
 8007180:	4649      	mov	r1, r9
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	014b      	lsls	r3, r1, #5
 800718c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007190:	0142      	lsls	r2, r0, #5
 8007192:	4610      	mov	r0, r2
 8007194:	4619      	mov	r1, r3
 8007196:	ebb0 0008 	subs.w	r0, r0, r8
 800719a:	eb61 0109 	sbc.w	r1, r1, r9
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	018b      	lsls	r3, r1, #6
 80071a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071ac:	0182      	lsls	r2, r0, #6
 80071ae:	1a12      	subs	r2, r2, r0
 80071b0:	eb63 0301 	sbc.w	r3, r3, r1
 80071b4:	f04f 0000 	mov.w	r0, #0
 80071b8:	f04f 0100 	mov.w	r1, #0
 80071bc:	00d9      	lsls	r1, r3, #3
 80071be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071c2:	00d0      	lsls	r0, r2, #3
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	eb12 0208 	adds.w	r2, r2, r8
 80071cc:	eb43 0309 	adc.w	r3, r3, r9
 80071d0:	f04f 0000 	mov.w	r0, #0
 80071d4:	f04f 0100 	mov.w	r1, #0
 80071d8:	0259      	lsls	r1, r3, #9
 80071da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80071de:	0250      	lsls	r0, r2, #9
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4610      	mov	r0, r2
 80071e6:	4619      	mov	r1, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	f7f9 fcd2 	bl	8000b98 <__aeabi_uldivmod>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4613      	mov	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e04a      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071fe:	4b31      	ldr	r3, [pc, #196]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	099b      	lsrs	r3, r3, #6
 8007204:	461a      	mov	r2, r3
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800720e:	f04f 0100 	mov.w	r1, #0
 8007212:	ea02 0400 	and.w	r4, r2, r0
 8007216:	ea03 0501 	and.w	r5, r3, r1
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	014b      	lsls	r3, r1, #5
 8007228:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800722c:	0142      	lsls	r2, r0, #5
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	1b00      	subs	r0, r0, r4
 8007234:	eb61 0105 	sbc.w	r1, r1, r5
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	018b      	lsls	r3, r1, #6
 8007242:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007246:	0182      	lsls	r2, r0, #6
 8007248:	1a12      	subs	r2, r2, r0
 800724a:	eb63 0301 	sbc.w	r3, r3, r1
 800724e:	f04f 0000 	mov.w	r0, #0
 8007252:	f04f 0100 	mov.w	r1, #0
 8007256:	00d9      	lsls	r1, r3, #3
 8007258:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800725c:	00d0      	lsls	r0, r2, #3
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	1912      	adds	r2, r2, r4
 8007264:	eb45 0303 	adc.w	r3, r5, r3
 8007268:	f04f 0000 	mov.w	r0, #0
 800726c:	f04f 0100 	mov.w	r1, #0
 8007270:	0299      	lsls	r1, r3, #10
 8007272:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007276:	0290      	lsls	r0, r2, #10
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4610      	mov	r0, r2
 800727e:	4619      	mov	r1, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	461a      	mov	r2, r3
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	f7f9 fc86 	bl	8000b98 <__aeabi_uldivmod>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4613      	mov	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007294:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	0c1b      	lsrs	r3, r3, #16
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	3301      	adds	r3, #1
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ac:	60bb      	str	r3, [r7, #8]
      break;
 80072ae:	e002      	b.n	80072b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80072b2:	60bb      	str	r3, [r7, #8]
      break;
 80072b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072b6:	68bb      	ldr	r3, [r7, #8]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80072c2:	bf00      	nop
 80072c4:	40023800 	.word	0x40023800
 80072c8:	00f42400 	.word	0x00f42400
 80072cc:	007a1200 	.word	0x007a1200

080072d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d105      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d035      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072f8:	4b62      	ldr	r3, [pc, #392]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072fe:	f7fb fd61 	bl	8002dc4 <HAL_GetTick>
 8007302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007304:	e008      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007306:	f7fb fd5d 	bl	8002dc4 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d901      	bls.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e0b0      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007318:	4b5b      	ldr	r3, [pc, #364]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1f0      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	019a      	lsls	r2, r3, #6
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	071b      	lsls	r3, r3, #28
 8007330:	4955      	ldr	r1, [pc, #340]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007338:	4b52      	ldr	r3, [pc, #328]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800733e:	f7fb fd41 	bl	8002dc4 <HAL_GetTick>
 8007342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007344:	e008      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007346:	f7fb fd3d 	bl	8002dc4 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d901      	bls.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e090      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007358:	4b4b      	ldr	r3, [pc, #300]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0f0      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8083 	beq.w	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	4b44      	ldr	r3, [pc, #272]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	4a43      	ldr	r2, [pc, #268]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800737c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007380:	6413      	str	r3, [r2, #64]	; 0x40
 8007382:	4b41      	ldr	r3, [pc, #260]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800738e:	4b3f      	ldr	r3, [pc, #252]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a3e      	ldr	r2, [pc, #248]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800739a:	f7fb fd13 	bl	8002dc4 <HAL_GetTick>
 800739e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073a0:	e008      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073a2:	f7fb fd0f 	bl	8002dc4 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e062      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80073b4:	4b35      	ldr	r3, [pc, #212]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0f0      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073c0:	4b31      	ldr	r3, [pc, #196]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d02f      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d028      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073de:	4b2a      	ldr	r3, [pc, #168]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073e8:	4b29      	ldr	r3, [pc, #164]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073ee:	4b28      	ldr	r3, [pc, #160]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073f4:	4a24      	ldr	r2, [pc, #144]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073fa:	4b23      	ldr	r3, [pc, #140]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b01      	cmp	r3, #1
 8007404:	d114      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007406:	f7fb fcdd 	bl	8002dc4 <HAL_GetTick>
 800740a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740c:	e00a      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800740e:	f7fb fcd9 	bl	8002dc4 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	f241 3288 	movw	r2, #5000	; 0x1388
 800741c:	4293      	cmp	r3, r2
 800741e:	d901      	bls.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e02a      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007424:	4b18      	ldr	r3, [pc, #96]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0ee      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800743c:	d10d      	bne.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800743e:	4b12      	ldr	r3, [pc, #72]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800744e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007452:	490d      	ldr	r1, [pc, #52]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007454:	4313      	orrs	r3, r2
 8007456:	608b      	str	r3, [r1, #8]
 8007458:	e005      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	4a0a      	ldr	r2, [pc, #40]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007460:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007464:	6093      	str	r3, [r2, #8]
 8007466:	4b08      	ldr	r3, [pc, #32]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007468:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007472:	4905      	ldr	r1, [pc, #20]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007474:	4313      	orrs	r3, r2
 8007476:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	42470068 	.word	0x42470068
 8007488:	40023800 	.word	0x40023800
 800748c:	40007000 	.word	0x40007000
 8007490:	42470e40 	.word	0x42470e40

08007494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d13e      	bne.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80074b2:	4b23      	ldr	r3, [pc, #140]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d12f      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80074c8:	4b1e      	ldr	r3, [pc, #120]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074ca:	617b      	str	r3, [r7, #20]
          break;
 80074cc:	e02f      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80074ce:	4b1c      	ldr	r3, [pc, #112]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074da:	d108      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074dc:	4b18      	ldr	r3, [pc, #96]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074e4:	4a18      	ldr	r2, [pc, #96]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80074e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	e007      	b.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074ee:	4b14      	ldr	r3, [pc, #80]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074f6:	4a15      	ldr	r2, [pc, #84]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80074f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80074fe:	4b10      	ldr	r3, [pc, #64]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007504:	099b      	lsrs	r3, r3, #6
 8007506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	fb02 f303 	mul.w	r3, r2, r3
 8007510:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007512:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007518:	0f1b      	lsrs	r3, r3, #28
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	fbb2 f3f3 	udiv	r3, r2, r3
 8007524:	617b      	str	r3, [r7, #20]
          break;
 8007526:	e002      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	617b      	str	r3, [r7, #20]
          break;
 800752c:	bf00      	nop
        }
      }
      break;
 800752e:	bf00      	nop
    }
  }
  return frequency;
 8007530:	697b      	ldr	r3, [r7, #20]
}
 8007532:	4618      	mov	r0, r3
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40023800 	.word	0x40023800
 8007544:	00bb8000 	.word	0x00bb8000
 8007548:	007a1200 	.word	0x007a1200
 800754c:	00f42400 	.word	0x00f42400

08007550 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e041      	b.n	80075e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fb faf6 	bl	8002b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f000 f95a 	bl	8007848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b01      	cmp	r3, #1
 8007602:	d001      	beq.n	8007608 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e046      	b.n	8007696 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a23      	ldr	r2, [pc, #140]	; (80076a4 <HAL_TIM_Base_Start+0xb4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d022      	beq.n	8007660 <HAL_TIM_Base_Start+0x70>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007622:	d01d      	beq.n	8007660 <HAL_TIM_Base_Start+0x70>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a1f      	ldr	r2, [pc, #124]	; (80076a8 <HAL_TIM_Base_Start+0xb8>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d018      	beq.n	8007660 <HAL_TIM_Base_Start+0x70>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <HAL_TIM_Base_Start+0xbc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d013      	beq.n	8007660 <HAL_TIM_Base_Start+0x70>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <HAL_TIM_Base_Start+0xc0>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d00e      	beq.n	8007660 <HAL_TIM_Base_Start+0x70>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1b      	ldr	r2, [pc, #108]	; (80076b4 <HAL_TIM_Base_Start+0xc4>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d009      	beq.n	8007660 <HAL_TIM_Base_Start+0x70>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a19      	ldr	r2, [pc, #100]	; (80076b8 <HAL_TIM_Base_Start+0xc8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d004      	beq.n	8007660 <HAL_TIM_Base_Start+0x70>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a18      	ldr	r2, [pc, #96]	; (80076bc <HAL_TIM_Base_Start+0xcc>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d111      	bne.n	8007684 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b06      	cmp	r3, #6
 8007670:	d010      	beq.n	8007694 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f042 0201 	orr.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007682:	e007      	b.n	8007694 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40010000 	.word	0x40010000
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	40010400 	.word	0x40010400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40001800 	.word	0x40001800

080076c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_TIM_ConfigClockSource+0x18>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e0b3      	b.n	8007840 <HAL_TIM_ConfigClockSource+0x180>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007710:	d03e      	beq.n	8007790 <HAL_TIM_ConfigClockSource+0xd0>
 8007712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007716:	f200 8087 	bhi.w	8007828 <HAL_TIM_ConfigClockSource+0x168>
 800771a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800771e:	f000 8085 	beq.w	800782c <HAL_TIM_ConfigClockSource+0x16c>
 8007722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007726:	d87f      	bhi.n	8007828 <HAL_TIM_ConfigClockSource+0x168>
 8007728:	2b70      	cmp	r3, #112	; 0x70
 800772a:	d01a      	beq.n	8007762 <HAL_TIM_ConfigClockSource+0xa2>
 800772c:	2b70      	cmp	r3, #112	; 0x70
 800772e:	d87b      	bhi.n	8007828 <HAL_TIM_ConfigClockSource+0x168>
 8007730:	2b60      	cmp	r3, #96	; 0x60
 8007732:	d050      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x116>
 8007734:	2b60      	cmp	r3, #96	; 0x60
 8007736:	d877      	bhi.n	8007828 <HAL_TIM_ConfigClockSource+0x168>
 8007738:	2b50      	cmp	r3, #80	; 0x50
 800773a:	d03c      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0xf6>
 800773c:	2b50      	cmp	r3, #80	; 0x50
 800773e:	d873      	bhi.n	8007828 <HAL_TIM_ConfigClockSource+0x168>
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	d058      	beq.n	80077f6 <HAL_TIM_ConfigClockSource+0x136>
 8007744:	2b40      	cmp	r3, #64	; 0x40
 8007746:	d86f      	bhi.n	8007828 <HAL_TIM_ConfigClockSource+0x168>
 8007748:	2b30      	cmp	r3, #48	; 0x30
 800774a:	d064      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x156>
 800774c:	2b30      	cmp	r3, #48	; 0x30
 800774e:	d86b      	bhi.n	8007828 <HAL_TIM_ConfigClockSource+0x168>
 8007750:	2b20      	cmp	r3, #32
 8007752:	d060      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x156>
 8007754:	2b20      	cmp	r3, #32
 8007756:	d867      	bhi.n	8007828 <HAL_TIM_ConfigClockSource+0x168>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d05c      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x156>
 800775c:	2b10      	cmp	r3, #16
 800775e:	d05a      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007760:	e062      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	6899      	ldr	r1, [r3, #8]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f000 f983 	bl	8007a7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007784:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	609a      	str	r2, [r3, #8]
      break;
 800778e:	e04e      	b.n	800782e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	6899      	ldr	r1, [r3, #8]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f000 f96c 	bl	8007a7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077b2:	609a      	str	r2, [r3, #8]
      break;
 80077b4:	e03b      	b.n	800782e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6859      	ldr	r1, [r3, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	461a      	mov	r2, r3
 80077c4:	f000 f8e0 	bl	8007988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2150      	movs	r1, #80	; 0x50
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 f939 	bl	8007a46 <TIM_ITRx_SetConfig>
      break;
 80077d4:	e02b      	b.n	800782e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6818      	ldr	r0, [r3, #0]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	6859      	ldr	r1, [r3, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f000 f8ff 	bl	80079e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2160      	movs	r1, #96	; 0x60
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 f929 	bl	8007a46 <TIM_ITRx_SetConfig>
      break;
 80077f4:	e01b      	b.n	800782e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	6859      	ldr	r1, [r3, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	461a      	mov	r2, r3
 8007804:	f000 f8c0 	bl	8007988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2140      	movs	r1, #64	; 0x40
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f919 	bl	8007a46 <TIM_ITRx_SetConfig>
      break;
 8007814:	e00b      	b.n	800782e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f000 f910 	bl	8007a46 <TIM_ITRx_SetConfig>
        break;
 8007826:	e002      	b.n	800782e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007828:	bf00      	nop
 800782a:	e000      	b.n	800782e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800782c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a40      	ldr	r2, [pc, #256]	; (800795c <TIM_Base_SetConfig+0x114>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d013      	beq.n	8007888 <TIM_Base_SetConfig+0x40>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007866:	d00f      	beq.n	8007888 <TIM_Base_SetConfig+0x40>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a3d      	ldr	r2, [pc, #244]	; (8007960 <TIM_Base_SetConfig+0x118>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d00b      	beq.n	8007888 <TIM_Base_SetConfig+0x40>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a3c      	ldr	r2, [pc, #240]	; (8007964 <TIM_Base_SetConfig+0x11c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d007      	beq.n	8007888 <TIM_Base_SetConfig+0x40>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a3b      	ldr	r2, [pc, #236]	; (8007968 <TIM_Base_SetConfig+0x120>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d003      	beq.n	8007888 <TIM_Base_SetConfig+0x40>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a3a      	ldr	r2, [pc, #232]	; (800796c <TIM_Base_SetConfig+0x124>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d108      	bne.n	800789a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a2f      	ldr	r2, [pc, #188]	; (800795c <TIM_Base_SetConfig+0x114>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d02b      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a8:	d027      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a2c      	ldr	r2, [pc, #176]	; (8007960 <TIM_Base_SetConfig+0x118>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d023      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a2b      	ldr	r2, [pc, #172]	; (8007964 <TIM_Base_SetConfig+0x11c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d01f      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a2a      	ldr	r2, [pc, #168]	; (8007968 <TIM_Base_SetConfig+0x120>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d01b      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a29      	ldr	r2, [pc, #164]	; (800796c <TIM_Base_SetConfig+0x124>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d017      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a28      	ldr	r2, [pc, #160]	; (8007970 <TIM_Base_SetConfig+0x128>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d013      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a27      	ldr	r2, [pc, #156]	; (8007974 <TIM_Base_SetConfig+0x12c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00f      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a26      	ldr	r2, [pc, #152]	; (8007978 <TIM_Base_SetConfig+0x130>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00b      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a25      	ldr	r2, [pc, #148]	; (800797c <TIM_Base_SetConfig+0x134>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d007      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a24      	ldr	r2, [pc, #144]	; (8007980 <TIM_Base_SetConfig+0x138>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d003      	beq.n	80078fa <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a23      	ldr	r2, [pc, #140]	; (8007984 <TIM_Base_SetConfig+0x13c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d108      	bne.n	800790c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a0a      	ldr	r2, [pc, #40]	; (800795c <TIM_Base_SetConfig+0x114>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d003      	beq.n	8007940 <TIM_Base_SetConfig+0xf8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a0c      	ldr	r2, [pc, #48]	; (800796c <TIM_Base_SetConfig+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d103      	bne.n	8007948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	691a      	ldr	r2, [r3, #16]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	615a      	str	r2, [r3, #20]
}
 800794e:	bf00      	nop
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40010000 	.word	0x40010000
 8007960:	40000400 	.word	0x40000400
 8007964:	40000800 	.word	0x40000800
 8007968:	40000c00 	.word	0x40000c00
 800796c:	40010400 	.word	0x40010400
 8007970:	40014000 	.word	0x40014000
 8007974:	40014400 	.word	0x40014400
 8007978:	40014800 	.word	0x40014800
 800797c:	40001800 	.word	0x40001800
 8007980:	40001c00 	.word	0x40001c00
 8007984:	40002000 	.word	0x40002000

08007988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	f023 0201 	bic.w	r2, r3, #1
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f023 030a 	bic.w	r3, r3, #10
 80079c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b087      	sub	sp, #28
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	f023 0210 	bic.w	r2, r3, #16
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	031b      	lsls	r3, r3, #12
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	011b      	lsls	r3, r3, #4
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	621a      	str	r2, [r3, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	371c      	adds	r7, #28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	f043 0307 	orr.w	r3, r3, #7
 8007a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	609a      	str	r2, [r3, #8]
}
 8007a70:	bf00      	nop
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	021a      	lsls	r2, r3, #8
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	609a      	str	r2, [r3, #8]
}
 8007ab0:	bf00      	nop
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e05a      	b.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d022      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b20:	d01d      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1d      	ldr	r2, [pc, #116]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d018      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1b      	ldr	r2, [pc, #108]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d013      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00e      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a18      	ldr	r2, [pc, #96]	; (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d009      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a17      	ldr	r2, [pc, #92]	; (8007bac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d004      	beq.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a15      	ldr	r2, [pc, #84]	; (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d10c      	bne.n	8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40000400 	.word	0x40000400
 8007ba0:	40000800 	.word	0x40000800
 8007ba4:	40000c00 	.word	0x40000c00
 8007ba8:	40010400 	.word	0x40010400
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40001800 	.word	0x40001800

08007bb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	f107 001c 	add.w	r0, r7, #28
 8007bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d122      	bne.n	8007c12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d105      	bne.n	8007c06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f94a 	bl	8007ea0 <USB_CoreReset>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
 8007c10:	e01a      	b.n	8007c48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f93e 	bl	8007ea0 <USB_CoreReset>
 8007c24:	4603      	mov	r3, r0
 8007c26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38
 8007c3a:	e005      	b.n	8007c48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d10b      	bne.n	8007c66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f043 0206 	orr.w	r2, r3, #6
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f043 0220 	orr.w	r2, r3, #32
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c72:	b004      	add	sp, #16
 8007c74:	4770      	bx	lr

08007c76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f043 0201 	orr.w	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f023 0201 	bic.w	r2, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d106      	bne.n	8007ce6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60da      	str	r2, [r3, #12]
 8007ce4:	e00b      	b.n	8007cfe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ce6:	78fb      	ldrb	r3, [r7, #3]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d106      	bne.n	8007cfa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	60da      	str	r2, [r3, #12]
 8007cf8:	e001      	b.n	8007cfe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e003      	b.n	8007d06 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007cfe:	2032      	movs	r0, #50	; 0x32
 8007d00:	f7fb f86c 	bl	8002ddc <HAL_Delay>

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	019b      	lsls	r3, r3, #6
 8007d22:	f043 0220 	orr.w	r2, r3, #32
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <USB_FlushTxFifo+0x48>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d901      	bls.n	8007d3c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e006      	b.n	8007d4a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0320 	and.w	r3, r3, #32
 8007d44:	2b20      	cmp	r3, #32
 8007d46:	d0f0      	beq.n	8007d2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	00030d40 	.word	0x00030d40

08007d5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2210      	movs	r2, #16
 8007d6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4a09      	ldr	r2, [pc, #36]	; (8007d9c <USB_FlushRxFifo+0x40>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d901      	bls.n	8007d80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e006      	b.n	8007d8e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	2b10      	cmp	r3, #16
 8007d8a:	d0f0      	beq.n	8007d6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	00030d40 	.word	0x00030d40

08007da0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b089      	sub	sp, #36	; 0x24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4611      	mov	r1, r2
 8007dac:	461a      	mov	r2, r3
 8007dae:	460b      	mov	r3, r1
 8007db0:	71fb      	strb	r3, [r7, #7]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d11a      	bne.n	8007dfc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007dc6:	88bb      	ldrh	r3, [r7, #4]
 8007dc8:	3303      	adds	r3, #3
 8007dca:	089b      	lsrs	r3, r3, #2
 8007dcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	e00f      	b.n	8007df4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	031a      	lsls	r2, r3, #12
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de0:	461a      	mov	r2, r3
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	3304      	adds	r3, #4
 8007dec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	3301      	adds	r3, #1
 8007df2:	61bb      	str	r3, [r7, #24]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3eb      	bcc.n	8007dd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3724      	adds	r7, #36	; 0x24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b089      	sub	sp, #36	; 0x24
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	4613      	mov	r3, r2
 8007e16:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007e20:	88fb      	ldrh	r3, [r7, #6]
 8007e22:	3303      	adds	r3, #3
 8007e24:	089b      	lsrs	r3, r3, #2
 8007e26:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	e00b      	b.n	8007e46 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	3301      	adds	r3, #1
 8007e44:	61bb      	str	r3, [r7, #24]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d3ef      	bcc.n	8007e2e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007e4e:	69fb      	ldr	r3, [r7, #28]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3724      	adds	r7, #36	; 0x24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	4013      	ands	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e74:	68fb      	ldr	r3, [r7, #12]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
	...

08007ea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4a13      	ldr	r2, [pc, #76]	; (8007f04 <USB_CoreReset+0x64>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d901      	bls.n	8007ebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e01b      	b.n	8007ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	daf2      	bge.n	8007eac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f043 0201 	orr.w	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4a09      	ldr	r2, [pc, #36]	; (8007f04 <USB_CoreReset+0x64>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d901      	bls.n	8007ee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e006      	b.n	8007ef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d0f0      	beq.n	8007ed6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	00030d40 	.word	0x00030d40

08007f08 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f08:	b084      	sub	sp, #16
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	f107 001c 	add.w	r0, r7, #28
 8007f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f24:	461a      	mov	r2, r3
 8007f26:	2300      	movs	r3, #0
 8007f28:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d018      	beq.n	8007f8c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d10a      	bne.n	8007f76 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f6e:	f043 0304 	orr.w	r3, r3, #4
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	e014      	b.n	8007fa0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f84:	f023 0304 	bic.w	r3, r3, #4
 8007f88:	6013      	str	r3, [r2, #0]
 8007f8a:	e009      	b.n	8007fa0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f9a:	f023 0304 	bic.w	r3, r3, #4
 8007f9e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007fa0:	2110      	movs	r1, #16
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff feb4 	bl	8007d10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff fed7 	bl	8007d5c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	e015      	b.n	8007fe0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d3e5      	bcc.n	8007fb4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007fe8:	2101      	movs	r1, #1
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f8ac 	bl	8008148 <USB_DriveVbus>

  HAL_Delay(200U);
 8007ff0:	20c8      	movs	r0, #200	; 0xc8
 8007ff2:	f7fa fef3 	bl	8002ddc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8008002:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008016:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a14      	ldr	r2, [pc, #80]	; (800806c <USB_HostInit+0x164>)
 800801c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a13      	ldr	r2, [pc, #76]	; (8008070 <USB_HostInit+0x168>)
 8008022:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008026:	e009      	b.n	800803c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2280      	movs	r2, #128	; 0x80
 800802c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a10      	ldr	r2, [pc, #64]	; (8008074 <USB_HostInit+0x16c>)
 8008032:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a10      	ldr	r2, [pc, #64]	; (8008078 <USB_HostInit+0x170>)
 8008038:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f043 0210 	orr.w	r2, r3, #16
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699a      	ldr	r2, [r3, #24]
 8008052:	4b0a      	ldr	r3, [pc, #40]	; (800807c <USB_HostInit+0x174>)
 8008054:	4313      	orrs	r3, r2
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008066:	b004      	add	sp, #16
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	01000200 	.word	0x01000200
 8008070:	00e00300 	.word	0x00e00300
 8008074:	00600080 	.word	0x00600080
 8008078:	004000e0 	.word	0x004000e0
 800807c:	a3200008 	.word	0xa3200008

08008080 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800809e:	f023 0303 	bic.w	r3, r3, #3
 80080a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	78fb      	ldrb	r3, [r7, #3]
 80080ae:	f003 0303 	and.w	r3, r3, #3
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080b8:	4313      	orrs	r3, r2
 80080ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d107      	bne.n	80080d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080c8:	461a      	mov	r2, r3
 80080ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80080ce:	6053      	str	r3, [r2, #4]
 80080d0:	e009      	b.n	80080e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80080d2:	78fb      	ldrb	r3, [r7, #3]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d106      	bne.n	80080e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080de:	461a      	mov	r2, r3
 80080e0:	f241 7370 	movw	r3, #6000	; 0x1770
 80080e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008114:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800811e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008122:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008124:	2064      	movs	r0, #100	; 0x64
 8008126:	f7fa fe59 	bl	8002ddc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008136:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008138:	200a      	movs	r0, #10
 800813a:	f7fa fe4f 	bl	8002ddc <HAL_Delay>

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	460b      	mov	r3, r1
 8008152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800816c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d109      	bne.n	800818c <USB_DriveVbus+0x44>
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d106      	bne.n	800818c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800818a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008196:	d109      	bne.n	80081ac <USB_DriveVbus+0x64>
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d106      	bne.n	80081ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b085      	sub	sp, #20
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	0c5b      	lsrs	r3, r3, #17
 80081d8:	f003 0303 	and.w	r3, r3, #3
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	b29b      	uxth	r3, r3
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
	...

0800820c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	461a      	mov	r2, r3
 800821a:	4603      	mov	r3, r0
 800821c:	70fb      	strb	r3, [r7, #3]
 800821e:	460b      	mov	r3, r1
 8008220:	70bb      	strb	r3, [r7, #2]
 8008222:	4613      	mov	r3, r2
 8008224:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	4413      	add	r3, r2
 8008236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800823a:	461a      	mov	r2, r3
 800823c:	f04f 33ff 	mov.w	r3, #4294967295
 8008240:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008242:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008246:	2b03      	cmp	r3, #3
 8008248:	d87e      	bhi.n	8008348 <USB_HC_Init+0x13c>
 800824a:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <USB_HC_Init+0x44>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008261 	.word	0x08008261
 8008254:	0800830b 	.word	0x0800830b
 8008258:	08008261 	.word	0x08008261
 800825c:	080082cd 	.word	0x080082cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	4413      	add	r3, r2
 8008268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800826c:	461a      	mov	r2, r3
 800826e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008272:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008274:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008278:	2b00      	cmp	r3, #0
 800827a:	da10      	bge.n	800829e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	015a      	lsls	r2, r3, #5
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	4413      	add	r3, r2
 8008284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	78fa      	ldrb	r2, [r7, #3]
 800828c:	0151      	lsls	r1, r2, #5
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	440a      	add	r2, r1
 8008292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800829a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800829c:	e057      	b.n	800834e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d051      	beq.n	800834e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	78fa      	ldrb	r2, [r7, #3]
 80082ba:	0151      	lsls	r1, r2, #5
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	440a      	add	r2, r1
 80082c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082c8:	60d3      	str	r3, [r2, #12]
      break;
 80082ca:	e040      	b.n	800834e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d8:	461a      	mov	r2, r3
 80082da:	f240 639d 	movw	r3, #1693	; 0x69d
 80082de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	da34      	bge.n	8008352 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	78fa      	ldrb	r2, [r7, #3]
 80082f8:	0151      	lsls	r1, r2, #5
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	440a      	add	r2, r1
 80082fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008306:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008308:	e023      	b.n	8008352 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800830a:	78fb      	ldrb	r3, [r7, #3]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	4413      	add	r3, r2
 8008312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008316:	461a      	mov	r2, r3
 8008318:	f240 2325 	movw	r3, #549	; 0x225
 800831c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800831e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008322:	2b00      	cmp	r3, #0
 8008324:	da17      	bge.n	8008356 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	4413      	add	r3, r2
 800832e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	440a      	add	r2, r1
 800833c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008340:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008344:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008346:	e006      	b.n	8008356 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	77fb      	strb	r3, [r7, #31]
      break;
 800834c:	e004      	b.n	8008358 <USB_HC_Init+0x14c>
      break;
 800834e:	bf00      	nop
 8008350:	e002      	b.n	8008358 <USB_HC_Init+0x14c>
      break;
 8008352:	bf00      	nop
 8008354:	e000      	b.n	8008358 <USB_HC_Init+0x14c>
      break;
 8008356:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800835e:	699a      	ldr	r2, [r3, #24]
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	2101      	movs	r1, #1
 8008368:	fa01 f303 	lsl.w	r3, r1, r3
 800836c:	6939      	ldr	r1, [r7, #16]
 800836e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008372:	4313      	orrs	r3, r2
 8008374:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008382:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008386:	2b00      	cmp	r3, #0
 8008388:	da03      	bge.n	8008392 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800838a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800838e:	61bb      	str	r3, [r7, #24]
 8008390:	e001      	b.n	8008396 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff ff0f 	bl	80081ba <USB_GetHostSpeed>
 800839c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800839e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d106      	bne.n	80083b4 <USB_HC_Init+0x1a8>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d003      	beq.n	80083b4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80083ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	e001      	b.n	80083b8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083b8:	787b      	ldrb	r3, [r7, #1]
 80083ba:	059b      	lsls	r3, r3, #22
 80083bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083c0:	78bb      	ldrb	r3, [r7, #2]
 80083c2:	02db      	lsls	r3, r3, #11
 80083c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083ce:	049b      	lsls	r3, r3, #18
 80083d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80083d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	0159      	lsls	r1, r3, #5
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	440b      	add	r3, r1
 80083ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083f4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80083f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d10f      	bne.n	800841e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	4413      	add	r3, r2
 8008406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	78fa      	ldrb	r2, [r7, #3]
 800840e:	0151      	lsls	r1, r2, #5
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	440a      	add	r2, r1
 8008414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008418:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800841c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800841e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3720      	adds	r7, #32
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08c      	sub	sp, #48	; 0x30
 800842c:	af02      	add	r7, sp, #8
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008444:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844e:	2b00      	cmp	r3, #0
 8008450:	d02d      	beq.n	80084ae <USB_HC_StartXfer+0x86>
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	791b      	ldrb	r3, [r3, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d129      	bne.n	80084ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d117      	bne.n	8008490 <USB_HC_StartXfer+0x68>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	79db      	ldrb	r3, [r3, #7]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <USB_HC_StartXfer+0x48>
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	79db      	ldrb	r3, [r3, #7]
 800846c:	2b02      	cmp	r3, #2
 800846e:	d10f      	bne.n	8008490 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	015a      	lsls	r2, r3, #5
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	4413      	add	r3, r2
 8008478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	0151      	lsls	r1, r2, #5
 8008482:	6a3a      	ldr	r2, [r7, #32]
 8008484:	440a      	add	r2, r1
 8008486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800848a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10b      	bne.n	80084ae <USB_HC_StartXfer+0x86>
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	795b      	ldrb	r3, [r3, #5]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d107      	bne.n	80084ae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	4619      	mov	r1, r3
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fa2f 	bl	8008908 <USB_DoPing>
      return HAL_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	e0f8      	b.n	80086a0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d018      	beq.n	80084e8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	8912      	ldrh	r2, [r2, #8]
 80084be:	4413      	add	r3, r2
 80084c0:	3b01      	subs	r3, #1
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	8912      	ldrh	r2, [r2, #8]
 80084c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80084cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084ce:	8b7b      	ldrh	r3, [r7, #26]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d90b      	bls.n	80084ec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80084d4:	8b7b      	ldrh	r3, [r7, #26]
 80084d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	8912      	ldrh	r2, [r2, #8]
 80084de:	fb02 f203 	mul.w	r2, r2, r3
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	611a      	str	r2, [r3, #16]
 80084e6:	e001      	b.n	80084ec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80084e8:	2301      	movs	r3, #1
 80084ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	78db      	ldrb	r3, [r3, #3]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d007      	beq.n	8008504 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	8912      	ldrh	r2, [r2, #8]
 80084fa:	fb02 f203 	mul.w	r2, r2, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	611a      	str	r2, [r3, #16]
 8008502:	e003      	b.n	800850c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	695a      	ldr	r2, [r3, #20]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008514:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008516:	04d9      	lsls	r1, r3, #19
 8008518:	4b63      	ldr	r3, [pc, #396]	; (80086a8 <USB_HC_StartXfer+0x280>)
 800851a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800851c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	7a9b      	ldrb	r3, [r3, #10]
 8008522:	075b      	lsls	r3, r3, #29
 8008524:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008528:	69f9      	ldr	r1, [r7, #28]
 800852a:	0148      	lsls	r0, r1, #5
 800852c:	6a39      	ldr	r1, [r7, #32]
 800852e:	4401      	add	r1, r0
 8008530:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008534:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008536:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	68d9      	ldr	r1, [r3, #12]
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	4413      	add	r3, r2
 800854a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854e:	460a      	mov	r2, r1
 8008550:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	bf0c      	ite	eq
 8008562:	2301      	moveq	r3, #1
 8008564:	2300      	movne	r3, #0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	4413      	add	r3, r2
 8008572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	0151      	lsls	r1, r2, #5
 800857c:	6a3a      	ldr	r2, [r7, #32]
 800857e:	440a      	add	r2, r1
 8008580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008584:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008588:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	4413      	add	r3, r2
 8008592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	7e7b      	ldrb	r3, [r7, #25]
 800859a:	075b      	lsls	r3, r3, #29
 800859c:	69f9      	ldr	r1, [r7, #28]
 800859e:	0148      	lsls	r0, r1, #5
 80085a0:	6a39      	ldr	r1, [r7, #32]
 80085a2:	4401      	add	r1, r0
 80085a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80085a8:	4313      	orrs	r3, r2
 80085aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085c2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	78db      	ldrb	r3, [r3, #3]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d004      	beq.n	80085d6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d2:	613b      	str	r3, [r7, #16]
 80085d4:	e003      	b.n	80085de <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085dc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085e4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f2:	461a      	mov	r2, r3
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80085f8:	79fb      	ldrb	r3, [r7, #7]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	e04e      	b.n	80086a0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	78db      	ldrb	r3, [r3, #3]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d149      	bne.n	800869e <USB_HC_StartXfer+0x276>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d045      	beq.n	800869e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	79db      	ldrb	r3, [r3, #7]
 8008616:	2b03      	cmp	r3, #3
 8008618:	d830      	bhi.n	800867c <USB_HC_StartXfer+0x254>
 800861a:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <USB_HC_StartXfer+0x1f8>)
 800861c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008620:	08008631 	.word	0x08008631
 8008624:	08008655 	.word	0x08008655
 8008628:	08008631 	.word	0x08008631
 800862c:	08008655 	.word	0x08008655
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	3303      	adds	r3, #3
 8008636:	089b      	lsrs	r3, r3, #2
 8008638:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800863a:	8afa      	ldrh	r2, [r7, #22]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	b29b      	uxth	r3, r3
 8008642:	429a      	cmp	r2, r3
 8008644:	d91c      	bls.n	8008680 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	f043 0220 	orr.w	r2, r3, #32
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	619a      	str	r2, [r3, #24]
        }
        break;
 8008652:	e015      	b.n	8008680 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	3303      	adds	r3, #3
 800865a:	089b      	lsrs	r3, r3, #2
 800865c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800865e:	8afa      	ldrh	r2, [r7, #22]
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	b29b      	uxth	r3, r3
 800866a:	429a      	cmp	r2, r3
 800866c:	d90a      	bls.n	8008684 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	619a      	str	r2, [r3, #24]
        }
        break;
 800867a:	e003      	b.n	8008684 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800867c:	bf00      	nop
 800867e:	e002      	b.n	8008686 <USB_HC_StartXfer+0x25e>
        break;
 8008680:	bf00      	nop
 8008682:	e000      	b.n	8008686 <USB_HC_StartXfer+0x25e>
        break;
 8008684:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	68d9      	ldr	r1, [r3, #12]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	785a      	ldrb	r2, [r3, #1]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	b29b      	uxth	r3, r3
 8008694:	2000      	movs	r0, #0
 8008696:	9000      	str	r0, [sp, #0]
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7ff fb81 	bl	8007da0 <USB_WritePacket>
  }

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3728      	adds	r7, #40	; 0x28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	1ff80000 	.word	0x1ff80000

080086ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	b29b      	uxth	r3, r3
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b089      	sub	sp, #36	; 0x24
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	0c9b      	lsrs	r3, r3, #18
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	4413      	add	r3, r2
 8008704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	0fdb      	lsrs	r3, r3, #31
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b20      	cmp	r3, #32
 800871c:	d104      	bne.n	8008728 <USB_HC_Halt+0x5a>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	e0e8      	b.n	80088fa <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <USB_HC_Halt+0x66>
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d173      	bne.n	800881c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	4413      	add	r3, r2
 800873c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	0151      	lsls	r1, r2, #5
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	440a      	add	r2, r1
 800874a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800874e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008752:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	f040 80cb 	bne.w	80088f8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008766:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d143      	bne.n	80087f6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	4413      	add	r3, r2
 8008776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	0151      	lsls	r1, r2, #5
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	440a      	add	r2, r1
 8008784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008788:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800878c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	4413      	add	r3, r2
 8008796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	0151      	lsls	r1, r2, #5
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	440a      	add	r2, r1
 80087c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087cc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	3301      	adds	r3, #1
 80087d2:	61fb      	str	r3, [r7, #28]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087da:	d81d      	bhi.n	8008818 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	015a      	lsls	r2, r3, #5
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087f2:	d0ec      	beq.n	80087ce <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087f4:	e080      	b.n	80088f8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	0151      	lsls	r1, r2, #5
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	440a      	add	r2, r1
 800880c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008810:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008814:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008816:	e06f      	b.n	80088f8 <USB_HC_Halt+0x22a>
            break;
 8008818:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800881a:	e06d      	b.n	80088f8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	4413      	add	r3, r2
 8008824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	69ba      	ldr	r2, [r7, #24]
 8008830:	440a      	add	r2, r1
 8008832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800883a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d143      	bne.n	80088d4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	4413      	add	r3, r2
 8008854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	440a      	add	r2, r1
 8008862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008866:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800886a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	4413      	add	r3, r2
 8008874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	0151      	lsls	r1, r2, #5
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	440a      	add	r2, r1
 8008882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800888a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	4413      	add	r3, r2
 8008894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	0151      	lsls	r1, r2, #5
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	440a      	add	r2, r1
 80088a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088aa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	3301      	adds	r3, #1
 80088b0:	61fb      	str	r3, [r7, #28]
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088b8:	d81d      	bhi.n	80088f6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088d0:	d0ec      	beq.n	80088ac <USB_HC_Halt+0x1de>
 80088d2:	e011      	b.n	80088f8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	e000      	b.n	80088f8 <USB_HC_Halt+0x22a>
          break;
 80088f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3724      	adds	r7, #36	; 0x24
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
	...

08008908 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800891c:	2301      	movs	r3, #1
 800891e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	04da      	lsls	r2, r3, #19
 8008924:	4b15      	ldr	r3, [pc, #84]	; (800897c <USB_DoPing+0x74>)
 8008926:	4013      	ands	r3, r2
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	440a      	add	r2, r1
 8008930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008938:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008950:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008958:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	4413      	add	r3, r2
 8008962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008966:	461a      	mov	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	1ff80000 	.word	0x1ff80000

08008980 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7ff f981 	bl	8007c98 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008996:	2110      	movs	r1, #16
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff f9b9 	bl	8007d10 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff f9dc 	bl	8007d5c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80089a4:	2300      	movs	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	e01f      	b.n	80089ea <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089de:	461a      	mov	r2, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	3301      	adds	r3, #1
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b0f      	cmp	r3, #15
 80089ee:	d9dc      	bls.n	80089aa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089f0:	2300      	movs	r3, #0
 80089f2:	613b      	str	r3, [r7, #16]
 80089f4:	e034      	b.n	8008a60 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a0c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a1c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	3301      	adds	r3, #1
 8008a34:	617b      	str	r3, [r7, #20]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a3c:	d80c      	bhi.n	8008a58 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a54:	d0ec      	beq.n	8008a30 <USB_StopHost+0xb0>
 8008a56:	e000      	b.n	8008a5a <USB_StopHost+0xda>
        break;
 8008a58:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	2b0f      	cmp	r3, #15
 8008a64:	d9c7      	bls.n	80089f6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a72:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff f8fa 	bl	8007c76 <USB_EnableGlobalInt>

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a8c:	b590      	push	{r4, r7, lr}
 8008a8e:	b089      	sub	sp, #36	; 0x24
 8008a90:	af04      	add	r7, sp, #16
 8008a92:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008a94:	2301      	movs	r3, #1
 8008a96:	2202      	movs	r2, #2
 8008a98:	2102      	movs	r1, #2
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fc66 	bl	800936c <USBH_FindInterface>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	2bff      	cmp	r3, #255	; 0xff
 8008aa8:	d002      	beq.n	8008ab0 <USBH_CDC_InterfaceInit+0x24>
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d901      	bls.n	8008ab4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e13d      	b.n	8008d30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fc3b 	bl	8009334 <USBH_SelectInterface>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e131      	b.n	8008d30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008ad2:	2050      	movs	r0, #80	; 0x50
 8008ad4:	f002 fa00 	bl	800aed8 <malloc>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008aec:	2302      	movs	r3, #2
 8008aee:	e11f      	b.n	8008d30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008af0:	2250      	movs	r2, #80	; 0x50
 8008af2:	2100      	movs	r1, #0
 8008af4:	68b8      	ldr	r0, [r7, #8]
 8008af6:	f002 f9ff 	bl	800aef8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	211a      	movs	r1, #26
 8008b00:	fb01 f303 	mul.w	r3, r1, r3
 8008b04:	4413      	add	r3, r2
 8008b06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	b25b      	sxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	da15      	bge.n	8008b3e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	211a      	movs	r1, #26
 8008b18:	fb01 f303 	mul.w	r3, r1, r3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b22:	781a      	ldrb	r2, [r3, #0]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	211a      	movs	r1, #26
 8008b2e:	fb01 f303 	mul.w	r3, r1, r3
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b38:	881a      	ldrh	r2, [r3, #0]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	785b      	ldrb	r3, [r3, #1]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 fe32 	bl	800a7ae <USBH_AllocPipe>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	7819      	ldrb	r1, [r3, #0]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	7858      	ldrb	r0, [r3, #1]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	8952      	ldrh	r2, [r2, #10]
 8008b6a:	9202      	str	r2, [sp, #8]
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	9201      	str	r2, [sp, #4]
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	4623      	mov	r3, r4
 8008b74:	4602      	mov	r2, r0
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 fdea 	bl	800a750 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2200      	movs	r2, #0
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f002 f8f9 	bl	800ad7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	210a      	movs	r1, #10
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fbeb 	bl	800936c <USBH_FindInterface>
 8008b96:	4603      	mov	r3, r0
 8008b98:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
 8008b9c:	2bff      	cmp	r3, #255	; 0xff
 8008b9e:	d002      	beq.n	8008ba6 <USBH_CDC_InterfaceInit+0x11a>
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d901      	bls.n	8008baa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e0c2      	b.n	8008d30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	211a      	movs	r1, #26
 8008bb0:	fb01 f303 	mul.w	r3, r1, r3
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	b25b      	sxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	da16      	bge.n	8008bf0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	211a      	movs	r1, #26
 8008bc8:	fb01 f303 	mul.w	r3, r1, r3
 8008bcc:	4413      	add	r3, r2
 8008bce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bd2:	781a      	ldrb	r2, [r3, #0]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	211a      	movs	r1, #26
 8008bde:	fb01 f303 	mul.w	r3, r1, r3
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008be8:	881a      	ldrh	r2, [r3, #0]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	835a      	strh	r2, [r3, #26]
 8008bee:	e015      	b.n	8008c1c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	211a      	movs	r1, #26
 8008bf6:	fb01 f303 	mul.w	r3, r1, r3
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	211a      	movs	r1, #26
 8008c0c:	fb01 f303 	mul.w	r3, r1, r3
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008c16:	881a      	ldrh	r2, [r3, #0]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	211a      	movs	r1, #26
 8008c22:	fb01 f303 	mul.w	r3, r1, r3
 8008c26:	4413      	add	r3, r2
 8008c28:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	b25b      	sxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	da16      	bge.n	8008c62 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	211a      	movs	r1, #26
 8008c3a:	fb01 f303 	mul.w	r3, r1, r3
 8008c3e:	4413      	add	r3, r2
 8008c40:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c44:	781a      	ldrb	r2, [r3, #0]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	211a      	movs	r1, #26
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c5a:	881a      	ldrh	r2, [r3, #0]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	835a      	strh	r2, [r3, #26]
 8008c60:	e015      	b.n	8008c8e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	211a      	movs	r1, #26
 8008c68:	fb01 f303 	mul.w	r3, r1, r3
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	211a      	movs	r1, #26
 8008c7e:	fb01 f303 	mul.w	r3, r1, r3
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c88:	881a      	ldrh	r2, [r3, #0]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	7b9b      	ldrb	r3, [r3, #14]
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 fd8a 	bl	800a7ae <USBH_AllocPipe>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	7bdb      	ldrb	r3, [r3, #15]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 fd80 	bl	800a7ae <USBH_AllocPipe>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	7b59      	ldrb	r1, [r3, #13]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	7b98      	ldrb	r0, [r3, #14]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	8b12      	ldrh	r2, [r2, #24]
 8008cce:	9202      	str	r2, [sp, #8]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	9201      	str	r2, [sp, #4]
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	4602      	mov	r2, r0
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 fd38 	bl	800a750 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	7b19      	ldrb	r1, [r3, #12]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	7bd8      	ldrb	r0, [r3, #15]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	8b52      	ldrh	r2, [r2, #26]
 8008cf8:	9202      	str	r2, [sp, #8]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	9201      	str	r2, [sp, #4]
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	4623      	mov	r3, r4
 8008d02:	4602      	mov	r2, r0
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 fd23 	bl	800a750 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	7b5b      	ldrb	r3, [r3, #13]
 8008d16:	2200      	movs	r2, #0
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f002 f82e 	bl	800ad7c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	7b1b      	ldrb	r3, [r3, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f002 f827 	bl	800ad7c <USBH_LL_SetToggle>

  return USBH_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd90      	pop	{r4, r7, pc}

08008d38 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00e      	beq.n	8008d70 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f001 fd18 	bl	800a78e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 fd43 	bl	800a7f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	7b1b      	ldrb	r3, [r3, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00e      	beq.n	8008d96 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	7b1b      	ldrb	r3, [r3, #12]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 fd05 	bl	800a78e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	7b1b      	ldrb	r3, [r3, #12]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 fd30 	bl	800a7f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	7b5b      	ldrb	r3, [r3, #13]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00e      	beq.n	8008dbc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	7b5b      	ldrb	r3, [r3, #13]
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 fcf2 	bl	800a78e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	7b5b      	ldrb	r3, [r3, #13]
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 fd1d 	bl	800a7f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f002 f889 	bl	800aee8 <free>
    phost->pActiveClass->pData = 0U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ddc:	2200      	movs	r2, #0
 8008dde:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3340      	adds	r3, #64	; 0x40
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f8b1 	bl	8008f6a <GetLineCoding>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008e0c:	7afb      	ldrb	r3, [r7, #11]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e18:	2102      	movs	r1, #2
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e30:	2301      	movs	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d877      	bhi.n	8008f3c <USBH_CDC_Process+0x114>
 8008e4c:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <USBH_CDC_Process+0x2c>)
 8008e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e52:	bf00      	nop
 8008e54:	08008e69 	.word	0x08008e69
 8008e58:	08008e6f 	.word	0x08008e6f
 8008e5c:	08008e9f 	.word	0x08008e9f
 8008e60:	08008f13 	.word	0x08008f13
 8008e64:	08008f21 	.word	0x08008f21
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e6c:	e06d      	b.n	8008f4a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f897 	bl	8008fa8 <SetLineCoding>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d104      	bne.n	8008e8e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e8c:	e058      	b.n	8008f40 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d055      	beq.n	8008f40 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2204      	movs	r2, #4
 8008e98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e9c:	e050      	b.n	8008f40 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	3340      	adds	r3, #64	; 0x40
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f860 	bl	8008f6a <GetLineCoding>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d126      	bne.n	8008f02 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ec6:	791b      	ldrb	r3, [r3, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d13b      	bne.n	8008f44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ed6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d133      	bne.n	8008f44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d12b      	bne.n	8008f44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ef4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d124      	bne.n	8008f44 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f958 	bl	80091b0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008f00:	e020      	b.n	8008f44 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d01d      	beq.n	8008f44 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2204      	movs	r2, #4
 8008f0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008f10:	e018      	b.n	8008f44 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f867 	bl	8008fe6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f8da 	bl	80090d2 <CDC_ProcessReception>
      break;
 8008f1e:	e014      	b.n	8008f4a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008f20:	2100      	movs	r1, #0
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 ffe3 	bl	8009eee <USBH_ClrFeature>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10a      	bne.n	8008f48 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008f3a:	e005      	b.n	8008f48 <USBH_CDC_Process+0x120>

    default:
      break;
 8008f3c:	bf00      	nop
 8008f3e:	e004      	b.n	8008f4a <USBH_CDC_Process+0x122>
      break;
 8008f40:	bf00      	nop
 8008f42:	e002      	b.n	8008f4a <USBH_CDC_Process+0x122>
      break;
 8008f44:	bf00      	nop
 8008f46:	e000      	b.n	8008f4a <USBH_CDC_Process+0x122>
      break;
 8008f48:	bf00      	nop

  }

  return status;
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	22a1      	movs	r2, #161	; 0xa1
 8008f78:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2221      	movs	r2, #33	; 0x21
 8008f7e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2207      	movs	r2, #7
 8008f90:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2207      	movs	r2, #7
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 f988 	bl	800a2ae <USBH_CtlReq>
 8008f9e:	4603      	mov	r3, r0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2221      	movs	r2, #33	; 0x21
 8008fb6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2207      	movs	r2, #7
 8008fce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	2207      	movs	r2, #7
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 f969 	bl	800a2ae <USBH_CtlReq>
 8008fdc:	4603      	mov	r3, r0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b086      	sub	sp, #24
 8008fea:	af02      	add	r7, sp, #8
 8008fec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009002:	2b01      	cmp	r3, #1
 8009004:	d002      	beq.n	800900c <CDC_ProcessTransmission+0x26>
 8009006:	2b02      	cmp	r3, #2
 8009008:	d023      	beq.n	8009052 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800900a:	e05e      	b.n	80090ca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	8b12      	ldrh	r2, [r2, #24]
 8009014:	4293      	cmp	r3, r2
 8009016:	d90b      	bls.n	8009030 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	69d9      	ldr	r1, [r3, #28]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8b1a      	ldrh	r2, [r3, #24]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	7b5b      	ldrb	r3, [r3, #13]
 8009024:	2001      	movs	r0, #1
 8009026:	9000      	str	r0, [sp, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 fb4e 	bl	800a6ca <USBH_BulkSendData>
 800902e:	e00b      	b.n	8009048 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	7b5b      	ldrb	r3, [r3, #13]
 800903e:	2001      	movs	r0, #1
 8009040:	9000      	str	r0, [sp, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 fb41 	bl	800a6ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2202      	movs	r2, #2
 800904c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009050:	e03b      	b.n	80090ca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	7b5b      	ldrb	r3, [r3, #13]
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 fe65 	bl	800ad28 <USBH_LL_GetURBState>
 800905e:	4603      	mov	r3, r0
 8009060:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009062:	7afb      	ldrb	r3, [r7, #11]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d128      	bne.n	80090ba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	8b12      	ldrh	r2, [r2, #24]
 8009070:	4293      	cmp	r3, r2
 8009072:	d90e      	bls.n	8009092 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	8b12      	ldrh	r2, [r2, #24]
 800907c:	1a9a      	subs	r2, r3, r2
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	8b12      	ldrh	r2, [r2, #24]
 800908a:	441a      	add	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	61da      	str	r2, [r3, #28]
 8009090:	e002      	b.n	8009098 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80090a8:	e00e      	b.n	80090c8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f868 	bl	8009188 <USBH_CDC_TransmitCallback>
      break;
 80090b8:	e006      	b.n	80090c8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80090ba:	7afb      	ldrb	r3, [r7, #11]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d103      	bne.n	80090c8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80090c8:	bf00      	nop
  }
}
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b086      	sub	sp, #24
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090e4:	2300      	movs	r3, #0
 80090e6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d002      	beq.n	80090f8 <CDC_ProcessReception+0x26>
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d00e      	beq.n	8009114 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80090f6:	e043      	b.n	8009180 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	6a19      	ldr	r1, [r3, #32]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	8b5a      	ldrh	r2, [r3, #26]
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	7b1b      	ldrb	r3, [r3, #12]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 fb05 	bl	800a714 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2204      	movs	r2, #4
 800910e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009112:	e035      	b.n	8009180 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	7b1b      	ldrb	r3, [r3, #12]
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 fe04 	bl	800ad28 <USBH_LL_GetURBState>
 8009120:	4603      	mov	r3, r0
 8009122:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009124:	7cfb      	ldrb	r3, [r7, #19]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d129      	bne.n	800917e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	7b1b      	ldrb	r3, [r3, #12]
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fd67 	bl	800ac04 <USBH_LL_GetLastXferSize>
 8009136:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	429a      	cmp	r2, r3
 8009140:	d016      	beq.n	8009170 <CDC_ProcessReception+0x9e>
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	8b5b      	ldrh	r3, [r3, #26]
 8009146:	461a      	mov	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4293      	cmp	r3, r2
 800914c:	d910      	bls.n	8009170 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	1ad2      	subs	r2, r2, r3
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	6a1a      	ldr	r2, [r3, #32]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	441a      	add	r2, r3
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2203      	movs	r2, #3
 800916a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800916e:	e006      	b.n	800917e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f80f 	bl	800919c <USBH_CDC_ReceiveCallback>
      break;
 800917e:	bf00      	nop
  }
}
 8009180:	bf00      	nop
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4613      	mov	r3, r2
 80091d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80091d8:	2302      	movs	r3, #2
 80091da:	e029      	b.n	8009230 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	79fa      	ldrb	r2, [r7, #7]
 80091e0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 f81f 	bl	8009238 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d003      	beq.n	8009228 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f001 fc37 	bl	800aa9c <USBH_LL_Init>

  return USBH_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	e009      	b.n	800925e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	33e0      	adds	r3, #224	; 0xe0
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	2200      	movs	r2, #0
 8009256:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	3301      	adds	r3, #1
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b0e      	cmp	r3, #14
 8009262:	d9f2      	bls.n	800924a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	e009      	b.n	800927e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3301      	adds	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009284:	d3f1      	bcc.n	800926a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2240      	movs	r2, #64	; 0x40
 80092aa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d016      	beq.n	8009322 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10e      	bne.n	800931c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009304:	1c59      	adds	r1, r3, #1
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	33de      	adds	r3, #222	; 0xde
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	73fb      	strb	r3, [r7, #15]
 800931a:	e004      	b.n	8009326 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800931c:	2302      	movs	r3, #2
 800931e:	73fb      	strb	r3, [r7, #15]
 8009320:	e001      	b.n	8009326 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009322:	2302      	movs	r3, #2
 8009324:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800934a:	78fa      	ldrb	r2, [r7, #3]
 800934c:	429a      	cmp	r2, r3
 800934e:	d204      	bcs.n	800935a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	78fa      	ldrb	r2, [r7, #3]
 8009354:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009358:	e001      	b.n	800935e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800935a:	2302      	movs	r3, #2
 800935c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800935e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	4608      	mov	r0, r1
 8009376:	4611      	mov	r1, r2
 8009378:	461a      	mov	r2, r3
 800937a:	4603      	mov	r3, r0
 800937c:	70fb      	strb	r3, [r7, #3]
 800937e:	460b      	mov	r3, r1
 8009380:	70bb      	strb	r3, [r7, #2]
 8009382:	4613      	mov	r3, r2
 8009384:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800938a:	2300      	movs	r3, #0
 800938c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009394:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009396:	e025      	b.n	80093e4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	221a      	movs	r2, #26
 800939c:	fb02 f303 	mul.w	r3, r2, r3
 80093a0:	3308      	adds	r3, #8
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	4413      	add	r3, r2
 80093a6:	3302      	adds	r3, #2
 80093a8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	795b      	ldrb	r3, [r3, #5]
 80093ae:	78fa      	ldrb	r2, [r7, #3]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d002      	beq.n	80093ba <USBH_FindInterface+0x4e>
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	2bff      	cmp	r3, #255	; 0xff
 80093b8:	d111      	bne.n	80093de <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80093be:	78ba      	ldrb	r2, [r7, #2]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d002      	beq.n	80093ca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80093c4:	78bb      	ldrb	r3, [r7, #2]
 80093c6:	2bff      	cmp	r3, #255	; 0xff
 80093c8:	d109      	bne.n	80093de <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80093ce:	787a      	ldrb	r2, [r7, #1]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d002      	beq.n	80093da <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093d4:	787b      	ldrb	r3, [r7, #1]
 80093d6:	2bff      	cmp	r3, #255	; 0xff
 80093d8:	d101      	bne.n	80093de <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	e006      	b.n	80093ec <USBH_FindInterface+0x80>
    }
    if_ix++;
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	3301      	adds	r3, #1
 80093e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d9d6      	bls.n	8009398 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80093ea:	23ff      	movs	r3, #255	; 0xff
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	371c      	adds	r7, #28
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 fb87 	bl	800ab14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009406:	2101      	movs	r1, #1
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 fca0 	bl	800ad4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af04      	add	r7, sp, #16
 800941e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009420:	2302      	movs	r3, #2
 8009422:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b01      	cmp	r3, #1
 8009432:	d102      	bne.n	800943a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2203      	movs	r2, #3
 8009438:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b0b      	cmp	r3, #11
 8009442:	f200 81b3 	bhi.w	80097ac <USBH_Process+0x394>
 8009446:	a201      	add	r2, pc, #4	; (adr r2, 800944c <USBH_Process+0x34>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	0800947d 	.word	0x0800947d
 8009450:	080094af 	.word	0x080094af
 8009454:	08009517 	.word	0x08009517
 8009458:	08009747 	.word	0x08009747
 800945c:	080097ad 	.word	0x080097ad
 8009460:	080095bb 	.word	0x080095bb
 8009464:	080096ed 	.word	0x080096ed
 8009468:	080095f1 	.word	0x080095f1
 800946c:	08009611 	.word	0x08009611
 8009470:	08009631 	.word	0x08009631
 8009474:	0800965f 	.word	0x0800965f
 8009478:	0800972f 	.word	0x0800972f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 8193 	beq.w	80097b0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009490:	20c8      	movs	r0, #200	; 0xc8
 8009492:	f001 fca3 	bl	800addc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 fb99 	bl	800abce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80094ac:	e180      	b.n	80097b0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d107      	bne.n	80094c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094c6:	e182      	b.n	80097ce <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094d2:	d914      	bls.n	80094fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094da:	3301      	adds	r3, #1
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d903      	bls.n	80094f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	220d      	movs	r2, #13
 80094f2:	701a      	strb	r2, [r3, #0]
      break;
 80094f4:	e16b      	b.n	80097ce <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	701a      	strb	r2, [r3, #0]
      break;
 80094fc:	e167      	b.n	80097ce <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009504:	f103 020a 	add.w	r2, r3, #10
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800950e:	200a      	movs	r0, #10
 8009510:	f001 fc64 	bl	800addc <USBH_Delay>
      break;
 8009514:	e15b      	b.n	80097ce <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d005      	beq.n	800952c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009526:	2104      	movs	r1, #4
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800952c:	2064      	movs	r0, #100	; 0x64
 800952e:	f001 fc55 	bl	800addc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 fb24 	bl	800ab80 <USBH_LL_GetSpeed>
 8009538:	4603      	mov	r3, r0
 800953a:	461a      	mov	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2205      	movs	r2, #5
 8009546:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009548:	2100      	movs	r1, #0
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 f92f 	bl	800a7ae <USBH_AllocPipe>
 8009550:	4603      	mov	r3, r0
 8009552:	461a      	mov	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009558:	2180      	movs	r1, #128	; 0x80
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 f927 	bl	800a7ae <USBH_AllocPipe>
 8009560:	4603      	mov	r3, r0
 8009562:	461a      	mov	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	7919      	ldrb	r1, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800957c:	b292      	uxth	r2, r2
 800957e:	9202      	str	r2, [sp, #8]
 8009580:	2200      	movs	r2, #0
 8009582:	9201      	str	r2, [sp, #4]
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	4603      	mov	r3, r0
 8009588:	2280      	movs	r2, #128	; 0x80
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 f8e0 	bl	800a750 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	7959      	ldrb	r1, [r3, #5]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80095a4:	b292      	uxth	r2, r2
 80095a6:	9202      	str	r2, [sp, #8]
 80095a8:	2200      	movs	r2, #0
 80095aa:	9201      	str	r2, [sp, #4]
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	4603      	mov	r3, r0
 80095b0:	2200      	movs	r2, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 f8cc 	bl	800a750 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095b8:	e109      	b.n	80097ce <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f90c 	bl	80097d8 <USBH_HandleEnum>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f040 80f3 	bne.w	80097b4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d103      	bne.n	80095e8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2208      	movs	r2, #8
 80095e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80095e6:	e0e5      	b.n	80097b4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2207      	movs	r2, #7
 80095ec:	701a      	strb	r2, [r3, #0]
      break;
 80095ee:	e0e1      	b.n	80097b4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 80de 	beq.w	80097b8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009602:	2101      	movs	r1, #1
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2208      	movs	r2, #8
 800960c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800960e:	e0d3      	b.n	80097b8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009616:	b29b      	uxth	r3, r3
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fc20 	bl	8009e60 <USBH_SetCfg>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	f040 80ca 	bne.w	80097bc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2209      	movs	r2, #9
 800962c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800962e:	e0c5      	b.n	80097bc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00b      	beq.n	8009656 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800963e:	2101      	movs	r1, #1
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fc30 	bl	8009ea6 <USBH_SetFeature>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	f040 80b9 	bne.w	80097c0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	220a      	movs	r2, #10
 8009652:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009654:	e0b4      	b.n	80097c0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	220a      	movs	r2, #10
 800965a:	701a      	strb	r2, [r3, #0]
      break;
 800965c:	e0b0      	b.n	80097c0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 80ad 	beq.w	80097c4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]
 8009676:	e016      	b.n	80096a6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009678:	7bfa      	ldrb	r2, [r7, #15]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	32de      	adds	r2, #222	; 0xde
 800967e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009682:	791a      	ldrb	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800968a:	429a      	cmp	r2, r3
 800968c:	d108      	bne.n	80096a0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800968e:	7bfa      	ldrb	r2, [r7, #15]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	32de      	adds	r2, #222	; 0xde
 8009694:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800969e:	e005      	b.n	80096ac <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	3301      	adds	r3, #1
 80096a4:	73fb      	strb	r3, [r7, #15]
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0e5      	beq.n	8009678 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d016      	beq.n	80096e4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	4798      	blx	r3
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d109      	bne.n	80096dc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2206      	movs	r2, #6
 80096cc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096d4:	2103      	movs	r1, #3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096da:	e073      	b.n	80097c4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	220d      	movs	r2, #13
 80096e0:	701a      	strb	r2, [r3, #0]
      break;
 80096e2:	e06f      	b.n	80097c4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	220d      	movs	r2, #13
 80096e8:	701a      	strb	r2, [r3, #0]
      break;
 80096ea:	e06b      	b.n	80097c4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d017      	beq.n	8009726 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	4798      	blx	r3
 8009702:	4603      	mov	r3, r0
 8009704:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d103      	bne.n	8009716 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	220b      	movs	r2, #11
 8009712:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009714:	e058      	b.n	80097c8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b02      	cmp	r3, #2
 800971c:	d154      	bne.n	80097c8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	220d      	movs	r2, #13
 8009722:	701a      	strb	r2, [r3, #0]
      break;
 8009724:	e050      	b.n	80097c8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	220d      	movs	r2, #13
 800972a:	701a      	strb	r2, [r3, #0]
      break;
 800972c:	e04c      	b.n	80097c8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009734:	2b00      	cmp	r3, #0
 8009736:	d049      	beq.n	80097cc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	4798      	blx	r3
      }
      break;
 8009744:	e042      	b.n	80097cc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff fd72 	bl	8009238 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d009      	beq.n	8009772 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009782:	2105      	movs	r1, #5
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b01      	cmp	r3, #1
 8009792:	d107      	bne.n	80097a4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7ff fe2b 	bl	80093f8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097a2:	e014      	b.n	80097ce <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f001 f9b5 	bl	800ab14 <USBH_LL_Start>
      break;
 80097aa:	e010      	b.n	80097ce <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80097ac:	bf00      	nop
 80097ae:	e00e      	b.n	80097ce <USBH_Process+0x3b6>
      break;
 80097b0:	bf00      	nop
 80097b2:	e00c      	b.n	80097ce <USBH_Process+0x3b6>
      break;
 80097b4:	bf00      	nop
 80097b6:	e00a      	b.n	80097ce <USBH_Process+0x3b6>
    break;
 80097b8:	bf00      	nop
 80097ba:	e008      	b.n	80097ce <USBH_Process+0x3b6>
      break;
 80097bc:	bf00      	nop
 80097be:	e006      	b.n	80097ce <USBH_Process+0x3b6>
      break;
 80097c0:	bf00      	nop
 80097c2:	e004      	b.n	80097ce <USBH_Process+0x3b6>
      break;
 80097c4:	bf00      	nop
 80097c6:	e002      	b.n	80097ce <USBH_Process+0x3b6>
      break;
 80097c8:	bf00      	nop
 80097ca:	e000      	b.n	80097ce <USBH_Process+0x3b6>
      break;
 80097cc:	bf00      	nop
  }
  return USBH_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af04      	add	r7, sp, #16
 80097de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80097e0:	2301      	movs	r3, #1
 80097e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80097e4:	2301      	movs	r3, #1
 80097e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	f200 81c1 	bhi.w	8009b74 <USBH_HandleEnum+0x39c>
 80097f2:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <USBH_HandleEnum+0x20>)
 80097f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f8:	08009819 	.word	0x08009819
 80097fc:	080098d7 	.word	0x080098d7
 8009800:	08009941 	.word	0x08009941
 8009804:	080099cf 	.word	0x080099cf
 8009808:	08009a39 	.word	0x08009a39
 800980c:	08009aa9 	.word	0x08009aa9
 8009810:	08009aef 	.word	0x08009aef
 8009814:	08009b35 	.word	0x08009b35
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009818:	2108      	movs	r1, #8
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa50 	bl	8009cc0 <USBH_Get_DevDesc>
 8009820:	4603      	mov	r3, r0
 8009822:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d130      	bne.n	800988c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	7919      	ldrb	r1, [r3, #4]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800984e:	b292      	uxth	r2, r2
 8009850:	9202      	str	r2, [sp, #8]
 8009852:	2200      	movs	r2, #0
 8009854:	9201      	str	r2, [sp, #4]
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	4603      	mov	r3, r0
 800985a:	2280      	movs	r2, #128	; 0x80
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 ff77 	bl	800a750 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	7959      	ldrb	r1, [r3, #5]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009876:	b292      	uxth	r2, r2
 8009878:	9202      	str	r2, [sp, #8]
 800987a:	2200      	movs	r2, #0
 800987c:	9201      	str	r2, [sp, #4]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	4603      	mov	r3, r0
 8009882:	2200      	movs	r2, #0
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 ff63 	bl	800a750 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800988a:	e175      	b.n	8009b78 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	2b03      	cmp	r3, #3
 8009890:	f040 8172 	bne.w	8009b78 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800989a:	3301      	adds	r3, #1
 800989c:	b2da      	uxtb	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098aa:	2b03      	cmp	r3, #3
 80098ac:	d903      	bls.n	80098b6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	220d      	movs	r2, #13
 80098b2:	701a      	strb	r2, [r3, #0]
      break;
 80098b4:	e160      	b.n	8009b78 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	795b      	ldrb	r3, [r3, #5]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 ff97 	bl	800a7f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	791b      	ldrb	r3, [r3, #4]
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 ff91 	bl	800a7f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	701a      	strb	r2, [r3, #0]
      break;
 80098d4:	e150      	b.n	8009b78 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80098d6:	2112      	movs	r1, #18
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f9f1 	bl	8009cc0 <USBH_Get_DevDesc>
 80098de:	4603      	mov	r3, r0
 80098e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d103      	bne.n	80098f0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098ee:	e145      	b.n	8009b7c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	f040 8142 	bne.w	8009b7c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098fe:	3301      	adds	r3, #1
 8009900:	b2da      	uxtb	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800990e:	2b03      	cmp	r3, #3
 8009910:	d903      	bls.n	800991a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	220d      	movs	r2, #13
 8009916:	701a      	strb	r2, [r3, #0]
      break;
 8009918:	e130      	b.n	8009b7c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	795b      	ldrb	r3, [r3, #5]
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 ff65 	bl	800a7f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	791b      	ldrb	r3, [r3, #4]
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 ff5f 	bl	800a7f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	701a      	strb	r2, [r3, #0]
      break;
 800993e:	e11d      	b.n	8009b7c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009940:	2101      	movs	r1, #1
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa68 	bl	8009e18 <USBH_SetAddress>
 8009948:	4603      	mov	r3, r0
 800994a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d132      	bne.n	80099b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009952:	2002      	movs	r0, #2
 8009954:	f001 fa42 	bl	800addc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2203      	movs	r2, #3
 8009964:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7919      	ldrb	r1, [r3, #4]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800997a:	b292      	uxth	r2, r2
 800997c:	9202      	str	r2, [sp, #8]
 800997e:	2200      	movs	r2, #0
 8009980:	9201      	str	r2, [sp, #4]
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	4603      	mov	r3, r0
 8009986:	2280      	movs	r2, #128	; 0x80
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fee1 	bl	800a750 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	7959      	ldrb	r1, [r3, #5]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80099a2:	b292      	uxth	r2, r2
 80099a4:	9202      	str	r2, [sp, #8]
 80099a6:	2200      	movs	r2, #0
 80099a8:	9201      	str	r2, [sp, #4]
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	4603      	mov	r3, r0
 80099ae:	2200      	movs	r2, #0
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fecd 	bl	800a750 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80099b6:	e0e3      	b.n	8009b80 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	f040 80e0 	bne.w	8009b80 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	220d      	movs	r2, #13
 80099c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	705a      	strb	r2, [r3, #1]
      break;
 80099cc:	e0d8      	b.n	8009b80 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80099ce:	2109      	movs	r1, #9
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f99d 	bl	8009d10 <USBH_Get_CfgDesc>
 80099d6:	4603      	mov	r3, r0
 80099d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d103      	bne.n	80099e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2204      	movs	r2, #4
 80099e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099e6:	e0cd      	b.n	8009b84 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	f040 80ca 	bne.w	8009b84 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099f6:	3301      	adds	r3, #1
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d903      	bls.n	8009a12 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	220d      	movs	r2, #13
 8009a0e:	701a      	strb	r2, [r3, #0]
      break;
 8009a10:	e0b8      	b.n	8009b84 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	795b      	ldrb	r3, [r3, #5]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fee9 	bl	800a7f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	791b      	ldrb	r3, [r3, #4]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fee3 	bl	800a7f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	701a      	strb	r2, [r3, #0]
      break;
 8009a36:	e0a5      	b.n	8009b84 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 f965 	bl	8009d10 <USBH_Get_CfgDesc>
 8009a46:	4603      	mov	r3, r0
 8009a48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a4a:	7bbb      	ldrb	r3, [r7, #14]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d103      	bne.n	8009a58 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2205      	movs	r2, #5
 8009a54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a56:	e097      	b.n	8009b88 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	f040 8094 	bne.w	8009b88 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a66:	3301      	adds	r3, #1
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d903      	bls.n	8009a82 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	220d      	movs	r2, #13
 8009a7e:	701a      	strb	r2, [r3, #0]
      break;
 8009a80:	e082      	b.n	8009b88 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	795b      	ldrb	r3, [r3, #5]
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 feb1 	bl	800a7f0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	791b      	ldrb	r3, [r3, #4]
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 feab 	bl	800a7f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]
      break;
 8009aa6:	e06f      	b.n	8009b88 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d019      	beq.n	8009ae6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009abe:	23ff      	movs	r3, #255	; 0xff
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f949 	bl	8009d58 <USBH_Get_StringDesc>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d103      	bne.n	8009ad8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2206      	movs	r2, #6
 8009ad4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009ad6:	e059      	b.n	8009b8c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ad8:	7bbb      	ldrb	r3, [r7, #14]
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d156      	bne.n	8009b8c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2206      	movs	r2, #6
 8009ae2:	705a      	strb	r2, [r3, #1]
      break;
 8009ae4:	e052      	b.n	8009b8c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2206      	movs	r2, #6
 8009aea:	705a      	strb	r2, [r3, #1]
      break;
 8009aec:	e04e      	b.n	8009b8c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d019      	beq.n	8009b2c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b04:	23ff      	movs	r3, #255	; 0xff
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f926 	bl	8009d58 <USBH_Get_StringDesc>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d103      	bne.n	8009b1e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2207      	movs	r2, #7
 8009b1a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b1c:	e038      	b.n	8009b90 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d135      	bne.n	8009b90 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2207      	movs	r2, #7
 8009b28:	705a      	strb	r2, [r3, #1]
      break;
 8009b2a:	e031      	b.n	8009b90 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2207      	movs	r2, #7
 8009b30:	705a      	strb	r2, [r3, #1]
      break;
 8009b32:	e02d      	b.n	8009b90 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d017      	beq.n	8009b6e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b4a:	23ff      	movs	r3, #255	; 0xff
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f903 	bl	8009d58 <USBH_Get_StringDesc>
 8009b52:	4603      	mov	r3, r0
 8009b54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d102      	bne.n	8009b62 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009b60:	e018      	b.n	8009b94 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	d115      	bne.n	8009b94 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b6c:	e012      	b.n	8009b94 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
      break;
 8009b72:	e00f      	b.n	8009b94 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009b74:	bf00      	nop
 8009b76:	e00e      	b.n	8009b96 <USBH_HandleEnum+0x3be>
      break;
 8009b78:	bf00      	nop
 8009b7a:	e00c      	b.n	8009b96 <USBH_HandleEnum+0x3be>
      break;
 8009b7c:	bf00      	nop
 8009b7e:	e00a      	b.n	8009b96 <USBH_HandleEnum+0x3be>
      break;
 8009b80:	bf00      	nop
 8009b82:	e008      	b.n	8009b96 <USBH_HandleEnum+0x3be>
      break;
 8009b84:	bf00      	nop
 8009b86:	e006      	b.n	8009b96 <USBH_HandleEnum+0x3be>
      break;
 8009b88:	bf00      	nop
 8009b8a:	e004      	b.n	8009b96 <USBH_HandleEnum+0x3be>
      break;
 8009b8c:	bf00      	nop
 8009b8e:	e002      	b.n	8009b96 <USBH_HandleEnum+0x3be>
      break;
 8009b90:	bf00      	nop
 8009b92:	e000      	b.n	8009b96 <USBH_HandleEnum+0x3be>
      break;
 8009b94:	bf00      	nop
  }
  return Status;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009bb2:	bf00      	nop
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f804 	bl	8009be2 <USBH_HandleSof>
}
 8009bda:	bf00      	nop
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b082      	sub	sp, #8
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b0b      	cmp	r3, #11
 8009bf2:	d10a      	bne.n	8009c0a <USBH_HandleSof+0x28>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	4798      	blx	r3
  }
}
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009c22:	bf00      	nop
}
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b083      	sub	sp, #12
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009c3e:	bf00      	nop
}
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 ff56 	bl	800ab4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	791b      	ldrb	r3, [r3, #4]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fda3 	bl	800a7f0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	795b      	ldrb	r3, [r3, #5]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fd9d 	bl	800a7f0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af02      	add	r7, sp, #8
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009cd2:	78fb      	ldrb	r3, [r7, #3]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cde:	2100      	movs	r1, #0
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f864 	bl	8009dae <USBH_GetDescriptor>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	73fb      	strb	r3, [r7, #15]
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10a      	bne.n	8009d06 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cfc:	78fa      	ldrb	r2, [r7, #3]
 8009cfe:	b292      	uxth	r2, r2
 8009d00:	4619      	mov	r1, r3
 8009d02:	f000 f918 	bl	8009f36 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af02      	add	r7, sp, #8
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	331c      	adds	r3, #28
 8009d20:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009d22:	887b      	ldrh	r3, [r7, #2]
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f83d 	bl	8009dae <USBH_GetDescriptor>
 8009d34:	4603      	mov	r3, r0
 8009d36:	72fb      	strb	r3, [r7, #11]
 8009d38:	7afb      	ldrb	r3, [r7, #11]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d107      	bne.n	8009d4e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d44:	887a      	ldrh	r2, [r7, #2]
 8009d46:	68f9      	ldr	r1, [r7, #12]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 f964 	bl	800a016 <USBH_ParseCfgDesc>
  }

  return status;
 8009d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b088      	sub	sp, #32
 8009d5c:	af02      	add	r7, sp, #8
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	607a      	str	r2, [r7, #4]
 8009d62:	461a      	mov	r2, r3
 8009d64:	460b      	mov	r3, r1
 8009d66:	72fb      	strb	r3, [r7, #11]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009d6c:	7afb      	ldrb	r3, [r7, #11]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d74:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009d7c:	893b      	ldrh	r3, [r7, #8]
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	460b      	mov	r3, r1
 8009d82:	2100      	movs	r1, #0
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 f812 	bl	8009dae <USBH_GetDescriptor>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	75fb      	strb	r3, [r7, #23]
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d107      	bne.n	8009da4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d9a:	893a      	ldrh	r2, [r7, #8]
 8009d9c:	6879      	ldr	r1, [r7, #4]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 fa37 	bl	800a212 <USBH_ParseStringDesc>
  }

  return status;
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	607b      	str	r3, [r7, #4]
 8009db8:	460b      	mov	r3, r1
 8009dba:	72fb      	strb	r3, [r7, #11]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	789b      	ldrb	r3, [r3, #2]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d11c      	bne.n	8009e02 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009dc8:	7afb      	ldrb	r3, [r7, #11]
 8009dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2206      	movs	r2, #6
 8009dd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	893a      	ldrh	r2, [r7, #8]
 8009dde:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009de0:	893b      	ldrh	r3, [r7, #8]
 8009de2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dea:	d104      	bne.n	8009df6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f240 4209 	movw	r2, #1033	; 0x409
 8009df2:	829a      	strh	r2, [r3, #20]
 8009df4:	e002      	b.n	8009dfc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8b3a      	ldrh	r2, [r7, #24]
 8009e00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009e02:	8b3b      	ldrh	r3, [r7, #24]
 8009e04:	461a      	mov	r2, r3
 8009e06:	6879      	ldr	r1, [r7, #4]
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f000 fa50 	bl	800a2ae <USBH_CtlReq>
 8009e0e:	4603      	mov	r3, r0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	789b      	ldrb	r3, [r3, #2]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d10f      	bne.n	8009e4c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2205      	movs	r2, #5
 8009e36:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e38:	78fb      	ldrb	r3, [r7, #3]
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	2100      	movs	r1, #0
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fa2c 	bl	800a2ae <USBH_CtlReq>
 8009e56:	4603      	mov	r3, r0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	789b      	ldrb	r3, [r3, #2]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d10e      	bne.n	8009e92 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2209      	movs	r2, #9
 8009e7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	887a      	ldrh	r2, [r7, #2]
 8009e84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e92:	2200      	movs	r2, #0
 8009e94:	2100      	movs	r1, #0
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fa09 	bl	800a2ae <USBH_CtlReq>
 8009e9c:	4603      	mov	r3, r0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b082      	sub	sp, #8
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	789b      	ldrb	r3, [r3, #2]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d10f      	bne.n	8009eda <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2203      	movs	r2, #3
 8009ec4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009ec6:	78fb      	ldrb	r3, [r7, #3]
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009eda:	2200      	movs	r2, #0
 8009edc:	2100      	movs	r1, #0
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f9e5 	bl	800a2ae <USBH_CtlReq>
 8009ee4:	4603      	mov	r3, r0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	789b      	ldrb	r3, [r3, #2]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d10f      	bne.n	8009f22 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2202      	movs	r2, #2
 8009f06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009f22:	2200      	movs	r2, #0
 8009f24:	2100      	movs	r1, #0
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f9c1 	bl	800a2ae <USBH_CtlReq>
 8009f2c:	4603      	mov	r3, r0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b085      	sub	sp, #20
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	60f8      	str	r0, [r7, #12]
 8009f3e:	60b9      	str	r1, [r7, #8]
 8009f40:	4613      	mov	r3, r2
 8009f42:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	781a      	ldrb	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	785a      	ldrb	r2, [r3, #1]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	3302      	adds	r3, #2
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	3303      	adds	r3, #3
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	021b      	lsls	r3, r3, #8
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	791a      	ldrb	r2, [r3, #4]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	795a      	ldrb	r2, [r3, #5]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	799a      	ldrb	r2, [r3, #6]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	79da      	ldrb	r2, [r3, #7]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009f90:	88fb      	ldrh	r3, [r7, #6]
 8009f92:	2b08      	cmp	r3, #8
 8009f94:	d939      	bls.n	800a00a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	3308      	adds	r3, #8
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	3309      	adds	r3, #9
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	021b      	lsls	r3, r3, #8
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4313      	orrs	r3, r2
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	330a      	adds	r3, #10
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	330b      	adds	r3, #11
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	021b      	lsls	r3, r3, #8
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	330c      	adds	r3, #12
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	330d      	adds	r3, #13
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	021b      	lsls	r3, r3, #8
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	7b9a      	ldrb	r2, [r3, #14]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	7bda      	ldrb	r2, [r3, #15]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	7c1a      	ldrb	r2, [r3, #16]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	7c5a      	ldrb	r2, [r3, #17]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	745a      	strb	r2, [r3, #17]
  }
}
 800a00a:	bf00      	nop
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b08a      	sub	sp, #40	; 0x28
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	60f8      	str	r0, [r7, #12]
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	4613      	mov	r3, r2
 800a022:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	781a      	ldrb	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	785a      	ldrb	r2, [r3, #1]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	3302      	adds	r3, #2
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b29a      	uxth	r2, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	3303      	adds	r3, #3
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	b29b      	uxth	r3, r3
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	4313      	orrs	r3, r2
 800a05e:	b29a      	uxth	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	791a      	ldrb	r2, [r3, #4]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	795a      	ldrb	r2, [r3, #5]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	799a      	ldrb	r2, [r3, #6]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	79da      	ldrb	r2, [r3, #7]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	7a1a      	ldrb	r2, [r3, #8]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a08c:	88fb      	ldrh	r3, [r7, #6]
 800a08e:	2b09      	cmp	r3, #9
 800a090:	d95f      	bls.n	800a152 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a092:	2309      	movs	r3, #9
 800a094:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a096:	2300      	movs	r3, #0
 800a098:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a09a:	e051      	b.n	800a140 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a09c:	f107 0316 	add.w	r3, r7, #22
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0a4:	f000 f8e8 	bl	800a278 <USBH_GetNextDesc>
 800a0a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	785b      	ldrb	r3, [r3, #1]
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	d146      	bne.n	800a140 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a0b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0b6:	221a      	movs	r2, #26
 800a0b8:	fb02 f303 	mul.w	r3, r2, r3
 800a0bc:	3308      	adds	r3, #8
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	3302      	adds	r3, #2
 800a0c4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a0c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0c8:	69f8      	ldr	r0, [r7, #28]
 800a0ca:	f000 f846 	bl	800a15a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0d8:	e022      	b.n	800a120 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0da:	f107 0316 	add.w	r3, r7, #22
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0e2:	f000 f8c9 	bl	800a278 <USBH_GetNextDesc>
 800a0e6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	2b05      	cmp	r3, #5
 800a0ee:	d117      	bne.n	800a120 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a0f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a0f8:	3201      	adds	r2, #1
 800a0fa:	00d2      	lsls	r2, r2, #3
 800a0fc:	211a      	movs	r1, #26
 800a0fe:	fb01 f303 	mul.w	r3, r1, r3
 800a102:	4413      	add	r3, r2
 800a104:	3308      	adds	r3, #8
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	4413      	add	r3, r2
 800a10a:	3304      	adds	r3, #4
 800a10c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a10e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a110:	69b8      	ldr	r0, [r7, #24]
 800a112:	f000 f851 	bl	800a1b8 <USBH_ParseEPDesc>
            ep_ix++;
 800a116:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a11a:	3301      	adds	r3, #1
 800a11c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	791b      	ldrb	r3, [r3, #4]
 800a124:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a128:	429a      	cmp	r2, r3
 800a12a:	d204      	bcs.n	800a136 <USBH_ParseCfgDesc+0x120>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	885a      	ldrh	r2, [r3, #2]
 800a130:	8afb      	ldrh	r3, [r7, #22]
 800a132:	429a      	cmp	r2, r3
 800a134:	d8d1      	bhi.n	800a0da <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a136:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a13a:	3301      	adds	r3, #1
 800a13c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a144:	2b01      	cmp	r3, #1
 800a146:	d804      	bhi.n	800a152 <USBH_ParseCfgDesc+0x13c>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	885a      	ldrh	r2, [r3, #2]
 800a14c:	8afb      	ldrh	r3, [r7, #22]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d8a4      	bhi.n	800a09c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a152:	bf00      	nop
 800a154:	3728      	adds	r7, #40	; 0x28
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b083      	sub	sp, #12
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	781a      	ldrb	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	785a      	ldrb	r2, [r3, #1]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	789a      	ldrb	r2, [r3, #2]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	78da      	ldrb	r2, [r3, #3]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	791a      	ldrb	r2, [r3, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	795a      	ldrb	r2, [r3, #5]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	799a      	ldrb	r2, [r3, #6]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	79da      	ldrb	r2, [r3, #7]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	7a1a      	ldrb	r2, [r3, #8]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	721a      	strb	r2, [r3, #8]
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781a      	ldrb	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	785a      	ldrb	r2, [r3, #1]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	789a      	ldrb	r2, [r3, #2]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	78da      	ldrb	r2, [r3, #3]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	3305      	adds	r3, #5
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	021b      	lsls	r3, r3, #8
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	799a      	ldrb	r2, [r3, #6]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	719a      	strb	r2, [r3, #6]
}
 800a206:	bf00      	nop
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a212:	b480      	push	{r7}
 800a214:	b087      	sub	sp, #28
 800a216:	af00      	add	r7, sp, #0
 800a218:	60f8      	str	r0, [r7, #12]
 800a21a:	60b9      	str	r1, [r7, #8]
 800a21c:	4613      	mov	r3, r2
 800a21e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	3301      	adds	r3, #1
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	2b03      	cmp	r3, #3
 800a228:	d120      	bne.n	800a26c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	1e9a      	subs	r2, r3, #2
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	4293      	cmp	r3, r2
 800a234:	bf28      	it	cs
 800a236:	4613      	movcs	r3, r2
 800a238:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3302      	adds	r3, #2
 800a23e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a240:	2300      	movs	r3, #0
 800a242:	82fb      	strh	r3, [r7, #22]
 800a244:	e00b      	b.n	800a25e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a246:	8afb      	ldrh	r3, [r7, #22]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	4413      	add	r3, r2
 800a24c:	781a      	ldrb	r2, [r3, #0]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	3301      	adds	r3, #1
 800a256:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a258:	8afb      	ldrh	r3, [r7, #22]
 800a25a:	3302      	adds	r3, #2
 800a25c:	82fb      	strh	r3, [r7, #22]
 800a25e:	8afa      	ldrh	r2, [r7, #22]
 800a260:	8abb      	ldrh	r3, [r7, #20]
 800a262:	429a      	cmp	r2, r3
 800a264:	d3ef      	bcc.n	800a246 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2200      	movs	r2, #0
 800a26a:	701a      	strb	r2, [r3, #0]
  }
}
 800a26c:	bf00      	nop
 800a26e:	371c      	adds	r7, #28
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	881a      	ldrh	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	4413      	add	r3, r2
 800a28e:	b29a      	uxth	r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4413      	add	r3, r2
 800a29e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b086      	sub	sp, #24
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	60f8      	str	r0, [r7, #12]
 800a2b6:	60b9      	str	r1, [r7, #8]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	789b      	ldrb	r3, [r3, #2]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d002      	beq.n	800a2ce <USBH_CtlReq+0x20>
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d00f      	beq.n	800a2ec <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a2cc:	e027      	b.n	800a31e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	88fa      	ldrh	r2, [r7, #6]
 800a2d8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ea:	e018      	b.n	800a31e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 f81b 	bl	800a328 <USBH_HandleControl>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <USBH_CtlReq+0x54>
 800a2fc:	7dfb      	ldrb	r3, [r7, #23]
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d106      	bne.n	800a310 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2201      	movs	r2, #1
 800a306:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	761a      	strb	r2, [r3, #24]
      break;
 800a30e:	e005      	b.n	800a31c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a310:	7dfb      	ldrb	r3, [r7, #23]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d102      	bne.n	800a31c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2201      	movs	r2, #1
 800a31a:	709a      	strb	r2, [r3, #2]
      break;
 800a31c:	bf00      	nop
  }
  return status;
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af02      	add	r7, sp, #8
 800a32e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a330:	2301      	movs	r3, #1
 800a332:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a334:	2300      	movs	r3, #0
 800a336:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	7e1b      	ldrb	r3, [r3, #24]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	2b0a      	cmp	r3, #10
 800a340:	f200 8156 	bhi.w	800a5f0 <USBH_HandleControl+0x2c8>
 800a344:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <USBH_HandleControl+0x24>)
 800a346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34a:	bf00      	nop
 800a34c:	0800a379 	.word	0x0800a379
 800a350:	0800a393 	.word	0x0800a393
 800a354:	0800a3fd 	.word	0x0800a3fd
 800a358:	0800a423 	.word	0x0800a423
 800a35c:	0800a45b 	.word	0x0800a45b
 800a360:	0800a485 	.word	0x0800a485
 800a364:	0800a4d7 	.word	0x0800a4d7
 800a368:	0800a4f9 	.word	0x0800a4f9
 800a36c:	0800a535 	.word	0x0800a535
 800a370:	0800a55b 	.word	0x0800a55b
 800a374:	0800a599 	.word	0x0800a599
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f103 0110 	add.w	r1, r3, #16
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	795b      	ldrb	r3, [r3, #5]
 800a382:	461a      	mov	r2, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f943 	bl	800a610 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2202      	movs	r2, #2
 800a38e:	761a      	strb	r2, [r3, #24]
      break;
 800a390:	e139      	b.n	800a606 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	795b      	ldrb	r3, [r3, #5]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fcc5 	bl	800ad28 <USBH_LL_GetURBState>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a3a2:	7bbb      	ldrb	r3, [r7, #14]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d11e      	bne.n	800a3e6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	7c1b      	ldrb	r3, [r3, #16]
 800a3ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	8adb      	ldrh	r3, [r3, #22]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a3ba:	7b7b      	ldrb	r3, [r7, #13]
 800a3bc:	2b80      	cmp	r3, #128	; 0x80
 800a3be:	d103      	bne.n	800a3c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2203      	movs	r2, #3
 800a3c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a3c6:	e115      	b.n	800a5f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2205      	movs	r2, #5
 800a3cc:	761a      	strb	r2, [r3, #24]
      break;
 800a3ce:	e111      	b.n	800a5f4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a3d0:	7b7b      	ldrb	r3, [r7, #13]
 800a3d2:	2b80      	cmp	r3, #128	; 0x80
 800a3d4:	d103      	bne.n	800a3de <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2209      	movs	r2, #9
 800a3da:	761a      	strb	r2, [r3, #24]
      break;
 800a3dc:	e10a      	b.n	800a5f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2207      	movs	r2, #7
 800a3e2:	761a      	strb	r2, [r3, #24]
      break;
 800a3e4:	e106      	b.n	800a5f4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a3e6:	7bbb      	ldrb	r3, [r7, #14]
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d003      	beq.n	800a3f4 <USBH_HandleControl+0xcc>
 800a3ec:	7bbb      	ldrb	r3, [r7, #14]
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	f040 8100 	bne.w	800a5f4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	220b      	movs	r2, #11
 800a3f8:	761a      	strb	r2, [r3, #24]
      break;
 800a3fa:	e0fb      	b.n	800a5f4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a402:	b29a      	uxth	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6899      	ldr	r1, [r3, #8]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	899a      	ldrh	r2, [r3, #12]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	791b      	ldrb	r3, [r3, #4]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f93a 	bl	800a68e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2204      	movs	r2, #4
 800a41e:	761a      	strb	r2, [r3, #24]
      break;
 800a420:	e0f1      	b.n	800a606 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	791b      	ldrb	r3, [r3, #4]
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fc7d 	bl	800ad28 <USBH_LL_GetURBState>
 800a42e:	4603      	mov	r3, r0
 800a430:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a432:	7bbb      	ldrb	r3, [r7, #14]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d102      	bne.n	800a43e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2209      	movs	r2, #9
 800a43c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	2b05      	cmp	r3, #5
 800a442:	d102      	bne.n	800a44a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a444:	2303      	movs	r3, #3
 800a446:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a448:	e0d6      	b.n	800a5f8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	f040 80d3 	bne.w	800a5f8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	220b      	movs	r2, #11
 800a456:	761a      	strb	r2, [r3, #24]
      break;
 800a458:	e0ce      	b.n	800a5f8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6899      	ldr	r1, [r3, #8]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	899a      	ldrh	r2, [r3, #12]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	795b      	ldrb	r3, [r3, #5]
 800a466:	2001      	movs	r0, #1
 800a468:	9000      	str	r0, [sp, #0]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f8ea 	bl	800a644 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a476:	b29a      	uxth	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2206      	movs	r2, #6
 800a480:	761a      	strb	r2, [r3, #24]
      break;
 800a482:	e0c0      	b.n	800a606 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	795b      	ldrb	r3, [r3, #5]
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fc4c 	bl	800ad28 <USBH_LL_GetURBState>
 800a490:	4603      	mov	r3, r0
 800a492:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a494:	7bbb      	ldrb	r3, [r7, #14]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d103      	bne.n	800a4a2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2207      	movs	r2, #7
 800a49e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a4a0:	e0ac      	b.n	800a5fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	2b05      	cmp	r3, #5
 800a4a6:	d105      	bne.n	800a4b4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	220c      	movs	r2, #12
 800a4ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b2:	e0a3      	b.n	800a5fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d103      	bne.n	800a4c2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2205      	movs	r2, #5
 800a4be:	761a      	strb	r2, [r3, #24]
      break;
 800a4c0:	e09c      	b.n	800a5fc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	2b04      	cmp	r3, #4
 800a4c6:	f040 8099 	bne.w	800a5fc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	220b      	movs	r2, #11
 800a4ce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d4:	e092      	b.n	800a5fc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	791b      	ldrb	r3, [r3, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f8d5 	bl	800a68e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2208      	movs	r2, #8
 800a4f4:	761a      	strb	r2, [r3, #24]

      break;
 800a4f6:	e086      	b.n	800a606 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	791b      	ldrb	r3, [r3, #4]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fc12 	bl	800ad28 <USBH_LL_GetURBState>
 800a504:	4603      	mov	r3, r0
 800a506:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d105      	bne.n	800a51a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	220d      	movs	r2, #13
 800a512:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a518:	e072      	b.n	800a600 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a51a:	7bbb      	ldrb	r3, [r7, #14]
 800a51c:	2b04      	cmp	r3, #4
 800a51e:	d103      	bne.n	800a528 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	220b      	movs	r2, #11
 800a524:	761a      	strb	r2, [r3, #24]
      break;
 800a526:	e06b      	b.n	800a600 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a528:	7bbb      	ldrb	r3, [r7, #14]
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	d168      	bne.n	800a600 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a52e:	2303      	movs	r3, #3
 800a530:	73fb      	strb	r3, [r7, #15]
      break;
 800a532:	e065      	b.n	800a600 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	795b      	ldrb	r3, [r3, #5]
 800a538:	2201      	movs	r2, #1
 800a53a:	9200      	str	r2, [sp, #0]
 800a53c:	2200      	movs	r2, #0
 800a53e:	2100      	movs	r1, #0
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f87f 	bl	800a644 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	220a      	movs	r2, #10
 800a556:	761a      	strb	r2, [r3, #24]
      break;
 800a558:	e055      	b.n	800a606 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	795b      	ldrb	r3, [r3, #5]
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fbe1 	bl	800ad28 <USBH_LL_GetURBState>
 800a566:	4603      	mov	r3, r0
 800a568:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d105      	bne.n	800a57c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	220d      	movs	r2, #13
 800a578:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a57a:	e043      	b.n	800a604 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d103      	bne.n	800a58a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2209      	movs	r2, #9
 800a586:	761a      	strb	r2, [r3, #24]
      break;
 800a588:	e03c      	b.n	800a604 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	d139      	bne.n	800a604 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	220b      	movs	r2, #11
 800a594:	761a      	strb	r2, [r3, #24]
      break;
 800a596:	e035      	b.n	800a604 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	7e5b      	ldrb	r3, [r3, #25]
 800a59c:	3301      	adds	r3, #1
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	765a      	strb	r2, [r3, #25]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7e5b      	ldrb	r3, [r3, #25]
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d806      	bhi.n	800a5ba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a5b8:	e025      	b.n	800a606 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5c0:	2106      	movs	r1, #6
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	795b      	ldrb	r3, [r3, #5]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f90c 	bl	800a7f0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	791b      	ldrb	r3, [r3, #4]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f906 	bl	800a7f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ee:	e00a      	b.n	800a606 <USBH_HandleControl+0x2de>

    default:
      break;
 800a5f0:	bf00      	nop
 800a5f2:	e008      	b.n	800a606 <USBH_HandleControl+0x2de>
      break;
 800a5f4:	bf00      	nop
 800a5f6:	e006      	b.n	800a606 <USBH_HandleControl+0x2de>
      break;
 800a5f8:	bf00      	nop
 800a5fa:	e004      	b.n	800a606 <USBH_HandleControl+0x2de>
      break;
 800a5fc:	bf00      	nop
 800a5fe:	e002      	b.n	800a606 <USBH_HandleControl+0x2de>
      break;
 800a600:	bf00      	nop
 800a602:	e000      	b.n	800a606 <USBH_HandleControl+0x2de>
      break;
 800a604:	bf00      	nop
  }

  return status;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b088      	sub	sp, #32
 800a614:	af04      	add	r7, sp, #16
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	4613      	mov	r3, r2
 800a61c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a61e:	79f9      	ldrb	r1, [r7, #7]
 800a620:	2300      	movs	r3, #0
 800a622:	9303      	str	r3, [sp, #12]
 800a624:	2308      	movs	r3, #8
 800a626:	9302      	str	r3, [sp, #8]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	2300      	movs	r3, #0
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	2300      	movs	r3, #0
 800a632:	2200      	movs	r2, #0
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f000 fb46 	bl	800acc6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b088      	sub	sp, #32
 800a648:	af04      	add	r7, sp, #16
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	4611      	mov	r1, r2
 800a650:	461a      	mov	r2, r3
 800a652:	460b      	mov	r3, r1
 800a654:	80fb      	strh	r3, [r7, #6]
 800a656:	4613      	mov	r3, r2
 800a658:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a668:	7979      	ldrb	r1, [r7, #5]
 800a66a:	7e3b      	ldrb	r3, [r7, #24]
 800a66c:	9303      	str	r3, [sp, #12]
 800a66e:	88fb      	ldrh	r3, [r7, #6]
 800a670:	9302      	str	r3, [sp, #8]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	2301      	movs	r3, #1
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	2300      	movs	r3, #0
 800a67c:	2200      	movs	r2, #0
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 fb21 	bl	800acc6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b088      	sub	sp, #32
 800a692:	af04      	add	r7, sp, #16
 800a694:	60f8      	str	r0, [r7, #12]
 800a696:	60b9      	str	r1, [r7, #8]
 800a698:	4611      	mov	r1, r2
 800a69a:	461a      	mov	r2, r3
 800a69c:	460b      	mov	r3, r1
 800a69e:	80fb      	strh	r3, [r7, #6]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6a4:	7979      	ldrb	r1, [r7, #5]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	9303      	str	r3, [sp, #12]
 800a6aa:	88fb      	ldrh	r3, [r7, #6]
 800a6ac:	9302      	str	r3, [sp, #8]
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	9301      	str	r3, [sp, #4]
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 fb03 	bl	800acc6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a6c0:	2300      	movs	r3, #0

}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b088      	sub	sp, #32
 800a6ce:	af04      	add	r7, sp, #16
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	460b      	mov	r3, r1
 800a6da:	80fb      	strh	r3, [r7, #6]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6ee:	7979      	ldrb	r1, [r7, #5]
 800a6f0:	7e3b      	ldrb	r3, [r7, #24]
 800a6f2:	9303      	str	r3, [sp, #12]
 800a6f4:	88fb      	ldrh	r3, [r7, #6]
 800a6f6:	9302      	str	r3, [sp, #8]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	2302      	movs	r3, #2
 800a702:	2200      	movs	r2, #0
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 fade 	bl	800acc6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af04      	add	r7, sp, #16
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	4611      	mov	r1, r2
 800a720:	461a      	mov	r2, r3
 800a722:	460b      	mov	r3, r1
 800a724:	80fb      	strh	r3, [r7, #6]
 800a726:	4613      	mov	r3, r2
 800a728:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a72a:	7979      	ldrb	r1, [r7, #5]
 800a72c:	2300      	movs	r3, #0
 800a72e:	9303      	str	r3, [sp, #12]
 800a730:	88fb      	ldrh	r3, [r7, #6]
 800a732:	9302      	str	r3, [sp, #8]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	2301      	movs	r3, #1
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	2302      	movs	r3, #2
 800a73e:	2201      	movs	r2, #1
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fac0 	bl	800acc6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af04      	add	r7, sp, #16
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	4608      	mov	r0, r1
 800a75a:	4611      	mov	r1, r2
 800a75c:	461a      	mov	r2, r3
 800a75e:	4603      	mov	r3, r0
 800a760:	70fb      	strb	r3, [r7, #3]
 800a762:	460b      	mov	r3, r1
 800a764:	70bb      	strb	r3, [r7, #2]
 800a766:	4613      	mov	r3, r2
 800a768:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a76a:	7878      	ldrb	r0, [r7, #1]
 800a76c:	78ba      	ldrb	r2, [r7, #2]
 800a76e:	78f9      	ldrb	r1, [r7, #3]
 800a770:	8b3b      	ldrh	r3, [r7, #24]
 800a772:	9302      	str	r3, [sp, #8]
 800a774:	7d3b      	ldrb	r3, [r7, #20]
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	7c3b      	ldrb	r3, [r7, #16]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	4603      	mov	r3, r0
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fa53 	bl	800ac2a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b082      	sub	sp, #8
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	460b      	mov	r3, r1
 800a798:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a79a:	78fb      	ldrb	r3, [r7, #3]
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fa72 	bl	800ac88 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f836 	bl	800a82c <USBH_GetFreePipe>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a7c4:	89fb      	ldrh	r3, [r7, #14]
 800a7c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d00a      	beq.n	800a7e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a7ce:	78fa      	ldrb	r2, [r7, #3]
 800a7d0:	89fb      	ldrh	r3, [r7, #14]
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7da:	6879      	ldr	r1, [r7, #4]
 800a7dc:	33e0      	adds	r3, #224	; 0xe0
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	440b      	add	r3, r1
 800a7e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a7e4:	89fb      	ldrh	r3, [r7, #14]
 800a7e6:	b2db      	uxtb	r3, r3
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	2b0a      	cmp	r3, #10
 800a800:	d80d      	bhi.n	800a81e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a802:	78fb      	ldrb	r3, [r7, #3]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	33e0      	adds	r3, #224	; 0xe0
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	33e0      	adds	r3, #224	; 0xe0
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a834:	2300      	movs	r3, #0
 800a836:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
 800a83c:	e00f      	b.n	800a85e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	33e0      	adds	r3, #224	; 0xe0
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	4413      	add	r3, r2
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d102      	bne.n	800a858 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a852:	7bfb      	ldrb	r3, [r7, #15]
 800a854:	b29b      	uxth	r3, r3
 800a856:	e007      	b.n	800a868 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	3301      	adds	r3, #1
 800a85c:	73fb      	strb	r3, [r7, #15]
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	2b0a      	cmp	r3, #10
 800a862:	d9ec      	bls.n	800a83e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a864:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a878:	2201      	movs	r2, #1
 800a87a:	490e      	ldr	r1, [pc, #56]	; (800a8b4 <MX_USB_HOST_Init+0x40>)
 800a87c:	480e      	ldr	r0, [pc, #56]	; (800a8b8 <MX_USB_HOST_Init+0x44>)
 800a87e:	f7fe fca1 	bl	80091c4 <USBH_Init>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a888:	f7f8 f81c 	bl	80028c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a88c:	490b      	ldr	r1, [pc, #44]	; (800a8bc <MX_USB_HOST_Init+0x48>)
 800a88e:	480a      	ldr	r0, [pc, #40]	; (800a8b8 <MX_USB_HOST_Init+0x44>)
 800a890:	f7fe fd26 	bl	80092e0 <USBH_RegisterClass>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a89a:	f7f8 f813 	bl	80028c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a89e:	4806      	ldr	r0, [pc, #24]	; (800a8b8 <MX_USB_HOST_Init+0x44>)
 800a8a0:	f7fe fdaa 	bl	80093f8 <USBH_Start>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a8aa:	f7f8 f80b 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a8ae:	bf00      	nop
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	0800a8d5 	.word	0x0800a8d5
 800a8b8:	20000398 	.word	0x20000398
 800a8bc:	200000c0 	.word	0x200000c0

0800a8c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a8c4:	4802      	ldr	r0, [pc, #8]	; (800a8d0 <MX_USB_HOST_Process+0x10>)
 800a8c6:	f7fe fda7 	bl	8009418 <USBH_Process>
}
 800a8ca:	bf00      	nop
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000398 	.word	0x20000398

0800a8d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d819      	bhi.n	800a91c <USBH_UserProcess+0x48>
 800a8e8:	a201      	add	r2, pc, #4	; (adr r2, 800a8f0 <USBH_UserProcess+0x1c>)
 800a8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ee:	bf00      	nop
 800a8f0:	0800a91d 	.word	0x0800a91d
 800a8f4:	0800a90d 	.word	0x0800a90d
 800a8f8:	0800a91d 	.word	0x0800a91d
 800a8fc:	0800a915 	.word	0x0800a915
 800a900:	0800a905 	.word	0x0800a905
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a904:	4b09      	ldr	r3, [pc, #36]	; (800a92c <USBH_UserProcess+0x58>)
 800a906:	2203      	movs	r2, #3
 800a908:	701a      	strb	r2, [r3, #0]
  break;
 800a90a:	e008      	b.n	800a91e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a90c:	4b07      	ldr	r3, [pc, #28]	; (800a92c <USBH_UserProcess+0x58>)
 800a90e:	2202      	movs	r2, #2
 800a910:	701a      	strb	r2, [r3, #0]
  break;
 800a912:	e004      	b.n	800a91e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a914:	4b05      	ldr	r3, [pc, #20]	; (800a92c <USBH_UserProcess+0x58>)
 800a916:	2201      	movs	r2, #1
 800a918:	701a      	strb	r2, [r3, #0]
  break;
 800a91a:	e000      	b.n	800a91e <USBH_UserProcess+0x4a>

  default:
  break;
 800a91c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a91e:	bf00      	nop
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	20000174 	.word	0x20000174

0800a930 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08a      	sub	sp, #40	; 0x28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a938:	f107 0314 	add.w	r3, r7, #20
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	605a      	str	r2, [r3, #4]
 800a942:	609a      	str	r2, [r3, #8]
 800a944:	60da      	str	r2, [r3, #12]
 800a946:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a950:	d147      	bne.n	800a9e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a952:	2300      	movs	r3, #0
 800a954:	613b      	str	r3, [r7, #16]
 800a956:	4b25      	ldr	r3, [pc, #148]	; (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95a:	4a24      	ldr	r2, [pc, #144]	; (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a95c:	f043 0301 	orr.w	r3, r3, #1
 800a960:	6313      	str	r3, [r2, #48]	; 0x30
 800a962:	4b22      	ldr	r3, [pc, #136]	; (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	613b      	str	r3, [r7, #16]
 800a96c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a96e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a974:	2300      	movs	r3, #0
 800a976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a97c:	f107 0314 	add.w	r3, r7, #20
 800a980:	4619      	mov	r1, r3
 800a982:	481b      	ldr	r0, [pc, #108]	; (800a9f0 <HAL_HCD_MspInit+0xc0>)
 800a984:	f7f9 fc92 	bl	80042ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a988:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a98c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a98e:	2302      	movs	r3, #2
 800a990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a992:	2300      	movs	r3, #0
 800a994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a996:	2300      	movs	r3, #0
 800a998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a99a:	230a      	movs	r3, #10
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a99e:	f107 0314 	add.w	r3, r7, #20
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4812      	ldr	r0, [pc, #72]	; (800a9f0 <HAL_HCD_MspInit+0xc0>)
 800a9a6:	f7f9 fc81 	bl	80042ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9aa:	4b10      	ldr	r3, [pc, #64]	; (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a9ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ae:	4a0f      	ldr	r2, [pc, #60]	; (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a9b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9b4:	6353      	str	r3, [r2, #52]	; 0x34
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60fb      	str	r3, [r7, #12]
 800a9ba:	4b0c      	ldr	r3, [pc, #48]	; (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a9bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9be:	4a0b      	ldr	r2, [pc, #44]	; (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a9c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9c4:	6453      	str	r3, [r2, #68]	; 0x44
 800a9c6:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	2043      	movs	r0, #67	; 0x43
 800a9d8:	f7f9 fa33 	bl	8003e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9dc:	2043      	movs	r0, #67	; 0x43
 800a9de:	f7f9 fa4c 	bl	8003e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9e2:	bf00      	nop
 800a9e4:	3728      	adds	r7, #40	; 0x28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	40023800 	.word	0x40023800
 800a9f0:	40020000 	.word	0x40020000

0800a9f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff f8db 	bl	8009bbe <USBH_LL_IncTimer>
}
 800aa08:	bf00      	nop
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff f913 	bl	8009c4a <USBH_LL_Connect>
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff f91c 	bl	8009c78 <USBH_LL_Disconnect>
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
 800aa54:	4613      	mov	r3, r2
 800aa56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff f8cd 	bl	8009c12 <USBH_LL_PortEnabled>
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff f8cd 	bl	8009c2e <USBH_LL_PortDisabled>
}
 800aa94:	bf00      	nop
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d12a      	bne.n	800ab04 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aaae:	4a18      	ldr	r2, [pc, #96]	; (800ab10 <USBH_LL_Init+0x74>)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a15      	ldr	r2, [pc, #84]	; (800ab10 <USBH_LL_Init+0x74>)
 800aaba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aabe:	4b14      	ldr	r3, [pc, #80]	; (800ab10 <USBH_LL_Init+0x74>)
 800aac0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aac4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aac6:	4b12      	ldr	r3, [pc, #72]	; (800ab10 <USBH_LL_Init+0x74>)
 800aac8:	2208      	movs	r2, #8
 800aaca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aacc:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <USBH_LL_Init+0x74>)
 800aace:	2201      	movs	r2, #1
 800aad0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aad2:	4b0f      	ldr	r3, [pc, #60]	; (800ab10 <USBH_LL_Init+0x74>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aad8:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <USBH_LL_Init+0x74>)
 800aada:	2202      	movs	r2, #2
 800aadc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aade:	4b0c      	ldr	r3, [pc, #48]	; (800ab10 <USBH_LL_Init+0x74>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aae4:	480a      	ldr	r0, [pc, #40]	; (800ab10 <USBH_LL_Init+0x74>)
 800aae6:	f7f9 fdae 	bl	8004646 <HAL_HCD_Init>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aaf0:	f7f7 fee8 	bl	80028c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aaf4:	4806      	ldr	r0, [pc, #24]	; (800ab10 <USBH_LL_Init+0x74>)
 800aaf6:	f7fa f98b 	bl	8004e10 <HAL_HCD_GetCurrentFrame>
 800aafa:	4603      	mov	r3, r0
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff f84e 	bl	8009ba0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20000770 	.word	0x20000770

0800ab14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fa f8fa 	bl	8004d24 <HAL_HCD_Start>
 800ab30:	4603      	mov	r3, r0
 800ab32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 f95c 	bl	800adf4 <USBH_Get_USB_Status>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fa f902 	bl	8004d6a <HAL_HCD_Stop>
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 f941 	bl	800adf4 <USBH_Get_USB_Status>
 800ab72:	4603      	mov	r3, r0
 800ab74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fa f94a 	bl	8004e2c <HAL_HCD_GetCurrentSpeed>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d00c      	beq.n	800abb8 <USBH_LL_GetSpeed+0x38>
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d80d      	bhi.n	800abbe <USBH_LL_GetSpeed+0x3e>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d002      	beq.n	800abac <USBH_LL_GetSpeed+0x2c>
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d003      	beq.n	800abb2 <USBH_LL_GetSpeed+0x32>
 800abaa:	e008      	b.n	800abbe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800abac:	2300      	movs	r3, #0
 800abae:	73fb      	strb	r3, [r7, #15]
    break;
 800abb0:	e008      	b.n	800abc4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800abb2:	2301      	movs	r3, #1
 800abb4:	73fb      	strb	r3, [r7, #15]
    break;
 800abb6:	e005      	b.n	800abc4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800abb8:	2302      	movs	r3, #2
 800abba:	73fb      	strb	r3, [r7, #15]
    break;
 800abbc:	e002      	b.n	800abc4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800abbe:	2301      	movs	r3, #1
 800abc0:	73fb      	strb	r3, [r7, #15]
    break;
 800abc2:	bf00      	nop
  }
  return  speed;
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fa f8dd 	bl	8004da4 <HAL_HCD_ResetPort>
 800abea:	4603      	mov	r3, r0
 800abec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 f8ff 	bl	800adf4 <USBH_Get_USB_Status>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac16:	78fa      	ldrb	r2, [r7, #3]
 800ac18:	4611      	mov	r1, r2
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fa f8e4 	bl	8004de8 <HAL_HCD_HC_GetXferCount>
 800ac20:	4603      	mov	r3, r0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac2a:	b590      	push	{r4, r7, lr}
 800ac2c:	b089      	sub	sp, #36	; 0x24
 800ac2e:	af04      	add	r7, sp, #16
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	4608      	mov	r0, r1
 800ac34:	4611      	mov	r1, r2
 800ac36:	461a      	mov	r2, r3
 800ac38:	4603      	mov	r3, r0
 800ac3a:	70fb      	strb	r3, [r7, #3]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	70bb      	strb	r3, [r7, #2]
 800ac40:	4613      	mov	r3, r2
 800ac42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ac52:	787c      	ldrb	r4, [r7, #1]
 800ac54:	78ba      	ldrb	r2, [r7, #2]
 800ac56:	78f9      	ldrb	r1, [r7, #3]
 800ac58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac5a:	9302      	str	r3, [sp, #8]
 800ac5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	4623      	mov	r3, r4
 800ac6a:	f7f9 fd4e 	bl	800470a <HAL_HCD_HC_Init>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 f8bd 	bl	800adf4 <USBH_Get_USB_Status>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3714      	adds	r7, #20
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd90      	pop	{r4, r7, pc}

0800ac88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	460b      	mov	r3, r1
 800ac92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aca2:	78fa      	ldrb	r2, [r7, #3]
 800aca4:	4611      	mov	r1, r2
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7f9 fdbe 	bl	8004828 <HAL_HCD_HC_Halt>
 800acac:	4603      	mov	r3, r0
 800acae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 f89e 	bl	800adf4 <USBH_Get_USB_Status>
 800acb8:	4603      	mov	r3, r0
 800acba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800acc6:	b590      	push	{r4, r7, lr}
 800acc8:	b089      	sub	sp, #36	; 0x24
 800acca:	af04      	add	r7, sp, #16
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	4608      	mov	r0, r1
 800acd0:	4611      	mov	r1, r2
 800acd2:	461a      	mov	r2, r3
 800acd4:	4603      	mov	r3, r0
 800acd6:	70fb      	strb	r3, [r7, #3]
 800acd8:	460b      	mov	r3, r1
 800acda:	70bb      	strb	r3, [r7, #2]
 800acdc:	4613      	mov	r3, r2
 800acde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800acee:	787c      	ldrb	r4, [r7, #1]
 800acf0:	78ba      	ldrb	r2, [r7, #2]
 800acf2:	78f9      	ldrb	r1, [r7, #3]
 800acf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800acf8:	9303      	str	r3, [sp, #12]
 800acfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acfc:	9302      	str	r3, [sp, #8]
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	9301      	str	r3, [sp, #4]
 800ad02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	4623      	mov	r3, r4
 800ad0a:	f7f9 fdb1 	bl	8004870 <HAL_HCD_HC_SubmitRequest>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f86d 	bl	800adf4 <USBH_Get_USB_Status>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3714      	adds	r7, #20
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd90      	pop	{r4, r7, pc}

0800ad28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fa f83e 	bl	8004dc0 <HAL_HCD_HC_GetURBState>
 800ad44:	4603      	mov	r3, r0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	460b      	mov	r3, r1
 800ad58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d103      	bne.n	800ad6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ad64:	78fb      	ldrb	r3, [r7, #3]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 f870 	bl	800ae4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ad6c:	20c8      	movs	r0, #200	; 0xc8
 800ad6e:	f7f8 f835 	bl	8002ddc <HAL_Delay>
  return USBH_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	70fb      	strb	r3, [r7, #3]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	212c      	movs	r1, #44	; 0x2c
 800ad9a:	fb01 f303 	mul.w	r3, r1, r3
 800ad9e:	4413      	add	r3, r2
 800ada0:	333b      	adds	r3, #59	; 0x3b
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d009      	beq.n	800adbc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ada8:	78fb      	ldrb	r3, [r7, #3]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	212c      	movs	r1, #44	; 0x2c
 800adae:	fb01 f303 	mul.w	r3, r1, r3
 800adb2:	4413      	add	r3, r2
 800adb4:	3354      	adds	r3, #84	; 0x54
 800adb6:	78ba      	ldrb	r2, [r7, #2]
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	e008      	b.n	800adce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800adbc:	78fb      	ldrb	r3, [r7, #3]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	212c      	movs	r1, #44	; 0x2c
 800adc2:	fb01 f303 	mul.w	r3, r1, r3
 800adc6:	4413      	add	r3, r2
 800adc8:	3355      	adds	r3, #85	; 0x55
 800adca:	78ba      	ldrb	r2, [r7, #2]
 800adcc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7f7 fff9 	bl	8002ddc <HAL_Delay>
}
 800adea:	bf00      	nop
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	4603      	mov	r3, r0
 800adfc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae02:	79fb      	ldrb	r3, [r7, #7]
 800ae04:	2b03      	cmp	r3, #3
 800ae06:	d817      	bhi.n	800ae38 <USBH_Get_USB_Status+0x44>
 800ae08:	a201      	add	r2, pc, #4	; (adr r2, 800ae10 <USBH_Get_USB_Status+0x1c>)
 800ae0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0e:	bf00      	nop
 800ae10:	0800ae21 	.word	0x0800ae21
 800ae14:	0800ae27 	.word	0x0800ae27
 800ae18:	0800ae2d 	.word	0x0800ae2d
 800ae1c:	0800ae33 	.word	0x0800ae33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	73fb      	strb	r3, [r7, #15]
    break;
 800ae24:	e00b      	b.n	800ae3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ae26:	2302      	movs	r3, #2
 800ae28:	73fb      	strb	r3, [r7, #15]
    break;
 800ae2a:	e008      	b.n	800ae3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae30:	e005      	b.n	800ae3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae32:	2302      	movs	r3, #2
 800ae34:	73fb      	strb	r3, [r7, #15]
    break;
 800ae36:	e002      	b.n	800ae3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae38:	2302      	movs	r3, #2
 800ae3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae3c:	bf00      	nop
  }
  return usb_status;
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	4603      	mov	r3, r0
 800ae54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ae56:	79fb      	ldrb	r3, [r7, #7]
 800ae58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ae5a:	79fb      	ldrb	r3, [r7, #7]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d102      	bne.n	800ae66 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ae60:	2301      	movs	r3, #1
 800ae62:	73fb      	strb	r3, [r7, #15]
 800ae64:	e001      	b.n	800ae6a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ae66:	2300      	movs	r3, #0
 800ae68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	2101      	movs	r1, #1
 800ae70:	4803      	ldr	r0, [pc, #12]	; (800ae80 <MX_DriverVbusFS+0x34>)
 800ae72:	f7f9 fbcf 	bl	8004614 <HAL_GPIO_WritePin>
}
 800ae76:	bf00      	nop
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	40020800 	.word	0x40020800

0800ae84 <__errno>:
 800ae84:	4b01      	ldr	r3, [pc, #4]	; (800ae8c <__errno+0x8>)
 800ae86:	6818      	ldr	r0, [r3, #0]
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	200000e0 	.word	0x200000e0

0800ae90 <__libc_init_array>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	4d0d      	ldr	r5, [pc, #52]	; (800aec8 <__libc_init_array+0x38>)
 800ae94:	4c0d      	ldr	r4, [pc, #52]	; (800aecc <__libc_init_array+0x3c>)
 800ae96:	1b64      	subs	r4, r4, r5
 800ae98:	10a4      	asrs	r4, r4, #2
 800ae9a:	2600      	movs	r6, #0
 800ae9c:	42a6      	cmp	r6, r4
 800ae9e:	d109      	bne.n	800aeb4 <__libc_init_array+0x24>
 800aea0:	4d0b      	ldr	r5, [pc, #44]	; (800aed0 <__libc_init_array+0x40>)
 800aea2:	4c0c      	ldr	r4, [pc, #48]	; (800aed4 <__libc_init_array+0x44>)
 800aea4:	f001 fc82 	bl	800c7ac <_init>
 800aea8:	1b64      	subs	r4, r4, r5
 800aeaa:	10a4      	asrs	r4, r4, #2
 800aeac:	2600      	movs	r6, #0
 800aeae:	42a6      	cmp	r6, r4
 800aeb0:	d105      	bne.n	800aebe <__libc_init_array+0x2e>
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
 800aeb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeb8:	4798      	blx	r3
 800aeba:	3601      	adds	r6, #1
 800aebc:	e7ee      	b.n	800ae9c <__libc_init_array+0xc>
 800aebe:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec2:	4798      	blx	r3
 800aec4:	3601      	adds	r6, #1
 800aec6:	e7f2      	b.n	800aeae <__libc_init_array+0x1e>
 800aec8:	0800c938 	.word	0x0800c938
 800aecc:	0800c938 	.word	0x0800c938
 800aed0:	0800c938 	.word	0x0800c938
 800aed4:	0800c93c 	.word	0x0800c93c

0800aed8 <malloc>:
 800aed8:	4b02      	ldr	r3, [pc, #8]	; (800aee4 <malloc+0xc>)
 800aeda:	4601      	mov	r1, r0
 800aedc:	6818      	ldr	r0, [r3, #0]
 800aede:	f000 b863 	b.w	800afa8 <_malloc_r>
 800aee2:	bf00      	nop
 800aee4:	200000e0 	.word	0x200000e0

0800aee8 <free>:
 800aee8:	4b02      	ldr	r3, [pc, #8]	; (800aef4 <free+0xc>)
 800aeea:	4601      	mov	r1, r0
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f000 b80b 	b.w	800af08 <_free_r>
 800aef2:	bf00      	nop
 800aef4:	200000e0 	.word	0x200000e0

0800aef8 <memset>:
 800aef8:	4402      	add	r2, r0
 800aefa:	4603      	mov	r3, r0
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d100      	bne.n	800af02 <memset+0xa>
 800af00:	4770      	bx	lr
 800af02:	f803 1b01 	strb.w	r1, [r3], #1
 800af06:	e7f9      	b.n	800aefc <memset+0x4>

0800af08 <_free_r>:
 800af08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af0a:	2900      	cmp	r1, #0
 800af0c:	d048      	beq.n	800afa0 <_free_r+0x98>
 800af0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af12:	9001      	str	r0, [sp, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	f1a1 0404 	sub.w	r4, r1, #4
 800af1a:	bfb8      	it	lt
 800af1c:	18e4      	addlt	r4, r4, r3
 800af1e:	f000 f93b 	bl	800b198 <__malloc_lock>
 800af22:	4a20      	ldr	r2, [pc, #128]	; (800afa4 <_free_r+0x9c>)
 800af24:	9801      	ldr	r0, [sp, #4]
 800af26:	6813      	ldr	r3, [r2, #0]
 800af28:	4615      	mov	r5, r2
 800af2a:	b933      	cbnz	r3, 800af3a <_free_r+0x32>
 800af2c:	6063      	str	r3, [r4, #4]
 800af2e:	6014      	str	r4, [r2, #0]
 800af30:	b003      	add	sp, #12
 800af32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af36:	f000 b935 	b.w	800b1a4 <__malloc_unlock>
 800af3a:	42a3      	cmp	r3, r4
 800af3c:	d90b      	bls.n	800af56 <_free_r+0x4e>
 800af3e:	6821      	ldr	r1, [r4, #0]
 800af40:	1862      	adds	r2, r4, r1
 800af42:	4293      	cmp	r3, r2
 800af44:	bf04      	itt	eq
 800af46:	681a      	ldreq	r2, [r3, #0]
 800af48:	685b      	ldreq	r3, [r3, #4]
 800af4a:	6063      	str	r3, [r4, #4]
 800af4c:	bf04      	itt	eq
 800af4e:	1852      	addeq	r2, r2, r1
 800af50:	6022      	streq	r2, [r4, #0]
 800af52:	602c      	str	r4, [r5, #0]
 800af54:	e7ec      	b.n	800af30 <_free_r+0x28>
 800af56:	461a      	mov	r2, r3
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	b10b      	cbz	r3, 800af60 <_free_r+0x58>
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	d9fa      	bls.n	800af56 <_free_r+0x4e>
 800af60:	6811      	ldr	r1, [r2, #0]
 800af62:	1855      	adds	r5, r2, r1
 800af64:	42a5      	cmp	r5, r4
 800af66:	d10b      	bne.n	800af80 <_free_r+0x78>
 800af68:	6824      	ldr	r4, [r4, #0]
 800af6a:	4421      	add	r1, r4
 800af6c:	1854      	adds	r4, r2, r1
 800af6e:	42a3      	cmp	r3, r4
 800af70:	6011      	str	r1, [r2, #0]
 800af72:	d1dd      	bne.n	800af30 <_free_r+0x28>
 800af74:	681c      	ldr	r4, [r3, #0]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	6053      	str	r3, [r2, #4]
 800af7a:	4421      	add	r1, r4
 800af7c:	6011      	str	r1, [r2, #0]
 800af7e:	e7d7      	b.n	800af30 <_free_r+0x28>
 800af80:	d902      	bls.n	800af88 <_free_r+0x80>
 800af82:	230c      	movs	r3, #12
 800af84:	6003      	str	r3, [r0, #0]
 800af86:	e7d3      	b.n	800af30 <_free_r+0x28>
 800af88:	6825      	ldr	r5, [r4, #0]
 800af8a:	1961      	adds	r1, r4, r5
 800af8c:	428b      	cmp	r3, r1
 800af8e:	bf04      	itt	eq
 800af90:	6819      	ldreq	r1, [r3, #0]
 800af92:	685b      	ldreq	r3, [r3, #4]
 800af94:	6063      	str	r3, [r4, #4]
 800af96:	bf04      	itt	eq
 800af98:	1949      	addeq	r1, r1, r5
 800af9a:	6021      	streq	r1, [r4, #0]
 800af9c:	6054      	str	r4, [r2, #4]
 800af9e:	e7c7      	b.n	800af30 <_free_r+0x28>
 800afa0:	b003      	add	sp, #12
 800afa2:	bd30      	pop	{r4, r5, pc}
 800afa4:	20000178 	.word	0x20000178

0800afa8 <_malloc_r>:
 800afa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afaa:	1ccd      	adds	r5, r1, #3
 800afac:	f025 0503 	bic.w	r5, r5, #3
 800afb0:	3508      	adds	r5, #8
 800afb2:	2d0c      	cmp	r5, #12
 800afb4:	bf38      	it	cc
 800afb6:	250c      	movcc	r5, #12
 800afb8:	2d00      	cmp	r5, #0
 800afba:	4606      	mov	r6, r0
 800afbc:	db01      	blt.n	800afc2 <_malloc_r+0x1a>
 800afbe:	42a9      	cmp	r1, r5
 800afc0:	d903      	bls.n	800afca <_malloc_r+0x22>
 800afc2:	230c      	movs	r3, #12
 800afc4:	6033      	str	r3, [r6, #0]
 800afc6:	2000      	movs	r0, #0
 800afc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afca:	f000 f8e5 	bl	800b198 <__malloc_lock>
 800afce:	4921      	ldr	r1, [pc, #132]	; (800b054 <_malloc_r+0xac>)
 800afd0:	680a      	ldr	r2, [r1, #0]
 800afd2:	4614      	mov	r4, r2
 800afd4:	b99c      	cbnz	r4, 800affe <_malloc_r+0x56>
 800afd6:	4f20      	ldr	r7, [pc, #128]	; (800b058 <_malloc_r+0xb0>)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	b923      	cbnz	r3, 800afe6 <_malloc_r+0x3e>
 800afdc:	4621      	mov	r1, r4
 800afde:	4630      	mov	r0, r6
 800afe0:	f000 f83c 	bl	800b05c <_sbrk_r>
 800afe4:	6038      	str	r0, [r7, #0]
 800afe6:	4629      	mov	r1, r5
 800afe8:	4630      	mov	r0, r6
 800afea:	f000 f837 	bl	800b05c <_sbrk_r>
 800afee:	1c43      	adds	r3, r0, #1
 800aff0:	d123      	bne.n	800b03a <_malloc_r+0x92>
 800aff2:	230c      	movs	r3, #12
 800aff4:	6033      	str	r3, [r6, #0]
 800aff6:	4630      	mov	r0, r6
 800aff8:	f000 f8d4 	bl	800b1a4 <__malloc_unlock>
 800affc:	e7e3      	b.n	800afc6 <_malloc_r+0x1e>
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	1b5b      	subs	r3, r3, r5
 800b002:	d417      	bmi.n	800b034 <_malloc_r+0x8c>
 800b004:	2b0b      	cmp	r3, #11
 800b006:	d903      	bls.n	800b010 <_malloc_r+0x68>
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	441c      	add	r4, r3
 800b00c:	6025      	str	r5, [r4, #0]
 800b00e:	e004      	b.n	800b01a <_malloc_r+0x72>
 800b010:	6863      	ldr	r3, [r4, #4]
 800b012:	42a2      	cmp	r2, r4
 800b014:	bf0c      	ite	eq
 800b016:	600b      	streq	r3, [r1, #0]
 800b018:	6053      	strne	r3, [r2, #4]
 800b01a:	4630      	mov	r0, r6
 800b01c:	f000 f8c2 	bl	800b1a4 <__malloc_unlock>
 800b020:	f104 000b 	add.w	r0, r4, #11
 800b024:	1d23      	adds	r3, r4, #4
 800b026:	f020 0007 	bic.w	r0, r0, #7
 800b02a:	1ac2      	subs	r2, r0, r3
 800b02c:	d0cc      	beq.n	800afc8 <_malloc_r+0x20>
 800b02e:	1a1b      	subs	r3, r3, r0
 800b030:	50a3      	str	r3, [r4, r2]
 800b032:	e7c9      	b.n	800afc8 <_malloc_r+0x20>
 800b034:	4622      	mov	r2, r4
 800b036:	6864      	ldr	r4, [r4, #4]
 800b038:	e7cc      	b.n	800afd4 <_malloc_r+0x2c>
 800b03a:	1cc4      	adds	r4, r0, #3
 800b03c:	f024 0403 	bic.w	r4, r4, #3
 800b040:	42a0      	cmp	r0, r4
 800b042:	d0e3      	beq.n	800b00c <_malloc_r+0x64>
 800b044:	1a21      	subs	r1, r4, r0
 800b046:	4630      	mov	r0, r6
 800b048:	f000 f808 	bl	800b05c <_sbrk_r>
 800b04c:	3001      	adds	r0, #1
 800b04e:	d1dd      	bne.n	800b00c <_malloc_r+0x64>
 800b050:	e7cf      	b.n	800aff2 <_malloc_r+0x4a>
 800b052:	bf00      	nop
 800b054:	20000178 	.word	0x20000178
 800b058:	2000017c 	.word	0x2000017c

0800b05c <_sbrk_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4d06      	ldr	r5, [pc, #24]	; (800b078 <_sbrk_r+0x1c>)
 800b060:	2300      	movs	r3, #0
 800b062:	4604      	mov	r4, r0
 800b064:	4608      	mov	r0, r1
 800b066:	602b      	str	r3, [r5, #0]
 800b068:	f7f7 fdd4 	bl	8002c14 <_sbrk>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d102      	bne.n	800b076 <_sbrk_r+0x1a>
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	b103      	cbz	r3, 800b076 <_sbrk_r+0x1a>
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	20000a74 	.word	0x20000a74

0800b07c <siprintf>:
 800b07c:	b40e      	push	{r1, r2, r3}
 800b07e:	b500      	push	{lr}
 800b080:	b09c      	sub	sp, #112	; 0x70
 800b082:	ab1d      	add	r3, sp, #116	; 0x74
 800b084:	9002      	str	r0, [sp, #8]
 800b086:	9006      	str	r0, [sp, #24]
 800b088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b08c:	4809      	ldr	r0, [pc, #36]	; (800b0b4 <siprintf+0x38>)
 800b08e:	9107      	str	r1, [sp, #28]
 800b090:	9104      	str	r1, [sp, #16]
 800b092:	4909      	ldr	r1, [pc, #36]	; (800b0b8 <siprintf+0x3c>)
 800b094:	f853 2b04 	ldr.w	r2, [r3], #4
 800b098:	9105      	str	r1, [sp, #20]
 800b09a:	6800      	ldr	r0, [r0, #0]
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	a902      	add	r1, sp, #8
 800b0a0:	f000 f8e2 	bl	800b268 <_svfiprintf_r>
 800b0a4:	9b02      	ldr	r3, [sp, #8]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	b01c      	add	sp, #112	; 0x70
 800b0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0b0:	b003      	add	sp, #12
 800b0b2:	4770      	bx	lr
 800b0b4:	200000e0 	.word	0x200000e0
 800b0b8:	ffff0208 	.word	0xffff0208

0800b0bc <strcat>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	4602      	mov	r2, r0
 800b0c0:	7814      	ldrb	r4, [r2, #0]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	3201      	adds	r2, #1
 800b0c6:	2c00      	cmp	r4, #0
 800b0c8:	d1fa      	bne.n	800b0c0 <strcat+0x4>
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0d4:	2a00      	cmp	r2, #0
 800b0d6:	d1f9      	bne.n	800b0cc <strcat+0x10>
 800b0d8:	bd10      	pop	{r4, pc}

0800b0da <strlcat>:
 800b0da:	b570      	push	{r4, r5, r6, lr}
 800b0dc:	4604      	mov	r4, r0
 800b0de:	1916      	adds	r6, r2, r4
 800b0e0:	4608      	mov	r0, r1
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	42b1      	cmp	r1, r6
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	d106      	bne.n	800b0f8 <strlcat+0x1e>
 800b0ea:	1b1c      	subs	r4, r3, r4
 800b0ec:	1b12      	subs	r2, r2, r4
 800b0ee:	d108      	bne.n	800b102 <strlcat+0x28>
 800b0f0:	f7f5 f86e 	bl	80001d0 <strlen>
 800b0f4:	4420      	add	r0, r4
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
 800b0f8:	781d      	ldrb	r5, [r3, #0]
 800b0fa:	3101      	adds	r1, #1
 800b0fc:	2d00      	cmp	r5, #0
 800b0fe:	d1f1      	bne.n	800b0e4 <strlcat+0xa>
 800b100:	e7f3      	b.n	800b0ea <strlcat+0x10>
 800b102:	4606      	mov	r6, r0
 800b104:	4631      	mov	r1, r6
 800b106:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b10a:	b915      	cbnz	r5, 800b112 <strlcat+0x38>
 800b10c:	701d      	strb	r5, [r3, #0]
 800b10e:	1a08      	subs	r0, r1, r0
 800b110:	e7f0      	b.n	800b0f4 <strlcat+0x1a>
 800b112:	2a01      	cmp	r2, #1
 800b114:	bf1c      	itt	ne
 800b116:	f803 5b01 	strbne.w	r5, [r3], #1
 800b11a:	f102 32ff 	addne.w	r2, r2, #4294967295
 800b11e:	e7f1      	b.n	800b104 <strlcat+0x2a>

0800b120 <strlcpy>:
 800b120:	b510      	push	{r4, lr}
 800b122:	460b      	mov	r3, r1
 800b124:	b162      	cbz	r2, 800b140 <strlcpy+0x20>
 800b126:	3a01      	subs	r2, #1
 800b128:	d008      	beq.n	800b13c <strlcpy+0x1c>
 800b12a:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b12e:	f800 4b01 	strb.w	r4, [r0], #1
 800b132:	2c00      	cmp	r4, #0
 800b134:	d1f7      	bne.n	800b126 <strlcpy+0x6>
 800b136:	1a58      	subs	r0, r3, r1
 800b138:	3801      	subs	r0, #1
 800b13a:	bd10      	pop	{r4, pc}
 800b13c:	2200      	movs	r2, #0
 800b13e:	7002      	strb	r2, [r0, #0]
 800b140:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b144:	2a00      	cmp	r2, #0
 800b146:	d1fb      	bne.n	800b140 <strlcpy+0x20>
 800b148:	e7f5      	b.n	800b136 <strlcpy+0x16>

0800b14a <strncat>:
 800b14a:	b530      	push	{r4, r5, lr}
 800b14c:	4604      	mov	r4, r0
 800b14e:	7825      	ldrb	r5, [r4, #0]
 800b150:	4623      	mov	r3, r4
 800b152:	3401      	adds	r4, #1
 800b154:	2d00      	cmp	r5, #0
 800b156:	d1fa      	bne.n	800b14e <strncat+0x4>
 800b158:	3a01      	subs	r2, #1
 800b15a:	d304      	bcc.n	800b166 <strncat+0x1c>
 800b15c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b160:	f803 4b01 	strb.w	r4, [r3], #1
 800b164:	b904      	cbnz	r4, 800b168 <strncat+0x1e>
 800b166:	bd30      	pop	{r4, r5, pc}
 800b168:	2a00      	cmp	r2, #0
 800b16a:	d1f5      	bne.n	800b158 <strncat+0xe>
 800b16c:	701a      	strb	r2, [r3, #0]
 800b16e:	e7f3      	b.n	800b158 <strncat+0xe>

0800b170 <strncpy>:
 800b170:	b510      	push	{r4, lr}
 800b172:	3901      	subs	r1, #1
 800b174:	4603      	mov	r3, r0
 800b176:	b132      	cbz	r2, 800b186 <strncpy+0x16>
 800b178:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b17c:	f803 4b01 	strb.w	r4, [r3], #1
 800b180:	3a01      	subs	r2, #1
 800b182:	2c00      	cmp	r4, #0
 800b184:	d1f7      	bne.n	800b176 <strncpy+0x6>
 800b186:	441a      	add	r2, r3
 800b188:	2100      	movs	r1, #0
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d100      	bne.n	800b190 <strncpy+0x20>
 800b18e:	bd10      	pop	{r4, pc}
 800b190:	f803 1b01 	strb.w	r1, [r3], #1
 800b194:	e7f9      	b.n	800b18a <strncpy+0x1a>
	...

0800b198 <__malloc_lock>:
 800b198:	4801      	ldr	r0, [pc, #4]	; (800b1a0 <__malloc_lock+0x8>)
 800b19a:	f000 baf9 	b.w	800b790 <__retarget_lock_acquire_recursive>
 800b19e:	bf00      	nop
 800b1a0:	20000a7c 	.word	0x20000a7c

0800b1a4 <__malloc_unlock>:
 800b1a4:	4801      	ldr	r0, [pc, #4]	; (800b1ac <__malloc_unlock+0x8>)
 800b1a6:	f000 baf4 	b.w	800b792 <__retarget_lock_release_recursive>
 800b1aa:	bf00      	nop
 800b1ac:	20000a7c 	.word	0x20000a7c

0800b1b0 <__ssputs_r>:
 800b1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b4:	688e      	ldr	r6, [r1, #8]
 800b1b6:	429e      	cmp	r6, r3
 800b1b8:	4682      	mov	sl, r0
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	4690      	mov	r8, r2
 800b1be:	461f      	mov	r7, r3
 800b1c0:	d838      	bhi.n	800b234 <__ssputs_r+0x84>
 800b1c2:	898a      	ldrh	r2, [r1, #12]
 800b1c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1c8:	d032      	beq.n	800b230 <__ssputs_r+0x80>
 800b1ca:	6825      	ldr	r5, [r4, #0]
 800b1cc:	6909      	ldr	r1, [r1, #16]
 800b1ce:	eba5 0901 	sub.w	r9, r5, r1
 800b1d2:	6965      	ldr	r5, [r4, #20]
 800b1d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1dc:	3301      	adds	r3, #1
 800b1de:	444b      	add	r3, r9
 800b1e0:	106d      	asrs	r5, r5, #1
 800b1e2:	429d      	cmp	r5, r3
 800b1e4:	bf38      	it	cc
 800b1e6:	461d      	movcc	r5, r3
 800b1e8:	0553      	lsls	r3, r2, #21
 800b1ea:	d531      	bpl.n	800b250 <__ssputs_r+0xa0>
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	f7ff fedb 	bl	800afa8 <_malloc_r>
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	b950      	cbnz	r0, 800b20c <__ssputs_r+0x5c>
 800b1f6:	230c      	movs	r3, #12
 800b1f8:	f8ca 3000 	str.w	r3, [sl]
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b202:	81a3      	strh	r3, [r4, #12]
 800b204:	f04f 30ff 	mov.w	r0, #4294967295
 800b208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20c:	6921      	ldr	r1, [r4, #16]
 800b20e:	464a      	mov	r2, r9
 800b210:	f000 fac0 	bl	800b794 <memcpy>
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b21a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b21e:	81a3      	strh	r3, [r4, #12]
 800b220:	6126      	str	r6, [r4, #16]
 800b222:	6165      	str	r5, [r4, #20]
 800b224:	444e      	add	r6, r9
 800b226:	eba5 0509 	sub.w	r5, r5, r9
 800b22a:	6026      	str	r6, [r4, #0]
 800b22c:	60a5      	str	r5, [r4, #8]
 800b22e:	463e      	mov	r6, r7
 800b230:	42be      	cmp	r6, r7
 800b232:	d900      	bls.n	800b236 <__ssputs_r+0x86>
 800b234:	463e      	mov	r6, r7
 800b236:	4632      	mov	r2, r6
 800b238:	6820      	ldr	r0, [r4, #0]
 800b23a:	4641      	mov	r1, r8
 800b23c:	f000 fab8 	bl	800b7b0 <memmove>
 800b240:	68a3      	ldr	r3, [r4, #8]
 800b242:	6822      	ldr	r2, [r4, #0]
 800b244:	1b9b      	subs	r3, r3, r6
 800b246:	4432      	add	r2, r6
 800b248:	60a3      	str	r3, [r4, #8]
 800b24a:	6022      	str	r2, [r4, #0]
 800b24c:	2000      	movs	r0, #0
 800b24e:	e7db      	b.n	800b208 <__ssputs_r+0x58>
 800b250:	462a      	mov	r2, r5
 800b252:	f000 fac7 	bl	800b7e4 <_realloc_r>
 800b256:	4606      	mov	r6, r0
 800b258:	2800      	cmp	r0, #0
 800b25a:	d1e1      	bne.n	800b220 <__ssputs_r+0x70>
 800b25c:	6921      	ldr	r1, [r4, #16]
 800b25e:	4650      	mov	r0, sl
 800b260:	f7ff fe52 	bl	800af08 <_free_r>
 800b264:	e7c7      	b.n	800b1f6 <__ssputs_r+0x46>
	...

0800b268 <_svfiprintf_r>:
 800b268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26c:	4698      	mov	r8, r3
 800b26e:	898b      	ldrh	r3, [r1, #12]
 800b270:	061b      	lsls	r3, r3, #24
 800b272:	b09d      	sub	sp, #116	; 0x74
 800b274:	4607      	mov	r7, r0
 800b276:	460d      	mov	r5, r1
 800b278:	4614      	mov	r4, r2
 800b27a:	d50e      	bpl.n	800b29a <_svfiprintf_r+0x32>
 800b27c:	690b      	ldr	r3, [r1, #16]
 800b27e:	b963      	cbnz	r3, 800b29a <_svfiprintf_r+0x32>
 800b280:	2140      	movs	r1, #64	; 0x40
 800b282:	f7ff fe91 	bl	800afa8 <_malloc_r>
 800b286:	6028      	str	r0, [r5, #0]
 800b288:	6128      	str	r0, [r5, #16]
 800b28a:	b920      	cbnz	r0, 800b296 <_svfiprintf_r+0x2e>
 800b28c:	230c      	movs	r3, #12
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	f04f 30ff 	mov.w	r0, #4294967295
 800b294:	e0d1      	b.n	800b43a <_svfiprintf_r+0x1d2>
 800b296:	2340      	movs	r3, #64	; 0x40
 800b298:	616b      	str	r3, [r5, #20]
 800b29a:	2300      	movs	r3, #0
 800b29c:	9309      	str	r3, [sp, #36]	; 0x24
 800b29e:	2320      	movs	r3, #32
 800b2a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2a8:	2330      	movs	r3, #48	; 0x30
 800b2aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b454 <_svfiprintf_r+0x1ec>
 800b2ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2b2:	f04f 0901 	mov.w	r9, #1
 800b2b6:	4623      	mov	r3, r4
 800b2b8:	469a      	mov	sl, r3
 800b2ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2be:	b10a      	cbz	r2, 800b2c4 <_svfiprintf_r+0x5c>
 800b2c0:	2a25      	cmp	r2, #37	; 0x25
 800b2c2:	d1f9      	bne.n	800b2b8 <_svfiprintf_r+0x50>
 800b2c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b2c8:	d00b      	beq.n	800b2e2 <_svfiprintf_r+0x7a>
 800b2ca:	465b      	mov	r3, fp
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f7ff ff6d 	bl	800b1b0 <__ssputs_r>
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	f000 80aa 	beq.w	800b430 <_svfiprintf_r+0x1c8>
 800b2dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2de:	445a      	add	r2, fp
 800b2e0:	9209      	str	r2, [sp, #36]	; 0x24
 800b2e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 80a2 	beq.w	800b430 <_svfiprintf_r+0x1c8>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2f6:	f10a 0a01 	add.w	sl, sl, #1
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	9307      	str	r3, [sp, #28]
 800b2fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b302:	931a      	str	r3, [sp, #104]	; 0x68
 800b304:	4654      	mov	r4, sl
 800b306:	2205      	movs	r2, #5
 800b308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30c:	4851      	ldr	r0, [pc, #324]	; (800b454 <_svfiprintf_r+0x1ec>)
 800b30e:	f7f4 ff67 	bl	80001e0 <memchr>
 800b312:	9a04      	ldr	r2, [sp, #16]
 800b314:	b9d8      	cbnz	r0, 800b34e <_svfiprintf_r+0xe6>
 800b316:	06d0      	lsls	r0, r2, #27
 800b318:	bf44      	itt	mi
 800b31a:	2320      	movmi	r3, #32
 800b31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b320:	0711      	lsls	r1, r2, #28
 800b322:	bf44      	itt	mi
 800b324:	232b      	movmi	r3, #43	; 0x2b
 800b326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b32a:	f89a 3000 	ldrb.w	r3, [sl]
 800b32e:	2b2a      	cmp	r3, #42	; 0x2a
 800b330:	d015      	beq.n	800b35e <_svfiprintf_r+0xf6>
 800b332:	9a07      	ldr	r2, [sp, #28]
 800b334:	4654      	mov	r4, sl
 800b336:	2000      	movs	r0, #0
 800b338:	f04f 0c0a 	mov.w	ip, #10
 800b33c:	4621      	mov	r1, r4
 800b33e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b342:	3b30      	subs	r3, #48	; 0x30
 800b344:	2b09      	cmp	r3, #9
 800b346:	d94e      	bls.n	800b3e6 <_svfiprintf_r+0x17e>
 800b348:	b1b0      	cbz	r0, 800b378 <_svfiprintf_r+0x110>
 800b34a:	9207      	str	r2, [sp, #28]
 800b34c:	e014      	b.n	800b378 <_svfiprintf_r+0x110>
 800b34e:	eba0 0308 	sub.w	r3, r0, r8
 800b352:	fa09 f303 	lsl.w	r3, r9, r3
 800b356:	4313      	orrs	r3, r2
 800b358:	9304      	str	r3, [sp, #16]
 800b35a:	46a2      	mov	sl, r4
 800b35c:	e7d2      	b.n	800b304 <_svfiprintf_r+0x9c>
 800b35e:	9b03      	ldr	r3, [sp, #12]
 800b360:	1d19      	adds	r1, r3, #4
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	9103      	str	r1, [sp, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	bfbb      	ittet	lt
 800b36a:	425b      	neglt	r3, r3
 800b36c:	f042 0202 	orrlt.w	r2, r2, #2
 800b370:	9307      	strge	r3, [sp, #28]
 800b372:	9307      	strlt	r3, [sp, #28]
 800b374:	bfb8      	it	lt
 800b376:	9204      	strlt	r2, [sp, #16]
 800b378:	7823      	ldrb	r3, [r4, #0]
 800b37a:	2b2e      	cmp	r3, #46	; 0x2e
 800b37c:	d10c      	bne.n	800b398 <_svfiprintf_r+0x130>
 800b37e:	7863      	ldrb	r3, [r4, #1]
 800b380:	2b2a      	cmp	r3, #42	; 0x2a
 800b382:	d135      	bne.n	800b3f0 <_svfiprintf_r+0x188>
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	9203      	str	r2, [sp, #12]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	bfb8      	it	lt
 800b390:	f04f 33ff 	movlt.w	r3, #4294967295
 800b394:	3402      	adds	r4, #2
 800b396:	9305      	str	r3, [sp, #20]
 800b398:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b464 <_svfiprintf_r+0x1fc>
 800b39c:	7821      	ldrb	r1, [r4, #0]
 800b39e:	2203      	movs	r2, #3
 800b3a0:	4650      	mov	r0, sl
 800b3a2:	f7f4 ff1d 	bl	80001e0 <memchr>
 800b3a6:	b140      	cbz	r0, 800b3ba <_svfiprintf_r+0x152>
 800b3a8:	2340      	movs	r3, #64	; 0x40
 800b3aa:	eba0 000a 	sub.w	r0, r0, sl
 800b3ae:	fa03 f000 	lsl.w	r0, r3, r0
 800b3b2:	9b04      	ldr	r3, [sp, #16]
 800b3b4:	4303      	orrs	r3, r0
 800b3b6:	3401      	adds	r4, #1
 800b3b8:	9304      	str	r3, [sp, #16]
 800b3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3be:	4826      	ldr	r0, [pc, #152]	; (800b458 <_svfiprintf_r+0x1f0>)
 800b3c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3c4:	2206      	movs	r2, #6
 800b3c6:	f7f4 ff0b 	bl	80001e0 <memchr>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d038      	beq.n	800b440 <_svfiprintf_r+0x1d8>
 800b3ce:	4b23      	ldr	r3, [pc, #140]	; (800b45c <_svfiprintf_r+0x1f4>)
 800b3d0:	bb1b      	cbnz	r3, 800b41a <_svfiprintf_r+0x1b2>
 800b3d2:	9b03      	ldr	r3, [sp, #12]
 800b3d4:	3307      	adds	r3, #7
 800b3d6:	f023 0307 	bic.w	r3, r3, #7
 800b3da:	3308      	adds	r3, #8
 800b3dc:	9303      	str	r3, [sp, #12]
 800b3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3e0:	4433      	add	r3, r6
 800b3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e4:	e767      	b.n	800b2b6 <_svfiprintf_r+0x4e>
 800b3e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	2001      	movs	r0, #1
 800b3ee:	e7a5      	b.n	800b33c <_svfiprintf_r+0xd4>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	3401      	adds	r4, #1
 800b3f4:	9305      	str	r3, [sp, #20]
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	f04f 0c0a 	mov.w	ip, #10
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b402:	3a30      	subs	r2, #48	; 0x30
 800b404:	2a09      	cmp	r2, #9
 800b406:	d903      	bls.n	800b410 <_svfiprintf_r+0x1a8>
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0c5      	beq.n	800b398 <_svfiprintf_r+0x130>
 800b40c:	9105      	str	r1, [sp, #20]
 800b40e:	e7c3      	b.n	800b398 <_svfiprintf_r+0x130>
 800b410:	fb0c 2101 	mla	r1, ip, r1, r2
 800b414:	4604      	mov	r4, r0
 800b416:	2301      	movs	r3, #1
 800b418:	e7f0      	b.n	800b3fc <_svfiprintf_r+0x194>
 800b41a:	ab03      	add	r3, sp, #12
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	462a      	mov	r2, r5
 800b420:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <_svfiprintf_r+0x1f8>)
 800b422:	a904      	add	r1, sp, #16
 800b424:	4638      	mov	r0, r7
 800b426:	f3af 8000 	nop.w
 800b42a:	1c42      	adds	r2, r0, #1
 800b42c:	4606      	mov	r6, r0
 800b42e:	d1d6      	bne.n	800b3de <_svfiprintf_r+0x176>
 800b430:	89ab      	ldrh	r3, [r5, #12]
 800b432:	065b      	lsls	r3, r3, #25
 800b434:	f53f af2c 	bmi.w	800b290 <_svfiprintf_r+0x28>
 800b438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b43a:	b01d      	add	sp, #116	; 0x74
 800b43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b440:	ab03      	add	r3, sp, #12
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	462a      	mov	r2, r5
 800b446:	4b06      	ldr	r3, [pc, #24]	; (800b460 <_svfiprintf_r+0x1f8>)
 800b448:	a904      	add	r1, sp, #16
 800b44a:	4638      	mov	r0, r7
 800b44c:	f000 f87a 	bl	800b544 <_printf_i>
 800b450:	e7eb      	b.n	800b42a <_svfiprintf_r+0x1c2>
 800b452:	bf00      	nop
 800b454:	0800c8bc 	.word	0x0800c8bc
 800b458:	0800c8c6 	.word	0x0800c8c6
 800b45c:	00000000 	.word	0x00000000
 800b460:	0800b1b1 	.word	0x0800b1b1
 800b464:	0800c8c2 	.word	0x0800c8c2

0800b468 <_printf_common>:
 800b468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b46c:	4616      	mov	r6, r2
 800b46e:	4699      	mov	r9, r3
 800b470:	688a      	ldr	r2, [r1, #8]
 800b472:	690b      	ldr	r3, [r1, #16]
 800b474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b478:	4293      	cmp	r3, r2
 800b47a:	bfb8      	it	lt
 800b47c:	4613      	movlt	r3, r2
 800b47e:	6033      	str	r3, [r6, #0]
 800b480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b484:	4607      	mov	r7, r0
 800b486:	460c      	mov	r4, r1
 800b488:	b10a      	cbz	r2, 800b48e <_printf_common+0x26>
 800b48a:	3301      	adds	r3, #1
 800b48c:	6033      	str	r3, [r6, #0]
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	0699      	lsls	r1, r3, #26
 800b492:	bf42      	ittt	mi
 800b494:	6833      	ldrmi	r3, [r6, #0]
 800b496:	3302      	addmi	r3, #2
 800b498:	6033      	strmi	r3, [r6, #0]
 800b49a:	6825      	ldr	r5, [r4, #0]
 800b49c:	f015 0506 	ands.w	r5, r5, #6
 800b4a0:	d106      	bne.n	800b4b0 <_printf_common+0x48>
 800b4a2:	f104 0a19 	add.w	sl, r4, #25
 800b4a6:	68e3      	ldr	r3, [r4, #12]
 800b4a8:	6832      	ldr	r2, [r6, #0]
 800b4aa:	1a9b      	subs	r3, r3, r2
 800b4ac:	42ab      	cmp	r3, r5
 800b4ae:	dc26      	bgt.n	800b4fe <_printf_common+0x96>
 800b4b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4b4:	1e13      	subs	r3, r2, #0
 800b4b6:	6822      	ldr	r2, [r4, #0]
 800b4b8:	bf18      	it	ne
 800b4ba:	2301      	movne	r3, #1
 800b4bc:	0692      	lsls	r2, r2, #26
 800b4be:	d42b      	bmi.n	800b518 <_printf_common+0xb0>
 800b4c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	47c0      	blx	r8
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	d01e      	beq.n	800b50c <_printf_common+0xa4>
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	68e5      	ldr	r5, [r4, #12]
 800b4d2:	6832      	ldr	r2, [r6, #0]
 800b4d4:	f003 0306 	and.w	r3, r3, #6
 800b4d8:	2b04      	cmp	r3, #4
 800b4da:	bf08      	it	eq
 800b4dc:	1aad      	subeq	r5, r5, r2
 800b4de:	68a3      	ldr	r3, [r4, #8]
 800b4e0:	6922      	ldr	r2, [r4, #16]
 800b4e2:	bf0c      	ite	eq
 800b4e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4e8:	2500      	movne	r5, #0
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	bfc4      	itt	gt
 800b4ee:	1a9b      	subgt	r3, r3, r2
 800b4f0:	18ed      	addgt	r5, r5, r3
 800b4f2:	2600      	movs	r6, #0
 800b4f4:	341a      	adds	r4, #26
 800b4f6:	42b5      	cmp	r5, r6
 800b4f8:	d11a      	bne.n	800b530 <_printf_common+0xc8>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	e008      	b.n	800b510 <_printf_common+0xa8>
 800b4fe:	2301      	movs	r3, #1
 800b500:	4652      	mov	r2, sl
 800b502:	4649      	mov	r1, r9
 800b504:	4638      	mov	r0, r7
 800b506:	47c0      	blx	r8
 800b508:	3001      	adds	r0, #1
 800b50a:	d103      	bne.n	800b514 <_printf_common+0xac>
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295
 800b510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b514:	3501      	adds	r5, #1
 800b516:	e7c6      	b.n	800b4a6 <_printf_common+0x3e>
 800b518:	18e1      	adds	r1, r4, r3
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	2030      	movs	r0, #48	; 0x30
 800b51e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b522:	4422      	add	r2, r4
 800b524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b52c:	3302      	adds	r3, #2
 800b52e:	e7c7      	b.n	800b4c0 <_printf_common+0x58>
 800b530:	2301      	movs	r3, #1
 800b532:	4622      	mov	r2, r4
 800b534:	4649      	mov	r1, r9
 800b536:	4638      	mov	r0, r7
 800b538:	47c0      	blx	r8
 800b53a:	3001      	adds	r0, #1
 800b53c:	d0e6      	beq.n	800b50c <_printf_common+0xa4>
 800b53e:	3601      	adds	r6, #1
 800b540:	e7d9      	b.n	800b4f6 <_printf_common+0x8e>
	...

0800b544 <_printf_i>:
 800b544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b548:	460c      	mov	r4, r1
 800b54a:	4691      	mov	r9, r2
 800b54c:	7e27      	ldrb	r7, [r4, #24]
 800b54e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b550:	2f78      	cmp	r7, #120	; 0x78
 800b552:	4680      	mov	r8, r0
 800b554:	469a      	mov	sl, r3
 800b556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b55a:	d807      	bhi.n	800b56c <_printf_i+0x28>
 800b55c:	2f62      	cmp	r7, #98	; 0x62
 800b55e:	d80a      	bhi.n	800b576 <_printf_i+0x32>
 800b560:	2f00      	cmp	r7, #0
 800b562:	f000 80d8 	beq.w	800b716 <_printf_i+0x1d2>
 800b566:	2f58      	cmp	r7, #88	; 0x58
 800b568:	f000 80a3 	beq.w	800b6b2 <_printf_i+0x16e>
 800b56c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b574:	e03a      	b.n	800b5ec <_printf_i+0xa8>
 800b576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b57a:	2b15      	cmp	r3, #21
 800b57c:	d8f6      	bhi.n	800b56c <_printf_i+0x28>
 800b57e:	a001      	add	r0, pc, #4	; (adr r0, 800b584 <_printf_i+0x40>)
 800b580:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b584:	0800b5dd 	.word	0x0800b5dd
 800b588:	0800b5f1 	.word	0x0800b5f1
 800b58c:	0800b56d 	.word	0x0800b56d
 800b590:	0800b56d 	.word	0x0800b56d
 800b594:	0800b56d 	.word	0x0800b56d
 800b598:	0800b56d 	.word	0x0800b56d
 800b59c:	0800b5f1 	.word	0x0800b5f1
 800b5a0:	0800b56d 	.word	0x0800b56d
 800b5a4:	0800b56d 	.word	0x0800b56d
 800b5a8:	0800b56d 	.word	0x0800b56d
 800b5ac:	0800b56d 	.word	0x0800b56d
 800b5b0:	0800b6fd 	.word	0x0800b6fd
 800b5b4:	0800b621 	.word	0x0800b621
 800b5b8:	0800b6df 	.word	0x0800b6df
 800b5bc:	0800b56d 	.word	0x0800b56d
 800b5c0:	0800b56d 	.word	0x0800b56d
 800b5c4:	0800b71f 	.word	0x0800b71f
 800b5c8:	0800b56d 	.word	0x0800b56d
 800b5cc:	0800b621 	.word	0x0800b621
 800b5d0:	0800b56d 	.word	0x0800b56d
 800b5d4:	0800b56d 	.word	0x0800b56d
 800b5d8:	0800b6e7 	.word	0x0800b6e7
 800b5dc:	680b      	ldr	r3, [r1, #0]
 800b5de:	1d1a      	adds	r2, r3, #4
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	600a      	str	r2, [r1, #0]
 800b5e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e0a3      	b.n	800b738 <_printf_i+0x1f4>
 800b5f0:	6825      	ldr	r5, [r4, #0]
 800b5f2:	6808      	ldr	r0, [r1, #0]
 800b5f4:	062e      	lsls	r6, r5, #24
 800b5f6:	f100 0304 	add.w	r3, r0, #4
 800b5fa:	d50a      	bpl.n	800b612 <_printf_i+0xce>
 800b5fc:	6805      	ldr	r5, [r0, #0]
 800b5fe:	600b      	str	r3, [r1, #0]
 800b600:	2d00      	cmp	r5, #0
 800b602:	da03      	bge.n	800b60c <_printf_i+0xc8>
 800b604:	232d      	movs	r3, #45	; 0x2d
 800b606:	426d      	negs	r5, r5
 800b608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b60c:	485e      	ldr	r0, [pc, #376]	; (800b788 <_printf_i+0x244>)
 800b60e:	230a      	movs	r3, #10
 800b610:	e019      	b.n	800b646 <_printf_i+0x102>
 800b612:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b616:	6805      	ldr	r5, [r0, #0]
 800b618:	600b      	str	r3, [r1, #0]
 800b61a:	bf18      	it	ne
 800b61c:	b22d      	sxthne	r5, r5
 800b61e:	e7ef      	b.n	800b600 <_printf_i+0xbc>
 800b620:	680b      	ldr	r3, [r1, #0]
 800b622:	6825      	ldr	r5, [r4, #0]
 800b624:	1d18      	adds	r0, r3, #4
 800b626:	6008      	str	r0, [r1, #0]
 800b628:	0628      	lsls	r0, r5, #24
 800b62a:	d501      	bpl.n	800b630 <_printf_i+0xec>
 800b62c:	681d      	ldr	r5, [r3, #0]
 800b62e:	e002      	b.n	800b636 <_printf_i+0xf2>
 800b630:	0669      	lsls	r1, r5, #25
 800b632:	d5fb      	bpl.n	800b62c <_printf_i+0xe8>
 800b634:	881d      	ldrh	r5, [r3, #0]
 800b636:	4854      	ldr	r0, [pc, #336]	; (800b788 <_printf_i+0x244>)
 800b638:	2f6f      	cmp	r7, #111	; 0x6f
 800b63a:	bf0c      	ite	eq
 800b63c:	2308      	moveq	r3, #8
 800b63e:	230a      	movne	r3, #10
 800b640:	2100      	movs	r1, #0
 800b642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b646:	6866      	ldr	r6, [r4, #4]
 800b648:	60a6      	str	r6, [r4, #8]
 800b64a:	2e00      	cmp	r6, #0
 800b64c:	bfa2      	ittt	ge
 800b64e:	6821      	ldrge	r1, [r4, #0]
 800b650:	f021 0104 	bicge.w	r1, r1, #4
 800b654:	6021      	strge	r1, [r4, #0]
 800b656:	b90d      	cbnz	r5, 800b65c <_printf_i+0x118>
 800b658:	2e00      	cmp	r6, #0
 800b65a:	d04d      	beq.n	800b6f8 <_printf_i+0x1b4>
 800b65c:	4616      	mov	r6, r2
 800b65e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b662:	fb03 5711 	mls	r7, r3, r1, r5
 800b666:	5dc7      	ldrb	r7, [r0, r7]
 800b668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b66c:	462f      	mov	r7, r5
 800b66e:	42bb      	cmp	r3, r7
 800b670:	460d      	mov	r5, r1
 800b672:	d9f4      	bls.n	800b65e <_printf_i+0x11a>
 800b674:	2b08      	cmp	r3, #8
 800b676:	d10b      	bne.n	800b690 <_printf_i+0x14c>
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	07df      	lsls	r7, r3, #31
 800b67c:	d508      	bpl.n	800b690 <_printf_i+0x14c>
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	6861      	ldr	r1, [r4, #4]
 800b682:	4299      	cmp	r1, r3
 800b684:	bfde      	ittt	le
 800b686:	2330      	movle	r3, #48	; 0x30
 800b688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b68c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b690:	1b92      	subs	r2, r2, r6
 800b692:	6122      	str	r2, [r4, #16]
 800b694:	f8cd a000 	str.w	sl, [sp]
 800b698:	464b      	mov	r3, r9
 800b69a:	aa03      	add	r2, sp, #12
 800b69c:	4621      	mov	r1, r4
 800b69e:	4640      	mov	r0, r8
 800b6a0:	f7ff fee2 	bl	800b468 <_printf_common>
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d14c      	bne.n	800b742 <_printf_i+0x1fe>
 800b6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ac:	b004      	add	sp, #16
 800b6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b2:	4835      	ldr	r0, [pc, #212]	; (800b788 <_printf_i+0x244>)
 800b6b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6b8:	6823      	ldr	r3, [r4, #0]
 800b6ba:	680e      	ldr	r6, [r1, #0]
 800b6bc:	061f      	lsls	r7, r3, #24
 800b6be:	f856 5b04 	ldr.w	r5, [r6], #4
 800b6c2:	600e      	str	r6, [r1, #0]
 800b6c4:	d514      	bpl.n	800b6f0 <_printf_i+0x1ac>
 800b6c6:	07d9      	lsls	r1, r3, #31
 800b6c8:	bf44      	itt	mi
 800b6ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b6ce:	6023      	strmi	r3, [r4, #0]
 800b6d0:	b91d      	cbnz	r5, 800b6da <_printf_i+0x196>
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	f023 0320 	bic.w	r3, r3, #32
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	2310      	movs	r3, #16
 800b6dc:	e7b0      	b.n	800b640 <_printf_i+0xfc>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	f043 0320 	orr.w	r3, r3, #32
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	2378      	movs	r3, #120	; 0x78
 800b6e8:	4828      	ldr	r0, [pc, #160]	; (800b78c <_printf_i+0x248>)
 800b6ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6ee:	e7e3      	b.n	800b6b8 <_printf_i+0x174>
 800b6f0:	065e      	lsls	r6, r3, #25
 800b6f2:	bf48      	it	mi
 800b6f4:	b2ad      	uxthmi	r5, r5
 800b6f6:	e7e6      	b.n	800b6c6 <_printf_i+0x182>
 800b6f8:	4616      	mov	r6, r2
 800b6fa:	e7bb      	b.n	800b674 <_printf_i+0x130>
 800b6fc:	680b      	ldr	r3, [r1, #0]
 800b6fe:	6826      	ldr	r6, [r4, #0]
 800b700:	6960      	ldr	r0, [r4, #20]
 800b702:	1d1d      	adds	r5, r3, #4
 800b704:	600d      	str	r5, [r1, #0]
 800b706:	0635      	lsls	r5, r6, #24
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	d501      	bpl.n	800b710 <_printf_i+0x1cc>
 800b70c:	6018      	str	r0, [r3, #0]
 800b70e:	e002      	b.n	800b716 <_printf_i+0x1d2>
 800b710:	0671      	lsls	r1, r6, #25
 800b712:	d5fb      	bpl.n	800b70c <_printf_i+0x1c8>
 800b714:	8018      	strh	r0, [r3, #0]
 800b716:	2300      	movs	r3, #0
 800b718:	6123      	str	r3, [r4, #16]
 800b71a:	4616      	mov	r6, r2
 800b71c:	e7ba      	b.n	800b694 <_printf_i+0x150>
 800b71e:	680b      	ldr	r3, [r1, #0]
 800b720:	1d1a      	adds	r2, r3, #4
 800b722:	600a      	str	r2, [r1, #0]
 800b724:	681e      	ldr	r6, [r3, #0]
 800b726:	6862      	ldr	r2, [r4, #4]
 800b728:	2100      	movs	r1, #0
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7f4 fd58 	bl	80001e0 <memchr>
 800b730:	b108      	cbz	r0, 800b736 <_printf_i+0x1f2>
 800b732:	1b80      	subs	r0, r0, r6
 800b734:	6060      	str	r0, [r4, #4]
 800b736:	6863      	ldr	r3, [r4, #4]
 800b738:	6123      	str	r3, [r4, #16]
 800b73a:	2300      	movs	r3, #0
 800b73c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b740:	e7a8      	b.n	800b694 <_printf_i+0x150>
 800b742:	6923      	ldr	r3, [r4, #16]
 800b744:	4632      	mov	r2, r6
 800b746:	4649      	mov	r1, r9
 800b748:	4640      	mov	r0, r8
 800b74a:	47d0      	blx	sl
 800b74c:	3001      	adds	r0, #1
 800b74e:	d0ab      	beq.n	800b6a8 <_printf_i+0x164>
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	079b      	lsls	r3, r3, #30
 800b754:	d413      	bmi.n	800b77e <_printf_i+0x23a>
 800b756:	68e0      	ldr	r0, [r4, #12]
 800b758:	9b03      	ldr	r3, [sp, #12]
 800b75a:	4298      	cmp	r0, r3
 800b75c:	bfb8      	it	lt
 800b75e:	4618      	movlt	r0, r3
 800b760:	e7a4      	b.n	800b6ac <_printf_i+0x168>
 800b762:	2301      	movs	r3, #1
 800b764:	4632      	mov	r2, r6
 800b766:	4649      	mov	r1, r9
 800b768:	4640      	mov	r0, r8
 800b76a:	47d0      	blx	sl
 800b76c:	3001      	adds	r0, #1
 800b76e:	d09b      	beq.n	800b6a8 <_printf_i+0x164>
 800b770:	3501      	adds	r5, #1
 800b772:	68e3      	ldr	r3, [r4, #12]
 800b774:	9903      	ldr	r1, [sp, #12]
 800b776:	1a5b      	subs	r3, r3, r1
 800b778:	42ab      	cmp	r3, r5
 800b77a:	dcf2      	bgt.n	800b762 <_printf_i+0x21e>
 800b77c:	e7eb      	b.n	800b756 <_printf_i+0x212>
 800b77e:	2500      	movs	r5, #0
 800b780:	f104 0619 	add.w	r6, r4, #25
 800b784:	e7f5      	b.n	800b772 <_printf_i+0x22e>
 800b786:	bf00      	nop
 800b788:	0800c8cd 	.word	0x0800c8cd
 800b78c:	0800c8de 	.word	0x0800c8de

0800b790 <__retarget_lock_acquire_recursive>:
 800b790:	4770      	bx	lr

0800b792 <__retarget_lock_release_recursive>:
 800b792:	4770      	bx	lr

0800b794 <memcpy>:
 800b794:	440a      	add	r2, r1
 800b796:	4291      	cmp	r1, r2
 800b798:	f100 33ff 	add.w	r3, r0, #4294967295
 800b79c:	d100      	bne.n	800b7a0 <memcpy+0xc>
 800b79e:	4770      	bx	lr
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7aa:	4291      	cmp	r1, r2
 800b7ac:	d1f9      	bne.n	800b7a2 <memcpy+0xe>
 800b7ae:	bd10      	pop	{r4, pc}

0800b7b0 <memmove>:
 800b7b0:	4288      	cmp	r0, r1
 800b7b2:	b510      	push	{r4, lr}
 800b7b4:	eb01 0402 	add.w	r4, r1, r2
 800b7b8:	d902      	bls.n	800b7c0 <memmove+0x10>
 800b7ba:	4284      	cmp	r4, r0
 800b7bc:	4623      	mov	r3, r4
 800b7be:	d807      	bhi.n	800b7d0 <memmove+0x20>
 800b7c0:	1e43      	subs	r3, r0, #1
 800b7c2:	42a1      	cmp	r1, r4
 800b7c4:	d008      	beq.n	800b7d8 <memmove+0x28>
 800b7c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7ce:	e7f8      	b.n	800b7c2 <memmove+0x12>
 800b7d0:	4402      	add	r2, r0
 800b7d2:	4601      	mov	r1, r0
 800b7d4:	428a      	cmp	r2, r1
 800b7d6:	d100      	bne.n	800b7da <memmove+0x2a>
 800b7d8:	bd10      	pop	{r4, pc}
 800b7da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7e2:	e7f7      	b.n	800b7d4 <memmove+0x24>

0800b7e4 <_realloc_r>:
 800b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e6:	4607      	mov	r7, r0
 800b7e8:	4614      	mov	r4, r2
 800b7ea:	460e      	mov	r6, r1
 800b7ec:	b921      	cbnz	r1, 800b7f8 <_realloc_r+0x14>
 800b7ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	f7ff bbd8 	b.w	800afa8 <_malloc_r>
 800b7f8:	b922      	cbnz	r2, 800b804 <_realloc_r+0x20>
 800b7fa:	f7ff fb85 	bl	800af08 <_free_r>
 800b7fe:	4625      	mov	r5, r4
 800b800:	4628      	mov	r0, r5
 800b802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b804:	f000 f814 	bl	800b830 <_malloc_usable_size_r>
 800b808:	42a0      	cmp	r0, r4
 800b80a:	d20f      	bcs.n	800b82c <_realloc_r+0x48>
 800b80c:	4621      	mov	r1, r4
 800b80e:	4638      	mov	r0, r7
 800b810:	f7ff fbca 	bl	800afa8 <_malloc_r>
 800b814:	4605      	mov	r5, r0
 800b816:	2800      	cmp	r0, #0
 800b818:	d0f2      	beq.n	800b800 <_realloc_r+0x1c>
 800b81a:	4631      	mov	r1, r6
 800b81c:	4622      	mov	r2, r4
 800b81e:	f7ff ffb9 	bl	800b794 <memcpy>
 800b822:	4631      	mov	r1, r6
 800b824:	4638      	mov	r0, r7
 800b826:	f7ff fb6f 	bl	800af08 <_free_r>
 800b82a:	e7e9      	b.n	800b800 <_realloc_r+0x1c>
 800b82c:	4635      	mov	r5, r6
 800b82e:	e7e7      	b.n	800b800 <_realloc_r+0x1c>

0800b830 <_malloc_usable_size_r>:
 800b830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b834:	1f18      	subs	r0, r3, #4
 800b836:	2b00      	cmp	r3, #0
 800b838:	bfbc      	itt	lt
 800b83a:	580b      	ldrlt	r3, [r1, r0]
 800b83c:	18c0      	addlt	r0, r0, r3
 800b83e:	4770      	bx	lr

0800b840 <pow>:
 800b840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b844:	ec59 8b10 	vmov	r8, r9, d0
 800b848:	ec57 6b11 	vmov	r6, r7, d1
 800b84c:	f000 f8a8 	bl	800b9a0 <__ieee754_pow>
 800b850:	4b4e      	ldr	r3, [pc, #312]	; (800b98c <pow+0x14c>)
 800b852:	f993 3000 	ldrsb.w	r3, [r3]
 800b856:	3301      	adds	r3, #1
 800b858:	ec55 4b10 	vmov	r4, r5, d0
 800b85c:	d015      	beq.n	800b88a <pow+0x4a>
 800b85e:	4632      	mov	r2, r6
 800b860:	463b      	mov	r3, r7
 800b862:	4630      	mov	r0, r6
 800b864:	4639      	mov	r1, r7
 800b866:	f7f5 f961 	bl	8000b2c <__aeabi_dcmpun>
 800b86a:	b970      	cbnz	r0, 800b88a <pow+0x4a>
 800b86c:	4642      	mov	r2, r8
 800b86e:	464b      	mov	r3, r9
 800b870:	4640      	mov	r0, r8
 800b872:	4649      	mov	r1, r9
 800b874:	f7f5 f95a 	bl	8000b2c <__aeabi_dcmpun>
 800b878:	2200      	movs	r2, #0
 800b87a:	2300      	movs	r3, #0
 800b87c:	b148      	cbz	r0, 800b892 <pow+0x52>
 800b87e:	4630      	mov	r0, r6
 800b880:	4639      	mov	r1, r7
 800b882:	f7f5 f921 	bl	8000ac8 <__aeabi_dcmpeq>
 800b886:	2800      	cmp	r0, #0
 800b888:	d17d      	bne.n	800b986 <pow+0x146>
 800b88a:	ec45 4b10 	vmov	d0, r4, r5
 800b88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b892:	4640      	mov	r0, r8
 800b894:	4649      	mov	r1, r9
 800b896:	f7f5 f917 	bl	8000ac8 <__aeabi_dcmpeq>
 800b89a:	b1e0      	cbz	r0, 800b8d6 <pow+0x96>
 800b89c:	2200      	movs	r2, #0
 800b89e:	2300      	movs	r3, #0
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	4639      	mov	r1, r7
 800b8a4:	f7f5 f910 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d16c      	bne.n	800b986 <pow+0x146>
 800b8ac:	ec47 6b10 	vmov	d0, r6, r7
 800b8b0:	f000 fe55 	bl	800c55e <finite>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d0e8      	beq.n	800b88a <pow+0x4a>
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4630      	mov	r0, r6
 800b8be:	4639      	mov	r1, r7
 800b8c0:	f7f5 f90c 	bl	8000adc <__aeabi_dcmplt>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d0e0      	beq.n	800b88a <pow+0x4a>
 800b8c8:	f7ff fadc 	bl	800ae84 <__errno>
 800b8cc:	2321      	movs	r3, #33	; 0x21
 800b8ce:	6003      	str	r3, [r0, #0]
 800b8d0:	2400      	movs	r4, #0
 800b8d2:	4d2f      	ldr	r5, [pc, #188]	; (800b990 <pow+0x150>)
 800b8d4:	e7d9      	b.n	800b88a <pow+0x4a>
 800b8d6:	ec45 4b10 	vmov	d0, r4, r5
 800b8da:	f000 fe40 	bl	800c55e <finite>
 800b8de:	bbb8      	cbnz	r0, 800b950 <pow+0x110>
 800b8e0:	ec49 8b10 	vmov	d0, r8, r9
 800b8e4:	f000 fe3b 	bl	800c55e <finite>
 800b8e8:	b390      	cbz	r0, 800b950 <pow+0x110>
 800b8ea:	ec47 6b10 	vmov	d0, r6, r7
 800b8ee:	f000 fe36 	bl	800c55e <finite>
 800b8f2:	b368      	cbz	r0, 800b950 <pow+0x110>
 800b8f4:	4622      	mov	r2, r4
 800b8f6:	462b      	mov	r3, r5
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	f7f5 f916 	bl	8000b2c <__aeabi_dcmpun>
 800b900:	b160      	cbz	r0, 800b91c <pow+0xdc>
 800b902:	f7ff fabf 	bl	800ae84 <__errno>
 800b906:	2321      	movs	r3, #33	; 0x21
 800b908:	6003      	str	r3, [r0, #0]
 800b90a:	2200      	movs	r2, #0
 800b90c:	2300      	movs	r3, #0
 800b90e:	4610      	mov	r0, r2
 800b910:	4619      	mov	r1, r3
 800b912:	f7f4 ff9b 	bl	800084c <__aeabi_ddiv>
 800b916:	4604      	mov	r4, r0
 800b918:	460d      	mov	r5, r1
 800b91a:	e7b6      	b.n	800b88a <pow+0x4a>
 800b91c:	f7ff fab2 	bl	800ae84 <__errno>
 800b920:	2322      	movs	r3, #34	; 0x22
 800b922:	6003      	str	r3, [r0, #0]
 800b924:	2200      	movs	r2, #0
 800b926:	2300      	movs	r3, #0
 800b928:	4640      	mov	r0, r8
 800b92a:	4649      	mov	r1, r9
 800b92c:	f7f5 f8d6 	bl	8000adc <__aeabi_dcmplt>
 800b930:	2400      	movs	r4, #0
 800b932:	b158      	cbz	r0, 800b94c <pow+0x10c>
 800b934:	ec47 6b10 	vmov	d0, r6, r7
 800b938:	f000 fe26 	bl	800c588 <rint>
 800b93c:	4632      	mov	r2, r6
 800b93e:	ec51 0b10 	vmov	r0, r1, d0
 800b942:	463b      	mov	r3, r7
 800b944:	f7f5 f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d0c2      	beq.n	800b8d2 <pow+0x92>
 800b94c:	4d11      	ldr	r5, [pc, #68]	; (800b994 <pow+0x154>)
 800b94e:	e79c      	b.n	800b88a <pow+0x4a>
 800b950:	2200      	movs	r2, #0
 800b952:	2300      	movs	r3, #0
 800b954:	4620      	mov	r0, r4
 800b956:	4629      	mov	r1, r5
 800b958:	f7f5 f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d094      	beq.n	800b88a <pow+0x4a>
 800b960:	ec49 8b10 	vmov	d0, r8, r9
 800b964:	f000 fdfb 	bl	800c55e <finite>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d08e      	beq.n	800b88a <pow+0x4a>
 800b96c:	ec47 6b10 	vmov	d0, r6, r7
 800b970:	f000 fdf5 	bl	800c55e <finite>
 800b974:	2800      	cmp	r0, #0
 800b976:	d088      	beq.n	800b88a <pow+0x4a>
 800b978:	f7ff fa84 	bl	800ae84 <__errno>
 800b97c:	2322      	movs	r3, #34	; 0x22
 800b97e:	6003      	str	r3, [r0, #0]
 800b980:	2400      	movs	r4, #0
 800b982:	2500      	movs	r5, #0
 800b984:	e781      	b.n	800b88a <pow+0x4a>
 800b986:	4d04      	ldr	r5, [pc, #16]	; (800b998 <pow+0x158>)
 800b988:	2400      	movs	r4, #0
 800b98a:	e77e      	b.n	800b88a <pow+0x4a>
 800b98c:	20000144 	.word	0x20000144
 800b990:	fff00000 	.word	0xfff00000
 800b994:	7ff00000 	.word	0x7ff00000
 800b998:	3ff00000 	.word	0x3ff00000
 800b99c:	00000000 	.word	0x00000000

0800b9a0 <__ieee754_pow>:
 800b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a4:	ed2d 8b06 	vpush	{d8-d10}
 800b9a8:	b08d      	sub	sp, #52	; 0x34
 800b9aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b9ae:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b9b2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b9b6:	ea56 0100 	orrs.w	r1, r6, r0
 800b9ba:	ec53 2b10 	vmov	r2, r3, d0
 800b9be:	f000 84d1 	beq.w	800c364 <__ieee754_pow+0x9c4>
 800b9c2:	497f      	ldr	r1, [pc, #508]	; (800bbc0 <__ieee754_pow+0x220>)
 800b9c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b9c8:	428c      	cmp	r4, r1
 800b9ca:	ee10 8a10 	vmov	r8, s0
 800b9ce:	4699      	mov	r9, r3
 800b9d0:	dc09      	bgt.n	800b9e6 <__ieee754_pow+0x46>
 800b9d2:	d103      	bne.n	800b9dc <__ieee754_pow+0x3c>
 800b9d4:	b97a      	cbnz	r2, 800b9f6 <__ieee754_pow+0x56>
 800b9d6:	42a6      	cmp	r6, r4
 800b9d8:	dd02      	ble.n	800b9e0 <__ieee754_pow+0x40>
 800b9da:	e00c      	b.n	800b9f6 <__ieee754_pow+0x56>
 800b9dc:	428e      	cmp	r6, r1
 800b9de:	dc02      	bgt.n	800b9e6 <__ieee754_pow+0x46>
 800b9e0:	428e      	cmp	r6, r1
 800b9e2:	d110      	bne.n	800ba06 <__ieee754_pow+0x66>
 800b9e4:	b178      	cbz	r0, 800ba06 <__ieee754_pow+0x66>
 800b9e6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b9ea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b9ee:	ea54 0308 	orrs.w	r3, r4, r8
 800b9f2:	f000 84b7 	beq.w	800c364 <__ieee754_pow+0x9c4>
 800b9f6:	4873      	ldr	r0, [pc, #460]	; (800bbc4 <__ieee754_pow+0x224>)
 800b9f8:	b00d      	add	sp, #52	; 0x34
 800b9fa:	ecbd 8b06 	vpop	{d8-d10}
 800b9fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba02:	f000 bdb9 	b.w	800c578 <nan>
 800ba06:	f1b9 0f00 	cmp.w	r9, #0
 800ba0a:	da36      	bge.n	800ba7a <__ieee754_pow+0xda>
 800ba0c:	496e      	ldr	r1, [pc, #440]	; (800bbc8 <__ieee754_pow+0x228>)
 800ba0e:	428e      	cmp	r6, r1
 800ba10:	dc51      	bgt.n	800bab6 <__ieee754_pow+0x116>
 800ba12:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800ba16:	428e      	cmp	r6, r1
 800ba18:	f340 84af 	ble.w	800c37a <__ieee754_pow+0x9da>
 800ba1c:	1531      	asrs	r1, r6, #20
 800ba1e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ba22:	2914      	cmp	r1, #20
 800ba24:	dd0f      	ble.n	800ba46 <__ieee754_pow+0xa6>
 800ba26:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800ba2a:	fa20 fc01 	lsr.w	ip, r0, r1
 800ba2e:	fa0c f101 	lsl.w	r1, ip, r1
 800ba32:	4281      	cmp	r1, r0
 800ba34:	f040 84a1 	bne.w	800c37a <__ieee754_pow+0x9da>
 800ba38:	f00c 0c01 	and.w	ip, ip, #1
 800ba3c:	f1cc 0102 	rsb	r1, ip, #2
 800ba40:	9100      	str	r1, [sp, #0]
 800ba42:	b180      	cbz	r0, 800ba66 <__ieee754_pow+0xc6>
 800ba44:	e059      	b.n	800bafa <__ieee754_pow+0x15a>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d155      	bne.n	800baf6 <__ieee754_pow+0x156>
 800ba4a:	f1c1 0114 	rsb	r1, r1, #20
 800ba4e:	fa46 fc01 	asr.w	ip, r6, r1
 800ba52:	fa0c f101 	lsl.w	r1, ip, r1
 800ba56:	42b1      	cmp	r1, r6
 800ba58:	f040 848c 	bne.w	800c374 <__ieee754_pow+0x9d4>
 800ba5c:	f00c 0c01 	and.w	ip, ip, #1
 800ba60:	f1cc 0102 	rsb	r1, ip, #2
 800ba64:	9100      	str	r1, [sp, #0]
 800ba66:	4959      	ldr	r1, [pc, #356]	; (800bbcc <__ieee754_pow+0x22c>)
 800ba68:	428e      	cmp	r6, r1
 800ba6a:	d12d      	bne.n	800bac8 <__ieee754_pow+0x128>
 800ba6c:	2f00      	cmp	r7, #0
 800ba6e:	da79      	bge.n	800bb64 <__ieee754_pow+0x1c4>
 800ba70:	4956      	ldr	r1, [pc, #344]	; (800bbcc <__ieee754_pow+0x22c>)
 800ba72:	2000      	movs	r0, #0
 800ba74:	f7f4 feea 	bl	800084c <__aeabi_ddiv>
 800ba78:	e016      	b.n	800baa8 <__ieee754_pow+0x108>
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	9100      	str	r1, [sp, #0]
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d13b      	bne.n	800bafa <__ieee754_pow+0x15a>
 800ba82:	494f      	ldr	r1, [pc, #316]	; (800bbc0 <__ieee754_pow+0x220>)
 800ba84:	428e      	cmp	r6, r1
 800ba86:	d1ee      	bne.n	800ba66 <__ieee754_pow+0xc6>
 800ba88:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ba8c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ba90:	ea53 0308 	orrs.w	r3, r3, r8
 800ba94:	f000 8466 	beq.w	800c364 <__ieee754_pow+0x9c4>
 800ba98:	4b4d      	ldr	r3, [pc, #308]	; (800bbd0 <__ieee754_pow+0x230>)
 800ba9a:	429c      	cmp	r4, r3
 800ba9c:	dd0d      	ble.n	800baba <__ieee754_pow+0x11a>
 800ba9e:	2f00      	cmp	r7, #0
 800baa0:	f280 8464 	bge.w	800c36c <__ieee754_pow+0x9cc>
 800baa4:	2000      	movs	r0, #0
 800baa6:	2100      	movs	r1, #0
 800baa8:	ec41 0b10 	vmov	d0, r0, r1
 800baac:	b00d      	add	sp, #52	; 0x34
 800baae:	ecbd 8b06 	vpop	{d8-d10}
 800bab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab6:	2102      	movs	r1, #2
 800bab8:	e7e0      	b.n	800ba7c <__ieee754_pow+0xdc>
 800baba:	2f00      	cmp	r7, #0
 800babc:	daf2      	bge.n	800baa4 <__ieee754_pow+0x104>
 800babe:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800bac2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bac6:	e7ef      	b.n	800baa8 <__ieee754_pow+0x108>
 800bac8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800bacc:	d104      	bne.n	800bad8 <__ieee754_pow+0x138>
 800bace:	4610      	mov	r0, r2
 800bad0:	4619      	mov	r1, r3
 800bad2:	f7f4 fd91 	bl	80005f8 <__aeabi_dmul>
 800bad6:	e7e7      	b.n	800baa8 <__ieee754_pow+0x108>
 800bad8:	493e      	ldr	r1, [pc, #248]	; (800bbd4 <__ieee754_pow+0x234>)
 800bada:	428f      	cmp	r7, r1
 800badc:	d10d      	bne.n	800bafa <__ieee754_pow+0x15a>
 800bade:	f1b9 0f00 	cmp.w	r9, #0
 800bae2:	db0a      	blt.n	800bafa <__ieee754_pow+0x15a>
 800bae4:	ec43 2b10 	vmov	d0, r2, r3
 800bae8:	b00d      	add	sp, #52	; 0x34
 800baea:	ecbd 8b06 	vpop	{d8-d10}
 800baee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf2:	f000 bc77 	b.w	800c3e4 <__ieee754_sqrt>
 800baf6:	2100      	movs	r1, #0
 800baf8:	9100      	str	r1, [sp, #0]
 800bafa:	ec43 2b10 	vmov	d0, r2, r3
 800bafe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb02:	f000 fd23 	bl	800c54c <fabs>
 800bb06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb0a:	ec51 0b10 	vmov	r0, r1, d0
 800bb0e:	f1b8 0f00 	cmp.w	r8, #0
 800bb12:	d12a      	bne.n	800bb6a <__ieee754_pow+0x1ca>
 800bb14:	b12c      	cbz	r4, 800bb22 <__ieee754_pow+0x182>
 800bb16:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800bbcc <__ieee754_pow+0x22c>
 800bb1a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800bb1e:	45e6      	cmp	lr, ip
 800bb20:	d123      	bne.n	800bb6a <__ieee754_pow+0x1ca>
 800bb22:	2f00      	cmp	r7, #0
 800bb24:	da05      	bge.n	800bb32 <__ieee754_pow+0x192>
 800bb26:	4602      	mov	r2, r0
 800bb28:	460b      	mov	r3, r1
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	4927      	ldr	r1, [pc, #156]	; (800bbcc <__ieee754_pow+0x22c>)
 800bb2e:	f7f4 fe8d 	bl	800084c <__aeabi_ddiv>
 800bb32:	f1b9 0f00 	cmp.w	r9, #0
 800bb36:	dab7      	bge.n	800baa8 <__ieee754_pow+0x108>
 800bb38:	9b00      	ldr	r3, [sp, #0]
 800bb3a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bb3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb42:	4323      	orrs	r3, r4
 800bb44:	d108      	bne.n	800bb58 <__ieee754_pow+0x1b8>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	f7f4 fb9b 	bl	8000288 <__aeabi_dsub>
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	e78d      	b.n	800ba74 <__ieee754_pow+0xd4>
 800bb58:	9b00      	ldr	r3, [sp, #0]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d1a4      	bne.n	800baa8 <__ieee754_pow+0x108>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb64:	4610      	mov	r0, r2
 800bb66:	4619      	mov	r1, r3
 800bb68:	e79e      	b.n	800baa8 <__ieee754_pow+0x108>
 800bb6a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800bb6e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800bb72:	950a      	str	r5, [sp, #40]	; 0x28
 800bb74:	9d00      	ldr	r5, [sp, #0]
 800bb76:	46ac      	mov	ip, r5
 800bb78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bb7a:	ea5c 0505 	orrs.w	r5, ip, r5
 800bb7e:	d0e4      	beq.n	800bb4a <__ieee754_pow+0x1aa>
 800bb80:	4b15      	ldr	r3, [pc, #84]	; (800bbd8 <__ieee754_pow+0x238>)
 800bb82:	429e      	cmp	r6, r3
 800bb84:	f340 80fc 	ble.w	800bd80 <__ieee754_pow+0x3e0>
 800bb88:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bb8c:	429e      	cmp	r6, r3
 800bb8e:	4b10      	ldr	r3, [pc, #64]	; (800bbd0 <__ieee754_pow+0x230>)
 800bb90:	dd07      	ble.n	800bba2 <__ieee754_pow+0x202>
 800bb92:	429c      	cmp	r4, r3
 800bb94:	dc0a      	bgt.n	800bbac <__ieee754_pow+0x20c>
 800bb96:	2f00      	cmp	r7, #0
 800bb98:	da84      	bge.n	800baa4 <__ieee754_pow+0x104>
 800bb9a:	a307      	add	r3, pc, #28	; (adr r3, 800bbb8 <__ieee754_pow+0x218>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	e795      	b.n	800bace <__ieee754_pow+0x12e>
 800bba2:	429c      	cmp	r4, r3
 800bba4:	dbf7      	blt.n	800bb96 <__ieee754_pow+0x1f6>
 800bba6:	4b09      	ldr	r3, [pc, #36]	; (800bbcc <__ieee754_pow+0x22c>)
 800bba8:	429c      	cmp	r4, r3
 800bbaa:	dd17      	ble.n	800bbdc <__ieee754_pow+0x23c>
 800bbac:	2f00      	cmp	r7, #0
 800bbae:	dcf4      	bgt.n	800bb9a <__ieee754_pow+0x1fa>
 800bbb0:	e778      	b.n	800baa4 <__ieee754_pow+0x104>
 800bbb2:	bf00      	nop
 800bbb4:	f3af 8000 	nop.w
 800bbb8:	8800759c 	.word	0x8800759c
 800bbbc:	7e37e43c 	.word	0x7e37e43c
 800bbc0:	7ff00000 	.word	0x7ff00000
 800bbc4:	0800c8c1 	.word	0x0800c8c1
 800bbc8:	433fffff 	.word	0x433fffff
 800bbcc:	3ff00000 	.word	0x3ff00000
 800bbd0:	3fefffff 	.word	0x3fefffff
 800bbd4:	3fe00000 	.word	0x3fe00000
 800bbd8:	41e00000 	.word	0x41e00000
 800bbdc:	4b64      	ldr	r3, [pc, #400]	; (800bd70 <__ieee754_pow+0x3d0>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f7f4 fb52 	bl	8000288 <__aeabi_dsub>
 800bbe4:	a356      	add	r3, pc, #344	; (adr r3, 800bd40 <__ieee754_pow+0x3a0>)
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	4604      	mov	r4, r0
 800bbec:	460d      	mov	r5, r1
 800bbee:	f7f4 fd03 	bl	80005f8 <__aeabi_dmul>
 800bbf2:	a355      	add	r3, pc, #340	; (adr r3, 800bd48 <__ieee754_pow+0x3a8>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	460f      	mov	r7, r1
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	4629      	mov	r1, r5
 800bc00:	f7f4 fcfa 	bl	80005f8 <__aeabi_dmul>
 800bc04:	4b5b      	ldr	r3, [pc, #364]	; (800bd74 <__ieee754_pow+0x3d4>)
 800bc06:	4682      	mov	sl, r0
 800bc08:	468b      	mov	fp, r1
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	4629      	mov	r1, r5
 800bc10:	f7f4 fcf2 	bl	80005f8 <__aeabi_dmul>
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	a14d      	add	r1, pc, #308	; (adr r1, 800bd50 <__ieee754_pow+0x3b0>)
 800bc1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc1e:	f7f4 fb33 	bl	8000288 <__aeabi_dsub>
 800bc22:	4622      	mov	r2, r4
 800bc24:	462b      	mov	r3, r5
 800bc26:	f7f4 fce7 	bl	80005f8 <__aeabi_dmul>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	2000      	movs	r0, #0
 800bc30:	4951      	ldr	r1, [pc, #324]	; (800bd78 <__ieee754_pow+0x3d8>)
 800bc32:	f7f4 fb29 	bl	8000288 <__aeabi_dsub>
 800bc36:	4622      	mov	r2, r4
 800bc38:	4680      	mov	r8, r0
 800bc3a:	4689      	mov	r9, r1
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	4620      	mov	r0, r4
 800bc40:	4629      	mov	r1, r5
 800bc42:	f7f4 fcd9 	bl	80005f8 <__aeabi_dmul>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	f7f4 fcd3 	bl	80005f8 <__aeabi_dmul>
 800bc52:	a341      	add	r3, pc, #260	; (adr r3, 800bd58 <__ieee754_pow+0x3b8>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f7f4 fcce 	bl	80005f8 <__aeabi_dmul>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	460b      	mov	r3, r1
 800bc60:	4650      	mov	r0, sl
 800bc62:	4659      	mov	r1, fp
 800bc64:	f7f4 fb10 	bl	8000288 <__aeabi_dsub>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	4680      	mov	r8, r0
 800bc6e:	4689      	mov	r9, r1
 800bc70:	4630      	mov	r0, r6
 800bc72:	4639      	mov	r1, r7
 800bc74:	f7f4 fb0a 	bl	800028c <__adddf3>
 800bc78:	2400      	movs	r4, #0
 800bc7a:	4632      	mov	r2, r6
 800bc7c:	463b      	mov	r3, r7
 800bc7e:	4620      	mov	r0, r4
 800bc80:	460d      	mov	r5, r1
 800bc82:	f7f4 fb01 	bl	8000288 <__aeabi_dsub>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	f7f4 fafb 	bl	8000288 <__aeabi_dsub>
 800bc92:	9b00      	ldr	r3, [sp, #0]
 800bc94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc96:	3b01      	subs	r3, #1
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	4682      	mov	sl, r0
 800bc9c:	468b      	mov	fp, r1
 800bc9e:	f040 81f1 	bne.w	800c084 <__ieee754_pow+0x6e4>
 800bca2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bd60 <__ieee754_pow+0x3c0>
 800bca6:	eeb0 8a47 	vmov.f32	s16, s14
 800bcaa:	eef0 8a67 	vmov.f32	s17, s15
 800bcae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bcb2:	2600      	movs	r6, #0
 800bcb4:	4632      	mov	r2, r6
 800bcb6:	463b      	mov	r3, r7
 800bcb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcbc:	f7f4 fae4 	bl	8000288 <__aeabi_dsub>
 800bcc0:	4622      	mov	r2, r4
 800bcc2:	462b      	mov	r3, r5
 800bcc4:	f7f4 fc98 	bl	80005f8 <__aeabi_dmul>
 800bcc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bccc:	4680      	mov	r8, r0
 800bcce:	4689      	mov	r9, r1
 800bcd0:	4650      	mov	r0, sl
 800bcd2:	4659      	mov	r1, fp
 800bcd4:	f7f4 fc90 	bl	80005f8 <__aeabi_dmul>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4640      	mov	r0, r8
 800bcde:	4649      	mov	r1, r9
 800bce0:	f7f4 fad4 	bl	800028c <__adddf3>
 800bce4:	4632      	mov	r2, r6
 800bce6:	463b      	mov	r3, r7
 800bce8:	4680      	mov	r8, r0
 800bcea:	4689      	mov	r9, r1
 800bcec:	4620      	mov	r0, r4
 800bcee:	4629      	mov	r1, r5
 800bcf0:	f7f4 fc82 	bl	80005f8 <__aeabi_dmul>
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	460d      	mov	r5, r1
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	4649      	mov	r1, r9
 800bcfe:	4640      	mov	r0, r8
 800bd00:	f7f4 fac4 	bl	800028c <__adddf3>
 800bd04:	4b1d      	ldr	r3, [pc, #116]	; (800bd7c <__ieee754_pow+0x3dc>)
 800bd06:	4299      	cmp	r1, r3
 800bd08:	ec45 4b19 	vmov	d9, r4, r5
 800bd0c:	4606      	mov	r6, r0
 800bd0e:	460f      	mov	r7, r1
 800bd10:	468b      	mov	fp, r1
 800bd12:	f340 82fe 	ble.w	800c312 <__ieee754_pow+0x972>
 800bd16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bd1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bd1e:	4303      	orrs	r3, r0
 800bd20:	f000 81f0 	beq.w	800c104 <__ieee754_pow+0x764>
 800bd24:	a310      	add	r3, pc, #64	; (adr r3, 800bd68 <__ieee754_pow+0x3c8>)
 800bd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2a:	ec51 0b18 	vmov	r0, r1, d8
 800bd2e:	f7f4 fc63 	bl	80005f8 <__aeabi_dmul>
 800bd32:	a30d      	add	r3, pc, #52	; (adr r3, 800bd68 <__ieee754_pow+0x3c8>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	e6cb      	b.n	800bad2 <__ieee754_pow+0x132>
 800bd3a:	bf00      	nop
 800bd3c:	f3af 8000 	nop.w
 800bd40:	60000000 	.word	0x60000000
 800bd44:	3ff71547 	.word	0x3ff71547
 800bd48:	f85ddf44 	.word	0xf85ddf44
 800bd4c:	3e54ae0b 	.word	0x3e54ae0b
 800bd50:	55555555 	.word	0x55555555
 800bd54:	3fd55555 	.word	0x3fd55555
 800bd58:	652b82fe 	.word	0x652b82fe
 800bd5c:	3ff71547 	.word	0x3ff71547
 800bd60:	00000000 	.word	0x00000000
 800bd64:	bff00000 	.word	0xbff00000
 800bd68:	8800759c 	.word	0x8800759c
 800bd6c:	7e37e43c 	.word	0x7e37e43c
 800bd70:	3ff00000 	.word	0x3ff00000
 800bd74:	3fd00000 	.word	0x3fd00000
 800bd78:	3fe00000 	.word	0x3fe00000
 800bd7c:	408fffff 	.word	0x408fffff
 800bd80:	4bd7      	ldr	r3, [pc, #860]	; (800c0e0 <__ieee754_pow+0x740>)
 800bd82:	ea03 0309 	and.w	r3, r3, r9
 800bd86:	2200      	movs	r2, #0
 800bd88:	b92b      	cbnz	r3, 800bd96 <__ieee754_pow+0x3f6>
 800bd8a:	4bd6      	ldr	r3, [pc, #856]	; (800c0e4 <__ieee754_pow+0x744>)
 800bd8c:	f7f4 fc34 	bl	80005f8 <__aeabi_dmul>
 800bd90:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bd94:	460c      	mov	r4, r1
 800bd96:	1523      	asrs	r3, r4, #20
 800bd98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bd9c:	4413      	add	r3, r2
 800bd9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bda0:	4bd1      	ldr	r3, [pc, #836]	; (800c0e8 <__ieee754_pow+0x748>)
 800bda2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bda6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bdaa:	429c      	cmp	r4, r3
 800bdac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bdb0:	dd08      	ble.n	800bdc4 <__ieee754_pow+0x424>
 800bdb2:	4bce      	ldr	r3, [pc, #824]	; (800c0ec <__ieee754_pow+0x74c>)
 800bdb4:	429c      	cmp	r4, r3
 800bdb6:	f340 8163 	ble.w	800c080 <__ieee754_pow+0x6e0>
 800bdba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bdc0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bdc4:	2400      	movs	r4, #0
 800bdc6:	00e3      	lsls	r3, r4, #3
 800bdc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdca:	4bc9      	ldr	r3, [pc, #804]	; (800c0f0 <__ieee754_pow+0x750>)
 800bdcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdd0:	ed93 7b00 	vldr	d7, [r3]
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	ec53 2b17 	vmov	r2, r3, d7
 800bdda:	eeb0 8a47 	vmov.f32	s16, s14
 800bdde:	eef0 8a67 	vmov.f32	s17, s15
 800bde2:	4682      	mov	sl, r0
 800bde4:	f7f4 fa50 	bl	8000288 <__aeabi_dsub>
 800bde8:	4652      	mov	r2, sl
 800bdea:	4606      	mov	r6, r0
 800bdec:	460f      	mov	r7, r1
 800bdee:	462b      	mov	r3, r5
 800bdf0:	ec51 0b18 	vmov	r0, r1, d8
 800bdf4:	f7f4 fa4a 	bl	800028c <__adddf3>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	49bd      	ldr	r1, [pc, #756]	; (800c0f4 <__ieee754_pow+0x754>)
 800be00:	f7f4 fd24 	bl	800084c <__aeabi_ddiv>
 800be04:	ec41 0b19 	vmov	d9, r0, r1
 800be08:	4602      	mov	r2, r0
 800be0a:	460b      	mov	r3, r1
 800be0c:	4630      	mov	r0, r6
 800be0e:	4639      	mov	r1, r7
 800be10:	f7f4 fbf2 	bl	80005f8 <__aeabi_dmul>
 800be14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be20:	2300      	movs	r3, #0
 800be22:	9304      	str	r3, [sp, #16]
 800be24:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800be28:	46ab      	mov	fp, r5
 800be2a:	106d      	asrs	r5, r5, #1
 800be2c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800be30:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800be34:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800be38:	2200      	movs	r2, #0
 800be3a:	4640      	mov	r0, r8
 800be3c:	4649      	mov	r1, r9
 800be3e:	4614      	mov	r4, r2
 800be40:	461d      	mov	r5, r3
 800be42:	f7f4 fbd9 	bl	80005f8 <__aeabi_dmul>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4630      	mov	r0, r6
 800be4c:	4639      	mov	r1, r7
 800be4e:	f7f4 fa1b 	bl	8000288 <__aeabi_dsub>
 800be52:	ec53 2b18 	vmov	r2, r3, d8
 800be56:	4606      	mov	r6, r0
 800be58:	460f      	mov	r7, r1
 800be5a:	4620      	mov	r0, r4
 800be5c:	4629      	mov	r1, r5
 800be5e:	f7f4 fa13 	bl	8000288 <__aeabi_dsub>
 800be62:	4602      	mov	r2, r0
 800be64:	460b      	mov	r3, r1
 800be66:	4650      	mov	r0, sl
 800be68:	4659      	mov	r1, fp
 800be6a:	f7f4 fa0d 	bl	8000288 <__aeabi_dsub>
 800be6e:	4642      	mov	r2, r8
 800be70:	464b      	mov	r3, r9
 800be72:	f7f4 fbc1 	bl	80005f8 <__aeabi_dmul>
 800be76:	4602      	mov	r2, r0
 800be78:	460b      	mov	r3, r1
 800be7a:	4630      	mov	r0, r6
 800be7c:	4639      	mov	r1, r7
 800be7e:	f7f4 fa03 	bl	8000288 <__aeabi_dsub>
 800be82:	ec53 2b19 	vmov	r2, r3, d9
 800be86:	f7f4 fbb7 	bl	80005f8 <__aeabi_dmul>
 800be8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be8e:	ec41 0b18 	vmov	d8, r0, r1
 800be92:	4610      	mov	r0, r2
 800be94:	4619      	mov	r1, r3
 800be96:	f7f4 fbaf 	bl	80005f8 <__aeabi_dmul>
 800be9a:	a37d      	add	r3, pc, #500	; (adr r3, 800c090 <__ieee754_pow+0x6f0>)
 800be9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea0:	4604      	mov	r4, r0
 800bea2:	460d      	mov	r5, r1
 800bea4:	f7f4 fba8 	bl	80005f8 <__aeabi_dmul>
 800bea8:	a37b      	add	r3, pc, #492	; (adr r3, 800c098 <__ieee754_pow+0x6f8>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	f7f4 f9ed 	bl	800028c <__adddf3>
 800beb2:	4622      	mov	r2, r4
 800beb4:	462b      	mov	r3, r5
 800beb6:	f7f4 fb9f 	bl	80005f8 <__aeabi_dmul>
 800beba:	a379      	add	r3, pc, #484	; (adr r3, 800c0a0 <__ieee754_pow+0x700>)
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	f7f4 f9e4 	bl	800028c <__adddf3>
 800bec4:	4622      	mov	r2, r4
 800bec6:	462b      	mov	r3, r5
 800bec8:	f7f4 fb96 	bl	80005f8 <__aeabi_dmul>
 800becc:	a376      	add	r3, pc, #472	; (adr r3, 800c0a8 <__ieee754_pow+0x708>)
 800bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed2:	f7f4 f9db 	bl	800028c <__adddf3>
 800bed6:	4622      	mov	r2, r4
 800bed8:	462b      	mov	r3, r5
 800beda:	f7f4 fb8d 	bl	80005f8 <__aeabi_dmul>
 800bede:	a374      	add	r3, pc, #464	; (adr r3, 800c0b0 <__ieee754_pow+0x710>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	f7f4 f9d2 	bl	800028c <__adddf3>
 800bee8:	4622      	mov	r2, r4
 800beea:	462b      	mov	r3, r5
 800beec:	f7f4 fb84 	bl	80005f8 <__aeabi_dmul>
 800bef0:	a371      	add	r3, pc, #452	; (adr r3, 800c0b8 <__ieee754_pow+0x718>)
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	f7f4 f9c9 	bl	800028c <__adddf3>
 800befa:	4622      	mov	r2, r4
 800befc:	4606      	mov	r6, r0
 800befe:	460f      	mov	r7, r1
 800bf00:	462b      	mov	r3, r5
 800bf02:	4620      	mov	r0, r4
 800bf04:	4629      	mov	r1, r5
 800bf06:	f7f4 fb77 	bl	80005f8 <__aeabi_dmul>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4630      	mov	r0, r6
 800bf10:	4639      	mov	r1, r7
 800bf12:	f7f4 fb71 	bl	80005f8 <__aeabi_dmul>
 800bf16:	4642      	mov	r2, r8
 800bf18:	4604      	mov	r4, r0
 800bf1a:	460d      	mov	r5, r1
 800bf1c:	464b      	mov	r3, r9
 800bf1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf22:	f7f4 f9b3 	bl	800028c <__adddf3>
 800bf26:	ec53 2b18 	vmov	r2, r3, d8
 800bf2a:	f7f4 fb65 	bl	80005f8 <__aeabi_dmul>
 800bf2e:	4622      	mov	r2, r4
 800bf30:	462b      	mov	r3, r5
 800bf32:	f7f4 f9ab 	bl	800028c <__adddf3>
 800bf36:	4642      	mov	r2, r8
 800bf38:	4682      	mov	sl, r0
 800bf3a:	468b      	mov	fp, r1
 800bf3c:	464b      	mov	r3, r9
 800bf3e:	4640      	mov	r0, r8
 800bf40:	4649      	mov	r1, r9
 800bf42:	f7f4 fb59 	bl	80005f8 <__aeabi_dmul>
 800bf46:	4b6c      	ldr	r3, [pc, #432]	; (800c0f8 <__ieee754_pow+0x758>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4606      	mov	r6, r0
 800bf4c:	460f      	mov	r7, r1
 800bf4e:	f7f4 f99d 	bl	800028c <__adddf3>
 800bf52:	4652      	mov	r2, sl
 800bf54:	465b      	mov	r3, fp
 800bf56:	f7f4 f999 	bl	800028c <__adddf3>
 800bf5a:	9c04      	ldr	r4, [sp, #16]
 800bf5c:	460d      	mov	r5, r1
 800bf5e:	4622      	mov	r2, r4
 800bf60:	460b      	mov	r3, r1
 800bf62:	4640      	mov	r0, r8
 800bf64:	4649      	mov	r1, r9
 800bf66:	f7f4 fb47 	bl	80005f8 <__aeabi_dmul>
 800bf6a:	4b63      	ldr	r3, [pc, #396]	; (800c0f8 <__ieee754_pow+0x758>)
 800bf6c:	4680      	mov	r8, r0
 800bf6e:	4689      	mov	r9, r1
 800bf70:	2200      	movs	r2, #0
 800bf72:	4620      	mov	r0, r4
 800bf74:	4629      	mov	r1, r5
 800bf76:	f7f4 f987 	bl	8000288 <__aeabi_dsub>
 800bf7a:	4632      	mov	r2, r6
 800bf7c:	463b      	mov	r3, r7
 800bf7e:	f7f4 f983 	bl	8000288 <__aeabi_dsub>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4650      	mov	r0, sl
 800bf88:	4659      	mov	r1, fp
 800bf8a:	f7f4 f97d 	bl	8000288 <__aeabi_dsub>
 800bf8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf92:	f7f4 fb31 	bl	80005f8 <__aeabi_dmul>
 800bf96:	4622      	mov	r2, r4
 800bf98:	4606      	mov	r6, r0
 800bf9a:	460f      	mov	r7, r1
 800bf9c:	462b      	mov	r3, r5
 800bf9e:	ec51 0b18 	vmov	r0, r1, d8
 800bfa2:	f7f4 fb29 	bl	80005f8 <__aeabi_dmul>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	4630      	mov	r0, r6
 800bfac:	4639      	mov	r1, r7
 800bfae:	f7f4 f96d 	bl	800028c <__adddf3>
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	460f      	mov	r7, r1
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4640      	mov	r0, r8
 800bfbc:	4649      	mov	r1, r9
 800bfbe:	f7f4 f965 	bl	800028c <__adddf3>
 800bfc2:	9c04      	ldr	r4, [sp, #16]
 800bfc4:	a33e      	add	r3, pc, #248	; (adr r3, 800c0c0 <__ieee754_pow+0x720>)
 800bfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfca:	4620      	mov	r0, r4
 800bfcc:	460d      	mov	r5, r1
 800bfce:	f7f4 fb13 	bl	80005f8 <__aeabi_dmul>
 800bfd2:	4642      	mov	r2, r8
 800bfd4:	ec41 0b18 	vmov	d8, r0, r1
 800bfd8:	464b      	mov	r3, r9
 800bfda:	4620      	mov	r0, r4
 800bfdc:	4629      	mov	r1, r5
 800bfde:	f7f4 f953 	bl	8000288 <__aeabi_dsub>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	4639      	mov	r1, r7
 800bfea:	f7f4 f94d 	bl	8000288 <__aeabi_dsub>
 800bfee:	a336      	add	r3, pc, #216	; (adr r3, 800c0c8 <__ieee754_pow+0x728>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	f7f4 fb00 	bl	80005f8 <__aeabi_dmul>
 800bff8:	a335      	add	r3, pc, #212	; (adr r3, 800c0d0 <__ieee754_pow+0x730>)
 800bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffe:	4606      	mov	r6, r0
 800c000:	460f      	mov	r7, r1
 800c002:	4620      	mov	r0, r4
 800c004:	4629      	mov	r1, r5
 800c006:	f7f4 faf7 	bl	80005f8 <__aeabi_dmul>
 800c00a:	4602      	mov	r2, r0
 800c00c:	460b      	mov	r3, r1
 800c00e:	4630      	mov	r0, r6
 800c010:	4639      	mov	r1, r7
 800c012:	f7f4 f93b 	bl	800028c <__adddf3>
 800c016:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c018:	4b38      	ldr	r3, [pc, #224]	; (800c0fc <__ieee754_pow+0x75c>)
 800c01a:	4413      	add	r3, r2
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f7f4 f934 	bl	800028c <__adddf3>
 800c024:	4682      	mov	sl, r0
 800c026:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c028:	468b      	mov	fp, r1
 800c02a:	f7f4 fa7b 	bl	8000524 <__aeabi_i2d>
 800c02e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c030:	4b33      	ldr	r3, [pc, #204]	; (800c100 <__ieee754_pow+0x760>)
 800c032:	4413      	add	r3, r2
 800c034:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c038:	4606      	mov	r6, r0
 800c03a:	460f      	mov	r7, r1
 800c03c:	4652      	mov	r2, sl
 800c03e:	465b      	mov	r3, fp
 800c040:	ec51 0b18 	vmov	r0, r1, d8
 800c044:	f7f4 f922 	bl	800028c <__adddf3>
 800c048:	4642      	mov	r2, r8
 800c04a:	464b      	mov	r3, r9
 800c04c:	f7f4 f91e 	bl	800028c <__adddf3>
 800c050:	4632      	mov	r2, r6
 800c052:	463b      	mov	r3, r7
 800c054:	f7f4 f91a 	bl	800028c <__adddf3>
 800c058:	9c04      	ldr	r4, [sp, #16]
 800c05a:	4632      	mov	r2, r6
 800c05c:	463b      	mov	r3, r7
 800c05e:	4620      	mov	r0, r4
 800c060:	460d      	mov	r5, r1
 800c062:	f7f4 f911 	bl	8000288 <__aeabi_dsub>
 800c066:	4642      	mov	r2, r8
 800c068:	464b      	mov	r3, r9
 800c06a:	f7f4 f90d 	bl	8000288 <__aeabi_dsub>
 800c06e:	ec53 2b18 	vmov	r2, r3, d8
 800c072:	f7f4 f909 	bl	8000288 <__aeabi_dsub>
 800c076:	4602      	mov	r2, r0
 800c078:	460b      	mov	r3, r1
 800c07a:	4650      	mov	r0, sl
 800c07c:	4659      	mov	r1, fp
 800c07e:	e606      	b.n	800bc8e <__ieee754_pow+0x2ee>
 800c080:	2401      	movs	r4, #1
 800c082:	e6a0      	b.n	800bdc6 <__ieee754_pow+0x426>
 800c084:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c0d8 <__ieee754_pow+0x738>
 800c088:	e60d      	b.n	800bca6 <__ieee754_pow+0x306>
 800c08a:	bf00      	nop
 800c08c:	f3af 8000 	nop.w
 800c090:	4a454eef 	.word	0x4a454eef
 800c094:	3fca7e28 	.word	0x3fca7e28
 800c098:	93c9db65 	.word	0x93c9db65
 800c09c:	3fcd864a 	.word	0x3fcd864a
 800c0a0:	a91d4101 	.word	0xa91d4101
 800c0a4:	3fd17460 	.word	0x3fd17460
 800c0a8:	518f264d 	.word	0x518f264d
 800c0ac:	3fd55555 	.word	0x3fd55555
 800c0b0:	db6fabff 	.word	0xdb6fabff
 800c0b4:	3fdb6db6 	.word	0x3fdb6db6
 800c0b8:	33333303 	.word	0x33333303
 800c0bc:	3fe33333 	.word	0x3fe33333
 800c0c0:	e0000000 	.word	0xe0000000
 800c0c4:	3feec709 	.word	0x3feec709
 800c0c8:	dc3a03fd 	.word	0xdc3a03fd
 800c0cc:	3feec709 	.word	0x3feec709
 800c0d0:	145b01f5 	.word	0x145b01f5
 800c0d4:	be3e2fe0 	.word	0xbe3e2fe0
 800c0d8:	00000000 	.word	0x00000000
 800c0dc:	3ff00000 	.word	0x3ff00000
 800c0e0:	7ff00000 	.word	0x7ff00000
 800c0e4:	43400000 	.word	0x43400000
 800c0e8:	0003988e 	.word	0x0003988e
 800c0ec:	000bb679 	.word	0x000bb679
 800c0f0:	0800c8f0 	.word	0x0800c8f0
 800c0f4:	3ff00000 	.word	0x3ff00000
 800c0f8:	40080000 	.word	0x40080000
 800c0fc:	0800c910 	.word	0x0800c910
 800c100:	0800c900 	.word	0x0800c900
 800c104:	a3b5      	add	r3, pc, #724	; (adr r3, 800c3dc <__ieee754_pow+0xa3c>)
 800c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10a:	4640      	mov	r0, r8
 800c10c:	4649      	mov	r1, r9
 800c10e:	f7f4 f8bd 	bl	800028c <__adddf3>
 800c112:	4622      	mov	r2, r4
 800c114:	ec41 0b1a 	vmov	d10, r0, r1
 800c118:	462b      	mov	r3, r5
 800c11a:	4630      	mov	r0, r6
 800c11c:	4639      	mov	r1, r7
 800c11e:	f7f4 f8b3 	bl	8000288 <__aeabi_dsub>
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	ec51 0b1a 	vmov	r0, r1, d10
 800c12a:	f7f4 fcf5 	bl	8000b18 <__aeabi_dcmpgt>
 800c12e:	2800      	cmp	r0, #0
 800c130:	f47f adf8 	bne.w	800bd24 <__ieee754_pow+0x384>
 800c134:	4aa4      	ldr	r2, [pc, #656]	; (800c3c8 <__ieee754_pow+0xa28>)
 800c136:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c13a:	4293      	cmp	r3, r2
 800c13c:	f340 810b 	ble.w	800c356 <__ieee754_pow+0x9b6>
 800c140:	151b      	asrs	r3, r3, #20
 800c142:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c146:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c14a:	fa4a f303 	asr.w	r3, sl, r3
 800c14e:	445b      	add	r3, fp
 800c150:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c154:	4e9d      	ldr	r6, [pc, #628]	; (800c3cc <__ieee754_pow+0xa2c>)
 800c156:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c15a:	4116      	asrs	r6, r2
 800c15c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c160:	2000      	movs	r0, #0
 800c162:	ea23 0106 	bic.w	r1, r3, r6
 800c166:	f1c2 0214 	rsb	r2, r2, #20
 800c16a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c16e:	fa4a fa02 	asr.w	sl, sl, r2
 800c172:	f1bb 0f00 	cmp.w	fp, #0
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	4620      	mov	r0, r4
 800c17c:	4629      	mov	r1, r5
 800c17e:	bfb8      	it	lt
 800c180:	f1ca 0a00 	rsblt	sl, sl, #0
 800c184:	f7f4 f880 	bl	8000288 <__aeabi_dsub>
 800c188:	ec41 0b19 	vmov	d9, r0, r1
 800c18c:	4642      	mov	r2, r8
 800c18e:	464b      	mov	r3, r9
 800c190:	ec51 0b19 	vmov	r0, r1, d9
 800c194:	f7f4 f87a 	bl	800028c <__adddf3>
 800c198:	2400      	movs	r4, #0
 800c19a:	a379      	add	r3, pc, #484	; (adr r3, 800c380 <__ieee754_pow+0x9e0>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	460d      	mov	r5, r1
 800c1a4:	f7f4 fa28 	bl	80005f8 <__aeabi_dmul>
 800c1a8:	ec53 2b19 	vmov	r2, r3, d9
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	460f      	mov	r7, r1
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	f7f4 f868 	bl	8000288 <__aeabi_dsub>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4640      	mov	r0, r8
 800c1be:	4649      	mov	r1, r9
 800c1c0:	f7f4 f862 	bl	8000288 <__aeabi_dsub>
 800c1c4:	a370      	add	r3, pc, #448	; (adr r3, 800c388 <__ieee754_pow+0x9e8>)
 800c1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ca:	f7f4 fa15 	bl	80005f8 <__aeabi_dmul>
 800c1ce:	a370      	add	r3, pc, #448	; (adr r3, 800c390 <__ieee754_pow+0x9f0>)
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	4680      	mov	r8, r0
 800c1d6:	4689      	mov	r9, r1
 800c1d8:	4620      	mov	r0, r4
 800c1da:	4629      	mov	r1, r5
 800c1dc:	f7f4 fa0c 	bl	80005f8 <__aeabi_dmul>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	4640      	mov	r0, r8
 800c1e6:	4649      	mov	r1, r9
 800c1e8:	f7f4 f850 	bl	800028c <__adddf3>
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	460d      	mov	r5, r1
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	4639      	mov	r1, r7
 800c1f8:	f7f4 f848 	bl	800028c <__adddf3>
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	463b      	mov	r3, r7
 800c200:	4680      	mov	r8, r0
 800c202:	4689      	mov	r9, r1
 800c204:	f7f4 f840 	bl	8000288 <__aeabi_dsub>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	4620      	mov	r0, r4
 800c20e:	4629      	mov	r1, r5
 800c210:	f7f4 f83a 	bl	8000288 <__aeabi_dsub>
 800c214:	4642      	mov	r2, r8
 800c216:	4606      	mov	r6, r0
 800c218:	460f      	mov	r7, r1
 800c21a:	464b      	mov	r3, r9
 800c21c:	4640      	mov	r0, r8
 800c21e:	4649      	mov	r1, r9
 800c220:	f7f4 f9ea 	bl	80005f8 <__aeabi_dmul>
 800c224:	a35c      	add	r3, pc, #368	; (adr r3, 800c398 <__ieee754_pow+0x9f8>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	4604      	mov	r4, r0
 800c22c:	460d      	mov	r5, r1
 800c22e:	f7f4 f9e3 	bl	80005f8 <__aeabi_dmul>
 800c232:	a35b      	add	r3, pc, #364	; (adr r3, 800c3a0 <__ieee754_pow+0xa00>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	f7f4 f826 	bl	8000288 <__aeabi_dsub>
 800c23c:	4622      	mov	r2, r4
 800c23e:	462b      	mov	r3, r5
 800c240:	f7f4 f9da 	bl	80005f8 <__aeabi_dmul>
 800c244:	a358      	add	r3, pc, #352	; (adr r3, 800c3a8 <__ieee754_pow+0xa08>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	f7f4 f81f 	bl	800028c <__adddf3>
 800c24e:	4622      	mov	r2, r4
 800c250:	462b      	mov	r3, r5
 800c252:	f7f4 f9d1 	bl	80005f8 <__aeabi_dmul>
 800c256:	a356      	add	r3, pc, #344	; (adr r3, 800c3b0 <__ieee754_pow+0xa10>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	f7f4 f814 	bl	8000288 <__aeabi_dsub>
 800c260:	4622      	mov	r2, r4
 800c262:	462b      	mov	r3, r5
 800c264:	f7f4 f9c8 	bl	80005f8 <__aeabi_dmul>
 800c268:	a353      	add	r3, pc, #332	; (adr r3, 800c3b8 <__ieee754_pow+0xa18>)
 800c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26e:	f7f4 f80d 	bl	800028c <__adddf3>
 800c272:	4622      	mov	r2, r4
 800c274:	462b      	mov	r3, r5
 800c276:	f7f4 f9bf 	bl	80005f8 <__aeabi_dmul>
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
 800c27e:	4640      	mov	r0, r8
 800c280:	4649      	mov	r1, r9
 800c282:	f7f4 f801 	bl	8000288 <__aeabi_dsub>
 800c286:	4604      	mov	r4, r0
 800c288:	460d      	mov	r5, r1
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4640      	mov	r0, r8
 800c290:	4649      	mov	r1, r9
 800c292:	f7f4 f9b1 	bl	80005f8 <__aeabi_dmul>
 800c296:	2200      	movs	r2, #0
 800c298:	ec41 0b19 	vmov	d9, r0, r1
 800c29c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	f7f3 fff0 	bl	8000288 <__aeabi_dsub>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	ec51 0b19 	vmov	r0, r1, d9
 800c2b0:	f7f4 facc 	bl	800084c <__aeabi_ddiv>
 800c2b4:	4632      	mov	r2, r6
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	460d      	mov	r5, r1
 800c2ba:	463b      	mov	r3, r7
 800c2bc:	4640      	mov	r0, r8
 800c2be:	4649      	mov	r1, r9
 800c2c0:	f7f4 f99a 	bl	80005f8 <__aeabi_dmul>
 800c2c4:	4632      	mov	r2, r6
 800c2c6:	463b      	mov	r3, r7
 800c2c8:	f7f3 ffe0 	bl	800028c <__adddf3>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	f7f3 ffd8 	bl	8000288 <__aeabi_dsub>
 800c2d8:	4642      	mov	r2, r8
 800c2da:	464b      	mov	r3, r9
 800c2dc:	f7f3 ffd4 	bl	8000288 <__aeabi_dsub>
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	493a      	ldr	r1, [pc, #232]	; (800c3d0 <__ieee754_pow+0xa30>)
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	f7f3 ffce 	bl	8000288 <__aeabi_dsub>
 800c2ec:	e9cd 0100 	strd	r0, r1, [sp]
 800c2f0:	9b01      	ldr	r3, [sp, #4]
 800c2f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c2f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2fa:	da2f      	bge.n	800c35c <__ieee754_pow+0x9bc>
 800c2fc:	4650      	mov	r0, sl
 800c2fe:	ed9d 0b00 	vldr	d0, [sp]
 800c302:	f000 f9cd 	bl	800c6a0 <scalbn>
 800c306:	ec51 0b10 	vmov	r0, r1, d0
 800c30a:	ec53 2b18 	vmov	r2, r3, d8
 800c30e:	f7ff bbe0 	b.w	800bad2 <__ieee754_pow+0x132>
 800c312:	4b30      	ldr	r3, [pc, #192]	; (800c3d4 <__ieee754_pow+0xa34>)
 800c314:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c318:	429e      	cmp	r6, r3
 800c31a:	f77f af0b 	ble.w	800c134 <__ieee754_pow+0x794>
 800c31e:	4b2e      	ldr	r3, [pc, #184]	; (800c3d8 <__ieee754_pow+0xa38>)
 800c320:	440b      	add	r3, r1
 800c322:	4303      	orrs	r3, r0
 800c324:	d00b      	beq.n	800c33e <__ieee754_pow+0x99e>
 800c326:	a326      	add	r3, pc, #152	; (adr r3, 800c3c0 <__ieee754_pow+0xa20>)
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	ec51 0b18 	vmov	r0, r1, d8
 800c330:	f7f4 f962 	bl	80005f8 <__aeabi_dmul>
 800c334:	a322      	add	r3, pc, #136	; (adr r3, 800c3c0 <__ieee754_pow+0xa20>)
 800c336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33a:	f7ff bbca 	b.w	800bad2 <__ieee754_pow+0x132>
 800c33e:	4622      	mov	r2, r4
 800c340:	462b      	mov	r3, r5
 800c342:	f7f3 ffa1 	bl	8000288 <__aeabi_dsub>
 800c346:	4642      	mov	r2, r8
 800c348:	464b      	mov	r3, r9
 800c34a:	f7f4 fbdb 	bl	8000b04 <__aeabi_dcmpge>
 800c34e:	2800      	cmp	r0, #0
 800c350:	f43f aef0 	beq.w	800c134 <__ieee754_pow+0x794>
 800c354:	e7e7      	b.n	800c326 <__ieee754_pow+0x986>
 800c356:	f04f 0a00 	mov.w	sl, #0
 800c35a:	e717      	b.n	800c18c <__ieee754_pow+0x7ec>
 800c35c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c360:	4619      	mov	r1, r3
 800c362:	e7d2      	b.n	800c30a <__ieee754_pow+0x96a>
 800c364:	491a      	ldr	r1, [pc, #104]	; (800c3d0 <__ieee754_pow+0xa30>)
 800c366:	2000      	movs	r0, #0
 800c368:	f7ff bb9e 	b.w	800baa8 <__ieee754_pow+0x108>
 800c36c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c370:	f7ff bb9a 	b.w	800baa8 <__ieee754_pow+0x108>
 800c374:	9000      	str	r0, [sp, #0]
 800c376:	f7ff bb76 	b.w	800ba66 <__ieee754_pow+0xc6>
 800c37a:	2100      	movs	r1, #0
 800c37c:	f7ff bb60 	b.w	800ba40 <__ieee754_pow+0xa0>
 800c380:	00000000 	.word	0x00000000
 800c384:	3fe62e43 	.word	0x3fe62e43
 800c388:	fefa39ef 	.word	0xfefa39ef
 800c38c:	3fe62e42 	.word	0x3fe62e42
 800c390:	0ca86c39 	.word	0x0ca86c39
 800c394:	be205c61 	.word	0xbe205c61
 800c398:	72bea4d0 	.word	0x72bea4d0
 800c39c:	3e663769 	.word	0x3e663769
 800c3a0:	c5d26bf1 	.word	0xc5d26bf1
 800c3a4:	3ebbbd41 	.word	0x3ebbbd41
 800c3a8:	af25de2c 	.word	0xaf25de2c
 800c3ac:	3f11566a 	.word	0x3f11566a
 800c3b0:	16bebd93 	.word	0x16bebd93
 800c3b4:	3f66c16c 	.word	0x3f66c16c
 800c3b8:	5555553e 	.word	0x5555553e
 800c3bc:	3fc55555 	.word	0x3fc55555
 800c3c0:	c2f8f359 	.word	0xc2f8f359
 800c3c4:	01a56e1f 	.word	0x01a56e1f
 800c3c8:	3fe00000 	.word	0x3fe00000
 800c3cc:	000fffff 	.word	0x000fffff
 800c3d0:	3ff00000 	.word	0x3ff00000
 800c3d4:	4090cbff 	.word	0x4090cbff
 800c3d8:	3f6f3400 	.word	0x3f6f3400
 800c3dc:	652b82fe 	.word	0x652b82fe
 800c3e0:	3c971547 	.word	0x3c971547

0800c3e4 <__ieee754_sqrt>:
 800c3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e8:	ec55 4b10 	vmov	r4, r5, d0
 800c3ec:	4e56      	ldr	r6, [pc, #344]	; (800c548 <__ieee754_sqrt+0x164>)
 800c3ee:	43ae      	bics	r6, r5
 800c3f0:	ee10 0a10 	vmov	r0, s0
 800c3f4:	ee10 3a10 	vmov	r3, s0
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	462a      	mov	r2, r5
 800c3fc:	d110      	bne.n	800c420 <__ieee754_sqrt+0x3c>
 800c3fe:	ee10 2a10 	vmov	r2, s0
 800c402:	462b      	mov	r3, r5
 800c404:	f7f4 f8f8 	bl	80005f8 <__aeabi_dmul>
 800c408:	4602      	mov	r2, r0
 800c40a:	460b      	mov	r3, r1
 800c40c:	4620      	mov	r0, r4
 800c40e:	4629      	mov	r1, r5
 800c410:	f7f3 ff3c 	bl	800028c <__adddf3>
 800c414:	4604      	mov	r4, r0
 800c416:	460d      	mov	r5, r1
 800c418:	ec45 4b10 	vmov	d0, r4, r5
 800c41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c420:	2d00      	cmp	r5, #0
 800c422:	dc10      	bgt.n	800c446 <__ieee754_sqrt+0x62>
 800c424:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c428:	4330      	orrs	r0, r6
 800c42a:	d0f5      	beq.n	800c418 <__ieee754_sqrt+0x34>
 800c42c:	b15d      	cbz	r5, 800c446 <__ieee754_sqrt+0x62>
 800c42e:	ee10 2a10 	vmov	r2, s0
 800c432:	462b      	mov	r3, r5
 800c434:	ee10 0a10 	vmov	r0, s0
 800c438:	f7f3 ff26 	bl	8000288 <__aeabi_dsub>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	f7f4 fa04 	bl	800084c <__aeabi_ddiv>
 800c444:	e7e6      	b.n	800c414 <__ieee754_sqrt+0x30>
 800c446:	1509      	asrs	r1, r1, #20
 800c448:	d076      	beq.n	800c538 <__ieee754_sqrt+0x154>
 800c44a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c44e:	07ce      	lsls	r6, r1, #31
 800c450:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c454:	bf5e      	ittt	pl
 800c456:	0fda      	lsrpl	r2, r3, #31
 800c458:	005b      	lslpl	r3, r3, #1
 800c45a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c45e:	0fda      	lsrs	r2, r3, #31
 800c460:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c464:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c468:	2000      	movs	r0, #0
 800c46a:	106d      	asrs	r5, r5, #1
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	f04f 0e16 	mov.w	lr, #22
 800c472:	4684      	mov	ip, r0
 800c474:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c478:	eb0c 0401 	add.w	r4, ip, r1
 800c47c:	4294      	cmp	r4, r2
 800c47e:	bfde      	ittt	le
 800c480:	1b12      	suble	r2, r2, r4
 800c482:	eb04 0c01 	addle.w	ip, r4, r1
 800c486:	1840      	addle	r0, r0, r1
 800c488:	0052      	lsls	r2, r2, #1
 800c48a:	f1be 0e01 	subs.w	lr, lr, #1
 800c48e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c492:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c496:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c49a:	d1ed      	bne.n	800c478 <__ieee754_sqrt+0x94>
 800c49c:	4671      	mov	r1, lr
 800c49e:	2720      	movs	r7, #32
 800c4a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c4a4:	4562      	cmp	r2, ip
 800c4a6:	eb04 060e 	add.w	r6, r4, lr
 800c4aa:	dc02      	bgt.n	800c4b2 <__ieee754_sqrt+0xce>
 800c4ac:	d113      	bne.n	800c4d6 <__ieee754_sqrt+0xf2>
 800c4ae:	429e      	cmp	r6, r3
 800c4b0:	d811      	bhi.n	800c4d6 <__ieee754_sqrt+0xf2>
 800c4b2:	2e00      	cmp	r6, #0
 800c4b4:	eb06 0e04 	add.w	lr, r6, r4
 800c4b8:	da43      	bge.n	800c542 <__ieee754_sqrt+0x15e>
 800c4ba:	f1be 0f00 	cmp.w	lr, #0
 800c4be:	db40      	blt.n	800c542 <__ieee754_sqrt+0x15e>
 800c4c0:	f10c 0801 	add.w	r8, ip, #1
 800c4c4:	eba2 020c 	sub.w	r2, r2, ip
 800c4c8:	429e      	cmp	r6, r3
 800c4ca:	bf88      	it	hi
 800c4cc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c4d0:	1b9b      	subs	r3, r3, r6
 800c4d2:	4421      	add	r1, r4
 800c4d4:	46c4      	mov	ip, r8
 800c4d6:	0052      	lsls	r2, r2, #1
 800c4d8:	3f01      	subs	r7, #1
 800c4da:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c4de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c4e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c4e6:	d1dd      	bne.n	800c4a4 <__ieee754_sqrt+0xc0>
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	d006      	beq.n	800c4fa <__ieee754_sqrt+0x116>
 800c4ec:	1c4c      	adds	r4, r1, #1
 800c4ee:	bf13      	iteet	ne
 800c4f0:	3101      	addne	r1, #1
 800c4f2:	3001      	addeq	r0, #1
 800c4f4:	4639      	moveq	r1, r7
 800c4f6:	f021 0101 	bicne.w	r1, r1, #1
 800c4fa:	1043      	asrs	r3, r0, #1
 800c4fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c500:	0849      	lsrs	r1, r1, #1
 800c502:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c506:	07c2      	lsls	r2, r0, #31
 800c508:	bf48      	it	mi
 800c50a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c50e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c512:	460c      	mov	r4, r1
 800c514:	463d      	mov	r5, r7
 800c516:	e77f      	b.n	800c418 <__ieee754_sqrt+0x34>
 800c518:	0ada      	lsrs	r2, r3, #11
 800c51a:	3815      	subs	r0, #21
 800c51c:	055b      	lsls	r3, r3, #21
 800c51e:	2a00      	cmp	r2, #0
 800c520:	d0fa      	beq.n	800c518 <__ieee754_sqrt+0x134>
 800c522:	02d7      	lsls	r7, r2, #11
 800c524:	d50a      	bpl.n	800c53c <__ieee754_sqrt+0x158>
 800c526:	f1c1 0420 	rsb	r4, r1, #32
 800c52a:	fa23 f404 	lsr.w	r4, r3, r4
 800c52e:	1e4d      	subs	r5, r1, #1
 800c530:	408b      	lsls	r3, r1
 800c532:	4322      	orrs	r2, r4
 800c534:	1b41      	subs	r1, r0, r5
 800c536:	e788      	b.n	800c44a <__ieee754_sqrt+0x66>
 800c538:	4608      	mov	r0, r1
 800c53a:	e7f0      	b.n	800c51e <__ieee754_sqrt+0x13a>
 800c53c:	0052      	lsls	r2, r2, #1
 800c53e:	3101      	adds	r1, #1
 800c540:	e7ef      	b.n	800c522 <__ieee754_sqrt+0x13e>
 800c542:	46e0      	mov	r8, ip
 800c544:	e7be      	b.n	800c4c4 <__ieee754_sqrt+0xe0>
 800c546:	bf00      	nop
 800c548:	7ff00000 	.word	0x7ff00000

0800c54c <fabs>:
 800c54c:	ec51 0b10 	vmov	r0, r1, d0
 800c550:	ee10 2a10 	vmov	r2, s0
 800c554:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c558:	ec43 2b10 	vmov	d0, r2, r3
 800c55c:	4770      	bx	lr

0800c55e <finite>:
 800c55e:	b082      	sub	sp, #8
 800c560:	ed8d 0b00 	vstr	d0, [sp]
 800c564:	9801      	ldr	r0, [sp, #4]
 800c566:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c56a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c56e:	0fc0      	lsrs	r0, r0, #31
 800c570:	b002      	add	sp, #8
 800c572:	4770      	bx	lr
 800c574:	0000      	movs	r0, r0
	...

0800c578 <nan>:
 800c578:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c580 <nan+0x8>
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	00000000 	.word	0x00000000
 800c584:	7ff80000 	.word	0x7ff80000

0800c588 <rint>:
 800c588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c58a:	ec51 0b10 	vmov	r0, r1, d0
 800c58e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c592:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c596:	2e13      	cmp	r6, #19
 800c598:	ee10 4a10 	vmov	r4, s0
 800c59c:	460b      	mov	r3, r1
 800c59e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c5a2:	dc58      	bgt.n	800c656 <rint+0xce>
 800c5a4:	2e00      	cmp	r6, #0
 800c5a6:	da2b      	bge.n	800c600 <rint+0x78>
 800c5a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c5ac:	4302      	orrs	r2, r0
 800c5ae:	d023      	beq.n	800c5f8 <rint+0x70>
 800c5b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c5b4:	4302      	orrs	r2, r0
 800c5b6:	4254      	negs	r4, r2
 800c5b8:	4314      	orrs	r4, r2
 800c5ba:	0c4b      	lsrs	r3, r1, #17
 800c5bc:	0b24      	lsrs	r4, r4, #12
 800c5be:	045b      	lsls	r3, r3, #17
 800c5c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c5c4:	ea44 0103 	orr.w	r1, r4, r3
 800c5c8:	4b32      	ldr	r3, [pc, #200]	; (800c694 <rint+0x10c>)
 800c5ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c5ce:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	4639      	mov	r1, r7
 800c5da:	f7f3 fe57 	bl	800028c <__adddf3>
 800c5de:	e9cd 0100 	strd	r0, r1, [sp]
 800c5e2:	463b      	mov	r3, r7
 800c5e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5e8:	4632      	mov	r2, r6
 800c5ea:	f7f3 fe4d 	bl	8000288 <__aeabi_dsub>
 800c5ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c5f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	ec41 0b10 	vmov	d0, r0, r1
 800c5fc:	b003      	add	sp, #12
 800c5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c600:	4a25      	ldr	r2, [pc, #148]	; (800c698 <rint+0x110>)
 800c602:	4132      	asrs	r2, r6
 800c604:	ea01 0702 	and.w	r7, r1, r2
 800c608:	4307      	orrs	r7, r0
 800c60a:	d0f5      	beq.n	800c5f8 <rint+0x70>
 800c60c:	0851      	lsrs	r1, r2, #1
 800c60e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c612:	4314      	orrs	r4, r2
 800c614:	d00c      	beq.n	800c630 <rint+0xa8>
 800c616:	ea23 0201 	bic.w	r2, r3, r1
 800c61a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c61e:	2e13      	cmp	r6, #19
 800c620:	fa43 f606 	asr.w	r6, r3, r6
 800c624:	bf0c      	ite	eq
 800c626:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c62a:	2400      	movne	r4, #0
 800c62c:	ea42 0306 	orr.w	r3, r2, r6
 800c630:	4918      	ldr	r1, [pc, #96]	; (800c694 <rint+0x10c>)
 800c632:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c636:	4622      	mov	r2, r4
 800c638:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c63c:	4620      	mov	r0, r4
 800c63e:	4629      	mov	r1, r5
 800c640:	f7f3 fe24 	bl	800028c <__adddf3>
 800c644:	e9cd 0100 	strd	r0, r1, [sp]
 800c648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c64c:	4622      	mov	r2, r4
 800c64e:	462b      	mov	r3, r5
 800c650:	f7f3 fe1a 	bl	8000288 <__aeabi_dsub>
 800c654:	e7d0      	b.n	800c5f8 <rint+0x70>
 800c656:	2e33      	cmp	r6, #51	; 0x33
 800c658:	dd07      	ble.n	800c66a <rint+0xe2>
 800c65a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c65e:	d1cb      	bne.n	800c5f8 <rint+0x70>
 800c660:	ee10 2a10 	vmov	r2, s0
 800c664:	f7f3 fe12 	bl	800028c <__adddf3>
 800c668:	e7c6      	b.n	800c5f8 <rint+0x70>
 800c66a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c66e:	f04f 36ff 	mov.w	r6, #4294967295
 800c672:	40d6      	lsrs	r6, r2
 800c674:	4230      	tst	r0, r6
 800c676:	d0bf      	beq.n	800c5f8 <rint+0x70>
 800c678:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800c67c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800c680:	bf1f      	itttt	ne
 800c682:	ea24 0101 	bicne.w	r1, r4, r1
 800c686:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c68a:	fa44 f202 	asrne.w	r2, r4, r2
 800c68e:	ea41 0402 	orrne.w	r4, r1, r2
 800c692:	e7cd      	b.n	800c630 <rint+0xa8>
 800c694:	0800c920 	.word	0x0800c920
 800c698:	000fffff 	.word	0x000fffff
 800c69c:	00000000 	.word	0x00000000

0800c6a0 <scalbn>:
 800c6a0:	b570      	push	{r4, r5, r6, lr}
 800c6a2:	ec55 4b10 	vmov	r4, r5, d0
 800c6a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	462b      	mov	r3, r5
 800c6ae:	b99a      	cbnz	r2, 800c6d8 <scalbn+0x38>
 800c6b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c6b4:	4323      	orrs	r3, r4
 800c6b6:	d036      	beq.n	800c726 <scalbn+0x86>
 800c6b8:	4b39      	ldr	r3, [pc, #228]	; (800c7a0 <scalbn+0x100>)
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	ee10 0a10 	vmov	r0, s0
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f7f3 ff99 	bl	80005f8 <__aeabi_dmul>
 800c6c6:	4b37      	ldr	r3, [pc, #220]	; (800c7a4 <scalbn+0x104>)
 800c6c8:	429e      	cmp	r6, r3
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	460d      	mov	r5, r1
 800c6ce:	da10      	bge.n	800c6f2 <scalbn+0x52>
 800c6d0:	a32b      	add	r3, pc, #172	; (adr r3, 800c780 <scalbn+0xe0>)
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	e03a      	b.n	800c74e <scalbn+0xae>
 800c6d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c6dc:	428a      	cmp	r2, r1
 800c6de:	d10c      	bne.n	800c6fa <scalbn+0x5a>
 800c6e0:	ee10 2a10 	vmov	r2, s0
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	f7f3 fdd0 	bl	800028c <__adddf3>
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	460d      	mov	r5, r1
 800c6f0:	e019      	b.n	800c726 <scalbn+0x86>
 800c6f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	3a36      	subs	r2, #54	; 0x36
 800c6fa:	4432      	add	r2, r6
 800c6fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c700:	428a      	cmp	r2, r1
 800c702:	dd08      	ble.n	800c716 <scalbn+0x76>
 800c704:	2d00      	cmp	r5, #0
 800c706:	a120      	add	r1, pc, #128	; (adr r1, 800c788 <scalbn+0xe8>)
 800c708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c70c:	da1c      	bge.n	800c748 <scalbn+0xa8>
 800c70e:	a120      	add	r1, pc, #128	; (adr r1, 800c790 <scalbn+0xf0>)
 800c710:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c714:	e018      	b.n	800c748 <scalbn+0xa8>
 800c716:	2a00      	cmp	r2, #0
 800c718:	dd08      	ble.n	800c72c <scalbn+0x8c>
 800c71a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c71e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c722:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c726:	ec45 4b10 	vmov	d0, r4, r5
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
 800c72c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c730:	da19      	bge.n	800c766 <scalbn+0xc6>
 800c732:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c736:	429e      	cmp	r6, r3
 800c738:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c73c:	dd0a      	ble.n	800c754 <scalbn+0xb4>
 800c73e:	a112      	add	r1, pc, #72	; (adr r1, 800c788 <scalbn+0xe8>)
 800c740:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1e2      	bne.n	800c70e <scalbn+0x6e>
 800c748:	a30f      	add	r3, pc, #60	; (adr r3, 800c788 <scalbn+0xe8>)
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f7f3 ff53 	bl	80005f8 <__aeabi_dmul>
 800c752:	e7cb      	b.n	800c6ec <scalbn+0x4c>
 800c754:	a10a      	add	r1, pc, #40	; (adr r1, 800c780 <scalbn+0xe0>)
 800c756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0b8      	beq.n	800c6d0 <scalbn+0x30>
 800c75e:	a10e      	add	r1, pc, #56	; (adr r1, 800c798 <scalbn+0xf8>)
 800c760:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c764:	e7b4      	b.n	800c6d0 <scalbn+0x30>
 800c766:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c76a:	3236      	adds	r2, #54	; 0x36
 800c76c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c770:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c774:	4620      	mov	r0, r4
 800c776:	4b0c      	ldr	r3, [pc, #48]	; (800c7a8 <scalbn+0x108>)
 800c778:	2200      	movs	r2, #0
 800c77a:	e7e8      	b.n	800c74e <scalbn+0xae>
 800c77c:	f3af 8000 	nop.w
 800c780:	c2f8f359 	.word	0xc2f8f359
 800c784:	01a56e1f 	.word	0x01a56e1f
 800c788:	8800759c 	.word	0x8800759c
 800c78c:	7e37e43c 	.word	0x7e37e43c
 800c790:	8800759c 	.word	0x8800759c
 800c794:	fe37e43c 	.word	0xfe37e43c
 800c798:	c2f8f359 	.word	0xc2f8f359
 800c79c:	81a56e1f 	.word	0x81a56e1f
 800c7a0:	43500000 	.word	0x43500000
 800c7a4:	ffff3cb0 	.word	0xffff3cb0
 800c7a8:	3c900000 	.word	0x3c900000

0800c7ac <_init>:
 800c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ae:	bf00      	nop
 800c7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7b2:	bc08      	pop	{r3}
 800c7b4:	469e      	mov	lr, r3
 800c7b6:	4770      	bx	lr

0800c7b8 <_fini>:
 800c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ba:	bf00      	nop
 800c7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7be:	bc08      	pop	{r3}
 800c7c0:	469e      	mov	lr, r3
 800c7c2:	4770      	bx	lr
